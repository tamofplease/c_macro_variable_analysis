<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/dnsmasq/rfc1035.c"><comment type="block">/* dnsmasq is Copyright (c) 2000-2022 Simon Kelley

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 dated June, 1991, or
   (at your option) version 3 dated 29 June, 2007.
 
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
     
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnsmasq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../dnsmasq_interface.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>extract_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>plen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>, 
		 <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>isExtract</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>extrabytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>pp</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>namelen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>hops</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>retvalue</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>isExtract</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content> 
      <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>label_type</name></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CHECK_LEN</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>l</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 
	<comment type="block">/* end marker */</comment>
	<block>{<block_content>
	  <comment type="block">/* check that there are the correct no. of bytes after the name */</comment>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CHECK_LEN</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><ternary><condition><expr><name>p1</name></expr> ?</condition><then> <expr><name>p1</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>extrabytes</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name>isExtract</name></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><name>cp</name> <operator>!=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>cp</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      <expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* terminate: lose final period */</comment>
	    </block_content>}</block></if>
	  <if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>retvalue</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name>p1</name></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* we jumped via compression */</comment>
	    <expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>p1</name></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	  
	  <return>return <expr><name>retvalue</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>label_type</name> <operator>=</operator> <name>l</name> <operator>&amp;</operator> <literal type="number">0xc0</literal></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>label_type</name> <operator>==</operator> <literal type="number">0xc0</literal></expr>)</condition> <comment type="block">/* pointer */</comment>
	<block>{<block_content> 
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CHECK_LEN</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	      
	  <comment type="block">/* get offset */</comment>
	  <expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name>l</name><operator>&amp;</operator><literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name>l</name> <operator>|=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p1</name></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* first jump, save location to go back to */</comment>
	    <expr_stmt><expr><name>p1</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      
	  <expr_stmt><expr><name>hops</name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* break malicious infinite loops */</comment>
	  <if_stmt><if>if <condition>(<expr><name>hops</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	  
	  <expr_stmt><expr><name>p</name> <operator>=</operator> <name>l</name> <operator>+</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>header</name></expr>;</expr_stmt>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><name>label_type</name> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition>
	<block>{<block_content> <comment type="block">/* label_type = 0 -&gt; label. */</comment>
	  <expr_stmt><expr><name>namelen</name> <operator>+=</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* include period */</comment>
	  <if_stmt><if>if <condition>(<expr><name>namelen</name> <operator>&gt;=</operator> <name>MAXDNAME</name></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CHECK_LEN</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	  
	  <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>l</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><name>isExtract</name></expr>)</condition>
	      <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DNSSEC_VALID</name></expr></argument>)</argument_list></call></expr>)</condition>
		  <block>{<block_content>
		    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <name>NAME_ESCAPE</name></expr>)</condition>
		      <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <name>NAME_ESCAPE</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <name>c</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
		      </block_content>}</block></if>
		    <else>else<block type="pseudo"><block_content>
		      <expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 
		  </block_content>}</block></if>
		<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
		  <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
	      </block_content>}</block></if>
	    <else>else 
	      <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c1</name> <init>= <expr><operator>*</operator><name>cp</name></expr></init></decl>, <decl><type ref="prev"/><name>c2</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name>retvalue</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else 
		  <block>{<block_content>
		    <expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>
		    <if_stmt><if>if <condition>(<expr><name>c1</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c1</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content>
		      <expr_stmt><expr><name>c1</name> <operator>+=</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
		    <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DNSSEC_VALID</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c1</name> <operator>==</operator> <name>NAME_ESCAPE</name></expr>)</condition><block type="pseudo"><block_content>
		      <expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>cp</name><operator>++</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		    
		    <if_stmt><if>if <condition>(<expr><name>c2</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c2</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content>
		      <expr_stmt><expr><name>c2</name> <operator>+=</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		     
		    <if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content>
		      <expr_stmt><expr><name>retvalue</name> <operator>=</operator>  <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  </block_content>}</block></else></if_stmt>
	      </block_content>}</block></else></if_stmt></block_content></block></for>
	    
	  <if_stmt><if>if <condition>(<expr><name>isExtract</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt></block_content></block></if>
	  <if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>cp</name><operator>++</operator> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>retvalue</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
      <else>else<block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt> <comment type="block">/* label types 0x40 and 0x80 not supported */</comment>
    </block_content>}</block></while>
</block_content>}</block></function>
 
<comment type="block">/* Max size of input string (for IPv6) is 75 chars.) */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXARPANAME</name></cpp:macro> <cpp:value>75</cpp:value></cpp:define>
<function><type><name>int</name></type> <name>in_arpa_name_2_addr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>namein</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>all_addr</name></name> <modifier>*</modifier></type><name>addrp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>MAXARPANAME</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cp1</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>addrp</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lastchunk</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>penchunk</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>namein</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>MAXARPANAME</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>addrp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>union <name>all_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* turn name into a series of asciiz strings */</comment>
  <comment type="block">/* j counts no. of labels */</comment>
  <for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator><expr><name>cp1</name> <operator>=</operator> <name>name</name></expr>;</init> <condition><expr><operator>*</operator><name>namein</name></expr>;</condition> <incr><expr><name>cp1</name><operator>++</operator></expr><operator>,</operator> <expr><name>namein</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>namein</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>
      <block>{<block_content>
	<expr_stmt><expr><name>penchunk</name> <operator>=</operator> <name>lastchunk</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>lastchunk</name> <operator>=</operator> <name>cp1</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>cp1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><operator>*</operator><name>cp1</name> <operator>=</operator> <operator>*</operator><name>namein</name></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>
  
  <expr_stmt><expr><operator>*</operator><name>cp1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>j</name><operator>&lt;</operator><literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>hostname_isequal</name><argument_list>(<argument><expr><name>lastchunk</name></expr></argument>, <argument><expr><literal type="string">"arpa"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>hostname_isequal</name><argument_list>(<argument><expr><name>penchunk</name></expr></argument>, <argument><expr><literal type="string">"in-addr"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* IP v4 */</comment>
      <comment type="block">/* address arrives as a name of the form
	 www.xxx.yyy.zzz.in-addr.arpa
	 some of the low order address octets might be missing
	 and should be set to zero. */</comment>
      <for>for <control>(<init><expr><name>cp1</name> <operator>=</operator> <name>name</name></expr>;</init> <condition><expr><name>cp1</name> <operator>!=</operator> <name>penchunk</name></expr>;</condition> <incr><expr><name>cp1</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>cp1</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></incr>)</control>
	<block>{<block_content>
	  <comment type="block">/* check for digits only (weeds out things like
	     50.0/24.67.28.64.in-addr.arpa which are used 
	     as CNAME targets according to RFC 2317 */</comment>
	  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
	  <for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>cp1</name></expr>;</init> <condition><expr><operator>*</operator><name>cp</name></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	      <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
	  
	  <expr_stmt><expr><name><name>addr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>addr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>addr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>addr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>addr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>cp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

      <return>return <expr><name>F_IPV4</name></expr>;</return>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><call><name>hostname_isequal</name><argument_list>(<argument><expr><name>penchunk</name></expr></argument>, <argument><expr><literal type="string">"ip6"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> 
	   <operator>(</operator><call><name>hostname_isequal</name><argument_list>(<argument><expr><name>lastchunk</name></expr></argument>, <argument><expr><literal type="string">"int"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>hostname_isequal</name><argument_list>(<argument><expr><name>lastchunk</name></expr></argument>, <argument><expr><literal type="string">"arpa"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* IP v6:
         Address arrives as 0.1.2.3.4.5.6.7.8.9.a.b.c.d.e.f.ip6.[int|arpa]
    	 or \[xfedcba9876543210fedcba9876543210/128].ip6.[int|arpa]
      
	 Note that most of these the various representations are obsolete and 
	 left-over from the many DNS-for-IPv6 wars. We support all the formats
	 that we can since there is no reason not to.
      */</comment>

      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>name</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'['</literal> <operator>&amp;&amp;</operator> 
	  <operator>(</operator><operator>*</operator><operator>(</operator><name>name</name><operator>+</operator><literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="char">'x'</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><name>name</name><operator>+</operator><literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="char">'X'</literal><operator>)</operator></expr>)</condition>
	<block>{<block_content>	  
	  <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>cp1</name> <operator>=</operator> <name>name</name><operator>+</operator><literal type="number">3</literal></expr>;</init> <condition><expr><operator>*</operator><name>cp1</name> <operator>&amp;&amp;</operator> <call><name>isxdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>cp1</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>cp1</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name>char</name></type> <name><name>xdig</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	      <expr_stmt><expr><name><name>xdig</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>cp1</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>xdig</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><name>j</name><operator>%</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>addr</name><index>[<expr><name>j</name><operator>/</operator><literal type="number">2</literal></expr>]</index></name> <operator>|=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>xdig</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	      <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>addr</name><index>[<expr><name>j</name><operator>/</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>xdig</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
	    </block_content>}</block></for>
	  
	  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp1</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><name>F_IPV6</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <for>for <control>(<init><expr><name>cp1</name> <operator>=</operator> <name>name</name></expr>;</init> <condition><expr><name>cp1</name> <operator>!=</operator> <name>penchunk</name></expr>;</condition> <incr><expr><name>cp1</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>cp1</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></incr>)</control>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>cp1</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>isxdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>cp1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	      
	      <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>in6_addr</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name><operator>&gt;</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>addr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>addr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>addr</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
	      <expr_stmt><expr><name><name>addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><call><name>strtol</name><argument_list>(<argument><expr><name>cp1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
	    </block_content>}</block></for>
	  
	  <return>return <expr><name>F_IPV6</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>skip_name</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ansp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>plen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>extrabytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>label_type</name></decl>;</decl_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CHECK_LEN</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>ansp</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
      
      <expr_stmt><expr><name>label_type</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>ansp</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xc0</literal></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>label_type</name> <operator>==</operator> <literal type="number">0xc0</literal></expr>)</condition>
	<block>{<block_content>
	  <comment type="block">/* pointer for compression. */</comment>
	  <expr_stmt><expr><name>ansp</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>	
	  <break>break;</break>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><name>label_type</name> <operator>==</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if> <comment type="block">/* reserved */</comment>
      <if type="elseif">else if <condition>(<expr><name>label_type</name> <operator>==</operator> <literal type="number">0x40</literal></expr>)</condition>
	<block>{<block_content>
	  <comment type="block">/* Extended label type */</comment>
	  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name></decl>;</decl_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CHECK_LEN</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>ansp</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>*</operator><name>ansp</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* we only understand bitstrings */</comment>
	  
	  <expr_stmt><expr><name>count</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>ansp</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt> <comment type="block">/* Bits in bitstring */</comment>
	  
	  <if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* count == 0 means 256 bits */</comment>
	    <expr_stmt><expr><name>ansp</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><name>ansp</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>count</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content> <comment type="block">/* label type == 0 Bottom six bits is length */</comment>
	  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><operator>*</operator><name>ansp</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr></init></decl>;</decl_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ADD_RDLEN</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>ansp</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <break>break;</break></block_content></block></if></if_stmt> <comment type="block">/* zero length label marks the end. */</comment>
	</block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CHECK_LEN</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>ansp</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>extrabytes</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  
  <return>return <expr><name>ansp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>skip_questions</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>plen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>q</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ansp</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>header</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>q</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>qdcount</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>q</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>q</name><operator>--</operator></expr></incr>)</control>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ansp</name> <operator>=</operator> <call><name>skip_name</name><argument_list>(<argument><expr><name>ansp</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>ansp</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <comment type="block">/* class and type */</comment>
    </block_content>}</block></for>
  
  <return>return <expr><name>ansp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>skip_section</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ansp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>plen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>rdlen</name></decl>;</decl_stmt>
  
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ansp</name> <operator>=</operator> <call><name>skip_name</name><argument_list>(<argument><expr><name>ansp</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 
      <expr_stmt><expr><name>ansp</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt> <comment type="block">/* type, class, TTL */</comment>
      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>rdlen</name></expr></argument>, <argument><expr><name>ansp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ADD_RDLEN</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>ansp</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>rdlen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>

  <return>return <expr><name>ansp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>resize_packet</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>plen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pheader</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ansp</name> <init>= <expr><call><name>skip_questions</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
  <comment type="block">/* if packet is malformed, just return as-is. */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ansp</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>plen</name></expr>;</return></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ansp</name> <operator>=</operator> <call><name>skip_section</name><argument_list>(<argument><expr><name>ansp</name></expr></argument>, <argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>ancount</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>nscount</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>arcount</name></name></expr></argument>)</argument_list></call></expr></argument>,
			    <argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>plen</name></expr>;</return></block_content></block></if></if_stmt>
    
  <comment type="block">/* restore pseudoheader */</comment>
  <if_stmt><if>if <condition>(<expr><name>pheader</name> <operator>&amp;&amp;</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>arcount</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* must use memmove, may overlap */</comment>
      <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>ansp</name></expr></argument>, <argument><expr><name>pheader</name></expr></argument>, <argument><expr><name>hlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>arcount</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ansp</name> <operator>+=</operator> <name>hlen</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <return>return <expr><name>ansp</name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>header</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* is addr in the non-globally-routed IP space? */</comment> 
<function><type><name>int</name></type> <name>private_net</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ban_localhost</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
  <decl_stmt><decl><type><name>in_addr_t</name></type> <name>ip_addr</name> <init>= <expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <return>return
    <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>ip_addr</name> <operator>&amp;</operator> <literal type="number">0xFF000000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x7F000000</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>ban_localhost</name><operator>)</operator>  <comment type="block">/* 127.0.0.0/8    (loopback) */</comment> <operator>||</operator>
    <operator>(</operator><operator>(</operator><operator>(</operator><name>ip_addr</name> <operator>&amp;</operator> <literal type="number">0xFF000000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000000</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>ban_localhost</name><operator>)</operator> <comment type="block">/* RFC 5735 section 3. "here" network */</comment> <operator>||</operator>
    <operator>(</operator><operator>(</operator><name>ip_addr</name> <operator>&amp;</operator> <literal type="number">0xFF000000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x0A000000</literal><operator>)</operator>  <comment type="block">/* 10.0.0.0/8     (private)  */</comment> <operator>||</operator>
    <operator>(</operator><operator>(</operator><name>ip_addr</name> <operator>&amp;</operator> <literal type="number">0xFFF00000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xAC100000</literal><operator>)</operator>  <comment type="block">/* 172.16.0.0/12  (private)  */</comment> <operator>||</operator>
    <operator>(</operator><operator>(</operator><name>ip_addr</name> <operator>&amp;</operator> <literal type="number">0xFFFF0000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xC0A80000</literal><operator>)</operator>  <comment type="block">/* 192.168.0.0/16 (private)  */</comment> <operator>||</operator>
    <operator>(</operator><operator>(</operator><name>ip_addr</name> <operator>&amp;</operator> <literal type="number">0xFFFF0000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xA9FE0000</literal><operator>)</operator>  <comment type="block">/* 169.254.0.0/16 (zeroconf) */</comment> <operator>||</operator>
    <operator>(</operator><operator>(</operator><name>ip_addr</name> <operator>&amp;</operator> <literal type="number">0xFFFFFF00</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xC0000200</literal><operator>)</operator>  <comment type="block">/* 192.0.2.0/24   (test-net) */</comment> <operator>||</operator>
    <operator>(</operator><operator>(</operator><name>ip_addr</name> <operator>&amp;</operator> <literal type="number">0xFFFFFF00</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xC6336400</literal><operator>)</operator>  <comment type="block">/* 198.51.100.0/24(test-net) */</comment> <operator>||</operator>
    <operator>(</operator><operator>(</operator><name>ip_addr</name> <operator>&amp;</operator> <literal type="number">0xFFFFFF00</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xCB007100</literal><operator>)</operator>  <comment type="block">/* 203.0.113.0/24 (test-net) */</comment> <operator>||</operator>
    <operator>(</operator><operator>(</operator><name>ip_addr</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFF</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xFFFFFFFF</literal><operator>)</operator></expr>  <comment type="block">/* 255.255.255.255/32 (broadcast)*/</comment> ;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>private_net6</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ban_localhost</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Block IPv4-mapped IPv6 addresses in private IPv4 address space */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>IN6_IS_ADDR_V4MAPPED</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>v4</name></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>v4</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>a</name><operator>)</operator><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index></expr>;</expr_stmt>
      <return>return <expr><call><name>private_net</name><argument_list>(<argument><expr><name>v4</name></expr></argument>, <argument><expr><name>ban_localhost</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

  <return>return
    <expr><operator>(</operator><call><name>IN6_IS_ADDR_UNSPECIFIED</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>ban_localhost</name><operator>)</operator> <operator>||</operator> <comment type="block">/* RFC 6303 4.3 */</comment>
    <operator>(</operator><call><name>IN6_IS_ADDR_LOOPBACK</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>ban_localhost</name><operator>)</operator> <operator>||</operator>    <comment type="block">/* RFC 6303 4.3 */</comment>
    <call><name>IN6_IS_ADDR_LINKLOCAL</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>||</operator>   <comment type="block">/* RFC 6303 4.5 */</comment>
    <call><name>IN6_IS_ADDR_SITELOCAL</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>||</operator>
    <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>a</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <literal type="number">0xfd</literal> <operator>||</operator>   <comment type="block">/* RFC 6303 4.4 */</comment>
    <operator>(</operator><operator>(</operator><name>u32</name> <operator>*</operator><operator>)</operator><name>a</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <call><name>htonl</name><argument_list>(<argument><expr><literal type="number">0x20010db8</literal></expr></argument>)</argument_list></call></expr>;</return> <comment type="block">/* RFC 6303 4.6 */</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>do_doctor</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>qlen</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>doctored</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>qtype</name></decl>, <decl><type ref="prev"/><name>qclass</name></decl>, <decl><type ref="prev"/><name>rdlen</name></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>count</name></expr>;</init> <condition><expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>skip_name</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* bad packet */</comment>
      
      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>qtype</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>qclass</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <comment type="block">/* ttl */</comment>
      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>rdlen</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>qclass</name> <operator>==</operator> <name>C_IN</name> <operator>&amp;&amp;</operator> <name>qtype</name> <operator>==</operator> <name>T_A</name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name><name>struct</name> <name>doctor</name></name> <modifier>*</modifier></type><name>doctor</name></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CHECK_LEN</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><name>INADDRSZ</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	  
	  <comment type="block">/* alignment */</comment>
	  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>INADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
	  <for>for <control>(<init><expr><name>doctor</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>doctors</name></name></expr>;</init> <condition><expr><name>doctor</name></expr>;</condition> <incr><expr><name>doctor</name> <operator>=</operator> <name><name>doctor</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><name><name>doctor</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_same_net</name><argument_list>(<argument><expr><name><name>doctor</name><operator>-&gt;</operator><name>in</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>doctor</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		    <continue>continue;</continue></block_content></block></if></if_stmt>
		</block_content>}</block></if>
	      <if type="elseif">else if <condition>(<expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>doctor</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call> <operator>||</operator> 
		       <call><name>ntohl</name><argument_list>(<argument><expr><name><name>doctor</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<continue>continue;</continue></block_content></block></if></if_stmt>
	      
	      <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>s_addr</name></name> <operator>&amp;=</operator> <operator>~</operator><name><name>doctor</name><operator>-&gt;</operator><name>mask</name><operator>.</operator><name>s_addr</name></name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>s_addr</name></name> <operator>|=</operator> <operator>(</operator><name><name>doctor</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>s_addr</name></name> <operator>&amp;</operator> <name><name>doctor</name><operator>-&gt;</operator><name>mask</name><operator>.</operator><name>s_addr</name></name><operator>)</operator></expr>;</expr_stmt>
	      <comment type="block">/* Since we munged the data, the server it came from is no longer authoritative */</comment>
	      <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb3</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HB3_AA</name></expr>;</expr_stmt>
	      <expr_stmt><expr><operator>*</operator><name>doctored</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>INADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <break>break;</break>
	    </block_content>}</block></for>
	</block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ADD_RDLEN</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><name>rdlen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	 <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* bad packet */</comment>
    </block_content>}</block></for>
  
  <return>return <expr><name>p</name></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_soa</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>qlen</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>doctored</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>qtype</name></decl>, <decl><type ref="prev"/><name>qclass</name></decl>, <decl><type ref="prev"/><name>rdlen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ttl</name></decl>, <decl><type ref="prev"/><name>minttl</name> <init>= <expr><name>ULONG_MAX</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>found_soa</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* first move to NS section and find TTL from any SOA section */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>skip_questions</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
      <operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>do_doctor</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>ancount</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><name>doctored</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* bad packet */</comment>
  
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>nscount</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>skip_name</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* bad packet */</comment>
      
      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>qtype</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>qclass</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>GETLONG</name><argument_list>(<argument><expr><name>ttl</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>rdlen</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>qclass</name> <operator>==</operator> <name>C_IN</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>qtype</name> <operator>==</operator> <name>T_SOA</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>found_soa</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name>ttl</name> <operator>&lt;</operator> <name>minttl</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>minttl</name> <operator>=</operator> <name>ttl</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	  <comment type="block">/* MNAME */</comment>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>skip_name</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	  <comment type="block">/* RNAME */</comment>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>skip_name</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	  <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt> <comment type="block">/* SERIAL REFRESH RETRY EXPIRE */</comment>
	  
	  <expr_stmt><expr><call><name>GETLONG</name><argument_list>(<argument><expr><name>ttl</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* minTTL */</comment>
	  <if_stmt><if>if <condition>(<expr><name>ttl</name> <operator>&lt;</operator> <name>minttl</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>minttl</name> <operator>=</operator> <name>ttl</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ADD_RDLEN</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><name>rdlen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* bad packet */</comment>
    </block_content>}</block></for>
  
  <comment type="block">/* rewrite addresses in additional section too */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>do_doctor</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>arcount</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><name>doctored</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found_soa</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>minttl</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>neg_ttl</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <return>return <expr><name>minttl</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Print TXT reply to log */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>print_txt</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>qlen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
		     <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>ardlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>secflag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p1</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CHECK_LEN</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><name>ardlen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <comment type="block">/* Loop over TXT payload */</comment>
  <while>while <condition>(<expr><operator>(</operator><name>p1</name> <operator>-</operator> <name>p</name><operator>)</operator> <operator>&lt;</operator> <name>ardlen</name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><operator>*</operator><name>p1</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p3</name> <init>= <expr><name>p1</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>p1</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>p</name><operator>)</operator> <operator>&gt;=</operator> <name>ardlen</name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* bad packet */</comment>

      <comment type="block">/* make counted string zero-term and sanitise */</comment>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isprint</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><operator>(</operator><name>p3</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <break>break;</break></block_content></block></if></if_stmt>
	  <expr_stmt><expr><operator>*</operator><name>p3</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>p3</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	  <expr_stmt><expr><name>p3</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

      <expr_stmt><expr><operator>*</operator><name>p3</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>secflag</name> <operator>|</operator> <name>F_FORWARD</name> <operator>|</operator> <name>F_UPSTREAM</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>p1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* restore */</comment>
      <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>p1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>p1</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>p1</name> <operator>+=</operator> <name>len</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Note that the following code can create CNAME chains that don't point to a real record,
   either because of lack of memory, or lack of SOA records.  These are treated by the cache code as 
   expired and cleaned out that way. 
   Return 1 if we reject an address because it look like part of dns-rebinding attack. */</comment>
<comment type="line">// Pi-hole: Return 2 if we reject a part of a CNAME chain</comment>
<function><type><name>int</name></type> <name>extract_addresses</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>qlen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, 
		      <parameter><decl><type><name><name>struct</name> <name>ipsets</name></name> <modifier>*</modifier></type><name>ipsets</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ipsets</name></name> <modifier>*</modifier></type><name>nftsets</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_sign</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>check_rebind</name></decl></parameter>,
		      <parameter><decl><type><name>int</name></type> <name>no_cache_dnssec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>secure</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>doctored</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>endrr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>namep</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>qtype</name></decl>, <decl><type ref="prev"/><name>qclass</name></decl>, <decl><type ref="prev"/><name>aqtype</name></decl>, <decl><type ref="prev"/><name>aqclass</name></decl>, <decl><type ref="prev"/><name>ardlen</name></decl>, <decl><type ref="prev"/><name>res</name></decl>, <decl><type ref="prev"/><name>searched_soa</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ttl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>union</name> <name>all_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_IPSET</name></cpp:ifdef>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ipsets_cur</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ipsets</name></expr>;</expr_stmt> <comment type="block">/* unused */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_NFTSET</name></cpp:ifdef>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nftsets_cur</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>nftsets</name></expr>;</expr_stmt> <comment type="block">/* unused */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cname_count</name> <init>= <expr><name>CNAME_CHAIN</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>cpp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><ternary><condition><expr><call><name>RCODE</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NXDOMAIN</name></expr> ?</condition><then> <expr><name>F_NXDOMAIN</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
  <decl_stmt><decl><type><name>int</name></type> <name>cname_short</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>cttl</name> <init>= <expr><name>ULONG_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>attl</name></decl>;</decl_stmt>
  
  <expr_stmt><expr><call><name>cache_start_insert</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* find_soa is needed for dns_doctor side effects, so don't call it lazily if there are any. */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>doctors</name></name> <operator>||</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DNSSEC_VALID</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>searched_soa</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>ttl</name> <operator>=</operator> <call><name>find_soa</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><name>doctored</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>doctored</name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name>secure</name></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
	  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DNSSEC_VALID</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>ancount</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>rr_status</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><name>namep</name> <operator>=</operator> <name>p</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>header</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>qdcount</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>extract_name</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* bad packet */</comment>
  
  <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>qtype</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>qclass</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>qclass</name> <operator>!=</operator> <name>C_IN</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <comment type="block">/* PTRs: we chase CNAMEs here, since we have no way to 
     represent them in the cache. */</comment>
  <if_stmt><if>if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>T_PTR</name></expr>)</condition>
    <block>{<block_content> 
      <decl_stmt><decl><type><name>int</name></type> <name>insert</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>name_encoding</name> <init>= <expr><call><name>in_arpa_name_2_addr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>F_NXDOMAIN</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	<label><name>cname_loop</name>:</label>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p1</name> <operator>=</operator> <call><name>skip_questions</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	  
	  <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>ancount</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> 
	    <block>{<block_content>
	      <decl_stmt><decl><type><name>int</name></type> <name>secflag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>res</name> <operator>=</operator> <call><name>extract_name</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p1</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* bad packet */</comment>
	      
	      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>aqtype</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>aqclass</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>GETLONG</name><argument_list>(<argument><expr><name>attl</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>daemon</name><operator>-&gt;</operator><name>max_ttl</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>attl</name> <operator>&gt;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>max_ttl</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_sign</name></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><operator>(</operator><name>p1</name><operator>)</operator> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>PUTLONG</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>max_ttl</name></name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>ardlen</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name>endrr</name> <operator>=</operator> <name>p1</name><operator>+</operator><name>ardlen</name></expr>;</expr_stmt>
	      
	      <comment type="block">/* TTL of record is minimum of CNAMES and PTR */</comment>
	      <if_stmt><if>if <condition>(<expr><name>attl</name> <operator>&lt;</operator> <name>cttl</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>cttl</name> <operator>=</operator> <name>attl</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><name>aqclass</name> <operator>==</operator> <name>C_IN</name> <operator>&amp;&amp;</operator> <name>res</name> <operator>!=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>aqtype</name> <operator>==</operator> <name>T_CNAME</name> <operator>||</operator> <name>aqtype</name> <operator>==</operator> <name>T_PTR</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
		  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DNSSEC_VALID</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>no_cache_dnssec</name> <operator>&amp;&amp;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>rr_status</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		    <block>{<block_content>
		      <comment type="block">/* validated RR anywhere in CNAME chain, don't cache. */</comment>
		      <if_stmt><if>if <condition>(<expr><name>cname_short</name> <operator>||</operator> <name>aqtype</name> <operator>==</operator> <name>T_CNAME</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>insert</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		      
		      <expr_stmt><expr><name>secflag</name> <operator>=</operator> <name>F_DNSSECOK</name></expr>;</expr_stmt>
		      <comment type="block">/* limit TTL based on signature. */</comment>
		      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>rr_status</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;</operator> <name>cttl</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>cttl</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>rr_status</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		  <if_stmt><if>if <condition>(<expr><name>aqtype</name> <operator>==</operator> <name>T_CNAME</name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>secflag</name> <operator>|</operator> <name>F_CNAME</name> <operator>|</operator> <name>F_FORWARD</name> <operator>|</operator> <name>F_UPSTREAM</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>extract_name</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p1</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
		  
		  <if_stmt><if>if <condition>(<expr><name>aqtype</name> <operator>==</operator> <name>T_CNAME</name></expr>)</condition>
		    <block>{<block_content>
		      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cname_count</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* looped CNAMES, we can't cache. */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
		      <expr_stmt><expr><name>cname_short</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		      <goto>goto <name>cname_loop</name>;</goto>
		    </block_content>}</block></if></if_stmt>
		  
		  <expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
		  
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>name_encoding</name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>secflag</name> <operator>|</operator> <name>F_FORWARD</name> <operator>|</operator> <name>F_UPSTREAM</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>aqtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		  <else>else
		    <block>{<block_content>
		      <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>name_encoding</name> <operator>|</operator> <name>secflag</name> <operator>|</operator> <name>F_REVERSE</name> <operator>|</operator> <name>F_UPSTREAM</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <if_stmt><if>if <condition>(<expr><name>insert</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>cache_insert</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>cttl</name></expr></argument>, <argument><expr><name>name_encoding</name> <operator>|</operator> <name>secflag</name> <operator>|</operator> <name>F_REVERSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		    </block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>

	      <expr_stmt><expr><name>p1</name> <operator>=</operator> <name>endrr</name></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CHECK_LEN</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* bad packet */</comment>
	    </block_content>}</block></for>
	</block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NO_NEG</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>searched_soa</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>searched_soa</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	      <expr_stmt><expr><name>ttl</name> <operator>=</operator> <call><name>find_soa</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><name>doctored</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	  
	  <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>F_NEG</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>secure</name></expr> ?</condition><then>  <expr><name>F_DNSSECOK</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name>name_encoding</name> <operator>&amp;&amp;</operator> <name>ttl</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>F_REVERSE</name> <operator>|</operator> <name>name_encoding</name></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>cache_insert</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>ttl</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	  
	  <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>flags</name> <operator>|</operator> <name>F_UPSTREAM</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
  <else>else
    <block>{<block_content>
      <comment type="block">/* everything other than PTR */</comment>
      <decl_stmt><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>newc</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>addrlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>insert</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>T_A</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>addrlen</name> <operator>=</operator> <name>INADDRSZ</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>F_IPV4</name></expr>;</expr_stmt>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>T_AAAA</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>addrlen</name> <operator>=</operator> <name>IN6ADDRSZ</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>F_IPV6</name></expr>;</expr_stmt>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>T_SRV</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>F_SRV</name></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><name>insert</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> <comment type="block">/* NOTE: do not cache data from CNAME queries. */</comment>
      
    <label><name>cname_loop1</name>:</label>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p1</name> <operator>=</operator> <call><name>skip_questions</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
      
      <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>ancount</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> 
	<block>{<block_content>
	  <decl_stmt><decl><type><name>int</name></type> <name>secflag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>res</name> <operator>=</operator> <call><name>extract_name</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p1</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* bad packet */</comment>
	  
	  <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>aqtype</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	  <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>aqclass</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>GETLONG</name><argument_list>(<argument><expr><name>attl</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>daemon</name><operator>-&gt;</operator><name>max_ttl</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>attl</name> <operator>&gt;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>max_ttl</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_sign</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><operator>(</operator><name>p1</name><operator>)</operator> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>PUTLONG</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>max_ttl</name></name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	  <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>ardlen</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>endrr</name> <operator>=</operator> <name>p1</name><operator>+</operator><name>ardlen</name></expr>;</expr_stmt>
	  
	  <comment type="block">/* Not what we're looking for? */</comment>
	  <if_stmt><if>if <condition>(<expr><name>aqclass</name> <operator>!=</operator> <name>C_IN</name> <operator>||</operator> <name>res</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>p1</name> <operator>=</operator> <name>endrr</name></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CHECK_LEN</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* bad packet */</comment>
	      <continue>continue;</continue>
	    </block_content>}</block></if></if_stmt>
	  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
	  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DNSSEC_VALID</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>no_cache_dnssec</name> <operator>&amp;&amp;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>rr_status</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>secflag</name> <operator>=</operator> <name>F_DNSSECOK</name></expr>;</expr_stmt>
	      
	      <comment type="block">/* limit TTl based on sig. */</comment>
	      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>rr_status</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;</operator> <name>attl</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>attl</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>rr_status</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>	  
	  

	  <if_stmt><if>if <condition>(<expr><name>aqtype</name> <operator>==</operator> <name>T_CNAME</name></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cname_count</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* looped CNAMES */</comment>
	      
	      <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>secflag</name> <operator>|</operator> <name>F_CNAME</name> <operator>|</operator> <name>F_FORWARD</name> <operator>|</operator> <name>F_UPSTREAM</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><name>insert</name></expr>)</condition>
		<block>{<block_content>
		  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>newc</name> <operator>=</operator> <call><name>cache_insert</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>attl</name></expr></argument>, <argument><expr><name>F_CNAME</name> <operator>|</operator> <name>F_FORWARD</name> <operator>|</operator> <name>secflag</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		    <block>{<block_content>
		      <expr_stmt><expr><name><name>newc</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>cname</name><operator>.</operator><name>target</name><operator>.</operator><name>cache</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		      <expr_stmt><expr><name><name>newc</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>cname</name><operator>.</operator><name>is_name_ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
		      <if_stmt><if>if <condition>(<expr><name>cpp</name></expr>)</condition>
			<block>{<block_content>
			  <expr_stmt><expr><call><name>next_uid</name><argument_list>(<argument><expr><name>newc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			  <expr_stmt><expr><name><name>cpp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>cname</name><operator>.</operator><name>target</name><operator>.</operator><name>cache</name></name> <operator>=</operator> <name>newc</name></expr>;</expr_stmt>
			  <expr_stmt><expr><name><name>cpp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>cname</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>newc</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		    </block_content>}</block></if></if_stmt>
		  
		  <expr_stmt><expr><name>cpp</name> <operator>=</operator> <name>newc</name></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><name>attl</name> <operator>&lt;</operator> <name>cttl</name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name>cttl</name> <operator>=</operator> <name>attl</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	      
	      <expr_stmt><expr><name>namep</name> <operator>=</operator> <name>p1</name></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>extract_name</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p1</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	      
	      <comment type="line">// ****************************** Pi-hole modification ******************************</comment>
	      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><ternary><condition><expr><name>cpp</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><ternary><condition><expr><name><name>cpp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_BIGNAME</name></expr> ?</condition><then> <expr><name><name>cpp</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>bname</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><name><name>cpp</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>sname</name></name></expr></else></ternary></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	      <if_stmt><if>if<condition>(<expr><call><name>FTL_CNAME</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>log_display_id</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
		  <comment type="line">// Found while processing a reply from upstream. We prevent cache insertion here</comment>
		  <comment type="line">// This query is to be blocked as we found a blocked</comment>
		  <comment type="line">// domain while walking the CNAME path. Log to pihole.log here</comment>
		  <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>F_UPSTREAM</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"blocked during CNAME inspection"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <return>return <expr><literal type="number">2</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	      <comment type="line">// **********************************************************************************</comment>
	      <if_stmt><if>if <condition>(<expr><name>qtype</name> <operator>!=</operator> <name>T_CNAME</name></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>cname_loop1</name>;</goto></block_content></block></if></if_stmt>

	      <expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	    </block_content>}</block></if>
	  <if type="elseif">else if <condition>(<expr><name>aqtype</name> <operator>!=</operator> <name>qtype</name></expr>)</condition>
	    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DNSSEC_VALID</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>aqtype</name> <operator>!=</operator> <name>T_RRSIG</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>secflag</name> <operator>|</operator> <name>F_FORWARD</name> <operator>|</operator> <name>F_UPSTREAM</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>aqtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></if>
	  <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>F_NXDOMAIN</name><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_SRV</name></expr>)</condition>
		<block>{<block_content>
		  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>namep</name></expr></init></decl>;</decl_stmt>
		  
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CHECK_LEN</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* bad packet */</comment>
		  <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>srv</name><operator>.</operator><name>priority</name></name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>srv</name><operator>.</operator><name>weight</name></name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>srv</name><operator>.</operator><name>srvport</name></name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>extract_name</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p1</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
		  <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>srv</name><operator>.</operator><name>targetlen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* include terminating zero */</comment>
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>addr</name><operator>.</operator><name>srv</name><operator>.</operator><name>target</name></name> <operator>=</operator> <call><name>blockdata_alloc</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>addr</name><operator>.</operator><name>srv</name><operator>.</operator><name>targetlen</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
		  
		  <comment type="block">/* we overwrote the original name, so get it back here. */</comment>
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>extract_name</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if>
	      <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>F_IPV4</name> <operator>|</operator> <name>F_IPV6</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
		  <comment type="block">/* copy address into aligned storage */</comment>
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CHECK_LEN</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* bad packet */</comment>
		  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  
		  <comment type="block">/* check for returned address in private space */</comment>
		  <if_stmt><if>if <condition>(<expr><name>check_rebind</name></expr>)</condition>
		    <block>{<block_content>
		      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>F_IPV4</name><operator>)</operator> <operator>&amp;&amp;</operator>
			  <call><name>private_net</name><argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>addr4</name></name></expr></argument>, <argument><expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOCAL_REBIND</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
		      
		      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>F_IPV6</name><operator>)</operator> <operator>&amp;&amp;</operator>
			  <call><name>private_net6</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>addr6</name></name></expr></argument>, <argument><expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOCAL_REBIND</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
		    </block_content>}</block></if></if_stmt>
		  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_IPSET</name></cpp:ifdef>
		  <if_stmt><if>if <condition>(<expr><name>ipsets</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>F_IPV4</name> <operator>|</operator> <name>F_IPV6</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		    <for>for <control>(<init><expr><name>ipsets_cur</name> <operator>=</operator> <name><name>ipsets</name><operator>-&gt;</operator><name>sets</name></name></expr>;</init> <condition><expr><operator>*</operator><name>ipsets_cur</name></expr>;</condition> <incr><expr><name>ipsets_cur</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		      <if_stmt><if>if <condition>(<expr><call><name>add_to_ipset</name><argument_list>(<argument><expr><operator>*</operator><name>ipsets_cur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>F_IPV4</name> <operator>|</operator> <name>F_IPV6</name><operator>)</operator><operator>)</operator> <operator>|</operator> <name>F_IPSET</name></expr></argument>, <argument><expr><name><name>ipsets</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><operator>*</operator><name>ipsets_cur</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_NFTSET</name></cpp:ifdef>
		  <if_stmt><if>if <condition>(<expr><name>nftsets</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>F_IPV4</name> <operator>|</operator> <name>F_IPV6</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		    <for>for <control>(<init><expr><name>nftsets_cur</name> <operator>=</operator> <name><name>nftsets</name><operator>-&gt;</operator><name>sets</name></name></expr>;</init> <condition><expr><operator>*</operator><name>nftsets_cur</name></expr>;</condition> <incr><expr><name>nftsets_cur</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		      <if_stmt><if>if <condition>(<expr><call><name>add_to_nftset</name><argument_list>(<argument><expr><operator>*</operator><name>nftsets_cur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>F_IPV4</name> <operator>|</operator> <name>F_IPV6</name><operator>)</operator><operator>)</operator> <operator>|</operator> <name>F_IPSET</name></expr></argument>, <argument><expr><name><name>nftsets</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><operator>*</operator><name>nftsets_cur</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></if></if_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><name>insert</name></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name>newc</name> <operator>=</operator> <call><name>cache_insert</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>attl</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>F_FORWARD</name> <operator>|</operator> <name>secflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><name>newc</name> <operator>&amp;&amp;</operator> <name>cpp</name></expr>)</condition>
		    <block>{<block_content>
		      <expr_stmt><expr><call><name>next_uid</name><argument_list>(<argument><expr><name>newc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><name><name>cpp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>cname</name><operator>.</operator><name>target</name><operator>.</operator><name>cache</name></name> <operator>=</operator> <name>newc</name></expr>;</expr_stmt>
		      <expr_stmt><expr><name><name>cpp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>cname</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>newc</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
		    </block_content>}</block></if></if_stmt>
		  <expr_stmt><expr><name>cpp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><name>aqtype</name> <operator>==</operator> <name>T_TXT</name></expr>)</condition>
		<block>{<block_content>
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>print_txt</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>ardlen</name></expr></argument>, <argument><expr><name>secflag</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if>
	      <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>flags</name> <operator>|</operator> <name>F_FORWARD</name> <operator>|</operator> <name>secflag</name> <operator>|</operator> <name>F_UPSTREAM</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>aqtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	    </block_content>}</block></if></if_stmt>
	  
	  <expr_stmt><expr><name>p1</name> <operator>=</operator> <name>endrr</name></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CHECK_LEN</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* bad packet */</comment>
	</block_content>}</block></for>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>qtype</name> <operator>!=</operator> <name>T_ANY</name> <operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>F_NXDOMAIN</name><operator>)</operator><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_NXDOMAIN</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>F_IPV4</name> <operator>|</operator> <name>F_IPV6</name> <operator>|</operator> <name>F_SRV</name><operator>)</operator></expr>;</expr_stmt>
	      
	      <comment type="block">/* Can store NXDOMAIN reply to CNAME or ANY query. */</comment>
	      <if_stmt><if>if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>T_CNAME</name> <operator>||</operator> <name>qtype</name> <operator>==</operator> <name>T_ANY</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>insert</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
	  
	  <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>F_UPSTREAM</name> <operator>|</operator> <name>F_FORWARD</name> <operator>|</operator> <name>F_NEG</name> <operator>|</operator> <name>flags</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>secure</name></expr> ?</condition><then> <expr><name>F_DNSSECOK</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>searched_soa</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>searched_soa</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	      <expr_stmt><expr><name>ttl</name> <operator>=</operator> <call><name>find_soa</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><name>doctored</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	  
	  <comment type="block">/* If there's no SOA to get the TTL from, but there is a CNAME 
	     pointing at this, inherit its TTL */</comment>
	  <if_stmt><if>if <condition>(<expr><name>insert</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NO_NEG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>ttl</name> <operator>||</operator> <name>cpp</name><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><name>ttl</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ttl</name> <operator>=</operator> <name>cttl</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      
	      <expr_stmt><expr><name>newc</name> <operator>=</operator> <call><name>cache_insert</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>ttl</name></expr></argument>, <argument><expr><name>F_FORWARD</name> <operator>|</operator> <name>F_NEG</name> <operator>|</operator> <name>flags</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>secure</name></expr> ?</condition><then> <expr><name>F_DNSSECOK</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
	      <if_stmt><if>if <condition>(<expr><name>newc</name> <operator>&amp;&amp;</operator> <name>cpp</name></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>next_uid</name><argument_list>(<argument><expr><name>newc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>cpp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>cname</name><operator>.</operator><name>target</name><operator>.</operator><name>cache</name></name> <operator>=</operator> <name>newc</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>cpp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>cname</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>newc</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  
  <comment type="block">/* Don't put stuff from a truncated packet into the cache.
     Don't cache replies from non-recursive nameservers, since we may get a 
     reply containing a CNAME but not its target, even though the target 
     does exist. */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>header</name><operator>-&gt;</operator><name>hb3</name></name> <operator>&amp;</operator> <name>HB3_TC</name><operator>)</operator> <operator>&amp;&amp;</operator> 
      <operator>!</operator><operator>(</operator><name><name>header</name><operator>-&gt;</operator><name>hb4</name></name> <operator>&amp;</operator> <name>HB4_CD</name><operator>)</operator> <operator>&amp;&amp;</operator>
      <operator>(</operator><name><name>header</name><operator>-&gt;</operator><name>hb4</name></name> <operator>&amp;</operator> <name>HB4_RA</name><operator>)</operator> <operator>&amp;&amp;</operator>
      <operator>!</operator><name>no_cache_dnssec</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>cache_end_insert</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONNTRACK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UBUS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* Don't pass control chars and weird escapes to UBus. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>safe_name</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
  
  <for>for <control>(<init><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr>;</init> <condition><expr><operator>*</operator><name>r</name></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isprint</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
  
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>report_addresses</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>mark</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>endrr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>attl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>allowlist</name></name> <modifier>*</modifier></type><name>allowlists</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pattern_pos</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><call><name>RCODE</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NOERROR</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>
  
  <for>for <control>(<init><expr><name>allowlists</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>allowlists</name></name></expr>;</init> <condition><expr><name>allowlists</name></expr>;</condition> <incr><expr><name>allowlists</name> <operator>=</operator> <name><name>allowlists</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>allowlists</name><operator>-&gt;</operator><name>mark</name></name> <operator>==</operator> <operator>(</operator><name>mark</name> <operator>&amp;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>allowlist_mask</name></name> <operator>&amp;</operator> <name><name>allowlists</name><operator>-&gt;</operator><name>mask</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <for>for <control>(<init><expr><name>pattern_pos</name> <operator>=</operator> <name><name>allowlists</name><operator>-&gt;</operator><name>patterns</name></name></expr>;</init> <condition><expr><operator>*</operator><name>pattern_pos</name></expr>;</condition> <incr><expr><name>pattern_pos</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><operator>*</operator><name>pattern_pos</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <return>return;</return></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></for>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>skip_questions</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>ancount</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>aqtype</name></decl>, <decl><type ref="prev"/><name>aqclass</name></decl>, <decl><type ref="prev"/><name>ardlen</name></decl>;</decl_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>extract_name</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return;</return></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CHECK_LEN</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>aqtype</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>aqclass</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>GETLONG</name><argument_list>(<argument><expr><name>attl</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>ardlen</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CHECK_LEN</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>ardlen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>endrr</name> <operator>=</operator> <name>p</name><operator>+</operator><name>ardlen</name></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>aqclass</name> <operator>==</operator> <name>C_IN</name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name>aqtype</name> <operator>==</operator> <name>T_CNAME</name></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>extract_name</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>workspacename</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	      <if_stmt><if>if <condition>(<expr><call><name>safe_name</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>safe_name</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>workspacename</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ubus_event_bcast_connmark_allowlist_resolved</name><argument_list>(<argument><expr><name>mark</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>workspacename</name></name></expr></argument>, <argument><expr><name>attl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
	  <if_stmt><if>if <condition>(<expr><name>aqtype</name> <operator>==</operator> <name>T_A</name></expr>)</condition>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name>char</name></type> <name><name>ip</name><index>[<expr><name>INET_ADDRSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>
	      <if_stmt><if>if <condition>(<expr><name>ardlen</name> <operator>!=</operator> <name>INADDRSZ</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ardlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><sizeof>sizeof <name>ip</name></sizeof></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>safe_name</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ubus_event_bcast_connmark_allowlist_resolved</name><argument_list>(<argument><expr><name>mark</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>attl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></if>
	  <if type="elseif">else if <condition>(<expr><name>aqtype</name> <operator>==</operator> <name>T_AAAA</name></expr>)</condition>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name>char</name></type> <name><name>ip</name><index>[<expr><name>INET6_ADDRSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>
	      <if_stmt><if>if <condition>(<expr><name>ardlen</name> <operator>!=</operator> <name>IN6ADDRSZ</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ardlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><sizeof>sizeof <name>ip</name></sizeof></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>safe_name</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ubus_event_bcast_connmark_allowlist_resolved</name><argument_list>(<argument><expr><name>mark</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>attl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
      
      <expr_stmt><expr><name>p</name> <operator>=</operator> <name>endrr</name></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* If the packet holds exactly one query
   return F_IPV4 or F_IPV6  and leave the name from the query in name */</comment>
<function><type><name>unsigned</name> <name>int</name></type> <name>extract_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>qlen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>typep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>header</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>qtype</name></decl>, <decl><type ref="prev"/><name>qclass</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>typep</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator><name>typep</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* return empty name if no query found. */</comment>
  
  <if_stmt><if>if <condition>(<expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>qdcount</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>OPCODE</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>QUERY</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* must be exactly one query. */</comment>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>header</name><operator>-&gt;</operator><name>hb3</name></name> <operator>&amp;</operator> <name>HB3_QR</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>ancount</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>nscount</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* non-standard query. */</comment>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>extract_name</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* bad packet */</comment>
   
  <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>qtype</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>qclass</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>typep</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator><name>typep</name> <operator>=</operator> <name>qtype</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>qclass</name> <operator>==</operator> <name>C_IN</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>T_A</name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>F_IPV4</name></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>T_AAAA</name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>F_IPV6</name></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>T_ANY</name></expr>)</condition><block type="pseudo"><block_content>
	<return>return  <expr><name>F_IPV4</name> <operator>|</operator> <name>F_IPV6</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
  <comment type="block">/* F_DNSSECOK as agument to search_servers() inhibits forwarding
     to servers for domains without a trust anchor. This make the
     behaviour for DS and DNSKEY queries we forward the same
     as for DS and DNSKEY queries we originate. */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DNSSEC_VALID</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>qtype</name> <operator>==</operator> <name>T_DS</name> <operator>||</operator> <name>qtype</name> <operator>==</operator> <name>T_DNSKEY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>F_DNSSECOK</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
  <return>return <expr><name>F_QUERY</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setup_reply</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ede</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* clear authoritative and truncated flags, set QR flag */</comment>
  <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb3</name></name> <operator>=</operator> <operator>(</operator><name><name>header</name><operator>-&gt;</operator><name>hb3</name></name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>HB3_AA</name> <operator>|</operator> <name>HB3_TC</name> <operator>)</operator><operator>)</operator> <operator>|</operator> <name>HB3_QR</name></expr>;</expr_stmt>
  <comment type="block">/* clear AD flag, set RA flag */</comment>
  <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb4</name></name> <operator>=</operator> <operator>(</operator><name><name>header</name><operator>-&gt;</operator><name>hb4</name></name> <operator>&amp;</operator> <operator>~</operator><name>HB4_AD</name><operator>)</operator> <operator>|</operator> <name>HB4_RA</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>nscount</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>arcount</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>ancount</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* no answers unless changed below */</comment>
  <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>==</operator> <name>F_NOERR</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>SET_RCODE</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>NOERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> <comment type="block">/* empty domain */</comment>
  <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>==</operator> <name>F_NXDOMAIN</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>SET_RCODE</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>NXDOMAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator> <name>F_IPV4</name> <operator>|</operator> <name>F_IPV6</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>SET_RCODE</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>NOERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb3</name></name> <operator>|=</operator> <name>HB3_AA</name></expr>;</expr_stmt>
    </block_content>}</block></if>
  <else>else <comment type="block">/* nowhere to forward to */</comment>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>union</name> <name>all_addr</name></name></type> <name>a</name></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>a</name><operator>.</operator><name>log</name><operator>.</operator><name>rcode</name></name> <operator>=</operator> <name>REFUSED</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>a</name><operator>.</operator><name>log</name><operator>.</operator><name>ede</name></name> <operator>=</operator> <name>ede</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>F_CONFIG</name> <operator>|</operator> <name>F_RCODE</name></expr></argument>, <argument><expr><literal type="string">"error"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SET_RCODE</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>REFUSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* check if name matches local names ie from /etc/hosts or DHCP or local mx names. */</comment>
<function><type><name>int</name></type> <name>check_for_local_domain</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>mx_srv_record</name></name> <modifier>*</modifier></type><name>mx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>txt_record</name></name> <modifier>*</modifier></type><name>txt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>interface_name</name></name> <modifier>*</modifier></type><name>intr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>ptr_record</name></name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>naptr</name></name> <modifier>*</modifier></type><name>naptr</name></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>naptr</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>naptr</name></name></expr>;</init> <condition><expr><name>naptr</name></expr>;</condition> <incr><expr><name>naptr</name> <operator>=</operator> <name><name>naptr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
     <if_stmt><if>if <condition>(<expr><call><name>hostname_issubdomain</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>naptr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

   <for>for <control>(<init><expr><name>mx</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>mxnames</name></name></expr>;</init> <condition><expr><name>mx</name></expr>;</condition> <incr><expr><name>mx</name> <operator>=</operator> <name><name>mx</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><call><name>hostname_issubdomain</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>mx</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

  <for>for <control>(<init><expr><name>txt</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>txt</name></name></expr>;</init> <condition><expr><name>txt</name></expr>;</condition> <incr><expr><name>txt</name> <operator>=</operator> <name><name>txt</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><call><name>hostname_issubdomain</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>txt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

  <for>for <control>(<init><expr><name>intr</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>int_names</name></name></expr>;</init> <condition><expr><name>intr</name></expr>;</condition> <incr><expr><name>intr</name> <operator>=</operator> <name><name>intr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><call><name>hostname_issubdomain</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>intr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

  <for>for <control>(<init><expr><name>ptr</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</init> <condition><expr><name>ptr</name></expr>;</condition> <incr><expr><name>ptr</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><call><name>hostname_issubdomain</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

  <if_stmt><if>if <condition>(<expr><call><name>cache_find_non_terminal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_bad_address</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>qlen</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bogus_addr</name></name> <modifier>*</modifier></type><name>baddr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>ttlp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>qtype</name></decl>, <decl><type ref="prev"/><name>qclass</name></decl>, <decl><type ref="prev"/><name>rdlen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ttl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>bogus_addr</name></name> <modifier>*</modifier></type><name>baddrp</name></decl>;</decl_stmt>
  
  <comment type="block">/* skip over questions */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>skip_questions</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* bad packet */</comment>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>ancount</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>name</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>extract_name</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* bad packet */</comment>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>skip_name</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
      
      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>qtype</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>qclass</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>GETLONG</name><argument_list>(<argument><expr><name>ttl</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>rdlen</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>ttlp</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><operator>*</operator><name>ttlp</name> <operator>=</operator> <name>ttl</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>qclass</name> <operator>==</operator> <name>C_IN</name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>T_A</name></expr>)</condition>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CHECK_LEN</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><name>INADDRSZ</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>INADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	      <for>for <control>(<init><expr><name>baddrp</name> <operator>=</operator> <name>baddr</name></expr>;</init> <condition><expr><name>baddrp</name></expr>;</condition> <incr><expr><name>baddrp</name> <operator>=</operator> <name><name>baddrp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>baddrp</name><operator>-&gt;</operator><name>is6</name></name> <operator>&amp;&amp;</operator> <call><name>is_same_net_prefix</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>baddrp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr4</name></name></expr></argument>, <argument><expr><name><name>baddrp</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		  <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
	    </block_content>}</block></if>
	  <if type="elseif">else if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>T_AAAA</name></expr>)</condition>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CHECK_LEN</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><name>IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	      <for>for <control>(<init><expr><name>baddrp</name> <operator>=</operator> <name>baddr</name></expr>;</init> <condition><expr><name>baddrp</name></expr>;</condition> <incr><expr><name>baddrp</name> <operator>=</operator> <name><name>baddrp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><name><name>baddrp</name><operator>-&gt;</operator><name>is6</name></name> <operator>&amp;&amp;</operator> <call><name>is_same_net6</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>baddrp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr6</name></name></expr></argument>, <argument><expr><name><name>baddrp</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		  <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ADD_RDLEN</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><name>rdlen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Is the packet a reply with the answer address equal to addr?
   If so mung is into an NXDOMAIN reply and also put that information
   in the cache. */</comment>
<function><type><name>int</name></type> <name>check_for_bogus_wildcard</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>qlen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ttl</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>check_bad_address</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>bogus_addr</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ttl</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Found a bogus address. Insert that info here, since there no SOA record
	 to get the ttl from in the normal processing */</comment>
      <expr_stmt><expr><call><name>cache_start_insert</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>cache_insert</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>ttl</name></expr></argument>, <argument><expr><name>F_IPV4</name> <operator>|</operator> <name>F_FORWARD</name> <operator>|</operator> <name>F_NEG</name> <operator>|</operator> <name>F_NXDOMAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>cache_end_insert</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>check_for_ignored_address</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>qlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>check_bad_address</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>ignore_addr</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>add_resource_record</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>limit</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>truncp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nameoffset</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>, 
			<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>ttl</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>class</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sav</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>pp</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>usval</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type> <name>lval</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sval</name></decl>;</decl_stmt>
  
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_LIMIT</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>if (limit &amp;&amp; p + (size) &gt; (unsigned char*)limit) goto truncated;</cpp:value></cpp:define>

  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* make ap point to 1st unamed argument */</comment>
  
  <if_stmt><if>if <condition>(<expr><name>truncp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>truncp</name></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>truncated</name>;</goto></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>nameoffset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>CHECK_LIMIT</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><name>nameoffset</name> <operator>|</operator> <literal type="number">0xc000</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
  <else>else
    <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>name</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>do_rfc1035_name</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<goto>goto <name>truncated</name>;</goto></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>nameoffset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>CHECK_LIMIT</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><operator>-</operator><name>nameoffset</name> <operator>|</operator> <literal type="number">0xc000</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <expr_stmt><expr><call><name>CHECK_LIMIT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

  <comment type="block">/* type (2) + class (2) + ttl (4) + rdlen (2) */</comment>
  <expr_stmt><expr><call><name>CHECK_LIMIT</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><name>class</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PUTLONG</name><argument_list>(<argument><expr><name>ttl</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="block">/* TTL */</comment>

  <expr_stmt><expr><name>sav</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>              <comment type="block">/* Save pointer to RDLength field */</comment>
  <expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>       <comment type="block">/* Placeholder RDLength */</comment>

  <for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>format</name></expr>;</condition> <incr><expr><name>format</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <switch>switch <condition>(<expr><operator>*</operator><name>format</name></expr>)</condition>
      <block>{<block_content>
      <case>case <expr><literal type="char">'6'</literal></expr>:</case>
        <expr_stmt><expr><call><name>CHECK_LIMIT</name><argument_list>(<argument><expr><name>IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>sval</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sval</name></expr></argument>, <argument><expr><name>IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>IN6ADDRSZ</name></expr>;</expr_stmt>
	<break>break;</break>
	
      <case>case <expr><literal type="char">'4'</literal></expr>:</case>
        <expr_stmt><expr><call><name>CHECK_LIMIT</name><argument_list>(<argument><expr><name>INADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>sval</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sval</name></expr></argument>, <argument><expr><name>INADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>INADDRSZ</name></expr>;</expr_stmt>
	<break>break;</break>
	
      <case>case <expr><literal type="char">'b'</literal></expr>:</case>
        <expr_stmt><expr><call><name>CHECK_LIMIT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>usval</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>usval</name></expr>;</expr_stmt>
	<break>break;</break>
	
      <case>case <expr><literal type="char">'s'</literal></expr>:</case>
        <expr_stmt><expr><call><name>CHECK_LIMIT</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>usval</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><name>usval</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
	
      <case>case <expr><literal type="char">'l'</literal></expr>:</case>
        <expr_stmt><expr><call><name>CHECK_LIMIT</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>lval</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PUTLONG</name><argument_list>(<argument><expr><name>lval</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
	
      <case>case <expr><literal type="char">'d'</literal></expr>:</case>
        <comment type="block">/* get domain-name answer arg and store it in RDATA field */</comment>
        <if_stmt><if>if <condition>(<expr><name>offset</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name>p</name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>header</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>do_rfc1035_name</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	  <goto>goto <name>truncated</name>;</goto></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>CHECK_LIMIT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<break>break;</break>
	
      <case>case <expr><literal type="char">'t'</literal></expr>:</case>
	<expr_stmt><expr><name>usval</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK_LIMIT</name><argument_list>(<argument><expr><name>usval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>sval</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>usval</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sval</name></expr></argument>, <argument><expr><name>usval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>usval</name></expr>;</expr_stmt>
	<break>break;</break>

      <case>case <expr><literal type="char">'z'</literal></expr>:</case>
	<expr_stmt><expr><name>sval</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>usval</name> <operator>=</operator> <ternary><condition><expr><name>sval</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>sval</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>usval</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name>usval</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>CHECK_LIMIT</name><argument_list>(<argument><expr><name>usval</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>usval</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sval</name></expr></argument>, <argument><expr><name>usval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>usval</name></expr>;</expr_stmt>
	<break>break;</break>
      </block_content>}</block></switch></block_content></block></for>

  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* clean up variable argument pointer */</comment>
  
  <comment type="block">/* Now, store real RDLength. sav already checked against limit. */</comment>
  <expr_stmt><expr><name>j</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>sav</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>sav</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
  
 <label><name>truncated</name>:</label>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>truncp</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator><name>truncp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHECK_LIMIT</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>crec_isstale</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>crecp</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><operator>(</operator><operator>!</operator><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_IMMORTAL</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>difftime</name><argument_list>(<argument><expr><name><name>crecp</name><operator>-&gt;</operator><name>ttd</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>crec_ttl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>crecp</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>signed</name> <name>long</name></type> <name>ttl</name> <init>= <expr><call><name>difftime</name><argument_list>(<argument><expr><name><name>crecp</name><operator>-&gt;</operator><name>ttd</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Return 0 ttl for DHCP entries, which might change
     before the lease expires, unless configured otherwise. */</comment>

  <if_stmt><if>if <condition>(<expr><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_DHCP</name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>conf_ttl</name> <init>= <expr><ternary><condition><expr><name><name>daemon</name><operator>-&gt;</operator><name>use_dhcp_ttl</name></name></expr> ?</condition><then> <expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_ttl</name></name></expr> </then><else>: <expr><name><name>daemon</name><operator>-&gt;</operator><name>local_ttl</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
      
      <comment type="block">/* Apply ceiling of actual lease length to configured TTL. */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_IMMORTAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>ttl</name> <operator>&lt;</operator> <name>conf_ttl</name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>ttl</name></expr>;</return></block_content></block></if></if_stmt>
      
      <return>return <expr><name>conf_ttl</name></expr>;</return>
    </block_content>}</block></if></if_stmt>	  
  
  <comment type="block">/* Immortal entries other than DHCP are local, and hold TTL in TTD field. */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_IMMORTAL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name><name>crecp</name><operator>-&gt;</operator><name>ttd</name></name></expr>;</return></block_content></block></if></if_stmt>

  <comment type="block">/* Stale cache entries. */</comment>
  <if_stmt><if>if <condition>(<expr><name>ttl</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <comment type="block">/* Return the Max TTL value if it is lower than the actual TTL */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>max_ttl</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>ttl</name> <operator>&lt;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>max_ttl</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>ttl</name></expr>;</return></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <return>return <expr><name><name>daemon</name><operator>-&gt;</operator><name>max_ttl</name></name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cache_validated</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>crecp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><operator>(</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DNSSEC_VALID</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_DNSSECOK</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* return zero if we can't answer from cache, or packet size if we can */</comment>
<function><type><name>size_t</name></type> <name>answer_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>limit</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>qlen</name></decl></parameter>,  
		      <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>local_addr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>local_netmask</name></decl></parameter>, 
		      <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ad_reqd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>do_bit</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>have_pseudoheader</name></decl></parameter>,
		      <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>stale</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ansp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>qtype</name></decl>, <decl><type ref="prev"/><name>qclass</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>union</name> <name>all_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nameoffset</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>flag</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>q</name></decl>, <decl><type ref="prev"/><name>ans</name></decl>, <decl><type ref="prev"/><name>anscount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>addncount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>dryrun</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>crecp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nxdomain</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>notimp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>auth</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>trunc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sec_data</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>mx_srv_record</name></name> <modifier>*</modifier></type><name>rec</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rd_bit</name> <init>= <expr><operator>(</operator><name><name>header</name><operator>-&gt;</operator><name>hb3</name></name> <operator>&amp;</operator> <name>HB3_RD</name><operator>)</operator></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>stale</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator><name>stale</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <comment type="block">/* never answer queries with RD unset, to avoid cache snooping. */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>ancount</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
      <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>nscount</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
      <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>qdcount</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
      <call><name>OPCODE</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>QUERY</name></expr> )</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <comment type="block">/* Don't return AD set if checking disabled. */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>header</name><operator>-&gt;</operator><name>hb4</name></name> <operator>&amp;</operator> <name>HB4_CD</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>sec_data</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <comment type="block">/* If there is an  additional data section then it will be overwritten by
     partial replies, so we have to do a dry run to see if we can answer
     the query. */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>arcount</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>dryrun</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <for>for <control>(<init><expr><name>rec</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>mxnames</name></name></expr>;</init> <condition><expr><name>rec</name></expr>;</condition> <incr><expr><name>rec</name> <operator>=</operator> <name><name>rec</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>rec</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
  
 <label><name>rerun</name>:</label>
  <comment type="block">/* determine end of question section (we put answers there) */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ansp</name> <operator>=</operator> <call><name>skip_questions</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* bad packet */</comment>
   
  <comment type="block">/* now process each question, answers go in RRs after the question */</comment>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>header</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

  <for>for <control>(<init><expr><name>q</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>qdcount</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>q</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>q</name><operator>--</operator></expr></incr>)</control>
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* catch loops */</comment>
      
      <comment type="block">/* save pointer to name for copying into answers */</comment>
      <expr_stmt><expr><name>nameoffset</name> <operator>=</operator> <name>p</name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>header</name></expr>;</expr_stmt>

      <comment type="block">/* now extract name as .-concatenated string into name */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>extract_name</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* bad packet */</comment>
            
      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>qtype</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>qclass</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* have we answered this question */</comment>

      <if_stmt><if>if <condition>(<expr><name>qclass</name> <operator>==</operator> <name>C_IN</name></expr>)</condition><block type="pseudo"><block_content>
	<while>while <condition>(<expr><operator>--</operator><name>count</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>crecp</name> <operator>=</operator> <call><name>cache_find_by_name</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>F_CNAME</name> <operator>|</operator> <name>F_NXDOMAIN</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	  <block>{<block_content>
	    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cname_target</name></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>int</name></type> <name>stale_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	    
	    <if_stmt><if>if <condition>(<expr><call><name>crec_isstale</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>)</condition>
	      <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>stale</name></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><operator>*</operator><name>stale</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		
		<expr_stmt><expr><name>stale_flag</name> <operator>=</operator> <name>F_STALE</name></expr>;</expr_stmt>
	      </block_content>}</block></if></if_stmt>
	    
	    <if_stmt><if>if <condition>(<expr><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_NXDOMAIN</name></expr>)</condition>
	      <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>T_CNAME</name></expr>)</condition>
		  <block>{<block_content>
		   <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dryrun</name></expr>)</condition><block type="pseudo"><block_content>
		     <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>stale_flag</name> <operator>|</operator> <name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>record_source</name><argument_list>(<argument><expr><name><name>crecp</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		    <expr_stmt><expr><name>auth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		    <expr_stmt><expr><name>nxdomain</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		    <expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		  </block_content>}</block></if></if_stmt>
		<break>break;</break>
	      </block_content>}</block></if></if_stmt>  

	    <expr_stmt><expr><name>cname_target</name> <operator>=</operator> <call><name>cache_get_cname_target</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    
	    <comment type="block">/* If the client asked for DNSSEC  don't use cached data. */</comment>
	    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_HOSTS</name> <operator>|</operator> <name>F_DHCP</name> <operator>|</operator> <name>F_CONFIG</name><operator>)</operator><operator>)</operator> <operator>||</operator>
		<operator>(</operator><name>rd_bit</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>do_bit</name> <operator>||</operator> <call><name>cache_validated</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition>
	      <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_CONFIG</name> <operator>||</operator> <name>qtype</name> <operator>==</operator> <name>T_CNAME</name></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_DNSSECOK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name>sec_data</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dryrun</name></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>stale_flag</name> <operator>|</operator> <name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>record_source</name><argument_list>(<argument><expr><name><name>crecp</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><name>nameoffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, 
					    <argument><expr><call><name>crec_ttl</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>nameoffset</name></expr></argument>,
					    <argument><expr><name>T_CNAME</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><name>cname_target</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		      <expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  </block_content>}</block></if></if_stmt>
		
	      </block_content>}</block></if>
	    <else>else<block type="pseudo"><block_content>
	      <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt> <comment type="block">/* give up if any cached CNAME in chain can't be used for DNSSEC reasons. */</comment>
	    
	    <if_stmt><if>if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>T_CNAME</name></expr>)</condition><block type="pseudo"><block_content>
	      <break>break;</break></block_content></block></if></if_stmt>
	    
	    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>cname_target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></while></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>T_TXT</name> <operator>||</operator> <name>qtype</name> <operator>==</operator> <name>T_ANY</name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name><name>struct</name> <name>txt_record</name></name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
	  <for>for<control>(<init><expr><name>t</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>txt</name></name></expr>;</init> <condition><expr><name>t</name></expr> ;</condition> <incr><expr><name>t</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>class</name></name> <operator>==</operator> <name>qclass</name> <operator>&amp;&amp;</operator> <call><name>hostname_isequal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>sec_data</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dryrun</name></expr>)</condition>
		    <block>{<block_content>
		      <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ttl</name> <init>= <expr><name><name>daemon</name><operator>-&gt;</operator><name>local_ttl</name></name></expr></init></decl>;</decl_stmt>
		      <decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_ID</name></cpp:ifndef>
		      <comment type="block">/* Dynamically generate stat record */</comment>
		      <if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>stat</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
			  <expr_stmt><expr><name>ttl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cache_make_stat</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			    <expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		      <if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition>
			<block>{<block_content>
			  <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>F_CONFIG</name> <operator>|</operator> <name>F_RRNAME</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"&lt;TXT&gt;"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			  <if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><name>nameoffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, 
						  <argument><expr><name>ttl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
						  <argument><expr><name>T_TXT</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="string">"t"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>txt</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			    <expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		    </block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>qclass</name> <operator>==</operator> <name>C_CHAOS</name></expr>)</condition>
	<block>{<block_content>
	  <comment type="block">/* don't forward *.bind and *.server chaos queries - always reply with NOTIMP */</comment>
	  <if_stmt><if>if <condition>(<expr><call><name>hostname_issubdomain</name><argument_list>(<argument><expr><literal type="string">"bind"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>hostname_issubdomain</name><argument_list>(<argument><expr><literal type="string">"server"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ans</name></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name>notimp</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>auth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dryrun</name></expr>)</condition>
		    <block>{<block_content>
		       <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>log</name><operator>.</operator><name>rcode</name></name> <operator>=</operator> <name>NOTIMP</name></expr>;</expr_stmt>
		       <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>F_CONFIG</name> <operator>|</operator> <name>F_RCODE</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    </block_content>}</block></if></if_stmt>
		  <expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>sec_data</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>qclass</name> <operator>==</operator> <name>C_IN</name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name><name>struct</name> <name>txt_record</name></name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

	  <for>for <control>(<init><expr><name>t</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>rr</name></name></expr>;</init> <condition><expr><name>t</name></expr>;</condition> <incr><expr><name>t</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>class</name></name> <operator>==</operator> <name>qtype</name> <operator>||</operator> <name>qtype</name> <operator>==</operator> <name>T_ANY</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>hostname_isequal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>sec_data</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dryrun</name></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>F_CONFIG</name> <operator>|</operator> <name>F_RRNAME</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><name>nameoffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, 
					    <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>local_ttl</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
					    <argument><expr><name><name>t</name><operator>-&gt;</operator><name>class</name></name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><literal type="string">"t"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>txt</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		      <expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  </block_content>}</block></if></if_stmt>
	      </block_content>}</block></if></if_stmt></block_content></block></for>
		
	  <if_stmt><if>if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>T_PTR</name> <operator>||</operator> <name>qtype</name> <operator>==</operator> <name>T_ANY</name></expr>)</condition>
	    <block>{<block_content>
	      <comment type="block">/* see if it's w.z.y.z.in-addr.arpa format */</comment>
	      <decl_stmt><decl><type><name>int</name></type> <name>is_arpa</name> <init>= <expr><call><name>in_arpa_name_2_addr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name><name>struct</name> <name>ptr_record</name></name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name><name>struct</name> <name>interface_name</name></name><modifier>*</modifier></type> <name>intr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	      <for>for <control>(<init><expr><name>ptr</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</init> <condition><expr><name>ptr</name></expr>;</condition> <incr><expr><name>ptr</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><call><name>hostname_isequal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		  <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

	      <if_stmt><if>if <condition>(<expr><name>is_arpa</name> <operator>==</operator> <name>F_IPV4</name></expr>)</condition><block type="pseudo"><block_content>
		<for>for <control>(<init><expr><name>intr</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>int_names</name></name></expr>;</init> <condition><expr><name>intr</name></expr>;</condition> <incr><expr><name>intr</name> <operator>=</operator> <name><name>intr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
		  <block>{<block_content>
		    <decl_stmt><decl><type><name><name>struct</name> <name>addrlist</name></name> <modifier>*</modifier></type><name>addrlist</name></decl>;</decl_stmt>
		    
		    <for>for <control>(<init><expr><name>addrlist</name> <operator>=</operator> <name><name>intr</name><operator>-&gt;</operator><name>addr</name></name></expr>;</init> <condition><expr><name>addrlist</name></expr>;</condition> <incr><expr><name>addrlist</name> <operator>=</operator> <name><name>addrlist</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>addrlist</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ADDRLIST_IPV6</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>addr</name><operator>.</operator><name>addr4</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <name><name>addrlist</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr4</name><operator>.</operator><name>s_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
		    
		    <if_stmt><if>if <condition>(<expr><name>addrlist</name></expr>)</condition><block type="pseudo"><block_content>
		      <break>break;</break></block_content></block></if>
		    <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>intr</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>INP4</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		      <while>while <condition>(<expr><name><name>intr</name><operator>-&gt;</operator><name>next</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>intr</name><operator>-&gt;</operator><name>intr</name></name></expr></argument>, <argument><expr><name><name>intr</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>intr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>intr</name> <operator>=</operator> <name><name>intr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>
		  </block_content>}</block></for></block_content></block></if>
	      <if type="elseif">else if <condition>(<expr><name>is_arpa</name> <operator>==</operator> <name>F_IPV6</name></expr>)</condition><block type="pseudo"><block_content>
		<for>for <control>(<init><expr><name>intr</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>int_names</name></name></expr>;</init> <condition><expr><name>intr</name></expr>;</condition> <incr><expr><name>intr</name> <operator>=</operator> <name><name>intr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
		  <block>{<block_content>
		    <decl_stmt><decl><type><name><name>struct</name> <name>addrlist</name></name> <modifier>*</modifier></type><name>addrlist</name></decl>;</decl_stmt>
		    
		    <for>for <control>(<init><expr><name>addrlist</name> <operator>=</operator> <name><name>intr</name><operator>-&gt;</operator><name>addr</name></name></expr>;</init> <condition><expr><name>addrlist</name></expr>;</condition> <incr><expr><name>addrlist</name> <operator>=</operator> <name><name>addrlist</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>addrlist</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ADDRLIST_IPV6</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>IN6_ARE_ADDR_EQUAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>addr6</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addrlist</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr6</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
		    
		    <if_stmt><if>if <condition>(<expr><name>addrlist</name></expr>)</condition><block type="pseudo"><block_content>
		      <break>break;</break></block_content></block></if>
		    <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>intr</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>INP6</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		      <while>while <condition>(<expr><name><name>intr</name><operator>-&gt;</operator><name>next</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>intr</name><operator>-&gt;</operator><name>intr</name></name></expr></argument>, <argument><expr><name><name>intr</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>intr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>intr</name> <operator>=</operator> <name><name>intr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>
		  </block_content>}</block></for></block_content></block></if></if_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><name>intr</name></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name>sec_data</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		  <expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dryrun</name></expr>)</condition>
		    <block>{<block_content>
		      <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>is_arpa</name> <operator>|</operator> <name>F_REVERSE</name> <operator>|</operator> <name>F_CONFIG</name></expr></argument>, <argument><expr><name><name>intr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><name>nameoffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, 
					      <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>local_ttl</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
					      <argument><expr><name>T_PTR</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><name><name>intr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		    </block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
	      <if type="elseif">else if <condition>(<expr><name>ptr</name></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		  <expr_stmt><expr><name>sec_data</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dryrun</name></expr>)</condition>
		    <block>{<block_content>
		      <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>F_CONFIG</name> <operator>|</operator> <name>F_RRNAME</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"&lt;PTR&gt;"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <for>for <control>(<init><expr><name>ptr</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</init> <condition><expr><name>ptr</name></expr>;</condition> <incr><expr><name>ptr</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
			<if_stmt><if>if <condition>(<expr><call><name>hostname_isequal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			    <call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><name>nameoffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, 
						<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>local_ttl</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
						<argument><expr><name>T_PTR</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			  <expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
			 
		    </block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
	      <if type="elseif">else if <condition>(<expr><name>is_arpa</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>crecp</name> <operator>=</operator> <call><name>cache_find_by_addr</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>is_arpa</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		<block>{<block_content>
		  <comment type="block">/* Don't use cache when DNSSEC data required, unless we know that
		     the zone is unsigned, which implies that we're doing
		     validation. */</comment>
		  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_HOSTS</name> <operator>|</operator> <name>F_DHCP</name> <operator>|</operator> <name>F_CONFIG</name><operator>)</operator><operator>)</operator> <operator>||</operator>
		      <operator>(</operator><name>rd_bit</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>do_bit</name> <operator>||</operator> <call><name>cache_validated</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>)</operator></expr>)</condition>
		    <block>{<block_content>
		      <do>do 
			<block>{<block_content> 
			  <decl_stmt><decl><type><name>int</name></type> <name>stale_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			  
			  <if_stmt><if>if <condition>(<expr><call><name>crec_isstale</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>)</condition>
			    <block>{<block_content>
			      <if_stmt><if>if <condition>(<expr><name>stale</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>stale</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			      
			      <expr_stmt><expr><name>stale_flag</name> <operator>=</operator> <name>F_STALE</name></expr>;</expr_stmt>
			    </block_content>}</block></if></if_stmt>
			  
			  <comment type="block">/* don't answer wildcard queries with data not from /etc/hosts or dhcp leases */</comment>
			  <if_stmt><if>if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>T_ANY</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_HOSTS</name> <operator>|</operator> <name>F_DHCP</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			    <continue>continue;</continue></block_content></block></if></if_stmt>
			  
			  
			  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_DNSSECOK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			    <expr_stmt><expr><name>sec_data</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			  
			  <expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			  
			  <if_stmt><if>if <condition>(<expr><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_NEG</name></expr>)</condition>
			    <block>{<block_content>
			      <expr_stmt><expr><name>auth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			      <if_stmt><if>if <condition>(<expr><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_NXDOMAIN</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>nxdomain</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dryrun</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>stale_flag</name> <operator>|</operator> <operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>~</operator><name>F_FORWARD</name><operator>)</operator></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			    </block_content>}</block></if>
			  <else>else
			    <block>{<block_content>
			      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_HOSTS</name> <operator>|</operator> <name>F_DHCP</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>auth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dryrun</name></expr>)</condition>
				<block>{<block_content>
				  <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>stale_flag</name> <operator>|</operator> <operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>~</operator><name>F_FORWARD</name><operator>)</operator></expr></argument>, <argument><expr><call><name>cache_get_name</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, 
					    <argument><expr><call><name>record_source</name><argument_list>(<argument><expr><name><name>crecp</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 				  
				  <if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><name>nameoffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, 
							  <argument><expr><call><name>crec_ttl</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
							  <argument><expr><name>T_PTR</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><call><name>cache_get_name</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				    <expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
			    </block_content>}</block></else></if_stmt>
			</block_content>}</block> while <condition>(<expr><operator>(</operator><name>crecp</name> <operator>=</operator> <call><name>cache_find_by_addr</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>is_arpa</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>;</do>
		    </block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
	      <if type="elseif">else if <condition>(<expr><call><name>is_rev_synth</name><argument_list>(<argument><expr><name>is_arpa</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		  <expr_stmt><expr><name>sec_data</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dryrun</name></expr>)</condition>
		    <block>{<block_content>
		      <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>F_CONFIG</name> <operator>|</operator> <name>F_REVERSE</name> <operator>|</operator> <name>is_arpa</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      
		      <if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><name>nameoffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, 
					      <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>local_ttl</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
					      <argument><expr><name>T_PTR</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			      <expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		    </block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
	      <if type="elseif">else if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_BOGUSPRIV</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		       <operator>(</operator><operator>(</operator><name>is_arpa</name> <operator>==</operator> <name>F_IPV6</name> <operator>&amp;&amp;</operator> <call><name>private_net6</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>addr6</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><name>is_arpa</name> <operator>==</operator> <name>F_IPV4</name> <operator>&amp;&amp;</operator> <call><name>private_net</name><argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>addr4</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
		       <operator>!</operator><call><name>lookup_domain</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>F_DOMAINSRV</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
		  <comment type="block">/* if no configured server, not in cache, enabled and private IPV4 address, return NXDOMAIN */</comment>
		  <expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		  <expr_stmt><expr><name>sec_data</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		  <expr_stmt><expr><name>nxdomain</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dryrun</name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>F_CONFIG</name> <operator>|</operator> <name>F_REVERSE</name> <operator>|</operator> <name>is_arpa</name> <operator>|</operator> <name>F_NEG</name> <operator>|</operator> <name>F_NXDOMAIN</name></expr></argument>,
			      <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>

	  <for>for <control>(<init><expr><name>flag</name> <operator>=</operator> <name>F_IPV4</name></expr>;</init> <condition><expr><name>flag</name></expr>;</condition> <incr><expr><name>flag</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>flag</name> <operator>==</operator> <name>F_IPV4</name><operator>)</operator></expr> ?</condition><then> <expr><name>F_IPV6</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></incr>)</control>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>type</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>flag</name> <operator>==</operator> <name>F_IPV6</name><operator>)</operator></expr> ?</condition><then> <expr><name>T_AAAA</name></expr> </then><else>: <expr><name>T_A</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name><name>struct</name> <name>interface_name</name></name> <modifier>*</modifier></type><name>intr</name></decl>;</decl_stmt>

	      <if_stmt><if>if <condition>(<expr><name>qtype</name> <operator>!=</operator> <name>type</name> <operator>&amp;&amp;</operator> <name>qtype</name> <operator>!=</operator> <name>T_ANY</name></expr>)</condition><block type="pseudo"><block_content>
		<continue>continue;</continue></block_content></block></if></if_stmt>
	      
	      <comment type="block">/* interface name stuff */</comment>
	      <for>for <control>(<init><expr><name>intr</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>int_names</name></name></expr>;</init> <condition><expr><name>intr</name></expr>;</condition> <incr><expr><name>intr</name> <operator>=</operator> <name><name>intr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><call><name>hostname_isequal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>intr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		  <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	      
	      <if_stmt><if>if <condition>(<expr><name>intr</name></expr>)</condition>
		<block>{<block_content>
		  <decl_stmt><decl><type><name><name>struct</name> <name>addrlist</name></name> <modifier>*</modifier></type><name>addrlist</name></decl>;</decl_stmt>
		  <decl_stmt><decl><type><name>int</name></type> <name>gotit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>localise</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		  <expr_stmt><expr><call><name>enumerate_interfaces</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    
		  <comment type="block">/* See if a putative address is on the network from which we received
		     the query, is so we'll filter other answers. */</comment>
		  <if_stmt><if>if <condition>(<expr><name><name>local_addr</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOCALISE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <name>T_A</name></expr>)</condition><block type="pseudo"><block_content>
		    <for>for <control>(<init><expr><name>intr</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>int_names</name></name></expr>;</init> <condition><expr><name>intr</name></expr>;</condition> <incr><expr><name>intr</name> <operator>=</operator> <name><name>intr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		      <if_stmt><if>if <condition>(<expr><call><name>hostname_isequal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>intr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<for>for <control>(<init><expr><name>addrlist</name> <operator>=</operator> <name><name>intr</name><operator>-&gt;</operator><name>addr</name></name></expr>;</init> <condition><expr><name>addrlist</name></expr>;</condition> <incr><expr><name>addrlist</name> <operator>=</operator> <name><name>addrlist</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
			  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>addrlist</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ADDRLIST_IPV6</name><operator>)</operator> <operator>&amp;&amp;</operator> 
			      <call><name>is_same_net</name><argument_list>(<argument><expr><name><name>addrlist</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr4</name></name></expr></argument>, <argument><expr><name>local_addr</name></expr></argument>, <argument><expr><name>local_netmask</name></expr></argument>)</argument_list></call></expr>)</condition>
			    <block>{<block_content>
			      <expr_stmt><expr><name>localise</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			      <break>break;</break>
			    </block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
		  
		  <for>for <control>(<init><expr><name>intr</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>int_names</name></name></expr>;</init> <condition><expr><name>intr</name></expr>;</condition> <incr><expr><name>intr</name> <operator>=</operator> <name><name>intr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		    <if_stmt><if>if <condition>(<expr><call><name>hostname_isequal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>intr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		      <block>{<block_content>
			<for>for <control>(<init><expr><name>addrlist</name> <operator>=</operator> <name><name>intr</name><operator>-&gt;</operator><name>addr</name></name></expr>;</init> <condition><expr><name>addrlist</name></expr>;</condition> <incr><expr><name>addrlist</name> <operator>=</operator> <name><name>addrlist</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
			  <if_stmt><if>if <condition>(<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>addrlist</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ADDRLIST_IPV6</name><operator>)</operator></expr> ?</condition><then> <expr><name>T_AAAA</name></expr> </then><else>: <expr><name>T_A</name></expr></else></ternary><operator>)</operator> <operator>==</operator> <name>type</name></expr>)</condition>
			    <block>{<block_content>
			      <if_stmt><if>if <condition>(<expr><name>localise</name> <operator>&amp;&amp;</operator> 
				  <operator>!</operator><call><name>is_same_net</name><argument_list>(<argument><expr><name><name>addrlist</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr4</name></name></expr></argument>, <argument><expr><name>local_addr</name></expr></argument>, <argument><expr><name>local_netmask</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			      <if_stmt><if>if <condition>(<expr><name><name>addrlist</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ADDRLIST_REVONLY</name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			      <expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>	
			      <expr_stmt><expr><name>sec_data</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dryrun</name></expr>)</condition>
				<block>{<block_content>
				  <expr_stmt><expr><name>gotit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				  <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>F_FORWARD</name> <operator>|</operator> <name>F_CONFIG</name> <operator>|</operator> <name>flag</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addrlist</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				  <if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><name>nameoffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, 
							  <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>local_ttl</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, 
							  <argument><expr><ternary><condition><expr><name>type</name> <operator>==</operator> <name>T_A</name></expr> ?</condition><then> <expr><literal type="string">"4"</literal></expr> </then><else>: <expr><literal type="string">"6"</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addrlist</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				    <expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
			    </block_content>}</block></if></if_stmt></block_content></block></for>
		      </block_content>}</block></if></if_stmt></block_content></block></for>
		  
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dryrun</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>gotit</name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>F_FORWARD</name> <operator>|</operator> <name>F_CONFIG</name> <operator>|</operator> <name>flag</name> <operator>|</operator> <name>F_NEG</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		     
		  <continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

	      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>crecp</name> <operator>=</operator> <call><name>cache_find_by_name</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>flag</name> <operator>|</operator> <name>F_NXDOMAIN</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>dryrun</name></expr> ?</condition><then> <expr><name>F_NO_RR</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		<block>{<block_content>
		  <decl_stmt><decl><type><name>int</name></type> <name>localise</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		 		  
		  <comment type="block">/* See if a putative address is on the network from which we received
		     the query, is so we'll filter other answers. */</comment>
		  <if_stmt><if>if <condition>(<expr><name><name>local_addr</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOCALISE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>flag</name> <operator>==</operator> <name>F_IPV4</name></expr>)</condition>
		    <block>{<block_content>
		      <decl_stmt><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>save</name> <init>= <expr><name>crecp</name></expr></init></decl>;</decl_stmt>
		      <do>do <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_HOSTS</name><operator>)</operator> <operator>&amp;&amp;</operator>
			    <call><name>is_same_net</name><argument_list>(<argument><expr><name><name>crecp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr4</name></name></expr></argument>, <argument><expr><name>local_addr</name></expr></argument>, <argument><expr><name>local_netmask</name></expr></argument>)</argument_list></call></expr>)</condition>
			  <block>{<block_content>
			    <expr_stmt><expr><name>localise</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			    <break>break;</break>
			  </block_content>}</block></if></if_stmt> 
			</block_content>}</block> while <condition>(<expr><operator>(</operator><name>crecp</name> <operator>=</operator> <call><name>cache_find_by_name</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>;</do>
		      <expr_stmt><expr><name>crecp</name> <operator>=</operator> <name>save</name></expr>;</expr_stmt>
		    </block_content>}</block></if></if_stmt>

		  <comment type="block">/* If the client asked for DNSSEC  don't use cached data. */</comment>
		  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_HOSTS</name> <operator>|</operator> <name>F_DHCP</name> <operator>|</operator> <name>F_CONFIG</name><operator>)</operator><operator>)</operator> <operator>||</operator>
		      <operator>(</operator><name>rd_bit</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>do_bit</name> <operator>||</operator> <call><name>cache_validated</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		    <do>do
		      <block>{<block_content> 
			<decl_stmt><decl><type><name>int</name></type> <name>stale_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			
			<if_stmt><if>if <condition>(<expr><call><name>crec_isstale</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>)</condition>
			  <block>{<block_content>
			    <if_stmt><if>if <condition>(<expr><name>stale</name></expr>)</condition><block type="pseudo"><block_content>
			      <expr_stmt><expr><operator>*</operator><name>stale</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			    
			    <expr_stmt><expr><name>stale_flag</name> <operator>=</operator> <name>F_STALE</name></expr>;</expr_stmt>
			  </block_content>}</block></if></if_stmt>
			
			<comment type="block">/* don't answer wildcard queries with data not from /etc/hosts
			   or DHCP leases */</comment>
			<if_stmt><if>if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>T_ANY</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_HOSTS</name> <operator>|</operator> <name>F_DHCP</name> <operator>|</operator> <name>F_CONFIG</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			  <break>break;</break></block_content></block></if></if_stmt>
			
			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_DNSSECOK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			  <expr_stmt><expr><name>sec_data</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			
			<if_stmt><if>if <condition>(<expr><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_NEG</name></expr>)</condition>
			  <block>{<block_content>
			    <expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			    <expr_stmt><expr><name>auth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			    <if_stmt><if>if <condition>(<expr><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_NXDOMAIN</name></expr>)</condition><block type="pseudo"><block_content>
			      <expr_stmt><expr><name>nxdomain</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dryrun</name></expr>)</condition><block type="pseudo"><block_content>
			      <comment type="line">// Pi-hole modification: Added record_source(crecp-&gt;uid) such that the subroutines know</comment>
			      <comment type="line">//                       where the reply came from (e.g. gravity.list)</comment>
			      <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>stale_flag</name> <operator>|</operator> <name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>record_source</name><argument_list>(<argument><expr><name><name>crecp</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			  </block_content>}</block></if>
			<else>else 
			  <block>{<block_content>
			    <comment type="block">/* If we are returning local answers depending on network,
			       filter here. */</comment>
			    <if_stmt><if>if <condition>(<expr><name>localise</name> <operator>&amp;&amp;</operator> 
				<operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_HOSTS</name><operator>)</operator> <operator>&amp;&amp;</operator>
				<operator>!</operator><call><name>is_same_net</name><argument_list>(<argument><expr><name><name>crecp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr4</name></name></expr></argument>, <argument><expr><name>local_addr</name></expr></argument>, <argument><expr><name>local_netmask</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			      <continue>continue;</continue></block_content></block></if></if_stmt>
			    
			    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_HOSTS</name> <operator>|</operator> <name>F_DHCP</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			      <expr_stmt><expr><name>auth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			    
			    <expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dryrun</name></expr>)</condition>
			      <block>{<block_content>
				<expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>stale_flag</name> <operator>|</operator> <operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>~</operator><name>F_REVERSE</name><operator>)</operator></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crecp</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>,
					  <argument><expr><call><name>record_source</name><argument_list>(<argument><expr><name><name>crecp</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line">// ****************************** Pi-hole modification ******************************</comment>
				<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><ternary><condition><expr><name>crecp</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><ternary><condition><expr><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_BIGNAME</name></expr> ?</condition><then> <expr><name><name>crecp</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>bname</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><name><name>crecp</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>sname</name></name></expr></else></ternary></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if<condition>(<expr><call><name>FTL_CNAME</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>log_display_id</name></name></expr></argument>)</argument_list></call></expr>)</condition>
				  <block>{<block_content>
				    <comment type="line">// Served from cache. This can happen if a domain hidden in the CNAME path</comment>
				    <comment type="line">// is only blocked for some but not all clients. In this case, the entire</comment>
				    <comment type="line">// CNAME path may already be in the cache.</comment>
				    <comment type="line">// This query is to be blocked as we found a blocked domain while walking the CNAME path.</comment>
				    <comment type="line">// Log to pihole.log: "cached domainabc.com is blocked during CNAME inspection"</comment>
				    <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>F_UPSTREAM</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"blocked during CNAME inspection"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				    <break>break;</break>
				  </block_content>}</block></if></if_stmt>
				<comment type="line">// **********************************************************************************</comment>
				
				<if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><name>nameoffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, 
							<argument><expr><call><name>crec_ttl</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, 
							<argument><expr><ternary><condition><expr><name>type</name> <operator>==</operator> <name>T_A</name></expr> ?</condition><then> <expr><literal type="string">"4"</literal></expr> </then><else>: <expr><literal type="string">"6"</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crecp</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				  <expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
			      </block_content>}</block></if></if_stmt>
			  </block_content>}</block></else></if_stmt>
		      </block_content>}</block> while <condition>(<expr><operator>(</operator><name>crecp</name> <operator>=</operator> <call><name>cache_find_by_name</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>;</do></block_content></block></if></if_stmt>
		</block_content>}</block></if>
	      <if type="elseif">else if <condition>(<expr><call><name>is_name_synthetic</name><argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>sec_data</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dryrun</name></expr>)</condition>
		    <block>{<block_content>
		      <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>F_FORWARD</name> <operator>|</operator> <name>F_CONFIG</name> <operator>|</operator> <name>flag</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><name>nameoffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, 
					      <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>local_ttl</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><ternary><condition><expr><name>type</name> <operator>==</operator> <name>T_A</name></expr> ?</condition><then> <expr><literal type="string">"4"</literal></expr> </then><else>: <expr><literal type="string">"6"</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		    </block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></for>

	  <if_stmt><if>if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>T_MX</name> <operator>||</operator> <name>qtype</name> <operator>==</operator> <name>T_ANY</name></expr>)</condition>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	      <for>for <control>(<init><expr><name>rec</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>mxnames</name></name></expr>;</init> <condition><expr><name>rec</name></expr>;</condition> <incr><expr><name>rec</name> <operator>=</operator> <name><name>rec</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rec</name><operator>-&gt;</operator><name>issrv</name></name> <operator>&amp;&amp;</operator> <call><name>hostname_isequal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><name>ans</name> <operator>=</operator> <name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		    <expr_stmt><expr><name>sec_data</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dryrun</name></expr>)</condition>
		      <block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>F_CONFIG</name> <operator>|</operator> <name>F_RRNAME</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"&lt;MX&gt;"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><name>nameoffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>local_ttl</name></name></expr></argument>,
						<argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name>T_MX</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><literal type="string">"sd"</literal></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>weight</name></name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>target</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			  <block>{<block_content>
			    <expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt>
			    <if_stmt><if>if <condition>(<expr><name><name>rec</name><operator>-&gt;</operator><name>target</name></name></expr>)</condition><block type="pseudo"><block_content>
			      <expr_stmt><expr><name><name>rec</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			  </block_content>}</block></if></if_stmt>
		      </block_content>}</block></if></if_stmt>
		  </block_content>}</block></if></if_stmt></block_content></block></for>
	      
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_SELFMX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOCALMX</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
		  <call><name>cache_find_by_name</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>F_HOSTS</name> <operator>|</operator> <name>F_DHCP</name> <operator>|</operator> <name>F_NO_RR</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content> 
		  <expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		  <expr_stmt><expr><name>sec_data</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dryrun</name></expr>)</condition>
		    <block>{<block_content>
		      <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>F_CONFIG</name> <operator>|</operator> <name>F_RRNAME</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"&lt;MX&gt;"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><name>nameoffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>local_ttl</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, 
					      <argument><expr><name>T_MX</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><literal type="string">"sd"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, 
					      <argument><expr><ternary><condition><expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_SELFMX</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>name</name></expr> </then><else>: <expr><name><name>daemon</name><operator>-&gt;</operator><name>mxtarget</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		    </block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
	  	  
	  <if_stmt><if>if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>T_SRV</name> <operator>||</operator> <name>qtype</name> <operator>==</operator> <name>T_ANY</name></expr>)</condition>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name><name>struct</name> <name>mx_srv_record</name></name> <modifier>*</modifier></type><name>move</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>up</name> <init>= <expr><operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>mxnames</name></name></expr></init></decl>;</decl_stmt>

	      <for>for <control>(<init><expr><name>rec</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>mxnames</name></name></expr>;</init> <condition><expr><name>rec</name></expr>;</condition> <incr><expr><name>rec</name> <operator>=</operator> <name><name>rec</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><name><name>rec</name><operator>-&gt;</operator><name>issrv</name></name> <operator>&amp;&amp;</operator> <call><name>hostname_isequal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><name>found</name> <operator>=</operator> <name>ans</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		    <expr_stmt><expr><name>sec_data</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dryrun</name></expr>)</condition>
		      <block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>F_CONFIG</name> <operator>|</operator> <name>F_RRNAME</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"&lt;SRV&gt;"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><name>nameoffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>local_ttl</name></name></expr></argument>, 
						<argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name>T_SRV</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><literal type="string">"sssd"</literal></expr></argument>, 
						<argument><expr><name><name>rec</name><operator>-&gt;</operator><name>priority</name></name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>weight</name></name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>srvport</name></name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>target</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			  <block>{<block_content>
			    <expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt>
			    <if_stmt><if>if <condition>(<expr><name><name>rec</name><operator>-&gt;</operator><name>target</name></name></expr>)</condition><block type="pseudo"><block_content>
			      <expr_stmt><expr><name><name>rec</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			  </block_content>}</block></if></if_stmt>
		      </block_content>}</block></if></if_stmt>
		    
		    <comment type="block">/* unlink first SRV record found */</comment>
		    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>move</name></expr>)</condition>
		      <block>{<block_content>
			<expr_stmt><expr><name>move</name> <operator>=</operator> <name>rec</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name><name>rec</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		      </block_content>}</block></if>
		    <else>else<block type="pseudo"><block_content>
		      <expr_stmt><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>rec</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>      
		  </block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
		  <expr_stmt><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>rec</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>

	      <comment type="block">/* put first SRV record back at the end. */</comment>
	      <if_stmt><if>if <condition>(<expr><name>move</name></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name>move</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>move</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

	      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
		<block>{<block_content>
		  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>crecp</name> <operator>=</operator> <call><name>cache_find_by_name</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>F_SRV</name> <operator>|</operator> <name>F_NXDOMAIN</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>dryrun</name></expr> ?</condition><then> <expr><name>F_NO_RR</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
		      <name>rd_bit</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>do_bit</name> <operator>||</operator> <operator>(</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DNSSEC_VALID</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_DNSSECOK</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		    <do>do
		      <block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>stale_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			
			<if_stmt><if>if <condition>(<expr><call><name>crec_isstale</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>)</condition>
			  <block>{<block_content>
			    <if_stmt><if>if <condition>(<expr><name>stale</name></expr>)</condition><block type="pseudo"><block_content>
			      <expr_stmt><expr><operator>*</operator><name>stale</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			    
			    <expr_stmt><expr><name>stale_flag</name> <operator>=</operator> <name>F_STALE</name></expr>;</expr_stmt>
			  </block_content>}</block></if></if_stmt>
			<comment type="block">/* don't answer wildcard queries with data not from /etc/hosts or dhcp leases, except for NXDOMAIN */</comment>
			<if_stmt><if>if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>T_ANY</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_NXDOMAIN</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			  <break>break;</break></block_content></block></if></if_stmt>
			
			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_DNSSECOK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			  <expr_stmt><expr><name>sec_data</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			
			<expr_stmt><expr><name>auth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>found</name> <operator>=</operator> <name>ans</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			
			<if_stmt><if>if <condition>(<expr><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_NEG</name></expr>)</condition>
			  <block>{<block_content>
			    <if_stmt><if>if <condition>(<expr><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_NXDOMAIN</name></expr>)</condition><block type="pseudo"><block_content>
			      <expr_stmt><expr><name>nxdomain</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dryrun</name></expr>)</condition><block type="pseudo"><block_content>
			      <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>stale_flag</name> <operator>|</operator> <name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			  </block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><operator>!</operator><name>dryrun</name></expr>)</condition>
			  <block>{<block_content>
			    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>target</name> <init>= <expr><call><name>blockdata_retrieve</name><argument_list>(<argument><expr><name><name>crecp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>srv</name><operator>.</operator><name>target</name></name></expr></argument>, <argument><expr><name><name>crecp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>srv</name><operator>.</operator><name>targetlen</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			    <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>stale_flag</name> <operator>|</operator> <name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			    
			    <if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><name>nameoffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, 
						    <argument><expr><call><name>crec_ttl</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>T_SRV</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><literal type="string">"sssd"</literal></expr></argument>,
						    <argument><expr><name><name>crecp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>srv</name><operator>.</operator><name>priority</name></name></expr></argument>, <argument><expr><name><name>crecp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>srv</name><operator>.</operator><name>weight</name></name></expr></argument>, <argument><expr><name><name>crecp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>srv</name><operator>.</operator><name>srvport</name></name></expr></argument>,
						    <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			      <expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
			  </block_content>}</block></if></if_stmt>
		      </block_content>}</block> while <condition>(<expr><operator>(</operator><name>crecp</name> <operator>=</operator> <call><name>cache_find_by_name</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>F_SRV</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>;</do></block_content></block></if></if_stmt>
		    </block_content>}</block></if></if_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name> <operator>&amp;&amp;</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_FILTER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>qtype</name> <operator>==</operator> <name>T_SRV</name> <operator>||</operator> <operator>(</operator><name>qtype</name> <operator>==</operator> <name>T_ANY</name> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		  <expr_stmt><expr><name>sec_data</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dryrun</name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>F_CONFIG</name> <operator>|</operator> <name>F_NEG</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>

	  <if_stmt><if>if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>T_NAPTR</name> <operator>||</operator> <name>qtype</name> <operator>==</operator> <name>T_ANY</name></expr>)</condition>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name><name>struct</name> <name>naptr</name></name> <modifier>*</modifier></type><name>na</name></decl>;</decl_stmt>
	      <for>for <control>(<init><expr><name>na</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>naptr</name></name></expr>;</init> <condition><expr><name>na</name></expr>;</condition> <incr><expr><name>na</name> <operator>=</operator> <name><name>na</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><call><name>hostname_isequal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>na</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		    <expr_stmt><expr><name>sec_data</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dryrun</name></expr>)</condition>
		      <block>{<block_content>
			<expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>F_CONFIG</name> <operator>|</operator> <name>F_RRNAME</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"&lt;NAPTR&gt;"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><name>nameoffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>local_ttl</name></name></expr></argument>, 
						<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>T_NAPTR</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><literal type="string">"sszzzd"</literal></expr></argument>, 
						<argument><expr><name><name>na</name><operator>-&gt;</operator><name>order</name></name></expr></argument>, <argument><expr><name><name>na</name><operator>-&gt;</operator><name>pref</name></name></expr></argument>, <argument><expr><name><name>na</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>na</name><operator>-&gt;</operator><name>services</name></name></expr></argument>, <argument><expr><name><name>na</name><operator>-&gt;</operator><name>regexp</name></name></expr></argument>, <argument><expr><name><name>na</name><operator>-&gt;</operator><name>replace</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			  <expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		      </block_content>}</block></if></if_stmt>
		  </block_content>}</block></if></if_stmt></block_content></block></for>
	    </block_content>}</block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>T_MAILB</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>nxdomain</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>sec_data</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	  <if_stmt><if>if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>T_SOA</name> <operator>&amp;&amp;</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_FILTER</name></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	      <expr_stmt><expr><name>sec_data</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dryrun</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>F_CONFIG</name> <operator>|</operator> <name>F_NEG</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ans</name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* failed to answer a question */</comment>
    </block_content>}</block></for>
  
  <if_stmt><if>if <condition>(<expr><name>dryrun</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>dryrun</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <goto>goto <name>rerun</name>;</goto>
    </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* create an additional data section, for stuff in SRV and MX record replies. */</comment>
  <for>for <control>(<init><expr><name>rec</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>mxnames</name></name></expr>;</init> <condition><expr><name>rec</name></expr>;</condition> <incr><expr><name>rec</name> <operator>=</operator> <name><name>rec</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>rec</name><operator>-&gt;</operator><name>offset</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
      <block>{<block_content>
	<comment type="block">/* squash dupes */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>mx_srv_record</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name><name>rec</name><operator>-&gt;</operator><name>next</name></name></expr>;</init> <condition><expr><name>tmp</name></expr>;</condition> <incr><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	  <if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>offset</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>hostname_isequal</name><argument_list>(<argument><expr><name><name>rec</name><operator>-&gt;</operator><name>target</name></name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>target</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
	
	<expr_stmt><expr><name>crecp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>crecp</name> <operator>=</operator> <call><name>cache_find_by_name</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>target</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>F_IPV4</name> <operator>|</operator> <name>F_IPV6</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	  <block>{<block_content>
	    <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>=  <expr><ternary><condition><expr><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_IPV4</name></expr> ?</condition><then> <expr><name>T_A</name></expr> </then><else>: <expr><name>T_AAAA</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

	    <if_stmt><if>if <condition>(<expr><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_NEG</name></expr>)</condition><block type="pseudo"><block_content>
	      <continue>continue;</continue></block_content></block></if></if_stmt>

	    <if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, 
				    <argument><expr><call><name>crec_ttl</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, 
				    <argument><expr><ternary><condition><expr><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_IPV4</name></expr> ?</condition><then> <expr><literal type="string">"4"</literal></expr> </then><else>: <expr><literal type="string">"6"</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crecp</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>addncount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  </block_content>}</block></while>
      </block_content>}</block></if></if_stmt></block_content></block></for>
  
  <comment type="block">/* done all questions, set up header and return length of result */</comment>
  <comment type="block">/* clear authoritative and truncated flags, set QR flag */</comment>
  <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb3</name></name> <operator>=</operator> <operator>(</operator><name><name>header</name><operator>-&gt;</operator><name>hb3</name></name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>HB3_AA</name> <operator>|</operator> <name>HB3_TC</name><operator>)</operator><operator>)</operator> <operator>|</operator> <name>HB3_QR</name></expr>;</expr_stmt>
  <comment type="block">/* set RA flag */</comment>
  <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb4</name></name> <operator>|=</operator> <name>HB4_RA</name></expr>;</expr_stmt>
   
  <comment type="block">/* authoritative - only hosts and DHCP derived names. */</comment>
  <if_stmt><if>if <condition>(<expr><name>auth</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb3</name></name> <operator>|=</operator> <name>HB3_AA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <comment type="block">/* truncation */</comment>
  <if_stmt><if>if <condition>(<expr><name>trunc</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb3</name></name> <operator>|=</operator> <name>HB3_TC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>nxdomain</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>SET_RCODE</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>NXDOMAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>notimp</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>SET_RCODE</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>NOTIMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>SET_RCODE</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>NOERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> <comment type="block">/* no error */</comment>
  <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>ancount</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>anscount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>nscount</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>arcount</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>addncount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>len</name> <operator>=</operator> <name>ansp</name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>header</name></expr>;</expr_stmt>
  
  <comment type="block">/* Advertise our packet size limit in our reply */</comment>
  <if_stmt><if>if <condition>(<expr><name>have_pseudoheader</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>add_pseudoheader</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>limit</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>edns_pktsz</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>do_bit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>ad_reqd</name> <operator>&amp;&amp;</operator> <name>sec_data</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb4</name></name> <operator>|=</operator> <name>HB4_AD</name></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb4</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HB4_AD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
  
  <return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>
</unit>
