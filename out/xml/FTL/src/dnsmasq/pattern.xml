<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/dnsmasq/pattern.c"><comment type="block">/* dnsmasq is Copyright (c) 2000-2022 Simon Kelley

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 dated June, 1991, or
   (at your option) version 3 dated 29 June, 2007.
 
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
     
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnsmasq.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONNTRACK</name></cpp:ifdef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>do { \
    my_syslog(LOG_DEBUG, __VA_ARGS__); \
  } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT</name><parameter_list>(<parameter><type><name>condition</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>do { \
    if (!(condition)) \
      my_syslog(LOG_ERR, _("[pattern.c:%d] Assertion failure: %s"), __LINE__, #condition); \
  } while (0)</cpp:value></cpp:define>

<comment type="block" format="doxygen">/**
 * Determines whether a given string value matches against a glob pattern
 * which may contain zero-or-more-character wildcards denoted by '*'.
 *
 * Based on "Glob Matching Can Be Simple And Fast Too" by Russ Cox,
 * See https://research.swtch.com/glob
 *
 * @param      value                A string value.
 * @param      num_value_bytes      The number of bytes of the string value.
 * @param      pattern              A glob pattern.
 * @param      num_pattern_bytes    The number of bytes of the glob pattern.
 *
 * @return 1                        If the provided value matches against the glob pattern.
 * @return 0                        Otherwise.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>is_string_matching_glob_pattern</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
  <parameter><decl><type><name>size_t</name></type> <name>num_value_bytes</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>,
  <parameter><decl><type><name>size_t</name></type> <name>num_pattern_bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name>size_t</name></type> <name>value_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>next_value_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>pattern_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>next_pattern_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>value_index</name> <operator>&lt;</operator> <name>num_value_bytes</name> <operator>||</operator> <name>pattern_index</name> <operator>&lt;</operator> <name>num_pattern_bytes</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>pattern_index</name> <operator>&lt;</operator> <name>num_pattern_bytes</name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>char</name></type> <name>pattern_character</name> <init>= <expr><name><name>pattern</name><index>[<expr><name>pattern_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	  <if_stmt><if>if <condition>(<expr><literal type="char">'a'</literal> <operator>&lt;=</operator> <name>pattern_character</name> <operator>&amp;&amp;</operator> <name>pattern_character</name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>pattern_character</name> <operator>-=</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  <if_stmt><if>if <condition>(<expr><name>pattern_character</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition>
	    <block>{<block_content>
	      <comment type="block">/* zero-or-more-character wildcard */</comment>
	      <comment type="block">/* Try to match at value_index, otherwise restart at value_index + 1 next. */</comment>
	      <expr_stmt><expr><name>next_pattern_index</name> <operator>=</operator> <name>pattern_index</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>pattern_index</name><operator>++</operator></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><name>value_index</name> <operator>&lt;</operator> <name>num_value_bytes</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>next_value_index</name> <operator>=</operator> <name>value_index</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
	      <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>next_value_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
	      <continue>continue;</continue>
	    </block_content>}</block></if>
	  <else>else
	    <block>{<block_content>
	      <comment type="block">/* ordinary character */</comment>
	      <if_stmt><if>if <condition>(<expr><name>value_index</name> <operator>&lt;</operator> <name>num_value_bytes</name></expr>)</condition>
	        <block>{<block_content>
		  <decl_stmt><decl><type><name>char</name></type> <name>value_character</name> <init>= <expr><name><name>value</name><index>[<expr><name>value_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		  <if_stmt><if>if <condition>(<expr><literal type="char">'a'</literal> <operator>&lt;=</operator> <name>value_character</name> <operator>&amp;&amp;</operator> <name>value_character</name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name>value_character</name> <operator>-=</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  <if_stmt><if>if <condition>(<expr><name>value_character</name> <operator>==</operator> <name>pattern_character</name></expr>)</condition>
		    <block>{<block_content>
		      <expr_stmt><expr><name>pattern_index</name><operator>++</operator></expr>;</expr_stmt>
		      <expr_stmt><expr><name>value_index</name><operator>++</operator></expr>;</expr_stmt>
		      <continue>continue;</continue>
		    </block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>next_value_index</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>pattern_index</name> <operator>=</operator> <name>next_pattern_index</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>value_index</name> <operator>=</operator> <name>next_value_index</name></expr>;</expr_stmt>
	  <continue>continue;</continue>
	</block_content>}</block></if></if_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></while>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Determines whether a given string value represents a valid DNS name.
 *
 * - DNS names must adhere to RFC 1123: 1 to 253 characters in length, consisting of a sequence of labels
 *   delimited by dots ("."). Each label must be 1 to 63 characters in length, contain only
 *   ASCII letters ("a"-"Z"), digits ("0"-"9"), or hyphens ("-") and must not start or end with a hyphen.
 *
 * - A valid name must be fully qualified, i.e., consist of at least two labels.
 *   The final label must not be fully numeric, and must not be the "local" pseudo-TLD.
 *
 * - Examples:
 *   Valid: "example.com"
 *   Invalid: "ipcamera", "ipcamera.local", "8.8.8.8"
 *
 * @param      value                A string value.
 *
 * @return 1                        If the provided string value is a valid DNS name.
 * @return 0                        Otherwise.
 */</comment>
<function><type><name>int</name></type> <name>is_valid_dns_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name>size_t</name></type> <name>num_bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>num_labels</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>label</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>is_label_numeric</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>c</name> <operator>=</operator> <name>value</name></expr>;</init><condition>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>c</name> <operator>&amp;&amp;</operator>
	  <operator>*</operator><name>c</name> <operator>!=</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>c</name> <operator>!=</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator>
	  <operator>(</operator><operator>*</operator><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <operator>*</operator><name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
	  <operator>(</operator><operator>*</operator><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'A'</literal> <operator>||</operator> <operator>*</operator><name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'Z'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
	  <operator>(</operator><operator>*</operator><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'a'</literal> <operator>||</operator> <operator>*</operator><name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'z'</literal><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Invalid DNS name: Invalid character %c."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>num_bytes</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>label</name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>c</name> <operator>||</operator> <operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Invalid DNS name: Empty label."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <return>return <expr><literal type="number">0</literal></expr>;</return>
	    </block_content>}</block></if></if_stmt>
	  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Invalid DNS name: Label starts with hyphen."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <return>return <expr><literal type="number">0</literal></expr>;</return>
	    </block_content>}</block></if></if_stmt>
	  <expr_stmt><expr><name>label</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>c</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>c</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <operator>*</operator><name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>is_label_numeric</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name><name>c</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Invalid DNS name: Label ends with hyphen."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <return>return <expr><literal type="number">0</literal></expr>;</return>
	    </block_content>}</block></if></if_stmt>
	  <decl_stmt><decl><type><name>size_t</name></type> <name>num_label_bytes</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>c</name> <operator>-</operator> <name>label</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	  <if_stmt><if>if <condition>(<expr><name>num_label_bytes</name> <operator>&gt;</operator> <literal type="number">63</literal></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Invalid DNS name: Label is too long (%zu)."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>num_label_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <return>return <expr><literal type="number">0</literal></expr>;</return>
	    </block_content>}</block></if></if_stmt>
	  <expr_stmt><expr><name>num_labels</name><operator>++</operator></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>c</name></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><name>num_labels</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Invalid DNS name: Not enough labels (%zu)."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>num_labels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	      <if_stmt><if>if <condition>(<expr><name>is_label_numeric</name></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Invalid DNS name: Final label is fully numeric."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	      <if_stmt><if>if <condition>(<expr><name>num_label_bytes</name> <operator>==</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator>
		  <operator>(</operator><name><name>label</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'l'</literal> <operator>||</operator> <name><name>label</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'L'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
		  <operator>(</operator><name><name>label</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'o'</literal> <operator>||</operator> <name><name>label</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'O'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
		  <operator>(</operator><name><name>label</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'c'</literal> <operator>||</operator> <name><name>label</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'C'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
		  <operator>(</operator><name><name>label</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'a'</literal> <operator>||</operator> <name><name>label</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'A'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
		  <operator>(</operator><name><name>label</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'l'</literal> <operator>||</operator> <name><name>label</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'L'</literal><operator>)</operator></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Invalid DNS name: \"local\" pseudo-TLD."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	      <if_stmt><if>if <condition>(<expr><name><name>num_bytes</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>num_bytes</name></expr></argument> &gt;</argument_list></name> <literal type="number">253</literal></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"DNS name has invalid length (%zu)."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>num_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	      <return>return <expr><literal type="number">1</literal></expr>;</return>
	    </block_content>}</block></if></if_stmt>
	  <expr_stmt><expr><name>label</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>is_label_numeric</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Determines whether a given string value represents a valid DNS name pattern.
 *
 * - DNS names must adhere to RFC 1123: 1 to 253 characters in length, consisting of a sequence of labels
 *   delimited by dots ("."). Each label must be 1 to 63 characters in length, contain only
 *   ASCII letters ("a"-"Z"), digits ("0"-"9"), or hyphens ("-") and must not start or end with a hyphen.
 *
 * - Patterns follow the syntax of DNS names, but additionally allow the wildcard character "*" to be used up to
 *   twice per label to match 0 or more characters within that label. Note that the wildcard never matches a dot
 *   (e.g., "*.example.com" matches "api.example.com" but not "api.us.example.com").
 *
 * - A valid name or pattern must be fully qualified, i.e., consist of at least two labels.
 *   The final label must not be fully numeric, and must not be the "local" pseudo-TLD.
 *   A pattern must end with at least two literal (non-wildcard) labels.
 *
 * - Examples:
 *   Valid: "example.com", "*.example.com", "video*.example.com", "api*.*.example.com", "*-prod-*.example.com"
 *   Invalid: "ipcamera", "ipcamera.local", "*", "*.com", "8.8.8.8"
 *
 * @param      value                A string value.
 *
 * @return 1                        If the provided string value is a valid DNS name pattern.
 * @return 0                        Otherwise.
 */</comment>
<function><type><name>int</name></type> <name>is_valid_dns_name_pattern</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name>size_t</name></type> <name>num_bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>num_labels</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>label</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>is_label_numeric</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>num_wildcards</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>previous_label_has_wildcard</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>c</name> <operator>=</operator> <name>value</name></expr>;</init><condition>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>c</name> <operator>&amp;&amp;</operator>
	  <operator>*</operator><name>c</name> <operator>!=</operator> <literal type="char">'*'</literal> <operator>&amp;&amp;</operator> <comment type="block">/* Wildcard. */</comment>
	  <operator>*</operator><name>c</name> <operator>!=</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>c</name> <operator>!=</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator>
	  <operator>(</operator><operator>*</operator><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <operator>*</operator><name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
	  <operator>(</operator><operator>*</operator><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'A'</literal> <operator>||</operator> <operator>*</operator><name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'Z'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
	  <operator>(</operator><operator>*</operator><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'a'</literal> <operator>||</operator> <operator>*</operator><name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'z'</literal><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Invalid DNS name pattern: Invalid character %c."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>c</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>c</name> <operator>!=</operator> <literal type="char">'*'</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>num_bytes</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>label</name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>c</name> <operator>||</operator> <operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Invalid DNS name pattern: Empty label."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <return>return <expr><literal type="number">0</literal></expr>;</return>
	    </block_content>}</block></if></if_stmt>
	  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Invalid DNS name pattern: Label starts with hyphen."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <return>return <expr><literal type="number">0</literal></expr>;</return>
	    </block_content>}</block></if></if_stmt>
	  <expr_stmt><expr><name>label</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>c</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>c</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <operator>*</operator><name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>is_label_numeric</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><name>num_wildcards</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Invalid DNS name pattern: Wildcard character used more than twice per label."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	      <expr_stmt><expr><name>num_wildcards</name><operator>++</operator></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name><name>c</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Invalid DNS name pattern: Label ends with hyphen."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <return>return <expr><literal type="number">0</literal></expr>;</return>
	    </block_content>}</block></if></if_stmt>
	  <decl_stmt><decl><type><name>size_t</name></type> <name>num_label_bytes</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>c</name> <operator>-</operator> <name>label</name><operator>)</operator> <operator>-</operator> <name>num_wildcards</name></expr></init></decl>;</decl_stmt>
	  <if_stmt><if>if <condition>(<expr><name>num_label_bytes</name> <operator>&gt;</operator> <literal type="number">63</literal></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Invalid DNS name pattern: Label is too long (%zu)."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>num_label_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <return>return <expr><literal type="number">0</literal></expr>;</return>
	    </block_content>}</block></if></if_stmt>
	  <expr_stmt><expr><name>num_labels</name><operator>++</operator></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>c</name></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><name>num_labels</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Invalid DNS name pattern: Not enough labels (%zu)."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>num_labels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	      <if_stmt><if>if <condition>(<expr><name>num_wildcards</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>previous_label_has_wildcard</name></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Invalid DNS name pattern: Wildcard within final two labels."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	      <if_stmt><if>if <condition>(<expr><name>is_label_numeric</name></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Invalid DNS name pattern: Final label is fully numeric."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	      <if_stmt><if>if <condition>(<expr><name>num_label_bytes</name> <operator>==</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator>
		  <operator>(</operator><name><name>label</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'l'</literal> <operator>||</operator> <name><name>label</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'L'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
		  <operator>(</operator><name><name>label</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'o'</literal> <operator>||</operator> <name><name>label</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'O'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
		  <operator>(</operator><name><name>label</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'c'</literal> <operator>||</operator> <name><name>label</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'C'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
		  <operator>(</operator><name><name>label</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'a'</literal> <operator>||</operator> <name><name>label</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'A'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
		  <operator>(</operator><name><name>label</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'l'</literal> <operator>||</operator> <name><name>label</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'L'</literal><operator>)</operator></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Invalid DNS name pattern: \"local\" pseudo-TLD."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	      <if_stmt><if>if <condition>(<expr><name><name>num_bytes</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>num_bytes</name></expr></argument> &gt;</argument_list></name> <literal type="number">253</literal></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"DNS name pattern has invalid length after removing wildcards (%zu)."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>num_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	      <return>return <expr><literal type="number">1</literal></expr>;</return>
	    </block_content>}</block></if></if_stmt>
	    <expr_stmt><expr><name>label</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>is_label_numeric</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	    <expr_stmt><expr><name>previous_label_has_wildcard</name> <operator>=</operator> <name>num_wildcards</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	    <expr_stmt><expr><name>num_wildcards</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	  </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Determines whether a given DNS name matches against a DNS name pattern.
 *
 * @param      name                 A valid DNS name.
 * @param      pattern              A valid DNS name pattern.
 *
 * @return 1                        If the provided DNS name matches against the DNS name pattern.
 * @return 0                        Otherwise.
 */</comment>
<function><type><name>int</name></type> <name>is_dns_name_matching_pattern</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>is_valid_dns_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>is_valid_dns_name_pattern</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name>name</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>pattern</name></expr></init></decl>;</decl_stmt>
  
  <do>do <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name_label</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>*</operator><name>n</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>n</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern_label</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_string_matching_glob_pattern</name><argument_list>(
        <argument><expr><name>name_label</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>name_label</name><operator>)</operator></expr></argument>,
        <argument><expr><name>pattern_label</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>pattern_label</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <break>break;</break></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>n</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block> while <condition>(<expr><operator>*</operator><name>n</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name></expr>)</condition>;</do>
  
  <return>return <expr><operator>!</operator><operator>*</operator><name>n</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>p</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
