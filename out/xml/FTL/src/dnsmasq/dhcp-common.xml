<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/dnsmasq/dhcp-common.c"><comment type="block">/* dnsmasq is Copyright (c) 2000-2022 Simon Kelley

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 dated June, 1991, or
   (at your option) version 3 dated 29 June, 2007.
 
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
     
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnsmasq.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP</name></cpp:ifdef>

<function><type><name>void</name></type> <name>dhcp_common_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* These each hold a DHCP option max size 255
     and get a terminating zero added */</comment>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name> <operator>=</operator> <call><name>safe_malloc</name><argument_list>(<argument><expr><name>DHCP_BUFF_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name> <operator>=</operator> <call><name>safe_malloc</name><argument_list>(<argument><expr><name>DHCP_BUFF_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff3</name></name> <operator>=</operator> <call><name>safe_malloc</name><argument_list>(<argument><expr><name>DHCP_BUFF_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* dhcp_packet is used by v4 and v6, outpacket only by v6 
     sizeof(struct dhcp_packet) is as good an initial size as any,
     even for v6 */</comment>
  <expr_stmt><expr><call><name>expand_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_packet</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dhcp_packet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp6</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>expand_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>outpacket</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dhcp_packet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>recv_dhcp_packet</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>msghdr</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>  
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>sz</name></decl>, <decl><type ref="prev"/><name>new_sz</name></decl>;</decl_stmt>
 
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>msg_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <while>while <condition>(<expr><operator>(</operator><name>sz</name> <operator>=</operator> <call><name>recvmsg</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>MSG_PEEK</name> <operator>|</operator> <name>MSG_TRUNC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
      
      <if_stmt><if>if <condition>(<expr><name>sz</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>msg_flags</name></name> <operator>&amp;</operator> <name>MSG_TRUNC</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<break>break;</break></block_content></block></if></if_stmt>

      <comment type="block">/* Very new Linux kernels return the actual size needed, 
	 older ones always return truncated size */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>sz</name> <operator>==</operator> <name><name>msg</name><operator>-&gt;</operator><name>msg_iov</name><operator>-&gt;</operator><name>iov_len</name></name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>expand_buf</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>msg_iov</name></name></expr></argument>, <argument><expr><name>sz</name> <operator>+</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <expr_stmt><expr><call><name>expand_buf</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>msg_iov</name></name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <break>break;</break>
	</block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
  
  <while>while <condition>(<expr><operator>(</operator><name>new_sz</name> <operator>=</operator> <call><name>recvmsg</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>

  <comment type="block">/* Some kernels seem to ignore MSG_PEEK, and dequeue the packet anyway. 
     If that happens we get EAGAIN here because the socket is non-blocking.
     Use the result of the original testing recvmsg as long as the buffer
     was big enough. There's a small race here that may lose the odd packet,
     but it's UDP anyway. */</comment>
  
  <if_stmt><if>if <condition>(<expr><name>new_sz</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>errno</name> <operator>==</operator> <name>EWOULDBLOCK</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EAGAIN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>new_sz</name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>msg_flags</name></name> <operator>&amp;</operator> <name>MSG_TRUNC</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>new_sz</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* like match_netid() except that the check can have a trailing * for wildcard */</comment>
<comment type="block">/* started as a direct copy of match_netid() */</comment>
<function><type><name>int</name></type> <name>match_netid_wild</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>check</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>tmp1</name></decl>;</decl_stmt>
  
  <for>for <control>(<init>;</init> <condition><expr><name>check</name></expr>;</condition> <incr><expr><name>check</name> <operator>=</operator> <name><name>check</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>check_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>check</name><operator>-&gt;</operator><name>net</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>is_wc</name> <init>= <expr><operator>(</operator><name>check_len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>check</name><operator>-&gt;</operator><name>net</name><index>[<expr><name>check_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
      
      <comment type="block">/* '#' for not is for backwards compat. */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>check</name><operator>-&gt;</operator><name>net</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'!'</literal> <operator>&amp;&amp;</operator> <name><name>check</name><operator>-&gt;</operator><name>net</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'#'</literal></expr>)</condition>
	<block>{<block_content>
	  <for>for <control>(<init><expr><name>tmp1</name> <operator>=</operator> <name>pool</name></expr>;</init> <condition><expr><name>tmp1</name></expr>;</condition> <incr><expr><name>tmp1</name> <operator>=</operator> <name><name>tmp1</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>is_wc</name></expr> ?</condition><then> <expr><operator>(</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>check</name><operator>-&gt;</operator><name>net</name></name></expr></argument>, <argument><expr><name><name>tmp1</name><operator>-&gt;</operator><name>net</name></name></expr></argument>, <argument><expr><name>check_len</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> </then><else>:
		<expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>check</name><operator>-&gt;</operator><name>net</name></name></expr></argument>, <argument><expr><name><name>tmp1</name><operator>-&gt;</operator><name>net</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></else></ternary></expr>)</condition><block type="pseudo"><block_content>
	      <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp1</name></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if>
      <else>else<block type="pseudo"><block_content>
	<for>for <control>(<init><expr><name>tmp1</name> <operator>=</operator> <name>pool</name></expr>;</init> <condition><expr><name>tmp1</name></expr>;</condition> <incr><expr><name>tmp1</name> <operator>=</operator> <name><name>tmp1</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	  <if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>is_wc</name></expr> ?</condition><then> <expr><operator>(</operator><call><name>strncmp</name><argument_list>(<argument><expr><operator>(</operator><name><name>check</name><operator>-&gt;</operator><name>net</name></name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>tmp1</name><operator>-&gt;</operator><name>net</name></name></expr></argument>, <argument><expr><name>check_len</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> </then><else>:
	      <expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><name><name>check</name><operator>-&gt;</operator><name>net</name></name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>tmp1</name><operator>-&gt;</operator><name>net</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></else></ternary></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for></block_content></block></else></if_stmt>
    </block_content>}</block></for>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>run_tag_if</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>tags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>tag_if</name></name> <modifier>*</modifier></type><name>exprs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid_list</name></name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

  <comment type="block">/* this now uses match_netid_wild() above so that tag_if can
   * be used to set a 'group of interfaces' tag.
   */</comment>
  <for>for <control>(<init><expr><name>exprs</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>tag_if</name></name></expr>;</init> <condition><expr><name>exprs</name></expr>;</condition> <incr><expr><name>exprs</name> <operator>=</operator> <name><name>exprs</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><call><name>match_netid_wild</name><argument_list>(<argument><expr><name><name>exprs</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <for>for <control>(<init><expr><name>list</name> <operator>=</operator> <name><name>exprs</name><operator>-&gt;</operator><name>set</name></name></expr>;</init> <condition><expr><name>list</name></expr>;</condition> <incr><expr><name>list</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
	  <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>list</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>tags</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>tags</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>list</name></name></expr>;</expr_stmt>
	</block_content>}</block></for></block_content></block></if></if_stmt></block_content></block></for>

  <return>return <expr><name>tags</name></expr>;</return>
</block_content>}</block></function>


<function><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>option_filter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>tags</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>context_tags</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_opt</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>tagif</name> <init>= <expr><call><name>run_tag_if</name><argument_list>(<argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_opt</name></name> <modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_opt</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>  

  <comment type="block">/* flag options which are valid with the current tag set (sans context tags) */</comment>
  <for>for <control>(<init><expr><name>opt</name> <operator>=</operator> <name>opts</name></expr>;</init> <condition><expr><name>opt</name></expr>;</condition> <incr><expr><name>opt</name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DHOPT_TAGOK</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>DHOPT_ENCAPSULATE</name> <operator>|</operator> <name>DHOPT_VENDOR</name> <operator>|</operator> <name>DHOPT_RFC3925</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
	  <call><name>match_netid</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>netid</name></name></expr></argument>, <argument><expr><name>tagif</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>DHOPT_TAGOK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

  <comment type="block">/* now flag options which are valid, including the context tags,
     otherwise valid options are inhibited if we found a higher priority one above */</comment>
  <if_stmt><if>if <condition>(<expr><name>context_tags</name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>last_tag</name></decl>;</decl_stmt>

      <for>for <control>(<init><expr><name>last_tag</name> <operator>=</operator> <name>context_tags</name></expr>;</init> <condition><expr><name><name>last_tag</name><operator>-&gt;</operator><name>next</name></name></expr>;</condition> <incr><expr><name>last_tag</name> <operator>=</operator> <name><name>last_tag</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
      <expr_stmt><expr><name><name>last_tag</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>tags</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>tagif</name> <operator>=</operator> <call><name>run_tag_if</name><argument_list>(<argument><expr><name>context_tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* reset stuff with tag:!&lt;tag&gt; which now matches. */</comment>
      <for>for <control>(<init><expr><name>opt</name> <operator>=</operator> <name>opts</name></expr>;</init> <condition><expr><name>opt</name></expr>;</condition> <incr><expr><name>opt</name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>DHOPT_ENCAPSULATE</name> <operator>|</operator> <name>DHOPT_VENDOR</name> <operator>|</operator> <name>DHOPT_RFC3925</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
	    <operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DHOPT_TAGOK</name><operator>)</operator> <operator>&amp;&amp;</operator>
	    <operator>!</operator><call><name>match_netid</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>netid</name></name></expr></argument>, <argument><expr><name>tagif</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DHOPT_TAGOK</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

      <for>for <control>(<init><expr><name>opt</name> <operator>=</operator> <name>opts</name></expr>;</init> <condition><expr><name>opt</name></expr>;</condition> <incr><expr><name>opt</name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>DHOPT_ENCAPSULATE</name> <operator>|</operator> <name>DHOPT_VENDOR</name> <operator>|</operator> <name>DHOPT_RFC3925</name> <operator>|</operator> <name>DHOPT_TAGOK</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
	    <call><name>match_netid</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>netid</name></name></expr></argument>, <argument><expr><name>tagif</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
	  <block>{<block_content>
	    <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_opt</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>  
	    <for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name>opts</name></expr>;</init> <condition><expr><name>tmp</name></expr>;</condition> <incr><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content> 
	      <if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>opt</name></name> <operator>==</operator> <name><name>opt</name><operator>-&gt;</operator><name>opt</name></name> <operator>&amp;&amp;</operator> <name><name>opt</name><operator>-&gt;</operator><name>netid</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>tmp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DHOPT_TAGOK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>DHOPT_TAGOK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  </block_content>}</block></if></if_stmt></block_content></block></for>      
    </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* now flag untagged options which are not overridden by tagged ones */</comment>
  <for>for <control>(<init><expr><name>opt</name> <operator>=</operator> <name>opts</name></expr>;</init> <condition><expr><name>opt</name></expr>;</condition> <incr><expr><name>opt</name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>DHOPT_ENCAPSULATE</name> <operator>|</operator> <name>DHOPT_VENDOR</name> <operator>|</operator> <name>DHOPT_RFC3925</name> <operator>|</operator> <name>DHOPT_TAGOK</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>opt</name><operator>-&gt;</operator><name>netid</name></name></expr>)</condition>
      <block>{<block_content>
	<for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name>opts</name></expr>;</init> <condition><expr><name>tmp</name></expr>;</condition> <incr><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content> 
	  <if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>opt</name></name> <operator>==</operator> <name><name>opt</name><operator>-&gt;</operator><name>opt</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>tmp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DHOPT_TAGOK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>DHOPT_TAGOK</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>tmp</name><operator>-&gt;</operator><name>netid</name></name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Ignoring duplicate dhcp-option %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
      </block_content>}</block></if></if_stmt></block_content></block></for>

  <comment type="block">/* Finally, eliminate duplicate options later in the chain, and therefore earlier in the config file. */</comment>
  <for>for <control>(<init><expr><name>opt</name> <operator>=</operator> <name>opts</name></expr>;</init> <condition><expr><name>opt</name></expr>;</condition> <incr><expr><name>opt</name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DHOPT_TAGOK</name></expr>)</condition><block type="pseudo"><block_content>
      <for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>next</name></name></expr>;</init> <condition><expr><name>tmp</name></expr>;</condition> <incr><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content> 
	<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>opt</name></name> <operator>==</operator> <name><name>opt</name><operator>-&gt;</operator><name>opt</name></name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DHOPT_TAGOK</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></for>
  
  <return>return <expr><name>tagif</name></expr>;</return>
</block_content>}</block></function>
	
<comment type="block">/* Is every member of check matched by a member of pool? 
   If tagnotneeded, untagged is OK */</comment>
<function><type><name>int</name></type> <name>match_netid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>check</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tagnotneeded</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>tmp1</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>check</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>tagnotneeded</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <for>for <control>(<init>;</init> <condition><expr><name>check</name></expr>;</condition> <incr><expr><name>check</name> <operator>=</operator> <name><name>check</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <comment type="block">/* '#' for not is for backwards compat. */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>check</name><operator>-&gt;</operator><name>net</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'!'</literal> <operator>&amp;&amp;</operator> <name><name>check</name><operator>-&gt;</operator><name>net</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'#'</literal></expr>)</condition>
	<block>{<block_content>
	  <for>for <control>(<init><expr><name>tmp1</name> <operator>=</operator> <name>pool</name></expr>;</init> <condition><expr><name>tmp1</name></expr>;</condition> <incr><expr><name>tmp1</name> <operator>=</operator> <name><name>tmp1</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>check</name><operator>-&gt;</operator><name>net</name></name></expr></argument>, <argument><expr><name><name>tmp1</name><operator>-&gt;</operator><name>net</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	      <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp1</name></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if>
      <else>else<block type="pseudo"><block_content>
	<for>for <control>(<init><expr><name>tmp1</name> <operator>=</operator> <name>pool</name></expr>;</init> <condition><expr><name>tmp1</name></expr>;</condition> <incr><expr><name>tmp1</name> <operator>=</operator> <name><name>tmp1</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	  <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><name><name>check</name><operator>-&gt;</operator><name>net</name></name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>tmp1</name><operator>-&gt;</operator><name>net</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for></block_content></block></else></if_stmt>
    </block_content>}</block></for>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* return domain or NULL if none. */</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name>strip_hostname</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dot</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dot</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><operator>*</operator><name>dot</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* truncate */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>dot</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>dot</name><operator>+</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>log_tags</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>netid</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>xid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>netid</name> <operator>&amp;&amp;</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOG_OPTS</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>netid</name></expr>;</condition> <incr><expr><name>netid</name> <operator>=</operator> <name><name>netid</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
	  <comment type="block">/* kill dupes. */</comment>
	  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>
	  
	  <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name><name>netid</name><operator>-&gt;</operator><name>next</name></name></expr>;</init> <condition><expr><name>n</name></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>netid</name><operator>-&gt;</operator><name>net</name></name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>net</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	      <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	  
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>strncat</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>netid</name><operator>-&gt;</operator><name>net</name></name></expr></argument>, <argument><expr><operator>(</operator><name>MAXDNAME</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><name><name>netid</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>strncat</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>, <argument><expr><operator>(</operator><name>MAXDNAME</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%u tags: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>xid</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt> 
</block_content>}</block></function>   
  
<function><type><name>int</name></type> <name>match_bytes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_opt</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
     
  <if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DHOPT_HEX</name></expr>)</condition>
    <block>{<block_content> 
      <if_stmt><if>if <condition>(<expr><call><name>memcmp_masked</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>wildcard_mask</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content> 
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <operator>(</operator><name>len</name> <operator>-</operator> <name><name>o</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator></expr>;</condition> <incr/>)</control> 
      <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	  <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	    
	<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DHOPT_STRING</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
	  <expr_stmt><expr><name>i</name> <operator>+=</operator> <name><name>o</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
      </block_content>}</block></for></block_content></block></else></if_stmt>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>config_has_mac</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_config</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hwaddr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>hwaddr_config</name></name> <modifier>*</modifier></type><name>conf_addr</name></decl>;</decl_stmt>
  
  <for>for <control>(<init><expr><name>conf_addr</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>hwaddr</name></name></expr>;</init> <condition><expr><name>conf_addr</name></expr>;</condition> <incr><expr><name>conf_addr</name> <operator>=</operator> <name><name>conf_addr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>conf_addr</name><operator>-&gt;</operator><name>wildcard_mask</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
	<name><name>conf_addr</name><operator>-&gt;</operator><name>hwaddr_len</name></name> <operator>==</operator> <name>len</name> <operator>&amp;&amp;</operator>
	<operator>(</operator><name><name>conf_addr</name><operator>-&gt;</operator><name>hwaddr_type</name></name> <operator>==</operator> <name>type</name> <operator>||</operator> <name><name>conf_addr</name><operator>-&gt;</operator><name>hwaddr_type</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
	<call><name>memcmp</name><argument_list>(<argument><expr><name><name>conf_addr</name><operator>-&gt;</operator><name>hwaddr</name></name></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_config_in_context</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_config</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>context</name></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* called via find_config() from lease_update_from_configs() */</comment>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>CONFIG_ADDR</name> <operator>|</operator> <name>CONFIG_ADDR6</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_V6</name></expr>)</condition>
    <block>{<block_content>
       <decl_stmt><decl><type><name><name>struct</name> <name>addrlist</name></name> <modifier>*</modifier></type><name>addr_list</name></decl>;</decl_stmt>

       <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONFIG_ADDR6</name></expr>)</condition><block type="pseudo"><block_content>
	 <for>for <control>(<init>;</init> <condition><expr><name>context</name></expr>;</condition> <incr><expr><name>context</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>current</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	   <for>for <control>(<init><expr><name>addr_list</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>addr6</name></name></expr>;</init> <condition><expr><name>addr_list</name></expr>;</condition> <incr><expr><name>addr_list</name> <operator>=</operator> <name><name>addr_list</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	     <block>{<block_content>
	       <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>addr_list</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ADDRLIST_WILDCARD</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>context</name><operator>-&gt;</operator><name>prefix</name></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>
		 <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	       
	       <if_stmt><if>if <condition>(<expr><call><name>is_same_net6</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr_list</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr6</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		 <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	     </block_content>}</block></for></block_content></block></for></block_content></block></if></if_stmt>
    </block_content>}</block></if>
  <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <block>{<block_content>
      <for>for <control>(<init>;</init> <condition><expr><name>context</name></expr>;</condition> <incr><expr><name>context</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>current</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONFIG_ADDR</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>is_same_net</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>netmask</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
    </block_content>}</block></else></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>dhcp_config</name></name> <modifier>*</modifier></type><name>find_config_match</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_config</name></name> <modifier>*</modifier></type><name>configs</name></decl></parameter>,
					     <parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
					     <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>clid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>clid_len</name></decl></parameter>,
					     <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hwaddr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hw_len</name></decl></parameter>, 
					     <parameter><decl><type><name>int</name></type> <name>hw_type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>,
					     <parameter><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>tags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tag_not_needed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>new</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_config</name></name> <modifier>*</modifier></type><name>config</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>candidate</name></decl>;</decl_stmt> 
  <decl_stmt><decl><type><name><name>struct</name> <name>hwaddr_config</name></name> <modifier>*</modifier></type><name>conf_addr</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>clid</name></expr>)</condition><block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>config</name> <operator>=</operator> <name>configs</name></expr>;</init> <condition><expr><name>config</name></expr>;</condition> <incr><expr><name>config</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONFIG_CLID</name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>clid_len</name></name> <operator>==</operator> <name>clid_len</name> <operator>&amp;&amp;</operator> 
	      <call><name>memcmp</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>clid</name></name></expr></argument>, <argument><expr><name>clid</name></expr></argument>, <argument><expr><name>clid_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
	      <call><name>is_config_in_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	      <call><name>match_netid</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>, <argument><expr><name>tags</name></expr></argument>, <argument><expr><name>tag_not_needed</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    
	    <return>return <expr><name>config</name></expr>;</return></block_content></block></if></if_stmt>
	  
	  <comment type="block">/* dhcpcd prefixes ASCII client IDs by zero which is wrong, but we try and
	     cope with that here. This is IPv4 only. context==NULL implies IPv4, 
	     see lease_update_from_configs() */</comment>
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>context</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_V6</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>clid</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>config</name><operator>-&gt;</operator><name>clid_len</name></name> <operator>==</operator> <name>clid_len</name><operator>-</operator><literal type="number">1</literal>  <operator>&amp;&amp;</operator>
	      <call><name>memcmp</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>clid</name></name></expr></argument>, <argument><expr><name>clid</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>clid_len</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
	      <call><name>is_config_in_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	      <call><name>match_netid</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>, <argument><expr><name>tags</name></expr></argument>, <argument><expr><name>tag_not_needed</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><name>config</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
  

  <if_stmt><if>if <condition>(<expr><name>hwaddr</name></expr>)</condition><block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>config</name> <operator>=</operator> <name>configs</name></expr>;</init> <condition><expr><name>config</name></expr>;</condition> <incr><expr><name>config</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><call><name>config_has_mac</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>hw_len</name></expr></argument>, <argument><expr><name>hw_type</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	  <call><name>is_config_in_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	  <call><name>match_netid</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>, <argument><expr><name>tags</name></expr></argument>, <argument><expr><name>tag_not_needed</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>config</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>hostname</name> <operator>&amp;&amp;</operator> <name>context</name></expr>)</condition><block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>config</name> <operator>=</operator> <name>configs</name></expr>;</init> <condition><expr><name>config</name></expr>;</condition> <incr><expr><name>config</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONFIG_NAME</name><operator>)</operator> <operator>&amp;&amp;</operator> 
	  <call><name>hostname_isequal</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	  <call><name>is_config_in_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	  <call><name>match_netid</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>, <argument><expr><name>tags</name></expr></argument>, <argument><expr><name>tag_not_needed</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>config</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>

  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hwaddr</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <comment type="block">/* use match with fewest wildcard octets */</comment>
  <for>for <control>(<init><expr><name>candidate</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator> <expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>config</name> <operator>=</operator> <name>configs</name></expr>;</init> <condition><expr><name>config</name></expr>;</condition> <incr><expr><name>config</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><call><name>is_config_in_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	<call><name>match_netid</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>, <argument><expr><name>tags</name></expr></argument>, <argument><expr><name>tag_not_needed</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <for>for <control>(<init><expr><name>conf_addr</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>hwaddr</name></name></expr>;</init> <condition><expr><name>conf_addr</name></expr>;</condition> <incr><expr><name>conf_addr</name> <operator>=</operator> <name><name>conf_addr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><name><name>conf_addr</name><operator>-&gt;</operator><name>wildcard_mask</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
	    <name><name>conf_addr</name><operator>-&gt;</operator><name>hwaddr_len</name></name> <operator>==</operator> <name>hw_len</name> <operator>&amp;&amp;</operator>	
	    <operator>(</operator><name><name>conf_addr</name><operator>-&gt;</operator><name>hwaddr_type</name></name> <operator>==</operator> <name>hw_type</name> <operator>||</operator> <name><name>conf_addr</name><operator>-&gt;</operator><name>hwaddr_type</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
	    <operator>(</operator><name>new</name> <operator>=</operator> <call><name>memcmp_masked</name><argument_list>(<argument><expr><name><name>conf_addr</name><operator>-&gt;</operator><name>hwaddr</name></name></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>hw_len</name></expr></argument>, <argument><expr><name><name>conf_addr</name><operator>-&gt;</operator><name>wildcard_mask</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <name>count</name></expr>)</condition>
	  <block>{<block_content>
	      <expr_stmt><expr><name>count</name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>candidate</name> <operator>=</operator> <name>config</name></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></for>
  
  <return>return <expr><name>candidate</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Find tagged configs first. */</comment>
<function><type><name><name>struct</name> <name>dhcp_config</name></name> <modifier>*</modifier></type><name>find_config</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_config</name></name> <modifier>*</modifier></type><name>configs</name></decl></parameter>,
				<parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
				<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>clid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>clid_len</name></decl></parameter>,
				<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hwaddr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hw_len</name></decl></parameter>, 
				<parameter><decl><type><name>int</name></type> <name>hw_type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>tags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_config</name></name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>find_config_match</name><argument_list>(<argument><expr><name>configs</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>clid</name></expr></argument>, <argument><expr><name>clid_len</name></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>hw_len</name></expr></argument>, <argument><expr><name>hw_type</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>tags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>find_config_match</name><argument_list>(<argument><expr><name>configs</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>clid</name></expr></argument>, <argument><expr><name>clid_len</name></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>hw_len</name></expr></argument>, <argument><expr><name>hw_type</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>tags</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dhcp_update_configs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_config</name></name> <modifier>*</modifier></type><name>configs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Some people like to keep all static IP addresses in /etc/hosts.
     This goes through /etc/hosts and sets static addresses for any DHCP config
     records which don't have an address and whose name matches. 
     We take care to maintain the invariant that any IP address can appear
     in at most one dhcp-host. Since /etc/hosts can be re-read by SIGHUP, 
     restore the status-quo ante first. */</comment>
  
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_config</name></name> <modifier>*</modifier></type><name>config</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>conf_tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>crec</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>prot</name> <init>= <expr><name>AF_INET</name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>config</name> <operator>=</operator> <name>configs</name></expr>;</init> <condition><expr><name>config</name></expr>;</condition> <incr><expr><name>config</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONFIG_ADDR_HOSTS</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>CONFIG_ADDR</name> <operator>|</operator> <name>CONFIG_ADDR_HOSTS</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONFIG_ADDR6_HOSTS</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>CONFIG_ADDR6</name> <operator>|</operator> <name>CONFIG_ADDR6_HOSTS</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></for>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef> 
 <label><name>again</name>:</label>  
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>port</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>config</name> <operator>=</operator> <name>configs</name></expr>;</init> <condition><expr><name>config</name></expr>;</condition> <incr><expr><name>config</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
      <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>conflags</name> <init>= <expr><name>CONFIG_ADDR</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cacheflags</name> <init>= <expr><name>F_IPV4</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name>prot</name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name>conflags</name> <operator>=</operator> <name>CONFIG_ADDR6</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>cacheflags</name> <operator>=</operator> <name>F_IPV6</name></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>conflags</name><operator>)</operator> <operator>&amp;&amp;</operator>
	    <operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONFIG_NAME</name><operator>)</operator> <operator>&amp;&amp;</operator> 
	    <operator>(</operator><name>crec</name> <operator>=</operator> <call><name>cache_find_by_name</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cacheflags</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
	    <operator>(</operator><name><name>crec</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_HOSTS</name><operator>)</operator></expr>)</condition>
	  <block>{<block_content>
	    <if_stmt><if>if <condition>(<expr><call><name>cache_find_by_name</name><argument_list>(<argument><expr><name>crec</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cacheflags</name></expr></argument>)</argument_list></call></expr>)</condition>
	      <block>{<block_content>
		<comment type="block">/* use primary (first) address */</comment>
		<while>while <condition>(<expr><name>crec</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>crec</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_REVERSE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name>crec</name> <operator>=</operator> <call><name>cache_find_by_name</name><argument_list>(<argument><expr><name>crec</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cacheflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>crec</name></expr>)</condition><block type="pseudo"><block_content>
		  <continue>continue;</continue></block_content></block></if></if_stmt> <comment type="block">/* should be never */</comment>
		<expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>prot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crec</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s has more than one address in hostsfile, using %s for DHCP"</literal></expr></argument>)</argument_list></call></expr></argument>, 
			  <argument><expr><name><name>config</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      </block_content>}</block></if></if_stmt>
	    
	    <if_stmt><if>if <condition>(<expr><name>prot</name> <operator>==</operator> <name>AF_INET</name> <operator>&amp;&amp;</operator> 
		<operator>(</operator><operator>!</operator><operator>(</operator><name>conf_tmp</name> <operator>=</operator> <call><name>config_find_by_address</name><argument_list>(<argument><expr><name>configs</name></expr></argument>, <argument><expr><name><name>crec</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr4</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <name>conf_tmp</name> <operator>==</operator> <name>config</name><operator>)</operator></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>crec</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr4</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CONFIG_ADDR</name> <operator>|</operator> <name>CONFIG_ADDR_HOSTS</name></expr>;</expr_stmt>
		<continue>continue;</continue>
	      </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
	    <if_stmt><if>if <condition>(<expr><name>prot</name> <operator>==</operator> <name>AF_INET6</name> <operator>&amp;&amp;</operator> 
		<operator>(</operator><operator>!</operator><operator>(</operator><name>conf_tmp</name> <operator>=</operator> <call><name>config_find_by_address6</name><argument_list>(<argument><expr><name>configs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crec</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr6</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <name>conf_tmp</name> <operator>==</operator> <name>config</name><operator>)</operator></expr>)</condition>
	      <block>{<block_content>
		<comment type="block">/* host must have exactly one address if comming from /etc/hosts. */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>addr6</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>addr6</name></name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>addrlist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>addr6</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>addr6</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		  </block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>addr6</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>addr6</name><operator>-&gt;</operator><name>next</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>addr6</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>ADDRLIST_WILDCARD</name><operator>|</operator><name>ADDRLIST_PREFIX</name><operator>)</operator><operator>)</operator></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>addr6</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr6</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crec</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr6</name></name></expr></argument>, <argument><expr><name>IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CONFIG_ADDR6</name> <operator>|</operator> <name>CONFIG_ADDR6_HOSTS</name></expr>;</expr_stmt>
		  </block_content>}</block></if></if_stmt>
	    
		<continue>continue;</continue>
	      </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	    <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>prot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crec</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"duplicate IP address %s (%s) in dhcp-config directive"</literal></expr></argument>)</argument_list></call></expr></argument>, 
		      <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    
	    
	  </block_content>}</block></if></if_stmt>
      </block_content>}</block></for></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name>prot</name> <operator>==</operator> <name>AF_INET</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>prot</name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
      <goto>goto <name>again</name>;</goto>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LINUX_NETWORK</name></cpp:ifdef> 
<function><type><name>char</name> <modifier>*</modifier></type><name>whichdevice</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* If we are doing DHCP on exactly one interface, and running linux, do SO_BINDTODEVICE
     to that device. This is for the use case of  (eg) OpenStack, which runs a new
     dnsmasq instance for each VLAN interface it creates. Without the BINDTODEVICE, 
     individual processes don't always see the packets they should.
     SO_BINDTODEVICE is only available Linux. 

     Note that if wildcards are used in --interface, or --interface is not used at all,
     or a configured interface doesn't yet exist, then more interfaces may arrive later, 
     so we can't safely assert there is only one interface and proceed.
*/</comment>
  
  <decl_stmt><decl><type><name><name>struct</name> <name>irec</name></name> <modifier>*</modifier></type><name>iface</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>found</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iname</name></name> <modifier>*</modifier></type><name>if_tmp</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>daemon</name><operator>-&gt;</operator><name>if_names</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  
  <for>for <control>(<init><expr><name>if_tmp</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>if_names</name></name></expr>;</init> <condition><expr><name>if_tmp</name></expr>;</condition> <incr><expr><name>if_tmp</name> <operator>=</operator> <name><name>if_tmp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>if_tmp</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>if_tmp</name><operator>-&gt;</operator><name>used</name></name> <operator>||</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>if_tmp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

  <for>for <control>(<init><expr><name>found</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator> <expr><name>iface</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>interfaces</name></name></expr>;</init> <condition><expr><name>iface</name></expr>;</condition> <incr><expr><name>iface</name> <operator>=</operator> <name><name>iface</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>iface</name><operator>-&gt;</operator><name>dhcp_ok</name></name></expr>)</condition>
      <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name>found</name> <operator>=</operator> <name>iface</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>found</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>iface</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
	  <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* more than one. */</comment>
      </block_content>}</block></if></if_stmt></block_content></block></for>

  <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>safe_malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>found</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>found</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
 
<function><type><specifier>static</specifier> <name>int</name></type> <name>bindtodevice</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>IFNAMSIZ</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <name>IFNAMSIZ</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <comment type="block">/* only allowed by root. */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_BINDTODEVICE</name></expr></argument>, <argument><expr><name>device</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
      <name>errno</name> <operator>!=</operator> <name>EPERM</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>bind_dhcp_devices</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>bound_device</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>bound_device</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp</name></name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>daemon</name><operator>-&gt;</operator><name>relay4</name></name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>bindtodevice</name><argument_list>(<argument><expr><name>bound_device</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcpfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>enable_pxe</name></name> <operator>&amp;&amp;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>pxefd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>bindtodevice</name><argument_list>(<argument><expr><name>bound_device</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>pxefd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
      
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DHCP6</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>doing_dhcp6</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>daemon</name><operator>-&gt;</operator><name>relay6</name></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>bindtodevice</name><argument_list>(<argument><expr><name>bound_device</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp6fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>
  
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct><specifier>const</specifier> struct <name>opttab_t</name> <block>{
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u16</name></type> <name>val</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
}</block> <decl><name><name>opttab</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{ <expr><literal type="string">"netmask"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OT_ADDR_LIST</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"time-offset"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"router"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>OT_ADDR_LIST</name></expr>  }</block></expr>,
  <expr><block>{ <expr><literal type="string">"dns-server"</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name>OT_ADDR_LIST</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"log-server"</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>OT_ADDR_LIST</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"lpr-server"</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><name>OT_ADDR_LIST</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"hostname"</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><name>OT_INTERNAL</name> <operator>|</operator> <name>OT_NAME</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"boot-file-size"</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">2</literal> <operator>|</operator> <name>OT_DEC</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"domain-name"</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><name>OT_NAME</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"swap-server"</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><name>OT_ADDR_LIST</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"root-path"</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><name>OT_NAME</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"extension-path"</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><name>OT_NAME</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"ip-forward-enable"</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"non-local-source-routing"</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"policy-filter"</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><name>OT_ADDR_LIST</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"max-datagram-reassembly"</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">2</literal> <operator>|</operator> <name>OT_DEC</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"default-ttl"</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">1</literal> <operator>|</operator> <name>OT_DEC</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"mtu"</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">2</literal> <operator>|</operator> <name>OT_DEC</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"all-subnets-local"</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"broadcast"</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><name>OT_INTERNAL</name> <operator>|</operator> <name>OT_ADDR_LIST</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"router-discovery"</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"router-solicitation"</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><name>OT_ADDR_LIST</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"static-route"</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><name>OT_ADDR_LIST</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"trailer-encapsulation"</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"arp-timeout"</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">4</literal> <operator>|</operator> <name>OT_DEC</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"ethernet-encap"</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"tcp-ttl"</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"tcp-keepalive"</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">4</literal> <operator>|</operator> <name>OT_DEC</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"nis-domain"</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><name>OT_NAME</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"nis-server"</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><name>OT_ADDR_LIST</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"ntp-server"</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><name>OT_ADDR_LIST</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"vendor-encap"</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><name>OT_INTERNAL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"netbios-ns"</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><name>OT_ADDR_LIST</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"netbios-dd"</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><name>OT_ADDR_LIST</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"netbios-nodetype"</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"netbios-scope"</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"x-windows-fs"</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><name>OT_ADDR_LIST</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"x-windows-dm"</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><name>OT_ADDR_LIST</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"requested-address"</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><name>OT_INTERNAL</name> <operator>|</operator> <name>OT_ADDR_LIST</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"lease-time"</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><name>OT_INTERNAL</name> <operator>|</operator> <name>OT_TIME</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"option-overload"</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><name>OT_INTERNAL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"message-type"</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><name>OT_INTERNAL</name> <operator>|</operator> <name>OT_DEC</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"server-identifier"</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><name>OT_INTERNAL</name> <operator>|</operator> <name>OT_ADDR_LIST</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"parameter-request"</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><name>OT_INTERNAL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"message"</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><name>OT_INTERNAL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"max-message-size"</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><name>OT_INTERNAL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"T1"</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><name>OT_TIME</name></expr>}</block></expr>,
  <expr><block>{ <expr><literal type="string">"T2"</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><name>OT_TIME</name></expr>}</block></expr>,
  <expr><block>{ <expr><literal type="string">"vendor-class"</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"client-id"</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><name>OT_INTERNAL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"nis+-domain"</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><name>OT_NAME</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"nis+-server"</literal></expr>, <expr><literal type="number">65</literal></expr>, <expr><name>OT_ADDR_LIST</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"tftp-server"</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><name>OT_NAME</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"bootfile-name"</literal></expr>, <expr><literal type="number">67</literal></expr>, <expr><name>OT_NAME</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"mobile-ip-home"</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><name>OT_ADDR_LIST</name></expr> }</block></expr>, 
  <expr><block>{ <expr><literal type="string">"smtp-server"</literal></expr>, <expr><literal type="number">69</literal></expr>, <expr><name>OT_ADDR_LIST</name></expr> }</block></expr>, 
  <expr><block>{ <expr><literal type="string">"pop3-server"</literal></expr>, <expr><literal type="number">70</literal></expr>, <expr><name>OT_ADDR_LIST</name></expr> }</block></expr>, 
  <expr><block>{ <expr><literal type="string">"nntp-server"</literal></expr>, <expr><literal type="number">71</literal></expr>, <expr><name>OT_ADDR_LIST</name></expr> }</block></expr>, 
  <expr><block>{ <expr><literal type="string">"irc-server"</literal></expr>, <expr><literal type="number">74</literal></expr>, <expr><name>OT_ADDR_LIST</name></expr> }</block></expr>, 
  <expr><block>{ <expr><literal type="string">"user-class"</literal></expr>, <expr><literal type="number">77</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"rapid-commit"</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"FQDN"</literal></expr>, <expr><literal type="number">81</literal></expr>, <expr><name>OT_INTERNAL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"agent-id"</literal></expr>, <expr><literal type="number">82</literal></expr>, <expr><name>OT_INTERNAL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"client-arch"</literal></expr>, <expr><literal type="number">93</literal></expr>, <expr><literal type="number">2</literal> <operator>|</operator> <name>OT_DEC</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"client-interface-id"</literal></expr>, <expr><literal type="number">94</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"client-machine-id"</literal></expr>, <expr><literal type="number">97</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"posix-timezone"</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><name>OT_NAME</name></expr> }</block></expr>, <comment type="block">/* RFC 4833, Sec. 2 */</comment>
  <expr><block>{ <expr><literal type="string">"tzdb-timezone"</literal></expr>, <expr><literal type="number">101</literal></expr>, <expr><name>OT_NAME</name></expr> }</block></expr>, <comment type="block">/* RFC 4833, Sec. 2 */</comment>
  <expr><block>{ <expr><literal type="string">"ipv6-only"</literal></expr>, <expr><literal type="number">108</literal></expr>, <expr><literal type="number">4</literal> <operator>|</operator> <name>OT_DEC</name></expr> }</block></expr>,  <comment type="block">/* RFC 8925 */</comment> 
  <expr><block>{ <expr><literal type="string">"subnet-select"</literal></expr>, <expr><literal type="number">118</literal></expr>, <expr><name>OT_INTERNAL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"domain-search"</literal></expr>, <expr><literal type="number">119</literal></expr>, <expr><name>OT_RFC1035_NAME</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"sip-server"</literal></expr>, <expr><literal type="number">120</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"classless-static-route"</literal></expr>, <expr><literal type="number">121</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"vendor-id-encap"</literal></expr>, <expr><literal type="number">125</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"tftp-server-address"</literal></expr>, <expr><literal type="number">150</literal></expr>, <expr><name>OT_ADDR_LIST</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"server-ip-address"</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><name>OT_ADDR_LIST</name></expr> }</block></expr>, <comment type="block">/* special, internal only, sets siaddr */</comment>
  <expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>opttab_t</name></name></type> <name><name>opttab6</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{ <expr><literal type="string">"client-id"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OT_INTERNAL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"server-id"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OT_INTERNAL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"ia-na"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>OT_INTERNAL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"ia-ta"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>OT_INTERNAL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"iaaddr"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><name>OT_INTERNAL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"oro"</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name>OT_INTERNAL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"preference"</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>OT_INTERNAL</name> <operator>|</operator> <name>OT_DEC</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"unicast"</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><name>OT_INTERNAL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"status"</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><name>OT_INTERNAL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"rapid-commit"</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><name>OT_INTERNAL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"user-class"</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><name>OT_INTERNAL</name> <operator>|</operator> <name>OT_CSTRING</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"vendor-class"</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><name>OT_INTERNAL</name> <operator>|</operator> <name>OT_CSTRING</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"vendor-opts"</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><name>OT_INTERNAL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"sip-server-domain"</literal></expr>, <expr><literal type="number">21</literal></expr>,  <expr><name>OT_RFC1035_NAME</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"sip-server"</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><name>OT_ADDR_LIST</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"dns-server"</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><name>OT_ADDR_LIST</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"domain-search"</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><name>OT_RFC1035_NAME</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"nis-server"</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><name>OT_ADDR_LIST</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"nis+-server"</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><name>OT_ADDR_LIST</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"nis-domain"</literal></expr>, <expr><literal type="number">29</literal></expr>,  <expr><name>OT_RFC1035_NAME</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"nis+-domain"</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><name>OT_RFC1035_NAME</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"sntp-server"</literal></expr>, <expr><literal type="number">31</literal></expr>,  <expr><name>OT_ADDR_LIST</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"information-refresh-time"</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><name>OT_TIME</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"FQDN"</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><name>OT_INTERNAL</name> <operator>|</operator> <name>OT_RFC1035_NAME</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"ntp-server"</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">0</literal></expr> <comment type="block">/* OT_ADDR_LIST | OT_RFC1035_NAME */</comment> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"bootfile-url"</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><name>OT_NAME</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"bootfile-param"</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><name>OT_CSTRING</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><name>void</name></type> <name>display_opts</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Known DHCP options:\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>opttab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>opttab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>&amp;</operator> <name>OT_INTERNAL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%3d %s\n"</literal></expr></argument>, <argument><expr><name><name>opttab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr></argument>, <argument><expr><name><name>opttab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
<function><type><name>void</name></type> <name>display_opts6</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Known DHCPv6 options:\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>opttab6</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>opttab6</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>&amp;</operator> <name>OT_INTERNAL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%3d %s\n"</literal></expr></argument>, <argument><expr><name><name>opttab6</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr></argument>, <argument><expr><name><name>opttab6</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>lookup_dhcp_opt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>opttab_t</name></name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>prot</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name>prot</name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <name>opttab6</name></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <name>opttab</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
  
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>lookup_dhcp_len</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>opttab_t</name></name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>prot</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name>prot</name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <name>opttab6</name></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <name>opttab</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>&amp;</operator> <operator>~</operator><name>OT_DEC</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

   <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>option_string</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>opt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt_len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>o</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>nodecode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>opttab_t</name></name> <modifier>*</modifier></type><name>ot</name> <init>= <expr><name>opttab</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name>prot</name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>ot</name> <operator>=</operator> <name>opttab6</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <for>for <control>(<init><expr><name>o</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ot</name><index>[<expr><name>o</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>o</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ot</name><index>[<expr><name>o</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>==</operator> <name>opt</name></expr>)</condition>
      <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    
	    <if_stmt><if>if <condition>(<expr><name><name>ot</name><index>[<expr><name>o</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>&amp;</operator> <name>OT_ADDR_LIST</name></expr>)</condition> 
	      <block>{<block_content>
		<decl_stmt><decl><type><name><name>union</name> <name>all_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>addr_len</name> <init>= <expr><name>INADDRSZ</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><name>prot</name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name>addr_len</name> <operator>=</operator> <name>IN6ADDRSZ</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<for>for <control>(<init><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>opt_len</name> <operator>-</operator> <name>addr_len</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>addr_len</name></expr></incr>)</control> 
		  <block>{<block_content>
		    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		      <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>, <argument><expr><name>buf_len</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		    <comment type="block">/* align */</comment>
		    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>val</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>addr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
		    <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>prot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>val</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>buf_len</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  </block_content>}</block></for>
	      </block_content>}</block></if>
	    <if type="elseif">else if <condition>(<expr><name><name>ot</name><index>[<expr><name>o</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>&amp;</operator> <name>OT_NAME</name></expr>)</condition><block type="pseudo"><block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>opt_len</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>buf_len</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		  <block>{<block_content>
		    <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>val</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		    <if_stmt><if>if <condition>(<expr><call><name>isprint</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		      <expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  </block_content>}</block></for></block_content></block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
	    <comment type="block">/* We don't handle compressed rfc1035 names, so no good in IPv4 land */</comment>
	    <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>ot</name><index>[<expr><name>o</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>&amp;</operator> <name>OT_RFC1035_NAME</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>prot</name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>opt_len</name> <operator>&amp;&amp;</operator> <name><name>val</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		  <block>{<block_content>
		    <decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><name>i</name> <operator>+</operator> <name><name>val</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		    <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>opt_len</name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;</operator> <name>l</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>buf_len</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
		     <block>{<block_content>
		       <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>val</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		       <if_stmt><if>if <condition>(<expr><call><name>isprint</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			 <expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		     </block_content>}</block></for>
		    <expr_stmt><expr><name>i</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
		    <if_stmt><if>if <condition>(<expr><name><name>val</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>buf_len</name></expr>)</condition><block type="pseudo"><block_content>
		      <expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  </block_content>}</block></while>
	      </block_content>}</block></if>
	    <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>ot</name><index>[<expr><name>o</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>&amp;</operator> <name>OT_CSTRING</name><operator>)</operator></expr>)</condition>
	      <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>val</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>buf_len</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
		      <block>{<block_content>
		       <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>p</name><operator>++</operator></expr></init></decl>;</decl_stmt>
		       <if_stmt><if>if <condition>(<expr><call><name>isprint</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			 <expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		     </block_content>}</block></for>
		    <expr_stmt><expr><name>i</name> <operator>+=</operator> <name>len</name> <operator>+</operator><literal type="number">2</literal></expr>;</expr_stmt>
		    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>opt_len</name></expr>)</condition><block type="pseudo"><block_content>
		      <break>break;</break></block_content></block></if></if_stmt>

		    <if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>buf_len</name></expr>)</condition><block type="pseudo"><block_content>
		      <expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  </block_content>}</block></while>
	      </block_content>}</block></if>	      
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>ot</name><index>[<expr><name>o</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>&amp;</operator> <operator>(</operator><name>OT_DEC</name> <operator>|</operator> <name>OT_TIME</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name>opt_len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	      <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>opt_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		  <expr_stmt><expr><name>dec</name> <operator>=</operator> <operator>(</operator><name>dec</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>val</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for> 

		<if_stmt><if>if <condition>(<expr><name><name>ot</name><index>[<expr><name>o</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>&amp;</operator> <name>OT_TIME</name></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><call><name>prettyprint_time</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
		  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name>dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	      </block_content>}</block></if>
	    <else>else<block type="pseudo"><block_content>
	      <expr_stmt><expr><name>nodecode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
	  </block_content>}</block></if></if_stmt>
	<break>break;</break>
      </block_content>}</block></if></if_stmt></block_content></block></for>

  <if_stmt><if>if <condition>(<expr><name>opt_len</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>buf</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>ot</name><index>[<expr><name>o</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>||</operator> <name>nodecode</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>trunc</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>opt_len</name> <operator>&gt;</operator> <literal type="number">14</literal></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>trunc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name>opt_len</name> <operator>=</operator> <literal type="number">14</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>print_mac</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>opt_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>trunc</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"..."</literal></expr></argument>, <argument><expr><name>buf_len</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    

    </block_content>}</block></if></if_stmt>

  <return>return <expr><ternary><condition><expr><name><name>ot</name><index>[<expr><name>o</name></expr>]</index></name><operator>.</operator><name>name</name></expr> ?</condition><then> <expr><name><name>ot</name><index>[<expr><name>o</name></expr>]</index></name><operator>.</operator><name>name</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>log_context</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>family</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Cannot use dhcp_buff* for RA contexts */</comment>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>start</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>end</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>template</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></init></decl>;</decl_stmt>
  
  <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>subnet</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>start6</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_TEMPLATE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>setaddr6part</name><argument_list>(<argument><expr><operator>&amp;</operator><name>subnet</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subnet</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <expr_stmt><expr><name>start</name> <operator>=</operator> <operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>start6</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>end</name> <operator>=</operator> <operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>end6</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if <condition>(<expr><name>family</name> <operator>!=</operator> <name>AF_INET</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_DEPRECATE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">", prefix deprecated"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else
    <block>{<block_content>
      <expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">", lease time "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>prettyprint_time</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>lease_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>	

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_CONSTRUCTED</name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>ifrn_name</name><index>[<expr><name>IFNAMSIZ</name></expr>]</index></name></decl>;</decl_stmt>
      
      <expr_stmt><expr><name>template</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><call><name>indextoname</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>icmp6fd</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>if_index</name></name></expr></argument>, <argument><expr><name>ifrn_name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%s for %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_OLD</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"old prefix"</literal></expr> </then><else>: <expr><literal type="string">"constructed"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>ifrn_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_TEMPLATE</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_RA_STATELESS</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>template</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"template for %s"</literal></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>template_interface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
     
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_OLD</name><operator>)</operator> <operator>&amp;&amp;</operator>
      <operator>(</operator><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_DHCP</name><operator>)</operator> <operator>||</operator> <name>family</name> <operator>==</operator> <name>AF_INET</name><operator>)</operator></expr>)</condition> 
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
      <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_RA_STATELESS</name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_TEMPLATE</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>template_interface</name></name></expr></argument>, <argument><expr><name>DHCP_BUFF_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
      <else>else<block type="pseudo"><block_content> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>family</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></argument>, <argument><expr><name>DHCP_BUFF_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
      <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>family</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff3</name></name></expr></argument>, <argument><expr><name>DHCP_BUFF_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, 
		<argument><expr><ternary><condition><expr><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_RA_STATELESS</name><operator>)</operator></expr> ?</condition><then> 
		<expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s stateless on %s%.0s%.0s%s"</literal></expr></argument>)</argument_list></call></expr> </then><else>:
		<expr><ternary><condition><expr><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_STATIC</name><operator>)</operator></expr> ?</condition><then> 
		<expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s, static leases only on %.0s%s%s%.0s"</literal></expr></argument>)</argument_list></call></expr> </then><else>:
		<expr><ternary><condition><expr><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_PROXY</name><operator>)</operator></expr> ?</condition><then>
		<expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s, proxy on subnet %.0s%s%.0s%.0s"</literal></expr></argument>)</argument_list></call></expr> </then><else>:
		<expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s, IP range %s -- %s%s%.0s"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></argument>,
		<argument><expr><ternary><condition><expr><operator>(</operator><name>family</name> <operator>!=</operator> <name>AF_INET</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"DHCPv6"</literal></expr> </then><else>: <expr><literal type="string">"DHCP"</literal></expr></else></ternary></expr></argument>,
		<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff3</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>template</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_TEMPLATE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>template_interface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>template</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_RA_NAME</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_OLD</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"DHCPv4-derived IPv6 names on %s%s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>template</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_RA</name><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_RA</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_DHCP</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>family</name> <operator>==</operator> <name>AF_INET6</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> 
    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"router advertisement on %s%s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>template</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>log_relay</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>family</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_relay</name></name> <modifier>*</modifier></type><name>relay</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>broadcast</name> <init>= <expr><name><name>relay</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>addr4</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>family</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>relay</name><operator>-&gt;</operator><name>local</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>family</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>relay</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_INET</name> <operator>&amp;&amp;</operator> <name><name>relay</name><operator>-&gt;</operator><name>port</name></name> <operator>!=</operator> <name>DHCP_SERVER_PORT</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"#%u"</literal></expr></argument>, <argument><expr><name><name>relay</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
  <decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>multicast</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>ALL_SERVERS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>multicast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>broadcast</name> <operator>=</operator> <call><name>IN6_ARE_ADDR_EQUAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>relay</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>addr6</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>multicast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>relay</name><operator>-&gt;</operator><name>port</name></name> <operator>!=</operator> <name>DHCPV6_SERVER_PORT</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"#%u"</literal></expr></argument>, <argument><expr><name><name>relay</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
  
  <if_stmt><if>if <condition>(<expr><name><name>relay</name><operator>-&gt;</operator><name>interface</name></name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>broadcast</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"DHCP relay from %s via %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name><name>relay</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"DHCP relay from %s to %s via %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name><name>relay</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"DHCP relay from %s to %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>
   
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
