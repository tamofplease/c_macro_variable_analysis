<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/dnsmasq/cache.c"><comment type="block">/* dnsmasq is Copyright (c) 2000-2022 Simon Kelley

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 dated June, 1991, or
   (at your option) version 3 dated 29 June, 2007.
 
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
     
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnsmasq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../dnsmasq_interface.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>cache_head</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cache_tail</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>hash_table</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>dhcp_spare</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>new_chain</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>insert_error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>union</name> <name>bigname</name></name> <modifier>*</modifier></type><name>big_free</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>bignames_left</name></decl>, <decl><type ref="prev"/><name>hash_size</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>make_non_terminals</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>really_insert</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>all_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>class</name></decl></parameter>,
				  <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>,  <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>ttl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* type-&gt;string mapping: this is also used by the name-hash function as a mixing table. */</comment>
<comment type="block">/* taken from https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml */</comment>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>type</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>name</name></decl>;</decl_stmt>
}</block> <decl><name><name>typestr</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{ <expr><literal type="number">1</literal></expr>,   <expr><literal type="string">"A"</literal></expr> }</block></expr>, <comment type="block">/* a host address [RFC1035] */</comment>
  <expr><block>{ <expr><literal type="number">2</literal></expr>,   <expr><literal type="string">"NS"</literal></expr> }</block></expr>, <comment type="block">/* an authoritative name server [RFC1035] */</comment>
  <expr><block>{ <expr><literal type="number">3</literal></expr>,   <expr><literal type="string">"MD"</literal></expr> }</block></expr>, <comment type="block">/* a mail destination (OBSOLETE - use MX) [RFC1035] */</comment>
  <expr><block>{ <expr><literal type="number">4</literal></expr>,   <expr><literal type="string">"MF"</literal></expr> }</block></expr>, <comment type="block">/* a mail forwarder (OBSOLETE - use MX) [RFC1035] */</comment>
  <expr><block>{ <expr><literal type="number">5</literal></expr>,   <expr><literal type="string">"CNAME"</literal></expr> }</block></expr>, <comment type="block">/* the canonical name for an alias [RFC1035] */</comment>
  <expr><block>{ <expr><literal type="number">6</literal></expr>,   <expr><literal type="string">"SOA"</literal></expr> }</block></expr>, <comment type="block">/* marks the start of a zone of authority [RFC1035] */</comment>
  <expr><block>{ <expr><literal type="number">7</literal></expr>,   <expr><literal type="string">"MB"</literal></expr> }</block></expr>, <comment type="block">/* a mailbox domain name (EXPERIMENTAL) [RFC1035] */</comment>
  <expr><block>{ <expr><literal type="number">8</literal></expr>,   <expr><literal type="string">"MG"</literal></expr> }</block></expr>, <comment type="block">/* a mail group member (EXPERIMENTAL) [RFC1035] */</comment>
  <expr><block>{ <expr><literal type="number">9</literal></expr>,   <expr><literal type="string">"MR"</literal></expr> }</block></expr>, <comment type="block">/* a mail rename domain name (EXPERIMENTAL) [RFC1035] */</comment>
  <expr><block>{ <expr><literal type="number">10</literal></expr>,  <expr><literal type="string">"NULL"</literal></expr> }</block></expr>, <comment type="block">/* a null RR (EXPERIMENTAL) [RFC1035] */</comment>
  <expr><block>{ <expr><literal type="number">11</literal></expr>,  <expr><literal type="string">"WKS"</literal></expr> }</block></expr>, <comment type="block">/* a well known service description [RFC1035] */</comment>
  <expr><block>{ <expr><literal type="number">12</literal></expr>,  <expr><literal type="string">"PTR"</literal></expr> }</block></expr>, <comment type="block">/* a domain name pointer [RFC1035] */</comment>
  <expr><block>{ <expr><literal type="number">13</literal></expr>,  <expr><literal type="string">"HINFO"</literal></expr> }</block></expr>, <comment type="block">/* host information [RFC1035] */</comment>
  <expr><block>{ <expr><literal type="number">14</literal></expr>,  <expr><literal type="string">"MINFO"</literal></expr> }</block></expr>, <comment type="block">/* mailbox or mail list information [RFC1035] */</comment>
  <expr><block>{ <expr><literal type="number">15</literal></expr>,  <expr><literal type="string">"MX"</literal></expr> }</block></expr>, <comment type="block">/* mail exchange [RFC1035] */</comment>
  <expr><block>{ <expr><literal type="number">16</literal></expr>,  <expr><literal type="string">"TXT"</literal></expr> }</block></expr>, <comment type="block">/* text strings [RFC1035] */</comment>
  <expr><block>{ <expr><literal type="number">17</literal></expr>,  <expr><literal type="string">"RP"</literal></expr> }</block></expr>, <comment type="block">/* for Responsible Person [RFC1183] */</comment>
  <expr><block>{ <expr><literal type="number">18</literal></expr>,  <expr><literal type="string">"AFSDB"</literal></expr> }</block></expr>, <comment type="block">/* for AFS Data Base location [RFC1183][RFC5864] */</comment>
  <expr><block>{ <expr><literal type="number">19</literal></expr>,  <expr><literal type="string">"X25"</literal></expr> }</block></expr>, <comment type="block">/* for X.25 PSDN address [RFC1183] */</comment>
  <expr><block>{ <expr><literal type="number">20</literal></expr>,  <expr><literal type="string">"ISDN"</literal></expr> }</block></expr>, <comment type="block">/* for ISDN address [RFC1183] */</comment>
  <expr><block>{ <expr><literal type="number">21</literal></expr>,  <expr><literal type="string">"RT"</literal></expr> }</block></expr>, <comment type="block">/* for Route Through [RFC1183] */</comment>
  <expr><block>{ <expr><literal type="number">22</literal></expr>,  <expr><literal type="string">"NSAP"</literal></expr> }</block></expr>, <comment type="block">/* for NSAP address, NSAP style A record [RFC1706] */</comment>
  <expr><block>{ <expr><literal type="number">23</literal></expr>,  <expr><literal type="string">"NSAP_PTR"</literal></expr> }</block></expr>, <comment type="block">/* for domain name pointer, NSAP style [RFC1348][RFC1637][RFC1706] */</comment>
  <expr><block>{ <expr><literal type="number">24</literal></expr>,  <expr><literal type="string">"SIG"</literal></expr> }</block></expr>, <comment type="block">/* for security signature [RFC2535][RFC2536][RFC2537][RFC2931][RFC3008][RFC3110][RFC3755][RFC4034] */</comment>
  <expr><block>{ <expr><literal type="number">25</literal></expr>,  <expr><literal type="string">"KEY"</literal></expr> }</block></expr>, <comment type="block">/* for security key [RFC2535][RFC2536][RFC2537][RFC2539][RFC3008][RFC3110][RFC3755][RFC4034] */</comment>
  <expr><block>{ <expr><literal type="number">26</literal></expr>,  <expr><literal type="string">"PX"</literal></expr> }</block></expr>, <comment type="block">/* X.400 mail mapping information [RFC2163] */</comment>
  <expr><block>{ <expr><literal type="number">27</literal></expr>,  <expr><literal type="string">"GPOS"</literal></expr> }</block></expr>, <comment type="block">/* Geographical Position [RFC1712] */</comment>
  <expr><block>{ <expr><literal type="number">28</literal></expr>,  <expr><literal type="string">"AAAA"</literal></expr> }</block></expr>, <comment type="block">/* IP6 Address [RFC3596] */</comment>
  <expr><block>{ <expr><literal type="number">29</literal></expr>,  <expr><literal type="string">"LOC"</literal></expr> }</block></expr>, <comment type="block">/* Location Information [RFC1876] */</comment>
  <expr><block>{ <expr><literal type="number">30</literal></expr>,  <expr><literal type="string">"NXT"</literal></expr> }</block></expr>, <comment type="block">/* Next Domain (OBSOLETE) [RFC2535][RFC3755] */</comment>
  <expr><block>{ <expr><literal type="number">31</literal></expr>,  <expr><literal type="string">"EID"</literal></expr> }</block></expr>, <comment type="block">/* Endpoint Identifier [Michael_Patton][http://ana-3.lcs.mit.edu/~jnc/nimrod/dns.txt] 1995-06*/</comment>
  <expr><block>{ <expr><literal type="number">32</literal></expr>,  <expr><literal type="string">"NIMLOC"</literal></expr> }</block></expr>, <comment type="block">/* Nimrod Locator [1][Michael_Patton][http://ana-3.lcs.mit.edu/~jnc/nimrod/dns.txt] 1995-06*/</comment>
  <expr><block>{ <expr><literal type="number">33</literal></expr>,  <expr><literal type="string">"SRV"</literal></expr> }</block></expr>, <comment type="block">/* Server Selection [1][RFC2782] */</comment>
  <expr><block>{ <expr><literal type="number">34</literal></expr>,  <expr><literal type="string">"ATMA"</literal></expr> }</block></expr>, <comment type="block">/* ATM Address [ ATM Forum Technical Committee, "ATM Name System, V2.0", Doc ID: AF-DANS-0152.000, July 2000. Available from and held in escrow by IANA.] */</comment>
  <expr><block>{ <expr><literal type="number">35</literal></expr>,  <expr><literal type="string">"NAPTR"</literal></expr> }</block></expr>, <comment type="block">/* Naming Authority Pointer [RFC2168][RFC2915][RFC3403] */</comment>
  <expr><block>{ <expr><literal type="number">36</literal></expr>,  <expr><literal type="string">"KX"</literal></expr> }</block></expr>, <comment type="block">/* Key Exchanger [RFC2230] */</comment>
  <expr><block>{ <expr><literal type="number">37</literal></expr>,  <expr><literal type="string">"CERT"</literal></expr> }</block></expr>, <comment type="block">/* CERT [RFC4398] */</comment>
  <expr><block>{ <expr><literal type="number">38</literal></expr>,  <expr><literal type="string">"A6"</literal></expr> }</block></expr>, <comment type="block">/* A6 (OBSOLETE - use AAAA) [RFC2874][RFC3226][RFC6563] */</comment>
  <expr><block>{ <expr><literal type="number">39</literal></expr>,  <expr><literal type="string">"DNAME"</literal></expr> }</block></expr>, <comment type="block">/* DNAME [RFC6672] */</comment>
  <expr><block>{ <expr><literal type="number">40</literal></expr>,  <expr><literal type="string">"SINK"</literal></expr> }</block></expr>, <comment type="block">/* SINK [Donald_E_Eastlake][http://tools.ietf.org/html/draft-eastlake-kitchen-sink] 1997-11*/</comment>
  <expr><block>{ <expr><literal type="number">41</literal></expr>,  <expr><literal type="string">"OPT"</literal></expr> }</block></expr>, <comment type="block">/* OPT [RFC3225][RFC6891] */</comment>
  <expr><block>{ <expr><literal type="number">42</literal></expr>,  <expr><literal type="string">"APL"</literal></expr> }</block></expr>, <comment type="block">/* APL [RFC3123] */</comment>
  <expr><block>{ <expr><literal type="number">43</literal></expr>,  <expr><literal type="string">"DS"</literal></expr> }</block></expr>, <comment type="block">/* Delegation Signer [RFC3658][RFC4034] */</comment>
  <expr><block>{ <expr><literal type="number">44</literal></expr>,  <expr><literal type="string">"SSHFP"</literal></expr> }</block></expr>, <comment type="block">/* SSH Key Fingerprint [RFC4255] */</comment>
  <expr><block>{ <expr><literal type="number">45</literal></expr>,  <expr><literal type="string">"IPSECKEY"</literal></expr> }</block></expr>, <comment type="block">/* IPSECKEY [RFC4025] */</comment>
  <expr><block>{ <expr><literal type="number">46</literal></expr>,  <expr><literal type="string">"RRSIG"</literal></expr> }</block></expr>, <comment type="block">/* RRSIG [RFC3755][RFC4034] */</comment>
  <expr><block>{ <expr><literal type="number">47</literal></expr>,  <expr><literal type="string">"NSEC"</literal></expr> }</block></expr>, <comment type="block">/* NSEC [RFC3755][RFC4034][RFC9077] */</comment>
  <expr><block>{ <expr><literal type="number">48</literal></expr>,  <expr><literal type="string">"DNSKEY"</literal></expr> }</block></expr>, <comment type="block">/* DNSKEY [RFC3755][RFC4034] */</comment>
  <expr><block>{ <expr><literal type="number">49</literal></expr>,  <expr><literal type="string">"DHCID"</literal></expr> }</block></expr>, <comment type="block">/* DHCID [RFC4701] */</comment>
  <expr><block>{ <expr><literal type="number">50</literal></expr>,  <expr><literal type="string">"NSEC3"</literal></expr> }</block></expr>, <comment type="block">/* NSEC3 [RFC5155][RFC9077] */</comment>
  <expr><block>{ <expr><literal type="number">51</literal></expr>,  <expr><literal type="string">"NSEC3PARAM"</literal></expr> }</block></expr>, <comment type="block">/* NSEC3PARAM [RFC5155] */</comment>
  <expr><block>{ <expr><literal type="number">52</literal></expr>,  <expr><literal type="string">"TLSA"</literal></expr> }</block></expr>, <comment type="block">/* TLSA [RFC6698] */</comment>
  <expr><block>{ <expr><literal type="number">53</literal></expr>,  <expr><literal type="string">"SMIMEA"</literal></expr> }</block></expr>, <comment type="block">/* S/MIME cert association [RFC8162] SMIMEA/smimea-completed-template 2015-12-01*/</comment>
  <expr><block>{ <expr><literal type="number">55</literal></expr>,  <expr><literal type="string">"HIP"</literal></expr> }</block></expr>, <comment type="block">/* Host Identity Protocol [RFC8005] */</comment>
  <expr><block>{ <expr><literal type="number">56</literal></expr>,  <expr><literal type="string">"NINFO"</literal></expr> }</block></expr>, <comment type="block">/* NINFO [Jim_Reid] NINFO/ninfo-completed-template 2008-01-21*/</comment>
  <expr><block>{ <expr><literal type="number">57</literal></expr>,  <expr><literal type="string">"RKEY"</literal></expr> }</block></expr>, <comment type="block">/* RKEY [Jim_Reid] RKEY/rkey-completed-template 2008-01-21*/</comment>
  <expr><block>{ <expr><literal type="number">58</literal></expr>,  <expr><literal type="string">"TALINK"</literal></expr> }</block></expr>, <comment type="block">/* Trust Anchor LINK [Wouter_Wijngaards] TALINK/talink-completed-template 2010-02-17*/</comment>
  <expr><block>{ <expr><literal type="number">59</literal></expr>,  <expr><literal type="string">"CDS"</literal></expr> }</block></expr>, <comment type="block">/* Child DS [RFC7344] CDS/cds-completed-template 2011-06-06*/</comment>
  <expr><block>{ <expr><literal type="number">60</literal></expr>,  <expr><literal type="string">"CDNSKEY"</literal></expr> }</block></expr>, <comment type="block">/* DNSKEY(s) the Child wants reflected in DS [RFC7344] 2014-06-16*/</comment>
  <expr><block>{ <expr><literal type="number">61</literal></expr>,  <expr><literal type="string">"OPENPGPKEY"</literal></expr> }</block></expr>, <comment type="block">/* OpenPGP Key [RFC7929] OPENPGPKEY/openpgpkey-completed-template 2014-08-12*/</comment>
  <expr><block>{ <expr><literal type="number">62</literal></expr>,  <expr><literal type="string">"CSYNC"</literal></expr> }</block></expr>, <comment type="block">/* Child-To-Parent Synchronization [RFC7477] 2015-01-27*/</comment>
  <expr><block>{ <expr><literal type="number">63</literal></expr>,  <expr><literal type="string">"ZONEMD"</literal></expr> }</block></expr>, <comment type="block">/* Message Digest Over Zone Data [RFC8976] ZONEMD/zonemd-completed-template 2018-12-12*/</comment>
  <expr><block>{ <expr><literal type="number">64</literal></expr>,  <expr><literal type="string">"SVCB"</literal></expr> }</block></expr>, <comment type="block">/* Service Binding [draft-ietf-dnsop-svcb-https-00] SVCB/svcb-completed-template 2020-06-30*/</comment>
  <expr><block>{ <expr><literal type="number">65</literal></expr>,  <expr><literal type="string">"HTTPS"</literal></expr> }</block></expr>, <comment type="block">/* HTTPS Binding [draft-ietf-dnsop-svcb-https-00] HTTPS/https-completed-template 2020-06-30*/</comment>
  <expr><block>{ <expr><literal type="number">99</literal></expr>,  <expr><literal type="string">"SPF"</literal></expr> }</block></expr>, <comment type="block">/* [RFC7208] */</comment>
  <expr><block>{ <expr><literal type="number">100</literal></expr>, <expr><literal type="string">"UINFO"</literal></expr> }</block></expr>, <comment type="block">/* [IANA-Reserved] */</comment>
  <expr><block>{ <expr><literal type="number">101</literal></expr>, <expr><literal type="string">"UID"</literal></expr> }</block></expr>, <comment type="block">/* [IANA-Reserved] */</comment>
  <expr><block>{ <expr><literal type="number">102</literal></expr>, <expr><literal type="string">"GID"</literal></expr> }</block></expr>, <comment type="block">/* [IANA-Reserved] */</comment>
  <expr><block>{ <expr><literal type="number">103</literal></expr>, <expr><literal type="string">"UNSPEC"</literal></expr> }</block></expr>, <comment type="block">/* [IANA-Reserved] */</comment>
  <expr><block>{ <expr><literal type="number">104</literal></expr>, <expr><literal type="string">"NID"</literal></expr> }</block></expr>, <comment type="block">/* [RFC6742] ILNP/nid-completed-template */</comment>
  <expr><block>{ <expr><literal type="number">105</literal></expr>, <expr><literal type="string">"L32"</literal></expr> }</block></expr>, <comment type="block">/* [RFC6742] ILNP/l32-completed-template */</comment>
  <expr><block>{ <expr><literal type="number">106</literal></expr>, <expr><literal type="string">"L64"</literal></expr> }</block></expr>, <comment type="block">/* [RFC6742] ILNP/l64-completed-template */</comment>
  <expr><block>{ <expr><literal type="number">107</literal></expr>, <expr><literal type="string">"LP"</literal></expr> }</block></expr>, <comment type="block">/* [RFC6742] ILNP/lp-completed-template */</comment>
  <expr><block>{ <expr><literal type="number">108</literal></expr>, <expr><literal type="string">"EUI48"</literal></expr> }</block></expr>, <comment type="block">/* an EUI-48 address [RFC7043] EUI48/eui48-completed-template 2013-03-27*/</comment>
  <expr><block>{ <expr><literal type="number">109</literal></expr>, <expr><literal type="string">"EUI64"</literal></expr> }</block></expr>, <comment type="block">/* an EUI-64 address [RFC7043] EUI64/eui64-completed-template 2013-03-27*/</comment>
  <expr><block>{ <expr><literal type="number">249</literal></expr>, <expr><literal type="string">"TKEY"</literal></expr> }</block></expr>, <comment type="block">/* Transaction Key [RFC2930] */</comment>
  <expr><block>{ <expr><literal type="number">250</literal></expr>, <expr><literal type="string">"TSIG"</literal></expr> }</block></expr>, <comment type="block">/* Transaction Signature [RFC8945] */</comment>
  <expr><block>{ <expr><literal type="number">251</literal></expr>, <expr><literal type="string">"IXFR"</literal></expr> }</block></expr>, <comment type="block">/* incremental transfer [RFC1995] */</comment>
  <expr><block>{ <expr><literal type="number">252</literal></expr>, <expr><literal type="string">"AXFR"</literal></expr> }</block></expr>, <comment type="block">/* transfer of an entire zone [RFC1035][RFC5936] */</comment>
  <expr><block>{ <expr><literal type="number">253</literal></expr>, <expr><literal type="string">"MAILB"</literal></expr> }</block></expr>, <comment type="block">/* mailbox-related RRs (MB, MG or MR) [RFC1035] */</comment>
  <expr><block>{ <expr><literal type="number">254</literal></expr>, <expr><literal type="string">"MAILA"</literal></expr> }</block></expr>, <comment type="block">/* mail agent RRs (OBSOLETE - see MX) [RFC1035] */</comment>
  <expr><block>{ <expr><literal type="number">255</literal></expr>, <expr><literal type="string">"ANY"</literal></expr> }</block></expr>, <comment type="block">/* A request for some or all records the server has available [RFC1035][RFC6895][RFC8482] */</comment>
  <expr><block>{ <expr><literal type="number">256</literal></expr>, <expr><literal type="string">"URI"</literal></expr> }</block></expr>, <comment type="block">/* URI [RFC7553] URI/uri-completed-template 2011-02-22*/</comment>
  <expr><block>{ <expr><literal type="number">257</literal></expr>, <expr><literal type="string">"CAA"</literal></expr> }</block></expr>, <comment type="block">/* Certification Authority Restriction [RFC8659] CAA/caa-completed-template 2011-04-07*/</comment>
  <expr><block>{ <expr><literal type="number">258</literal></expr>, <expr><literal type="string">"AVC"</literal></expr> }</block></expr>, <comment type="block">/* Application Visibility and Control [Wolfgang_Riedel] AVC/avc-completed-template 2016-02-26*/</comment>
  <expr><block>{ <expr><literal type="number">259</literal></expr>, <expr><literal type="string">"DOA"</literal></expr> }</block></expr>, <comment type="block">/* Digital Object Architecture [draft-durand-doa-over-dns] DOA/doa-completed-template 2017-08-30*/</comment>
  <expr><block>{ <expr><literal type="number">260</literal></expr>, <expr><literal type="string">"AMTRELAY"</literal></expr> }</block></expr>, <comment type="block">/* Automatic Multicast Tunneling Relay [RFC8777] AMTRELAY/amtrelay-completed-template 2019-02-06*/</comment>
  <expr><block>{ <expr><literal type="number">32768</literal></expr>,  <expr><literal type="string">"TA"</literal></expr> }</block></expr>, <comment type="block">/* DNSSEC Trust Authorities [Sam_Weiler][http://cameo.library.cmu.edu/][ Deploying DNSSEC Without a Signed Root. Technical Report 1999-19, Information Networking Institute, Carnegie Mellon University, April 2004.] 2005-12-13*/</comment>
  <expr><block>{ <expr><literal type="number">32769</literal></expr>,  <expr><literal type="string">"DLV"</literal></expr> }</block></expr>, <comment type="block">/* DNSSEC Lookaside Validation (OBSOLETE) [RFC8749][RFC4431] */</comment>
}</block></expr></init></decl>;</struct>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cache_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>crecp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cache_unlink</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>crecp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cache_link</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>crecp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rehash</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cache_hash</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>crecp</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>next_uid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>crecp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>uid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>crecp</name><operator>-&gt;</operator><name>uid</name></name> <operator>==</operator> <name>UID_NONE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>uid</name><operator>++</operator></expr>;</expr_stmt>
  
      <comment type="block">/* uid == 0 used to indicate CNAME to interface name. */</comment>
      <if_stmt><if>if <condition>(<expr><name>uid</name> <operator>==</operator> <name>UID_NONE</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>uid</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <expr_stmt><expr><name><name>crecp</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name>uid</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cache_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>crecp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
 
  <expr_stmt><expr><name>bignames_left</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>cachesize</name></name><operator>/</operator><literal type="number">10</literal></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>cachesize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>crecp</name> <operator>=</operator> <call><name>safe_malloc</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>cachesize</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>crec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>cachesize</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>crecp</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>cache_link</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>crecp</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name>UID_NONE</name></expr>;</expr_stmt>
	</block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* create initial hash table*/</comment>
  <expr_stmt><expr><call><name>rehash</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>cachesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* In most cases, we create the hash table once here by calling this with (hash_table == NULL)
   but if the hosts file(s) are big (some people have 50000 ad-block entries), the table
   will be much too small, so the hosts reading code calls rehash every 1000 addresses, to
   expand the table. */</comment>
<function><type><name>void</name></type> <name>rehash</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>new</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>old</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>new_size</name></decl>, <decl><type ref="prev"/><name>old_size</name></decl>;</decl_stmt>

  <comment type="block">/* hash_size is a power of two. */</comment>
  <for>for <control>(<init><expr><name>new_size</name> <operator>=</operator> <literal type="number">64</literal></expr>;</init> <condition><expr><name>new_size</name> <operator>&lt;</operator> <name>size</name><operator>/</operator><literal type="number">10</literal></expr>;</condition> <incr><expr><name>new_size</name> <operator>=</operator> <name>new_size</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
  
  <comment type="block">/* must succeed in getting first instance, failure later is non-fatal */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hash_table</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>safe_malloc</name><argument_list>(<argument><expr><name>new_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>crec</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>new_size</name> <operator>&lt;=</operator> <name>hash_size</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>new</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><name>new_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>crec</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>new_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>new</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>

  <expr_stmt><expr><name>old</name> <operator>=</operator> <name>hash_table</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>old_size</name> <operator>=</operator> <name>hash_size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>hash_table</name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>hash_size</name> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>old</name></expr>)</condition>
    <block>{<block_content>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>old_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>old</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>p</name></expr> ;</condition> <incr><expr><name>p</name> <operator>=</operator> <name>tmp</name></expr></incr>)</control>
	  <block>{<block_content>
	    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>hash_next</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>cache_hash</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></for></block_content></block></for>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
  
<function><type><specifier>static</specifier> <name><name>struct</name> <name>crec</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>hash_bucket</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>val</name> <init>= <expr><literal type="number">017465</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* Barker code - minimum self-correlation in cyclic shift */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>mix_tab</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>typestr</name></expr></init></decl>;</decl_stmt> 

  <while>while<condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>name</name><operator>++</operator><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* don't use tolower and friends here - they may be messed up by LOCALE */</comment>
      <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>c</name> <operator>+=</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>mix_tab</name><index>[<expr><operator>(</operator><name>val</name> <operator>+</operator> <name>c</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>]</index></name> <operator>^</operator> <name>c</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></while> 
  
  <comment type="block">/* hash_size is a power of two */</comment>
  <return>return <expr><name>hash_table</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>^</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>hash_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cache_hash</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>crecp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* maintain an invariant that all entries with F_REVERSE set
     are at the start of the hash-chain  and all non-reverse
     immortal entries are at the end of the hash-chain.
     This allows reverse searches and garbage collection to be optimised */</comment>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>cache_get_name</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>up</name> <init>= <expr><call><name>hash_bucket</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_REVERSE</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <while>while <condition>(<expr><operator>*</operator><name>up</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><operator>(</operator><operator>*</operator><name>up</name><operator>)</operator><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_REVERSE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>up</name><operator>)</operator><operator>-&gt;</operator><name>hash_next</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></while> 
      
      <if_stmt><if>if <condition>(<expr><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_IMMORTAL</name></expr>)</condition><block type="pseudo"><block_content>
	<while>while <condition>(<expr><operator>*</operator><name>up</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>up</name><operator>)</operator><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_IMMORTAL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>up</name><operator>)</operator><operator>-&gt;</operator><name>hash_next</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

  <comment type="block">/* Preserve order when inserting the same name multiple times. */</comment>
  <while>while <condition>(<expr><operator>*</operator><name>up</name> <operator>&amp;&amp;</operator> <call><name>hostname_isequal</name><argument_list>(<argument><expr><call><name>cache_get_name</name><argument_list>(<argument><expr><operator>*</operator><name>up</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>up</name><operator>)</operator><operator>-&gt;</operator><name>hash_next</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></while>
  
  <expr_stmt><expr><name><name>crecp</name><operator>-&gt;</operator><name>hash_next</name></name> <operator>=</operator> <operator>*</operator><name>up</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name>crecp</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cache_blockdata_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>crecp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_NEG</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_SRV</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>blockdata_free</name><argument_list>(<argument><expr><name><name>crecp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>srv</name><operator>.</operator><name>target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
      <if type="elseif">else if <condition>(<expr><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_DNSKEY</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>blockdata_free</name><argument_list>(<argument><expr><name><name>crecp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>key</name><operator>.</operator><name>keydata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_DS</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>blockdata_free</name><argument_list>(<argument><expr><name><name>crecp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ds</name><operator>.</operator><name>keydata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cache_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>crecp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>F_FORWARD</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>F_REVERSE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>crecp</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name>UID_NONE</name></expr>;</expr_stmt> <comment type="block">/* invalidate CNAMES pointing to this. */</comment>

  <if_stmt><if>if <condition>(<expr><name>cache_tail</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>cache_tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>crecp</name></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>cache_head</name> <operator>=</operator> <name>crecp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <expr_stmt><expr><name><name>crecp</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>cache_tail</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>crecp</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>cache_tail</name> <operator>=</operator> <name>crecp</name></expr>;</expr_stmt>
  
  <comment type="block">/* retrieve big name for further use. */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_BIGNAME</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>crecp</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>bname</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>big_free</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>big_free</name> <operator>=</operator> <name><name>crecp</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>bname</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>F_BIGNAME</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>cache_blockdata_free</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>    

<comment type="block">/* insert a new cache entry at the head of the list (youngest entry) */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cache_link</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>crecp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>cache_head</name></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* check needed for init code */</comment>
    <expr_stmt><expr><name><name>cache_head</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>crecp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>crecp</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>cache_head</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>crecp</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>cache_head</name> <operator>=</operator> <name>crecp</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cache_tail</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>cache_tail</name> <operator>=</operator> <name>crecp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* remove an arbitrary cache entry for promotion */</comment> 
<function><type><specifier>static</specifier> <name>void</name></type> <name>cache_unlink</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>crecp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>crecp</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>crecp</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>crecp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>cache_head</name> <operator>=</operator> <name><name>crecp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>crecp</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>crecp</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>crecp</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>cache_tail</name> <operator>=</operator> <name><name>crecp</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>cache_get_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>crecp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_BIGNAME</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name><name>crecp</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>bname</name><operator>-&gt;</operator><name>name</name></name></expr>;</return></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_NAMEP</name></expr>)</condition><block type="pseudo"><block_content> 
    <return>return <expr><name><name>crecp</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>namep</name></name></expr>;</return></block_content></block></if></if_stmt>
  
  <return>return <expr><name><name>crecp</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>sname</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>cache_get_cname_target</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>crecp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>crecp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>cname</name><operator>.</operator><name>is_name_ptr</name></name></expr>)</condition><block type="pseudo"><block_content>
     <return>return <expr><name><name>crecp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>cname</name><operator>.</operator><name>target</name><operator>.</operator><name>name</name></name></expr>;</return></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <return>return <expr><call><name>cache_get_name</name><argument_list>(<argument><expr><name><name>crecp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>cname</name><operator>.</operator><name>target</name><operator>.</operator><name>cache</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>



<function><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>cache_enumerate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>init</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>bucket</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>cache</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>init</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>bucket</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>cache</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name>cache</name> <operator>&amp;&amp;</operator> <name><name>cache</name><operator>-&gt;</operator><name>hash_next</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>cache</name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>hash_next</name></name></expr>;</expr_stmt></block_content></block></if>
  <else>else
    <block>{<block_content>
       <expr_stmt><expr><name>cache</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
       <while>while <condition>(<expr><name>bucket</name> <operator>&lt;</operator> <name>hash_size</name></expr>)</condition><block type="pseudo"><block_content>
	 <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cache</name> <operator>=</operator> <name><name>hash_table</name><index>[<expr><name>bucket</name><operator>++</operator></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	   <break>break;</break></block_content></block></if></if_stmt></block_content></block></while>
    </block_content>}</block></else></if_stmt>
  
  <return>return <expr><name>cache</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_outdated_cname_pointer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>crecp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_CNAME</name><operator>)</operator> <operator>||</operator> <name><name>crecp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>cname</name><operator>.</operator><name>is_name_ptr</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <comment type="block">/* NB. record may be reused as DS or DNSKEY, where uid is 
     overloaded for something completely different */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>crecp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>cname</name><operator>.</operator><name>target</name><operator>.</operator><name>cache</name></name> <operator>&amp;&amp;</operator> 
      <operator>!</operator><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>cname</name><operator>.</operator><name>target</name><operator>.</operator><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_DNSKEY</name> <operator>|</operator> <name>F_DS</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
      <name><name>crecp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>cname</name><operator>.</operator><name>uid</name></name> <operator>==</operator> <name><name>crecp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>cname</name><operator>.</operator><name>target</name><operator>.</operator><name>cache</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_expired</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>crecp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Don't dump expired entries if we're using them, cache becomes strictly LRU in that case.
     Never use expired DS or DNSKEY entries. */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_STALE_CACHE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_DS</name> <operator>|</operator> <name>F_DNSKEY</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_IMMORTAL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>difftime</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>crecp</name><operator>-&gt;</operator><name>ttd</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Remove entries with a given UID from the cache */</comment>
<function><type><name>unsigned</name> <name>int</name></type> <name>cache_remove_uid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>uid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>removed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>crecp</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>up</name></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>hash_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>crecp</name> <operator>=</operator> <name><name>hash_table</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator> <expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>hash_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>crecp</name></expr>;</condition> <incr><expr><name>crecp</name> <operator>=</operator> <name><name>crecp</name><operator>-&gt;</operator><name>hash_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_HOSTS</name> <operator>|</operator> <name>F_DHCP</name> <operator>|</operator> <name>F_CONFIG</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>crecp</name><operator>-&gt;</operator><name>uid</name></name> <operator>==</operator> <name>uid</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name><name>crecp</name><operator>-&gt;</operator><name>hash_next</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>removed</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>crecp</name><operator>-&gt;</operator><name>hash_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for></block_content></block></for>
  
  <return>return <expr><name>removed</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>cache_scan_free</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>all_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>class</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>,
				    <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>target_crec</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>target_uid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Scan and remove old entries.
     If (flags &amp; F_FORWARD) then remove any forward entries for name and any expired
     entries but only in the same hash bucket as name.
     If (flags &amp; F_REVERSE) then remove any reverse entries for addr and any expired
     entries in the whole cache.
     If (flags == 0) remove any expired entries in the whole cache. 

     In the flags &amp; F_FORWARD case, the return code is valid, and returns a non-NULL pointer
     to a cache entry if the name exists in the cache as a HOSTS or DHCP entry (these are never deleted)

     We take advantage of the fact that hash chains have stuff in the order &lt;reverse&gt;,&lt;other&gt;,&lt;immortal&gt;
     so that when we hit an entry which isn't reverse and is immortal, we're done. 

     If we free a crec which is a CNAME target, return the entry and uid in target_crec and target_uid.
     This entry will get re-used with the same name, to preserve CNAMEs. */</comment>
 
  <decl_stmt><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>crecp</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>up</name></decl>;</decl_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>class</name></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_FORWARD</name></expr>)</condition>
    <block>{<block_content>
      <for>for <control>(<init><expr><name>up</name> <operator>=</operator> <call><name>hash_bucket</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>crecp</name> <operator>=</operator> <operator>*</operator><name>up</name></expr>;</init> <condition><expr><name>crecp</name></expr>;</condition> <incr><expr><name>crecp</name> <operator>=</operator> <name><name>crecp</name><operator>-&gt;</operator><name>hash_next</name></name></expr></incr>)</control>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_FORWARD</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>hostname_isequal</name><argument_list>(<argument><expr><call><name>cache_get_name</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <comment type="block">/* Don't delete DNSSEC in favour of a CNAME, they can co-exist */</comment>
	      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_IPV4</name> <operator>|</operator> <name>F_IPV6</name> <operator>|</operator> <name>F_SRV</name> <operator>|</operator> <name>F_NXDOMAIN</name><operator>)</operator><operator>)</operator> <operator>||</operator> 
		  <operator>(</operator><operator>(</operator><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>|</operator> <name>flags</name><operator>)</operator> <operator>&amp;</operator> <name>F_CNAME</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_DNSKEY</name> <operator>|</operator> <name>F_DS</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition>
		<block>{<block_content>
		  <if_stmt><if>if <condition>(<expr><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_HOSTS</name> <operator>|</operator> <name>F_DHCP</name> <operator>|</operator> <name>F_CONFIG</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		    <return>return <expr><name>crecp</name></expr>;</return></block_content></block></if></if_stmt>
		  <expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name><name>crecp</name><operator>-&gt;</operator><name>hash_next</name></name></expr>;</expr_stmt>
		  <comment type="block">/* If this record is for the name we're inserting and is the target
		     of a CNAME record. Make the new record for the same name, in the same
		     crec, with the same uid to avoid breaking the existing CNAME. */</comment>
		  <if_stmt><if>if <condition>(<expr><name><name>crecp</name><operator>-&gt;</operator><name>uid</name></name> <operator>!=</operator> <name>UID_NONE</name></expr>)</condition>
		    <block>{<block_content>
		      <if_stmt><if>if <condition>(<expr><name>target_crec</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>target_crec</name> <operator>=</operator> <name>crecp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		      <if_stmt><if>if <condition>(<expr><name>target_uid</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>target_uid</name> <operator>=</operator> <name><name>crecp</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		    </block_content>}</block></if></if_stmt>
		  <expr_stmt><expr><call><name>cache_unlink</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>cache_free</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
	      
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
	      <comment type="block">/* Deletion has to be class-sensitive for DS and DNSKEY */</comment>
	      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_DNSKEY</name> <operator>|</operator> <name>F_DS</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>crecp</name><operator>-&gt;</operator><name>uid</name></name> <operator>==</operator> <name>class</name></expr>)</condition>
		<block>{<block_content>
		  <if_stmt><if>if <condition>(<expr><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_CONFIG</name></expr>)</condition><block type="pseudo"><block_content>
		    <return>return <expr><name>crecp</name></expr>;</return></block_content></block></if></if_stmt>
		  <expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name><name>crecp</name><operator>-&gt;</operator><name>hash_next</name></name></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>cache_unlink</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>cache_free</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    </block_content>}</block></if></if_stmt>

	  <if_stmt><if>if <condition>(<expr><call><name>is_expired</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>crecp</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is_outdated_cname_pointer</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content> 
	      <expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name><name>crecp</name><operator>-&gt;</operator><name>hash_next</name></name></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_HOSTS</name> <operator>|</operator> <name>F_DHCP</name> <operator>|</operator> <name>F_CONFIG</name><operator>)</operator><operator>)</operator></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>cache_unlink</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>cache_free</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	      <continue>continue;</continue>
	    </block_content>}</block></if></if_stmt> 
	  
	  <expr_stmt><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>crecp</name><operator>-&gt;</operator><name>hash_next</name></name></expr>;</expr_stmt>
	</block_content>}</block></for>
    </block_content>}</block></if>
  <else>else
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>addrlen</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>F_IPV6</name><operator>)</operator></expr> ?</condition><then> <expr><name>IN6ADDRSZ</name></expr> </then><else>: <expr><name>INADDRSZ</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>hash_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	<for>for <control>(<init><expr><name>crecp</name> <operator>=</operator> <name><name>hash_table</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator> <expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>hash_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> 
	     <condition><expr><name>crecp</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_REVERSE</name><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_IMMORTAL</name><operator>)</operator><operator>)</operator></expr>;</condition>
	     <incr><expr><name>crecp</name> <operator>=</operator> <name><name>crecp</name><operator>-&gt;</operator><name>hash_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	  <if_stmt><if>if <condition>(<expr><call><name>is_expired</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>crecp</name></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name><name>crecp</name><operator>-&gt;</operator><name>hash_next</name></name></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_HOSTS</name> <operator>|</operator> <name>F_DHCP</name> <operator>|</operator> <name>F_CONFIG</name><operator>)</operator><operator>)</operator></expr>)</condition>
		<block>{<block_content> 
		  <expr_stmt><expr><call><name>cache_unlink</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>cache_free</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></if>
	  <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_HOSTS</name> <operator>|</operator> <name>F_DHCP</name> <operator>|</operator> <name>F_CONFIG</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
		   <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_REVERSE</name><operator>)</operator> <operator>&amp;&amp;</operator> 
		   <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_IPV4</name> <operator>|</operator> <name>F_IPV6</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
		   <name>addr</name> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>crecp</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name><name>crecp</name><operator>-&gt;</operator><name>hash_next</name></name></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>cache_unlink</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>cache_free</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>crecp</name><operator>-&gt;</operator><name>hash_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for></block_content></block></for>
    </block_content>}</block></else></if_stmt>
  
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Note: The normal calling sequence is
   cache_start_insert
   cache_insert * n
   cache_end_insert

   but an abort can cause the cache_end_insert to be missed 
   in which can the next cache_start_insert cleans things up. */</comment>

<function><type><name>void</name></type> <name>cache_start_insert</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Free any entries which didn't get committed during the last
     insert due to error.
  */</comment>
  <while>while <condition>(<expr><name>new_chain</name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>new_chain</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>cache_free</name><argument_list>(<argument><expr><name>new_chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>new_chain</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
    </block_content>}</block></while>
  <expr_stmt><expr><name>new_chain</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>insert_error</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>cache_insert</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>all_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>class</name></decl></parameter>,
			  <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>,  <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>ttl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>F_DNSKEY</name> <operator>|</operator> <name>F_DS</name><operator>)</operator></expr>)</condition> 
    <block>{<block_content>
      <comment type="block">/* The DNSSEC validation process works by getting needed records into the
	 cache, then retrying the validation until they are all in place.
	 This can be messed up by very short TTLs, and _really_ messed up by
	 zero TTLs, so we force the TTL to be at least long enough to do a validation.
	 Ideally, we should use some kind of reference counting so that records are
	 locked until the validation that asked for them is complete, but this
	 is much easier, and just as effective. */</comment>
      <if_stmt><if>if <condition>(<expr><name>ttl</name> <operator>&lt;</operator> <name>DNSSEC_MIN_TTL</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>ttl</name> <operator>=</operator> <name>DNSSEC_MIN_TTL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
  <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>max_cache_ttl</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>max_cache_ttl</name></name> <operator>&lt;</operator> <name>ttl</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>ttl</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>max_cache_ttl</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>min_cache_ttl</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>min_cache_ttl</name></name> <operator>&gt;</operator> <name>ttl</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>ttl</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>min_cache_ttl</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>	
  
  <return>return <expr><call><name>really_insert</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>class</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>ttl</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>really_insert</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>all_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>class</name></decl></parameter>,
				  <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>,  <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>ttl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>new</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>target_crec</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>union</name> <name>bigname</name></name> <modifier>*</modifier></type><name>big_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>freed_all</name> <init>= <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>F_REVERSE</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>free_avail</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>target_uid</name></decl>;</decl_stmt>
  
  <comment type="block">/* if previous insertion failed give up now. */</comment>
  <if_stmt><if>if <condition>(<expr><name>insert_error</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <comment type="block">/* we don't cache zero-TTL records. */</comment>
  <if_stmt><if>if <condition>(<expr><name>ttl</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>insert_error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* First remove any expired entries and entries for the name/address we
     are currently inserting. */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>new</name> <operator>=</operator> <call><name>cache_scan_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>class</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target_crec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target_uid</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* We're trying to insert a record over one from 
	 /etc/hosts or DHCP, or other config. If the 
	 existing record is for an A or AAAA or CNAME and
	 the record we're trying to insert is the same, 
	 just drop the insert, but don't error the whole process. */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>F_IPV4</name> <operator>|</operator> <name>F_IPV6</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>F_FORWARD</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>addr</name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>F_IPV4</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_IPV4</name><operator>)</operator> <operator>&amp;&amp;</operator>
	      <name><name>new</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr4</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <name><name>addr</name><operator>-&gt;</operator><name>addr4</name><operator>.</operator><name>s_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><name>new</name></expr>;</return></block_content></block></if>
	  <if type="elseif">else if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>F_IPV6</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_IPV6</name><operator>)</operator> <operator>&amp;&amp;</operator>
		   <call><name>IN6_ARE_ADDR_EQUAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr6</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>addr6</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><name>new</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>insert_error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Now get a cache entry from the end of the LRU list */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>target_crec</name></expr>)</condition><block type="pseudo"><block_content>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>new</name> <operator>=</operator> <name>cache_tail</name><operator>)</operator></expr>)</condition> <comment type="block">/* no entries left - cache is too small, bail */</comment>
	<block>{<block_content>
	  <expr_stmt><expr><name>insert_error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	  <return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
      
      <comment type="block">/* Free entry at end of LRU list, use it. */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_FORWARD</name> <operator>|</operator> <name>F_REVERSE</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<break>break;</break></block_content></block></if></if_stmt>

      <comment type="block">/* End of LRU list is still in use: if we didn't scan all the hash
	 chains for expired entries do that now. If we already tried that
	 then it's time to start spilling things. */</comment>
      
      <comment type="block">/* If free_avail set, we believe that an entry has been freed.
	 Bugs have been known to make this not true, resulting in
	 a tight loop here. If that happens, abandon the
	 insert. Once in this state, all inserts will probably fail. */</comment>
      <if_stmt><if>if <condition>(<expr><name>free_avail</name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>warned</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>warned</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Internal error in cache."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name>warned</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	  <expr_stmt><expr><name>insert_error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	  <return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>freed_all</name></expr>)</condition>
	<block>{<block_content>
	  <comment type="block">/* For DNSSEC records, uid holds class. */</comment>
	  <expr_stmt><expr><name>free_avail</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* Must be free space now. */</comment>
	  
	  <comment type="block">/* condition valid when stale-caching */</comment>
	  <if_stmt><if>if <condition>(<expr><call><name>difftime</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>new</name><operator>-&gt;</operator><name>ttd</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><name>METRIC_DNS_CACHE_LIVE_FREED</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  
	  <expr_stmt><expr><call><name>cache_scan_free</name><argument_list>(<argument><expr><call><name>cache_get_name</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>new</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <expr_stmt><expr><call><name>cache_scan_free</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>class</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>freed_all</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
    </block_content>}</block></while></block_content></block></if></if_stmt>
      
  <comment type="block">/* Check if we need to and can allocate extra memory for a long name.
     If that fails, give up now, always succeed for DNSSEC records. */</comment>
  <if_stmt><if>if <condition>(<expr><name>name</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>SMALLDNAME</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>big_free</name></expr>)</condition>
	<block>{<block_content> 
	  <expr_stmt><expr><name>big_name</name> <operator>=</operator> <name>big_free</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>big_free</name> <operator>=</operator> <name><name>big_free</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><operator>(</operator><name>bignames_left</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>F_DS</name> <operator>|</operator> <name>F_DNSKEY</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>||</operator>
	       <operator>!</operator><operator>(</operator><name>big_name</name> <operator>=</operator> <operator>(</operator>union <name>bigname</name> <operator>*</operator><operator>)</operator><call><name>whine_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>union <name>bigname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>insert_error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	  <return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><name>bignames_left</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>bignames_left</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
    </block_content>}</block></if></if_stmt>

  <comment type="block">/* If we freed a cache entry for our name which was a CNAME target, use that.
     and preserve the uid, so that existing CNAMES are not broken. */</comment>
  <if_stmt><if>if <condition>(<expr><name>target_crec</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>new</name> <operator>=</operator> <name>target_crec</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name>target_uid</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Got the rest: finally grab entry. */</comment>
  <expr_stmt><expr><call><name>cache_unlink</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>big_name</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>bname</name></name> <operator>=</operator> <name>big_name</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>F_BIGNAME</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><call><name>cache_get_name</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator><call><name>cache_get_name</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>F_DS</name> <operator>|</operator> <name>F_DNSKEY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name>class</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if <condition>(<expr><name>addr</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>*</operator><name>addr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>	

  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>ttd</name></name> <operator>=</operator> <name>now</name> <operator>+</operator> <operator>(</operator><name>time_t</name><operator>)</operator><name>ttl</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>new_chain</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>new_chain</name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
  
  <return>return <expr><name>new</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* after end of insertion, commit the new entries */</comment>
<function><type><name>void</name></type> <name>cache_end_insert</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>insert_error</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>
  
  <while>while <condition>(<expr><name>new_chain</name></expr>)</condition>
    <block>{<block_content> 
      <decl_stmt><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>new_chain</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
      <comment type="block">/* drop CNAMEs which didn't find a target. */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>is_outdated_cname_pointer</name><argument_list>(<argument><expr><name>new_chain</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>cache_free</name><argument_list>(<argument><expr><name>new_chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else
	<block>{<block_content>
	  <expr_stmt><expr><call><name>cache_hash</name><argument_list>(<argument><expr><name>new_chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>cache_link</name><argument_list>(<argument><expr><name>new_chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><name>METRIC_DNS_CACHE_INSERTED</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

	  <comment type="block">/* If we're a child process, send this cache entry up the pipe to the master.
	     The marshalling process is rather nasty. */</comment>
	  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>pipe_to_parent</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>cache_get_name</name><argument_list>(<argument><expr><name>new_chain</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name>ssize_t</name></type> <name>m</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name> <init>= <expr><name><name>new_chain</name><operator>-&gt;</operator><name>flags</name></name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
	      <decl_stmt><decl><type><name>u16</name></type> <name>class</name> <init>= <expr><name><name>new_chain</name><operator>-&gt;</operator><name>uid</name></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	      
	      <expr_stmt><expr><call><name>read_write</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>pipe_to_parent</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>read_write</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>pipe_to_parent</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>read_write</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>pipe_to_parent</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>new_chain</name><operator>-&gt;</operator><name>ttd</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>new_chain</name><operator>-&gt;</operator><name>ttd</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>read_write</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>pipe_to_parent</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name>  <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	      <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>F_IPV4</name> <operator>|</operator> <name>F_IPV6</name> <operator>|</operator> <name>F_DNSKEY</name> <operator>|</operator> <name>F_DS</name> <operator>|</operator> <name>F_SRV</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>read_write</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>pipe_to_parent</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>new_chain</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>new_chain</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_SRV</name></expr>)</condition>
		<block>{<block_content>
		  <comment type="block">/* A negative SRV entry is possible and has no data, obviously. */</comment>
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>F_NEG</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><call><name>blockdata_write</name><argument_list>(<argument><expr><name><name>new_chain</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>srv</name><operator>.</operator><name>target</name></name></expr></argument>, <argument><expr><name><name>new_chain</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>srv</name><operator>.</operator><name>targetlen</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>pipe_to_parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
	      <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_DNSKEY</name></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>read_write</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>pipe_to_parent</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>class</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>class</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>blockdata_write</name><argument_list>(<argument><expr><name><name>new_chain</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>key</name><operator>.</operator><name>keydata</name></name></expr></argument>, <argument><expr><name><name>new_chain</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>key</name><operator>.</operator><name>keylen</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>pipe_to_parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
	      <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_DS</name></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>read_write</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>pipe_to_parent</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>class</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>class</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <comment type="block">/* A negative DS entry is possible and has no data, obviously. */</comment>
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>F_NEG</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><call><name>blockdata_write</name><argument_list>(<argument><expr><name><name>new_chain</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ds</name><operator>.</operator><name>keydata</name></name></expr></argument>, <argument><expr><name><name>new_chain</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ds</name><operator>.</operator><name>keylen</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>pipe_to_parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
      
      <expr_stmt><expr><name>new_chain</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
    </block_content>}</block></while>

  <comment type="block">/* signal end of cache insert in master process */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>pipe_to_parent</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>ssize_t</name></type> <name>m</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>read_write</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>pipe_to_parent</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
      
  <expr_stmt><expr><name>new_chain</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* A marshalled cache entry arrives on fd, read, unmarshall and insert into cache of master process. */</comment>
<function><type><name>int</name></type> <name>cache_recv_insert</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>m</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>union</name> <name>all_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ttl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>time_t</name></type> <name>ttd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>crecp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  
  <expr_stmt><expr><call><name>cache_start_insert</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  
  <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
 
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>cache_end_insert</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	  <return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>||</operator>
	  <operator>!</operator><call><name>read_write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ttd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ttd</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>||</operator>
	  <operator>!</operator><call><name>read_write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

      <expr_stmt><expr><name>ttl</name> <operator>=</operator> <call><name>difftime</name><argument_list>(<argument><expr><name>ttd</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>F_IPV4</name> <operator>|</operator> <name>F_IPV6</name> <operator>|</operator> <name>F_DNSKEY</name> <operator>|</operator> <name>F_DS</name> <operator>|</operator> <name>F_SRV</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>class</name> <init>= <expr><name>C_IN</name></expr></init></decl>;</decl_stmt>

	  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>F_SRV</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>F_NEG</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>addr</name><operator>.</operator><name>srv</name><operator>.</operator><name>target</name></name> <operator>=</operator> <call><name>blockdata_read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>addr</name><operator>.</operator><name>srv</name><operator>.</operator><name>targetlen</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
	   <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_DNSKEY</name></expr>)</condition>
	     <block>{<block_content>
	       <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>class</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>class</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>||</operator>
		   <operator>!</operator><operator>(</operator><name><name>addr</name><operator>.</operator><name>key</name><operator>.</operator><name>keydata</name></name> <operator>=</operator> <call><name>blockdata_read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>addr</name><operator>.</operator><name>key</name><operator>.</operator><name>keylen</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		 <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	     </block_content>}</block></if>
	   <if type="elseif">else  if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_DS</name></expr>)</condition>
	     <block>{<block_content>
	        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>class</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>class</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>||</operator>
		    <operator>(</operator><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>F_NEG</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>addr</name><operator>.</operator><name>key</name><operator>.</operator><name>keydata</name></name> <operator>=</operator> <call><name>blockdata_read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>addr</name><operator>.</operator><name>key</name><operator>.</operator><name>keylen</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		  <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	     </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	       
	  <expr_stmt><expr><name>crecp</name> <operator>=</operator> <call><name>really_insert</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>class</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>ttl</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_CNAME</name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>newc</name> <init>= <expr><call><name>really_insert</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>ttl</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	  <comment type="block">/* This relies on the fact that the target of a CNAME immediately precedes
	     it because of the order of extraction in extract_addresses, and
	     the order reversal on the new_chain. */</comment>
	  <if_stmt><if>if <condition>(<expr><name>newc</name></expr>)</condition>
	    <block>{<block_content>
	       <expr_stmt><expr><name><name>newc</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>cname</name><operator>.</operator><name>is_name_ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	       
	       <if_stmt><if>if <condition>(<expr><operator>!</operator><name>crecp</name></expr>)</condition><block type="pseudo"><block_content>
		 <expr_stmt><expr><name><name>newc</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>cname</name><operator>.</operator><name>target</name><operator>.</operator><name>cache</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
	       <else>else
		<block>{<block_content>
		  <expr_stmt><expr><call><name>next_uid</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>newc</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>cname</name><operator>.</operator><name>target</name><operator>.</operator><name>cache</name></name> <operator>=</operator> <name>crecp</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>newc</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>cname</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>crecp</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>
	
<function><type><name>int</name></type> <name>cache_find_non_terminal</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>crecp</name></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>crecp</name> <operator>=</operator> <operator>*</operator><call><name>hash_bucket</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>crecp</name></expr>;</condition> <incr><expr><name>crecp</name> <operator>=</operator> <name><name>crecp</name><operator>-&gt;</operator><name>hash_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_outdated_cname_pointer</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	<operator>!</operator><call><name>is_expired</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>crecp</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	<operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_FORWARD</name><operator>)</operator> <operator>&amp;&amp;</operator>
	<operator>!</operator><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_NXDOMAIN</name><operator>)</operator> <operator>&amp;&amp;</operator> 
	<call><name>hostname_isequal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>cache_get_name</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>cache_find_by_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>crecp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>prot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>ans</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>no_rr</name> <init>= <expr><operator>(</operator><name>prot</name> <operator>&amp;</operator> <name>F_NO_RR</name><operator>)</operator> <operator>||</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NORR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>prot</name> <operator>&amp;=</operator> <operator>~</operator><name>F_NO_RR</name></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>crecp</name></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* iterating */</comment>
    <expr_stmt><expr><name>ans</name> <operator>=</operator> <name><name>crecp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
  <else>else
    <block>{<block_content>
      <comment type="block">/* first search, look for relevant entries and push to top of list
	 also free anything which has expired */</comment>
      <decl_stmt><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>up</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>insert</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>chainp</name> <init>= <expr><operator>&amp;</operator><name>ans</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ins_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      
      <for>for <control>(<init><expr><name>up</name> <operator>=</operator> <call><name>hash_bucket</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>crecp</name> <operator>=</operator> <operator>*</operator><name>up</name></expr>;</init> <condition><expr><name>crecp</name></expr>;</condition> <incr><expr><name>crecp</name> <operator>=</operator> <name>next</name></expr></incr>)</control>
	<block>{<block_content>
	  <expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>crecp</name><operator>-&gt;</operator><name>hash_next</name></name></expr>;</expr_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_expired</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>crecp</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_outdated_cname_pointer</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_FORWARD</name><operator>)</operator> <operator>&amp;&amp;</operator> 
		  <operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>prot</name><operator>)</operator> <operator>&amp;&amp;</operator>
		  <call><name>hostname_isequal</name><argument_list>(<argument><expr><call><name>cache_get_name</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
		  <if_stmt><if>if <condition>(<expr><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_HOSTS</name> <operator>|</operator> <name>F_DHCP</name> <operator>|</operator> <name>F_CONFIG</name><operator>)</operator></expr>)</condition>
		    <block>{<block_content>
		      <expr_stmt><expr><operator>*</operator><name>chainp</name> <operator>=</operator> <name>crecp</name></expr>;</expr_stmt>
		      <expr_stmt><expr><name>chainp</name> <operator>=</operator> <operator>&amp;</operator><name><name>crecp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		    </block_content>}</block></if>
		  <else>else
		    <block>{<block_content>
		      <expr_stmt><expr><call><name>cache_unlink</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><call><name>cache_link</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    </block_content>}</block></else></if_stmt>
	      	      
		  <comment type="block">/* Move all but the first entry up the hash chain
		     this implements round-robin. 
		     Make sure that re-ordering doesn't break the hash-chain
		     order invariants. 
		  */</comment>
		  <if_stmt><if>if <condition>(<expr><name>insert</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_REVERSE</name> <operator>|</operator> <name>F_IMMORTAL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>ins_flags</name></expr>)</condition>
		    <block>{<block_content>
		      <expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name><name>crecp</name><operator>-&gt;</operator><name>hash_next</name></name></expr>;</expr_stmt>
		      <expr_stmt><expr><name><name>crecp</name><operator>-&gt;</operator><name>hash_next</name></name> <operator>=</operator> <operator>*</operator><name>insert</name></expr>;</expr_stmt>
		      <expr_stmt><expr><operator>*</operator><name>insert</name> <operator>=</operator> <name>crecp</name></expr>;</expr_stmt>
		      <expr_stmt><expr><name>insert</name> <operator>=</operator> <operator>&amp;</operator><name><name>crecp</name><operator>-&gt;</operator><name>hash_next</name></name></expr>;</expr_stmt>
		    </block_content>}</block></if>
		  <else>else
		    <block>{<block_content>
		      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>insert</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>no_rr</name></expr>)</condition>
			<block>{<block_content>
			  <expr_stmt><expr><name>insert</name> <operator>=</operator> <name>up</name></expr>;</expr_stmt>
			  <expr_stmt><expr><name>ins_flags</name> <operator>=</operator> <name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_REVERSE</name> <operator>|</operator> <name>F_IMMORTAL</name><operator>)</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		      <expr_stmt><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>crecp</name><operator>-&gt;</operator><name>hash_next</name></name></expr>;</expr_stmt> 
		    </block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
	      <else>else<block type="pseudo"><block_content>
		<comment type="block">/* case : not expired, incorrect entry. */</comment>
		<expr_stmt><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>crecp</name><operator>-&gt;</operator><name>hash_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt> 
	    </block_content>}</block></if>
	  <else>else
	    <block>{<block_content>
	      <comment type="block">/* expired entry, free it */</comment>
	      <expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name><name>crecp</name><operator>-&gt;</operator><name>hash_next</name></name></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_HOSTS</name> <operator>|</operator> <name>F_DHCP</name> <operator>|</operator> <name>F_CONFIG</name><operator>)</operator><operator>)</operator></expr>)</condition>
		<block>{<block_content> 
		  <expr_stmt><expr><call><name>cache_unlink</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>cache_free</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
	  
      <expr_stmt><expr><operator>*</operator><name>chainp</name> <operator>=</operator> <name>cache_head</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>ans</name> <operator>&amp;&amp;</operator> 
      <operator>(</operator><name><name>ans</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_FORWARD</name><operator>)</operator> <operator>&amp;&amp;</operator>
      <operator>(</operator><name><name>ans</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>prot</name><operator>)</operator> <operator>&amp;&amp;</operator>     
      <call><name>hostname_isequal</name><argument_list>(<argument><expr><call><name>cache_get_name</name><argument_list>(<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>ans</name></expr>;</return></block_content></block></if></if_stmt>
  
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>cache_find_by_addr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>crecp</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>all_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, 
				<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>prot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>ans</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>addrlen</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>prot</name> <operator>==</operator> <name>F_IPV6</name><operator>)</operator></expr> ?</condition><then> <expr><name>IN6ADDRSZ</name></expr> </then><else>: <expr><name>INADDRSZ</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>crecp</name></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* iterating */</comment>
    <expr_stmt><expr><name>ans</name> <operator>=</operator> <name><name>crecp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
  <else>else
    <block>{<block_content>  
      <comment type="block">/* first search, look for relevant entries and push to top of list
	 also free anything which has expired. All the reverse entries are at the
	 start of the hash chain, so we can give up when we find the first 
	 non-REVERSE one.  */</comment>
       <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
       <decl_stmt><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>up</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>chainp</name> <init>= <expr><operator>&amp;</operator><name>ans</name></expr></init></decl>;</decl_stmt>
       
       <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>hash_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	 <for>for <control>(<init><expr><name>crecp</name> <operator>=</operator> <name><name>hash_table</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator> <expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>hash_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> 
	      <condition><expr><name>crecp</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_REVERSE</name><operator>)</operator></expr>;</condition>
	      <incr><expr><name>crecp</name> <operator>=</operator> <name><name>crecp</name><operator>-&gt;</operator><name>hash_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	   <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_expired</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>crecp</name></expr></argument>)</argument_list></call></expr>)</condition>
	     <block>{<block_content>      
	       <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>prot</name><operator>)</operator> <operator>&amp;&amp;</operator>
		   <call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>crecp</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		 <block>{<block_content>	    
		   <if_stmt><if>if <condition>(<expr><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_HOSTS</name> <operator>|</operator> <name>F_DHCP</name> <operator>|</operator> <name>F_CONFIG</name><operator>)</operator></expr>)</condition>
		     <block>{<block_content>
		       <expr_stmt><expr><operator>*</operator><name>chainp</name> <operator>=</operator> <name>crecp</name></expr>;</expr_stmt>
		       <expr_stmt><expr><name>chainp</name> <operator>=</operator> <operator>&amp;</operator><name><name>crecp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		     </block_content>}</block></if>
		   <else>else
		     <block>{<block_content>
		       <expr_stmt><expr><call><name>cache_unlink</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		       <expr_stmt><expr><call><name>cache_link</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		     </block_content>}</block></else></if_stmt>
		 </block_content>}</block></if></if_stmt>
	       <expr_stmt><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>crecp</name><operator>-&gt;</operator><name>hash_next</name></name></expr>;</expr_stmt>
	     </block_content>}</block></if>
	   <else>else
	     <block>{<block_content>
	       <expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name><name>crecp</name><operator>-&gt;</operator><name>hash_next</name></name></expr>;</expr_stmt>
	       <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_HOSTS</name> <operator>|</operator> <name>F_DHCP</name> <operator>|</operator> <name>F_CONFIG</name><operator>)</operator><operator>)</operator></expr>)</condition>
		 <block>{<block_content>
		   <expr_stmt><expr><call><name>cache_unlink</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		   <expr_stmt><expr><call><name>cache_free</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 </block_content>}</block></if></if_stmt>
	     </block_content>}</block></else></if_stmt></block_content></block></for></block_content></block></for>
       
       <expr_stmt><expr><operator>*</operator><name>chainp</name> <operator>=</operator> <name>cache_head</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>ans</name> <operator>&amp;&amp;</operator> 
      <operator>(</operator><name><name>ans</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_REVERSE</name><operator>)</operator> <operator>&amp;&amp;</operator>
      <operator>(</operator><name><name>ans</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>prot</name><operator>)</operator> <operator>&amp;&amp;</operator>
      <call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ans</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>ans</name></expr>;</return></block_content></block></if></if_stmt>
  
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>add_hosts_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>all_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>addrlen</name></decl></parameter>, 
			     <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>rhash</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hashsz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name></decl>;</decl_stmt> 
  <decl_stmt><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>lookup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Remove duplicates in hosts files. */</comment>
  <while>while <condition>(<expr><operator>(</operator><name>lookup</name> <operator>=</operator> <call><name>cache_find_by_name</name><argument_list>(<argument><expr><name>lookup</name></expr></argument>, <argument><expr><call><name>cache_get_name</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_IPV4</name> <operator>|</operator> <name>F_IPV6</name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>lookup</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_HOSTS</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lookup</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
      <block>{<block_content>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
      </block_content>}</block></if></if_stmt></block_content></block></while>
    
  <comment type="block">/* Ensure there is only one address -&gt; name mapping (first one trumps) 
     We do this by steam here, The entries are kept in hash chains, linked
     by -&gt;next (which is unused at this point) held in hash buckets in
     the array rhash, hashed on address. Note that rhash and the values
     in -&gt;next are only valid  whilst reading hosts files: the buckets are
     then freed, and the -&gt;next pointer used for other things. 

     Only insert each unique address once into this hashing structure.

     This complexity avoids O(n^2) divergent CPU use whilst reading
     large (10000 entry) hosts files. 

     Note that we only do this process when bulk-reading hosts files, 
     for incremental reads, rhash is NULL, and we use cache lookups
     instead.
  */</comment>
  
  <if_stmt><if>if <condition>(<expr><name>rhash</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* hash address */</comment>
      <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>addrlen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>j</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>)</operator> <operator>%</operator> <name>hashsz</name></expr>;</expr_stmt></block_content></block></for>
      
      <for>for <control>(<init><expr><name>lookup</name> <operator>=</operator> <name><name>rhash</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</init> <condition><expr><name>lookup</name></expr>;</condition> <incr><expr><name>lookup</name> <operator>=</operator> <name><name>lookup</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>lookup</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_IPV4</name> <operator>|</operator> <name>F_IPV6</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
	    <call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lookup</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>F_REVERSE</name></expr>;</expr_stmt>
	    <break>break;</break>
	  </block_content>}</block></if></if_stmt></block_content></block></for>
      
      <comment type="block">/* maintain address hash chain, insert new unique address */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>lookup</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>rhash</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>rhash</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>cache</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
  <else>else
    <block>{<block_content>
      <comment type="block">/* incremental read, lookup in cache */</comment>
      <expr_stmt><expr><name>lookup</name> <operator>=</operator> <call><name>cache_find_by_addr</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_IPV4</name> <operator>|</operator> <name>F_IPV6</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lookup</name> <operator>&amp;&amp;</operator> <name><name>lookup</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_HOSTS</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>F_REVERSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>cache_hash</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>make_non_terminals</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>eatspace</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>nl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>getc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content>
	<while>while <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>ungetc</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <return>return <expr><name>nl</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>nl</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>
	 
<function><type><specifier>static</specifier> <name>int</name></type> <name>gettok</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
 
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>getc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><ternary><condition><expr><operator>(</operator><name>count</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>ungetc</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <return>return <expr><call><name>eatspace</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;</operator> <operator>(</operator><name>MAXDNAME</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name><name>token</name><index>[<expr><name>count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>token</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>read_hostsfile</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cache_size</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>rhash</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hashsz</name></decl></parameter>)</parameter_list>
<block>{<block_content>  
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name> <init>= <expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>domain_suffix</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>names_done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>name_count</name> <init>= <expr><name>cache_size</name></expr></init></decl>, <decl><type ref="prev"/><name>lineno</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>union</name> <name>all_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>atnl</name></decl>, <decl><type ref="prev"/><name>addrlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to load names from %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>cache_size</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><name>lineno</name> <operator>+=</operator> <call><name>eatspace</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <while>while <condition>(<expr><operator>(</operator><name>atnl</name> <operator>=</operator> <call><name>gettok</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>F_HOSTS</name> <operator>|</operator> <name>F_IMMORTAL</name> <operator>|</operator> <name>F_FORWARD</name> <operator>|</operator> <name>F_REVERSE</name> <operator>|</operator> <name>F_IPV4</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>addrlen</name> <operator>=</operator> <name>INADDRSZ</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>domain_suffix</name> <operator>=</operator> <call><name>get_domain</name><argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>addr4</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>F_HOSTS</name> <operator>|</operator> <name>F_IMMORTAL</name> <operator>|</operator> <name>F_FORWARD</name> <operator>|</operator> <name>F_REVERSE</name> <operator>|</operator> <name>F_IPV6</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>addrlen</name> <operator>=</operator> <name>IN6ADDRSZ</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>domain_suffix</name> <operator>=</operator> <call><name>get_domain6</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>addr6</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad address at %s line %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	  <while>while <condition>(<expr><name>atnl</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>atnl</name> <operator>=</operator> <call><name>gettok</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
	  <expr_stmt><expr><name>lineno</name> <operator>+=</operator> <name>atnl</name></expr>;</expr_stmt>
	  <continue>continue;</continue>
	</block_content>}</block></else></if_stmt>
      
      <comment type="block">/* rehash every 1000 names. */</comment>
      <if_stmt><if>if <condition>(<expr><name>rhash</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>name_count</name> <operator>-</operator> <name>cache_size</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">1000</literal><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>rehash</name><argument_list>(<argument><expr><name>name_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>cache_size</name> <operator>=</operator> <name>name_count</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt> 
      
      <while>while <condition>(<expr><name>atnl</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>cache</name></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>int</name></type> <name>fqdn</name></decl>, <decl><type ref="prev"/><name>nomem</name></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>canon</name></decl>;</decl_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>atnl</name> <operator>=</operator> <call><name>gettok</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	    <break>break;</break></block_content></block></if></if_stmt>

	  <expr_stmt><expr><name>fqdn</name> <operator>=</operator> <operator>!</operator><operator>!</operator><call><name>strchr</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>canon</name> <operator>=</operator> <call><name>canonicalise</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nomem</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <comment type="block">/* If set, add a version of the name with a default domain appended */</comment>
	      <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_EXPAND</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>domain_suffix</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>fqdn</name> <operator>&amp;&amp;</operator> 
		  <operator>(</operator><name>cache</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><name>SIZEOF_BARE_CREC</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>canon</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>domain_suffix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>sname</name></name></expr></argument>, <argument><expr><name>canon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>sname</name></name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>sname</name></name></expr></argument>, <argument><expr><name>domain_suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>ttd</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>local_ttl</name></name></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>add_hosts_entry</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>rhash</name></expr></argument>, <argument><expr><name>hashsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name>name_count</name><operator>++</operator></expr>;</expr_stmt>
		  <expr_stmt><expr><name>names_done</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cache</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><name>SIZEOF_BARE_CREC</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>canon</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>sname</name></name></expr></argument>, <argument><expr><name>canon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>ttd</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>local_ttl</name></name></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>add_hosts_entry</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>rhash</name></expr></argument>, <argument><expr><name>hashsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name>name_count</name><operator>++</operator></expr>;</expr_stmt>
		  <expr_stmt><expr><name>names_done</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>canon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      
	    </block_content>}</block></if>
	  <if type="elseif">else if <condition>(<expr><operator>!</operator><name>nomem</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad name at %s line %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
	</block_content>}</block></while>

      <expr_stmt><expr><name>lineno</name> <operator>+=</operator> <name>atnl</name></expr>;</expr_stmt>
    </block_content>}</block></while> 

  <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>rhash</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>rehash</name><argument_list>(<argument><expr><name>name_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
  
  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"read %s - %d names"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>names_done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <return>return <expr><name>name_count</name></expr>;</return>
</block_content>}</block></function>
	    
<function><type><name>void</name></type> <name>cache_reload</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>cache</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>up</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>revhashsz</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>total_size</name> <init>= <expr><name><name>daemon</name><operator>-&gt;</operator><name>cachesize</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>hostsfile</name></name> <modifier>*</modifier></type><name>ah</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>host_record</name></name> <modifier>*</modifier></type><name>hr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>name_list</name></name> <modifier>*</modifier></type><name>nl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>cname</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>crec</name></name></type> <name>lrec</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>mx_srv_record</name></name> <modifier>*</modifier></type><name>mx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>txt_record</name></name> <modifier>*</modifier></type><name>txt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>interface_name</name></name> <modifier>*</modifier></type><name>intr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>ptr_record</name></name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>naptr</name></name> <modifier>*</modifier></type><name>naptr</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
  <decl_stmt><decl><type><name><name>struct</name> <name>ds_config</name></name> <modifier>*</modifier></type><name>ds</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><name>METRIC_DNS_CACHE_INSERTED</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><name>METRIC_DNS_CACHE_LIVE_FREED</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  
  <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>hash_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>cache</name> <operator>=</operator> <name><name>hash_table</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator> <expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>hash_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>cache</name></expr>;</condition> <incr><expr><name>cache</name> <operator>=</operator> <name>tmp</name></expr></incr>)</control>
      <block>{<block_content>
	<expr_stmt><expr><call><name>cache_blockdata_free</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>hash_next</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_HOSTS</name> <operator>|</operator> <name>F_CONFIG</name><operator>)</operator></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>hash_next</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_DHCP</name><operator>)</operator></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>hash_next</name></name></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_BIGNAME</name></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>bname</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>big_free</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>big_free</name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>bname</name></name></expr>;</expr_stmt>
	      </block_content>}</block></if></if_stmt>
	    <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	  </block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
	  <expr_stmt><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>hash_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
      </block_content>}</block></for></block_content></block></for>
  
  <comment type="block">/* Add locally-configured CNAMEs to the cache */</comment>
  <for>for <control>(<init><expr><name>a</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>cnames</name></name></expr>;</init> <condition><expr><name>a</name></expr>;</condition> <incr><expr><name>a</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>alias</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'*'</literal> <operator>&amp;&amp;</operator>
	<operator>(</operator><operator>(</operator><name>cache</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><name>SIZEOF_POINTER_CREC</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition>
      <block>{<block_content>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>F_FORWARD</name> <operator>|</operator> <name>F_NAMEP</name> <operator>|</operator> <name>F_CNAME</name> <operator>|</operator> <name>F_IMMORTAL</name> <operator>|</operator> <name>F_CONFIG</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>ttd</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>ttl</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>namep</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>alias</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>cname</name><operator>.</operator><name>target</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>target</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>cname</name><operator>.</operator><name>is_name_ptr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name>UID_NONE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>cache_hash</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>make_non_terminals</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt></block_content></block></for>
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
  <for>for <control>(<init><expr><name>ds</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>ds</name></name></expr>;</init> <condition><expr><name>ds</name></expr>;</condition> <incr><expr><name>ds</name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cache</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><name>SIZEOF_POINTER_CREC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
	<operator>(</operator><name><name>cache</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ds</name><operator>.</operator><name>keydata</name></name> <operator>=</operator> <call><name>blockdata_alloc</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>digest</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>digestlen</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
      <block>{<block_content>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>F_FORWARD</name> <operator>|</operator> <name>F_IMMORTAL</name> <operator>|</operator> <name>F_DS</name> <operator>|</operator> <name>F_CONFIG</name> <operator>|</operator> <name>F_NAMEP</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>ttd</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>local_ttl</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>namep</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ds</name><operator>.</operator><name>keylen</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>digestlen</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ds</name><operator>.</operator><name>algo</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>algo</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ds</name><operator>.</operator><name>keytag</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>keytag</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ds</name><operator>.</operator><name>digest</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>digest_type</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>class</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>cache_hash</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>make_non_terminals</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
  <comment type="block">/* borrow the packet buffer for a temporary by-address hash */</comment>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>packet_buff_sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>revhashsz</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>packet_buff_sz</name></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>crec</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <comment type="block">/* we overwrote the buffer... */</comment>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>srv_save</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <comment type="block">/* Do host_records in config. */</comment>
  <for>for <control>(<init><expr><name>hr</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>host_records</name></name></expr>;</init> <condition><expr><name>hr</name></expr>;</condition> <incr><expr><name>hr</name> <operator>=</operator> <name><name>hr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>nl</name> <operator>=</operator> <name><name>hr</name><operator>-&gt;</operator><name>names</name></name></expr>;</init> <condition><expr><name>nl</name></expr>;</condition> <incr><expr><name>nl</name> <operator>=</operator> <name><name>nl</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
      <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hr</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HR_4</name><operator>)</operator> <operator>&amp;&amp;</operator>
	    <operator>(</operator><name>cache</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><name>SIZEOF_POINTER_CREC</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>namep</name></name> <operator>=</operator> <name><name>nl</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>ttd</name></name> <operator>=</operator> <name><name>hr</name><operator>-&gt;</operator><name>ttl</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>F_HOSTS</name> <operator>|</operator> <name>F_IMMORTAL</name> <operator>|</operator> <name>F_FORWARD</name> <operator>|</operator> <name>F_REVERSE</name> <operator>|</operator> <name>F_IPV4</name> <operator>|</operator> <name>F_NAMEP</name> <operator>|</operator> <name>F_CONFIG</name></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>add_hosts_entry</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><operator>(</operator>union <name>all_addr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>hr</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>INADDRSZ</name></expr></argument>, <argument><expr><name>SRC_CONFIG</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>crec</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>, <argument><expr><name>revhashsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hr</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HR_6</name><operator>)</operator> <operator>&amp;&amp;</operator>
	    <operator>(</operator><name>cache</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><name>SIZEOF_POINTER_CREC</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>namep</name></name> <operator>=</operator> <name><name>nl</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>ttd</name></name> <operator>=</operator> <name><name>hr</name><operator>-&gt;</operator><name>ttl</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>F_HOSTS</name> <operator>|</operator> <name>F_IMMORTAL</name> <operator>|</operator> <name>F_FORWARD</name> <operator>|</operator> <name>F_REVERSE</name> <operator>|</operator> <name>F_IPV6</name> <operator>|</operator> <name>F_NAMEP</name> <operator>|</operator> <name>F_CONFIG</name></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>add_hosts_entry</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><operator>(</operator>union <name>all_addr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>hr</name><operator>-&gt;</operator><name>addr6</name></name></expr></argument>, <argument><expr><name>IN6ADDRSZ</name></expr></argument>, <argument><expr><name>SRC_CONFIG</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>crec</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>, <argument><expr><name>revhashsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt>
      </block_content>}</block></for></block_content></block></for>
	
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NO_HOSTS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>daemon</name><operator>-&gt;</operator><name>addn_hosts</name></name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>cachesize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cleared cache"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
  <else>else
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NO_HOSTS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>total_size</name> <operator>=</operator> <call><name>read_hostsfile</name><argument_list>(<argument><expr><name>HOSTSFILE</name></expr></argument>, <argument><expr><name>SRC_HOSTS</name></expr></argument>, <argument><expr><name>total_size</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>crec</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>, <argument><expr><name>revhashsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>addn_hosts</name></name> <operator>=</operator> <call><name>expand_filelist</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addn_hosts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>ah</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>addn_hosts</name></name></expr>;</init> <condition><expr><name>ah</name></expr>;</condition> <incr><expr><name>ah</name> <operator>=</operator> <name><name>ah</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ah</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AH_INACTIVE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name>total_size</name> <operator>=</operator> <call><name>read_hostsfile</name><argument_list>(<argument><expr><name><name>ah</name><operator>-&gt;</operator><name>fname</name></name></expr></argument>, <argument><expr><name><name>ah</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>total_size</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>crec</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>, <argument><expr><name>revhashsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
    </block_content>}</block></else></if_stmt>
  
  <comment type="block">/* Make non-terminal records for all locally-define RRs */</comment>
  <expr_stmt><expr><name><name>lrec</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>F_FORWARD</name> <operator>|</operator> <name>F_CONFIG</name> <operator>|</operator> <name>F_NAMEP</name> <operator>|</operator> <name>F_IMMORTAL</name></expr>;</expr_stmt>
  
  <for>for <control>(<init><expr><name>txt</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>txt</name></name></expr>;</init> <condition><expr><name>txt</name></expr>;</condition> <incr><expr><name>txt</name> <operator>=</operator> <name><name>txt</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name><name>lrec</name><operator>.</operator><name>name</name><operator>.</operator><name>namep</name></name> <operator>=</operator> <name><name>txt</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>make_non_terminals</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lrec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

  <for>for <control>(<init><expr><name>naptr</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>naptr</name></name></expr>;</init> <condition><expr><name>naptr</name></expr>;</condition> <incr><expr><name>naptr</name> <operator>=</operator> <name><name>naptr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name><name>lrec</name><operator>.</operator><name>name</name><operator>.</operator><name>namep</name></name> <operator>=</operator> <name><name>naptr</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>make_non_terminals</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lrec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

  <for>for <control>(<init><expr><name>mx</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>mxnames</name></name></expr>;</init> <condition><expr><name>mx</name></expr>;</condition> <incr><expr><name>mx</name> <operator>=</operator> <name><name>mx</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name><name>lrec</name><operator>.</operator><name>name</name><operator>.</operator><name>namep</name></name> <operator>=</operator> <name><name>mx</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>make_non_terminals</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lrec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

  <for>for <control>(<init><expr><name>intr</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>int_names</name></name></expr>;</init> <condition><expr><name>intr</name></expr>;</condition> <incr><expr><name>intr</name> <operator>=</operator> <name><name>intr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name><name>lrec</name><operator>.</operator><name>name</name><operator>.</operator><name>namep</name></name> <operator>=</operator> <name><name>intr</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>make_non_terminals</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lrec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  
  <for>for <control>(<init><expr><name>ptr</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</init> <condition><expr><name>ptr</name></expr>;</condition> <incr><expr><name>ptr</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name><name>lrec</name><operator>.</operator><name>name</name><operator>.</operator><name>namep</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>make_non_terminals</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lrec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_INOTIFY</name></cpp:ifdef>
  <expr_stmt><expr><call><name>set_dynamic_inotify</name><argument_list>(<argument><expr><name>AH_HOSTS</name></expr></argument>, <argument><expr><name>total_size</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>crec</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>, <argument><expr><name>revhashsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
</block_content>}</block></function> 

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP</name></cpp:ifdef>
<function><type><name><name>struct</name> <name>in_addr</name></name></type> <name>a_record_from_hosts</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>crecp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>ret</name></decl>;</decl_stmt>
  
  <comment type="block">/* If no DNS service, cache not initialised. */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>port</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <while>while <condition>(<expr><operator>(</operator><name>crecp</name> <operator>=</operator> <call><name>cache_find_by_name</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>F_IPV4</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_HOSTS</name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name><name>crecp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr4</name></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></while></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"No IPv4 address found for %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><name><name>ret</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cache_unhash_dhcp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>cache</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>up</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>hash_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>cache</name> <operator>=</operator> <name><name>hash_table</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator> <expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>hash_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>cache</name></expr>;</condition> <incr><expr><name>cache</name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>hash_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_DHCP</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>hash_next</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>dhcp_spare</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>dhcp_spare</name> <operator>=</operator> <name>cache</name></expr>;</expr_stmt>
	</block_content>}</block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>hash_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cache_add_dhcp_entry</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prot</name></decl></parameter>,
			  <parameter><decl><type><name><name>union</name> <name>all_addr</name></name> <modifier>*</modifier></type><name>host_address</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>ttd</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>crec</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>fail_crec</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name> <init>= <expr><name>F_IPV4</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>in_hosts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>addrlen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_addr</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>prot</name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>F_IPV6</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>addrlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>in6_addr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>prot</name></expr></argument>, <argument><expr><name>host_address</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <while>while <condition>(<expr><operator>(</operator><name>crec</name> <operator>=</operator> <call><name>cache_find_by_name</name><argument_list>(<argument><expr><name>crec</name></expr></argument>, <argument><expr><name>host_name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>F_CNAME</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* check all addresses associated with name */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>crec</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_HOSTS</name> <operator>|</operator> <name>F_CONFIG</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name><name>crec</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_CNAME</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_WARNING</name></expr></argument>, 
		      <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s is a CNAME, not giving it to the DHCP lease of %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
		      <argument><expr><name>host_name</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	  <if type="elseif">else if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>crec</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>host_address</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>in_hosts</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><name>fail_crec</name> <operator>=</operator> <name>crec</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>crec</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_DHCP</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>cache_scan_free</name><argument_list>(<argument><expr><name>host_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>crec</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>flags</name> <operator>|</operator> <name>F_CNAME</name> <operator>|</operator> <name>F_FORWARD</name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <comment type="block">/* scan_free deletes all addresses associated with name */</comment>
	  <break>break;</break>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  
  <comment type="block">/* if in hosts, don't need DHCP record */</comment>
  <if_stmt><if>if <condition>(<expr><name>in_hosts</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>
  
  <comment type="block">/* Name in hosts, address doesn't match */</comment>
  <if_stmt><if>if <condition>(<expr><name>fail_crec</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>prot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fail_crec</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>MAXDNAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_WARNING</name></expr></argument>, 
		<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"not giving name %s to the DHCP lease of %s because "</literal>
		  <literal type="string">"the name exists in %s with address %s"</literal></expr></argument>)</argument_list></call></expr></argument>, 
		<argument><expr><name>host_name</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>,
		<argument><expr><call><name>record_source</name><argument_list>(<argument><expr><name><name>fail_crec</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>	  
  
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>crec</name> <operator>=</operator> <call><name>cache_find_by_addr</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator>union <name>all_addr</name> <operator>*</operator><operator>)</operator><name>host_address</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>crec</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_NEG</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>F_REVERSE</name></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>cache_scan_free</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator>union <name>all_addr</name> <operator>*</operator><operator>)</operator><name>host_address</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>F_REVERSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>crec</name> <operator>=</operator> <name>dhcp_spare</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>dhcp_spare</name> <operator>=</operator> <name><name>dhcp_spare</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content> <comment type="block">/* need new one */</comment>
    <expr_stmt><expr><name>crec</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><name>SIZEOF_POINTER_CREC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>crec</name></expr>)</condition> <comment type="block">/* malloc may fail */</comment>
    <block>{<block_content>
      <expr_stmt><expr><name><name>crec</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name> <operator>|</operator> <name>F_NAMEP</name> <operator>|</operator> <name>F_DHCP</name> <operator>|</operator> <name>F_FORWARD</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>ttd</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>crec</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>F_IMMORTAL</name></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>crec</name><operator>-&gt;</operator><name>ttd</name></name> <operator>=</operator> <name>ttd</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
      <expr_stmt><expr><name><name>crec</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>*</operator><name>host_address</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>crec</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>namep</name></name> <operator>=</operator> <name>host_name</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>crec</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name>UID_NONE</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>cache_hash</name><argument_list>(<argument><expr><name>crec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>make_non_terminals</name><argument_list>(<argument><expr><name>crec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Called when we put a local or DHCP name into the cache.
   Creates empty cache entries for subnames (ie,
   for three.two.one, for two.one and one), without
   F_IPV4 or F_IPV6 or F_CNAME set. These convert
   NXDOMAIN answers to NoData ones. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>make_non_terminals</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>cache_get_name</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>crecp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>up</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name>F_HOSTS</name> <operator>|</operator> <name>F_CONFIG</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_DHCP</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>F_DHCP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
  <comment type="block">/* First delete any empty entries for our new real name. Note that
     we only delete empty entries deriving from DHCP for a new DHCP-derived
     entry and vice-versa for HOSTS and CONFIG. This ensures that 
     non-terminals from DHCP go when we reload DHCP and 
     for HOSTS/CONFIG when we re-read. */</comment>
  <for>for <control>(<init><expr><name>up</name> <operator>=</operator> <call><name>hash_bucket</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>crecp</name> <operator>=</operator> <operator>*</operator><name>up</name></expr>;</init> <condition><expr><name>crecp</name></expr>;</condition> <incr><expr><name>crecp</name> <operator>=</operator> <name>tmp</name></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>crecp</name><operator>-&gt;</operator><name>hash_next</name></name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_outdated_cname_pointer</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	  <operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_FORWARD</name><operator>)</operator> <operator>&amp;&amp;</operator>
	  <operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>type</name><operator>)</operator> <operator>&amp;&amp;</operator>
	  <operator>!</operator><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_IPV4</name> <operator>|</operator> <name>F_IPV6</name> <operator>|</operator> <name>F_CNAME</name> <operator>|</operator> <name>F_SRV</name> <operator>|</operator> <name>F_DNSKEY</name> <operator>|</operator> <name>F_DS</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> 
	  <call><name>hostname_isequal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>cache_get_name</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name><name>crecp</name><operator>-&gt;</operator><name>hash_next</name></name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP</name></cpp:ifdef>
	  <if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>F_DHCP</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name><name>crecp</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>dhcp_spare</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>dhcp_spare</name> <operator>=</operator> <name>crecp</name></expr>;</expr_stmt>
	    </block_content>}</block></if>
	  <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	  <break>break;</break>
	</block_content>}</block></if>
      <else>else<block type="pseudo"><block_content>
	 <expr_stmt><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>crecp</name><operator>-&gt;</operator><name>hash_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>
     
  <while>while <condition>(<expr><operator>(</operator><name>name</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>name</name><operator>++</operator></expr>;</expr_stmt>

      <comment type="block">/* Look for one existing, don't need another */</comment>
      <for>for <control>(<init><expr><name>crecp</name> <operator>=</operator> <operator>*</operator><call><name>hash_bucket</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>crecp</name></expr>;</condition> <incr><expr><name>crecp</name> <operator>=</operator> <name><name>crecp</name><operator>-&gt;</operator><name>hash_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_outdated_cname_pointer</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	    <operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_FORWARD</name><operator>)</operator> <operator>&amp;&amp;</operator>
	    <operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>type</name><operator>)</operator> <operator>&amp;&amp;</operator>
	    <call><name>hostname_isequal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>cache_get_name</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
      
      <if_stmt><if>if <condition>(<expr><name>crecp</name></expr>)</condition>
	<block>{<block_content>
	  <comment type="block">/* If the new name expires later, transfer that time to
	     empty non-terminal entry. */</comment>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_IMMORTAL</name><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_IMMORTAL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>F_IMMORTAL</name></expr>;</expr_stmt></block_content></block></if>
	      <if type="elseif">else if <condition>(<expr><call><name>difftime</name><argument_list>(<argument><expr><name><name>crecp</name><operator>-&gt;</operator><name>ttd</name></name></expr></argument>, <argument><expr><name><name>source</name><operator>-&gt;</operator><name>ttd</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>crecp</name><operator>-&gt;</operator><name>ttd</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>ttd</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
	  <continue>continue;</continue>
	</block_content>}</block></if></if_stmt>
      
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP</name></cpp:ifdef>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_DHCP</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>dhcp_spare</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>crecp</name> <operator>=</operator> <name>dhcp_spare</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>dhcp_spare</name> <operator>=</operator> <name><name>dhcp_spare</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
      <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>crecp</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><name>SIZEOF_POINTER_CREC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>crecp</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>flags</name></name> <operator>|</operator> <name>F_NAMEP</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>F_IPV4</name> <operator>|</operator> <name>F_IPV6</name> <operator>|</operator> <name>F_CNAME</name> <operator>|</operator> <name>F_SRV</name> <operator>|</operator> <name>F_DNSKEY</name> <operator>|</operator> <name>F_DS</name> <operator>|</operator> <name>F_REVERSE</name><operator>)</operator></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_IMMORTAL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>crecp</name><operator>-&gt;</operator><name>ttd</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>ttd</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  <expr_stmt><expr><name><name>crecp</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>namep</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
	  
	  <expr_stmt><expr><call><name>cache_hash</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_ID</name></cpp:ifndef>
<function><type><name>int</name></type> <name>cache_make_stat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>txt_record</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
  <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>buff</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>bufflen</name> <init>= <expr><literal type="number">60</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>serv</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>serv1</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>buff</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>buff</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>p</name> <operator>=</operator> <name>buff</name></expr>;</expr_stmt>
  
  <switch>switch <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>stat</name></name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>TXT_STAT_CACHESIZE</name></expr>:</case>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buff</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>cachesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TXT_STAT_INSERTS</name></expr>:</case>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buff</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><name>METRIC_DNS_CACHE_INSERTED</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TXT_STAT_EVICTIONS</name></expr>:</case>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buff</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><name>METRIC_DNS_CACHE_LIVE_FREED</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TXT_STAT_MISSES</name></expr>:</case>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buff</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><name>METRIC_DNS_QUERIES_FORWARDED</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TXT_STAT_HITS</name></expr>:</case>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buff</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><name>METRIC_DNS_LOCAL_ANSWERED</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_AUTH</name></cpp:ifdef>
    <case>case <expr><name>TXT_STAT_AUTH</name></expr>:</case>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buff</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><name>METRIC_DNS_AUTH_ANSWERED</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* Pi-hole modification */</comment>
    <case>case <expr><name>TXT_PRIVACYLEVEL</name></expr>:</case>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buff</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>*</operator><name>pihole_privacylevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <comment type="block">/* -------------------- */</comment>

    <case>case <expr><name>TXT_STAT_SERVERS</name></expr>:</case>
      <comment type="block">/* sum counts from different records for same server */</comment>
      <for>for <control>(<init><expr><name>serv</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>servers</name></name></expr>;</init> <condition><expr><name>serv</name></expr>;</condition> <incr><expr><name>serv</name> <operator>=</operator> <name><name>serv</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>serv</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SERV_MARK</name></expr>;</expr_stmt></block_content></block></for>
      
      <for>for <control>(<init><expr><name>serv</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>servers</name></name></expr>;</init> <condition><expr><name>serv</name></expr>;</condition> <incr><expr><name>serv</name> <operator>=</operator> <name><name>serv</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>serv</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SERV_MARK</name><operator>)</operator></expr>)</condition>
	  <block>{<block_content>
	    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lenp</name></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>, <decl><type ref="prev"/><name>newlen</name></decl>, <decl><type ref="prev"/><name>bytes_avail</name></decl>, <decl><type ref="prev"/><name>bytes_needed</name></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>queries</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>failed_queries</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	    <for>for <control>(<init><expr><name>serv1</name> <operator>=</operator> <name>serv</name></expr>;</init> <condition><expr><name>serv1</name></expr>;</condition> <incr><expr><name>serv1</name> <operator>=</operator> <name><name>serv1</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>serv1</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SERV_MARK</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>sockaddr_isequal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>serv</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>serv1</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name><name>serv1</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SERV_MARK</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name>queries</name> <operator>+=</operator> <name><name>serv1</name><operator>-&gt;</operator><name>queries</name></name></expr>;</expr_stmt>
		  <expr_stmt><expr><name>failed_queries</name> <operator>+=</operator> <name><name>serv1</name><operator>-&gt;</operator><name>failed_queries</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt></block_content></block></for>
	    <expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>prettyprint_addr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>serv</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>lenp</name> <operator>=</operator> <name>p</name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* length */</comment>
	    <expr_stmt><expr><name>bytes_avail</name> <operator>=</operator> <name>bufflen</name> <operator>-</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>buff</name> <operator>)</operator></expr>;</expr_stmt>
	    <expr_stmt><expr><name>bytes_needed</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>bytes_avail</name></expr></argument>, <argument><expr><literal type="string">"%s#%d %u %u"</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>queries</name></expr></argument>, <argument><expr><name>failed_queries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><name>bytes_needed</name> <operator>&gt;=</operator> <name>bytes_avail</name></expr>)</condition>
	      <block>{<block_content>
		<comment type="block">/* expand buffer if necessary */</comment>
		<expr_stmt><expr><name>newlen</name> <operator>=</operator> <name>bytes_needed</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>bufflen</name> <operator>-</operator> <name>bytes_avail</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>new</name> <operator>=</operator> <call><name>whine_realloc</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>newlen</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		  <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>p</name> <operator>=</operator> <name>new</name> <operator>+</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>buff</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>lenp</name> <operator>=</operator> <name>p</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>buff</name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>bufflen</name> <operator>=</operator> <name>newlen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>bytes_avail</name> <operator>=</operator>  <name>bufflen</name> <operator>-</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>buff</name> <operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>bytes_needed</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>bytes_avail</name></expr></argument>, <argument><expr><literal type="string">"%s#%d %u %u"</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>queries</name></expr></argument>, <argument><expr><name>failed_queries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      </block_content>}</block></if></if_stmt>
	    <expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>=</operator> <name>bytes_needed</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>bytes_needed</name></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt></block_content></block></for>
      <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>txt</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>buff</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>buff</name></expr>;</expr_stmt>

      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></switch>
  
  <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buff</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>txt</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>buff</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>buff</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* There can be names in the cache containing control chars, don't 
   mess up logging or open security holes. */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>sanitise</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition><block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr>;</init> <condition><expr><operator>*</operator><name>r</name></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isprint</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="string">"&lt;name unprintable&gt;"</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>

  <return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***************** Pi-hole modification *****************/</comment>
<function><type><name>void</name></type> <name>get_dnsmasq_cache_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cache_info</name></name> <modifier>*</modifier></type><name>ci</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ci</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>cache_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>time_t</name></type> <name>now</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>hash_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <for>for <control>(<init><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier><name>cache</name></type> <init>= <expr><name><name>hash_table</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>cache</name></expr>;</condition> <incr><expr><name>cache</name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>hash_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if<condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>ttd</name></name> <operator>&gt;=</operator> <name>now</name> <operator>||</operator> <name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_IMMORTAL</name></expr>)</condition>
      <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_IPV4</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>valid</name><operator>.</operator><name>ipv4</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_IPV6</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>valid</name><operator>.</operator><name>ipv6</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_CNAME</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>valid</name><operator>.</operator><name>cname</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_SRV</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>valid</name><operator>.</operator><name>srv</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
	<if type="elseif">else if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_DS</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>valid</name><operator>.</operator><name>ds</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_DNSKEY</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>valid</name><operator>.</operator><name>dnskey</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<else>else<block type="pseudo"><block_content>
	  <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>valid</name><operator>.</operator><name>other</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_IMMORTAL</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>immortal</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>expired</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for></block_content></block></for>
</block_content>}</block></function>
<comment type="block" format="doxygen">/********************************************************/</comment>

<function><type><name>void</name></type> <name>dump_cache</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>serv</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>serv1</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"time %lu"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cache size %d, %d/%d cache insertions re-used unexpired cache entries."</literal></expr></argument>)</argument_list></call></expr></argument>, 
	    <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>cachesize</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><name>METRIC_DNS_CACHE_LIVE_FREED</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><name>METRIC_DNS_CACHE_INSERTED</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"queries forwarded %u, queries answered locally %u"</literal></expr></argument>)</argument_list></call></expr></argument>, 
	    <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><name>METRIC_DNS_QUERIES_FORWARDED</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><name>METRIC_DNS_LOCAL_ANSWERED</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_STALE_CACHE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"queries answered from stale cache %u"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><name>METRIC_DNS_STALE_ANSWERED</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_AUTH</name></cpp:ifdef>
  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"queries for authoritative zones %u"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><name>METRIC_DNS_AUTH_ANSWERED</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name>blockdata_report</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* sum counts from different records for same server */</comment>
  <for>for <control>(<init><expr><name>serv</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>servers</name></name></expr>;</init> <condition><expr><name>serv</name></expr>;</condition> <incr><expr><name>serv</name> <operator>=</operator> <name><name>serv</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>serv</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SERV_MARK</name></expr>;</expr_stmt></block_content></block></for>
  
  <for>for <control>(<init><expr><name>serv</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>servers</name></name></expr>;</init> <condition><expr><name>serv</name></expr>;</condition> <incr><expr><name>serv</name> <operator>=</operator> <name><name>serv</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>serv</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SERV_MARK</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>queries</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>failed_queries</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nxdomain_replies</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>retrys</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sigma_latency</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>count_latency</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>serv1</name> <operator>=</operator> <name>serv</name></expr>;</init> <condition><expr><name>serv1</name></expr>;</condition> <incr><expr><name>serv1</name> <operator>=</operator> <name><name>serv1</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>serv1</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SERV_MARK</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>sockaddr_isequal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>serv</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>serv1</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name><name>serv1</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SERV_MARK</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>queries</name> <operator>+=</operator> <name><name>serv1</name><operator>-&gt;</operator><name>queries</name></name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>failed_queries</name> <operator>+=</operator> <name><name>serv1</name><operator>-&gt;</operator><name>failed_queries</name></name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>nxdomain_replies</name> <operator>+=</operator> <name><name>serv1</name><operator>-&gt;</operator><name>nxdomain_replies</name></name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>retrys</name> <operator>+=</operator> <name><name>serv1</name><operator>-&gt;</operator><name>retrys</name></name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>sigma_latency</name> <operator>+=</operator> <name><name>serv1</name><operator>-&gt;</operator><name>query_latency</name></name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>count_latency</name><operator>++</operator></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt></block_content></block></for>
	<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>prettyprint_addr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>serv</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"server %s#%d: queries sent %u, retried %u, failed %u, nxdomain replies %u, avg. latency %ums"</literal></expr></argument>)</argument_list></call></expr></argument>,
		  <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>queries</name></expr></argument>, <argument><expr><name>retrys</name></expr></argument>, <argument><expr><name>failed_queries</name></expr></argument>, <argument><expr><name>nxdomain_replies</name></expr></argument>, <argument><expr><name>sigma_latency</name><operator>/</operator><name>count_latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt></block_content></block></for>

  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DEBUG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOG</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>cache</name></decl> ;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Host                           Address                                  Flags      Expires                  Source"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"------------------------------ ---------------------------------------- ---------- ------------------------ ------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
      <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>hash_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	<for>for <control>(<init><expr><name>cache</name> <operator>=</operator> <name><name>hash_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>cache</name></expr>;</condition> <incr><expr><name>cache</name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>hash_next</name></name></expr></incr>)</control>
	  <block>{<block_content>
	    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><literal type="string">" "</literal></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>cache_get_name</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    <expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_REVERSE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="string">"&lt;Root&gt;"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    <expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%-30.30s "</literal></expr></argument>, <argument><expr><call><name>sanitise</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_CNAME</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_outdated_cname_pointer</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>sanitise</name><argument_list>(<argument><expr><call><name>cache_get_cname_target</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	    <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_SRV</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_NEG</name><operator>)</operator></expr>)</condition>
	      <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>targetlen</name> <init>= <expr><name><name>cache</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>srv</name><operator>.</operator><name>targetlen</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name> <init>= <expr><call><name>sprintf</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"%u %u %u "</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>srv</name><operator>.</operator><name>priority</name></name></expr></argument>,
				      <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>srv</name><operator>.</operator><name>weight</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>srv</name><operator>.</operator><name>srvport</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>targetlen</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">40</literal> <operator>-</operator> <name>len</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name>targetlen</name> <operator>=</operator> <literal type="number">40</literal> <operator>-</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>blockdata_retrieve</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>srv</name><operator>.</operator><name>target</name></name></expr></argument>, <argument><expr><name>targetlen</name></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><name>len</name> <operator>+</operator> <name>targetlen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>		
	      </block_content>}</block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
	    <if type="elseif">else if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_DS</name></expr>)</condition>
	      <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_NEG</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"%5u %3u %3u"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ds</name><operator>.</operator><name>keytag</name></name></expr></argument>,
			  <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ds</name><operator>.</operator><name>algo</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ds</name><operator>.</operator><name>digest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      </block_content>}</block></if>
	    <if type="elseif">else if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_DNSKEY</name></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="string">"%5u %3u %3u"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>key</name><operator>.</operator><name>keytag</name></name></expr></argument>,
		      <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>key</name><operator>.</operator><name>algo</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>key</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_NEG</name><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_FORWARD</name><operator>)</operator></expr>)</condition>
	      <block>{<block_content> 
		<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_IPV4</name></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_IPV6</name></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      </block_content>}</block></if></if_stmt>

	    <if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_IPV4</name></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="string">"4"</literal></expr>;</expr_stmt></block_content></block></if>
	    <if type="elseif">else if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_IPV6</name></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="string">"6"</literal></expr>;</expr_stmt></block_content></block></if>
	    <if type="elseif">else if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_CNAME</name></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="string">"C"</literal></expr>;</expr_stmt></block_content></block></if>
	    <if type="elseif">else if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_SRV</name></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="string">"V"</literal></expr>;</expr_stmt></block_content></block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
	    <if type="elseif">else if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_DS</name></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="string">"S"</literal></expr>;</expr_stmt></block_content></block></if>
	    <if type="elseif">else if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_DNSKEY</name></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="string">"K"</literal></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    <else>else<block type="pseudo"><block_content> <comment type="block">/* non-terminal */</comment>
	      <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="string">"!"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	    <expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%-40.40s %s%s%s%s%s%s%s%s%s%s "</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>t</name></expr></argument>,
			 <argument><expr><ternary><condition><expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_FORWARD</name></expr> ?</condition><then> <expr><literal type="string">"F"</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary></expr></argument>,
			 <argument><expr><ternary><condition><expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_REVERSE</name></expr> ?</condition><then> <expr><literal type="string">"R"</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary></expr></argument>,
			 <argument><expr><ternary><condition><expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_IMMORTAL</name></expr> ?</condition><then> <expr><literal type="string">"I"</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary></expr></argument>,
			 <argument><expr><ternary><condition><expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_DHCP</name></expr> ?</condition><then> <expr><literal type="string">"D"</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary></expr></argument>,
			 <argument><expr><ternary><condition><expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_NEG</name></expr> ?</condition><then> <expr><literal type="string">"N"</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary></expr></argument>,
			 <argument><expr><ternary><condition><expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_NXDOMAIN</name></expr> ?</condition><then> <expr><literal type="string">"X"</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary></expr></argument>,
			 <argument><expr><ternary><condition><expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_HOSTS</name></expr> ?</condition><then> <expr><literal type="string">"H"</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary></expr></argument>,
			 <argument><expr><ternary><condition><expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_CONFIG</name></expr> ?</condition><then> <expr><literal type="string">"C"</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary></expr></argument>,
			 <argument><expr><ternary><condition><expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_DNSSECOK</name></expr> ?</condition><then> <expr><literal type="string">"V"</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_BROKEN_RTC</name></cpp:ifdef>
	    <expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%-24lu"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_IMMORTAL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr></then><else>: <expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>(</operator><name><name>cache</name><operator>-&gt;</operator><name>ttd</name></name> <operator>-</operator> <name>now</name><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	    <expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%-24.24s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_IMMORTAL</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><call><name>ctime</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>cache</name><operator>-&gt;</operator><name>ttd</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    <if_stmt><if>if<condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_HOSTS</name> <operator>|</operator> <name>F_CONFIG</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>cache</name><operator>-&gt;</operator><name>uid</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><call><name>record_source</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></for></block_content></block></for>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>record_source</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>hostsfile</name></name> <modifier>*</modifier></type><name>ah</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dyndir</name></name> <modifier>*</modifier></type><name>dd</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <name>SRC_CONFIG</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="string">"config"</literal></expr>;</return></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>index</name> <operator>==</operator> <name>SRC_HOSTS</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>HOSTSFILE</name></expr>;</return></block_content></block></if></if_stmt>

  <for>for <control>(<init><expr><name>ah</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>addn_hosts</name></name></expr>;</init> <condition><expr><name>ah</name></expr>;</condition> <incr><expr><name>ah</name> <operator>=</operator> <name><name>ah</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ah</name><operator>-&gt;</operator><name>index</name></name> <operator>==</operator> <name>index</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name><name>ah</name><operator>-&gt;</operator><name>fname</name></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_INOTIFY</name></cpp:ifdef>
  <comment type="block">/* Dynamic directories contain multiple files */</comment>
  <for>for <control>(<init><expr><name>dd</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dynamic_dirs</name></name></expr>;</init> <condition><expr><name>dd</name></expr>;</condition> <incr><expr><name>dd</name> <operator>=</operator> <name><name>dd</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>ah</name> <operator>=</operator> <name><name>dd</name><operator>-&gt;</operator><name>files</name></name></expr>;</init> <condition><expr><name>ah</name></expr>;</condition> <incr><expr><name>ah</name> <operator>=</operator> <name><name>ah</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><name><name>ah</name><operator>-&gt;</operator><name>index</name></name> <operator>==</operator> <name>index</name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name><name>ah</name><operator>-&gt;</operator><name>fname</name></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><literal type="string">"&lt;unknown&gt;"</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Pi-hole modified</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name>querystr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* strlen("type=xxxxx") */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>types</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>buff</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>bufflen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>typestr</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>typestr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>typestr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>type</name></expr>)</condition>
      <block>{<block_content>
	<expr_stmt><expr><name>types</name> <operator>=</operator> <name><name>typestr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
      </block_content>}</block></if></if_stmt></block_content></block></for>

  <if_stmt><if>if <condition>(<expr><name>desc</name></expr>)</condition>
    <block>{<block_content>
       <expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <comment type="block">/* braces */</comment>
       <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* terminator */</comment>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>buff</name> <operator>||</operator> <name>bufflen</name> <operator>&lt;</operator> <name>len</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>buff</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <expr_stmt><expr><name>buff</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>bufflen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>buff</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>desc</name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name>types</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="string">"%s[%s]"</literal></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="string">"%s[type=%d]"</literal></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name>types</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="string">"&lt;%s&gt;"</literal></expr></argument>, <argument><expr><name>types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="string">"&lt;type=%d&gt;"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  
  <return>return <expr><ternary><condition><expr><name>buff</name></expr> ?</condition><then> <expr><name>buff</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**** Pi-hole modified: removed static and added prototype to dnsmasq.h ****/</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>edestr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ede</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <switch>switch <condition>(<expr><name>ede</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>EDE_OTHER</name></expr>:</case>                       <return>return <expr><literal type="string">"other"</literal></expr>;</return>
    <case>case <expr><name>EDE_USUPDNSKEY</name></expr>:</case>                  <return>return <expr><literal type="string">"unsupported DNSKEY algorithm"</literal></expr>;</return>
    <case>case <expr><name>EDE_USUPDS</name></expr>:</case>                      <return>return <expr><literal type="string">"unsupported DS digest"</literal></expr>;</return>
    <case>case <expr><name>EDE_STALE</name></expr>:</case>                       <return>return <expr><literal type="string">"stale answer"</literal></expr>;</return>
    <case>case <expr><name>EDE_FORGED</name></expr>:</case>                      <return>return <expr><literal type="string">"forged"</literal></expr>;</return>
    <case>case <expr><name>EDE_DNSSEC_IND</name></expr>:</case>                  <return>return <expr><literal type="string">"DNSSEC indeterminate"</literal></expr>;</return>
    <case>case <expr><name>EDE_DNSSEC_BOGUS</name></expr>:</case>                <return>return <expr><literal type="string">"DNSSEC bogus"</literal></expr>;</return>
    <case>case <expr><name>EDE_SIG_EXP</name></expr>:</case>                     <return>return <expr><literal type="string">"DNSSEC signature expired"</literal></expr>;</return>
    <case>case <expr><name>EDE_SIG_NYV</name></expr>:</case>                     <return>return <expr><literal type="string">"DNSSEC sig not yet valid"</literal></expr>;</return>
    <case>case <expr><name>EDE_NO_DNSKEY</name></expr>:</case>                   <return>return <expr><literal type="string">"DNSKEY missing"</literal></expr>;</return>
    <case>case <expr><name>EDE_NO_RRSIG</name></expr>:</case>                    <return>return <expr><literal type="string">"RRSIG missing"</literal></expr>;</return>
    <case>case <expr><name>EDE_NO_ZONEKEY</name></expr>:</case>                  <return>return <expr><literal type="string">"no zone key bit set"</literal></expr>;</return>
    <case>case <expr><name>EDE_NO_NSEC</name></expr>:</case>                     <return>return <expr><literal type="string">"NSEC(3) missing"</literal></expr>;</return>
    <case>case <expr><name>EDE_CACHED_ERR</name></expr>:</case>                  <return>return <expr><literal type="string">"cached error"</literal></expr>;</return>
    <case>case <expr><name>EDE_NOT_READY</name></expr>:</case>                   <return>return <expr><literal type="string">"not ready"</literal></expr>;</return>
    <case>case <expr><name>EDE_BLOCKED</name></expr>:</case>                     <return>return <expr><literal type="string">"blocked"</literal></expr>;</return>
    <case>case <expr><name>EDE_CENSORED</name></expr>:</case>                    <return>return <expr><literal type="string">"censored"</literal></expr>;</return>
    <case>case <expr><name>EDE_FILTERED</name></expr>:</case>                    <return>return <expr><literal type="string">"filtered"</literal></expr>;</return>
    <case>case <expr><name>EDE_PROHIBITED</name></expr>:</case>                  <return>return <expr><literal type="string">"prohibited"</literal></expr>;</return>
    <case>case <expr><name>EDE_STALE_NXD</name></expr>:</case>                   <return>return <expr><literal type="string">"stale NXDOMAIN"</literal></expr>;</return>
    <case>case <expr><name>EDE_NOT_AUTH</name></expr>:</case>                    <return>return <expr><literal type="string">"not authoritative"</literal></expr>;</return>
    <case>case <expr><name>EDE_NOT_SUP</name></expr>:</case>                     <return>return <expr><literal type="string">"not supported"</literal></expr>;</return>
    <case>case <expr><name>EDE_NO_AUTH</name></expr>:</case>                     <return>return <expr><literal type="string">"no reachable authority"</literal></expr>;</return>
    <case>case <expr><name>EDE_NETERR</name></expr>:</case>                      <return>return <expr><literal type="string">"network error"</literal></expr>;</return>
    <case>case <expr><name>EDE_INVALID_DATA</name></expr>:</case>                <return>return <expr><literal type="string">"invalid data"</literal></expr>;</return>
    <default>default:</default>                              <return>return <expr><literal type="string">"unknown"</literal></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**** P-hole modified: Added file and line and serve log_query via macro defined in dnsmasq.h ****/</comment>
<function><type><name>void</name></type> <name>_log_query</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>all_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>source</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dest</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>verb</name> <init>= <expr><literal type="string">"is"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>extra</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>portstring</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="block">/* space for #&lt;portnum&gt; */</comment>

  <expr_stmt><expr><call><name>FTL_hook</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>log_display_id</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOG</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>

  <comment type="block">/* build query type string if requested */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>F_SERVER</name> <operator>|</operator> <name>F_IPSET</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name>type</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>querystr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>F_DNSSECOK</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_EXTRALOG</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>extra</name> <operator>=</operator> <literal type="string">" (DNSSEC signed)"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>sanitise</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>addr</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_KEYTAG</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>log</name><operator>.</operator><name>keytag</name></name></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>log</name><operator>.</operator><name>algo</name></name></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>log</name><operator>.</operator><name>digest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_RCODE</name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>rcode</name> <init>= <expr><name><name>addr</name><operator>-&gt;</operator><name>log</name><operator>.</operator><name>rcode</name></name></expr></init></decl>;</decl_stmt>

	  <if_stmt><if>if <condition>(<expr><name>rcode</name> <operator>==</operator> <name>SERVFAIL</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>dest</name> <operator>=</operator> <literal type="string">"SERVFAIL"</literal></expr>;</expr_stmt></block_content></block></if>
	  <if type="elseif">else if <condition>(<expr><name>rcode</name> <operator>==</operator> <name>REFUSED</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>dest</name> <operator>=</operator> <literal type="string">"REFUSED"</literal></expr>;</expr_stmt></block_content></block></if>
	  <if type="elseif">else if <condition>(<expr><name>rcode</name> <operator>==</operator> <name>NOTIMP</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>dest</name> <operator>=</operator> <literal type="string">"not implemented"</literal></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name>rcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	  <if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>log</name><operator>.</operator><name>ede</name></name> <operator>!=</operator> <name>EDE_UNSET</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>extra</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>extra</name></expr></argument>, <argument><expr><literal type="string">" (EDE: %s)"</literal></expr></argument>, <argument><expr><call><name>edestr</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>log</name><operator>.</operator><name>ede</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>F_IPV4</name> <operator>|</operator> <name>F_IPV6</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><ternary><condition><expr><name>flags</name> <operator>&amp;</operator> <name>F_IPV4</name></expr> ?</condition><then> <expr><name>AF_INET</name></expr> </then><else>: <expr><name>AF_INET6</name></expr></else></ternary></expr></argument>,
		    <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>F_SERVER</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name>NAMESERVER_PORT</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>extra</name> <operator>=</operator> <name>portstring</name></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>portstring</name></expr></argument>, <argument><expr><literal type="string">"#%u"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><name>dest</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_REVERSE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>dest</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_NEG</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_NXDOMAIN</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>dest</name> <operator>=</operator> <literal type="string">"NXDOMAIN"</literal></expr>;</expr_stmt></block_content></block></if>
      <else>else
	<block>{<block_content>      
	  <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_IPV4</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>dest</name> <operator>=</operator> <literal type="string">"NODATA-IPv4"</literal></expr>;</expr_stmt></block_content></block></if>
	  <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_IPV6</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>dest</name> <operator>=</operator> <literal type="string">"NODATA-IPv6"</literal></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><name>dest</name> <operator>=</operator> <literal type="string">"NODATA"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_CNAME</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>dest</name> <operator>=</operator> <literal type="string">"&lt;CNAME&gt;"</literal></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_SRV</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>dest</name> <operator>=</operator> <literal type="string">"&lt;SRV&gt;"</literal></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_RRNAME</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>dest</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    
  <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_CONFIG</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>source</name> <operator>=</operator> <literal type="string">"config"</literal></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_DHCP</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>source</name> <operator>=</operator> <literal type="string">"DHCP"</literal></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_HOSTS</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>source</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_UPSTREAM</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>source</name> <operator>=</operator> <literal type="string">"reply"</literal></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_SECSTAT</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&amp;&amp;</operator> <name><name>addr</name><operator>-&gt;</operator><name>log</name><operator>.</operator><name>ede</name></name> <operator>!=</operator> <name>EDE_UNSET</name> <operator>&amp;&amp;</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_EXTRALOG</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>extra</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>extra</name></expr></argument>, <argument><expr><literal type="string">" (EDE: %s)"</literal></expr></argument>, <argument><expr><call><name>edestr</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>log</name><operator>.</operator><name>ede</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>source</name> <operator>=</operator> <literal type="string">"validation"</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>dest</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_AUTH</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>source</name> <operator>=</operator> <literal type="string">"auth"</literal></expr>;</expr_stmt></block_content></block></if>
   <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_DNSSEC</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>source</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>verb</name> <operator>=</operator> <literal type="string">"to"</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
   <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_SERVER</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>source</name> <operator>=</operator> <literal type="string">"forwarded"</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>verb</name> <operator>=</operator> <literal type="string">"to"</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_QUERY</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>source</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>verb</name> <operator>=</operator> <literal type="string">"from"</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_IPSET</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>source</name> <operator>=</operator> <ternary><condition><expr><name>type</name></expr> ?</condition><then> <expr><literal type="string">"ipset add"</literal></expr> </then><else>: <expr><literal type="string">"nftset add"</literal></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name>dest</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>name</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>verb</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr>;</expr_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_STALE</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>source</name> <operator>=</operator> <literal type="string">"cached-stale"</literal></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>source</name> <operator>=</operator> <literal type="string">"cached"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>name</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"."</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_EXTRALOG</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_NOEXTRA</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%u %s %s %s %s%s"</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>log_display_id</name></name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>verb</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else
	<block>{<block_content>
	   <decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr><call><name>prettyprint_addr</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>log_source_addr</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff2</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	   <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%u %s/%u %s %s %s %s%s"</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>log_display_id</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff2</name></name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>verb</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%s %s %s %s%s"</literal></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>verb</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>
</unit>
