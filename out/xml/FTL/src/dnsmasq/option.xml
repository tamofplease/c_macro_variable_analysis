<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/dnsmasq/option.c"><comment type="block">/* dnsmasq is Copyright (c) 2000-2022 Simon Kelley

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 dated June, 1991, or
   (at your option) version 3 dated 29 June, 2007.
 
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
     
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
*/</comment>

<comment type="block">/* define this to get facilitynames */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSLOG_NAMES</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnsmasq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>

<comment type="block">/* Pi-hole modification */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../log.h"</cpp:file></cpp:include>
<comment type="block" format="doxygen">/************************/</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>mem_recover</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>jmp_buf</name></type> <name>mem_jmp</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>one_file</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hard_opt</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Solaris headers don't have facility names. */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SOLARIS_NETWORK</name></cpp:ifdef>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>c_name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>c_val</name></decl>;</decl_stmt>
}</block>  <decl><name><name>facilitynames</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{ <expr><literal type="string">"kern"</literal></expr>,   <expr><name>LOG_KERN</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"user"</literal></expr>,   <expr><name>LOG_USER</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"mail"</literal></expr>,   <expr><name>LOG_MAIL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"daemon"</literal></expr>, <expr><name>LOG_DAEMON</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"auth"</literal></expr>,   <expr><name>LOG_AUTH</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"syslog"</literal></expr>, <expr><name>LOG_SYSLOG</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"lpr"</literal></expr>,    <expr><name>LOG_LPR</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"news"</literal></expr>,   <expr><name>LOG_NEWS</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"uucp"</literal></expr>,   <expr><name>LOG_UUCP</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"audit"</literal></expr>,  <expr><name>LOG_AUDIT</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"cron"</literal></expr>,   <expr><name>LOG_CRON</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"local0"</literal></expr>, <expr><name>LOG_LOCAL0</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"local1"</literal></expr>, <expr><name>LOG_LOCAL1</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"local2"</literal></expr>, <expr><name>LOG_LOCAL2</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"local3"</literal></expr>, <expr><name>LOG_LOCAL3</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"local4"</literal></expr>, <expr><name>LOG_LOCAL4</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"local5"</literal></expr>, <expr><name>LOG_LOCAL5</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"local6"</literal></expr>, <expr><name>LOG_LOCAL6</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"local7"</literal></expr>, <expr><name>LOG_LOCAL7</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_GETOPT_LONG</name></cpp:ifndef>
<struct>struct <name>myoption</name> <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>has_arg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>flag</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPTSTRING</name></cpp:macro> <cpp:value>"951yZDNLERKzowefnbvhdkqr:m:p:c:l:s:i:t:u:g:a:x:S:C:A:T:H:Q:I:B:F:G:O:M:X:V:U:j:P:J:W:Y:2:4:6:7:8:0:3:"</cpp:value></cpp:define>

<comment type="block">/* options which don't have a one-char version */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_RELOAD</name></cpp:macro>        <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_NO_NAMES</name></cpp:macro>      <cpp:value>257</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_TFTP</name></cpp:macro>          <cpp:value>258</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_SECURE</name></cpp:macro>        <cpp:value>259</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_PREFIX</name></cpp:macro>        <cpp:value>260</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_PTR</name></cpp:macro>           <cpp:value>261</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_BRIDGE</name></cpp:macro>        <cpp:value>262</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_TFTP_MAX</name></cpp:macro>      <cpp:value>263</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_FORCE</name></cpp:macro>         <cpp:value>264</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_NOBLOCK</name></cpp:macro>       <cpp:value>265</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_LOG_OPTS</name></cpp:macro>      <cpp:value>266</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_MAX_LOGS</name></cpp:macro>      <cpp:value>267</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_CIRCUIT</name></cpp:macro>       <cpp:value>268</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_REMOTE</name></cpp:macro>        <cpp:value>269</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_SUBSCR</name></cpp:macro>        <cpp:value>270</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_INTNAME</name></cpp:macro>       <cpp:value>271</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_BANK</name></cpp:macro>          <cpp:value>272</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_DHCP_HOST</name></cpp:macro>     <cpp:value>273</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_APREF</name></cpp:macro>         <cpp:value>274</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_OVERRIDE</name></cpp:macro>      <cpp:value>275</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_TFTPPORTS</name></cpp:macro>     <cpp:value>276</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_REBIND</name></cpp:macro>        <cpp:value>277</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_NOLAST</name></cpp:macro>        <cpp:value>278</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_OPTS</name></cpp:macro>          <cpp:value>279</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_DHCP_OPTS</name></cpp:macro>     <cpp:value>280</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_MATCH</name></cpp:macro>         <cpp:value>281</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_BROADCAST</name></cpp:macro>     <cpp:value>282</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_NEGTTL</name></cpp:macro>        <cpp:value>283</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_ALTPORT</name></cpp:macro>       <cpp:value>284</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_SCRIPTUSR</name></cpp:macro>     <cpp:value>285</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_LOCAL</name></cpp:macro>         <cpp:value>286</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_NAPTR</name></cpp:macro>         <cpp:value>287</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_MINPORT</name></cpp:macro>       <cpp:value>288</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_DHCP_FQDN</name></cpp:macro>     <cpp:value>289</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_CNAME</name></cpp:macro>         <cpp:value>290</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_PXE_PROMT</name></cpp:macro>     <cpp:value>291</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_PXE_SERV</name></cpp:macro>      <cpp:value>292</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_TEST</name></cpp:macro>          <cpp:value>293</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_TAG_IF</name></cpp:macro>        <cpp:value>294</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_PROXY</name></cpp:macro>         <cpp:value>295</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_GEN_NAMES</name></cpp:macro>     <cpp:value>296</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_MAXTTL</name></cpp:macro>        <cpp:value>297</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_NO_REBIND</name></cpp:macro>     <cpp:value>298</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_LOC_REBND</name></cpp:macro>     <cpp:value>299</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_ADD_MAC</name></cpp:macro>       <cpp:value>300</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_DNSSEC</name></cpp:macro>        <cpp:value>301</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_INCR_ADDR</name></cpp:macro>     <cpp:value>302</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_CONNTRACK</name></cpp:macro>     <cpp:value>303</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_FQDN</name></cpp:macro>          <cpp:value>304</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_LUASCRIPT</name></cpp:macro>     <cpp:value>305</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_RA</name></cpp:macro>            <cpp:value>306</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_DUID</name></cpp:macro>          <cpp:value>307</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_HOST_REC</name></cpp:macro>      <cpp:value>308</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_TFTP_LC</name></cpp:macro>       <cpp:value>309</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_RR</name></cpp:macro>            <cpp:value>310</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_CLVERBIND</name></cpp:macro>     <cpp:value>311</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_MAXCTTL</name></cpp:macro>       <cpp:value>312</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_AUTHZONE</name></cpp:macro>      <cpp:value>313</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_AUTHSERV</name></cpp:macro>      <cpp:value>314</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_AUTHTTL</name></cpp:macro>       <cpp:value>315</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_AUTHSOA</name></cpp:macro>       <cpp:value>316</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_AUTHSFS</name></cpp:macro>       <cpp:value>317</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_AUTHPEER</name></cpp:macro>      <cpp:value>318</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_IPSET</name></cpp:macro>         <cpp:value>319</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_SYNTH</name></cpp:macro>         <cpp:value>320</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_RELAY</name></cpp:macro>         <cpp:value>323</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_RA_PARAM</name></cpp:macro>      <cpp:value>324</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_ADD_SBNET</name></cpp:macro>     <cpp:value>325</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_QUIET_DHCP</name></cpp:macro>    <cpp:value>326</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_QUIET_DHCP6</name></cpp:macro>   <cpp:value>327</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_QUIET_RA</name></cpp:macro>      <cpp:value>328</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_SEC_VALID</name></cpp:macro>     <cpp:value>329</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_TRUST_ANCHOR</name></cpp:macro>  <cpp:value>330</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_DNSSEC_DEBUG</name></cpp:macro>  <cpp:value>331</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_REV_SERV</name></cpp:macro>      <cpp:value>332</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_SERVERS_FILE</name></cpp:macro>  <cpp:value>333</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_DNSSEC_CHECK</name></cpp:macro>  <cpp:value>334</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_LOCAL_SERVICE</name></cpp:macro> <cpp:value>335</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_DNSSEC_TIME</name></cpp:macro>   <cpp:value>336</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_LOOP_DETECT</name></cpp:macro>   <cpp:value>337</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_IGNORE_ADDR</name></cpp:macro>   <cpp:value>338</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_MINCTTL</name></cpp:macro>       <cpp:value>339</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_DHCP_INOTIFY</name></cpp:macro>  <cpp:value>340</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_DHOPT_INOTIFY</name></cpp:macro> <cpp:value>341</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_HOST_INOTIFY</name></cpp:macro>  <cpp:value>342</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_DNSSEC_STAMP</name></cpp:macro>  <cpp:value>343</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_TFTP_NO_FAIL</name></cpp:macro>  <cpp:value>344</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_MAXPORT</name></cpp:macro>       <cpp:value>345</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_CPE_ID</name></cpp:macro>        <cpp:value>346</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_SCRIPT_ARP</name></cpp:macro>    <cpp:value>347</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_DHCPTTL</name></cpp:macro>       <cpp:value>348</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_TFTP_MTU</name></cpp:macro>      <cpp:value>349</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_REPLY_DELAY</name></cpp:macro>   <cpp:value>350</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_RAPID_COMMIT</name></cpp:macro>  <cpp:value>351</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_DUMPFILE</name></cpp:macro>      <cpp:value>352</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_DUMPMASK</name></cpp:macro>      <cpp:value>353</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_UBUS</name></cpp:macro>          <cpp:value>354</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_NAME_MATCH</name></cpp:macro>    <cpp:value>355</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_CAA</name></cpp:macro>           <cpp:value>356</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_SHARED_NET</name></cpp:macro>    <cpp:value>357</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_IGNORE_CLID</name></cpp:macro>   <cpp:value>358</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_SINGLE_PORT</name></cpp:macro>   <cpp:value>359</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_SCRIPT_TIME</name></cpp:macro>   <cpp:value>360</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_PXE_VENDOR</name></cpp:macro>    <cpp:value>361</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_DYNHOST</name></cpp:macro>       <cpp:value>362</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_LOG_DEBUG</name></cpp:macro>     <cpp:value>363</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_UMBRELLA</name></cpp:macro>	   <cpp:value>364</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_CMARK_ALST_EN</name></cpp:macro> <cpp:value>365</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_CMARK_ALST</name></cpp:macro>    <cpp:value>366</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_QUIET_TFTP</name></cpp:macro>    <cpp:value>367</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_NFTSET</name></cpp:macro>        <cpp:value>368</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_FILTER_A</name></cpp:macro>      <cpp:value>369</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_FILTER_AAAA</name></cpp:macro>   <cpp:value>370</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_STRIP_SBNET</name></cpp:macro>   <cpp:value>371</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_STRIP_MAC</name></cpp:macro>     <cpp:value>372</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_CONF_OPT</name></cpp:macro>      <cpp:value>373</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_CONF_SCRIPT</name></cpp:macro>   <cpp:value>374</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_RANDPORT_LIM</name></cpp:macro>  <cpp:value>375</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_FAST_RETRY</name></cpp:macro>    <cpp:value>376</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_STALE_CACHE</name></cpp:macro>   <cpp:value>377</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOPT_NORR</name></cpp:macro>          <cpp:value>378</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_GETOPT_LONG</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>option</name></name></type> <name><name>opts</name><index>[]</index></name> <init>=  
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><specifier>static</specifier> <specifier>const</specifier> struct <name>myoption</name> <name><name>opts</name><index>[]</index></name> <operator>=</operator> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <block>{ 
    <expr><block>{ <expr><literal type="string">"version"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'v'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"no-hosts"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'h'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"no-poll"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"help"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'w'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"no-daemon"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'d'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"log-queries"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'q'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"user"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'u'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"group"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'g'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"resolv-file"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'r'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"servers-file"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_SERVERS_FILE</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"mx-host"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'m'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"mx-target"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'t'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"cache-size"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'c'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"port"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'p'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dhcp-leasefile"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'l'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dhcp-lease"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'l'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dhcp-host"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'G'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dhcp-range"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'F'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dhcp-option"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'O'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dhcp-boot"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'M'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"domain"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"domain-suffix"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"interface"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'i'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"listen-address"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'a'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"local-service"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_LOCAL_SERVICE</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"bogus-priv"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'b'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"bogus-nxdomain"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'B'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"ignore-address"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_IGNORE_ADDR</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"selfmx"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'e'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"filterwin2k"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'f'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"filter-A"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_FILTER_A</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"filter-AAAA"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_FILTER_AAAA</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"pid-file"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'x'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"strict-order"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'o'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"server"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'S'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"rev-server"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_REV_SERV</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"local"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_LOCAL</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"address"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'A'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"conf-file"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'C'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"conf-script"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_CONF_SCRIPT</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"no-resolv"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'R'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"expand-hosts"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'E'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"localmx"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'L'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"local-ttl"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'T'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"no-negcache"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'N'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"no-round-robin"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_NORR</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"addn-hosts"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'H'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"hostsdir"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_HOST_INOTIFY</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"query-port"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'Q'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"except-interface"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'I'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"no-dhcp-interface"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'2'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"domain-needed"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'D'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dhcp-lease-max"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'X'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"bind-interfaces"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'z'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"read-ethers"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'Z'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"alias"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'V'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dhcp-vendorclass"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'U'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dhcp-userclass"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'j'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dhcp-ignore"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'J'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"edns-packet-max"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'P'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"keep-in-foreground"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'k'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dhcp-authoritative"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'K'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"srv-host"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'W'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"localise-queries"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'y'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"txt-record"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'Y'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"caa-record"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> , <expr><name>LOPT_CAA</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dns-rr"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_RR</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"enable-dbus"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'1'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"enable-ubus"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_UBUS</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"bootp-dynamic"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'3'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dhcp-mac"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'4'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"no-ping"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'5'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dhcp-script"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'6'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"conf-dir"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'7'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"log-facility"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> ,<expr><literal type="char">'8'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"leasefile-ro"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'9'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"script-on-renewal"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_SCRIPT_TIME</name></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="string">"dns-forward-max"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'0'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"clear-on-reload"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_RELOAD</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dhcp-ignore-names"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_NO_NAMES</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"enable-tftp"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_TFTP</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"tftp-secure"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_SECURE</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"tftp-no-fail"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_TFTP_NO_FAIL</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"tftp-unique-root"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_APREF</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"tftp-root"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_PREFIX</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"tftp-max"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_TFTP_MAX</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"tftp-mtu"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_TFTP_MTU</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"tftp-lowercase"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_TFTP_LC</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"tftp-single-port"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_SINGLE_PORT</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"ptr-record"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_PTR</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"naptr-record"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_NAPTR</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"bridge-interface"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> , <expr><name>LOPT_BRIDGE</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"shared-network"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_SHARED_NET</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dhcp-option-force"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_FORCE</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"tftp-no-blocksize"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_NOBLOCK</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"log-dhcp"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_LOG_OPTS</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"log-async"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_MAX_LOGS</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dhcp-circuitid"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_CIRCUIT</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dhcp-remoteid"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_REMOTE</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dhcp-subscrid"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_SUBSCR</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dhcp-pxe-vendor"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_PXE_VENDOR</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"interface-name"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_INTNAME</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dhcp-hostsfile"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_DHCP_HOST</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dhcp-optsfile"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_DHCP_OPTS</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dhcp-hostsdir"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_DHCP_INOTIFY</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dhcp-optsdir"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_DHOPT_INOTIFY</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dhcp-no-override"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_OVERRIDE</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"tftp-port-range"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_TFTPPORTS</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"stop-dns-rebind"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_REBIND</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"rebind-domain-ok"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_NO_REBIND</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"all-servers"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_NOLAST</name></expr> }</block></expr>, 
    <expr><block>{ <expr><literal type="string">"dhcp-match"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_MATCH</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dhcp-name-match"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_NAME_MATCH</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dhcp-broadcast"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_BROADCAST</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"neg-ttl"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_NEGTTL</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"max-ttl"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_MAXTTL</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"min-cache-ttl"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_MINCTTL</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"max-cache-ttl"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_MAXCTTL</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dhcp-alternate-port"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_ALTPORT</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dhcp-scriptuser"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_SCRIPTUSR</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"min-port"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_MINPORT</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"max-port"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_MAXPORT</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dhcp-fqdn"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_DHCP_FQDN</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"cname"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_CNAME</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"pxe-prompt"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_PXE_PROMT</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"pxe-service"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_PXE_SERV</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"test"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_TEST</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"tag-if"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_TAG_IF</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dhcp-proxy"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_PROXY</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dhcp-generate-names"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_GEN_NAMES</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"rebind-localhost-ok"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,  <expr><name>LOPT_LOC_REBND</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"add-mac"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_ADD_MAC</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"strip-mac"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_STRIP_MAC</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"add-subnet"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_ADD_SBNET</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"strip-subnet"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_STRIP_SBNET</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"add-cpe-id"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> , <expr><name>LOPT_CPE_ID</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"proxy-dnssec"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_DNSSEC</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dhcp-sequential-ip"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,  <expr><name>LOPT_INCR_ADDR</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"conntrack"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_CONNTRACK</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dhcp-client-update"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_FQDN</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dhcp-luascript"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_LUASCRIPT</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"enable-ra"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_RA</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dhcp-duid"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_DUID</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"host-record"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_HOST_REC</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"bind-dynamic"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_CLVERBIND</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"auth-zone"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_AUTHZONE</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"auth-server"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_AUTHSERV</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"auth-ttl"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_AUTHTTL</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"auth-soa"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_AUTHSOA</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"auth-sec-servers"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_AUTHSFS</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"auth-peer"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_AUTHPEER</name></expr> }</block></expr>, 
    <expr><block>{ <expr><literal type="string">"ipset"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_IPSET</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"nftset"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_NFTSET</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"connmark-allowlist-enable"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_CMARK_ALST_EN</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"connmark-allowlist"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_CMARK_ALST</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"synth-domain"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_SYNTH</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dnssec"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_SEC_VALID</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"trust-anchor"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_TRUST_ANCHOR</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dnssec-debug"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_DNSSEC_DEBUG</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dnssec-check-unsigned"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_DNSSEC_CHECK</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dnssec-no-timecheck"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_DNSSEC_TIME</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dnssec-timestamp"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_DNSSEC_STAMP</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dhcp-relay"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_RELAY</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"ra-param"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_RA_PARAM</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"quiet-dhcp"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_QUIET_DHCP</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"quiet-dhcp6"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_QUIET_DHCP6</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"quiet-ra"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_QUIET_RA</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dns-loop-detect"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_LOOP_DETECT</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"script-arp"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_SCRIPT_ARP</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dhcp-ttl"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> , <expr><name>LOPT_DHCPTTL</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dhcp-reply-delay"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_REPLY_DELAY</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dhcp-rapid-commit"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_RAPID_COMMIT</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dumpfile"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_DUMPFILE</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dumpmask"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_DUMPMASK</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dhcp-ignore-clid"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,  <expr><name>LOPT_IGNORE_CLID</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dynamic-host"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_DYNHOST</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"log-debug"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_LOG_DEBUG</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"umbrella"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_UMBRELLA</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"quiet-tftp"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_QUIET_TFTP</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"port-limit"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_RANDPORT_LIM</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"fast-dns-retry"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LOPT_FAST_RETRY</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"use-stale-cache"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> , <expr><name>LOPT_STALE_CACHE</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
  }</block></expr></init></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG_DUP</name></cpp:macro>       <cpp:value>OPT_LAST</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG_ONE</name></cpp:macro>       <cpp:value>OPT_LAST + 1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG_USED_CL</name></cpp:macro>   <cpp:value>OPT_LAST + 2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG_USED_FILE</name></cpp:macro> <cpp:value>OPT_LAST + 3</cpp:value></cpp:define>

<struct><specifier>static</specifier> struct <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>opt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>rept</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>flagdesc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>desc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>arg</name></decl>;</decl_stmt>
}</block> <decl><name><name>usage</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;ipaddr&gt;"</literal></expr>,  <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify local address(es) to listen on."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'A'</literal></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"/&lt;domain&gt;/&lt;ipaddr&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Return ipaddr for all hosts in specified domains."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'b'</literal></expr>, <expr><name>OPT_BOGUSPRIV</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Fake reverse lookups for RFC1918 private address ranges."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'B'</literal></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;ipaddr&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Treat ipaddr as NXDOMAIN (defeats Verisign wildcard)."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>, 
  <expr><block>{ <expr><literal type="char">'c'</literal></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"&lt;integer&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify the size of the cache in entries (defaults to %s)."</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"$"</literal></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'C'</literal></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;path&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify configuration file (defaults to %s)."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>CONFFILE</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'d'</literal></expr>, <expr><name>OPT_DEBUG</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Do NOT fork into the background: run in debug mode."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'D'</literal></expr>, <expr><name>OPT_NODOTS_LOCAL</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Do NOT forward queries with no domain part."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>, 
  <expr><block>{ <expr><literal type="char">'e'</literal></expr>, <expr><name>OPT_SELFMX</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Return self-pointing MX records for local hosts."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'E'</literal></expr>, <expr><name>OPT_EXPAND</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Expand simple names in /etc/hosts with domain-suffix."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'f'</literal></expr>, <expr><name>OPT_FILTER</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Don't forward spurious DNS requests from Windows hosts."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_FILTER_A</name></expr>, <expr><name>OPT_FILTER_A</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Don't include IPv4 addresses in DNS answers."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_FILTER_AAAA</name></expr>, <expr><name>OPT_FILTER_AAAA</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Don't include IPv6 addresses in DNS answers."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'F'</literal></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;ipaddr&gt;,..."</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable DHCP in the range given with lease duration."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'g'</literal></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"&lt;groupname&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Change to this group after startup (defaults to %s)."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>CHGRP</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'G'</literal></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;hostspec&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Set address or hostname for a specified machine."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_DHCP_HOST</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;path&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Read DHCP host specs from file."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_DHCP_OPTS</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;path&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Read DHCP option specs from file."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_DHCP_INOTIFY</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;path&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Read DHCP host specs from a directory."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>, 
  <expr><block>{ <expr><name>LOPT_DHOPT_INOTIFY</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;path&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Read DHCP options from a directory."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>, 
  <expr><block>{ <expr><name>LOPT_TAG_IF</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"tag-expression"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Evaluate conditional tag expression."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'h'</literal></expr>, <expr><name>OPT_NO_HOSTS</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Do NOT load %s file."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>HOSTSFILE</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'H'</literal></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;path&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify a hosts file to be read in addition to %s."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>HOSTSFILE</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_HOST_INOTIFY</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;path&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Read hosts files from a directory."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;interface&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify interface(s) to listen on."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'I'</literal></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;interface&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify interface(s) NOT to listen on."</literal></expr></argument>)</argument_list></call></expr> , <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'j'</literal></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"set:&lt;tag&gt;,&lt;class&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Map DHCP user class to tag."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_CIRCUIT</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"set:&lt;tag&gt;,&lt;circuit&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Map RFC3046 circuit-id to tag."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_REMOTE</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"set:&lt;tag&gt;,&lt;remote&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Map RFC3046 remote-id to tag."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_SUBSCR</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"set:&lt;tag&gt;,&lt;remote&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Map RFC3993 subscriber-id to tag."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_PXE_VENDOR</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;vendor&gt;[,...]"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify vendor class to match for PXE requests."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'J'</literal></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"tag:&lt;tag&gt;..."</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Don't do DHCP for hosts with tag set."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_BROADCAST</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"[=tag:&lt;tag&gt;...]"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Force broadcast replies for hosts with tag set."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>, 
  <expr><block>{ <expr><literal type="char">'k'</literal></expr>, <expr><name>OPT_NO_FORK</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Do NOT fork into the background, do NOT run in debug mode."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'K'</literal></expr>, <expr><name>OPT_AUTHORITATIVE</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Assume we are the only DHCP server on the local network."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'l'</literal></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"&lt;path&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify where to store DHCP leases (defaults to %s)."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LEASEFILE</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'L'</literal></expr>, <expr><name>OPT_LOCALMX</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Return MX records for local hosts."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'m'</literal></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;host_name&gt;,&lt;target&gt;,&lt;pref&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify an MX record."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'M'</literal></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;bootp opts&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify BOOTP options to DHCP server."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'n'</literal></expr>, <expr><name>OPT_NO_POLL</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Do NOT poll %s file, reload only on SIGHUP."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>RESOLVFILE</name></expr> }</block></expr>, 
  <expr><block>{ <expr><literal type="char">'N'</literal></expr>, <expr><name>OPT_NO_NEG</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Do NOT cache failed search results."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_STALE_CACHE</name></expr>, <expr><name>OPT_STALE_CACHE</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Use expired cache data for faster reply."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'o'</literal></expr>, <expr><name>OPT_ORDER</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Use nameservers strictly in the order given in %s."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>RESOLVFILE</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'O'</literal></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;optspec&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify options to be sent to DHCP clients."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_FORCE</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;optspec&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"DHCP option sent even if the client does not request it."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
  <expr><block>{ <expr><literal type="char">'p'</literal></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"&lt;integer&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify port to listen for DNS requests on (defaults to 53)."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'P'</literal></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"&lt;integer&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Maximum supported UDP packet size for EDNS.0 (defaults to %s)."</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"*"</literal></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'q'</literal></expr>, <expr><name>ARG_DUP</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Log DNS queries."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'Q'</literal></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"&lt;integer&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Force the originating port for upstream DNS queries."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_RANDPORT_LIM</name></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"#ports"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Set maximum number of random originating ports for a query."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'R'</literal></expr>, <expr><name>OPT_NO_RESOLV</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Do NOT read resolv.conf."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'r'</literal></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;path&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify path to resolv.conf (defaults to %s)."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>RESOLVFILE</name></expr> }</block></expr>, 
  <expr><block>{ <expr><name>LOPT_SERVERS_FILE</name></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"&lt;path&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify path to file with server= options"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'S'</literal></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"/&lt;domain&gt;/&lt;ipaddr&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify address(es) of upstream servers with optional domains."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_REV_SERV</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;addr&gt;/&lt;prefix&gt;,&lt;ipaddr&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify address of upstream servers for reverse address queries"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_LOCAL</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"/&lt;domain&gt;/"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Never forward queries to specified domains."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'s'</literal></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;domain&gt;[,&lt;range&gt;]"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify the domain to be assigned in DHCP leases."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'t'</literal></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"&lt;host_name&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify default target in an MX record."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'T'</literal></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"&lt;integer&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify time-to-live in seconds for replies from /etc/hosts."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_NEGTTL</name></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"&lt;integer&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify time-to-live in seconds for negative caching."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_MAXTTL</name></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"&lt;integer&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify time-to-live in seconds for maximum TTL to send to clients."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_MAXCTTL</name></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"&lt;integer&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify time-to-live ceiling for cache."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_MINCTTL</name></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"&lt;integer&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify time-to-live floor for cache."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_FAST_RETRY</name></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"&lt;milliseconds&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Retry DNS queries after this many milliseconds."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
  <expr><block>{ <expr><literal type="char">'u'</literal></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"&lt;username&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Change to this user after startup. (defaults to %s)."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>CHUSER</name></expr> }</block></expr>, 
  <expr><block>{ <expr><literal type="char">'U'</literal></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"set:&lt;tag&gt;,&lt;class&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Map DHCP vendor class to tag."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'v'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Display dnsmasq version and copyright information."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'V'</literal></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;ipaddr&gt;,&lt;ipaddr&gt;,&lt;netmask&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Translate IPv4 addresses from upstream servers."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'W'</literal></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;name&gt;,&lt;target&gt;,..."</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify a SRV record."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'w'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Display this message. Use --help dhcp or --help dhcp6 for known DHCP options."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'x'</literal></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"&lt;path&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify path of PID file (defaults to %s)."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>RUNFILE</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'X'</literal></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"&lt;integer&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify maximum number of DHCP leases (defaults to %s)."</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"&amp;"</literal></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'y'</literal></expr>, <expr><name>OPT_LOCALISE</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Answer DNS queries based on the interface a query was sent to."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'Y'</literal></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;name&gt;,&lt;txt&gt;[,&lt;txt]"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify TXT DNS record."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_PTR</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;name&gt;,&lt;target&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify PTR DNS record."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_INTNAME</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;name&gt;,&lt;interface&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Give DNS name to IPv4 address of interface."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'z'</literal></expr>, <expr><name>OPT_NOWILD</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Bind only to interfaces in use."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'Z'</literal></expr>, <expr><name>OPT_ETHERS</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Read DHCP static host information from %s."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>ETHERSFILE</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'1'</literal></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"[=&lt;busname&gt;]"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable the DBus interface for setting upstream servers, etc."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_UBUS</name></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"[=&lt;busname&gt;]"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable the UBus interface."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'2'</literal></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;interface&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Do not provide DHCP on this interface, only provide DNS."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'3'</literal></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"[=tag:&lt;tag&gt;]..."</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable dynamic address allocation for bootp."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'4'</literal></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"set:&lt;tag&gt;,&lt;mac address&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Map MAC address (with wildcards) to option set."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_BRIDGE</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;iface&gt;,&lt;alias&gt;.."</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Treat DHCP requests on aliases as arriving from interface."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_SHARED_NET</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;iface&gt;|&lt;addr&gt;,&lt;addr&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify extra networks sharing a broadcast domain for DHCP"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
  <expr><block>{ <expr><literal type="char">'5'</literal></expr>, <expr><name>OPT_NO_PING</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Disable ICMP echo address checking in the DHCP server."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'6'</literal></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"&lt;path&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Shell script to run on DHCP lease creation and destruction."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_LUASCRIPT</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"path"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Lua script to run on DHCP lease creation and destruction."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_SCRIPTUSR</name></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"&lt;username&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Run lease-change scripts as this user."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_SCRIPT_ARP</name></expr>, <expr><name>OPT_SCRIPT_ARP</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Call dhcp-script with changes to local ARP table."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'7'</literal></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;path&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Read configuration from all the files in this directory."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_CONF_SCRIPT</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;path&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Execute file and read configuration from stdin."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'8'</literal></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"&lt;facility&gt;|&lt;file&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Log to this syslog facility or file. (defaults to DAEMON)"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'9'</literal></expr>, <expr><name>OPT_LEASE_RO</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Do not use leasefile."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="char">'0'</literal></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"&lt;integer&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Maximum number of concurrent DNS queries. (defaults to %s)"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"!"</literal></expr> }</block></expr>, 
  <expr><block>{ <expr><name>LOPT_RELOAD</name></expr>, <expr><name>OPT_RELOAD</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Clear DNS cache when reloading %s."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>RESOLVFILE</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_NO_NAMES</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"[=tag:&lt;tag&gt;]..."</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Ignore hostnames provided by DHCP clients."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_OVERRIDE</name></expr>, <expr><name>OPT_NO_OVERRIDE</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Do NOT reuse filename and server fields for extra DHCP options."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_TFTP</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"[=&lt;intr&gt;[,&lt;intr&gt;]]"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable integrated read-only TFTP server."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_PREFIX</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;dir&gt;[,&lt;iface&gt;]"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Export files by TFTP only from the specified subtree."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_APREF</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"[=ip|mac]"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Add client IP or hardware address to tftp-root."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_SECURE</name></expr>, <expr><name>OPT_TFTP_SECURE</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Allow access only to files owned by the user running dnsmasq."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_TFTP_NO_FAIL</name></expr>, <expr><name>OPT_TFTP_NO_FAIL</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Do not terminate the service if TFTP directories are inaccessible."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_TFTP_MAX</name></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"&lt;integer&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Maximum number of concurrent TFTP transfers (defaults to %s)."</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"#"</literal></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_TFTP_MTU</name></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"&lt;integer&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Maximum MTU to use for TFTP transfers."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_NOBLOCK</name></expr>, <expr><name>OPT_TFTP_NOBLOCK</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Disable the TFTP blocksize extension."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_TFTP_LC</name></expr>, <expr><name>OPT_TFTP_LC</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Convert TFTP filenames to lowercase"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_TFTPPORTS</name></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"&lt;start&gt;,&lt;end&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Ephemeral port range for use by TFTP transfers."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_SINGLE_PORT</name></expr>, <expr><name>OPT_SINGLE_PORT</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Use only one port for TFTP server."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_LOG_OPTS</name></expr>, <expr><name>OPT_LOG_OPTS</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Extra logging for DHCP."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_MAX_LOGS</name></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"[=&lt;integer&gt;]"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable async. logging; optionally set queue length."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_REBIND</name></expr>, <expr><name>OPT_NO_REBIND</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Stop DNS rebinding. Filter private IP ranges when resolving."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_LOC_REBND</name></expr>, <expr><name>OPT_LOCAL_REBIND</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Allow rebinding of 127.0.0.0/8, for RBL servers."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_NO_REBIND</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"/&lt;domain&gt;/"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Inhibit DNS-rebind protection on this domain."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_NOLAST</name></expr>, <expr><name>OPT_ALL_SERVERS</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Always perform DNS queries to all servers."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_MATCH</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"set:&lt;tag&gt;,&lt;optspec&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Set tag if client includes matching option in request."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_NAME_MATCH</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"set:&lt;tag&gt;,&lt;string&gt;[*]"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Set tag if client provides given name."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_ALTPORT</name></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"[=&lt;ports&gt;]"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Use alternative ports for DHCP."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_NAPTR</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;name&gt;,&lt;naptr&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify NAPTR DNS record."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_MINPORT</name></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"&lt;port&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify lowest port available for DNS query transmission."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_MAXPORT</name></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"&lt;port&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify highest port available for DNS query transmission."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_DHCP_FQDN</name></expr>, <expr><name>OPT_DHCP_FQDN</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Use only fully qualified domain names for DHCP clients."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_GEN_NAMES</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"[=tag:&lt;tag&gt;]"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Generate hostnames based on MAC address for nameless clients."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
  <expr><block>{ <expr><name>LOPT_PROXY</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"[=&lt;ipaddr&gt;]..."</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Use these DHCP relays as full proxies."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_RELAY</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;local-addr&gt;,&lt;server&gt;[,&lt;iface&gt;]"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Relay DHCP requests to a remote server"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
  <expr><block>{ <expr><name>LOPT_CNAME</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;alias&gt;,&lt;target&gt;[,&lt;ttl&gt;]"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify alias name for LOCAL DNS name."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_PXE_PROMT</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;prompt&gt;,[&lt;timeout&gt;]"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Prompt to send to PXE clients."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_PXE_SERV</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;service&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Boot service for PXE menu."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_TEST</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Check configuration syntax."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_ADD_MAC</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"[=base64|text]"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Add requestor's MAC address to forwarded DNS queries."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_STRIP_MAC</name></expr>, <expr><name>OPT_STRIP_MAC</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Strip MAC information from queries."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_ADD_SBNET</name></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"&lt;v4 pref&gt;[,&lt;v6 pref&gt;]"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Add specified IP subnet to forwarded DNS queries."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_STRIP_SBNET</name></expr>, <expr><name>OPT_STRIP_ECS</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Strip ECS information from queries."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_CPE_ID</name></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"&lt;text&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Add client identification to forwarded DNS queries."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_DNSSEC</name></expr>, <expr><name>OPT_DNSSEC_PROXY</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Proxy DNSSEC validation results from upstream nameservers."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_INCR_ADDR</name></expr>, <expr><name>OPT_CONSEC_ADDR</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Attempt to allocate sequential IP addresses to DHCP clients."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_IGNORE_CLID</name></expr>, <expr><name>OPT_IGNORE_CLID</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Ignore client identifier option sent by DHCP clients."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_CONNTRACK</name></expr>, <expr><name>OPT_CONNTRACK</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Copy connection-track mark from queries to upstream connections."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_FQDN</name></expr>, <expr><name>OPT_FQDN_UPDATE</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Allow DHCP clients to do their own DDNS updates."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_RA</name></expr>, <expr><name>OPT_RA</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Send router-advertisements for interfaces doing DHCPv6"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_DUID</name></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"&lt;enterprise&gt;,&lt;duid&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify DUID_EN-type DHCPv6 server DUID"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_HOST_REC</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;name&gt;,&lt;address&gt;[,&lt;ttl&gt;]"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify host (A/AAAA and PTR) records"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_DYNHOST</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;name&gt;,[&lt;IPv4&gt;][,&lt;IPv6&gt;],&lt;interface-name&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify host record in interface subnet"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_CAA</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;name&gt;,&lt;flags&gt;,&lt;tag&gt;,&lt;value&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify certification authority authorization record"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,  
  <expr><block>{ <expr><name>LOPT_RR</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;name&gt;,&lt;RR-number&gt;,[&lt;data&gt;]"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify arbitrary DNS resource record"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_CLVERBIND</name></expr>, <expr><name>OPT_CLEVERBIND</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Bind to interfaces in use - check for new interfaces"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_AUTHSERV</name></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"&lt;NS&gt;,&lt;interface&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Export local names to global DNS"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_AUTHZONE</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;domain&gt;,[&lt;subnet&gt;...]"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Domain to export to global DNS"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_AUTHTTL</name></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"&lt;integer&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Set TTL for authoritative replies"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_AUTHSOA</name></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"&lt;serial&gt;[,...]"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Set authoritative zone information"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_AUTHSFS</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;NS&gt;[,&lt;NS&gt;...]"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Secondary authoritative nameservers for forward domains"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_AUTHPEER</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;ipaddr&gt;[,&lt;ipaddr&gt;...]"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Peers which are allowed to do zone transfer"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_IPSET</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"/&lt;domain&gt;[/&lt;domain&gt;...]/&lt;ipset&gt;..."</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify ipsets to which matching domains should be added"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_NFTSET</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"/&lt;domain&gt;[/&lt;domain&gt;...]/&lt;nftset&gt;..."</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify nftables sets to which matching domains should be added"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_CMARK_ALST_EN</name></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"[=&lt;mask&gt;]"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable filtering of DNS queries with connection-track marks."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_CMARK_ALST</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;connmark&gt;[/&lt;mask&gt;][,&lt;pattern&gt;[/&lt;pattern&gt;...]]"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Set allowed DNS patterns for a connection-track mark."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_SYNTH</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;domain&gt;,&lt;range&gt;,[&lt;prefix&gt;]"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify a domain and address range for synthesised names"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_SEC_VALID</name></expr>, <expr><name>OPT_DNSSEC_VALID</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Activate DNSSEC validation"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_TRUST_ANCHOR</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;domain&gt;,[&lt;class&gt;],..."</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specify trust anchor key digest."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_DNSSEC_DEBUG</name></expr>, <expr><name>OPT_DNSSEC_DEBUG</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Disable upstream checking for DNSSEC debugging."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_DNSSEC_CHECK</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Ensure answers without DNSSEC are in unsigned zones."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_DNSSEC_TIME</name></expr>, <expr><name>OPT_DNSSEC_TIME</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Don't check DNSSEC signature timestamps until first cache-reload"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_DNSSEC_STAMP</name></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"&lt;path&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Timestamp file to verify system clock for DNSSEC"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_RA_PARAM</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;iface&gt;,[mtu:&lt;value&gt;|&lt;interface&gt;|off,][&lt;prio&gt;,]&lt;intval&gt;[,&lt;lifetime&gt;]"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Set MTU, priority, resend-interval and router-lifetime"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_QUIET_DHCP</name></expr>, <expr><name>OPT_QUIET_DHCP</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Do not log routine DHCP."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_QUIET_DHCP6</name></expr>, <expr><name>OPT_QUIET_DHCP6</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Do not log routine DHCPv6."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_QUIET_RA</name></expr>, <expr><name>OPT_QUIET_RA</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Do not log RA."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_LOG_DEBUG</name></expr>, <expr><name>OPT_LOG_DEBUG</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Log debugging information."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>, 
  <expr><block>{ <expr><name>LOPT_LOCAL_SERVICE</name></expr>, <expr><name>OPT_LOCAL_SERVICE</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Accept queries only from directly-connected networks."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_LOOP_DETECT</name></expr>, <expr><name>OPT_LOOP_DETECT</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Detect and remove DNS forwarding loops."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_IGNORE_ADDR</name></expr>, <expr><name>ARG_DUP</name></expr>, <expr><literal type="string">"&lt;ipaddr&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Ignore DNS responses containing ipaddr."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>, 
  <expr><block>{ <expr><name>LOPT_DHCPTTL</name></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"&lt;ttl&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Set TTL in DNS responses with DHCP-derived addresses."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>, 
  <expr><block>{ <expr><name>LOPT_REPLY_DELAY</name></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"&lt;integer&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Delay DHCP replies for at least number of seconds."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_RAPID_COMMIT</name></expr>, <expr><name>OPT_RAPID_COMMIT</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables DHCPv4 Rapid Commit option."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_DUMPFILE</name></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"&lt;path&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Path to debug packet dump file"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_DUMPMASK</name></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"&lt;hex&gt;"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Mask which packets to dump"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_SCRIPT_TIME</name></expr>, <expr><name>OPT_LEASE_RENEW</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Call dhcp-script when lease expiry changes."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_UMBRELLA</name></expr>, <expr><name>ARG_ONE</name></expr>, <expr><literal type="string">"[=&lt;optspec&gt;]"</literal></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Send Cisco Umbrella identifiers including remote IP."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_QUIET_TFTP</name></expr>, <expr><name>OPT_QUIET_TFTP</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Do not log routine TFTP."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LOPT_NORR</name></expr>, <expr><name>OPT_NORR</name></expr>, <expr><name>NULL</name></expr>, <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Suppress round-robin ordering of DNS records."</literal></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct> 

<comment type="block">/* We hide metacharacters in quoted strings by mapping them into the ASCII control
   character space. Note that the \0, \t \b \r \033 and \n characters are carefully placed in the
   following sequence so that they map to themselves: it is therefore possible to call
   unhide_metas repeatedly on string without breaking things.
   The transformation gets undone by opt_canonicalise, atoi_check and opt_string_alloc, and a 
   couple of other places. 
   Note that space is included here so that
   --dhcp-option=3, string
   has five characters, whilst
   --dhcp-option=3," string"
   has six.
*/</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>meta</name><index>[]</index></name> <init>= <expr><literal type="string">"\000123456 \b\t\n78\r90abcdefABCDE\033F:,."</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>char</name></type> <name>hide_meta</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>meta</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name><name>meta</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><operator>(</operator><name>char</name><operator>)</operator><name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
  
  <return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name></type> <name>unhide_meta</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>cr</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>c</name> <init>= <expr><name>cr</name></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>meta</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>cr</name> <operator>=</operator> <name><name>meta</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <return>return <expr><name>cr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unhide_metas</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>cp</name></expr>)</condition><block type="pseudo"><block_content>
    <for>for<control>(<init>;</init> <condition><expr><operator>*</operator><name>cp</name></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <call><name>unhide_meta</name><argument_list>(<argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>opt_malloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>mem_recover</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name>mem_jmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>safe_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>opt_string_alloc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>cp</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      
      <comment type="block">/* restore hidden metachars */</comment>
      <expr_stmt><expr><call><name>unhide_metas</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* find next comma, split string with zero and eliminate spaces.
   return start of string following comma */</comment>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>split_chr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>comma</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>comma</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><name>p</name> <operator>=</operator> <name>comma</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>comma</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
  
  <for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>comma</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>comma</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
 
  <for>for <control>(<init>;</init> <condition><expr><operator>(</operator><name>p</name> <operator>&gt;=</operator> <name>s</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>p</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
    
  <return>return <expr><name>comma</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>split</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>split_chr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>canonicalise_opt</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nomem</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>opt_malloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* Heap-allocated empty string */</comment>

  <expr_stmt><expr><call><name>unhide_metas</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>canonicalise</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nomem</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name>nomem</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>mem_recover</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name>mem_jmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not get memory"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>numeric_check</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>a</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>unhide_metas</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>a</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
     <if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>p</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <operator>*</operator><name>p</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
       <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>atoi_check</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>numeric_check</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>strtoul_check</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>u32</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>x</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>numeric_check</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>||</operator> <name>x</name> <operator>&gt;</operator> <name>UINT32_MAX</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <operator>(</operator><name>u32</name><operator>)</operator><name>x</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>atoi_check16</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>atoi_check</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
      <operator>*</operator><name><name>res</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator>
      <operator>*</operator><name>res</name></expr></argument> &gt;</argument_list></name> <literal type="number">0xffff</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>int</name></type> <name>atoi_check8</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>atoi_check</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
      <operator>*</operator><name><name>res</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator>
      <operator>*</operator><name>res</name></expr></argument> &gt;</argument_list></name> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_ID</name></cpp:ifndef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>add_txt</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>txt_record</name></name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>txt_record</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>txt</name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>txt</name></name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>txt</name></name><operator>)</operator> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>txt</name></name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>txt</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>stat</name></name> <operator>=</operator> <name>stat</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>txt</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>txt</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>class</name></name> <operator>=</operator> <name>C_CHAOS</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

  <struct>struct <block>{
    <decl_stmt><decl><type><name>char</name></type> <name>handle</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
  }</block> <decl><name><name>tab</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><literal type="char">'$'</literal></expr>, <expr><name>CACHESIZ</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="char">'*'</literal></expr>, <expr><name>EDNS_PKTSZ</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="char">'&amp;'</literal></expr>, <expr><name>MAXLEASES</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="char">'!'</literal></expr>, <expr><name>FTABSIZ</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="char">'#'</literal></expr>, <expr><name>TFTP_MAX_CONNECTIONS</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="char">'\0'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
  }</block></expr></init></decl>;</struct>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Usage: dnsmasq [options]\n\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_GETOPT_LONG</name></cpp:ifndef>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Use short options only on the command line.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Valid options are:\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>usage</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>opt</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><name><name>usage</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flagdesc</name></expr></init></decl>;</decl_stmt> 
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>eq</name> <init>= <expr><literal type="string">"="</literal></expr></init></decl>;</decl_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name> <operator>||</operator> <operator>*</operator><name>desc</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>eq</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>desc</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <for>for <control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>opts</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><name><name>opts</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>==</operator> <name><name>usage</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>opt</name></expr>)</condition><block type="pseudo"><block_content>
	  <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
      <if_stmt><if>if <condition>(<expr><name><name>usage</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>opt</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="string">"-%c, "</literal></expr></argument>, <argument><expr><name><name>usage</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="string">"    "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
      
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buff</name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"--%s%s%s"</literal></expr></argument>, <argument><expr><name><name>opts</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>eq</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-55.55s"</literal></expr></argument>, <argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	     
      <if_stmt><if>if <condition>(<expr><name><name>usage</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>arg</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>safe_strncpy</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name><name>usage</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>arg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>tab</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>handle</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><name><name>tab</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>handle</name> <operator>==</operator> <operator>*</operator><operator>(</operator><name><name>usage</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>arg</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>tab</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
	</block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name><name>usage</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>desc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ret_err</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { strcpy(errstr, (x)); return 0; } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ret_err_free</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { strcpy(errstr, (x)); free((m)); return 0; } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>goto_err</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { strcpy(errstr, (x)); goto on_error; } while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>parse_mysockaddr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>mysockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_addr</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad address"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
   
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>parse_server</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>server_details</name></name> <modifier>*</modifier></type><name>sdetails</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name><name>sdetails</name><operator>-&gt;</operator><name>serv_port</name></name> <operator>=</operator> <name>NAMESERVER_PORT</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>portno</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ecode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name><name>sdetails</name><operator>-&gt;</operator><name>interface</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sdetails</name><operator>-&gt;</operator><name>addr_type</name></name> <operator>=</operator> <name>AF_UNSPEC</name></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"#"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>sdetails</name><operator>-&gt;</operator><name>flags</name></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><operator>*</operator><name><name>sdetails</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SERV_USE_RESOLV</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>sdetails</name><operator>-&gt;</operator><name>addr_type</name></name> <operator>=</operator> <name>AF_LOCAL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sdetails</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sdetails</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <call><name>split_chr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <comment type="block">/* is there a source. */</comment>
      <operator>(</operator><name>portno</name> <operator>=</operator> <call><name>split_chr</name><argument_list>(<argument><expr><name><name>sdetails</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
      <operator>!</operator><call><name>atoi_check16</name><argument_list>(<argument><expr><name>portno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sdetails</name><operator>-&gt;</operator><name>source_port</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad port"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>portno</name> <operator>=</operator> <call><name>split_chr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <comment type="block">/* is there a port no. */</comment>
      <operator>!</operator><call><name>atoi_check16</name><argument_list>(<argument><expr><name>portno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sdetails</name><operator>-&gt;</operator><name>serv_port</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad port"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><name><name>sdetails</name><operator>-&gt;</operator><name>scope_id</name></name> <operator>=</operator> <call><name>split_chr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>sdetails</name><operator>-&gt;</operator><name>source</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>sdetails</name><operator>-&gt;</operator><name>interface_opt</name></name> <operator>=</operator> <call><name>split_chr</name><argument_list>(<argument><expr><name><name>sdetails</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>sdetails</name><operator>-&gt;</operator><name>interface_opt</name></name></expr>)</condition>
      <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_BINDTODEVICE</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><call><name>safe_strncpy</name><argument_list>(<argument><expr><name><name>sdetails</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>, <argument><expr><name><name>sdetails</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>IF_NAMESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sdetails</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <name><name>sdetails</name><operator>-&gt;</operator><name>interface_opt</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"interface binding not supported"</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sdetails</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_addr</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>sdetails</name><operator>-&gt;</operator><name>addr_type</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sdetails</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>sdetails</name><operator>-&gt;</operator><name>addr_type</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt></block_content></block></if>
  <else>else 
    <block>{<block_content>
      <comment type="block">/* if the argument is neither an IPv4 not an IPv6 address, it might be a
	 hostname and we should try to resolve it to a suitable address. */</comment>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* The AI_ADDRCONFIG flag ensures that then IPv4 addresses are returned in
         the result only if the local system has at least one IPv4 address
         configured, and IPv6 addresses are returned only if the local system
         has at least one IPv6 address configured. The loopback address is not
         considered for this case as valid as a configured address. This flag is
         useful on, for example, IPv4-only systems, to ensure that getaddrinfo()
         does not return IPv6 socket addresses that would always fail in
         subsequent connect() or bind() attempts. */</comment>
      <expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <name>AI_ADDRCONFIG</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_IDN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>AI_IDN</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <comment type="block">/* If the AI_IDN flag is specified and we have glibc 2.3.4 or newer, then
         the node name given in node is converted to IDN format if necessary.
         The source encoding is that of the current locale. */</comment>
      <expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>|=</operator> <name>AI_IDN</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <comment type="block">/* The value AF_UNSPEC indicates that getaddrinfo() should return socket
         addresses for any address family (either IPv4 or IPv6, for example)
         that can be used with node &lt;arg&gt; and service "domain". */</comment>
      <expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_UNSPEC</name></expr>;</expr_stmt>

      <comment type="block">/* Get addresses suitable for sending datagrams. We assume that we can use the
	 same addresses for TCP connections. Settting this to zero gets each address
	 threes times, for SOCK_STREAM, SOCK_RAW and SOCK_DGRAM, which is not useful. */</comment>
      <expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_DGRAM</name></expr>;</expr_stmt>

      <comment type="block">/* Get address associated with this hostname */</comment>
      <expr_stmt><expr><name>ecode</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sdetails</name><operator>-&gt;</operator><name>hostinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>ecode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
	  <comment type="block">/* The getaddrinfo() function allocated and initialized a linked list of
	     addrinfo structures, one for each network address that matches node
	     and service, subject to the restrictions imposed by our &lt;hints&gt;
	     above, and returns a pointer to the start of the list in &lt;hostinfo&gt;.
	     The items in the linked list are linked by the &lt;ai_next&gt; field. */</comment>
	  <expr_stmt><expr><name><name>sdetails</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>sdetails</name><operator>-&gt;</operator><name>resolved</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	  <return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <comment type="block">/* Lookup failed, return human readable error string */</comment>
	  <if_stmt><if>if <condition>(<expr><name>ecode</name> <operator>==</operator> <name>EAI_AGAIN</name></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Cannot resolve server name"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <return>return <expr><call><name>_</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>gai_strerror</name><argument_list>(<argument><expr><name>ecode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
	</block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  
  <expr_stmt><expr><name><name>sdetails</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>parse_server_addr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>server_details</name></name> <modifier>*</modifier></type><name>sdetails</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>sdetails</name><operator>-&gt;</operator><name>addr_type</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>sdetails</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>sdetails</name><operator>-&gt;</operator><name>serv_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sdetails</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>=</operator> <name><name>sdetails</name><operator>-&gt;</operator><name>source_addr</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SOCKADDR_SA_LEN</name></cpp:ifdef>
      <expr_stmt><expr><name><name>source_addr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_len</name></name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <expr_stmt><expr><name><name>sdetails</name><operator>-&gt;</operator><name>source_addr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name>INADDR_ANY</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sdetails</name><operator>-&gt;</operator><name>source_addr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>query_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>sdetails</name><operator>-&gt;</operator><name>source</name></name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name><name>sdetails</name><operator>-&gt;</operator><name>flags</name></name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><operator>*</operator><name><name>sdetails</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SERV_HAS_SOURCE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  <expr_stmt><expr><name><name>sdetails</name><operator>-&gt;</operator><name>source_addr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>sdetails</name><operator>-&gt;</operator><name>source_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name><name>sdetails</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sdetails</name><operator>-&gt;</operator><name>source_addr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_addr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name><name>sdetails</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sdetails</name><operator>-&gt;</operator><name>source_addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name><name>sdetails</name><operator>-&gt;</operator><name>source_addr</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
		  <comment type="block">/* When resolving a server IP by hostname, we can simply skip mismatching
		     server / source IP pairs. Otherwise, when an IP address is given directly,
		     this is a fatal error. */</comment>
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sdetails</name><operator>-&gt;</operator><name>resolved</name></name></expr>)</condition><block type="pseudo"><block_content>
		    <return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot use IPv4 server address with IPv6 source address"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if>
	      <else>else
		<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_BINDTODEVICE</name></expr></argument>)</argument_list></call></expr></cpp:if>
		  <if_stmt><if>if <condition>(<expr><name><name>sdetails</name><operator>-&gt;</operator><name>interface_opt</name></name></expr>)</condition><block type="pseudo"><block_content>
		    <return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"interface can only be specified once"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

		  <expr_stmt><expr><name><name>sdetails</name><operator>-&gt;</operator><name>source_addr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name>INADDR_ANY</name></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>safe_strncpy</name><argument_list>(<argument><expr><name><name>sdetails</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>, <argument><expr><name><name>sdetails</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>IF_NAMESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		  <return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"interface binding not supported"</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></else></if_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>sdetails</name><operator>-&gt;</operator><name>addr_type</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>sdetails</name><operator>-&gt;</operator><name>scope_id</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>sdetails</name><operator>-&gt;</operator><name>scope_index</name></name> <operator>=</operator> <call><name>if_nametoindex</name><argument_list>(<argument><expr><name><name>sdetails</name><operator>-&gt;</operator><name>scope_id</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad interface name"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

      <expr_stmt><expr><name><name>sdetails</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>sdetails</name><operator>-&gt;</operator><name>serv_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sdetails</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_scope_id</name></name> <operator>=</operator> <name><name>sdetails</name><operator>-&gt;</operator><name>scope_index</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sdetails</name><operator>-&gt;</operator><name>source_addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name> <operator>=</operator> <name>in6addr_any</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sdetails</name><operator>-&gt;</operator><name>source_addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>query_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sdetails</name><operator>-&gt;</operator><name>source_addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_scope_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sdetails</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>=</operator> <name><name>sdetails</name><operator>-&gt;</operator><name>source_addr</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sdetails</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_flowinfo</name></name> <operator>=</operator> <name><name>sdetails</name><operator>-&gt;</operator><name>source_addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_flowinfo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SOCKADDR_SA_LEN</name></cpp:ifdef>
      <expr_stmt><expr><name><name>sdetails</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_len</name></name> <operator>=</operator> <name><name>sdetails</name><operator>-&gt;</operator><name>source_addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>in6</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <if_stmt><if>if <condition>(<expr><name><name>sdetails</name><operator>-&gt;</operator><name>source</name></name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name><name>sdetails</name><operator>-&gt;</operator><name>flags</name></name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><operator>*</operator><name><name>sdetails</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SERV_HAS_SOURCE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  <expr_stmt><expr><name><name>sdetails</name><operator>-&gt;</operator><name>source_addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>sdetails</name><operator>-&gt;</operator><name>source_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name><name>sdetails</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sdetails</name><operator>-&gt;</operator><name>source_addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name><name>sdetails</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sdetails</name><operator>-&gt;</operator><name>source_addr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_addr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name><name>sdetails</name><operator>-&gt;</operator><name>source_addr</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
		  <comment type="block">/* When resolving a server IP by hostname, we can simply skip mismatching
		     server / source IP pairs. Otherwise, when an IP address is given directly,
		     this is a fatal error. */</comment>
		  <if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sdetails</name><operator>-&gt;</operator><name>resolved</name></name></expr>)</condition><block type="pseudo"><block_content>
		    <return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot use IPv6 server address with IPv4 source address"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if>
	      <else>else
		<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_BINDTODEVICE</name></expr></argument>)</argument_list></call></expr></cpp:if>
		  <if_stmt><if>if <condition>(<expr><name><name>sdetails</name><operator>-&gt;</operator><name>interface_opt</name></name></expr>)</condition><block type="pseudo"><block_content>
		  <return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"interface can only be specified once"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

		  <expr_stmt><expr><name><name>sdetails</name><operator>-&gt;</operator><name>source_addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name> <operator>=</operator> <name>in6addr_any</name></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>safe_strncpy</name><argument_list>(<argument><expr><name><name>sdetails</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>, <argument><expr><name><name>sdetails</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>IF_NAMESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		  <return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"interface binding not supported"</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></else></if_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>sdetails</name><operator>-&gt;</operator><name>addr_type</name></name> <operator>!=</operator> <name>AF_LOCAL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad address"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>parse_server_next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>server_details</name></name> <modifier>*</modifier></type><name>sdetails</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Looping over resolved addresses? */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>sdetails</name><operator>-&gt;</operator><name>hostinfo</name></name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Get address type */</comment>
      <expr_stmt><expr><name><name>sdetails</name><operator>-&gt;</operator><name>addr_type</name></name> <operator>=</operator> <name><name>sdetails</name><operator>-&gt;</operator><name>hostinfo</name><operator>-&gt;</operator><name>ai_family</name></name></expr>;</expr_stmt>

      <comment type="block">/* Get address */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>sdetails</name><operator>-&gt;</operator><name>addr_type</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sdetails</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_addr</name></name></expr></argument>,
		<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator> <name><name>sdetails</name><operator>-&gt;</operator><name>hostinfo</name><operator>-&gt;</operator><name>ai_addr</name></name><operator>)</operator><operator>-&gt;</operator><name>sin_addr</name></expr></argument>,
		<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sdetails</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_addr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name><name>sdetails</name><operator>-&gt;</operator><name>addr_type</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sdetails</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>,
		<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator> <name><name>sdetails</name><operator>-&gt;</operator><name>hostinfo</name><operator>-&gt;</operator><name>ai_addr</name></name><operator>)</operator><operator>-&gt;</operator><name>sin6_addr</name></expr></argument>,
		<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sdetails</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <comment type="block">/* Iterate to the next available address */</comment>
      <expr_stmt><expr><name><name>sdetails</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <name><name>sdetails</name><operator>-&gt;</operator><name>hostinfo</name><operator>-&gt;</operator><name>ai_next</name></name> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sdetails</name><operator>-&gt;</operator><name>hostinfo</name></name> <operator>=</operator> <name><name>sdetails</name><operator>-&gt;</operator><name>hostinfo</name><operator>-&gt;</operator><name>ai_next</name></name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>sdetails</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* When using an IP address, we return the address only once */</comment>
      <expr_stmt><expr><name><name>sdetails</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  <comment type="block">/* Stop iterating here, we used all available addresses */</comment>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>domain_rev4</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>from_file</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>server</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name> <modifier>*</modifier></type><name>addr4</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>msize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u16</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>domain</name><index>[<expr><literal type="number">29</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="block">/* strlen("xxx.yyy.zzz.ttt.in-addr.arpa")+1 */</comment>
  <decl_stmt><decl><type><name><name>union</name> <name>mysockaddr</name></name></type> <name>serv_addr</name></decl>, <decl><type ref="prev"/><name>source_addr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>interface</name><index>[<expr><name>IF_NAMESIZE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>rem</name></decl>, <decl><type ref="prev"/><name>addrbytes</name></decl>, <decl><type ref="prev"/><name>addrbits</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>server_details</name></name></type> <name>sdetails</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>sdetails</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <operator>&amp;</operator><name>serv_addr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sdetails</name><operator>.</operator><name>source_addr</name></name> <operator>=</operator> <operator>&amp;</operator><name>source_addr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sdetails</name><operator>.</operator><name>interface</name></name> <operator>=</operator> <name>interface</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sdetails</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <operator>&amp;</operator><name>flags</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>server</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>SERV_LITERAL_ADDRESS</name></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><name>string</name> <operator>=</operator> <call><name>parse_server</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sdetails</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>string</name></expr>;</return></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>from_file</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SERV_FROM_FILE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
 
  <expr_stmt><expr><name>rem</name> <operator>=</operator> <name>size</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>addrbytes</name> <operator>=</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>size</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>addrbits</name> <operator>=</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>size</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">32</literal> <operator>||</operator> <name>size</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad IPv4 prefix length"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  
  <comment type="block">/* Zero out last address bits according to CIDR mask */</comment>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>u8</name> <operator>*</operator><operator>)</operator><name>addr4</name><operator>)</operator><index>[<expr><literal type="number">3</literal><operator>-</operator><name>addrbytes</name></expr>]</index> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>addrbits</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  
  <expr_stmt><expr><name>size</name> <operator>=</operator> <name>size</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x7</literal></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>rem</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>rem</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>domain</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>string</name> <operator>=</operator> <name>domain</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>msize</name> <operator>=</operator> <name>size</name><operator>/</operator><literal type="number">8</literal></expr>;</expr_stmt>
      
      <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>rem</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>msize</name><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>msize</name></expr></else></ternary></expr>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control>
	<block>{<block_content> 
	  <decl_stmt><decl><type><name>int</name></type> <name>dig</name> <init>= <expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>addr4</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index></expr></init></decl>;</decl_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name>msize</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>dig</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  
	  <expr_stmt><expr><name>string</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="string">"%d."</literal></expr></argument>, <argument><expr><name>dig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
      
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="string">"in-addr.arpa"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SERV_LITERAL_ADDRESS</name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>add_update_server</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>serv_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>source_addr</name></expr></argument>, <argument><expr><name>interface</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <return>return  <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"error"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <while>while <condition>(<expr><call><name>parse_server_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sdetails</name></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>string</name> <operator>=</operator> <call><name>parse_server_addr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sdetails</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>string</name></expr>;</return></block_content></block></if></if_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>add_update_server</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>serv_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>source_addr</name></expr></argument>, <argument><expr><name>interface</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return  <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"error"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	    </block_content>}</block></while>

	  <if_stmt><if>if <condition>(<expr><name><name>sdetails</name><operator>.</operator><name>resolved</name></name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name><name>sdetails</name><operator>.</operator><name>hostinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
  
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>domain_rev6</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>from_file</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>server</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr6</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>msize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u16</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>domain</name><index>[<expr><literal type="number">73</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="block">/* strlen("32*&lt;n.&gt;ip6.arpa")+1 */</comment>
  <decl_stmt><decl><type><name><name>union</name> <name>mysockaddr</name></name></type> <name>serv_addr</name></decl>, <decl><type ref="prev"/><name>source_addr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>interface</name><index>[<expr><name>IF_NAMESIZE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>rem</name></decl>, <decl><type ref="prev"/><name>addrbytes</name></decl>, <decl><type ref="prev"/><name>addrbits</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>server_details</name></name></type> <name>sdetails</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>sdetails</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <operator>&amp;</operator><name>serv_addr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sdetails</name><operator>.</operator><name>source_addr</name></name> <operator>=</operator> <operator>&amp;</operator><name>source_addr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sdetails</name><operator>.</operator><name>interface</name></name> <operator>=</operator> <name>interface</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sdetails</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <operator>&amp;</operator><name>flags</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>server</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>SERV_LITERAL_ADDRESS</name></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><name>string</name> <operator>=</operator> <call><name>parse_server</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sdetails</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>string</name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>from_file</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SERV_FROM_FILE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><name>rem</name> <operator>=</operator> <name>size</name> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>addrbytes</name> <operator>=</operator> <operator>(</operator><literal type="number">128</literal> <operator>-</operator> <name>size</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>addrbits</name> <operator>=</operator> <operator>(</operator><literal type="number">128</literal> <operator>-</operator> <name>size</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">128</literal> <operator>||</operator> <name>size</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad IPv6 prefix length"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  
  <comment type="block">/* Zero out last address bits according to CIDR mask */</comment>
  <expr_stmt><expr><name><name>addr6</name><operator>-&gt;</operator><name>s6_addr</name><index>[<expr><literal type="number">15</literal><operator>-</operator><name>addrbytes</name></expr>]</index></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>addrbits</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  
  <expr_stmt><expr><name>size</name> <operator>=</operator> <name>size</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x3</literal></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>rem</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">4</literal> <operator>-</operator> <name>rem</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>domain</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>string</name> <operator>=</operator> <name>domain</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>msize</name> <operator>=</operator> <name>size</name><operator>/</operator><literal type="number">4</literal></expr>;</expr_stmt>
  
      <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>rem</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>msize</name><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>msize</name></expr></else></ternary></expr>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control>
	<block>{<block_content> 
	  <decl_stmt><decl><type><name>int</name></type> <name>dig</name> <init>= <expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>addr6</name><operator>)</operator><index>[<expr><name>j</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>]</index></expr></init></decl>;</decl_stmt>
	  
	  <expr_stmt><expr><name>dig</name> <operator>=</operator> <ternary><condition><expr><name>j</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>dig</name> <operator>&amp;</operator> <literal type="number">15</literal></expr> </then><else>: <expr><name>dig</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name>msize</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>dig</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  
	  <expr_stmt><expr><name>string</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="string">"%.1x."</literal></expr></argument>, <argument><expr><name>dig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
      
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="string">"ip6.arpa"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SERV_LITERAL_ADDRESS</name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>add_update_server</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>serv_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>source_addr</name></expr></argument>, <argument><expr><name>interface</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <return>return  <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"error"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <while>while <condition>(<expr><call><name>parse_server_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sdetails</name></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>string</name> <operator>=</operator> <call><name>parse_server_addr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sdetails</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>string</name></expr>;</return></block_content></block></if></if_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>add_update_server</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>serv_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>source_addr</name></expr></argument>, <argument><expr><name>interface</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return  <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"error"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	    </block_content>}</block></while>

	  <if_stmt><if>if <condition>(<expr><name><name>sdetails</name><operator>.</operator><name>resolved</name></name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name><name>sdetails</name><operator>.</operator><name>hostinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
  
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP</name></cpp:ifdef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_tag_prefix</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>arg</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"net:"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>arg</name> <operator>||</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"tag:"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>arg</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>set_prefix</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
   <if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"set:"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>arg</name></expr>)</condition><block type="pseudo"><block_content>
     <return>return <expr><name>arg</name><operator>+</operator><literal type="number">4</literal></expr>;</return></block_content></block></if></if_stmt>
   
   <return>return <expr><name>arg</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>dhcp_netid_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>net</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>next</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>tt</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>tt</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>dhcp_netid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tt</name><operator>-&gt;</operator><name>net</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>net</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tt</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
  <return>return <expr><name>tt</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dhcp_netid_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>nid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <while>while <condition>(<expr><name>nid</name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>nid</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>nid</name> <operator>=</operator> <name><name>nid</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>net</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/* Parse one or more tag:s before parameters.
 * Moves arg to the end of tags. */</comment>
<function><type><specifier>static</specifier> <name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type> <name>dhcp_tags</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>id</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><call><name>is_tag_prefix</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>comma</name> <init>= <expr><call><name>split</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>dhcp_netid_create</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>arg</name><operator>)</operator><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <name>comma</name></expr>;</expr_stmt>
    </block_content>}</block></while><empty_stmt>;</empty_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>arg</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>dhcp_netid_free</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>id</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  <return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dhcp_netid_list_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_netid_list</name></name> <modifier>*</modifier></type><name>netid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <while>while <condition>(<expr><name>netid</name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid_list</name></name> <modifier>*</modifier></type><name>tmplist</name> <init>= <expr><name>netid</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>netid</name> <operator>=</operator> <name><name>netid</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>dhcp_netid_free</name><argument_list>(<argument><expr><name><name>tmplist</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmplist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dhcp_config_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_config</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>config</name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>hwaddr_config</name></name> <modifier>*</modifier></type><name>hwaddr</name> <init>= <expr><name><name>config</name><operator>-&gt;</operator><name>hwaddr</name></name></expr></init></decl>;</decl_stmt>
      
      <while>while <condition>(<expr><name>hwaddr</name></expr>)</condition>
        <block>{<block_content>
	  <decl_stmt><decl><type><name><name>struct</name> <name>hwaddr_config</name></name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>hwaddr</name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>hwaddr</name> <operator>=</operator> <name><name>hwaddr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
      
      <expr_stmt><expr><call><name>dhcp_netid_list_free</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>netid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>dhcp_netid_free</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONFIG_CLID</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>clid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONFIG_NAME</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
      <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONFIG_ADDR6</name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name><name>struct</name> <name>addrlist</name></name> <modifier>*</modifier></type><name>addr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	  
	  <for>for <control>(<init><expr><name>addr</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>addr6</name></name></expr>;</init> <condition><expr><name>addr</name></expr>;</condition> <incr><expr><name>addr</name> <operator>=</operator> <name>tmp</name></expr></incr>)</control>
	    <block>{<block_content>
	      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></for>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dhcp_context_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>ctx</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>dhcp_netid_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>net</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>template_interface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dhcp_opt_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_opt</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DHOPT_VENDOR</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>vendor_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>dhcp_netid_free</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>netid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* This is too insanely large to keep in-line in the switch */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_dhcp_opt</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errstr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_opt</name></name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dhcp_opt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name>lenchar</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>addrs</name></decl>, <decl><type ref="prev"/><name>digs</name></decl>, <decl><type ref="prev"/><name>is_addr</name></decl>, <decl><type ref="prev"/><name>is_addr6</name></decl>, <decl><type ref="prev"/><name>is_hex</name></decl>, <decl><type ref="prev"/><name>is_dec</name></decl>, <decl><type ref="prev"/><name>is_string</name></decl>, <decl><type ref="prev"/><name>dots</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>comma</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u16</name></type> <name>opt_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>is6</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>option_ok</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>netid</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>opt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  
  <while>while <condition>(<expr><name>arg</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>      

      <for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>arg</name></expr>;</init> <condition><expr><operator>*</operator><name>cp</name></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>cp</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <operator>*</operator><name>cp</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
	  <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>cp</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>opt</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>opt_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name>option_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	  <break>break;</break>
	</block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"option:"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>arg</name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>opt</name></name> <operator>=</operator> <call><name>lookup_dhcp_opt</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>arg</name><operator>+</operator><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>opt_len</name> <operator>=</operator> <call><name>lookup_dhcp_len</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name><name>new</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <comment type="block">/* option:&lt;optname&gt; must follow tag and vendor string. */</comment>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>opt_len</name> <operator>&amp;</operator> <name>OT_INTERNAL</name><operator>)</operator> <operator>||</operator> <name>flags</name> <operator>==</operator> <name>DHOPT_MATCH</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>option_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
	  <break>break;</break>
	</block_content>}</block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
      <if type="elseif">else if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"option6:"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>arg</name></expr>)</condition>
	<block>{<block_content>
	  <for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>arg</name><operator>+</operator><literal type="number">8</literal></expr>;</init> <condition><expr><operator>*</operator><name>cp</name></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>cp</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <operator>*</operator><name>cp</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
	      <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	 
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>cp</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>opt</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name><operator>+</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name>opt_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	      <expr_stmt><expr><name>option_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	    </block_content>}</block></if>
	  <else>else
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>opt</name></name> <operator>=</operator> <call><name>lookup_dhcp_opt</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>arg</name><operator>+</operator><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name>opt_len</name> <operator>=</operator> <call><name>lookup_dhcp_len</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name><name>new</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>opt_len</name> <operator>&amp;</operator> <name>OT_INTERNAL</name><operator>)</operator> <operator>||</operator> <name>flags</name> <operator>==</operator> <name>DHOPT_MATCH</name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name>option_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></else></if_stmt>
	  <comment type="block">/* option6:&lt;opt&gt;|&lt;optname&gt; must follow tag and vendor string. */</comment>
	  <expr_stmt><expr><name>is6</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	  <break>break;</break>
	</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <if type="elseif">else if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"vendor:"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>arg</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>vendor_class</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name><operator>+</operator><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>DHOPT_VENDOR</name></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DHOPT_ENCAPSULATE</name><operator>)</operator> <operator>||</operator> <name>flags</name> <operator>==</operator> <name>DHOPT_MATCH</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>goto_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"inappropriate vendor:"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"encap:"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>arg</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>encap</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name><operator>+</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>DHOPT_ENCAPSULATE</name></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DHOPT_VENDOR</name><operator>)</operator> <operator>||</operator> <name>flags</name> <operator>==</operator> <name>DHOPT_MATCH</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>goto_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"inappropriate encap:"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"vi-encap:"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>arg</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>encap</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name><operator>+</operator><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>DHOPT_RFC3925</name></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>==</operator> <name>DHOPT_MATCH</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>option_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	      <break>break;</break>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <comment type="block">/* allow optional "net:" or "tag:" for consistency */</comment>
	  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><ternary><condition><expr><operator>(</operator><call><name>is_tag_prefix</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>arg</name><operator>+</operator><literal type="number">4</literal></expr> </then><else>: <expr><call><name>set_prefix</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
	  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>netid</name></name> <operator>=</operator> <call><name>dhcp_netid_create</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>new</name><operator>-&gt;</operator><name>netid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
      
      <expr_stmt><expr><name>arg</name> <operator>=</operator> <name>comma</name></expr>;</expr_stmt> 
    </block_content>}</block></while>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name>is6</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>DHOPT_VENDOR</name> <operator>|</operator> <name>DHOPT_ENCAPSULATE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>goto_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unsupported encapsulation for IPv6 option"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>opt_len</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
	  <operator>!</operator><operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DHOPT_RFC3925</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>opt_len</name> <operator>=</operator> <call><name>lookup_dhcp_len</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name><name>new</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
  <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    if <condition>(<expr><name>opt_len</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
	<operator>!</operator><operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>DHOPT_VENDOR</name> <operator>|</operator> <name>DHOPT_ENCAPSULATE</name> <operator>|</operator> <name>DHOPT_RFC3925</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>opt_len</name> <operator>=</operator> <call><name>lookup_dhcp_len</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name><name>new</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <comment type="block">/* option may be missing with rfc3925 match */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>option_ok</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>goto_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad dhcp-option"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>comma</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* characterise the value */</comment>
      <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>found_dig</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>found_colon</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>is_addr</name> <operator>=</operator> <name>is_addr6</name> <operator>=</operator> <name>is_hex</name> <operator>=</operator> <name>is_dec</name> <operator>=</operator> <name>is_string</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>addrs</name> <operator>=</operator> <name>digs</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>dots</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>comma</name></expr>;</init> <condition><expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>cp</name><operator>)</operator></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name>addrs</name><operator>++</operator></expr>;</expr_stmt>
	    <expr_stmt><expr><name>is_dec</name> <operator>=</operator> <name>is_hex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	  </block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name>digs</name><operator>++</operator></expr>;</expr_stmt>
	    <expr_stmt><expr><name>is_dec</name> <operator>=</operator> <name>is_addr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	    <expr_stmt><expr><name>found_colon</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	  </block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> 
	  <block>{<block_content>
	    <expr_stmt><expr><name>is_addr6</name> <operator>=</operator> <name>is_dec</name> <operator>=</operator> <name>is_hex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><name>cp</name> <operator>==</operator> <name>comma</name></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* leading / means a pathname */</comment>
	      <expr_stmt><expr><name>is_addr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  </block_content>}</block></if> 
	<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>	
	  <block>{<block_content>
	    <expr_stmt><expr><name>is_dec</name> <operator>=</operator> <name>is_hex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	    <expr_stmt><expr><name>dots</name><operator>++</operator></expr>;</expr_stmt>
	  </block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name>is_hex</name> <operator>=</operator> <name>is_addr</name> <operator>=</operator> <name>is_addr6</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name>is_dec</name> <operator>=</operator> <name>is_hex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>c</name> <operator>&gt;=</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name>is_addr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><name><name>cp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>is_dec</name> <operator>&amp;&amp;</operator>
		<operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'b'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'s'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'i'</literal><operator>)</operator></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name>lenchar</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	      </block_content>}</block></if>
	    <else>else<block type="pseudo"><block_content>
	      <expr_stmt><expr><name>is_dec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
	    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;=</operator><literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'F'</literal><operator>)</operator> <operator>||</operator>
		  <operator>(</operator><name>c</name> <operator>&gt;=</operator><literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'f'</literal><operator>)</operator> <operator>||</operator> 
		  <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'*'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>DHOPT_MATCH</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name>is_hex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'['</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name>is_addr6</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      </block_content>}</block></if></if_stmt>
	  </block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
	  <expr_stmt><expr><name>found_dig</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>
     
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found_dig</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>is_dec</name> <operator>=</operator> <name>is_addr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found_colon</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>is_addr6</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
      <comment type="block">/* NTP server option takes hex, addresses or FQDN */</comment>
      <if_stmt><if>if <condition>(<expr><name>is6</name> <operator>&amp;&amp;</operator> <name><name>new</name><operator>-&gt;</operator><name>opt</name></name> <operator>==</operator> <name>OPTION6_NTP_SERVER</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_hex</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>opt_len</name> <operator>|=</operator> <ternary><condition><expr><name>is_addr6</name></expr> ?</condition><then> <expr><name>OT_ADDR_LIST</name></expr> </then><else>: <expr><name>OT_RFC1035_NAME</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
     
      <comment type="block">/* We know that some options take addresses */</comment>
      <if_stmt><if>if <condition>(<expr><name>opt_len</name> <operator>&amp;</operator> <name>OT_ADDR_LIST</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>is_string</name> <operator>=</operator> <name>is_dec</name> <operator>=</operator> <name>is_hex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is6</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>is_addr</name> <operator>||</operator> <name>dots</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>goto_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad IP address"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	   <if_stmt><if>if <condition>(<expr><name>is6</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_addr6</name></expr>)</condition><block type="pseudo"><block_content>
	     <expr_stmt><expr><call><name>goto_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad IPv6 address"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
      <comment type="block">/* or names */</comment>
      <if type="elseif">else if <condition>(<expr><name>opt_len</name> <operator>&amp;</operator> <operator>(</operator><name>OT_NAME</name> <operator>|</operator> <name>OT_RFC1035_NAME</name> <operator>|</operator> <name>OT_CSTRING</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>is_addr6</name> <operator>=</operator> <name>is_addr</name> <operator>=</operator> <name>is_dec</name> <operator>=</operator> <name>is_hex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>found_dig</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>opt_len</name> <operator>&amp;</operator> <name>OT_TIME</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>comma</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>, <decl><type ref="prev"/><name>fac</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	  <switch>switch <condition>(<expr><name><name>comma</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>comma</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition>
	    <block>{<block_content>
	    <case>case <expr><literal type="char">'w'</literal></expr>:</case>
	    <case>case <expr><literal type="char">'W'</literal></expr>:</case>
	      <expr_stmt><expr><name>fac</name> <operator>*=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
	      <comment type="block">/* fall through */</comment>
	    <case>case <expr><literal type="char">'d'</literal></expr>:</case>
	    <case>case <expr><literal type="char">'D'</literal></expr>:</case>
	      <expr_stmt><expr><name>fac</name> <operator>*=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
	      <comment type="block">/* fall through */</comment>
	    <case>case <expr><literal type="char">'h'</literal></expr>:</case>
	    <case>case <expr><literal type="char">'H'</literal></expr>:</case>
	      <expr_stmt><expr><name>fac</name> <operator>*=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
	      <comment type="block">/* fall through */</comment>
	    <case>case <expr><literal type="char">'m'</literal></expr>:</case>
	    <case>case <expr><literal type="char">'M'</literal></expr>:</case>
	      <expr_stmt><expr><name>fac</name> <operator>*=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
	      <comment type="block">/* fall through */</comment>
	    <case>case <expr><literal type="char">'s'</literal></expr>:</case>
	    <case>case <expr><literal type="char">'S'</literal></expr>:</case>
	      <expr_stmt><expr><name><name>comma</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>comma</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	    </block_content>}</block></switch>
	  
	  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>comma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name><name>new</name><operator>-&gt;</operator><name>val</name></name><operator>)</operator> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>val</name> <operator>*</operator> <name>fac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	  
	</block_content>}</block></if>  
      <if type="elseif">else if <condition>(<expr><name>is_hex</name> <operator>&amp;&amp;</operator> <name>digs</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>digs</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>parse_hex</name><argument_list>(<argument><expr><name>comma</name></expr></argument>, <argument><expr><name><name>new</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><name>digs</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>DHOPT_MATCH</name><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>wildcard_mask</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>DHOPT_HEX</name></expr>;</expr_stmt>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><name>is_dec</name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>val</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>comma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	  <comment type="block">/* assume numeric arg is 1 byte except for
	     options where it is known otherwise.
	     For vendor class option, we have to hack. */</comment>
	  <if_stmt><if>if <condition>(<expr><name>opt_len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>opt_len</name></expr>;</expr_stmt></block_content></block></if>
	  <if type="elseif">else if <condition>(<expr><name>val</name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
	  <if type="elseif">else if <condition>(<expr><name>val</name> <operator>&amp;</operator> <literal type="number">0xff00</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	  <if_stmt><if>if <condition>(<expr><name>lenchar</name> <operator>==</operator> <literal type="char">'b'</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
	  <if type="elseif">else if <condition>(<expr><name>lenchar</name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
	  <if type="elseif">else if <condition>(<expr><name>lenchar</name> <operator>==</operator> <literal type="char">'i'</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  
	  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>new</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>val</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>val</name><operator>&gt;&gt;</operator><operator>(</operator><operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><name>is_addr</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>is6</name></expr>)</condition>	
	<block>{<block_content>
	  <decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>in</name></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>slash</name></decl>;</decl_stmt>
	  <comment type="block">/* max length of address/subnet descriptor is five bytes,
	     add one for the option 120 enc byte too */</comment>
	  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>op</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">5</literal> <operator>*</operator> <name>addrs</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>DHOPT_ADDR</name></expr>;</expr_stmt>

	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>DHOPT_ENCAPSULATE</name> <operator>|</operator> <name>DHOPT_VENDOR</name> <operator>|</operator> <name>DHOPT_RFC3925</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> 
	      <name><name>new</name><operator>-&gt;</operator><name>opt</name></name> <operator>==</operator> <name>OPTION_SIP_SERVER</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>op</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* RFC 3361 "enc byte" */</comment>
	      <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DHOPT_ADDR</name></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	  <while>while <condition>(<expr><name>addrs</name><operator>--</operator></expr>)</condition> 
	    <block>{<block_content>
	      <expr_stmt><expr><name>cp</name> <operator>=</operator> <name>comma</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name>slash</name> <operator>=</operator> <call><name>split_chr</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>goto_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad IPv4 address"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>slash</name></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>, <argument><expr><name>INADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name>op</name> <operator>+=</operator> <name>INADDRSZ</name></expr>;</expr_stmt>
		</block_content>}</block></if>
	      <else>else
		<block>{<block_content>
		  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>in</name></expr></init></decl>;</decl_stmt>
		  <decl_stmt><decl><type><name>int</name></type> <name>netsize</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>slash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		  <expr_stmt><expr><operator>*</operator><name>op</name><operator>++</operator> <operator>=</operator> <name>netsize</name></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><name>netsize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><operator>*</operator><name>op</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  <if_stmt><if>if <condition>(<expr><name>netsize</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><operator>*</operator><name>op</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  <if_stmt><if>if <condition>(<expr><name>netsize</name> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><operator>*</operator><name>op</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  <if_stmt><if>if <condition>(<expr><name>netsize</name> <operator>&gt;</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><operator>*</operator><name>op</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DHOPT_ADDR</name></expr>;</expr_stmt> <comment type="block">/* cannot re-write descriptor format */</comment>
		</block_content>}</block></else></if_stmt> 
	    </block_content>}</block></while>
	  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>op</name> <operator>-</operator> <name><name>new</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><name>is_addr6</name> <operator>&amp;&amp;</operator> <name>is6</name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>
	  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>op</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><literal type="number">16</literal> <operator>*</operator> <name>addrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>DHOPT_ADDR6</name></expr>;</expr_stmt>
	  <while>while <condition>(<expr><name>addrs</name><operator>--</operator></expr>)</condition> 
	    <block>{<block_content>
	      <expr_stmt><expr><name>cp</name> <operator>=</operator> <name>comma</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      
	      <comment type="block">/* check for [1234::7] */</comment>
	      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>cp</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>cp</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name>op</name> <operator>+=</operator> <name>IN6ADDRSZ</name></expr>;</expr_stmt>
		  <continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

	      <expr_stmt><expr><call><name>goto_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad IPv6 address"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></while> 
	  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>op</name> <operator>-</operator> <name><name>new</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><name>is_string</name></expr>)</condition>
	<block>{<block_content>
 	  <comment type="block">/* text arg */</comment>
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>opt</name></name> <operator>==</operator> <name>OPTION_DOMAIN_SEARCH</name> <operator>||</operator> <name><name>new</name><operator>-&gt;</operator><name>opt</name></name> <operator>==</operator> <name>OPTION_SIP_SERVER</name><operator>)</operator> <operator>&amp;&amp;</operator>
	      <operator>!</operator><name>is6</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>DHOPT_ENCAPSULATE</name> <operator>|</operator> <name>DHOPT_VENDOR</name> <operator>|</operator> <name>DHOPT_RFC3925</name><operator>)</operator><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <comment type="block">/* dns search, RFC 3397, or SIP, RFC 3361 */</comment>
	      <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>q</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>r</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>m</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>newp</name></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name>size_t</name></type> <name>newlen</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name>int</name></type> <name>header_size</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>opt</name></name> <operator>==</operator> <name>OPTION_DOMAIN_SEARCH</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
	      
	      <expr_stmt><expr><name>arg</name> <operator>=</operator> <name>comma</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      
	      <while>while <condition>(<expr><name>arg</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>arg</name></expr>)</condition>
		<block>{<block_content>
		  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>in</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dom</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		  <decl_stmt><decl><type><name>size_t</name></type> <name>domlen</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		  <comment type="block">/* Allow "." as an empty domain */</comment>
		  <if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		    <block>{<block_content>
		      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>dom</name> <operator>=</operator> <call><name>canonicalise_opt</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>goto_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad domain in dhcp-option"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			
		      <expr_stmt><expr><name>domlen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>dom</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		    </block_content>}</block></if></if_stmt>
		      
		  <expr_stmt><expr><name>newp</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <name>domlen</name> <operator>+</operator> <name>header_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><name>m</name></expr>)</condition>
		    <block>{<block_content>
		      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>newp</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>header_size</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    </block_content>}</block></if></if_stmt>
		  <expr_stmt><expr><name>m</name> <operator>=</operator> <name>newp</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name>p</name> <operator>=</operator> <name>m</name> <operator>+</operator> <name>header_size</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
		  
		  <comment type="block">/* add string on the end in RFC1035 format */</comment>
		  <for>for <control>(<init><expr><name>in</name> <operator>=</operator> <name>dom</name></expr>;</init> <condition><expr><name>in</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>in</name></expr>;</condition><incr/>)</control> 
		    <block>{<block_content>
		      <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><name>q</name><operator>++</operator></expr></init></decl>;</decl_stmt>
		      <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
		      <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>in</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>in</name> <operator>!=</operator> <literal type="char">'.'</literal><operator>)</operator></expr>;</condition> <incr><expr><name>in</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>in</name></expr>;</expr_stmt></block_content></block></for>
		      <expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
		      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>in</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>in</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		    </block_content>}</block></for>
		  <expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  
		  <comment type="block">/* Now tail-compress using earlier names. */</comment>
		  <expr_stmt><expr><name>newlen</name> <operator>=</operator> <name>q</name> <operator>-</operator> <name>p</name></expr>;</expr_stmt>
		  <for>for <control>(<init><expr><name>tail</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>len</name></expr>;</init> <condition><expr><operator>*</operator><name>tail</name></expr>;</condition> <incr><expr><name>tail</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>tail</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>
		    <for>for <control>(<init><expr><name>r</name> <operator>=</operator> <name>p</name></expr>;</init> <condition><expr><name>r</name> <operator>-</operator> <name>p</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr>;</condition> <incr><expr><name>r</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>r</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>
		      <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>r</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tail</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
			  <expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><operator>(</operator><name>r</name> <operator>-</operator> <name>p</name><operator>)</operator> <operator>|</operator> <literal type="number">0xc000</literal></expr></argument>, <argument><expr><name>tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
			  <expr_stmt><expr><name>newlen</name> <operator>=</operator> <name>tail</name> <operator>-</operator> <name>p</name></expr>;</expr_stmt>
			  <goto>goto <name>end</name>;</goto>
			</block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></for>
		<label><name>end</name>:</label>
		  <expr_stmt><expr><name>len</name> <operator>=</operator> <name>newlen</name></expr>;</expr_stmt>
		  
		  <expr_stmt><expr><name>arg</name> <operator>=</operator> <name>comma</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
      
	      <comment type="block">/* RFC 3361, enc byte is zero for names */</comment>
	      <if_stmt><if>if <condition>(<expr><name><name>new</name><operator>-&gt;</operator><name>opt</name></name> <operator>==</operator> <name>OPTION_SIP_SERVER</name> <operator>&amp;&amp;</operator> <name>m</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>len</name> <operator>+</operator> <name>header_size</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
	    </block_content>}</block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
	  <if type="elseif">else if <condition>(<expr><name>comma</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>opt_len</name> <operator>&amp;</operator> <name>OT_CSTRING</name><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <comment type="block">/* length fields are two bytes so need 16 bits for each string */</comment>
	      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>commas</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>newp</name></decl>;</decl_stmt>

	      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>comma</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><name><name>comma</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name>commas</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
	      
	      <expr_stmt><expr><name>newp</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>comma</name></expr></argument>)</argument_list></call><operator>+</operator><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>commas</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>	  
	      <expr_stmt><expr><name>p</name> <operator>=</operator> <name>newp</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>arg</name> <operator>=</operator> <name>comma</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      
	      <while>while <condition>(<expr><name>arg</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>arg</name></expr>)</condition>
		<block>{<block_content>
		  <decl_stmt><decl><type><name>u16</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		  <expr_stmt><expr><call><name>unhide_metas</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt> 

		  <expr_stmt><expr><name>arg</name> <operator>=</operator> <name>comma</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>

	      <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>newp</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>newp</name></expr>;</expr_stmt>
	    </block_content>}</block></if>
	  <if type="elseif">else if <condition>(<expr><name>comma</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>opt_len</name> <operator>&amp;</operator> <name>OT_RFC1035_NAME</name><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>newp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name>int</name></type> <name>header_size</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>is6</name> <operator>&amp;&amp;</operator> <name><name>new</name><operator>-&gt;</operator><name>opt</name></name> <operator>==</operator> <name>OPTION6_NTP_SERVER</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
	      <expr_stmt><expr><name>arg</name> <operator>=</operator> <name>comma</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      
	      <while>while <condition>(<expr><name>arg</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>arg</name></expr>)</condition>
		<block>{<block_content>
		  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dom</name> <init>= <expr><call><name>canonicalise_opt</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dom</name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><call><name>goto_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad domain in dhcp-option"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		    		  
		  <expr_stmt><expr><name>newp</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <name>header_size</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>dom</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  
		  <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition>
		    <block>{<block_content>
		      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>newp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    </block_content>}</block></if></if_stmt>
		  
		  <expr_stmt><expr><name>p</name> <operator>=</operator> <name>newp</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>do_rfc1035_name</name><argument_list>(<argument><expr><name>q</name> <operator>+</operator> <name>header_size</name></expr></argument>, <argument><expr><name>dom</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><operator>*</operator><name>end</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><name>is6</name> <operator>&amp;&amp;</operator> <name><name>new</name><operator>-&gt;</operator><name>opt</name></name> <operator>==</operator> <name>OPTION6_NTP_SERVER</name></expr>)</condition>
		    <block>{<block_content>
		      <expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><name>NTP_SUBOPTION_SRV_FQDN</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><name>end</name> <operator>-</operator> <name>q</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    </block_content>}</block></if></if_stmt>
		  <expr_stmt><expr><name>len</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>p</name></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		  <expr_stmt><expr><name>arg</name> <operator>=</operator> <name>comma</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
	      
	      <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
	    </block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	  <else>else
	    <block>{<block_content>
	      <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>comma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <comment type="block">/* keep terminating zero on string */</comment>
	      <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>comma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>DHOPT_STRING</name></expr>;</expr_stmt>
	    </block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is6</name> <operator>&amp;&amp;</operator> 
      <operator>(</operator><operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">255</literal><operator>)</operator> <operator>||</operator> 
      <operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">253</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>DHOPT_VENDOR</name> <operator>|</operator> <name>DHOPT_ENCAPSULATE</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>||</operator>
       <operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">250</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DHOPT_RFC3925</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>goto_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"dhcp-option too long"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>==</operator> <name>DHOPT_MATCH</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>DHOPT_ENCAPSULATE</name> <operator>|</operator> <name>DHOPT_VENDOR</name><operator>)</operator><operator>)</operator> <operator>||</operator>
	  <operator>!</operator><name><name>new</name><operator>-&gt;</operator><name>netid</name></name> <operator>||</operator>
	  <name><name>new</name><operator>-&gt;</operator><name>netid</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>goto_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"illegal dhcp-match"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
       
      <if_stmt><if>if <condition>(<expr><name>is6</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_match6</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_match6</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_match</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_match</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name>is6</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_opts6</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_opts6</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
    </block_content>}</block></if>
  <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_opts</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_opts</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    
  <return>return <expr><literal type="number">1</literal></expr>;</return>
<label><name>on_error</name>:</label>
  <expr_stmt><expr><call><name>dhcp_opt_free</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>set_option_bool</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>option_var</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call> <operator>|=</operator> <call><name>option_val</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>reset_option_bool</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>option_var</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><call><name>option_val</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>one_opt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>option</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errstr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>gen_err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>command_line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>servers_only</name></decl></parameter>)</parameter_list>
<block>{<block_content>      
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>comma</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>option</name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>usage</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>opt</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>usage</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>opt</name> <operator>==</operator> <name>option</name></expr>)</condition>
      <block>{<block_content>
	 <decl_stmt><decl><type><name>int</name></type> <name>rept</name> <init>= <expr><name><name>usage</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rept</name></expr></init></decl>;</decl_stmt>
	 
	 <if_stmt><if>if <condition>(<expr><name>command_line</name></expr>)</condition>
	   <block>{<block_content>
	     <comment type="block">/* command line */</comment>
	     <if_stmt><if>if <condition>(<expr><name>rept</name> <operator>==</operator> <name>ARG_USED_CL</name></expr>)</condition><block type="pseudo"><block_content>
	       <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"illegal repeated flag"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	     <if_stmt><if>if <condition>(<expr><name>rept</name> <operator>==</operator> <name>ARG_ONE</name></expr>)</condition><block type="pseudo"><block_content>
	       <expr_stmt><expr><name><name>usage</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rept</name> <operator>=</operator> <name>ARG_USED_CL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	   </block_content>}</block></if>
	 <else>else
	   <block>{<block_content>
	     <comment type="block">/* allow file to override command line */</comment>
	     <if_stmt><if>if <condition>(<expr><name>rept</name> <operator>==</operator> <name>ARG_USED_FILE</name></expr>)</condition><block type="pseudo"><block_content>
	       <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"illegal repeated keyword"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	     <if_stmt><if>if <condition>(<expr><name>rept</name> <operator>==</operator> <name>ARG_USED_CL</name> <operator>||</operator> <name>rept</name> <operator>==</operator> <name>ARG_ONE</name></expr>)</condition><block type="pseudo"><block_content>
	       <expr_stmt><expr><name><name>usage</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rept</name> <operator>=</operator> <name>ARG_USED_FILE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	   </block_content>}</block></else></if_stmt>

	 <if_stmt><if>if <condition>(<expr><name>rept</name> <operator>!=</operator> <name>ARG_DUP</name> <operator>&amp;&amp;</operator> <name>rept</name> <operator>!=</operator> <name>ARG_ONE</name> <operator>&amp;&amp;</operator> <name>rept</name> <operator>!=</operator> <name>ARG_USED_CL</name></expr>)</condition> 
	   <block>{<block_content>
	     <expr_stmt><expr><call><name>set_option_bool</name><argument_list>(<argument><expr><name>rept</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	     <return>return <expr><literal type="number">1</literal></expr>;</return>
	   </block_content>}</block></if></if_stmt>
       
	 <break>break;</break>
      </block_content>}</block></if></if_stmt></block_content></block></for>
  
  <switch>switch <condition>(<expr><name>option</name></expr>)</condition>
    <block>{<block_content> 
    <case>case <expr><literal type="char">'C'</literal></expr>:</case> <comment type="block">/* --conf-file */</comment>
      <block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>file</name></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><call><name>one_file</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt>
	<break>break;</break>
      </block_content>}</block>

    <case>case <expr><name>LOPT_CONF_SCRIPT</name></expr>:</case> <comment type="block">/* --conf-script */</comment>
      <block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>file</name></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><call><name>one_file</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>LOPT_CONF_SCRIPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt>
	<break>break;</break>
      </block_content>}</block>

    <case>case <expr><literal type="char">'7'</literal></expr>:</case> <comment type="block">/* --conf-dir */</comment>	      
      <block>{<block_content>
	<decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dir_stream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>ent</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>directory</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
	<struct>struct <name>list</name> <block>{
	  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name><name>struct</name> <name>list</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
	}</block> <decl><modifier>*</modifier><name>ignore_suffix</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>match_suffix</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>files</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>li</name></decl>;</struct>
	
	<expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>directory</name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	  <break>break;</break></block_content></block></if></if_stmt>
	
	<for>for <control>(<init><expr><name>arg</name> <operator>=</operator> <name>comma</name></expr>;</init> <condition><expr><name>arg</name></expr>;</condition> <incr><expr><name>arg</name> <operator>=</operator> <name>comma</name></expr></incr>)</control> 
	  <block>{<block_content>
	    <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name>li</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition>
		  <block>{<block_content>
		    <comment type="block">/* "*" with no suffix is a no-op */</comment>
		    <if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		    <else>else
		      <block>{<block_content>
			<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>match_suffix</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>match_suffix</name> <operator>=</operator> <name>li</name></expr>;</expr_stmt>
			<comment type="block">/* Have to copy: buffer is overwritten */</comment>
			<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      </block_content>}</block></else></if_stmt>
		  </block_content>}</block></if>
		<else>else
		  <block>{<block_content>
		    <expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>ignore_suffix</name></expr>;</expr_stmt>
		    <expr_stmt><expr><name>ignore_suffix</name> <operator>=</operator> <name>li</name></expr>;</expr_stmt>
		    <comment type="block">/* Have to copy: buffer is overwritten */</comment>
		    <expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  </block_content>}</block></else></if_stmt>
	      </block_content>}</block></if></if_stmt>
	  </block_content>}</block></for>
	
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>dir_stream</name> <operator>=</operator> <call><name>opendir</name><argument_list>(<argument><expr><name>directory</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot access directory %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>directory</name></expr></argument>, <argument><expr><name>EC_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<while>while <condition>(<expr><operator>(</operator><name>ent</name> <operator>=</operator> <call><name>readdir</name><argument_list>(<argument><expr><name>dir_stream</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	  <block>{<block_content>
	    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>buf</name></decl>;</decl_stmt>
	    
	    <comment type="block">/* ignore emacs backups and dotfiles */</comment>
	    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
		<name><name>ent</name><operator>-&gt;</operator><name>d_name</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'~'</literal> <operator>||</operator>
		<operator>(</operator><name><name>ent</name><operator>-&gt;</operator><name>d_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal> <operator>&amp;&amp;</operator> <name><name>ent</name><operator>-&gt;</operator><name>d_name</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal><operator>)</operator> <operator>||</operator>
		<name><name>ent</name><operator>-&gt;</operator><name>d_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
	      <continue>continue;</continue></block_content></block></if></if_stmt>

	    <if_stmt><if>if <condition>(<expr><name>match_suffix</name></expr>)</condition>
	      <block>{<block_content>
		<for>for <control>(<init><expr><name>li</name> <operator>=</operator> <name>match_suffix</name></expr>;</init> <condition><expr><name>li</name></expr>;</condition> <incr><expr><name>li</name> <operator>=</operator> <name><name>li</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
		  <block>{<block_content>
		    <comment type="block">/* check for required suffices */</comment>
		    <decl_stmt><decl><type><name>size_t</name></type> <name>ls</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>ls</name> <operator>&amp;&amp;</operator>
			<call><name>strcmp</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ent</name><operator>-&gt;</operator><name>d_name</name><index>[<expr><name>len</name> <operator>-</operator> <name>ls</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		      <break>break;</break></block_content></block></if></if_stmt>
		  </block_content>}</block></for>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>li</name></expr>)</condition><block type="pseudo"><block_content>
		  <continue>continue;</continue></block_content></block></if></if_stmt>
	      </block_content>}</block></if></if_stmt>
	    
	    <for>for <control>(<init><expr><name>li</name> <operator>=</operator> <name>ignore_suffix</name></expr>;</init> <condition><expr><name>li</name></expr>;</condition> <incr><expr><name>li</name> <operator>=</operator> <name><name>li</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	      <block>{<block_content>
		<comment type="block">/* check for proscribed suffices */</comment>
		<decl_stmt><decl><type><name>size_t</name></type> <name>ls</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>ls</name> <operator>&amp;&amp;</operator>
		    <call><name>strcmp</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ent</name><operator>-&gt;</operator><name>d_name</name><index>[<expr><name>len</name> <operator>-</operator> <name>ls</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		  <break>break;</break></block_content></block></if></if_stmt>
	      </block_content>}</block></for>
	    <if_stmt><if>if <condition>(<expr><name>li</name></expr>)</condition><block type="pseudo"><block_content>
	      <continue>continue;</continue></block_content></block></if></if_stmt>
	    
	    <expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>directory</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>ent</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <comment type="block">/* files must be readable */</comment>
	    <if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot access %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>EC_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    
	    <comment type="block">/* only reg files allowed. */</comment>
	    <if_stmt><if>if <condition>(<expr><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	      <block>{<block_content>
		<comment type="block">/* sort files into order. */</comment>
		<decl_stmt><decl><type><name><name>struct</name> <name>list</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>up</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
		
		<for>for <control>(<init><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name>files</name></expr><operator>,</operator> <expr><name>li</name> <operator>=</operator> <name>files</name></expr>;</init> <condition><expr><name>li</name></expr>;</condition> <incr><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><name>li</name> <operator>=</operator> <name><name>li</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		  <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		    <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

		<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>li</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	      </block_content>}</block></if>
	    <else>else<block type="pseudo"><block_content>
	      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	  </block_content>}</block></while>

	<for>for <control>(<init><expr><name>li</name> <operator>=</operator> <name>files</name></expr>;</init> <condition><expr><name>li</name></expr>;</condition> <incr><expr><name>li</name> <operator>=</operator> <name><name>li</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>one_file</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
      	
	<expr_stmt><expr><call><name>closedir</name><argument_list>(<argument><expr><name>dir_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init>;</init> <condition><expr><name>ignore_suffix</name></expr>;</condition> <incr><expr><name>ignore_suffix</name> <operator>=</operator> <name>li</name></expr></incr>)</control>
	  <block>{<block_content>
	    <expr_stmt><expr><name>li</name> <operator>=</operator> <name><name>ignore_suffix</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ignore_suffix</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ignore_suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></for>
	<for>for<control>(<init>;</init> <condition><expr><name>match_suffix</name></expr>;</condition> <incr><expr><name>match_suffix</name> <operator>=</operator> <name>li</name></expr></incr>)</control>
	  <block>{<block_content>
	    <expr_stmt><expr><name>li</name> <operator>=</operator> <name><name>match_suffix</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>match_suffix</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>match_suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></for>
	<for>for<control>(<init>;</init> <condition><expr><name>files</name></expr>;</condition> <incr><expr><name>files</name> <operator>=</operator> <name>li</name></expr></incr>)</control>
	  <block>{<block_content>
	    <expr_stmt><expr><name>li</name> <operator>=</operator> <name><name>files</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>files</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></for>
	<break>break;</break>
      </block_content>}</block>

    <case>case <expr><name>LOPT_ADD_SBNET</name></expr>:</case> <comment type="block">/* --add-subnet */</comment>
      <expr_stmt><expr><call><name>set_option_bool</name><argument_list>(<argument><expr><name>OPT_CLIENT_SUBNET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>arg</name></expr>)</condition>
	<block>{<block_content>
          <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
	  <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <decl_stmt><decl><type><name><name>struct</name> <name>mysubnet</name></name><modifier>*</modifier></type> <name>new</name> <init>= <expr><call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>mysubnet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><name>end</name> <operator>=</operator> <call><name>split_chr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <comment type="block">/* has subnet+len */</comment>
	      <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>parse_mysockaddr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>atoi_check</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>addr_used</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	    </block_content>}</block></if> 
	  <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>atoi_check</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    
          <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>add_subnet4</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>

          <if_stmt><if>if <condition>(<expr><name>comma</name></expr>)</condition>
            <block>{<block_content>
	      <expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>mysubnet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>end</name> <operator>=</operator> <call><name>split_chr</name><argument_list>(<argument><expr><name>comma</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		<block>{<block_content>
		  <comment type="block">/* has subnet+len */</comment>
                  <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>parse_mysockaddr</name><argument_list>(<argument><expr><name>comma</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>atoi_check</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>addr_used</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                </block_content>}</block></if>
              <else>else
                <block>{<block_content>
                  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>atoi_check</name><argument_list>(<argument><expr><name>comma</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
          
	      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>add_subnet6</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
      <break>break;</break>

    <case>case <expr><literal type="char">'1'</literal></expr>:</case> <comment type="block">/* --enable-dbus */</comment>
      <expr_stmt><expr><call><name>set_option_bool</name><argument_list>(<argument><expr><name>OPT_DBUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>arg</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dbus_name</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dbus_name</name></name> <operator>=</operator> <name>DNSMASQ_SERVICE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
      <break>break;</break>

    <case>case <expr><name>LOPT_UBUS</name></expr>:</case> <comment type="block">/* --enable-ubus */</comment>
      <expr_stmt><expr><call><name>set_option_bool</name><argument_list>(<argument><expr><name>OPT_UBUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>arg</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>ubus_name</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>ubus_name</name></name> <operator>=</operator> <name>DNSMASQ_UBUS_NAME</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
      <break>break;</break>

    <case>case <expr><literal type="char">'8'</literal></expr>:</case> <comment type="block">/* --log-facility */</comment>
      <comment type="block">/* may be a filename */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>log_file</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else
	<block>{<block_content>	  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__ANDROID__</name></cpp:ifdef>
	  <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"setting log facility is not possible under Android"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>facilitynames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c_name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><call><name>hostname_isequal</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>facilitynames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c_name</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	      <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	  
	  <if_stmt><if>if <condition>(<expr><name><name>facilitynames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c_name</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>log_fac</name></name> <operator>=</operator> <name><name>facilitynames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c_val</name></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad log facility"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></else></if_stmt>
      <break>break;</break>

    <case>case <expr><literal type="char">'x'</literal></expr>:</case> <comment type="block">/* --pid-file */</comment>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>runfile</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><literal type="char">'r'</literal></expr>:</case> <comment type="block">/* --resolv-file */</comment>
      <block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>resolvc</name></name> <modifier>*</modifier></type><name>new</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>list</name> <init>= <expr><name><name>daemon</name><operator>-&gt;</operator><name>resolv_files</name></name></expr></init></decl>;</decl_stmt>
	
	<if_stmt><if>if <condition>(<expr><name>list</name> <operator>&amp;&amp;</operator> <name><name>list</name><operator>-&gt;</operator><name>is_default</name></name></expr>)</condition>
	  <block>{<block_content>
	    <comment type="block">/* replace default resolv file - possibly with nothing */</comment>
	    <if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>is_default</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
	      </block_content>}</block></if>
	    <else>else<block type="pseudo"><block_content>
	      <expr_stmt><expr><name>list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	  </block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>name</name></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>resolvc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>is_default</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>logged</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	    <expr_stmt><expr><name>list</name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>resolv_files</name></name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>
	<break>break;</break>
      </block_content>}</block>

    <case>case <expr><name>LOPT_SERVERS_FILE</name></expr>:</case>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>servers_file</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
      
    <case>case <expr><literal type="char">'m'</literal></expr>:</case>  <comment type="block">/* --mx-host */</comment>
      <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>pref</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>mx_srv_record</name></name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>target</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	  <block>{<block_content>
	    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prefstr</name></decl>;</decl_stmt>
	    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>prefstr</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>comma</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>atoi_check16</name><argument_list>(<argument><expr><name>prefstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pref</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad MX preference"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  </block_content>}</block></if></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>name</name> <operator>=</operator> <call><name>canonicalise_opt</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> 
	    <operator>(</operator><name>comma</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>target</name> <operator>=</operator> <call><name>canonicalise_opt</name><argument_list>(<argument><expr><name>comma</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad MX name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt>
	
	<expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>mx_srv_record</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>mxnames</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>mxnames</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>issrv</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <name>target</name></expr>;</expr_stmt> <comment type="block">/* may be NULL */</comment>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>weight</name></name> <operator>=</operator> <name>pref</name></expr>;</expr_stmt>
	<break>break;</break>
      </block_content>}</block>
      
    <case>case <expr><literal type="char">'t'</literal></expr>:</case> <comment type="block">/*  --mx-target */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>daemon</name><operator>-&gt;</operator><name>mxtarget</name></name> <operator>=</operator> <call><name>canonicalise_opt</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad MX target"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <break>break;</break>

    <case>case <expr><name>LOPT_DUMPFILE</name></expr>:</case>  <comment type="block">/* --dumpfile */</comment>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dump_file</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>LOPT_DUMPMASK</name></expr>:</case>  <comment type="block">/* --dumpmask */</comment>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dump_mask</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
      
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP</name></cpp:ifdef>      
    <case>case <expr><literal type="char">'l'</literal></expr>:</case>  <comment type="block">/* --dhcp-leasefile */</comment>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>lease_file</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
      
      <comment type="block">/* Sorry about the gross pre-processor abuse */</comment>
    <case>case <expr><literal type="char">'6'</literal></expr>:</case>             <comment type="block">/* --dhcp-script */</comment>
    <case>case <expr><name>LOPT_LUASCRIPT</name></expr>:</case>  <comment type="block">/* --dhcp-luascript */</comment>
<cpp:if>#  <cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SCRIPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"recompile with HAVE_SCRIPT defined to enable lease-change scripts"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#  <cpp:directive>else</cpp:directive></cpp:else>
      <if_stmt><if>if <condition>(<expr><name>option</name> <operator>==</operator> <name>LOPT_LUASCRIPT</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#    <cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LUASCRIPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"recompile with HAVE_LUASCRIPT defined to enable Lua scripts"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#    <cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>luascript</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#    <cpp:directive>endif</cpp:directive></cpp:endif>
      <if_stmt><else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>lease_change_command</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
      <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_DHCP */</comment>

    <case>case <expr><name>LOPT_DHCP_HOST</name></expr>:</case>     <comment type="block">/* --dhcp-hostsfile */</comment>
    <case>case <expr><name>LOPT_DHCP_OPTS</name></expr>:</case>     <comment type="block">/* --dhcp-optsfile */</comment>
    <case>case <expr><literal type="char">'H'</literal></expr>:</case>                <comment type="block">/* --addn-hosts */</comment>
      <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>hostsfile</name></name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>hostsfile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>fname</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>host_index</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>option</name> <operator>==</operator> <literal type="char">'H'</literal></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>addn_hosts</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>addn_hosts</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	  </block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>option</name> <operator>==</operator> <name>LOPT_DHCP_HOST</name></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_hosts_file</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_hosts_file</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	  </block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>option</name> <operator>==</operator> <name>LOPT_DHCP_OPTS</name></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_opts_file</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_opts_file</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt>
	
	<break>break;</break>
      </block_content>}</block>

    <case>case <expr><name>LOPT_DHCP_INOTIFY</name></expr>:</case>  <comment type="block">/* --dhcp-hostsdir */</comment>
    <case>case <expr><name>LOPT_DHOPT_INOTIFY</name></expr>:</case> <comment type="block">/* --dhcp-optsdir */</comment>
    <case>case <expr><name>LOPT_HOST_INOTIFY</name></expr>:</case>  <comment type="block">/* --hostsdir */</comment>
      <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>dyndir</name></name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dyndir</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>dname</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dynamic_dirs</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dynamic_dirs</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt> 
	<if_stmt><if>if <condition>(<expr><name>option</name> <operator>==</operator> <name>LOPT_DHCP_INOTIFY</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AH_DHCP_HST</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>option</name> <operator>==</operator> <name>LOPT_DHOPT_INOTIFY</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AH_DHCP_OPT</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>option</name> <operator>==</operator> <name>LOPT_HOST_INOTIFY</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AH_HOSTS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<break>break;</break>
      </block_content>}</block>
      
    <case>case <expr><name>LOPT_AUTHSERV</name></expr>:</case> <comment type="block">/* --auth-server */</comment>
      <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>authserver</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <while>while <condition>(<expr><operator>(</operator><name>arg</name> <operator>=</operator> <name>comma</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name><name>struct</name> <name>iname</name></name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>iname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	  <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>unhide_metas</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt></block_content></block></if>
	  <if type="elseif">else if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt></block_content></block></if>
	  <else>else
	    <block>{<block_content>
	      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fam</name> <init>= <expr><call><name>split_chr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	      <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><name>fam</name></expr>)</condition>
		<block>{<block_content>
		  <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>fam</name></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt></block_content></block></if>
		  <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>fam</name></expr></argument>, <argument><expr><literal type="string">"6"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt></block_content></block></if>
		  <else>else
		  <block>{<block_content>
		    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  </block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt> 
	    </block_content>}</block></else></if_stmt>
	  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>authinterface</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>authinterface</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	</block_content>}</block></while><empty_stmt>;</empty_stmt>
            
      <break>break;</break>

    <case>case <expr><name>LOPT_AUTHSFS</name></expr>:</case> <comment type="block">/* --auth-sec-servers */</comment>
      <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>name_list</name></name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>

	<do>do <block>{<block_content>
	  <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>name_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>secondary_forward_server</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>secondary_forward_server</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>arg</name> <operator>=</operator> <name>comma</name></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>arg</name></expr>)</condition>;</do>
	<break>break;</break>
      </block_content>}</block>
	
    <case>case <expr><name>LOPT_AUTHZONE</name></expr>:</case> <comment type="block">/* --auth-zone */</comment>
      <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>auth_zone</name></name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	<expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>auth_zone</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>domain</name></name> <operator>=</operator> <call><name>canonicalise_opt</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>new</name><operator>-&gt;</operator><name>domain</name></name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid auth-zone"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
 	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>subnet</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>exclude</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>interface_names</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>auth_zones</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>auth_zones</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>arg</name> <operator>=</operator> <name>comma</name><operator>)</operator></expr>)</condition>
	  <block>{<block_content>
	    <decl_stmt><decl><type><name>int</name></type> <name>prefixlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>int</name></type> <name>is_exclude</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prefix</name></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name><name>struct</name> <name>addrlist</name></name> <modifier>*</modifier></type><name>subnet</name> <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name><name>union</name> <name>all_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>

	    <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>prefix</name> <operator>=</operator> <call><name>split_chr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    
	    <if_stmt><if>if <condition>(<expr><name>prefix</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>atoi_check</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prefixlen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    
	    <if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"exclude:"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>arg</name></expr>)</condition>
	      <block>{<block_content>
		    <expr_stmt><expr><name>is_exclude</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		    <expr_stmt><expr><name>arg</name> <operator>=</operator> <name>arg</name><operator>+</operator><literal type="number">8</literal></expr>;</expr_stmt>
	      </block_content>}</block></if></if_stmt>

	    <if_stmt><if>if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>addr4</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>addrlist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>subnet</name><operator>-&gt;</operator><name>prefixlen</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>prefixlen</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">24</literal></expr> </then><else>: <expr><name>prefixlen</name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>subnet</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>ADDRLIST_LITERAL</name></expr>;</expr_stmt>
	      </block_content>}</block></if>
	    <if type="elseif">else if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>addr6</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>addrlist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>subnet</name><operator>-&gt;</operator><name>prefixlen</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>prefixlen</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">64</literal></expr> </then><else>: <expr><name>prefixlen</name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>subnet</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>ADDRLIST_LITERAL</name> <operator>|</operator> <name>ADDRLIST_IPV6</name></expr>;</expr_stmt>
	      </block_content>}</block></if>
	    <else>else 
	      <block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>auth_name_list</name></name> <modifier>*</modifier></type><name>name</name> <init>=  <expr><call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>auth_name_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>name</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>name</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>AUTH4</name> <operator>|</operator> <name>AUTH6</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>name</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>new</name><operator>-&gt;</operator><name>interface_names</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>interface_names</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>prefix</name></expr>)</condition>
		  <block>{<block_content>
		    <if_stmt><if>if <condition>(<expr><name>prefixlen</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
		      <expr_stmt><expr><name><name>name</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AUTH6</name></expr>;</expr_stmt></block_content></block></if>
		    <if type="elseif">else if <condition>(<expr><name>prefixlen</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
		      <expr_stmt><expr><name><name>name</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AUTH4</name></expr>;</expr_stmt></block_content></block></if>
		    <else>else<block type="pseudo"><block_content>
		      <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		  </block_content>}</block></if></if_stmt>
	      </block_content>}</block></else></if_stmt>
	    
	    <if_stmt><if>if <condition>(<expr><name>subnet</name></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name><name>subnet</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>is_exclude</name></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><name><name>subnet</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>new</name><operator>-&gt;</operator><name>exclude</name></name></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>exclude</name></name> <operator>=</operator> <name>subnet</name></expr>;</expr_stmt>
		  </block_content>}</block></if>
		<else>else
		  <block>{<block_content>
		    <expr_stmt><expr><name><name>subnet</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>new</name><operator>-&gt;</operator><name>subnet</name></name></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>subnet</name></name> <operator>=</operator> <name>subnet</name></expr>;</expr_stmt>
		  </block_content>}</block></else></if_stmt>
	      </block_content>}</block></if></if_stmt>
	  </block_content>}</block></while>
	<break>break;</break>
      </block_content>}</block>
      
    <case>case  <expr><name>LOPT_AUTHSOA</name></expr>:</case> <comment type="block">/* --auth-soa */</comment>
      <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>soa_sn</name></name> <operator>=</operator> <operator>(</operator><name>u32</name><operator>)</operator><call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>comma</name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
	  <expr_stmt><expr><name>arg</name> <operator>=</operator> <name>comma</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>hostmaster</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>hostmaster</name></name></expr>;</init> <condition><expr><name>cp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cp</name></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

	  <if_stmt><if>if <condition>(<expr><name>comma</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>arg</name> <operator>=</operator> <name>comma</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>soa_refresh</name></name> <operator>=</operator> <operator>(</operator><name>u32</name><operator>)</operator><call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><name>comma</name></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name>arg</name> <operator>=</operator> <name>comma</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
		  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>soa_retry</name></name> <operator>=</operator> <operator>(</operator><name>u32</name><operator>)</operator><call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><name>comma</name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>soa_expiry</name></name> <operator>=</operator> <operator>(</operator><name>u32</name><operator>)</operator><call><name>atoi</name><argument_list>(<argument><expr><name>comma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

      <break>break;</break>

    <case>case <expr><literal type="char">'s'</literal></expr>:</case>         <comment type="block">/* --domain */</comment>
    <case>case <expr><name>LOPT_SYNTH</name></expr>:</case>  <comment type="block">/* --synth-domain */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"#"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>set_option_bool</name><argument_list>(<argument><expr><name>OPT_RESOLV_DOMAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else
	<block>{<block_content>
	  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>d</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>d_raw</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
	  <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>d</name> <operator>=</operator> <call><name>canonicalise_opt</name><argument_list>(<argument><expr><name>d_raw</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	  <else>else
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* allocate this again below. */</comment>
	      <if_stmt><if>if <condition>(<expr><name>comma</name></expr>)</condition>
		<block>{<block_content>
		  <decl_stmt><decl><type><name><name>struct</name> <name>cond_domain</name></name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>cond_domain</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>netpart</name></decl>;</decl_stmt>
		  
		  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>prefix</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>indexed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>prefixlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		  
		  <expr_stmt><expr><call><name>unhide_metas</name><argument_list>(<argument><expr><name>comma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>netpart</name> <operator>=</operator> <call><name>split_chr</name><argument_list>(<argument><expr><name>comma</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		    <block>{<block_content>
		      <decl_stmt><decl><type><name>int</name></type> <name>msize</name></decl>;</decl_stmt>

		      <expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>netpart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>atoi_check</name><argument_list>(<argument><expr><name>netpart</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msize</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		      <if type="elseif">else if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>comma</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
			  <decl_stmt><decl><type><name>int</name></type> <name>mask</name></decl>;</decl_stmt>

			  <if_stmt><if>if <condition>(<expr><name>msize</name> <operator>&gt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
			     <expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad prefix length"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			  
			  <expr_stmt><expr><name>mask</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>msize</name><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>is6</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 			  
			  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><call><name>htonl</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name><name>new</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>s_addr</name></name> <operator>|</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			  <if_stmt><if>if <condition>(<expr><name>arg</name></expr>)</condition>
			    <block>{<block_content>
			      <if_stmt><if>if <condition>(<expr><name>option</name> <operator>!=</operator> <literal type="char">'s'</literal></expr>)</condition>
				<block>{<block_content>
				  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>prefix</name></name> <operator>=</operator> <call><name>canonicalise_opt</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
				      <call><name>strlen</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>MAXLABEL</name> <operator>-</operator> <name>INET_ADDRSTRLEN</name></expr>)</condition><block type="pseudo"><block_content>
				    <expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad prefix"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></if>
			      <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"local"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			      <else>else
				<block>{<block_content>
				  <comment type="block">/* local=/xxx.yyy.zzz.in-addr.arpa/ */</comment>
				  <expr_stmt><expr><call><name>domain_rev4</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				 				  
				  <comment type="block">/* local=/&lt;domain&gt;/ */</comment>
				  <comment type="block">/* d_raw can't failed to canonicalise here, checked above. */</comment>
				  <expr_stmt><expr><call><name>add_update_server</name><argument_list>(<argument><expr><name>SERV_LITERAL_ADDRESS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>d_raw</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			    </block_content>}</block></if></if_stmt>
			</block_content>}</block></if>
		      <if type="elseif">else if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>comma</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
			  <decl_stmt><decl><type><name>u64</name></type> <name>mask</name></decl>, <decl><type ref="prev"/><name>addrpart</name> <init>= <expr><call><name>addr6part</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			  <if_stmt><if>if <condition>(<expr><name>msize</name> <operator>&gt;</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>
			    <expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad prefix length"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			  <expr_stmt><expr><name>mask</name> <operator>=</operator> <operator>(</operator><literal type="number">1LLU</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">128</literal> <operator>-</operator> <name>msize</name><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1LLU</literal></expr>;</expr_stmt>

			  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>is6</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>prefixlen</name></name> <operator>=</operator> <name>msize</name></expr>;</expr_stmt>
			  
			  <comment type="block">/* prefix==64 overflows the mask calculation above */</comment>
			  <if_stmt><if>if <condition>(<expr><name>msize</name> <operator>&lt;=</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>
			    <expr_stmt><expr><name>mask</name> <operator>=</operator> <operator>(</operator><name>u64</name><operator>)</operator><operator>-</operator><literal type="number">1LL</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			  
			  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>end6</name></name> <operator>=</operator> <name><name>new</name><operator>-&gt;</operator><name>start6</name></name></expr>;</expr_stmt>
			  <expr_stmt><expr><call><name>setaddr6part</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>, <argument><expr><name>addrpart</name> <operator>&amp;</operator> <operator>~</operator><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			  <expr_stmt><expr><call><name>setaddr6part</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>end6</name></name></expr></argument>, <argument><expr><name>addrpart</name> <operator>|</operator> <name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			  
			  <if_stmt><if>if <condition>(<expr><name>arg</name></expr>)</condition>
			    <block>{<block_content>
			      <if_stmt><if>if <condition>(<expr><name>option</name> <operator>!=</operator> <literal type="char">'s'</literal></expr>)</condition>
				<block>{<block_content>
				  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>prefix</name></name> <operator>=</operator> <call><name>canonicalise_opt</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
				      <call><name>strlen</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>MAXLABEL</name> <operator>-</operator> <name>INET6_ADDRSTRLEN</name></expr>)</condition><block type="pseudo"><block_content>
				    <expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad prefix"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></if>	
			      <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"local"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			      <else>else 
				<block>{<block_content>
				  <comment type="block">/* generate the equivalent of
				     local=/xxx.yyy.zzz.ip6.arpa/ */</comment>
				  <expr_stmt><expr><call><name>domain_rev6</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				  
				  <comment type="block">/* local=/&lt;domain&gt;/ */</comment>
				  <comment type="block">/* d_raw can't failed to canonicalise here, checked above. */</comment>
				  <expr_stmt><expr><call><name>add_update_server</name><argument_list>(<argument><expr><name>SERV_LITERAL_ADDRESS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>d_raw</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			    </block_content>}</block></if></if_stmt>
			</block_content>}</block></if>
		      <else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		    </block_content>}</block></if>
		  <else>else
		    <block>{<block_content>
		      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prefstr</name></decl>;</decl_stmt>
		      <expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>comma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><name>prefstr</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		      <if_stmt><if>if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>comma</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
			  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>is6</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg</name></expr>)</condition><block type="pseudo"><block_content>
			    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name><name>new</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>s_addr</name></name></expr>;</expr_stmt></block_content></block></if>
			  <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			    <expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if>
		      <if type="elseif">else if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>comma</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
			  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>is6</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg</name></expr>)</condition><block type="pseudo"><block_content>
			    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>end6</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>, <argument><expr><name>IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			  <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>end6</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			    <expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if>
		      <if type="elseif">else if <condition>(<expr><name>option</name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition>
			<block>{<block_content>
			  <comment type="block">/* subnet from interface. */</comment>
			  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>interface</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>comma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>al</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			</block_content>}</block></if>
		      <else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		      
		      <if_stmt><if>if <condition>(<expr><name>option</name> <operator>!=</operator> <literal type="char">'s'</literal> <operator>&amp;&amp;</operator> <name>prefstr</name></expr>)</condition>
			<block>{<block_content>
			  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>prefix</name></name> <operator>=</operator> <call><name>canonicalise_opt</name><argument_list>(<argument><expr><name>prefstr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
			      <call><name>strlen</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>MAXLABEL</name> <operator>-</operator> <name>INET_ADDRSTRLEN</name></expr>)</condition><block type="pseudo"><block_content>
			    <expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad prefix"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		    </block_content>}</block></else></if_stmt>

		  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>domain</name></name> <operator>=</operator> <call><name>canonicalise_opt</name><argument_list>(<argument><expr><name>d_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><name>option</name>  <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition>
		    <block>{<block_content>
		      <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>cond_domain</name></name></expr>;</expr_stmt>
		      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>cond_domain</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
		    </block_content>}</block></if>
		  <else>else
		    <block>{<block_content>
		      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>star</name></decl>;</decl_stmt>
		      <if_stmt><if>if <condition>(<expr><name><name>new</name><operator>-&gt;</operator><name>prefix</name></name> <operator>&amp;&amp;</operator>
			  <operator>(</operator><name>star</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call><operator>)</operator>
			  <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>star</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
			  <expr_stmt><expr><operator>*</operator><name>star</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>indexed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			  <if_stmt><if>if <condition>(<expr><name><name>new</name><operator>-&gt;</operator><name>is6</name></name> <operator>&amp;&amp;</operator> <name><name>new</name><operator>-&gt;</operator><name>prefixlen</name></name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>
			    <expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"prefix length too small"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		      <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>synth_domains</name></name></expr>;</expr_stmt>
		      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>synth_domains</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
		    </block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
	      <if type="elseif">else if <condition>(<expr><name>option</name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>domain_suffix</name></name> <operator>=</operator> <call><name>canonicalise_opt</name><argument_list>(<argument><expr><name>d_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	      <else>else<block type="pseudo"><block_content> 
		<expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	    </block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>
      <break>break;</break>
      
    <case>case <expr><name>LOPT_CPE_ID</name></expr>:</case> <comment type="block">/* --add-dns-client */</comment>
      <if_stmt><if>if <condition>(<expr><name>arg</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dns_client_id</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <break>break;</break>

    <case>case <expr><name>LOPT_UMBRELLA</name></expr>:</case> <comment type="block">/* --umbrella */</comment>
      <expr_stmt><expr><call><name>set_option_bool</name><argument_list>(<argument><expr><name>OPT_UMBRELLA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <while>while <condition>(<expr><name>arg</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"deviceid:"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>u</name> <init>= <expr><name><name>daemon</name><operator>-&gt;</operator><name>umbrella_device</name></name></expr></init></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name>char</name></type> <name><name>word</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
	      
	      <expr_stmt><expr><name>arg</name> <operator>+=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      
	      <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>arg</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isxdigit</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
	      
	      <expr_stmt><expr><call><name>set_option_bool</name><argument_list>(<argument><expr><name>OPT_UMBRELLA_DEVID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      
	      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>umbrella_device</name></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>arg</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><operator>*</operator><name>u</name><operator>++</operator> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	    </block_content>}</block></if>
	  <if type="elseif">else if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"orgid:"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strtoul_check</name><argument_list>(<argument><expr><name>arg</name><operator>+</operator><literal type="number">6</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>umbrella_org</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></if>
	  <if type="elseif">else if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"assetid:"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strtoul_check</name><argument_list>(<argument><expr><name>arg</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>umbrella_asset</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	  
	  <expr_stmt><expr><name>arg</name> <operator>=</operator> <name>comma</name></expr>;</expr_stmt>
	</block_content>}</block></while>
      <break>break;</break>
      
    <case>case <expr><name>LOPT_ADD_MAC</name></expr>:</case> <comment type="block">/* --add-mac */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>set_option_bool</name><argument_list>(<argument><expr><name>OPT_ADD_MAC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else
	<block>{<block_content>
	  <expr_stmt><expr><call><name>unhide_metas</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"base64"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>set_option_bool</name><argument_list>(<argument><expr><name>OPT_MAC_B64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	  <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>set_option_bool</name><argument_list>(<argument><expr><name>OPT_MAC_HEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></else></if_stmt>
      <break>break;</break>

    <case>case <expr><literal type="char">'u'</literal></expr>:</case>  <comment type="block">/* --user */</comment>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>username</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
      
    <case>case <expr><literal type="char">'g'</literal></expr>:</case>  <comment type="block">/* --group */</comment>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>groupname</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>group_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <break>break;</break>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP</name></cpp:ifdef>
    <case>case <expr><name>LOPT_SCRIPTUSR</name></expr>:</case> <comment type="block">/* --scriptuser */</comment>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>scriptuser</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      
    <case>case <expr><literal type="char">'i'</literal></expr>:</case>  <comment type="block">/* --interface */</comment>
      <do>do <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>iname</name></name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>iname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>if_names</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>if_names</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	<comment type="block">/* new-&gt;name may be NULL if someone does
	   "interface=" to disable all interfaces except loop. */</comment>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>comma</name></expr>;</expr_stmt>
      </block_content>}</block> while <condition>(<expr><name>arg</name></expr>)</condition>;</do>
      <break>break;</break>
      
    <case>case <expr><name>LOPT_TFTP</name></expr>:</case> <comment type="block">/* --enable-tftp */</comment>
      <expr_stmt><expr><call><name>set_option_bool</name><argument_list>(<argument><expr><name>OPT_TFTP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg</name></expr>)</condition><block type="pseudo"><block_content>
	<break>break;</break></block_content></block></if></if_stmt>
      <comment type="block">/* fall through */</comment>

    <case>case <expr><literal type="char">'I'</literal></expr>:</case>  <comment type="block">/* --except-interface */</comment>
    <case>case <expr><literal type="char">'2'</literal></expr>:</case>  <comment type="block">/* --no-dhcp-interface */</comment>
      <do>do <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>iname</name></name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>iname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>option</name> <operator>==</operator> <literal type="char">'I'</literal></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>if_except</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>if_except</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	  </block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>option</name> <operator>==</operator> <name>LOPT_TFTP</name></expr>)</condition>
	   <block>{<block_content>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>tftp_interfaces</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>tftp_interfaces</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	  </block_content>}</block></if>
	<else>else
	  <block>{<block_content>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_except</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_except</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	  </block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>comma</name></expr>;</expr_stmt>
      </block_content>}</block> while <condition>(<expr><name>arg</name></expr>)</condition>;</do>
      <break>break;</break>
      
    <case>case <expr><literal type="char">'B'</literal></expr>:</case>  <comment type="block">/* --bogus-nxdomain */</comment>
    <case>case <expr><name>LOPT_IGNORE_ADDR</name></expr>:</case> <comment type="block">/* --ignore-address */</comment>
     <block>{<block_content>
	<decl_stmt><decl><type><name><name>union</name> <name>all_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>prefix</name></decl>, <decl><type ref="prev"/><name>is6</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>bogus_addr</name></name> <modifier>*</modifier></type><name>baddr</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><call><name>unhide_metas</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg</name> <operator>||</operator>
	    <operator>(</operator><operator>(</operator><name>comma</name> <operator>=</operator> <call><name>split_chr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>atoi_check</name><argument_list>(<argument><expr><name>comma</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prefix</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>addr6</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name>is6</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>addr4</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>comma</name></expr>)</condition>
	  <block>{<block_content>
	    <if_stmt><if>if <condition>(<expr><name>is6</name></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt></block_content></block></if>
	    <else>else<block type="pseudo"><block_content>
	      <expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
	  </block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>prefix</name> <operator>&gt;</operator> <literal type="number">128</literal> <operator>||</operator> <operator>(</operator><operator>!</operator><name>is6</name> <operator>&amp;&amp;</operator> <name>prefix</name> <operator>&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<expr_stmt><expr><name>baddr</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>bogus_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>option</name> <operator>==</operator> <literal type="char">'B'</literal></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name><name>baddr</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>bogus_addr</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>bogus_addr</name></name> <operator>=</operator> <name>baddr</name></expr>;</expr_stmt>
	  </block_content>}</block></if>
	<else>else
	  <block>{<block_content>
	    <expr_stmt><expr><name><name>baddr</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>ignore_addr</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>ignore_addr</name></name> <operator>=</operator> <name>baddr</name></expr>;</expr_stmt>
	  </block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>baddr</name><operator>-&gt;</operator><name>prefix</name></name> <operator>=</operator> <name>prefix</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>baddr</name><operator>-&gt;</operator><name>is6</name></name> <operator>=</operator> <name>is6</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>baddr</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
	<break>break;</break>
     </block_content>}</block>
      
    <case>case <expr><literal type="char">'a'</literal></expr>:</case>  <comment type="block">/* --listen-address */</comment>
    <case>case <expr><name>LOPT_AUTHPEER</name></expr>:</case> <comment type="block">/* --auth-peer */</comment>
      <do>do <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>iname</name></name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>iname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>unhide_metas</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SOCKADDR_SA_LEN</name></cpp:ifdef>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	  </block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>arg</name> <operator>&amp;&amp;</operator> <call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_flowinfo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_scope_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SOCKADDR_SA_LEN</name></cpp:ifdef>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>in6</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	  </block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>option</name> <operator>==</operator> <literal type="char">'a'</literal></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>if_addrs</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>if_addrs</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	  </block_content>}</block></if>
	<else>else
	  <block>{<block_content>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>auth_peers</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>auth_peers</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	  </block_content>}</block></else></if_stmt> 
	<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>comma</name></expr>;</expr_stmt>
      </block_content>}</block> while <condition>(<expr><name>arg</name></expr>)</condition>;</do>
      <break>break;</break>
      
    <case>case <expr><name>LOPT_NO_REBIND</name></expr>:</case> <comment type="block">/*  --rebind-domain-ok */</comment>
      <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>rebind_domain</name></name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>unhide_metas</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<do>do <block>{<block_content>
	  <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split_chr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct  <name>rebind_domain</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>domain</name></name> <operator>=</operator> <call><name>canonicalise_opt</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>no_rebind</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>no_rebind</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>arg</name> <operator>=</operator> <name>comma</name></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>arg</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>arg</name></expr>)</condition>;</do>

	<break>break;</break>
      </block_content>}</block>
      
    <case>case <expr><literal type="char">'S'</literal></expr>:</case>            <comment type="block">/*  --server */</comment>
    <case>case <expr><name>LOPT_LOCAL</name></expr>:</case>     <comment type="block">/*  --local */</comment>
    <case>case <expr><literal type="char">'A'</literal></expr>:</case>            <comment type="block">/*  --address */</comment>
      <block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lastdomain</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>domain</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cur_domain</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>u16</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>union</name> <name>all_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>union</name> <name>mysockaddr</name></name></type> <name>serv_addr</name></decl>, <decl><type ref="prev"/><name>source_addr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>interface</name><index>[<expr><name>IF_NAMESIZE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name><name>struct</name> <name>server_details</name></name></type> <name>sdetails</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>sdetails</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <operator>&amp;</operator><name>serv_addr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sdetails</name><operator>.</operator><name>source_addr</name></name> <operator>=</operator> <operator>&amp;</operator><name>source_addr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sdetails</name><operator>.</operator><name>interface</name></name> <operator>=</operator> <name>interface</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sdetails</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <operator>&amp;</operator><name>flags</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>unhide_metas</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<comment type="block">/* split the domain args, if any and skip to the end of them. */</comment>
	<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition>
	  <block>{<block_content>
	    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>

	    <expr_stmt><expr><name>domain</name> <operator>=</operator> <name>lastdomain</name> <operator>=</operator> <operator>++</operator><name>arg</name></expr>;</expr_stmt>
	    
	    <while>while <condition>(<expr><operator>(</operator><name>last</name> <operator>=</operator> <call><name>split_chr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name>lastdomain</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>last</name></expr>;</expr_stmt>
	      </block_content>}</block></while>
	  </block_content>}</block></if></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>arg</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>SERV_LITERAL_ADDRESS</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>option</name> <operator>==</operator> <literal type="char">'A'</literal></expr>)</condition>
	  <block>{<block_content>
	    <comment type="block">/* # as literal address means return zero address for 4 and 6 */</comment>
	    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"#"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>SERV_ALL_ZEROS</name> <operator>|</operator> <name>SERV_LITERAL_ADDRESS</name></expr>;</expr_stmt></block_content></block></if>
	    <if type="elseif">else if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>addr4</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>SERV_4ADDR</name> <operator>|</operator> <name>SERV_LITERAL_ADDRESS</name></expr>;</expr_stmt></block_content></block></if>
	    <if type="elseif">else if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>addr6</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>SERV_6ADDR</name> <operator>|</operator> <name>SERV_LITERAL_ADDRESS</name></expr>;</expr_stmt></block_content></block></if>
	    <else>else<block type="pseudo"><block_content>
	      <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Bad address in --address"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	  </block_content>}</block></if>
	<else>else
	  <block>{<block_content>
	    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>parse_server</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sdetails</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  </block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>servers_only</name> <operator>&amp;&amp;</operator> <name>option</name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SERV_FROM_FILE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>cur_domain</name> <operator>=</operator> <name>domain</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SERV_LITERAL_ADDRESS</name><operator>)</operator> <operator>||</operator> <call><name>parse_server_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sdetails</name></expr></argument>)</argument_list></call></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name>cur_domain</name> <operator>=</operator> <name>domain</name></expr>;</expr_stmt>

	    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SERV_LITERAL_ADDRESS</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>err</name> <operator>=</operator> <call><name>parse_server_addr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sdetails</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	    <comment type="block">/* When source is set only use DNS records of the same type and skip all others */</comment>
	    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SERV_HAS_SOURCE</name> <operator>&amp;&amp;</operator> <name><name>sdetails</name><operator>.</operator><name>addr_type</name></name> <operator>!=</operator> <name><name>sdetails</name><operator>.</operator><name>source_addr</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name></expr>)</condition><block type="pseudo"><block_content>
	      <continue>continue;</continue></block_content></block></if></if_stmt>

	    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
	      <block>{<block_content>
		<comment type="block">/* server=//1.2.3.4 is special. */</comment>
		<if_stmt><if>if <condition>(<expr><name>lastdomain</name></expr>)</condition>
		  <block>{<block_content>
		    <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>cur_domain</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		      <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SERV_FOR_NODOTS</name></expr>;</expr_stmt></block_content></block></if>
		    <else>else<block type="pseudo"><block_content>
		      <expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>SERV_FOR_NODOTS</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		    
		    <comment type="block">/* address=/#/ matches the same as without domain */</comment>
		    <if_stmt><if>if <condition>(<expr><name>option</name> <operator>==</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name><name>cur_domain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal> <operator>&amp;&amp;</operator> <name><name>cur_domain</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		      <expr_stmt><expr><name><name>cur_domain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  </block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>add_update_server</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name><name>sdetails</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>sdetails</name><operator>.</operator><name>source_addr</name></name></expr></argument>, <argument><expr><name><name>sdetails</name><operator>.</operator><name>interface</name></name></expr></argument>, <argument><expr><name>cur_domain</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lastdomain</name> <operator>||</operator> <name>cur_domain</name> <operator>==</operator> <name>lastdomain</name></expr>)</condition><block type="pseudo"><block_content>
		  <break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>cur_domain</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>cur_domain</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	      </block_content>}</block></while>

	    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SERV_LITERAL_ADDRESS</name></expr>)</condition><block type="pseudo"><block_content>
	      <break>break;</break></block_content></block></if></if_stmt>
	  </block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name><name>sdetails</name><operator>.</operator><name>resolved</name></name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name><name>sdetails</name><operator>.</operator><name>hostinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
     	<break>break;</break>
      </block_content>}</block>

    <case>case <expr><name>LOPT_REV_SERV</name></expr>:</case> <comment type="block">/* --rev-server */</comment>
      <block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr4</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>addr6</name></decl>;</decl_stmt>
 	
	<expr_stmt><expr><call><name>unhide_metas</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<expr_stmt><expr><name>comma</name><operator>=</operator><call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>string</name> <operator>=</operator> <call><name>split_chr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>atoi_check</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name>size</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr4</name></expr></argument>)</argument_list></call></expr>)</condition>
	  <block>{<block_content>
	   <if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	     <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	   <if_stmt><if>if <condition>(<expr><operator>(</operator><name>string</name> <operator>=</operator> <call><name>domain_rev4</name><argument_list>(<argument><expr><name>servers_only</name></expr></argument>, <argument><expr><name>comma</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr4</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  </block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr6</name></expr></argument>)</argument_list></call></expr>)</condition>
	  <block>{<block_content>
	     <if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	       <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	     <if_stmt><if>if <condition>(<expr><operator>(</operator><name>string</name> <operator>=</operator> <call><name>domain_rev6</name><argument_list>(<argument><expr><name>servers_only</name></expr></argument>, <argument><expr><name>comma</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr6</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  </block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	
	<break>break;</break>
      </block_content>}</block>

    <case>case <expr><name>LOPT_IPSET</name></expr>:</case> <comment type="block">/* --ipset */</comment>
    <case>case <expr><name>LOPT_NFTSET</name></expr>:</case> <comment type="block">/* --nftset */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_IPSET</name></cpp:ifndef>
      <if_stmt><if>if <condition>(<expr><name>option</name> <operator>==</operator> <name>LOPT_IPSET</name></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"recompile with HAVE_IPSET defined to enable ipset directives"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_NFTSET</name></cpp:ifndef>
      <if_stmt><if>if <condition>(<expr><name>option</name> <operator>==</operator> <name>LOPT_NFTSET</name></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"recompile with HAVE_NFTSET defined to enable nftset directives"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

      <block>{<block_content>
	 <decl_stmt><decl><type><name><name>struct</name> <name>ipsets</name></name></type> <name>ipsets_head</name></decl>;</decl_stmt>
	 <decl_stmt><decl><type><name><name>struct</name> <name>ipsets</name></name> <modifier>*</modifier></type><name>ipsets</name> <init>= <expr><operator>&amp;</operator><name>ipsets_head</name></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name><name>struct</name> <name>ipsets</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>daemon_sets</name> <init>=
           <expr><ternary><condition><expr><operator>(</operator><name>option</name> <operator>==</operator> <name>LOPT_IPSET</name><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>ipsets</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>nftsets</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	 <decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
	 <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
	 <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>sets</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>sets_pos</name></decl>;</decl_stmt>
	 <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ipsets</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ipsets</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <expr_stmt><expr><call><name>unhide_metas</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <if_stmt><if>if <condition>(<expr><name>arg</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> 
	   <block>{<block_content>
	     <expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>
	     <while>while <condition>(<expr><operator>(</operator><name>end</name> <operator>=</operator> <call><name>split_chr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> 
	       <block>{<block_content>
		 <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>domain</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		 <comment type="block">/* elide leading dots - they are implied in the search algorithm */</comment>
		 <while>while <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
		   <expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
		 <comment type="block">/* # matches everything and becomes a zero length domain string */</comment>
		 <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"#"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><operator>*</operator><name>arg</name></expr>)</condition><block type="pseudo"><block_content>
		   <expr_stmt><expr><name>domain</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if>
		 <if type="elseif">else if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>domain</name> <operator>=</operator> <call><name>canonicalise_opt</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		   <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		 <expr_stmt><expr><name><name>ipsets</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ipsets</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 <expr_stmt><expr><name>ipsets</name> <operator>=</operator> <name><name>ipsets</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		 <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ipsets</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ipsets</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 <expr_stmt><expr><name><name>ipsets</name><operator>-&gt;</operator><name>domain</name></name> <operator>=</operator> <name>domain</name></expr>;</expr_stmt>
		 <expr_stmt><expr><name>arg</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
	       </block_content>}</block></while>
	   </block_content>}</block></if> 
	 <else>else 
	   <block>{<block_content>
	     <expr_stmt><expr><name><name>ipsets</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ipsets</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	     <expr_stmt><expr><name>ipsets</name> <operator>=</operator> <name><name>ipsets</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	     <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ipsets</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ipsets</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	     <expr_stmt><expr><name><name>ipsets</name><operator>-&gt;</operator><name>domain</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
	   </block_content>}</block></else></if_stmt>
	 
	 <if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>arg</name></expr>)</condition><block type="pseudo"><block_content>
	   <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	 
	 <for>for <control>(<init><expr><name>size</name> <operator>=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>end</name> <operator>=</operator> <name>arg</name></expr>;</init> <condition><expr><operator>*</operator><name>end</name></expr>;</condition> <incr><expr><operator>++</operator><name>end</name></expr></incr>)</control><block type="pseudo"><block_content> 
	   <if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
	       <expr_stmt><expr><operator>++</operator><name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
     
	 <expr_stmt><expr><name>sets</name> <operator>=</operator> <name>sets_pos</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 
	 <do>do <block>{<block_content>
	   <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	   <expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	   <expr_stmt><expr><operator>*</operator><name>sets_pos</name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	   <comment type="block">/* Use '#' to delimit table and set */</comment>
	   <if_stmt><if>if <condition>(<expr><name>option</name> <operator>==</operator> <name>LOPT_NFTSET</name></expr>)</condition><block type="pseudo"><block_content>
	     <while>while <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><operator>*</operator><name>sets_pos</name></expr></argument>, <argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	       <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>
	   <expr_stmt><expr><name>sets_pos</name><operator>++</operator></expr>;</expr_stmt>
	   <expr_stmt><expr><name>arg</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
	 </block_content>}</block> while <condition>(<expr><name>end</name></expr>)</condition>;</do>
	 <expr_stmt><expr><operator>*</operator><name>sets_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	 <for>for <control>(<init><expr><name>ipsets</name> <operator>=</operator> <operator>&amp;</operator><name>ipsets_head</name></expr>;</init> <condition><expr><name><name>ipsets</name><operator>-&gt;</operator><name>next</name></name></expr>;</condition> <incr><expr><name>ipsets</name> <operator>=</operator> <name><name>ipsets</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	   <expr_stmt><expr><name><name>ipsets</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>sets</name></name> <operator>=</operator> <name>sets</name></expr>;</expr_stmt></block_content></block></for>
	 <expr_stmt><expr><name><name>ipsets</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>*</operator><name>daemon_sets</name></expr>;</expr_stmt>
	 <expr_stmt><expr><operator>*</operator><name>daemon_sets</name> <operator>=</operator> <name><name>ipsets_head</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
	 
	 <break>break;</break>
      </block_content>}</block>
      
    <case>case <expr><name>LOPT_CMARK_ALST_EN</name></expr>:</case> <comment type="block">/* --connmark-allowlist-enable */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_CONNTRACK</name></cpp:ifndef>
      <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"recompile with HAVE_CONNTRACK defined to enable connmark-allowlist directives"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <block>{<block_content>
	<decl_stmt><decl><type><name>u32</name></type> <name>mask</name> <init>= <expr><name>UINT32_MAX</name></expr></init></decl>;</decl_stmt>
	
	<if_stmt><if>if <condition>(<expr><name>arg</name></expr>)</condition><block type="pseudo"><block_content>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strtoul_check</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>mask</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
	
	<expr_stmt><expr><call><name>set_option_bool</name><argument_list>(<argument><expr><name>OPT_CMARK_ALST_EN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>allowlist_mask</name></name> <operator>=</operator> <name>mask</name></expr>;</expr_stmt>
	<break>break;</break>
      </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      
    <case>case <expr><name>LOPT_CMARK_ALST</name></expr>:</case> <comment type="block">/* --connmark-allowlist */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_CONNTRACK</name></cpp:ifndef>
	<expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"recompile with HAVE_CONNTRACK defined to enable connmark-allowlist directives"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>allowlist</name></name> <modifier>*</modifier></type><name>allowlists</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>patterns</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>patterns_pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>u32</name></type> <name>mark</name></decl>, <decl><type ref="prev"/><name>mask</name> <init>= <expr><name>UINT32_MAX</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>num_patterns</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>m</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>separator</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>unhide_metas</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>c</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <operator>*</operator><name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<while>while <condition>(<expr><operator>*</operator><name>c</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>c</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition>
	  <block>{<block_content>
	    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition>
	      <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>m</name></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	        <expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>++</operator><name>c</name></expr>;</expr_stmt>
	      </block_content>}</block></if></if_stmt>
	    <if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <operator>*</operator><name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    <expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
	  </block_content>}</block></while>
	<expr_stmt><expr><name>separator</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>separator</name></expr>)</condition><block type="pseudo"><block_content>
	  <break>break;</break></block_content></block></if></if_stmt>
	<while>while <condition>(<expr><name>c</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>c</name></expr>)</condition>
	  <block>{<block_content>
	    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><operator>++</operator><name>c</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    <if_stmt><if>if <condition>(<expr><name>end</name></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_valid_dns_name_pattern</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    <if_stmt><if>if <condition>(<expr><name>end</name></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    <if_stmt><if>if <condition>(<expr><name>num_patterns</name> <operator>&gt;=</operator> <name>UINT16_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    <expr_stmt><expr><name>num_patterns</name><operator>++</operator></expr>;</expr_stmt>
	    <expr_stmt><expr><name>c</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
	  </block_content>}</block></while>
	
	<expr_stmt><expr><operator>*</operator><name>separator</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strtoul_check</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mark</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>mark</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>mark</name></expr></argument> &gt;</argument_list></name> <name>UINT32_MAX</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>m</name></expr>)</condition><block type="pseudo"><block_content>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strtoul_check</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>mask</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>mask</name></expr></argument> &gt;</argument_list></name> <name>UINT32_MAX</name> <operator>||</operator> <operator>(</operator><name>mark</name> <operator>&amp;</operator> <operator>~</operator><name>mask</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>num_patterns</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><operator>*</operator><name>separator</name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<for>for <control>(<init><expr><name>allowlists</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>allowlists</name></name></expr>;</init> <condition><expr><name>allowlists</name></expr>;</condition> <incr><expr><name>allowlists</name> <operator>=</operator> <name><name>allowlists</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	  <if_stmt><if>if <condition>(<expr><name><name>allowlists</name><operator>-&gt;</operator><name>mark</name></name> <operator>==</operator> <name>mark</name> <operator>&amp;&amp;</operator> <name><name>allowlists</name><operator>-&gt;</operator><name>mask</name></name> <operator>==</operator> <name>mask</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
	
	<expr_stmt><expr><name>patterns</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><operator>(</operator><name>num_patterns</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>patterns</name></expr>)</condition><block type="pseudo"><block_content>
	  <goto>goto <name>fail_cmark_allowlist</name>;</goto></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>patterns_pos</name> <operator>=</operator> <name>patterns</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>c</name> <operator>=</operator> <name>separator</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>c</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>c</name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><operator>++</operator><name>c</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	  <if_stmt><if>if <condition>(<expr><name>end</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>patterns_pos</name><operator>++</operator> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <goto>goto <name>fail_cmark_allowlist</name>;</goto></block_content></block></if></if_stmt>
	  <if_stmt><if>if <condition>(<expr><name>end</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  <expr_stmt><expr><name>c</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><operator>*</operator><name>patterns_pos</name><operator>++</operator> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	
	<expr_stmt><expr><name>allowlists</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>allowlist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>allowlists</name></expr>)</condition><block type="pseudo"><block_content>
	  <goto>goto <name>fail_cmark_allowlist</name>;</goto></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>allowlists</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>allowlist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>allowlists</name><operator>-&gt;</operator><name>mark</name></name> <operator>=</operator> <name>mark</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>allowlists</name><operator>-&gt;</operator><name>mask</name></name> <operator>=</operator> <name>mask</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>allowlists</name><operator>-&gt;</operator><name>patterns</name></name> <operator>=</operator> <name>patterns</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>allowlists</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>allowlists</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>allowlists</name></name> <operator>=</operator> <name>allowlists</name></expr>;</expr_stmt>
	<break>break;</break>
	
      <label><name>fail_cmark_allowlist</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>patterns</name></expr>)</condition>
	  <block>{<block_content>
	    <for>for <control>(<init><expr><name>patterns_pos</name> <operator>=</operator> <name>patterns</name></expr>;</init> <condition><expr><operator>*</operator><name>patterns_pos</name></expr>;</condition> <incr><expr><name>patterns_pos</name><operator>++</operator></expr></incr>)</control>
	      <block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>patterns_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>patterns_pos</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	      </block_content>}</block></for>
	    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>patterns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>patterns</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>allowlists</name></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>allowlists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>allowlists</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      
    <case>case <expr><literal type="char">'c'</literal></expr>:</case>  <comment type="block">/* --cache-size */</comment>
      <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
	
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>atoi_check</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else
	  <block>{<block_content>
	    <comment type="block">/* zero is OK, and means no caching. */</comment>
	    
	    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	    <comment type="block">/* Note that for very large cache sizes, the malloc()
	       will overflow. For the size of the cache record
	       at the time this was noted, the value of "very large"
               was 46684428. Limit to an order of magnitude less than
	       that to be safe from changes to the cache record. */</comment>
	    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">5000000</literal></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">5000000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>cachesize</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	  </block_content>}</block></else></if_stmt>
	<break>break;</break>
      </block_content>}</block>
      
    <case>case <expr><literal type="char">'p'</literal></expr>:</case>  <comment type="block">/* --port */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>atoi_check16</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <break>break;</break>
    
    <case>case <expr><name>LOPT_MINPORT</name></expr>:</case>  <comment type="block">/* --min-port */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>atoi_check16</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>min_port</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <break>break;</break>

    <case>case <expr><name>LOPT_MAXPORT</name></expr>:</case>  <comment type="block">/* --max-port */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>atoi_check16</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>max_port</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <break>break;</break>

    <case>case <expr><literal type="char">'0'</literal></expr>:</case>  <comment type="block">/* --dns-forward-max */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>atoi_check</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>ftabsize</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <break>break;</break>  
    
    <case>case <expr><literal type="char">'q'</literal></expr>:</case> <comment type="block">/* --log-queries */</comment>
      <expr_stmt><expr><call><name>set_option_bool</name><argument_list>(<argument><expr><name>OPT_LOG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>arg</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"extra"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>set_option_bool</name><argument_list>(<argument><expr><name>OPT_EXTRALOG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <break>break;</break>

    <case>case <expr><name>LOPT_MAX_LOGS</name></expr>:</case>  <comment type="block">/* --log-async */</comment>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>max_logs</name></name> <operator>=</operator> <name>LOG_MAX</name></expr>;</expr_stmt> <comment type="block">/* default */</comment>
      <if_stmt><if>if <condition>(<expr><name>arg</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>atoi_check</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>max_logs</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>max_logs</name></name> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>max_logs</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <break>break;</break>  

    <case>case <expr><literal type="char">'P'</literal></expr>:</case> <comment type="block">/* --edns-packet-max */</comment>
      <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>atoi_check</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>edns_pktsz</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name>i</name></expr>;</expr_stmt>	
	<break>break;</break>
      </block_content>}</block>
      
    <case>case <expr><literal type="char">'Q'</literal></expr>:</case>  <comment type="block">/* --query-port */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>atoi_check16</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>query_port</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <comment type="block">/* if explicitly set to zero, use single OS ephemeral port
	 and disable random ports */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>query_port</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>osport</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <break>break;</break>

    <case>case <expr><name>LOPT_RANDPORT_LIM</name></expr>:</case> <comment type="block">/* --port-limit */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>atoi_check</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>randport_limit</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name><name>daemon</name><operator>-&gt;</operator><name>randport_limit</name></name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <break>break;</break>
      
    <case>case <expr><literal type="char">'T'</literal></expr>:</case>         <comment type="block">/* --local-ttl */</comment>
    <case>case <expr><name>LOPT_NEGTTL</name></expr>:</case> <comment type="block">/* --neg-ttl */</comment>
    <case>case <expr><name>LOPT_MAXTTL</name></expr>:</case> <comment type="block">/* --max-ttl */</comment>
    <case>case <expr><name>LOPT_MINCTTL</name></expr>:</case> <comment type="block">/* --min-cache-ttl */</comment>
    <case>case <expr><name>LOPT_MAXCTTL</name></expr>:</case> <comment type="block">/* --max-cache-ttl */</comment>
    <case>case <expr><name>LOPT_AUTHTTL</name></expr>:</case> <comment type="block">/* --auth-ttl */</comment>
    <case>case <expr><name>LOPT_DHCPTTL</name></expr>:</case> <comment type="block">/* --dhcp-ttl */</comment>
      <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ttl</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>atoi_check</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ttl</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>option</name> <operator>==</operator> <name>LOPT_NEGTTL</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>neg_ttl</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>ttl</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>option</name> <operator>==</operator> <name>LOPT_MAXTTL</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>max_ttl</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>ttl</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>option</name> <operator>==</operator> <name>LOPT_MINCTTL</name></expr>)</condition>
	  <block>{<block_content>
	    <if_stmt><if>if <condition>(<expr><name>ttl</name> <operator>&gt;</operator> <name>TTL_FLOOR_LIMIT</name></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>ttl</name> <operator>=</operator> <name>TTL_FLOOR_LIMIT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>min_cache_ttl</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>ttl</name></expr>;</expr_stmt>
	  </block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>option</name> <operator>==</operator> <name>LOPT_MAXCTTL</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>max_cache_ttl</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>ttl</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>option</name> <operator>==</operator> <name>LOPT_AUTHTTL</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>auth_ttl</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>ttl</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>option</name> <operator>==</operator> <name>LOPT_DHCPTTL</name></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_ttl</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>ttl</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>use_dhcp_ttl</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	  </block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>local_ttl</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>ttl</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<break>break;</break>
      </block_content>}</block>

    <case>case <expr><name>LOPT_FAST_RETRY</name></expr>:</case>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>fast_retry_timeout</name></name> <operator>=</operator> <name>TIMEOUT</name></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>fast_retry_time</name></name> <operator>=</operator> <name>DEFAULT_FAST_RETRY</name></expr>;</expr_stmt></block_content></block></if>
      <else>else
	<block>{<block_content>
	  <decl_stmt><decl><type><name>int</name></type> <name>retry</name></decl>;</decl_stmt>
	  
	  <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>atoi_check</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>retry</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>retry</name> <operator>&lt;</operator> <literal type="number">50</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>fast_retry_time</name></name> <operator>=</operator> <name>retry</name></expr>;</expr_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name>comma</name></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>atoi_check</name><argument_list>(<argument><expr><name>comma</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>retry</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>fast_retry_timeout</name></name> <operator>=</operator> <name>retry</name><operator>/</operator><literal type="number">1000</literal></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
      <break>break;</break>
            
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP</name></cpp:ifdef>
    <case>case <expr><literal type="char">'X'</literal></expr>:</case> <comment type="block">/* --dhcp-lease-max */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>atoi_check</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_max</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_TFTP</name></cpp:ifdef>
    <case>case <expr><name>LOPT_TFTP_MAX</name></expr>:</case>  <comment type="block">/*  --tftp-max */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>atoi_check</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>tftp_max</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <break>break;</break>  

    <case>case <expr><name>LOPT_TFTP_MTU</name></expr>:</case>  <comment type="block">/*  --tftp-mtu */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>atoi_check</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>tftp_mtu</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <break>break;</break>

    <case>case <expr><name>LOPT_PREFIX</name></expr>:</case> <comment type="block">/* --tftp-prefix */</comment>
      <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>comma</name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name><name>struct</name> <name>tftp_prefix</name></name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>tftp_prefix</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>interface</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>comma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>prefix</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>if_prefix</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>if_prefix</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	</block_content>}</block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>tftp_prefix</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
      <break>break;</break>

    <case>case <expr><name>LOPT_TFTPPORTS</name></expr>:</case> <comment type="block">/* --tftp-port-range */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> 
	  <operator>!</operator><call><name>atoi_check16</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>start_tftp_port</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
	  <operator>!</operator><call><name>atoi_check16</name><argument_list>(<argument><expr><name>comma</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>end_tftp_port</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad port range"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>start_tftp_port</name></name> <operator>&gt;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>end_tftp_port</name></name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><name><name>daemon</name><operator>-&gt;</operator><name>start_tftp_port</name></name></expr></init></decl>;</decl_stmt>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>start_tftp_port</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>end_tftp_port</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>end_tftp_port</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt> 
      
      <break>break;</break>

    <case>case <expr><name>LOPT_APREF</name></expr>:</case> <comment type="block">/* --tftp-unique-root */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg</name> <operator>||</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"ip"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>set_option_bool</name><argument_list>(<argument><expr><name>OPT_TFTP_APREF_IP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"mac"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>set_option_bool</name><argument_list>(<argument><expr><name>OPT_TFTP_APREF_MAC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
      <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	      
    <case>case <expr><name>LOPT_BRIDGE</name></expr>:</case>   <comment type="block">/* --bridge-interface */</comment>
      <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>dhcp_bridge</name></name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>IF_NAMESIZE</name> <operator>-</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad bridge-interface"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>new</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>bridges</name></name></expr>;</init> <condition><expr><name>new</name></expr>;</condition> <incr><expr><name>new</name> <operator>=</operator> <name><name>new</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	  <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>iface</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new</name></expr>)</condition>
	  <block>{<block_content>
	     <expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dhcp_bridge</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	     <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>iface</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	     <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>alias</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	     <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>bridges</name></name></expr>;</expr_stmt>
	     <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>bridges</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt>
	
	<do>do <block>{<block_content>
	  <expr_stmt><expr><name>arg</name> <operator>=</operator> <name>comma</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>IF_NAMESIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_bridge</name></name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dhcp_bridge</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
	      <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>new</name><operator>-&gt;</operator><name>alias</name></name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>alias</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>iface</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block> while <condition>(<expr><name>comma</name></expr>)</condition>;</do>
	
	<break>break;</break>
      </block_content>}</block>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP</name></cpp:ifdef>
    <case>case <expr><name>LOPT_SHARED_NET</name></expr>:</case> <comment type="block">/* --shared-network */</comment>
      <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>shared_network</name></name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>shared_network</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>shared_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>if_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	  <block>{<block_content>
	  <label><name>snerr</name>:</label>
	    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad shared-network"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>comma</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>shared_addr</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	  <block>{<block_content>
	    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>match_addr</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<operator>!</operator><operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>if_index</name></name> <operator>=</operator> <call><name>if_nametoindex</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	      <goto>goto <name>snerr</name>;</goto></block_content></block></if></if_stmt>
	  </block_content>}</block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
	<if type="elseif">else if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>comma</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>shared_addr6</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	  <block>{<block_content>
	    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>match_addr6</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<operator>!</operator><operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>if_index</name></name> <operator>=</operator> <call><name>if_nametoindex</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	      <goto>goto <name>snerr</name>;</goto></block_content></block></if></if_stmt>
	  </block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<else>else<block type="pseudo"><block_content>
	  <goto>goto <name>snerr</name>;</goto></block_content></block></else></if_stmt>

	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>shared_networks</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>shared_networks</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	<break>break;</break>
      </block_content>}</block>
	  
    <case>case <expr><literal type="char">'F'</literal></expr>:</case>  <comment type="block">/* --dhcp-range */</comment>
      <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>leasepos</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dhcp_context</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>new</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition>
	  <block>{<block_content>
	    <for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>arg</name></expr>;</init> <condition><expr><operator>*</operator><name>cp</name></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">':'</literal> <operator>||</operator> 
		    <operator>(</operator><operator>*</operator><name>cp</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>cp</name> <operator>&lt;=</operator> <literal type="char">'f'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>cp</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>cp</name> <operator>&lt;=</operator> <literal type="char">'F'</literal><operator>)</operator> <operator>||</operator>
		    <operator>(</operator><operator>*</operator><name>cp</name> <operator>&gt;=</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>cp</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	    
	    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	      <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>is_tag_prefix</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition>
		  <block>{<block_content>
		    <comment type="block">/* ignore empty tag */</comment>
		    <if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
		      <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <call><name>dhcp_netid_create</name><argument_list>(<argument><expr><name>arg</name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>new</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  </block_content>}</block></if>
		<else>else
		  <block>{<block_content>
		    <if_stmt><if>if <condition>(<expr><name><name>new</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>net</name></name></expr>)</condition>
		      <block>{<block_content>
			<expr_stmt><expr><call><name>dhcp_context_free</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"only one tag allowed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      </block_content>}</block></if>
		    <else>else<block type="pseudo"><block_content>
		      <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>net</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><call><name>set_prefix</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		  </block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>comma</name></expr>;</expr_stmt>
	      </block_content>}</block></if>
	    <else>else
	      <block>{<block_content>
		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
		<break>break;</break>
	      </block_content>}</block></else></if_stmt>
	  </block_content>}</block></while>
	
	<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	
	<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><call><name>dhcp_context_free</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad dhcp-range"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>lease_time</name></name> <operator>=</operator> <name>DEFLEASE</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>new</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"static"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CONTEXT_STATIC</name></expr>;</expr_stmt></block_content></block></if>
	    <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"proxy"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CONTEXT_PROXY</name></expr>;</expr_stmt></block_content></block></if>
	    <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><call><name>dhcp_context_free</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad dhcp-range"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      </block_content>}</block></if></if_stmt>
	    
	    <if_stmt><if>if <condition>(<expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	      <block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>tmp</name> <init>= <expr><name><name>new</name><operator>-&gt;</operator><name>start</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>new</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	      </block_content>}</block></if></if_stmt>
	    
	    <if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>  
		<operator>(</operator><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>netmask</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CONTEXT_NETMASK</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>leasepos</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_same_net</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>new</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name><name>new</name><operator>-&gt;</operator><name>netmask</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><call><name>dhcp_context_free</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"inconsistent DHCP range"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  </block_content>}</block></if></if_stmt>
		
	    
		<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>  
		    <operator>(</operator><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>broadcast</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CONTEXT_BRDCAST</name></expr>;</expr_stmt>
		    <expr_stmt><expr><name>leasepos</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		  </block_content>}</block></if></if_stmt>
	      </block_content>}</block></if></if_stmt>
	  </block_content>}</block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
	<if type="elseif">else if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	  <block>{<block_content>
	    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CONTEXT_V6</name></expr>;</expr_stmt> 
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>prefix</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt> <comment type="block">/* default */</comment>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>end6</name></name> <operator>=</operator> <name><name>new</name><operator>-&gt;</operator><name>start6</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>lease_time</name></name> <operator>=</operator> <name>DEFLEASE6</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp6</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp6</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>

	    <for>for <control>(<init><expr><name>leasepos</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>leasepos</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>leasepos</name><operator>++</operator></expr></incr>)</control>
	      <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>leasepos</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"static"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CONTEXT_STATIC</name> <operator>|</operator> <name>CONTEXT_DHCP</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>leasepos</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ra-only"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>leasepos</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"slaac"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CONTEXT_RA</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>leasepos</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ra-names"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CONTEXT_RA_NAME</name> <operator>|</operator> <name>CONTEXT_RA</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>leasepos</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ra-advrouter"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CONTEXT_RA_ROUTER</name> <operator>|</operator> <name>CONTEXT_RA</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>leasepos</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ra-stateless"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CONTEXT_RA_STATELESS</name> <operator>|</operator> <name>CONTEXT_DHCP</name> <operator>|</operator> <name>CONTEXT_RA</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>leasepos</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"off-link"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CONTEXT_RA_OFF_LINK</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>leasepos</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>leasepos</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>end6</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CONTEXT_DHCP</name></expr>;</expr_stmt></block_content></block></if> 
		<if type="elseif">else if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>leasepos</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"constructor:"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>a</name><index>[<expr><name>leasepos</name></expr>]</index></name></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>template_interface</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>leasepos</name></expr>]</index></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CONTEXT_TEMPLATE</name></expr>;</expr_stmt>
		  </block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>  
		  <break>break;</break></block_content></block></else></if_stmt>
	      </block_content>}</block></for>
	   	    	     
	    <comment type="block">/* bare integer &lt; 128 is prefix value */</comment>
	    <if_stmt><if>if <condition>(<expr><name>leasepos</name> <operator>&lt;</operator> <name>k</name></expr>)</condition>
	      <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>pref</name></decl>;</decl_stmt>
		<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>leasepos</name></expr>]</index></name></expr>;</init> <condition><expr><operator>*</operator><name>cp</name></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>cp</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>cp</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		    <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>cp</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>pref</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>leasepos</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">128</literal></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>prefix</name></name> <operator>=</operator> <name>pref</name></expr>;</expr_stmt>
		    <expr_stmt><expr><name>leasepos</name><operator>++</operator></expr>;</expr_stmt>
		  </block_content>}</block></if></if_stmt>
	      </block_content>}</block></if></if_stmt>
	    
	    <if_stmt><if>if <condition>(<expr><name><name>new</name><operator>-&gt;</operator><name>prefix</name></name> <operator>&gt;</operator> <literal type="number">64</literal></expr>)</condition>
	      <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_RA</name></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name>err</name><operator>=</operator><operator>(</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"prefix length must be exactly 64 for RA subnets"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_TEMPLATE</name></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name>err</name><operator>=</operator><operator>(</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"prefix length must be exactly 64 for subnet constructors"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      </block_content>}</block></if>
	    <if type="elseif">else if <condition>(<expr><name><name>new</name><operator>-&gt;</operator><name>prefix</name></name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>err</name><operator>=</operator><operator>(</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"prefix length must be at least 64"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    
	    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_same_net6</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>end6</name></name></expr></argument>, <argument><expr><name><name>new</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>err</name><operator>=</operator><operator>(</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"inconsistent DHCPv6 range"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	    <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><call><name>dhcp_context_free</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      </block_content>}</block></if></if_stmt>

	    <comment type="block">/* dhcp-range=:: enables DHCP stateless on any interface */</comment>
	    <if_stmt><if>if <condition>(<expr><call><name>IN6_IS_ADDR_UNSPECIFIED</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_TEMPLATE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>prefix</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    
	    <if_stmt><if>if <condition>(<expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_TEMPLATE</name></expr>)</condition>
	      <block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>zero</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zero</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_same_net6</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>, <argument><expr><name><name>new</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><call><name>dhcp_context_free</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"prefix must be zero with \"constructor:\" argument"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  </block_content>}</block></if></if_stmt>
	      </block_content>}</block></if></if_stmt>
	    
	    <if_stmt><if>if <condition>(<expr><call><name>addr6part</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>addr6part</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>end6</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	      <block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>tmp</name> <init>= <expr><name><name>new</name><operator>-&gt;</operator><name>start6</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>start6</name></name> <operator>=</operator> <name><name>new</name><operator>-&gt;</operator><name>end6</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>end6</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	      </block_content>}</block></if></if_stmt>
	  </block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<else>else
	  <block>{<block_content>
	    <expr_stmt><expr><call><name>dhcp_context_free</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad dhcp-range"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></else></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><name>leasepos</name> <operator>&lt;</operator> <name>k</name></expr>)</condition>
	  <block>{<block_content>
	    <if_stmt><if>if <condition>(<expr><name>leasepos</name> <operator>!=</operator> <name>k</name><operator>-</operator><literal type="number">1</literal></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><call><name>dhcp_context_free</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad dhcp-range"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      </block_content>}</block></if></if_stmt>
	    
	    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>leasepos</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"infinite"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>lease_time</name></name> <operator>=</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CONTEXT_SETLEASE</name></expr>;</expr_stmt>
	      </block_content>}</block></if>
	    <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>leasepos</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"deprecated"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CONTEXT_DEPRECATE</name></expr>;</expr_stmt></block_content></block></if>
	    <else>else
	      <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>fac</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>leasepos</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		  <block>{<block_content>
		    <switch>switch <condition>(<expr><name><name>a</name><index>[<expr><name>leasepos</name></expr>]</index><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>leasepos</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition>
		      <block>{<block_content>
		      <case>case <expr><literal type="char">'w'</literal></expr>:</case>
		      <case>case <expr><literal type="char">'W'</literal></expr>:</case>
			<expr_stmt><expr><name>fac</name> <operator>*=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
			<comment type="block">/* fall through */</comment>
		      <case>case <expr><literal type="char">'d'</literal></expr>:</case>
		      <case>case <expr><literal type="char">'D'</literal></expr>:</case>
			<expr_stmt><expr><name>fac</name> <operator>*=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
			<comment type="block">/* fall through */</comment>
		      <case>case <expr><literal type="char">'h'</literal></expr>:</case>
		      <case>case <expr><literal type="char">'H'</literal></expr>:</case>
			<expr_stmt><expr><name>fac</name> <operator>*=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
			<comment type="block">/* fall through */</comment>
		      <case>case <expr><literal type="char">'m'</literal></expr>:</case>
		      <case>case <expr><literal type="char">'M'</literal></expr>:</case>
			<expr_stmt><expr><name>fac</name> <operator>*=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
			<comment type="block">/* fall through */</comment>
		      <case>case <expr><literal type="char">'s'</literal></expr>:</case>
		      <case>case <expr><literal type="char">'S'</literal></expr>:</case>
			<expr_stmt><expr><name><name>a</name><index>[<expr><name>leasepos</name></expr>]</index><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>leasepos</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		      </block_content>}</block></switch>
		    
		    <for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>leasepos</name></expr>]</index></name></expr>;</init> <condition><expr><operator>*</operator><name>cp</name></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>cp</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>cp</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

		    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>||</operator> <operator>(</operator><name>leasepos</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <name>k</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		      <expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad dhcp-range"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		    
		    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>lease_time</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>leasepos</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>fac</name></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CONTEXT_SETLEASE</name></expr>;</expr_stmt>
		    <comment type="block">/* Leases of a minute or less confuse
		       some clients, notably Apple's */</comment>
		    <if_stmt><if>if <condition>(<expr><name><name>new</name><operator>-&gt;</operator><name>lease_time</name></name> <operator>&lt;</operator> <literal type="number">120</literal></expr>)</condition><block type="pseudo"><block_content>
		      <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>lease_time</name></name> <operator>=</operator> <literal type="number">120</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  </block_content>}</block></if></if_stmt>
	      </block_content>}</block></else></if_stmt>
	  </block_content>}</block></if></if_stmt>

	<break>break;</break>
      </block_content>}</block>

    <case>case <expr><name>LOPT_BANK</name></expr>:</case>
    <case>case <expr><literal type="char">'G'</literal></expr>:</case>  <comment type="block">/* --dhcp-host */</comment>
      <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>dhcp_config</name></name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>in</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dhcp_config</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_conf</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>option</name> <operator>==</operator> <name>LOPT_BANK</name><operator>)</operator></expr> ?</condition><then> <expr><name>CONFIG_BANK</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>hwaddr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>netid</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>clid</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>addr6</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<while>while <condition>(<expr><name>arg</name></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>)</condition> <comment type="block">/* ethernet address, netid or binary CLID */</comment>
	      <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'i'</literal> <operator>||</operator> <name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'I'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
		    <operator>(</operator><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'d'</literal> <operator>||</operator> <name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'D'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
		    <name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition>
		  <block>{<block_content>
		    <if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition><block type="pseudo"><block_content>
		      <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CONFIG_NOCLID</name></expr>;</expr_stmt></block_content></block></if>
		    <else>else
		      <block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
			<expr_stmt><expr><name>arg</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <comment type="block">/* dump id: */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			  <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>parse_hex</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else
			  <block>{<block_content>
			    <expr_stmt><expr><call><name>unhide_metas</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			    <expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			  </block_content>}</block></else></if_stmt>
			
			<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
			  <block>{<block_content>
			    <expr_stmt><expr><call><name>dhcp_config_free</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			    <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad hex constant"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			  </block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>clid</name></name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
			  <block>{<block_content>
			    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CONFIG_CLID</name></expr>;</expr_stmt>
			    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>clid_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
			    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>clid</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			  </block_content>}</block></if></if_stmt>
		      </block_content>}</block></else></if_stmt>
		  </block_content>}</block></if>
		<comment type="block">/* dhcp-host has strange backwards-compat needs. */</comment>
		<if type="elseif">else if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"net:"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>arg</name> <operator>||</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"set:"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>arg</name></expr>)</condition>
		  <block>{<block_content>
		    <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid_list</name></name> <modifier>*</modifier></type><name>newlist</name> <init>= <expr><call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dhcp_netid_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		    <expr_stmt><expr><name><name>newlist</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>new</name><operator>-&gt;</operator><name>netid</name></name></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>netid</name></name> <operator>=</operator> <name>newlist</name></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>newlist</name><operator>-&gt;</operator><name>list</name></name> <operator>=</operator> <call><name>dhcp_netid_create</name><argument_list>(<argument><expr><name>arg</name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  </block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"tag:"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>arg</name></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <call><name>dhcp_netid_create</name><argument_list>(<argument><expr><name>arg</name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>new</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
		<if type="elseif">else if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition>
		  <block>{<block_content>
		    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pref</name></decl>;</decl_stmt>
		    <decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>in6</name></decl>;</decl_stmt>
		    <decl_stmt><decl><type><name><name>struct</name> <name>addrlist</name></name> <modifier>*</modifier></type><name>new_addr</name></decl>;</decl_stmt>
		    
		    <expr_stmt><expr><name><name>arg</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		    <expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>
		    <expr_stmt><expr><name>pref</name> <operator>=</operator> <call><name>split_chr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    
		    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in6</name></expr></argument>)</argument_list></call></expr>)</condition>
		      <block>{<block_content>
			<expr_stmt><expr><call><name>dhcp_config_free</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad IPv6 address"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      </block_content>}</block></if></if_stmt>

		    <expr_stmt><expr><name>new_addr</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>addrlist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>new_addr</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>new</name><operator>-&gt;</operator><name>addr6</name></name></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>new_addr</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>new_addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr6</name></name> <operator>=</operator> <name>in6</name></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>addr6</name></name> <operator>=</operator> <name>new_addr</name></expr>;</expr_stmt>
		    
		    <if_stmt><if>if <condition>(<expr><name>pref</name></expr>)</condition>
		      <block>{<block_content>
			<decl_stmt><decl><type><name>u64</name></type> <name>addrpart</name> <init>= <expr><call><name>addr6part</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in6</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>atoi_check</name><argument_list>(<argument><expr><name>pref</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new_addr</name><operator>-&gt;</operator><name>prefixlen</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
			    <name><name>new_addr</name><operator>-&gt;</operator><name>prefixlen</name></name> <operator>&gt;</operator> <literal type="number">128</literal> <operator>||</operator>
			    <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>u64</name><operator>)</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><literal type="number">128</literal><operator>-</operator><name><name>new_addr</name><operator>-&gt;</operator><name>prefixlen</name></name><operator>)</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name>addrpart</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
			  <block>{<block_content>
			    <expr_stmt><expr><call><name>dhcp_config_free</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			    <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad IPv6 prefix"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			  </block_content>}</block></if></if_stmt>
			
			<expr_stmt><expr><name><name>new_addr</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ADDRLIST_PREFIX</name></expr>;</expr_stmt>
		      </block_content>}</block></if></if_stmt>
		  
		    <for>for <control>(<init><expr><name>i</name><operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		      <if_stmt><if>if <condition>(<expr><name><name>in6</name><operator>.</operator><name>s6_addr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
		    
		    <comment type="block">/* set WILDCARD if network part all zeros */</comment>
		    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
		      <expr_stmt><expr><name><name>new_addr</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ADDRLIST_WILDCARD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		    
		    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CONFIG_ADDR6</name></expr>;</expr_stmt>
		  </block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<else>else
		  <block>{<block_content>
		    <decl_stmt><decl><type><name><name>struct</name> <name>hwaddr_config</name></name> <modifier>*</modifier></type><name>newhw</name> <init>= <expr><call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>hwaddr_config</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>newhw</name><operator>-&gt;</operator><name>hwaddr_len</name></name> <operator>=</operator> <call><name>parse_hex</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name><name>newhw</name><operator>-&gt;</operator><name>hwaddr</name></name></expr></argument>, <argument><expr><name>DHCP_CHADDR_MAX</name></expr></argument>, 
						       <argument><expr><operator>&amp;</operator><name><name>newhw</name><operator>-&gt;</operator><name>wildcard_mask</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>newhw</name><operator>-&gt;</operator><name>hwaddr_type</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
		      <block>{<block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>newhw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>dhcp_config_free</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad hex constant"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      </block_content>}</block></if>
		    <else>else
		      <block>{<block_content>
			<expr_stmt><expr><name><name>newhw</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>new</name><operator>-&gt;</operator><name>hwaddr</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>hwaddr</name></name> <operator>=</operator> <name>newhw</name></expr>;</expr_stmt>
		      </block_content>}</block></else></if_stmt>		    
		  </block_content>}</block></else></if_stmt>
	      </block_content>}</block></if>
	    <if type="elseif">else if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
	      <block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>dhcp_config</name></name> <modifier>*</modifier></type><name>configs</name></decl>;</decl_stmt>
		
		<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CONFIG_ADDR</name></expr>;</expr_stmt>
		
		<comment type="block">/* If the same IP appears in more than one host config, then DISCOVER
		   for one of the hosts will get the address, but REQUEST will be NAKed,
		   since the address is reserved by the other one -&gt; protocol loop. */</comment>
		<for>for <control>(<init><expr><name>configs</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_conf</name></name></expr>;</init> <condition><expr><name>configs</name></expr>;</condition> <incr><expr><name>configs</name> <operator>=</operator> <name><name>configs</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content> 
		  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>configs</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONFIG_ADDR</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>configs</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <name><name>in</name><operator>.</operator><name>s_addr</name></name></expr>)</condition>
		    <block>{<block_content>
		      <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>errstr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"duplicate dhcp-host IP address %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
			      <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><call><name>dhcp_config_free</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <return>return <expr><literal type="number">0</literal></expr>;</return>
		    </block_content>}</block></if></if_stmt></block_content></block></for>	      
	      </block_content>}</block></if>
	    <else>else
	      <block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lastp</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>last</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>fac</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>isdig</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><name>lastp</name> <operator>=</operator> <name>arg</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		    <expr_stmt><expr><name>last</name> <operator>=</operator> <operator>*</operator><name>lastp</name></expr>;</expr_stmt>
		    <switch>switch <condition>(<expr><name>last</name></expr>)</condition>
		      <block>{<block_content>
		      <case>case <expr><literal type="char">'w'</literal></expr>:</case>
		      <case>case <expr><literal type="char">'W'</literal></expr>:</case>
			<expr_stmt><expr><name>fac</name> <operator>*=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
			<comment type="block">/* fall through */</comment>
		      <case>case <expr><literal type="char">'d'</literal></expr>:</case>
		      <case>case <expr><literal type="char">'D'</literal></expr>:</case>
			<expr_stmt><expr><name>fac</name> <operator>*=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
			<comment type="block">/* fall through */</comment>
		      <case>case <expr><literal type="char">'h'</literal></expr>:</case>
		      <case>case <expr><literal type="char">'H'</literal></expr>:</case>
			<expr_stmt><expr><name>fac</name> <operator>*=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
			<comment type="block">/* fall through */</comment>
		      <case>case <expr><literal type="char">'m'</literal></expr>:</case>
		      <case>case <expr><literal type="char">'M'</literal></expr>:</case>
			<expr_stmt><expr><name>fac</name> <operator>*=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
			<comment type="block">/* fall through */</comment>
		      <case>case <expr><literal type="char">'s'</literal></expr>:</case>
		      <case>case <expr><literal type="char">'S'</literal></expr>:</case>
			<expr_stmt><expr><operator>*</operator><name>lastp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		      </block_content>}</block></switch>
		  </block_content>}</block></if></if_stmt>
		
		<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>arg</name></expr>;</init> <condition><expr><operator>*</operator><name>cp</name></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		  <if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name>isdig</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
		  <if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
		    <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name></expr>)</condition>
		  <block>{<block_content>
		    <if_stmt><if>if <condition>(<expr><name>lastp</name></expr>)</condition><block type="pseudo"><block_content>
		      <expr_stmt><expr><operator>*</operator><name>lastp</name> <operator>=</operator> <name>last</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"infinite"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		      <block>{<block_content>
			<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>lease_time</name></name> <operator>=</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CONFIG_TIME</name></expr>;</expr_stmt>
		      </block_content>}</block></if>
		    <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"ignore"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		      <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CONFIG_DISABLE</name></expr>;</expr_stmt></block_content></block></if>
		    <else>else
		      <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>hostname</name></name> <operator>=</operator> <call><name>canonicalise_opt</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
			    <operator>!</operator><call><name>legal_hostname</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			  <block>{<block_content>
			    <expr_stmt><expr><call><name>dhcp_config_free</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			    <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad DHCP host name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			  </block_content>}</block></if></if_stmt>
			
			<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CONFIG_NAME</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>domain</name></name> <operator>=</operator> <call><name>strip_hostname</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>			
		      </block_content>}</block></else></if_stmt>
		  </block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>isdig</name></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>lease_time</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>fac</name></expr>;</expr_stmt> 
		    <comment type="block">/* Leases of a minute or less confuse
		       some clients, notably Apple's */</comment>
		    <if_stmt><if>if <condition>(<expr><name><name>new</name><operator>-&gt;</operator><name>lease_time</name></name> <operator>&lt;</operator> <literal type="number">120</literal></expr>)</condition><block type="pseudo"><block_content>
		      <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>lease_time</name></name> <operator>=</operator> <literal type="number">120</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CONFIG_TIME</name></expr>;</expr_stmt>
		  </block_content>}</block></if></if_stmt>
	      </block_content>}</block></else></if_stmt>

	    <expr_stmt><expr><name>arg</name> <operator>=</operator> <name>comma</name></expr>;</expr_stmt>
	  </block_content>}</block></while>

	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_conf</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	<break>break;</break>
      </block_content>}</block>
      
    <case>case <expr><name>LOPT_TAG_IF</name></expr>:</case>  <comment type="block">/* --tag-if */</comment>
      <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>tag_if</name></name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>tag_if</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>set</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	
	<comment type="block">/* preserve order */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>daemon</name><operator>-&gt;</operator><name>tag_if</name></name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>tag_if</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt></block_content></block></if>
	<else>else
	  <block>{<block_content>
	    <decl_stmt><decl><type><name><name>struct</name> <name>tag_if</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	    <for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>tag_if</name></name></expr>;</init> <condition><expr><name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr>;</condition> <incr><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
	    <expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	  </block_content>}</block></else></if_stmt>

	<while>while <condition>(<expr><name>arg</name></expr>)</condition>
	  <block>{<block_content>
	    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

	    <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>set</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<break>break;</break>
	      </block_content>}</block></if>
	    <else>else
	      <block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>newtag</name> <init>= <expr><call><name>dhcp_netid_create</name><argument_list>(<argument><expr><name>arg</name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"set:"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>arg</name></expr>)</condition>
		  <block>{<block_content>
		    <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid_list</name></name> <modifier>*</modifier></type><name>newlist</name> <init>= <expr><call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dhcp_netid_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		    <expr_stmt><expr><name><name>newlist</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>new</name><operator>-&gt;</operator><name>set</name></name></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>set</name></name> <operator>=</operator> <name>newlist</name></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>newlist</name><operator>-&gt;</operator><name>list</name></name> <operator>=</operator> <name>newtag</name></expr>;</expr_stmt>
		  </block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"tag:"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>arg</name></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><name><name>newtag</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>new</name><operator>-&gt;</operator><name>tag</name></name></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name>newtag</name></expr>;</expr_stmt>
		  </block_content>}</block></if>
		<else>else 
		  <block>{<block_content>
		    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>set</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>dhcp_netid_free</name><argument_list>(<argument><expr><name>newtag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <break>break;</break>
		  </block_content>}</block></else></if_stmt>
	      </block_content>}</block></else></if_stmt>
	    
	    <expr_stmt><expr><name>arg</name> <operator>=</operator> <name>comma</name></expr>;</expr_stmt>
	  </block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>new</name><operator>-&gt;</operator><name>set</name></name></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><call><name>dhcp_netid_free</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>dhcp_netid_list_free</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>set</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad tag-if"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt>
	  
	<break>break;</break>
      </block_content>}</block>

      
    <case>case <expr><literal type="char">'O'</literal></expr>:</case>           <comment type="block">/* --dhcp-option */</comment>
    <case>case <expr><name>LOPT_FORCE</name></expr>:</case>    <comment type="block">/* --dhcp-option-force */</comment>
    <case>case <expr><name>LOPT_OPTS</name></expr>:</case>
    <case>case <expr><name>LOPT_MATCH</name></expr>:</case>    <comment type="block">/* --dhcp-match */</comment>
      <return>return <expr><call><name>parse_dhcp_opt</name><argument_list>(<argument><expr><name>errstr</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, 
			    <argument><expr><ternary><condition><expr><name>option</name> <operator>==</operator> <name>LOPT_FORCE</name></expr> ?</condition><then> <expr><name>DHOPT_FORCE</name></expr> </then><else>: 
			    <expr><operator>(</operator><ternary><condition><expr><name>option</name> <operator>==</operator> <name>LOPT_MATCH</name></expr> ?</condition><then> <expr><name>DHOPT_MATCH</name></expr> </then><else>:
			     <expr><operator>(</operator><ternary><condition><expr><name>option</name> <operator>==</operator> <name>LOPT_OPTS</name></expr> ?</condition><then> <expr><name>DHOPT_BANK</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>

    <case>case <expr><name>LOPT_NAME_MATCH</name></expr>:</case> <comment type="block">/* --dhcp-name-match */</comment>
      <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>dhcp_match_name</name></name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
	
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>comma</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dhcp_match_name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>wildcard</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>netid</name></name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dhcp_netid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>netid</name><operator>-&gt;</operator><name>net</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><call><name>set_prefix</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>comma</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name><name>comma</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>wildcard</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>comma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_name_match</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_name_match</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>

	<break>break;</break>
      </block_content>}</block>
      
    <case>case <expr><literal type="char">'M'</literal></expr>:</case> <comment type="block">/* --dhcp-boot */</comment>
      <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>id</name> <init>= <expr><call><name>dhcp_tags</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg</name></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></if>
	<else>else 
	  <block>{<block_content>
	    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dhcp_file</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dhcp_sname</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tftp_sname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>dhcp_next_server</name></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_boot</name></name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>
	    <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>dhcp_file</name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>dhcp_next_server</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><name>comma</name></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>comma</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>dhcp_sname</name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>comma</name></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><call><name>unhide_metas</name><argument_list>(<argument><expr><name>comma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>comma</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dhcp_next_server</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
		      <block>{<block_content>
			<comment type="block">/*
			 * The user may have specified the tftp hostname here.
			 * save it so that it can be resolved/looked up during
			 * actual dhcp_reply().
			 */</comment>	
			
			<expr_stmt><expr><name>tftp_sname</name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>comma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>dhcp_next_server</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		      </block_content>}</block></if></if_stmt>
		  </block_content>}</block></if></if_stmt>
	      </block_content>}</block></if></if_stmt>
	    
	    <expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dhcp_boot</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <name>dhcp_file</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>sname</name></name> <operator>=</operator> <name>dhcp_sname</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>tftp_sname</name></name> <operator>=</operator> <name>tftp_sname</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next_server</name></name> <operator>=</operator> <name>dhcp_next_server</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>netid</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>boot_config</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>boot_config</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	  </block_content>}</block></else></if_stmt>
      
	<break>break;</break>
      </block_content>}</block>

    <case>case <expr><name>LOPT_REPLY_DELAY</name></expr>:</case> <comment type="block">/* --dhcp-reply-delay */</comment>
      <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>id</name> <init>= <expr><call><name>dhcp_tags</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg</name></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></if>
	<else>else
	  <block>{<block_content>
	    <decl_stmt><decl><type><name><name>struct</name> <name>delay_config</name></name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>int</name></type> <name>delay</name></decl>;</decl_stmt>
	    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>atoi_check</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delay</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
              <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    
	    <expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>delay_config</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <name>delay</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>netid</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>delay_conf</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>delay_conf</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	  </block_content>}</block></else></if_stmt>
	
	<break>break;</break>
      </block_content>}</block>
      
    <case>case <expr><name>LOPT_PXE_PROMT</name></expr>:</case>  <comment type="block">/* --pxe-prompt */</comment>
       <block>{<block_content>
	 <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_opt</name></name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dhcp_opt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	 <decl_stmt><decl><type><name>int</name></type> <name>timeout</name></decl>;</decl_stmt>
	 
	 <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>netid</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	 <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>opt</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt> <comment type="block">/* PXE_MENU_PROMPT */</comment>
	 <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>netid</name></name> <operator>=</operator> <call><name>dhcp_tags</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 
	 <if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg</name></expr>)</condition>
	   <block>{<block_content>
	     <expr_stmt><expr><call><name>dhcp_opt_free</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	     <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	   </block_content>}</block></if>
	 <else>else
	   <block>{<block_content>
	     <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	     <expr_stmt><expr><call><name>unhide_metas</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	     <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	     <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	     <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>val</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name><name>new</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	     
	     <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>vendor_class</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	     <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>DHOPT_VENDOR</name> <operator>|</operator> <name>DHOPT_VENDOR_PXE</name></expr>;</expr_stmt>
	     
	     <if_stmt><if>if <condition>(<expr><name>comma</name> <operator>&amp;&amp;</operator> <call><name>atoi_check</name><argument_list>(<argument><expr><name>comma</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	       <expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>val</name></name><operator>)</operator> <operator>=</operator> <name>timeout</name></expr>;</expr_stmt></block_content></block></if>
	     <else>else<block type="pseudo"><block_content>
	       <expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>val</name></name><operator>)</operator> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	     <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_opts</name></name></expr>;</expr_stmt>
	     <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_opts</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	     <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>enable_pxe</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	   </block_content>}</block></else></if_stmt>
	 
	 <break>break;</break>
       </block_content>}</block>
       
    <case>case <expr><name>LOPT_PXE_SERV</name></expr>:</case>  <comment type="block">/* --pxe-service */</comment>
       <block>{<block_content>
	 <decl_stmt><decl><type><name><name>struct</name> <name>pxe_service</name></name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>pxe_service</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	 <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>CSA</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"x86PC"</literal></expr>, <expr><literal type="string">"PC98"</literal></expr>, <expr><literal type="string">"IA64_EFI"</literal></expr>, <expr><literal type="string">"Alpha"</literal></expr>, <expr><literal type="string">"Arc_x86"</literal></expr>, <expr><literal type="string">"Intel_Lean_Client"</literal></expr>,
			 <expr><literal type="string">"IA32_EFI"</literal></expr>, <expr><literal type="string">"x86-64_EFI"</literal></expr>, <expr><literal type="string">"Xscale_EFI"</literal></expr>, <expr><literal type="string">"BC_EFI"</literal></expr>,
			 <expr><literal type="string">"ARM32_EFI"</literal></expr>, <expr><literal type="string">"ARM64_EFI"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>  
	 <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>boottype</name> <init>= <expr><literal type="number">32768</literal></expr></init></decl>;</decl_stmt>
	 
	 <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>netid</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	 <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>sname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	 <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	 <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>netid</name></name> <operator>=</operator> <call><name>dhcp_tags</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	 <if_stmt><if>if <condition>(<expr><name>arg</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	   <block>{<block_content>
	     <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>CSA</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	       <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>CSA</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		 <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	     
	     <if_stmt><if>if <condition>(<expr><name><name>CSA</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <call><name>atoi_check</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>)</condition>
	       <block>{<block_content>
		 <expr_stmt><expr><name>arg</name> <operator>=</operator> <name>comma</name></expr>;</expr_stmt>
		 <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 
		 <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>CSA</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		 <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>menu</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 
		 <if_stmt><if>if <condition>(<expr><operator>!</operator><name>comma</name></expr>)</condition>
		   <block>{<block_content>
		     <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* local boot */</comment>
		     <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>basename</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		   </block_content>}</block></if>
		 <else>else
		   <block>{<block_content>
		     <expr_stmt><expr><name>arg</name> <operator>=</operator> <name>comma</name></expr>;</expr_stmt>
		     <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		     <if_stmt><if>if <condition>(<expr><call><name>atoi_check</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>)</condition>
		       <block>{<block_content>
			 <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			 <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>basename</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		       </block_content>}</block></if>
		     <else>else
		       <block>{<block_content>
			 <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>boottype</name><operator>++</operator></expr>;</expr_stmt>
			 <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>basename</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		       </block_content>}</block></else></if_stmt>
		     
		     <if_stmt><if>if <condition>(<expr><name>comma</name></expr>)</condition>
		       <block>{<block_content>
			 <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>comma</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			   <block>{<block_content>
			     <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			     <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>sname</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>comma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			   </block_content>}</block></if></if_stmt>
		       
		       </block_content>}</block></if></if_stmt>
		   </block_content>}</block></else></if_stmt>
		 
		 <comment type="block">/* Order matters */</comment>
		 <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		 <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>daemon</name><operator>-&gt;</operator><name>pxe_services</name></name></expr>)</condition><block type="pseudo"><block_content>
		   <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>pxe_services</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt></block_content></block></if> 
		 <else>else
		   <block>{<block_content>
		     <decl_stmt><decl><type><name><name>struct</name> <name>pxe_service</name></name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
		     <for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>pxe_services</name></name></expr>;</init> <condition><expr><name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr>;</condition> <incr><expr><name>s</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
		     <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
		   </block_content>}</block></else></if_stmt>
		 
		 <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>enable_pxe</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		 <break>break;</break>
		
	       </block_content>}</block></if></if_stmt>
	   </block_content>}</block></if></if_stmt>
	 
	 <expr_stmt><expr><call><name>dhcp_netid_free</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>netid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block>
	 
    <case>case <expr><literal type="char">'4'</literal></expr>:</case>  <comment type="block">/* --dhcp-mac */</comment>
      <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else
	  <block>{<block_content>
	    <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_mac</name></name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dhcp_mac</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>net</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><call><name>set_prefix</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>unhide_metas</name><argument_list>(<argument><expr><name>comma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>hwaddr_len</name></name> <operator>=</operator> <call><name>parse_hex</name><argument_list>(<argument><expr><name>comma</name></expr></argument>, <argument><expr><name><name>new</name><operator>-&gt;</operator><name>hwaddr</name></name></expr></argument>, <argument><expr><name>DHCP_CHADDR_MAX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>hwaddr_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><name><name>new</name><operator>-&gt;</operator><name>hwaddr_len</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>net</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      </block_content>}</block></if>
	    <else>else
	      <block>{<block_content>
		<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_macs</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_macs</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	      </block_content>}</block></else></if_stmt>
	  </block_content>}</block></else></if_stmt>
      </block_content>}</block>
      <break>break;</break>

    <case>case <expr><literal type="char">'U'</literal></expr>:</case>           <comment type="block">/* --dhcp-vendorclass */</comment>
    <case>case <expr><literal type="char">'j'</literal></expr>:</case>           <comment type="block">/* --dhcp-userclass */</comment>
    <case>case <expr><name>LOPT_CIRCUIT</name></expr>:</case>  <comment type="block">/* --dhcp-circuitid */</comment>
    <case>case <expr><name>LOPT_REMOTE</name></expr>:</case>   <comment type="block">/* --dhcp-remoteid */</comment>
    <case>case <expr><name>LOPT_SUBSCR</name></expr>:</case>   <comment type="block">/* --dhcp-subscrid */</comment>
      <block>{<block_content>
	 <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	 <decl_stmt><decl><type><name>int</name></type> <name>dig</name></decl>, <decl><type ref="prev"/><name>colon</name></decl>;</decl_stmt>
	 <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_vendor</name></name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dhcp_vendor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	 
	 <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	   <expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	 <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>net</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><call><name>set_prefix</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <comment type="block">/* check for hex string - must digits may include : must not have nothing else, 
	    only allowed for agent-options. */</comment>
	 
	 <expr_stmt><expr><name>arg</name> <operator>=</operator> <name>comma</name></expr>;</expr_stmt>
	 <if_stmt><if>if <condition>(<expr><operator>(</operator><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	   <block>{<block_content>
	     <if_stmt><if>if <condition>(<expr><name>option</name>  <operator>!=</operator> <literal type="char">'U'</literal> <operator>||</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"enterprise:"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>arg</name></expr>)</condition>
	       <block>{<block_content>
	         <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>net</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	         <expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	       </block_content>}</block></if>
	     <else>else<block type="pseudo"><block_content>
	       <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>enterprise</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name><operator>+</operator><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	   </block_content>}</block></if>
	 <else>else<block type="pseudo"><block_content>
	   <expr_stmt><expr><name>comma</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	 
	 <for>for <control>(<init><expr><name>dig</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>colon</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>comma</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	   <if_stmt><if>if <condition>(<expr><call><name>isxdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	     <expr_stmt><expr><name>dig</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
	   <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
	     <expr_stmt><expr><name>colon</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
	   <else>else<block type="pseudo"><block_content>
	     <break>break;</break></block_content></block></else></if_stmt></block_content></block></for>
	 
	 <expr_stmt><expr><call><name>unhide_metas</name><argument_list>(<argument><expr><name>comma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <if_stmt><if>if <condition>(<expr><name>option</name> <operator>==</operator> <literal type="char">'U'</literal> <operator>||</operator> <name>option</name> <operator>==</operator> <literal type="char">'j'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>||</operator> <operator>!</operator><name>dig</name> <operator>||</operator> <operator>!</operator><name>colon</name></expr>)</condition>
	   <block>{<block_content>
	     <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>comma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
	     <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	     <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>comma</name></expr></argument>, <argument><expr><name><name>new</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	   </block_content>}</block></if>
	 <else>else
	   <block>{<block_content>
	     <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <call><name>parse_hex</name><argument_list>(<argument><expr><name>comma</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>comma</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>comma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	     <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	     <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>comma</name></expr></argument>, <argument><expr><name><name>new</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	   </block_content>}</block></else></if_stmt>
	 
	 <switch>switch <condition>(<expr><name>option</name></expr>)</condition>
	   <block>{<block_content>
	   <case>case <expr><literal type="char">'j'</literal></expr>:</case>
	     <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>match_type</name></name> <operator>=</operator> <name>MATCH_USER</name></expr>;</expr_stmt>
	     <break>break;</break>
	   <case>case <expr><literal type="char">'U'</literal></expr>:</case>
	     <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>match_type</name></name> <operator>=</operator> <name>MATCH_VENDOR</name></expr>;</expr_stmt>
	     <break>break;</break> 
	   <case>case <expr><name>LOPT_CIRCUIT</name></expr>:</case>
	     <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>match_type</name></name> <operator>=</operator> <name>MATCH_CIRCUIT</name></expr>;</expr_stmt>
	     <break>break;</break>
	   <case>case <expr><name>LOPT_REMOTE</name></expr>:</case>
	     <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>match_type</name></name> <operator>=</operator> <name>MATCH_REMOTE</name></expr>;</expr_stmt>
	     <break>break;</break>
	   <case>case <expr><name>LOPT_SUBSCR</name></expr>:</case>
	     <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>match_type</name></name> <operator>=</operator> <name>MATCH_SUBSCRIBER</name></expr>;</expr_stmt>
	     <break>break;</break>
	   </block_content>}</block></switch>
	 <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_vendors</name></name></expr>;</expr_stmt>
	 <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_vendors</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>

	 <break>break;</break>
      </block_content>}</block>
      
    <case>case <expr><name>LOPT_ALTPORT</name></expr>:</case>   <comment type="block">/* --dhcp-alternate-port */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_server_port</name></name> <operator>=</operator> <name>DHCP_SERVER_ALTPORT</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_client_port</name></name> <operator>=</operator> <name>DHCP_CLIENT_ALTPORT</name></expr>;</expr_stmt>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>atoi_check16</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_server_port</name></name></expr></argument>)</argument_list></call> <operator>||</operator> 
	      <operator>(</operator><name>comma</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>atoi_check16</name><argument_list>(<argument><expr><name>comma</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_client_port</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid port number"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>comma</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_client_port</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_server_port</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
	</block_content>}</block></else></if_stmt>
      <break>break;</break>

    <case>case <expr><literal type="char">'J'</literal></expr>:</case>            <comment type="block">/* --dhcp-ignore */</comment>
    <case>case <expr><name>LOPT_NO_NAMES</name></expr>:</case>  <comment type="block">/* --dhcp-ignore-names */</comment>
    <case>case <expr><name>LOPT_BROADCAST</name></expr>:</case> <comment type="block">/* --dhcp-broadcast */</comment>
    <case>case <expr><literal type="char">'3'</literal></expr>:</case>            <comment type="block">/* --bootp-dynamic */</comment>
    <case>case <expr><name>LOPT_GEN_NAMES</name></expr>:</case> <comment type="block">/* --dhcp-generate-names */</comment>
      <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid_list</name></name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dhcp_netid_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>option</name> <operator>==</operator> <literal type="char">'J'</literal></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_ignore</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_ignore</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	  </block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>option</name> <operator>==</operator> <name>LOPT_BROADCAST</name></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>force_broadcast</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>force_broadcast</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	  </block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>option</name> <operator>==</operator> <literal type="char">'3'</literal></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>bootp_dynamic</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>bootp_dynamic</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	  </block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>option</name> <operator>==</operator> <name>LOPT_GEN_NAMES</name></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_gen_names</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_gen_names</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	  </block_content>}</block></if>
	<else>else
	  <block>{<block_content>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_ignore_names</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_ignore_names</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	  </block_content>}</block></else></if_stmt>
	
	<while>while <condition>(<expr><name>arg</name></expr>)</condition> <block>{<block_content>
	  <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>dhcp_netid_create</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>is_tag_prefix</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>arg</name><operator>+</operator><literal type="number">4</literal></expr> </then><else>:<expr><name>arg</name></expr></else></ternary></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>arg</name> <operator>=</operator> <name>comma</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>list</name></name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>
	<break>break;</break>
      </block_content>}</block>

    <case>case <expr><name>LOPT_PROXY</name></expr>:</case> <comment type="block">/* --dhcp-proxy */</comment>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>override</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <while>while <condition>(<expr><name>arg</name></expr>)</condition> <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>addr_list</name></name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>addr_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad dhcp-proxy address"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>override_relays</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>override_relays</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>comma</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	  <break>break;</break>

    <case>case <expr><name>LOPT_PXE_VENDOR</name></expr>:</case> <comment type="block">/* --dhcp-pxe-vendor */</comment>
      <block>{<block_content>
        <while>while <condition>(<expr><name>arg</name></expr>)</condition> <block>{<block_content>
	  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_pxe_vendor</name></name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dhcp_pxe_vendor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	  <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_pxe_vendors</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_pxe_vendors</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>arg</name> <operator>=</operator> <name>comma</name></expr>;</expr_stmt>
	</block_content>}</block></while>
      </block_content>}</block>
      <break>break;</break>
      
    <case>case <expr><name>LOPT_RELAY</name></expr>:</case> <comment type="block">/* --dhcp-relay */</comment>
      <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>dhcp_relay</name></name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dhcp_relay</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>two</name> <init>= <expr><call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>three</name> <init>= <expr><call><name>split</name><argument_list>(<argument><expr><name>two</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>iface_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>two</name></expr>)</condition>
	  <block>{<block_content>
	    <if_stmt><if>if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>local</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	      <block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hash</name> <init>= <expr><call><name>split_chr</name><argument_list>(<argument><expr><name>two</name></expr></argument>, <argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hash</name> <operator>||</operator> <operator>!</operator><call><name>atoi_check16</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name>DHCP_SERVER_PORT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>two</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>addr4</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		    		    
		    <comment type="block">/* Fail for three arg version where there are not two addresses. 
		       Also fail when broadcasting to wildcard address. */</comment>
		    <if_stmt><if>if <condition>(<expr><name>three</name> <operator>||</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>two</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		      <expr_stmt><expr><name>two</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
		    <else>else<block type="pseudo"><block_content>
		      <expr_stmt><expr><name>three</name> <operator>=</operator> <name>two</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		  </block_content>}</block></if></if_stmt>
		
		<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>relay4</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>relay4</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	      </block_content>}</block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
	    <if type="elseif">else if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>local</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	      <block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hash</name> <init>= <expr><call><name>split_chr</name><argument_list>(<argument><expr><name>two</name></expr></argument>, <argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hash</name> <operator>||</operator> <operator>!</operator><call><name>atoi_check16</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name>DHCPV6_SERVER_PORT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>two</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>ALL_SERVERS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>addr6</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <comment type="block">/* Fail for three arg version where there are not two addresses.
		       Also fail when multicasting to wildcard address. */</comment>
		    <if_stmt><if>if <condition>(<expr><name>three</name> <operator>||</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>two</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		      <expr_stmt><expr><name>two</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
		    <else>else<block type="pseudo"><block_content>
		      <expr_stmt><expr><name>three</name> <operator>=</operator> <name>two</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		  </block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>relay6</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>relay6</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	      </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>interface</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>three</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>two</name></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Bad dhcp-relay"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt>
	
	<break>break;</break>
      </block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
    <case>case <expr><name>LOPT_RA_PARAM</name></expr>:</case> <comment type="block">/* --ra-param */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name><name>struct</name> <name>ra_interface</name></name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ra_interface</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>lifetime</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>prio</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>mtu</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>mtu_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><call><name>strcasestr</name><argument_list>(<argument><expr><name>comma</name></expr></argument>, <argument><expr><literal type="string">"mtu:"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>comma</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>arg</name> <operator>=</operator> <name>comma</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>comma</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	        <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	        <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>mtu</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
	      <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>atoi_check</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>mtu</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	        <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>mtu_name</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	      <if type="elseif">else if <condition>(<expr><name><name>new</name><operator>-&gt;</operator><name>mtu</name></name> <operator>&lt;</operator> <literal type="number">1280</literal></expr>)</condition><block type="pseudo"><block_content>
	        <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
	  <if_stmt><if>if <condition>(<expr><call><name>strcasestr</name><argument_list>(<argument><expr><name>comma</name></expr></argument>, <argument><expr><literal type="string">"high"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>comma</name> <operator>||</operator> <call><name>strcasestr</name><argument_list>(<argument><expr><name>comma</name></expr></argument>, <argument><expr><literal type="string">"low"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>comma</name></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>comma</name> <operator>==</operator> <literal type="char">'l'</literal> <operator>||</operator> <operator>*</operator><name>comma</name> <operator>==</operator> <literal type="char">'L'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>prio</name></name> <operator>=</operator> <literal type="number">0x18</literal></expr>;</expr_stmt></block_content></block></if>
	      <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>prio</name></name> <operator>=</operator> <literal type="number">0x08</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
	      <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>comma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	   <expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>comma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	   <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>atoi_check</name><argument_list>(<argument><expr><name>comma</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>)</argument_list></call> <operator>||</operator> 
	      <operator>(</operator><name>arg</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>atoi_check</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>lifetime</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
             <block>{<block_content>
<label><name>err</name>:</label>
	       <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	       <expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad RA-params"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></if></if_stmt>
	  
	  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>ra_interfaces</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>ra_interfaces</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
      <break>break;</break>
      
    <case>case <expr><name>LOPT_DUID</name></expr>:</case> <comment type="block">/* --dhcp-duid */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>atoi_check</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>duid_enterprise</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad DUID"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else
	<block>{<block_content>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>duid_config_len</name></name> <operator>=</operator> <call><name>parse_hex</name><argument_list>(<argument><expr><name>comma</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>comma</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>comma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>duid_config</name></name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>duid_config_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>duid_config</name></name></expr></argument>, <argument><expr><name>comma</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>duid_config_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
      <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <case>case <expr><literal type="char">'V'</literal></expr>:</case>  <comment type="block">/* --alias */</comment>
      <block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dash</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>doctor</name></name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>doctor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>doctors</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>doctors</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>mask</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>arg</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	  <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<break>break;</break></block_content></block></if></if_stmt>
	      <expr_stmt><expr><call><name>unhide_metas</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></for></block_content></block></if></if_stmt>
	
	<expr_stmt><expr><name>dash</name> <operator>=</operator> <call><name>split_chr</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>k</name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator> 
	    <operator>(</operator><operator>!</operator><operator>(</operator><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>in</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator> <operator>||</operator>
	    <operator>(</operator><operator>!</operator><operator>(</operator><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator> <operator>||</operator>
	    <operator>(</operator><name>k</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"missing address in alias"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><name>dash</name> <operator>&amp;&amp;</operator> 
	    <operator>(</operator><operator>!</operator><operator>(</operator><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>dash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
	     <operator>!</operator><call><name>is_same_net</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>in</name></name></expr></argument>, <argument><expr><name><name>new</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name><name>new</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
	     <call><name>ntohl</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid alias range"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<break>break;</break>
      </block_content>}</block>
      
    <case>case <expr><name>LOPT_INTNAME</name></expr>:</case>  <comment type="block">/* --interface-name */</comment>
    <case>case <expr><name>LOPT_DYNHOST</name></expr>:</case>  <comment type="block">/* --dynamic-host */</comment>
      <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>interface_name</name></name> <modifier>*</modifier></type><name>new</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>up</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>domain</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
	
	<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>interface_name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>interface_name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>IN4</name> <operator>|</operator> <name>IN6</name></expr>;</expr_stmt>
	
	<comment type="block">/* Add to the end of the list, so that first name
	   of an interface is used for PTR lookups. */</comment>
	<for>for <control>(<init><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>int_names</name></name></expr>;</init> <condition><expr><operator>*</operator><name>up</name></expr>;</condition> <incr><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>up</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
	<expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	
	<while>while <condition>(<expr><operator>(</operator><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	  <block>{<block_content>
	    <if_stmt><if>if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>proto4</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>INP4</name></expr>;</expr_stmt></block_content></block></if>
	    <if type="elseif">else if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>proto6</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>INP6</name></expr>;</expr_stmt></block_content></block></if>
	    <else>else<block type="pseudo"><block_content>
	      <break>break;</break></block_content></block></else></if_stmt>
	    
	    <expr_stmt><expr><name>arg</name> <operator>=</operator> <name>comma</name></expr>;</expr_stmt>
	  </block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>comma</name> <operator>=</operator> <call><name>split_chr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	  <block>{<block_content>
	    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>comma</name></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>IN6</name></expr>;</expr_stmt></block_content></block></if>
	    <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>comma</name></expr></argument>, <argument><expr><literal type="string">"6"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>IN4</name></expr>;</expr_stmt></block_content></block></if>
	    <else>else<block type="pseudo"><block_content>
	      <expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><name>gen_err</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	  </block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>intr</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>option</name> <operator>==</operator> <name>LOPT_DYNHOST</name></expr>)</condition>
	  <block>{<block_content>
	    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>INP4</name> <operator>|</operator> <name>INP6</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"missing address in dynamic host"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IN4</name><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IN6</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>arg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block">/* provoke error below */</comment>

	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>IN4</name> <operator>|</operator> <name>IN6</name><operator>)</operator></expr>;</expr_stmt>
	  </block_content>}</block></if>
	<else>else
	  <block>{<block_content>
	    <if_stmt><if>if <condition>(<expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>INP4</name> <operator>|</operator> <name>INP6</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>arg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block">/* provoke error below */</comment>
	  </block_content>}</block></else></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>domain</name> <operator>||</operator> <operator>!</operator><name>arg</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>canonicalise_opt</name><argument_list>(<argument><expr><name>domain</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><ternary><condition><expr><name>option</name> <operator>==</operator> <name>LOPT_DYNHOST</name></expr> ?</condition><then>
		  <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad dynamic host"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad interface name"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<break>break;</break>
      </block_content>}</block>
      
    <case>case <expr><name>LOPT_CNAME</name></expr>:</case> <comment type="block">/* --cname */</comment>
      <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>cname</name></name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>alias</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>target</name><init>=<expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ttl</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>last</name> <operator>=</operator> <name>pen</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator> <expr><name>comma</name> <operator>=</operator> <name>arg</name></expr>;</init> <condition><expr><name>comma</name></expr>;</condition> <incr><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>comma</name></expr></argument>)</argument_list></call></expr></incr>)</control>
	  <block>{<block_content>
	    <expr_stmt><expr><name>pen</name> <operator>=</operator> <name>last</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>last</name> <operator>=</operator> <name>comma</name></expr>;</expr_stmt>
	  </block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pen</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad CNAME"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><name>pen</name> <operator>!=</operator> <name>arg</name> <operator>&amp;&amp;</operator> <call><name>atoi_check</name><argument_list>(<argument><expr><name>last</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ttl</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name>last</name> <operator>=</operator> <name>pen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  	
	<while>while <condition>(<expr><name>arg</name> <operator>!=</operator> <name>last</name></expr>)</condition>
	  <block>{<block_content>
	    <decl_stmt><decl><type><name>int</name></type> <name>arglen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    <expr_stmt><expr><name>alias</name> <operator>=</operator> <call><name>canonicalise_opt</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>target</name></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>target</name> <operator>=</operator> <call><name>canonicalise_opt</name><argument_list>(<argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>alias</name> <operator>||</operator> <operator>!</operator><name>target</name></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad CNAME"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      </block_content>}</block></if></if_stmt>
	    
	    <for>for <control>(<init><expr><name>new</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>cnames</name></name></expr>;</init> <condition><expr><name>new</name></expr>;</condition> <incr><expr><name>new</name> <operator>=</operator> <name><name>new</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	      <if_stmt><if>if <condition>(<expr><call><name>hostname_isequal</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>, <argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"duplicate CNAME"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt></block_content></block></for>
	    <expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>cname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>cnames</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>cnames</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>alias</name></name> <operator>=</operator> <name>alias</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <name>target</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>ttl</name></name> <operator>=</operator> <name>ttl</name></expr>;</expr_stmt>

	    <for>for <control>(<init><expr><name>arg</name> <operator>+=</operator> <name>arglen</name><operator>+</operator><literal type="number">1</literal></expr>;</init> <condition><expr><operator>*</operator><name>arg</name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>arg</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
	  </block_content>}</block></while>
      
	<break>break;</break>
      </block_content>}</block>

    <case>case <expr><name>LOPT_PTR</name></expr>:</case>  <comment type="block">/* --ptr-record */</comment>
      <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ptr_record</name></name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dom</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>target</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>dom</name> <operator>=</operator> <call><name>canonicalise_opt</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
	    <operator>(</operator><name>comma</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>target</name> <operator>=</operator> <call><name>canonicalise_opt</name><argument_list>(<argument><expr><name>comma</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad PTR record"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></if>
	<else>else
	  <block>{<block_content>
	    <expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ptr_record</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>dom</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>target</name></expr>;</expr_stmt>
	  </block_content>}</block></else></if_stmt>
	<break>break;</break>
      </block_content>}</block>

    <case>case <expr><name>LOPT_NAPTR</name></expr>:</case> <comment type="block">/* --naptr-record */</comment>
      <block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>naptr</name></name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>order</name></decl>, <decl><type ref="prev"/><name>pref</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name><init>=<expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>replace</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>arg</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	  <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	      <break>break;</break></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
	
	
	<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <literal type="number">6</literal> <operator>||</operator> 
	    <operator>!</operator><operator>(</operator><name>name</name> <operator>=</operator> <call><name>canonicalise_opt</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
	    <operator>!</operator><call><name>atoi_check16</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>order</name></expr></argument>)</argument_list></call> <operator>||</operator> 
	    <operator>!</operator><call><name>atoi_check16</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pref</name></expr></argument>)</argument_list></call> <operator>||</operator>
	    <operator>(</operator><name>k</name> <operator>==</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>replace</name> <operator>=</operator> <call><name>canonicalise_opt</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition>
          <block>{<block_content>
	    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>replace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad NAPTR record"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if>
	<else>else
	  <block>{<block_content>
	    <expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>naptr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>naptr</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>naptr</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>services</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>regexp</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>replace</name></name> <operator>=</operator> <name>replace</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>order</name></name> <operator>=</operator> <name>order</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>pref</name></name> <operator>=</operator> <name>pref</name></expr>;</expr_stmt>
	  </block_content>}</block></else></if_stmt>
	<break>break;</break>
      </block_content>}</block>

    <case>case <expr><name>LOPT_RR</name></expr>:</case> <comment type="block">/* dns-rr */</comment>
      <block>{<block_content>
       	<decl_stmt><decl><type><name><name>struct</name> <name>txt_record</name></name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>class</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>comma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	<expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>txt_record</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>atoi_check</name><argument_list>(<argument><expr><name>comma</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>class</name></expr></argument>)</argument_list></call> <operator>||</operator> 
	    <operator>!</operator><operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>canonicalise_opt</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
	    <operator>(</operator><name>data</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>len</name> <operator>=</operator> <call><name>parse_hex</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1U</literal><operator>)</operator></expr>)</condition>
          <block>{<block_content>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad RR record"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>class</name></name> <operator>=</operator> <name>class</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>rr</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>rr</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>txt</name></name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>txt</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt>
	
	<break>break;</break>
      </block_content>}</block>

    <case>case <expr><name>LOPT_CAA</name></expr>:</case> <comment type="block">/* --caa-record */</comment>
      <block>{<block_content>
       	<decl_stmt><decl><type><name><name>struct</name> <name>txt_record</name></name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tag</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>comma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>txt_record</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>rr</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>rr</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>atoi_check</name><argument_list>(<argument><expr><name>comma</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name>tag</name> <operator>||</operator> <operator>!</operator><name>value</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>canonicalise_opt</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad CAA record"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<expr_stmt><expr><call><name>unhide_metas</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>unhide_metas</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>txt</name></name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>txt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>txt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>txt</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>txt</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>class</name></name> <operator>=</operator> <name>T_CAA</name></expr>;</expr_stmt>
	
	<break>break;</break>
      </block_content>}</block>
	
    <case>case <expr><literal type="char">'Y'</literal></expr>:</case>  <comment type="block">/* --txt-record */</comment>
      <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>txt_record</name></name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cnt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	<expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>txt_record</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>class</name></name> <operator>=</operator> <name>C_IN</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>stat</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>canonicalise_opt</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad TXT record"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>txt</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>txt</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <ternary><condition><expr><name>comma</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>comma</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>len</name><operator>/</operator><literal type="number">255</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* room for extra counts */</comment>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>txt</name></name> <operator>=</operator> <name>p</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>cnt</name> <operator>=</operator> <name>p</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	
	<while>while <condition>(<expr><name>comma</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>comma</name></expr>)</condition>
	  <block>{<block_content>
	    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>comma</name><operator>++</operator></expr></init></decl>;</decl_stmt>

	    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">','</literal> <operator>||</operator> <operator>*</operator><name>cnt</name> <operator>==</operator> <literal type="number">255</literal></expr>)</condition>
	      <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name>comma</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>cnt</name> <operator>=</operator> <name>p</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	      </block_content>}</block></if>
	    <else>else
	      <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <call><name>unhide_meta</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><operator>*</operator><name>cnt</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
	      </block_content>}</block></else></if_stmt>
	  </block_content>}</block></while>

	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>p</name> <operator>-</operator> <name><name>new</name><operator>-&gt;</operator><name>txt</name></name></expr>;</expr_stmt>

	<break>break;</break>
      </block_content>}</block>
      
    <case>case <expr><literal type="char">'W'</literal></expr>:</case>  <comment type="block">/* --srv-host */</comment>
      <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>priority</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>weight</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>target</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>mx_srv_record</name></name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>name</name> <operator>=</operator> <call><name>canonicalise_opt</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad SRV record"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><name>comma</name></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name>arg</name> <operator>=</operator> <name>comma</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>target</name> <operator>=</operator> <call><name>canonicalise_opt</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad SRV target"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		
	    <if_stmt><if>if <condition>(<expr><name>comma</name></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>comma</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>atoi_check16</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>)</condition>
                  <block>{<block_content>
                    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid port number"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  </block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>comma</name></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><name>arg</name> <operator>=</operator> <name>comma</name></expr>;</expr_stmt>
		    <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>atoi_check16</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>priority</name></expr></argument>)</argument_list></call></expr>)</condition>
                      <block>{<block_content>
                        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        <expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid priority"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      </block_content>}</block></if></if_stmt>
		    <if_stmt><if>if <condition>(<expr><name>comma</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>atoi_check16</name><argument_list>(<argument><expr><name>comma</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>weight</name></expr></argument>)</argument_list></call></expr>)</condition>
                      <block>{<block_content>
                        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        <expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid weight"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                      </block_content>}</block></if></if_stmt>
		  </block_content>}</block></if></if_stmt>
	      </block_content>}</block></if></if_stmt>
	  </block_content>}</block></if></if_stmt>
	
	<expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>mx_srv_record</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>mxnames</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>mxnames</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>issrv</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <name>target</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>srvport</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>priority</name></name> <operator>=</operator> <name>priority</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>weight</name></name> <operator>=</operator> <name>weight</name></expr>;</expr_stmt>
	<break>break;</break>
      </block_content>}</block>
      
    <case>case <expr><name>LOPT_HOST_REC</name></expr>:</case> <comment type="block">/* --host-record */</comment>
      <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>host_record</name></name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Bad host-record"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>host_record</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>host_record</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>ttl</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>arg</name></expr>)</condition>
	  <block>{<block_content>
	    <decl_stmt><decl><type><name><name>union</name> <name>all_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dig</name></decl>;</decl_stmt>

	    <for>for <control>(<init><expr><name>dig</name> <operator>=</operator> <name>arg</name></expr>;</init> <condition><expr><operator>*</operator><name>dig</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>dig</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	      <if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>dig</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <operator>*</operator><name>dig</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
		<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>dig</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>ttl</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	    <if type="elseif">else if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>addr4</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>addr</name><operator>.</operator><name>addr4</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>HR_4</name></expr>;</expr_stmt>
	      </block_content>}</block></if>
	    <if type="elseif">else if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>addr6</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>addr6</name></name> <operator>=</operator> <name><name>addr</name><operator>.</operator><name>addr6</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>HR_6</name></expr>;</expr_stmt>
	      </block_content>}</block></if>
	    <else>else
	      <block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>canon</name> <init>= <expr><call><name>canonicalise_opt</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>struct</name> <name>name_list</name></name> <modifier>*</modifier></type><name>nl</name></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>canon</name></expr>)</condition>
                  <block>{<block_content>
		    <decl_stmt><decl><type><name><name>struct</name> <name>name_list</name></name> <modifier>*</modifier></type><name>tmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
		    <for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name><name>new</name><operator>-&gt;</operator><name>names</name></name></expr>;</init> <condition><expr><name>tmp</name></expr>;</condition> <incr><expr><name>tmp</name> <operator>=</operator> <name>next</name></expr></incr>)</control>
		      <block>{<block_content>
			<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      </block_content>}</block></for>
		    <expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Bad name in host-record"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  </block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>nl</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>name_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>nl</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>canon</name></expr>;</expr_stmt>
		<comment type="block">/* keep order, so that PTR record goes to first name */</comment>
		<expr_stmt><expr><name><name>nl</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>new</name><operator>-&gt;</operator><name>names</name></name></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>names</name></name> <operator>=</operator> <name>nl</name></expr>;</expr_stmt></block_content></block></if>
		<else>else
		  <block>{<block_content> 
		    <decl_stmt><decl><type><name><name>struct</name> <name>name_list</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
		    <for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name><name>new</name><operator>-&gt;</operator><name>names</name></name></expr>;</init> <condition><expr><name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr>;</condition> <incr><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
		    <expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>nl</name></expr>;</expr_stmt>
		  </block_content>}</block></else></if_stmt>
	      </block_content>}</block></else></if_stmt>
	    
	    <expr_stmt><expr><name>arg</name> <operator>=</operator> <name>comma</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></while>

	<comment type="block">/* Keep list order */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>daemon</name><operator>-&gt;</operator><name>host_records_tail</name></name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>host_records</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>host_records_tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>host_records_tail</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	<break>break;</break>
      </block_content>}</block>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
    <case>case <expr><name>LOPT_DNSSEC_STAMP</name></expr>:</case> <comment type="block">/* --dnssec-timestamp */</comment>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>timestamp_file</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <break>break;</break>

    <case>case <expr><name>LOPT_DNSSEC_CHECK</name></expr>:</case> <comment type="block">/* --dnssec-check-unsigned */</comment>
      <if_stmt><if>if <condition>(<expr><name>arg</name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"no"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>set_option_bool</name><argument_list>(<argument><expr><name>OPT_DNSSEC_IGN_NS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad value for dnssec-check-unsigned"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
      <break>break;</break>
      
    <case>case <expr><name>LOPT_TRUST_ANCHOR</name></expr>:</case> <comment type="block">/* --trust-anchor */</comment>
      <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ds_config</name></name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ds_config</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cp1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>keyhex</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>digest</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>algo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>class</name></name> <operator>=</operator> <name>C_IN</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>comma</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>algo</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>comma</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	  <block>{<block_content>
	    <decl_stmt><decl><type><name>int</name></type> <name>class</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>comma</name></expr></argument>, <argument><expr><literal type="string">"IN"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>class</name> <operator>=</operator> <name>C_IN</name></expr>;</expr_stmt></block_content></block></if>
	    <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>comma</name></expr></argument>, <argument><expr><literal type="string">"CH"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>class</name> <operator>=</operator> <name>C_CHAOS</name></expr>;</expr_stmt></block_content></block></if>
	    <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>comma</name></expr></argument>, <argument><expr><literal type="string">"HS"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>class</name> <operator>=</operator> <name>C_HESIOD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    
	    <if_stmt><if>if <condition>(<expr><name>class</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>class</name></name> <operator>=</operator> <name>class</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>comma</name> <operator>=</operator> <name>algo</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>algo</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>comma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      </block_content>}</block></if></if_stmt>
	  </block_content>}</block></if></if_stmt>
		  
       	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>comma</name> <operator>||</operator> <operator>!</operator><name>algo</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>digest</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>algo</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name>keyhex</name> <operator>=</operator> <call><name>split</name><argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
	    <operator>!</operator><call><name>atoi_check16</name><argument_list>(<argument><expr><name>comma</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>keytag</name></name></expr></argument>)</argument_list></call> <operator>||</operator> 
	    <operator>!</operator><call><name>atoi_check8</name><argument_list>(<argument><expr><name>algo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>algo</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
	    <operator>!</operator><call><name>atoi_check8</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>digest_type</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
	    <operator>!</operator><operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>canonicalise_opt</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad trust anchor"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    
	<comment type="block">/* Upper bound on length */</comment>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><call><name>strlen</name><argument_list>(<argument><expr><name>keyhex</name></expr></argument>)</argument_list></call><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>digest</name></name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>unhide_metas</name><argument_list>(<argument><expr><name>keyhex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* 4034: "Whitespace is allowed within digits" */</comment>
	<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>keyhex</name></expr>;</init> <condition><expr><operator>*</operator><name>cp</name></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>
	  <if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <for>for <control>(<init><expr><name>cp1</name> <operator>=</operator> <name>cp</name></expr>;</init> <condition><expr><operator>*</operator><name>cp1</name></expr>;</condition> <incr><expr><name>cp1</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	      <expr_stmt><expr><operator>*</operator><name>cp1</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>cp1</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>digestlen</name></name> <operator>=</operator> <call><name>parse_hex</name><argument_list>(<argument><expr><name>keyhex</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>new</name><operator>-&gt;</operator><name>digest</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>ret_err_free</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad HEX in trust anchor"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt>
	
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>ds</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>ds</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	
	<break>break;</break>
      </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		
    <default>default:</default>
      <expr_stmt><expr><call><name>ret_err</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unsupported option (check that dnsmasq was compiled with DHCP/TFTP/DNSSEC/DBus support)"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
    </block_content>}</block></switch>
  
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_file</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hard_opt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>from_script</name></decl></parameter>)</parameter_list>	
<block>{<block_content>
  <decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>lineno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buff</name> <init>= <expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></init></decl>;</decl_stmt>
  
  <while>while <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>MAXDNAME</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>white</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>option</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errmess</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>arg</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>option</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>hard_opt</name> <operator>==</operator> <name>LOPT_REV_SERV</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>hard_opt</name></expr></else></ternary></expr>;</expr_stmt>

      <comment type="block">/* Memory allocation failure longjmps here if mem_recover == 1 */</comment> 
      <if_stmt><if>if <condition>(<expr><name>option</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>hard_opt</name> <operator>==</operator> <name>LOPT_REV_SERV</name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><call><name>setjmp</name><argument_list>(<argument><expr><name>mem_jmp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <continue>continue;</continue></block_content></block></if></if_stmt>
	  <expr_stmt><expr><name>mem_recover</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>arg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>lineno</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>errmess</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      
      <comment type="block">/* Implement quotes, inside quotes we allow \\ \" \n and \t 
	 metacharacters get hidden also strip comments */</comment>
      <for>for <control>(<init><expr><name>white</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name>buff</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	      <for>for<control>(<init>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'"'</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
		  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><literal type="string">"\"tnebr\\"</literal></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
		    <block>{<block_content>
		      <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt></block_content></block></if>
		      <if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block_content></block></if>
		      <if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'b'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\b'</literal></expr>;</expr_stmt></block_content></block></if>
		      <if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'r'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt></block_content></block></if>
		      <if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'e'</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* escape */</comment>
			<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\033'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		      <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    </block_content>}</block></if></if_stmt>
		  <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>hide_meta</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

	      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 
		<block>{<block_content>
		  <expr_stmt><expr><name>errmess</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"missing \""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <goto>goto <name>oops</name>;</goto> 
		</block_content>}</block></if></if_stmt>

	      <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>

	  <if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
	      <expr_stmt><expr><name>white</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	    </block_content>}</block></if>
	  <else>else 
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><name>white</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition>
		<block>{<block_content> 
		  <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		  <break>break;</break>
		</block_content>}</block></if></if_stmt>
	      <expr_stmt><expr><name>white</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	    </block_content>}</block></else></if_stmt> 
	</block_content>}</block></for>

      
      <comment type="block">/* strip leading spaces */</comment>
      <for>for <control>(<init><expr><name>start</name> <operator>=</operator> <name>buff</name></expr>;</init> <condition><expr><operator>*</operator><name>start</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>start</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>start</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
      
      <comment type="block">/* strip trailing spaces */</comment>
      <for>for <control>(<init><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><operator>(</operator><name>len</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>start</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator></expr>;</condition> <incr><expr><name>len</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
      
      <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if> 
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>start</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>option</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><operator>(</operator><name>p</name><operator>=</operator><call><name>strchr</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <comment type="block">/* allow spaces around "=" */</comment>
	  <for>for <control>(<init><expr><name>arg</name> <operator>=</operator> <name>p</name><operator>+</operator><literal type="number">1</literal></expr>;</init> <condition><expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>arg</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
	  <for>for <control>(<init>;</init> <condition><expr><name>p</name> <operator>&gt;=</operator> <name>start</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'='</literal><operator>)</operator></expr>;</condition> <incr><expr><name>p</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
	    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
	</block_content>}</block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>option</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
	  <for>for <control>(<init><expr><name>option</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>opts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> 
	    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>opts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name>option</name> <operator>=</operator> <name><name>opts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr>;</expr_stmt>
		<break>break;</break>
	      </block_content>}</block></if></if_stmt></block_content></block></for>
	  
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>option</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>errmess</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	  <if type="elseif">else if <condition>(<expr><name><name>opts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>has_arg</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>arg</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>errmess</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"extraneous parameter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	  <if type="elseif">else if <condition>(<expr><name><name>opts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>has_arg</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>arg</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>errmess</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"missing parameter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	  <if type="elseif">else if <condition>(<expr><name>hard_opt</name> <operator>==</operator> <name>LOPT_REV_SERV</name> <operator>&amp;&amp;</operator> <name>option</name> <operator>!=</operator> <literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name>option</name> <operator>!=</operator> <name>LOPT_REV_SERV</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>errmess</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"illegal option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

    <label><name>oops</name>:</label>
      <if_stmt><if>if <condition>(<expr><name>errmess</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>errmess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  
      <if_stmt><if>if <condition>(<expr><name>errmess</name> <operator>||</operator> <operator>!</operator><call><name>one_opt</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"error"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hard_opt</name> <operator>==</operator> <name>LOPT_REV_SERV</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name>from_script</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" in output from %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" at line %d of %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name>hard_opt</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>EC_BADCONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

  <expr_stmt><expr><name>mem_recover</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DHCP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INOTIFY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>option_read_dynfile</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"read %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>AH_DHCP_HST</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>one_file</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>LOPT_BANK</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>AH_DHCP_OPT</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>one_file</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>LOPT_OPTS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>one_file</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hard_opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nofile_ok</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>do_popen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>read_stdin</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <struct><specifier>static</specifier> struct <name>fileread</name> <block>{
    <decl_stmt><decl><type><name>dev_t</name></type> <name>dev</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ino_t</name></type> <name>ino</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>fileread</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
  }</block> <decl><modifier>*</modifier><name>filesread</name> <init>= <expr><name>NULL</name></expr></init></decl>;</struct>
  
  <if_stmt><if>if <condition>(<expr><name>hard_opt</name> <operator>==</operator> <name>LOPT_CONF_OPT</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* default conf-file reading */</comment>
      <expr_stmt><expr><name>hard_opt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>nofile_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

   <if_stmt><if>if <condition>(<expr><name>hard_opt</name> <operator>==</operator> <name>LOPT_CONF_SCRIPT</name></expr>)</condition>
     <block>{<block_content>
       <expr_stmt><expr><name>hard_opt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
       <expr_stmt><expr><name>do_popen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
   
   <if_stmt><if>if <condition>(<expr><name>hard_opt</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>do_popen</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>read_stdin</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>read_stdin</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>file</name> <operator>=</operator> <literal type="string">"stdin"</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>f</name> <operator>=</operator> <name>stdin</name></expr>;</expr_stmt>
    </block_content>}</block></if>
  <else>else
    <block>{<block_content>
      <comment type="block">/* ignore repeated files. */</comment>
      <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>statbuf</name></decl>;</decl_stmt>
    
      <if_stmt><if>if <condition>(<expr><name>hard_opt</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>stat</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name><name>struct</name> <name>fileread</name></name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
	  
	  <for>for <control>(<init><expr><name>r</name> <operator>=</operator> <name>filesread</name></expr>;</init> <condition><expr><name>r</name></expr>;</condition> <incr><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>dev</name></name> <operator>==</operator> <name><name>statbuf</name><operator>.</operator><name>st_dev</name></name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>ino</name></name> <operator>==</operator> <name><name>statbuf</name><operator>.</operator><name>st_ino</name></name></expr>)</condition><block type="pseudo"><block_content>
	      <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
	  
	  <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>safe_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>fileread</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>filesread</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>filesread</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>dev</name></name> <operator>=</operator> <name><name>statbuf</name><operator>.</operator><name>st_dev</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>ino</name></name> <operator>=</operator> <name><name>statbuf</name><operator>.</operator><name>st_ino</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>do_popen</name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>f</name> <operator>=</operator> <call><name>popen</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot execute %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>EC_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>   
	  <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name> <operator>&amp;&amp;</operator> <name>nofile_ok</name></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if> <comment type="block">/* No conffile, all done. */</comment>
	  <else>else
	    <block>{<block_content>
	      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot read %s: %s"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	      <if_stmt><if>if <condition>(<expr><name>hard_opt</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if>
	      <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>EC_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	    </block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt> 
    </block_content>}</block></else></if_stmt>
  
   <expr_stmt><expr><call><name>read_file</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>hard_opt</name></expr></argument>, <argument><expr><name>do_popen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>do_popen</name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>pclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"error executing %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>EC_MISC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s returns non-zero error code"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>rc</name><operator>+</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>file_filter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>ent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>lenfile</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* ignore emacs backups and dotfiles */</comment>

  <if_stmt><if>if <condition>(<expr><name>lenfile</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> 
      <name><name>ent</name><operator>-&gt;</operator><name>d_name</name><index>[<expr><name>lenfile</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'~'</literal> <operator>||</operator>
      <operator>(</operator><name><name>ent</name><operator>-&gt;</operator><name>d_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal> <operator>&amp;&amp;</operator> <name><name>ent</name><operator>-&gt;</operator><name>d_name</name><index>[<expr><name>lenfile</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal><operator>)</operator> <operator>||</operator>
      <name><name>ent</name><operator>-&gt;</operator><name>d_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* expand any name which is a directory */</comment>
<function><type><name><name>struct</name> <name>hostsfile</name></name> <modifier>*</modifier></type><name>expand_filelist</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hostsfile</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>entcnt</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>hostsfile</name></name> <modifier>*</modifier></type><name>ah</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>up</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>namelist</name></decl>;</decl_stmt>

  <comment type="block">/* find largest used index */</comment>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>SRC_AH</name></expr><operator>,</operator> <expr><name>ah</name> <operator>=</operator> <name>list</name></expr>;</init> <condition><expr><name>ah</name></expr>;</condition> <incr><expr><name>ah</name> <operator>=</operator> <name><name>ah</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name>last</name> <operator>=</operator> <name>ah</name></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <name><name>ah</name><operator>-&gt;</operator><name>index</name></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>ah</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>ah</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AH_DIR</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>ah</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AH_INACTIVE</name></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>ah</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AH_INACTIVE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>

  <for>for <control>(<init><expr><name>ah</name> <operator>=</operator> <name>list</name></expr>;</init> <condition><expr><name>ah</name></expr>;</condition> <incr><expr><name>ah</name> <operator>=</operator> <name><name>ah</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ah</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AH_INACTIVE</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>buf</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name><name>ah</name><operator>-&gt;</operator><name>fname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	  <block>{<block_content>
	    <decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>ent</name></decl>;</decl_stmt>
	    
	    <comment type="block">/* don't read this as a file */</comment>
	    <expr_stmt><expr><name><name>ah</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AH_INACTIVE</name></expr>;</expr_stmt>
	    
	    <expr_stmt><expr><name>entcnt</name> <operator>=</operator> <call><name>scandir</name><argument_list>(<argument><expr><name><name>ah</name><operator>-&gt;</operator><name>fname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>namelist</name></expr></argument>, <argument><expr><name>file_filter</name></expr></argument>, <argument><expr><name>alphasort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><name>entcnt</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot access directory %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, 
			<argument><expr><name><name>ah</name><operator>-&gt;</operator><name>fname</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	    <else>else
	      <block>{<block_content>
		<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>entcnt</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>
		  <block>{<block_content>
		    <expr_stmt><expr><name>ent</name> <operator>=</operator> <name><name>namelist</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
		    <decl_stmt><decl><type><name>size_t</name></type> <name>lendir</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ah</name><operator>-&gt;</operator><name>fname</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		    <decl_stmt><decl><type><name>size_t</name></type> <name>lenfile</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		    <decl_stmt><decl><type><name><name>struct</name> <name>hostsfile</name></name> <modifier>*</modifier></type><name>ah1</name></decl>;</decl_stmt>
		    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
		    
		    <comment type="block">/* see if we have an existing record.
		       dir is ah-&gt;fname 
		       file is ent-&gt;d_name
		       path to match is ah1-&gt;fname */</comment>
		    
		    <for>for <control>(<init><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name>list</name></expr><operator>,</operator> <expr><name>ah1</name> <operator>=</operator> <name>list</name></expr>;</init> <condition><expr><name>ah1</name></expr>;</condition> <incr><expr><name>ah1</name> <operator>=</operator> <name>next</name></expr></incr>)</control>
		      <block>{<block_content>
			<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>ah1</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>lendir</name> <operator>&lt;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>ah1</name><operator>-&gt;</operator><name>fname</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			    <call><name>strstr</name><argument_list>(<argument><expr><name><name>ah1</name><operator>-&gt;</operator><name>fname</name></name></expr></argument>, <argument><expr><name><name>ah</name><operator>-&gt;</operator><name>fname</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>ah1</name><operator>-&gt;</operator><name>fname</name></name> <operator>&amp;&amp;</operator>
			    <name><name>ah1</name><operator>-&gt;</operator><name>fname</name><index>[<expr><name>lendir</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator>
			    <call><name>strcmp</name><argument_list>(<argument><expr><name><name>ah1</name><operator>-&gt;</operator><name>fname</name></name> <operator>+</operator> <name>lendir</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ent</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			  <block>{<block_content>
			    <expr_stmt><expr><name><name>ah1</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AH_INACTIVE</name></expr>;</expr_stmt>
			    <comment type="block">/* If found, remove from list to re-insert at the end.
			       Unless it's already at the end. */</comment>
			    <if_stmt><if>if <condition>(<expr><name>last</name> <operator>!=</operator> <name>ah1</name></expr>)</condition><block type="pseudo"><block_content>
			      <expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			    <break>break;</break>
			  </block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>ah1</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		      </block_content>}</block></for>
		    
		    <comment type="block">/* make new record */</comment>
		    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ah1</name></expr>)</condition>
		      <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ah1</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>hostsfile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			  <continue>continue;</continue></block_content></block></if></if_stmt>
			
			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>path</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><name>lendir</name> <operator>+</operator> <name>lenfile</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
			  <block>{<block_content>
			    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ah1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			    <continue>continue;</continue>
			  </block_content>}</block></if></if_stmt>
		      	
			<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>ah</name><operator>-&gt;</operator><name>fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>ent</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ah1</name><operator>-&gt;</operator><name>fname</name></name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ah1</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>i</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ah1</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>AH_DIR</name></expr>;</expr_stmt>
		      </block_content>}</block></if></if_stmt>

		    <comment type="block">/* Edge case, may be the last in the list anyway */</comment>
		    <if_stmt><if>if <condition>(<expr><name>last</name> <operator>!=</operator> <name>ah1</name></expr>)</condition><block type="pseudo"><block_content>
		      <expr_stmt><expr><name><name>last</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>ah1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		    <expr_stmt><expr><name><name>ah1</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		    <expr_stmt><expr><name>last</name> <operator>=</operator> <name>ah1</name></expr>;</expr_stmt>
		    
		    <comment type="block">/* inactivate record if not regular file */</comment>
		    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ah1</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AH_DIR</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>stat</name><argument_list>(<argument><expr><name><name>ah1</name><operator>-&gt;</operator><name>fname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		      <expr_stmt><expr><name><name>ah1</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AH_INACTIVE</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
		    
		  </block_content>}</block></for>
	      </block_content>}</block></else></if_stmt>
	    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>namelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt></block_content></block></for>
  
  <return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>read_servers_file</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>servers_file</name></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
       <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot read %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>servers_file</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <return>return;</return>
    </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><call><name>mark_servers</name><argument_list>(<argument><expr><name>SERV_FROM_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>read_file</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>servers_file</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>LOPT_REV_SERV</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cleanup_servers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>check_servers</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
 

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_dynamic_conf</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_config</name></name> <modifier>*</modifier></type><name>configs</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>up</name></decl>;</decl_stmt>
  
  <comment type="block">/* remove existing... */</comment>
  <for>for <control>(<init><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_conf</name></name></expr><operator>,</operator> <expr><name>configs</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_conf</name></name></expr>;</init> <condition><expr><name>configs</name></expr>;</condition> <incr><expr><name>configs</name> <operator>=</operator> <name>cp</name></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name>cp</name> <operator>=</operator> <name><name>configs</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>configs</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONFIG_BANK</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>dhcp_config_free</name><argument_list>(<argument><expr><name>configs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>configs</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_dynamic_opt</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_opt</name></name> <modifier>*</modifier></type><name>opts</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>up</name></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_opts</name></name></expr><operator>,</operator> <expr><name>opts</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_opts</name></name></expr>;</init> <condition><expr><name>opts</name></expr>;</condition> <incr><expr><name>opts</name> <operator>=</operator> <name>cp</name></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name>cp</name> <operator>=</operator> <name><name>opts</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DHOPT_BANK</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>dhcp_opt_free</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>reread_dhcp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
   <decl_stmt><decl><type><name><name>struct</name> <name>hostsfile</name></name> <modifier>*</modifier></type><name>hf</name></decl>;</decl_stmt>

   <comment type="block">/* Do these even if there is no daemon-&gt;dhcp_hosts_file or
      daemon-&gt;dhcp_opts_file since entries may have been created by the
      inotify dynamic file reading system. */</comment>
   
   <expr_stmt><expr><call><name>clear_dynamic_conf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>clear_dynamic_opt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

   <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_hosts_file</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_hosts_file</name></name> <operator>=</operator> <call><name>expand_filelist</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_hosts_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>hf</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_hosts_file</name></name></expr>;</init> <condition><expr><name>hf</name></expr>;</condition> <incr><expr><name>hf</name> <operator>=</operator> <name><name>hf</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>hf</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AH_INACTIVE</name><operator>)</operator></expr>)</condition>
	  <block>{<block_content>
	    <if_stmt><if>if <condition>(<expr><call><name>one_file</name><argument_list>(<argument><expr><name><name>hf</name><operator>-&gt;</operator><name>fname</name></name></expr></argument>, <argument><expr><name>LOPT_BANK</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  
	      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"read %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>hf</name><operator>-&gt;</operator><name>fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  </block_content>}</block></if></if_stmt></block_content></block></for>
    </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_opts_file</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_opts_file</name></name> <operator>=</operator> <call><name>expand_filelist</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_opts_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>hf</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_opts_file</name></name></expr>;</init> <condition><expr><name>hf</name></expr>;</condition> <incr><expr><name>hf</name> <operator>=</operator> <name><name>hf</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>hf</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AH_INACTIVE</name><operator>)</operator></expr>)</condition>
	  <block>{<block_content>
	    <if_stmt><if>if <condition>(<expr><call><name>one_file</name><argument_list>(<argument><expr><name><name>hf</name><operator>-&gt;</operator><name>fname</name></name></expr></argument>, <argument><expr><name>LOPT_OPTS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  
	      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"read %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>hf</name><operator>-&gt;</operator><name>fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  </block_content>}</block></if></if_stmt></block_content></block></for>
    </block_content>}</block></if></if_stmt>

<cpp:ifdef>#  <cpp:directive>ifdef</cpp:directive> <name>HAVE_INOTIFY</name></cpp:ifdef>
  <comment type="block">/* Setup notify and read pre-existing files. */</comment>
  <expr_stmt><expr><call><name>set_dynamic_inotify</name><argument_list>(<argument><expr><name>AH_DHCP_HST</name> <operator>|</operator> <name>AH_DHCP_OPT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>read_opts</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>compile_opts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>argbuf_size</name> <init>= <expr><name>MAXDNAME</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>argbuf</name> <init>= <expr><call><name>opt_malloc</name><argument_list>(<argument><expr><name>argbuf_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buff</name> <init>= <expr><call><name>opt_malloc</name><argument_list>(<argument><expr><name>MAXDNAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>option</name></decl>, <decl><type ref="prev"/><name>testmode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>conffile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      
  <expr_stmt><expr><name>opterr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name>daemon</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>daemon</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>daemon</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>daemon</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name> <operator>=</operator> <name>buff</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name> <operator>=</operator> <call><name>safe_malloc</name><argument_list>(<argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Set defaults - everything else is zero or NULL */</comment>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>cachesize</name></name> <operator>=</operator> <name>CACHESIZ</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>ftabsize</name></name> <operator>=</operator> <name>FTABSIZ</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name>NAMESERVER_PORT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_client_port</name></name> <operator>=</operator> <name>DHCP_CLIENT_PORT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_server_port</name></name> <operator>=</operator> <name>DHCP_SERVER_PORT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>default_resolv</name><operator>.</operator><name>is_default</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>default_resolv</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>RESOLVFILE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>resolv_files</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>default_resolv</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>username</name></name> <operator>=</operator> <name>CHUSER</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>runfile</name></name> <operator>=</operator>  <name>RUNFILE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_max</name></name> <operator>=</operator> <name>MAXLEASES</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>tftp_max</name></name> <operator>=</operator> <name>TFTP_MAX_CONNECTIONS</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>edns_pktsz</name></name> <operator>=</operator> <name>EDNS_PKTSZ</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>log_fac</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>auth_ttl</name></name> <operator>=</operator> <name>AUTH_TTL</name></expr>;</expr_stmt> 
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>soa_refresh</name></name> <operator>=</operator> <name>SOA_REFRESH</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>soa_retry</name></name> <operator>=</operator> <name>SOA_RETRY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>soa_expiry</name></name> <operator>=</operator> <name>SOA_EXPIRY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>randport_limit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>host_index</name></name> <operator>=</operator> <name>SRC_AH</name></expr>;</expr_stmt>
  
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_ID</name></cpp:ifndef>
  <expr_stmt><expr><call><name>add_txt</name><argument_list>(<argument><expr><literal type="string">"version.bind"</literal></expr></argument>, <argument><expr><literal type="string">"dnsmasq-"</literal> <name>VERSION</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>add_txt</name><argument_list>(<argument><expr><literal type="string">"authors.bind"</literal></expr></argument>, <argument><expr><literal type="string">"Simon Kelley"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>add_txt</name><argument_list>(<argument><expr><literal type="string">"copyright.bind"</literal></expr></argument>, <argument><expr><name>COPYRIGHT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>add_txt</name><argument_list>(<argument><expr><literal type="string">"cachesize.bind"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TXT_STAT_CACHESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>add_txt</name><argument_list>(<argument><expr><literal type="string">"insertions.bind"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TXT_STAT_INSERTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>add_txt</name><argument_list>(<argument><expr><literal type="string">"evictions.bind"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TXT_STAT_EVICTIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>add_txt</name><argument_list>(<argument><expr><literal type="string">"misses.bind"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TXT_STAT_MISSES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>add_txt</name><argument_list>(<argument><expr><literal type="string">"hits.bind"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TXT_STAT_HITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_AUTH</name></cpp:ifdef>
  <expr_stmt><expr><call><name>add_txt</name><argument_list>(<argument><expr><literal type="string">"auth.bind"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TXT_STAT_AUTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>add_txt</name><argument_list>(<argument><expr><literal type="string">"servers.bind"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TXT_STAT_SERVERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Pi-hole modification */</comment>
  <expr_stmt><expr><call><name>add_txt</name><argument_list>(<argument><expr><literal type="string">"privacylevel.pihole"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TXT_PRIVACYLEVEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block" format="doxygen">/************************/</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <comment type="block" format="doxygen">/******** Pi-hole modification ********/</comment>
  <expr_stmt><expr><call><name>add_txt</name><argument_list>(<argument><expr><literal type="string">"version.FTL"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>get_FTL_version</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <comment type="block" format="doxygen">/**************************************/</comment>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> 
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_GETOPT_LONG</name></cpp:ifdef>
      <expr_stmt><expr><name>option</name> <operator>=</operator> <call><name>getopt_long</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>OPTSTRING</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><name>option</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>OPTSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      
      <if_stmt><if>if <condition>(<expr><name>option</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
	  <for>for <control>(<init>;</init> <condition><expr><name>optind</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>optind</name><operator>++</operator></expr></incr>)</control>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>argv</name><index>[<expr><name>optind</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	      <for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>c</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"junk found in command line"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_BADCONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
	    </block_content>}</block></for>
	  <break>break;</break>
	</block_content>}</block></if></if_stmt>

      <comment type="block">/* Copy optarg so that argv doesn't get changed */</comment>
      <if_stmt><if>if <condition>(<expr><name>optarg</name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>argbuf_size</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>argbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name>argbuf_size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	      <expr_stmt><expr><name>argbuf</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><name>argbuf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	  <expr_stmt><expr><call><name>safe_strncpy</name><argument_list>(<argument><expr><name>argbuf</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>, <argument><expr><name>argbuf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>arg</name> <operator>=</operator> <name>argbuf</name></expr>;</expr_stmt>
	</block_content>}</block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
      
      <comment type="block">/* command-line only stuff */</comment>
      <if_stmt><if>if <condition>(<expr><name>option</name> <operator>==</operator> <name>LOPT_TEST</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>testmode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name>option</name> <operator>==</operator> <literal type="char">'w'</literal></expr>)</condition>
	<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP</name></cpp:ifdef>
	  <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"dhcp"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>display_opts</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
	  <if type="elseif">else if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"dhcp6"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>display_opts6</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	  <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    <expr_stmt><expr><call><name>do_usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	  <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><name>option</name> <operator>==</operator> <literal type="char">'v'</literal></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Dnsmasq version %s  %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>VERSION</name></expr></argument>, <argument><expr><name>COPYRIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Compile time options: %s\n\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>compile_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"This software comes with ABSOLUTELY NO WARRANTY.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Dnsmasq is free software, and you are welcome to redistribute it\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"under the terms of the GNU General Public License, version 2 or 3.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><name>option</name> <operator>==</operator> <literal type="char">'C'</literal></expr>)</condition>
	<block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><name>conffile</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>conffile</name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	  <else>else
	    <block>{<block_content>
	      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>extra</name> <init>= <expr><call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	      <expr_stmt><expr><call><name>one_file</name><argument_list>(<argument><expr><name>extra</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_GETOPT_LONG</name></cpp:ifdef>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>one_opt</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"try --help"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
	    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>one_opt</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"try -w"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  
	    <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad command line options: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>EC_BADCONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>argbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>conffile</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>one_file</name><argument_list>(<argument><expr><name>conffile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>conffile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>one_file</name><argument_list>(<argument><expr><name>CONFFILE</name></expr></argument>, <argument><expr><name>LOPT_CONF_OPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <comment type="block">/* port might not be known when the address is parsed - fill in here */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>servers</name></name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
      <for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>servers</name></name></expr>;</init> <condition><expr><name>tmp</name></expr>;</condition> <incr><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>tmp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SERV_HAS_SOURCE</name><operator>)</operator></expr>)</condition>
	  <block>{<block_content>
	    <if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>source_addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>source_addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>query_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	    <if type="elseif">else if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>source_addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>source_addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>query_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  </block_content>}</block></if></if_stmt></block_content></block></for>
    </block_content>}</block></if></if_stmt> 
  
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>host_records</name></name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>host_record</name></name> <modifier>*</modifier></type><name>hr</name></decl>;</decl_stmt>
      
      <for>for <control>(<init><expr><name>hr</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>host_records</name></name></expr>;</init> <condition><expr><name>hr</name></expr>;</condition> <incr><expr><name>hr</name> <operator>=</operator> <name><name>hr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><name><name>hr</name><operator>-&gt;</operator><name>ttl</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name><name>hr</name><operator>-&gt;</operator><name>ttl</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>local_ttl</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
    </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>cnames</name></name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>cname</name></name> <modifier>*</modifier></type><name>cn</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cn2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cn3</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOLOOP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TESTLOOP</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>      

      <comment type="block">/* Fill in TTL for CNAMES now we have local_ttl.
	 Also prepare to do loop detection. */</comment>
      <for>for <control>(<init><expr><name>cn</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>cnames</name></name></expr>;</init> <condition><expr><name>cn</name></expr>;</condition> <incr><expr><name>cn</name> <operator>=</operator> <name><name>cn</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name><name>cn</name><operator>-&gt;</operator><name>ttl</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>cn</name><operator>-&gt;</operator><name>ttl</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>local_ttl</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  <expr_stmt><expr><name><name>cn</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>cn</name><operator>-&gt;</operator><name>targetp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	  <for>for <control>(<init><expr><name>cn2</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>cnames</name></name></expr>;</init> <condition><expr><name>cn2</name></expr>;</condition> <incr><expr><name>cn2</name> <operator>=</operator> <name><name>cn2</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><call><name>hostname_isequal</name><argument_list>(<argument><expr><name><name>cn</name><operator>-&gt;</operator><name>target</name></name></expr></argument>, <argument><expr><name><name>cn2</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name><name>cn</name><operator>-&gt;</operator><name>targetp</name></name> <operator>=</operator> <name>cn2</name></expr>;</expr_stmt>
		<break>break;</break>
	      </block_content>}</block></if></if_stmt></block_content></block></for>
	</block_content>}</block></for>
      
      <comment type="block">/* Find any CNAME loops.*/</comment>
      <for>for <control>(<init><expr><name>cn</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>cnames</name></name></expr>;</init> <condition><expr><name>cn</name></expr>;</condition> <incr><expr><name>cn</name> <operator>=</operator> <name><name>cn</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
	  <for>for <control>(<init><expr><name>cn2</name> <operator>=</operator> <name><name>cn</name><operator>-&gt;</operator><name>targetp</name></name></expr>;</init> <condition><expr><name>cn2</name></expr>;</condition> <incr><expr><name>cn2</name> <operator>=</operator> <name><name>cn2</name><operator>-&gt;</operator><name>targetp</name></name></expr></incr>)</control>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><name><name>cn2</name><operator>-&gt;</operator><name>flag</name></name> <operator>==</operator> <name>NOLOOP</name></expr>)</condition><block type="pseudo"><block_content>
		<break>break;</break></block_content></block></if></if_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><name><name>cn2</name><operator>-&gt;</operator><name>flag</name></name> <operator>==</operator> <name>TESTLOOP</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"CNAME loop involving %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>cn</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>, <argument><expr><name>EC_BADCONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      
	      <expr_stmt><expr><name><name>cn2</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>TESTLOOP</name></expr>;</expr_stmt>
	    </block_content>}</block></for>
	  
	  <for>for <control>(<init><expr><name>cn3</name> <operator>=</operator> <name><name>cn</name><operator>-&gt;</operator><name>targetp</name></name></expr>;</init> <condition><expr><name>cn3</name> <operator>!=</operator> <name>cn2</name></expr>;</condition> <incr><expr><name>cn3</name> <operator>=</operator> <name><name>cn3</name><operator>-&gt;</operator><name>targetp</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>cn3</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>NOLOOP</name></expr>;</expr_stmt></block_content></block></for>
	</block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>if_addrs</name></name></expr>)</condition>
    <block>{<block_content>  
      <decl_stmt><decl><type><name><name>struct</name> <name>iname</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
      <for>for<control>(<init><expr><name>tmp</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>if_addrs</name></name></expr>;</init> <condition><expr><name>tmp</name></expr>;</condition> <incr><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
    </block_content>}</block></if></if_stmt>
	
  <comment type="block">/* create default, if not specified */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>authserver</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>daemon</name><operator>-&gt;</operator><name>hostmaster</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="string">"hostmaster."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>authserver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>hostmaster</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_pxe_vendors</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_pxe_vendors</name></name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dhcp_pxe_vendor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_pxe_vendors</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>DHCP_PXE_DEF_VENDOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_pxe_vendors</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* only one of these need be specified: the other defaults to the host-name */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOCALMX</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>mxnames</name></name> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>mxtarget</name></name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>mx_srv_record</name></name> <modifier>*</modifier></type><name>mx</name></decl>;</decl_stmt>
      
      <if_stmt><if>if <condition>(<expr><call><name>gethostname</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>MAXDNAME</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot get host-name: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_MISC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <for>for <control>(<init><expr><name>mx</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>mxnames</name></name></expr>;</init> <condition><expr><name>mx</name></expr>;</condition> <incr><expr><name>mx</name> <operator>=</operator> <name><name>mx</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mx</name><operator>-&gt;</operator><name>issrv</name></name> <operator>&amp;&amp;</operator> <call><name>hostname_isequal</name><argument_list>(<argument><expr><name><name>mx</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
      
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>daemon</name><operator>-&gt;</operator><name>mxtarget</name></name> <operator>||</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOCALMX</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>mx</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>mx</name> <operator>=</operator> <call><name>opt_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>mx_srv_record</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>mx</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>mxnames</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>mx</name><operator>-&gt;</operator><name>issrv</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>mx</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>mx</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>mxnames</name></name> <operator>=</operator> <name>mx</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>daemon</name><operator>-&gt;</operator><name>mxtarget</name></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>mxtarget</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <for>for <control>(<init><expr><name>mx</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>mxnames</name></name></expr>;</init> <condition><expr><name>mx</name></expr>;</condition> <incr><expr><name>mx</name> <operator>=</operator> <name><name>mx</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mx</name><operator>-&gt;</operator><name>issrv</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>mx</name><operator>-&gt;</operator><name>target</name></name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name><name>mx</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>mxtarget</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
    </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NO_RESOLV</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
      <name><name>daemon</name><operator>-&gt;</operator><name>resolv_files</name></name> <operator>&amp;&amp;</operator> 
      <name><name>daemon</name><operator>-&gt;</operator><name>resolv_files</name><operator>-&gt;</operator><name>next</name></name> <operator>&amp;&amp;</operator> 
      <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NO_POLL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"only one resolv.conf file allowed in no-poll mode."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_BADCONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_RESOLV_DOMAIN</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NO_RESOLV</name></expr></argument>)</argument_list></call> <operator>||</operator>
	  <operator>!</operator><name><name>daemon</name><operator>-&gt;</operator><name>resolv_files</name></name> <operator>||</operator> 
	  <operator>(</operator><name><name>daemon</name><operator>-&gt;</operator><name>resolv_files</name></name><operator>)</operator><operator>-&gt;</operator><name>next</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"must have exactly one resolv.conf to read domain from."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_BADCONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><operator>(</operator><name><name>daemon</name><operator>-&gt;</operator><name>resolv_files</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to read %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name><name>daemon</name><operator>-&gt;</operator><name>resolv_files</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><name>EC_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <while>while <condition>(<expr><operator>(</operator><name>line</name> <operator>=</operator> <call><name>fgets</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>MAXDNAME</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name> <init>= <expr><call><name>strtok</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">" \t\n\r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"search"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <continue>continue;</continue></block_content></block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>token</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" \t\n\r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>  
	      <operator>(</operator><name><name>daemon</name><operator>-&gt;</operator><name>domain_suffix</name></name> <operator>=</operator> <call><name>canonicalise_opt</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></while>

      <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>daemon</name><operator>-&gt;</operator><name>domain_suffix</name></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"no search directive found in %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name><name>daemon</name><operator>-&gt;</operator><name>resolv_files</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><name>EC_MISC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>domain_suffix</name></name></expr>)</condition>
    <block>{<block_content>
       <comment type="block">/* add domain for any srv record without one. */</comment>
      <decl_stmt><decl><type><name><name>struct</name> <name>mx_srv_record</name></name> <modifier>*</modifier></type><name>srv</name></decl>;</decl_stmt>
      
      <for>for <control>(<init><expr><name>srv</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>mxnames</name></name></expr>;</init> <condition><expr><name>srv</name></expr>;</condition> <incr><expr><name>srv</name> <operator>=</operator> <name><name>srv</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>issrv</name></name> <operator>&amp;&amp;</operator>
	    <call><name>strchr</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> 
	    <call><name>strchr</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>domain_suffix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>opt_string_alloc</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt></block_content></block></for>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DHCP_FQDN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"there must be a default domain when --dhcp-fqdn is set"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_BADCONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="block">/* If there's access-control config, then ignore --local-service, it's intended
     as a system default to keep otherwise unconfigured installations safe. */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>if_names</name></name> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>if_except</name></name> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>if_addrs</name></name> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>authserver</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>reset_option_bool</name><argument_list>(<argument><expr><name>OPT_LOCAL_SERVICE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

  <if_stmt><if>if <condition>(<expr><name>testmode</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"dnsmasq: %s.\n"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"syntax check OK"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>  
</unit>
