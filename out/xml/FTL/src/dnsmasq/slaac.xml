<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/dnsmasq/slaac.c"><comment type="block">/* dnsmasq is Copyright (c) 2000-2022 Simon Kelley

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 dated June, 1991, or
   (at your option) version 3 dated 29 June, 2007.
 
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
     
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnsmasq.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/icmp6.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>ping_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>slaac_add_addrs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>slaac_address</name></name> <modifier>*</modifier></type><name>slaac</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>old</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>up</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>dns_dirty</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LEASE_HAVE_HWADDR</name><operator>)</operator> <operator>||</operator> 
      <operator>(</operator><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>LEASE_TA</name> <operator>|</operator> <name>LEASE_NA</name><operator>)</operator><operator>)</operator> <operator>||</operator>
      <name><name>lease</name><operator>-&gt;</operator><name>last_interface</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
      <operator>!</operator><name><name>lease</name><operator>-&gt;</operator><name>hostname</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return ;</return></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><name>old</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>slaac_address</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>slaac_address</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <for>for <control>(<init><expr><name>context</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp6</name></name></expr>;</init> <condition><expr><name>context</name></expr>;</condition> <incr><expr><name>context</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content> 
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_RA_NAME</name><operator>)</operator> <operator>&amp;&amp;</operator> 
	<operator>!</operator><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_OLD</name><operator>)</operator> <operator>&amp;&amp;</operator>
	<name><name>lease</name><operator>-&gt;</operator><name>last_interface</name></name> <operator>==</operator> <name><name>context</name><operator>-&gt;</operator><name>if_index</name></name></expr>)</condition>
      <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>addr</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>start6</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>lease</name><operator>-&gt;</operator><name>hwaddr_len</name></name> <operator>==</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator>
	    <operator>(</operator><name><name>lease</name><operator>-&gt;</operator><name>hwaddr_type</name></name> <operator>==</operator> <name>ARPHRD_ETHER</name> <operator>||</operator> <name><name>lease</name><operator>-&gt;</operator><name>hwaddr_type</name></name> <operator>==</operator> <name>ARPHRD_IEEE802</name><operator>)</operator></expr>)</condition>
	  <block>{<block_content>
	    <comment type="block">/* convert MAC address to EUI-64 */</comment>
	    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>s6_addr</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>hwaddr</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>s6_addr</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lease</name><operator>-&gt;</operator><name>hwaddr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>s6_addr</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>s6_addr</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xfe</literal></expr>;</expr_stmt>
	  </block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARPHRD_EUI64</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<if type="elseif">else if <condition>(<expr><name><name>lease</name><operator>-&gt;</operator><name>hwaddr_len</name></name> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator>
		 <name><name>lease</name><operator>-&gt;</operator><name>hwaddr_type</name></name> <operator>==</operator> <name>ARPHRD_EUI64</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>s6_addr</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>hwaddr</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARPHRD_IEEE1394</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ARPHRD_EUI64</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<if type="elseif">else if <condition>(<expr><name><name>lease</name><operator>-&gt;</operator><name>clid_len</name></name> <operator>==</operator> <literal type="number">9</literal> <operator>&amp;&amp;</operator> 
		 <name><name>lease</name><operator>-&gt;</operator><name>clid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator>  <name>ARPHRD_EUI64</name> <operator>&amp;&amp;</operator>
		 <name><name>lease</name><operator>-&gt;</operator><name>hwaddr_type</name></name> <operator>==</operator> <name>ARPHRD_IEEE1394</name></expr>)</condition><block type="pseudo"><block_content>
	  <comment type="block">/* firewire has EUI-64 identifier as clid */</comment>
	  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>s6_addr</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lease</name><operator>-&gt;</operator><name>clid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<else>else<block type="pseudo"><block_content>
	  <continue>continue;</continue></block_content></block></else></if_stmt>
	
	<expr_stmt><expr><name><name>addr</name><operator>.</operator><name>s6_addr</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>^=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt>
	
	<comment type="block">/* check if we already have this one */</comment>
	<for>for <control>(<init><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name>old</name></expr><operator>,</operator> <expr><name>slaac</name> <operator>=</operator> <name>old</name></expr>;</init> <condition><expr><name>slaac</name></expr>;</condition> <incr><expr><name>slaac</name> <operator>=</operator> <name><name>slaac</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	  <block>{<block_content>
	    <if_stmt><if>if <condition>(<expr><call><name>IN6_ARE_ADDR_EQUAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>slaac</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name><name>slaac</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<comment type="block">/* recheck when DHCPv4 goes through init-reboot */</comment>
		<if_stmt><if>if <condition>(<expr><name>force</name></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><name><name>slaac</name><operator>-&gt;</operator><name>ping_time</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>slaac</name><operator>-&gt;</operator><name>backoff</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		    <expr_stmt><expr><name>dns_dirty</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		  </block_content>}</block></if></if_stmt>
		<break>break;</break>
	      </block_content>}</block></if></if_stmt>
	    <expr_stmt><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>slaac</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	  </block_content>}</block></for>
	    
	<comment type="block">/* No, make new one */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>slaac</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>slaac</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>slaac_address</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name><name>slaac</name><operator>-&gt;</operator><name>ping_time</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>slaac</name><operator>-&gt;</operator><name>backoff</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>slaac</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
	    <comment type="block">/* Do RA's to prod it */</comment>
	    <expr_stmt><expr><call><name>ra_start_unsolicited</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><name>slaac</name></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name><name>slaac</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>slaac_address</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>slaac_address</name></name> <operator>=</operator> <name>slaac</name></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt></block_content></block></for>
  
  <if_stmt><if>if <condition>(<expr><name>old</name> <operator>||</operator> <name>dns_dirty</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>lease_update_dns</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <comment type="block">/* Free any no reused */</comment>
  <for>for <control>(<init>;</init> <condition><expr><name>old</name></expr>;</condition> <incr><expr><name>old</name> <operator>=</operator> <name>slaac</name></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name>slaac</name> <operator>=</operator> <name><name>old</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>


<function><type><name>time_t</name></type> <name>periodic_slaac</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>leases</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>slaac_address</name></name> <modifier>*</modifier></type><name>slaac</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>time_t</name></type> <name>next_event</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  
  <for>for <control>(<init><expr><name>context</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp6</name></name></expr>;</init> <condition><expr><name>context</name></expr>;</condition> <incr><expr><name>context</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_RA_NAME</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_OLD</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

  <comment type="block">/* nothing configured */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>context</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <while>while <condition>(<expr><name>ping_id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>ping_id</name> <operator>=</operator> <call><name>rand16</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

  <for>for <control>(<init><expr><name>lease</name> <operator>=</operator> <name>leases</name></expr>;</init> <condition><expr><name>lease</name></expr>;</condition> <incr><expr><name>lease</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>slaac</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>slaac_address</name></name></expr>;</init> <condition><expr><name>slaac</name></expr>;</condition> <incr><expr><name>slaac</name> <operator>=</operator> <name><name>slaac</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
      <block>{<block_content>
	<comment type="block">/* confirmed or given up? */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>slaac</name><operator>-&gt;</operator><name>backoff</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>slaac</name><operator>-&gt;</operator><name>ping_time</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	  <continue>continue;</continue></block_content></block></if></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><call><name>difftime</name><argument_list>(<argument><expr><name><name>slaac</name><operator>-&gt;</operator><name>ping_time</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0.0</literal></expr>)</condition>
	  <block>{<block_content>
	    <decl_stmt><decl><type><name><name>struct</name> <name>ping_packet</name></name> <modifier>*</modifier></type><name>ping</name></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name></type> <name>addr</name></decl>;</decl_stmt>
 
	    <expr_stmt><expr><call><name>reset_counter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ping</name> <operator>=</operator> <call><name>expand</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ping_packet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	      <continue>continue;</continue></block_content></block></if></if_stmt>

	    <expr_stmt><expr><name><name>ping</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ICMP6_ECHO_REQUEST</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>ping</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>ping</name><operator>-&gt;</operator><name>identifier</name></name> <operator>=</operator> <name>ping_id</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>ping</name><operator>-&gt;</operator><name>sequence_no</name></name> <operator>=</operator> <name><name>slaac</name><operator>-&gt;</operator><name>backoff</name></name></expr>;</expr_stmt>
	    
	    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SOCKADDR_SA_LEN</name></cpp:ifdef>
	    <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sin6_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sin6_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>IPPROTO_ICMPV6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sin6_addr</name></name> <operator>=</operator> <name><name>slaac</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
	    
	    <if_stmt><if>if <condition>(<expr><call><name>sendto</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>icmp6fd</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>outpacket</name><operator>.</operator><name>iov_base</name></name></expr></argument>, <argument><expr><call><name>save_counter</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
		       <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>addr</name></expr></argument>,  <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
		<name>errno</name> <operator>==</operator> <name>EHOSTUNREACH</name> <operator>&amp;&amp;</operator>
		<name><name>slaac</name><operator>-&gt;</operator><name>backoff</name></name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name><name>slaac</name><operator>-&gt;</operator><name>ping_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if> <comment type="block">/* Give up */</comment> 
	    <else>else
	      <block>{<block_content>
		<expr_stmt><expr><name><name>slaac</name><operator>-&gt;</operator><name>ping_time</name></name> <operator>+=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>slaac</name><operator>-&gt;</operator><name>backoff</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><call><name>rand16</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">21785</literal><operator>)</operator></expr>;</expr_stmt> <comment type="block">/* 0 - 3 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>slaac</name><operator>-&gt;</operator><name>backoff</name></name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name><name>slaac</name><operator>-&gt;</operator><name>ping_time</name></name> <operator>+=</operator> <call><name>rand16</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">4000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block">/* 0 - 15 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>slaac</name><operator>-&gt;</operator><name>backoff</name></name> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name><name>slaac</name><operator>-&gt;</operator><name>backoff</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      </block_content>}</block></else></if_stmt>
	  </block_content>}</block></if></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><name><name>slaac</name><operator>-&gt;</operator><name>ping_time</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
	    <operator>(</operator><name>next_event</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>difftime</name><argument_list>(<argument><expr><name>next_event</name></expr></argument>, <argument><expr><name><name>slaac</name><operator>-&gt;</operator><name>ping_time</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0.0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name>next_event</name> <operator>=</operator> <name><name>slaac</name><operator>-&gt;</operator><name>ping_time</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></for></block_content></block></for>

  <return>return <expr><name>next_event</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>slaac_ping_reply</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>sender</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>interface</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>leases</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>slaac_address</name></name> <modifier>*</modifier></type><name>slaac</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>ping_packet</name></name> <modifier>*</modifier></type><name>ping</name> <init>= <expr><operator>(</operator>struct <name>ping_packet</name> <operator>*</operator><operator>)</operator><name>packet</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>gotone</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>ping</name><operator>-&gt;</operator><name>identifier</name></name> <operator>==</operator> <name>ping_id</name></expr>)</condition><block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>lease</name> <operator>=</operator> <name>leases</name></expr>;</init> <condition><expr><name>lease</name></expr>;</condition> <incr><expr><name>lease</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
      <for>for <control>(<init><expr><name>slaac</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>slaac_address</name></name></expr>;</init> <condition><expr><name>slaac</name></expr>;</condition> <incr><expr><name>slaac</name> <operator>=</operator> <name><name>slaac</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><name><name>slaac</name><operator>-&gt;</operator><name>backoff</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>IN6_ARE_ADDR_EQUAL</name><argument_list>(<argument><expr><name>sender</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>slaac</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name><name>slaac</name><operator>-&gt;</operator><name>backoff</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	    <expr_stmt><expr><name>gotone</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>sender</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_QUIET_DHCP6</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"SLAAC-CONFIRM(%s) %s %s"</literal></expr></argument>, <argument><expr><name>interface</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
	  </block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><call><name>lease_update_dns</name><argument_list>(<argument><expr><name>gotone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
	
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
