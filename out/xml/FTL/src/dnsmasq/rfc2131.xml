<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/dnsmasq/rfc2131.c"><comment type="block">/* dnsmasq is Copyright (c) 2000-2022 Simon Kelley

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 dated June, 1991, or
   (at your option) version 3 dated 29 June, 2007.
 
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
     
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnsmasq.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP</name></cpp:ifdef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>option_len</name><parameter_list>(<parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)(((unsigned char *)(opt))[1]))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>option_ptr</name><parameter_list>(<parameter><type><name>opt</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void *)&amp;(((unsigned char *)(opt))[2u+(unsigned int)(i)]))</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SCRIPT</name></cpp:ifdef>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>add_extradata_opt</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>sanitise</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>in_addr</name></name></type> <name>server_id</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>override</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>fallback</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>calc_time</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_config</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>option_put</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_packet</name></name> <modifier>*</modifier></type><name>mess</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>option_put_string</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_packet</name></name> <modifier>*</modifier></type><name>mess</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, 
			      <parameter><decl><type><name>int</name></type> <name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>null_term</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>in_addr</name></name></type> <name>option_addr</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>option_uint</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>log_packet</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ext_mac</name></decl></parameter>, 
		       <parameter><decl><type><name>int</name></type> <name>mac_len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>interface</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>xid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>option_find</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_packet</name></name> <modifier>*</modifier></type><name>mess</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt_type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minsize</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>option_find1</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minsize</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>dhcp_packet_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_packet</name></name> <modifier>*</modifier></type><name>mess</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>agent_id</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>real_end</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>clear_packet</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_packet</name></name> <modifier>*</modifier></type><name>mess</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>in_list</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>do_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
		       <parameter><decl><type><name><name>struct</name> <name>dhcp_packet</name></name> <modifier>*</modifier></type><name>mess</name></decl></parameter>,
		       <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
		       <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>req_options</name></decl></parameter>,
		       <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>, 
		       <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>domain</name></decl></parameter>,
		       <parameter><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>netid</name></decl></parameter>,
		       <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>subnet_addr</name></decl></parameter>, 
		       <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>fqdn_flags</name></decl></parameter>,
		       <parameter><decl><type><name>int</name></type> <name>null_term</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pxe_arch</name></decl></parameter>,
		       <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>uuid</name></decl></parameter>,
		       <parameter><decl><type><name>int</name></type> <name>vendor_class_len</name></decl></parameter>,
		       <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>,
		       <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>lease_time</name></decl></parameter>,
		       <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>fuzz</name></decl></parameter>,
		       <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pxevendor</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>match_vendor_opts</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_opt</name></name> <modifier>*</modifier></type><name>dopt</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>do_encap_opts</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_opt</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_packet</name></name> <modifier>*</modifier></type><name>mess</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>null_term</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pxe_misc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_packet</name></name> <modifier>*</modifier></type><name>mess</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>uuid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pxevendor</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>prune_vendor_opts</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>netid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>dhcp_opt</name></name> <modifier>*</modifier></type><name>pxe_opts</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pxe_arch</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>netid</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>local</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>dhcp_boot</name></name> <modifier>*</modifier></type><name>find_boot</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>netid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pxe_uefi_workaround</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pxe_arch</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>netid</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_packet</name></name> <modifier>*</modifier></type><name>mess</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>local</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pxe</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>apply_delay</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>xid</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>recvtime</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>netid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>is_pxe_client</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_packet</name></name> <modifier>*</modifier></type><name>mess</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pxe_vendor</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>size_t</name></type> <name>dhcp_reply</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>iface_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>int_index</name></decl></parameter>,
		  <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unicast_dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>loopback</name></decl></parameter>,
		  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>is_inform</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pxe</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>fallback</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>recvtime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>clid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>ltmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lease</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_vendor</name></name> <modifier>*</modifier></type><name>vendor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_mac</name></name> <modifier>*</modifier></type><name>mac</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid_list</name></name> <modifier>*</modifier></type><name>id_list</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>clid_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ignore</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>do_classes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>rapid_commit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>selecting</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>pxearch</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pxevendor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_packet</name></name> <modifier>*</modifier></type><name>mess</name> <init>= <expr><operator>(</operator>struct <name>dhcp_packet</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_packet</name><operator>.</operator><name>iov_base</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>mess</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt> 
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>real_end</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>mess</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt> 
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>offer_hostname</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>client_hostname</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>domain</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>hostname_auth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>borken_opt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>req_options</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>message</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>time</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_config</name></name> <modifier>*</modifier></type><name>config</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>netid</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tagif_netid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>subnet_addr</name></decl>, <decl><type ref="prev"/><name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>fuzz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mess_type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>fqdn_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>agent_id</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>uuid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>emac</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>vendor_class_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>emac_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid</name></name></type> <name>known_id</name></decl>, <decl><type ref="prev"/><name>iface_id</name></decl>, <decl><type ref="prev"/><name>cpewan_id</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_opt</name></name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>pxe_uuid</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>oui</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>serial</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SCRIPT</name></cpp:ifdef>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>class</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name><name>subnet_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name><name>override</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="block">/* set tag with name == interface */</comment>
  <expr_stmt><expr><name><name>iface_id</name><operator>.</operator><name>net</name></name> <operator>=</operator> <name>iface_name</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iface_id</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>netid</name> <operator>=</operator> <operator>&amp;</operator><name>iface_id</name></expr>;</expr_stmt> 
  
  <if_stmt><if>if <condition>(<expr><name><name>mess</name><operator>-&gt;</operator><name>op</name></name> <operator>!=</operator> <name>BOOTREQUEST</name> <operator>||</operator> <name><name>mess</name><operator>-&gt;</operator><name>hlen</name></name> <operator>&gt;</operator> <name>DHCP_CHADDR_MAX</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
   
  <if_stmt><if>if <condition>(<expr><name><name>mess</name><operator>-&gt;</operator><name>htype</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>mess</name><operator>-&gt;</operator><name>hlen</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <comment type="block">/* check for DHCP rather than BOOTP */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>option_find</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>OPTION_MESSAGE_TYPE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>u32</name></type> <name>cookie</name> <init>= <expr><call><name>htonl</name><argument_list>(<argument><expr><name>DHCP_COOKIE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      
      <comment type="block">/* only insist on a cookie for DHCP. */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>options</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cookie</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
      
      <expr_stmt><expr><name>mess_type</name> <operator>=</operator> <call><name>option_uint</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* two things to note here: expand_buf may move the packet,
	 so reassign mess from daemon-&gt;packet. Also, the size
	 sent includes the IP and UDP headers, hence the magic "-28" */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>option_find</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>OPTION_MAXMESSAGE</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>option_uint</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">28</literal></expr></init></decl>;</decl_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>DHCP_PACKET_MAX</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>size</name> <operator>=</operator> <name>DHCP_PACKET_MAX</name></expr>;</expr_stmt></block_content></block></if>
	  <if type="elseif">else if <condition>(<expr><name>size</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>dhcp_packet</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>dhcp_packet</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><call><name>expand_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_packet</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>mess</name> <operator>=</operator> <operator>(</operator>struct <name>dhcp_packet</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_packet</name><operator>.</operator><name>iov_base</name></name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>real_end</name> <operator>=</operator> <name>end</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>mess</name><operator>)</operator> <operator>+</operator> <name>size</name></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

      <comment type="block">/* Some buggy clients set ciaddr when they shouldn't, so clear that here since
	 it can affect the context-determination code. */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>option_find</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>OPTION_REQUESTED_IP</name></expr></argument>, <argument><expr><name>INADDRSZ</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>mess_type</name> <operator>==</operator> <name>DHCPDISCOVER</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>ciaddr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <comment type="block">/* search for device identity from CPEWAN devices, we pass this through to the script */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>option_find</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>OPTION_VENDOR_IDENT_OPT</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>unsigned</name>  <name>int</name></type> <name>elen</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name>option_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	  
	  <for>for <control>(<init><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>offset</name> <operator>&lt;</operator> <operator>(</operator><name>len</name> <operator>-</operator> <literal type="number">5</literal><operator>)</operator></expr>;</condition> <incr><expr><name>offset</name> <operator>+=</operator> <name>elen</name> <operator>+</operator> <literal type="number">5</literal></expr></incr>)</control>
	    <block>{<block_content>
	      <expr_stmt><expr><name>elen</name> <operator>=</operator> <call><name>option_uint</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <literal type="number">4</literal></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><call><name>option_uint</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>BRDBAND_FORUM_IANA</name> <operator>&amp;&amp;</operator> <name>offset</name> <operator>+</operator> <name>elen</name> <operator>+</operator> <literal type="number">5</literal> <operator>&lt;=</operator> <name>len</name></expr>)</condition>
		<block>{<block_content>
		  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><call><name>option_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><call><name>option_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <name>elen</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		  <expr_stmt><expr><name>oui</name> <operator>=</operator> <call><name>option_find1</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name>serial</name> <operator>=</operator> <call><name>option_find1</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SCRIPT</name></cpp:ifdef>
		  <expr_stmt><expr><name>class</name> <operator>=</operator> <call><name>option_find1</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>		  
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		  <comment type="block">/* If TR069-id is present set the tag "cpewan-id" to facilitate echoing 
		     the gateway id back. Note that the device class is optional */</comment>
		  <if_stmt><if>if <condition>(<expr><name>oui</name> <operator>&amp;&amp;</operator> <name>serial</name></expr>)</condition>
		    <block>{<block_content>
		      <expr_stmt><expr><name><name>cpewan_id</name><operator>.</operator><name>net</name></name> <operator>=</operator> <literal type="string">"cpewan-id"</literal></expr>;</expr_stmt>
		      <expr_stmt><expr><name><name>cpewan_id</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>netid</name></expr>;</expr_stmt>
		      <expr_stmt><expr><name>netid</name> <operator>=</operator> <operator>&amp;</operator><name>cpewan_id</name></expr>;</expr_stmt>
		    </block_content>}</block></if></if_stmt>
		  <break>break;</break>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></for>
	</block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>option_find</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>OPTION_AGENT_ID</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <comment type="block">/* Any agent-id needs to be copied back out, verbatim, as the last option
	     in the packet. Here, we shift it to the very end of the buffer, if it doesn't
	     get overwritten, then it will be shuffled back at the end of processing.
	     Note that the incoming options must not be overwritten here, so there has to 
	     be enough free space at the end of the packet to copy the option. */</comment>
	  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sopt</name></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>total</name> <init>= <expr><call><name>option_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>last_opt</name> <init>= <expr><call><name>option_find1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mess</name><operator>-&gt;</operator><name>options</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>u32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>mess</name><operator>)</operator> <operator>+</operator> <name>sz</name></expr></argument>,
						 <argument><expr><name>OPTION_END</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	  <if_stmt><if>if <condition>(<expr><name>last_opt</name> <operator>&amp;&amp;</operator> <name>last_opt</name> <operator>&lt;</operator> <name>end</name> <operator>-</operator> <name>total</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>end</name> <operator>-=</operator> <name>total</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>agent_id</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>agent_id</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>

	  <comment type="block">/* look for RFC3527 Link selection sub-option */</comment>
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sopt</name> <operator>=</operator> <call><name>option_find1</name><argument_list>(<argument><expr><call><name>option_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>option_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><call><name>option_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SUBOPT_SUBNET_SELECT</name></expr></argument>, <argument><expr><name>INADDRSZ</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>subnet_addr</name> <operator>=</operator> <call><name>option_addr</name><argument_list>(<argument><expr><name>sopt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	  <comment type="block">/* look for RFC5107 server-identifier-override */</comment>
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sopt</name> <operator>=</operator> <call><name>option_find1</name><argument_list>(<argument><expr><call><name>option_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>option_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><call><name>option_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SUBOPT_SERVER_OR</name></expr></argument>, <argument><expr><name>INADDRSZ</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>override</name> <operator>=</operator> <call><name>option_addr</name><argument_list>(<argument><expr><name>sopt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  
	  <comment type="block">/* if a circuit-id or remote-is option is provided, exact-match to options. */</comment> 
	  <for>for <control>(<init><expr><name>vendor</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_vendors</name></name></expr>;</init> <condition><expr><name>vendor</name></expr>;</condition> <incr><expr><name>vendor</name> <operator>=</operator> <name><name>vendor</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name>int</name></type> <name>search</name></decl>;</decl_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><name><name>vendor</name><operator>-&gt;</operator><name>match_type</name></name> <operator>==</operator> <name>MATCH_CIRCUIT</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>search</name> <operator>=</operator> <name>SUBOPT_CIRCUIT_ID</name></expr>;</expr_stmt></block_content></block></if>
	      <if type="elseif">else if <condition>(<expr><name><name>vendor</name><operator>-&gt;</operator><name>match_type</name></name> <operator>==</operator> <name>MATCH_REMOTE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>search</name> <operator>=</operator> <name>SUBOPT_REMOTE_ID</name></expr>;</expr_stmt></block_content></block></if>
	      <if type="elseif">else if <condition>(<expr><name><name>vendor</name><operator>-&gt;</operator><name>match_type</name></name> <operator>==</operator> <name>MATCH_SUBSCRIBER</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>search</name> <operator>=</operator> <name>SUBOPT_SUBSCR_ID</name></expr>;</expr_stmt></block_content></block></if>
	      <else>else<block type="pseudo"><block_content> 
		<continue>continue;</continue></block_content></block></else></if_stmt>

	      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sopt</name> <operator>=</operator> <call><name>option_find1</name><argument_list>(<argument><expr><call><name>option_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>option_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><call><name>option_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>search</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
		  <name><name>vendor</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <call><name>option_len</name><argument_list>(<argument><expr><name>sopt</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		  <call><name>memcmp</name><argument_list>(<argument><expr><call><name>option_ptr</name><argument_list>(<argument><expr><name>sopt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>vendor</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>vendor</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name><name>vendor</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>netid</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name>netid</name> <operator>=</operator> <operator>&amp;</operator><name><name>vendor</name><operator>-&gt;</operator><name>netid</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt> 
	    </block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

      <comment type="block">/* Check for RFC3011 subnet selector - only if RFC3527 one not present */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>subnet_addr</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>opt</name> <operator>=</operator> <call><name>option_find</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>OPTION_SUBNET_SELECT</name></expr></argument>, <argument><expr><name>INADDRSZ</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>subnet_addr</name> <operator>=</operator> <call><name>option_addr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <comment type="block">/* If there is no client identifier option, use the hardware address */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_IGNORE_CLID</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>opt</name> <operator>=</operator> <call><name>option_find</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>OPTION_CLIENT_ID</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>clid_len</name> <operator>=</operator> <call><name>option_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>clid</name> <operator>=</operator> <call><name>option_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

      <comment type="block">/* do we have a lease in store? */</comment>
      <expr_stmt><expr><name>lease</name> <operator>=</operator> <call><name>lease_find_by_client</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>chaddr</name></name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>hlen</name></name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>htype</name></name></expr></argument>, <argument><expr><name>clid</name></expr></argument>, <argument><expr><name>clid_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* If this request is missing a clid, but we've seen one before, 
	 use it again for option matching etc. */</comment>
      <if_stmt><if>if <condition>(<expr><name>lease</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>clid</name> <operator>&amp;&amp;</operator> <name><name>lease</name><operator>-&gt;</operator><name>clid</name></name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>clid_len</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>clid_len</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>clid</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>clid</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

      <comment type="block">/* find mac to use for logging and hashing */</comment>
      <expr_stmt><expr><name>emac</name> <operator>=</operator> <call><name>extended_hwaddr</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>htype</name></name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>hlen</name></name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>chaddr</name></name></expr></argument>, <argument><expr><name>clid_len</name></expr></argument>, <argument><expr><name>clid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>emac_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  
  <for>for <control>(<init><expr><name>mac</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_macs</name></name></expr>;</init> <condition><expr><name>mac</name></expr>;</condition> <incr><expr><name>mac</name> <operator>=</operator> <name><name>mac</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>mac</name><operator>-&gt;</operator><name>hwaddr_len</name></name> <operator>==</operator> <name><name>mess</name><operator>-&gt;</operator><name>hlen</name></name> <operator>&amp;&amp;</operator>
	<operator>(</operator><name><name>mac</name><operator>-&gt;</operator><name>hwaddr_type</name></name> <operator>==</operator> <name><name>mess</name><operator>-&gt;</operator><name>htype</name></name> <operator>||</operator> <name><name>mac</name><operator>-&gt;</operator><name>hwaddr_type</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
	<call><name>memcmp_masked</name><argument_list>(<argument><expr><name><name>mac</name><operator>-&gt;</operator><name>hwaddr</name></name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>chaddr</name></name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>hlen</name></name></expr></argument>, <argument><expr><name><name>mac</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>)</argument_list></call></expr>)</condition>
      <block>{<block_content>
	<expr_stmt><expr><name><name>mac</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>netid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>netid</name> <operator>=</operator> <operator>&amp;</operator><name><name>mac</name><operator>-&gt;</operator><name>netid</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt></block_content></block></for>
  
  <comment type="block">/* Determine network for this packet. Our caller will have already linked all the 
     contexts which match the addresses of the receiving interface but if the 
     machine has an address already, or came via a relay, or we have a subnet selector, 
     we search again. If we don't have have a giaddr or explicit subnet selector, 
     use the ciaddr. This is necessary because a  machine which got a lease via a 
     relay won't use the relay to renew. If matching a ciaddr fails but we have a context 
     from the physical network, continue using that to allow correct DHCPNAK generation later. */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>mess</name><operator>-&gt;</operator><name>giaddr</name><operator>.</operator><name>s_addr</name></name> <operator>||</operator> <name><name>subnet_addr</name><operator>.</operator><name>s_addr</name></name> <operator>||</operator> <name><name>mess</name><operator>-&gt;</operator><name>ciaddr</name><operator>.</operator><name>s_addr</name></name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context_tmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>context_new</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>struct</name> <name>shared_network</name></name> <modifier>*</modifier></type><name>share</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>force</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>via_relay</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>subnet_addr</name><operator>.</operator><name>s_addr</name></name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>addr</name> <operator>=</operator> <name>subnet_addr</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>force</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><name><name>mess</name><operator>-&gt;</operator><name>giaddr</name><operator>.</operator><name>s_addr</name></name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>addr</name> <operator>=</operator> <name><name>mess</name><operator>-&gt;</operator><name>giaddr</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>force</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name>via_relay</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <comment type="block">/* If ciaddr is in the hardware derived set of contexts, leave that unchanged */</comment>
	  <expr_stmt><expr><name>addr</name> <operator>=</operator> <name><name>mess</name><operator>-&gt;</operator><name>ciaddr</name></name></expr>;</expr_stmt>
	  <for>for <control>(<init><expr><name>context_tmp</name> <operator>=</operator> <name>context</name></expr>;</init> <condition><expr><name>context_tmp</name></expr>;</condition> <incr><expr><name>context_tmp</name> <operator>=</operator> <name><name>context_tmp</name><operator>-&gt;</operator><name>current</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><name><name>context_tmp</name><operator>-&gt;</operator><name>netmask</name><operator>.</operator><name>s_addr</name></name> <operator>&amp;&amp;</operator> 
		<call><name>is_same_net</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>context_tmp</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>context_tmp</name><operator>-&gt;</operator><name>netmask</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<call><name>is_same_net</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>context_tmp</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name><name>context_tmp</name><operator>-&gt;</operator><name>netmask</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name>context_new</name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
		<break>break;</break>
	      </block_content>}</block></if></if_stmt></block_content></block></for>
	</block_content>}</block></else></if_stmt> 
		
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>context_new</name></expr>)</condition>
	<block>{<block_content>
	  <for>for <control>(<init><expr><name>context_tmp</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp</name></name></expr>;</init> <condition><expr><name>context_tmp</name></expr>;</condition> <incr><expr><name>context_tmp</name> <operator>=</operator> <name><name>context_tmp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>netmask</name> <init>= <expr><name><name>context_tmp</name><operator>-&gt;</operator><name>netmask</name></name></expr></init></decl>;</decl_stmt>
	      
	      <comment type="block">/* guess the netmask for relayed networks */</comment>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>context_tmp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_NETMASK</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>context_tmp</name><operator>-&gt;</operator><name>netmask</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
		  <if_stmt><if>if <condition>(<expr><call><name>IN_CLASSA</name><argument_list>(<argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>context_tmp</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IN_CLASSA</name><argument_list>(<argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>context_tmp</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name><name>netmask</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><literal type="number">0xff000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		  <if type="elseif">else if <condition>(<expr><call><name>IN_CLASSB</name><argument_list>(<argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>context_tmp</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IN_CLASSB</name><argument_list>(<argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>context_tmp</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name><name>netmask</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><literal type="number">0xffff0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		  <if type="elseif">else if <condition>(<expr><call><name>IN_CLASSC</name><argument_list>(<argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>context_tmp</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IN_CLASSC</name><argument_list>(<argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>context_tmp</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name><name>netmask</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><literal type="number">0xffffff00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
		</block_content>}</block></if></if_stmt>

	      <comment type="block">/* check to see is a context is OK because of a shared address on
		 the relayed subnet. */</comment>
	      <if_stmt><if>if <condition>(<expr><name>via_relay</name></expr>)</condition><block type="pseudo"><block_content>
		<for>for <control>(<init><expr><name>share</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>shared_networks</name></name></expr>;</init> <condition><expr><name>share</name></expr>;</condition> <incr><expr><name>share</name> <operator>=</operator> <name><name>share</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
		  <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
		    <if_stmt><if>if <condition>(<expr><name><name>share</name><operator>-&gt;</operator><name>shared_addr</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		      <continue>continue;</continue></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		    <if_stmt><if>if <condition>(<expr><name><name>share</name><operator>-&gt;</operator><name>if_index</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
			<name><name>share</name><operator>-&gt;</operator><name>match_addr</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <name><name>mess</name><operator>-&gt;</operator><name>giaddr</name><operator>.</operator><name>s_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
		      <continue>continue;</continue></block_content></block></if></if_stmt>
		    
		    <if_stmt><if>if <condition>(<expr><name><name>netmask</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <literal type="number">0</literal>  <operator>&amp;&amp;</operator> 
			<call><name>is_same_net</name><argument_list>(<argument><expr><name><name>share</name><operator>-&gt;</operator><name>shared_addr</name></name></expr></argument>, <argument><expr><name><name>context_tmp</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name>netmask</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			<call><name>is_same_net</name><argument_list>(<argument><expr><name><name>share</name><operator>-&gt;</operator><name>shared_addr</name></name></expr></argument>, <argument><expr><name><name>context_tmp</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name>netmask</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		      <break>break;</break></block_content></block></if></if_stmt>
		  </block_content>}</block></for></block_content></block></if></if_stmt>
	      
	      <comment type="block">/* This section fills in context mainly when a client which is on a remote (relayed)
		 network renews a lease without using the relay, after dnsmasq has restarted. */</comment>
	      <if_stmt><if>if <condition>(<expr><name>share</name> <operator>||</operator>
		  <operator>(</operator><name><name>netmask</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <literal type="number">0</literal>  <operator>&amp;&amp;</operator> 
		   <call><name>is_same_net</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>context_tmp</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name>netmask</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		   <call><name>is_same_net</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>context_tmp</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name>netmask</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name><name>context_tmp</name><operator>-&gt;</operator><name>netmask</name></name> <operator>=</operator> <name>netmask</name></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><name><name>context_tmp</name><operator>-&gt;</operator><name>local</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name><name>context_tmp</name><operator>-&gt;</operator><name>local</name></name> <operator>=</operator> <name>fallback</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  <if_stmt><if>if <condition>(<expr><name><name>context_tmp</name><operator>-&gt;</operator><name>router</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>share</name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name><name>context_tmp</name><operator>-&gt;</operator><name>router</name></name> <operator>=</operator> <name><name>mess</name><operator>-&gt;</operator><name>giaddr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  
		  <comment type="block">/* fill in missing broadcast addresses for relayed ranges */</comment>
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>context_tmp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_BRDCAST</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>context_tmp</name><operator>-&gt;</operator><name>broadcast</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name><name>context_tmp</name><operator>-&gt;</operator><name>broadcast</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name><name>context_tmp</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>s_addr</name></name> <operator>|</operator> <operator>~</operator><name><name>context_tmp</name><operator>-&gt;</operator><name>netmask</name><operator>.</operator><name>s_addr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  
		  <expr_stmt><expr><name><name>context_tmp</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name>context_new</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name>context_new</name> <operator>=</operator> <name>context_tmp</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	      
	    </block_content>}</block></for>
	</block_content>}</block></if></if_stmt>
	  
      <if_stmt><if>if <condition>(<expr><name>context_new</name> <operator>||</operator> <name>force</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>context</name> <operator>=</operator> <name>context_new</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
    </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>context</name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>via</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>subnet_addr</name><operator>.</operator><name>s_addr</name></name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>via</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"with subnet selector"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subnet_addr</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <expr_stmt><expr><name>via</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"via"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name><name>mess</name><operator>-&gt;</operator><name>giaddr</name><operator>.</operator><name>s_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mess</name><operator>-&gt;</operator><name>giaddr</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>safe_strncpy</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>iface_name</name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"no address range available for DHCP request %s %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>via</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOG_OPTS</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context_tmp</name></decl>;</decl_stmt>
      <for>for <control>(<init><expr><name>context_tmp</name> <operator>=</operator> <name>context</name></expr>;</init> <condition><expr><name>context_tmp</name></expr>;</condition> <incr><expr><name>context_tmp</name> <operator>=</operator> <name><name>context_tmp</name><operator>-&gt;</operator><name>current</name></name></expr></incr>)</control>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>context_tmp</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>MAXDNAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name><name>context_tmp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>CONTEXT_STATIC</name> <operator>|</operator> <name>CONTEXT_PROXY</name><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>context_tmp</name><operator>-&gt;</operator><name>netmask</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%u available DHCP subnet: %s/%s"</literal></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if>
	  <else>else
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>context_tmp</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%u available DHCP range: %s -- %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* dhcp-match. If we have hex-and-wildcards, look for a left-anchored match.
     Otherwise assume the option is an array, and look for a matching element. 
     If no data given, existence of the option is enough. This code handles 
     rfc3925 V-I classes too. */</comment>
  <for>for <control>(<init><expr><name>o</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_match</name></name></expr>;</init> <condition><expr><name>o</name></expr>;</condition> <incr><expr><name>o</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>elen</name></decl>, <decl><type ref="prev"/><name>match</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>size_t</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>o2</name></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DHOPT_RFC3925</name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>option_find</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>OPTION_VENDOR_IDENT</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <continue>continue;</continue></block_content></block></if></if_stmt>
	  
	  <for>for <control>(<init><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>offset</name> <operator>&lt;</operator> <operator>(</operator><call><name>option_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">5u</literal><operator>)</operator></expr>;</condition> <incr><expr><name>offset</name> <operator>+=</operator> <name>len</name> <operator>+</operator> <literal type="number">5</literal></expr></incr>)</control>
	    <block>{<block_content>
	      <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>option_uint</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <literal type="number">4</literal></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <comment type="block">/* Need to take care that bad data can't run us off the end of the packet */</comment>
	      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>offset</name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">5</literal> <operator>&lt;=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><call><name>option_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
		  <operator>(</operator><call><name>option_uint</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>o</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>encap</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<for>for <control>(<init><expr><name>o2</name> <operator>=</operator> <name>offset</name> <operator>+</operator> <literal type="number">5</literal></expr>;</init> <condition><expr><name>o2</name> <operator>&lt;</operator> <name>offset</name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>o2</name> <operator>+=</operator> <name>elen</name> <operator>+</operator> <literal type="number">1</literal></expr></incr>)</control>
		  <block>{<block_content> 
		    <expr_stmt><expr><name>elen</name> <operator>=</operator> <call><name>option_uint</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>o2</name> <operator>+</operator> <name>elen</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>option_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
			<operator>(</operator><name>match</name> <operator>=</operator> <call><name>match_bytes</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><call><name>option_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>o2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>elen</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		      <break>break;</break></block_content></block></if></if_stmt>
		  </block_content>}</block></for></block_content></block></if></if_stmt>
	      <if_stmt><if>if <condition>(<expr><name>match</name></expr>)</condition><block type="pseudo"><block_content> 
		<break>break;</break></block_content></block></if></if_stmt>
	    </block_content>}</block></for>	  
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>option_find</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <continue>continue;</continue></block_content></block></if></if_stmt>
	  
	  <expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>match_bytes</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><call><name>option_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>option_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt> 

      <if_stmt><if>if <condition>(<expr><name>match</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>netid</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>netid</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>netid</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>netid</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
	
  <comment type="block">/* user-class options are, according to RFC3004, supposed to contain
     a set of counted strings. Here we check that this is so (by seeing
     if the counts are consistent with the overall option length) and if
     so zero the counts so that we don't get spurious matches between 
     the vendor string and the counts. If the lengths don't add up, we
     assume that the option is a single string and non RFC3004 compliant 
     and just do the substring match. dhclient provides these broken options.
     The code, later, which sends user-class data to the lease-change script
     relies on the transformation done here.
  */</comment>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>option_find</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>OPTION_USER_CLASS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ucp</name> <init>= <expr><call><name>option_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>tmp</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
      <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>option_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <name><name>ucp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
      <if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <call><name>option_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>option_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name> <operator>=</operator> <name>tmp</name></expr></incr>)</control>
	  <block>{<block_content>
	    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>j</name> <operator>+</operator> <name><name>ucp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>ucp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	  </block_content>}</block></for></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    
  <for>for <control>(<init><expr><name>vendor</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_vendors</name></name></expr>;</init> <condition><expr><name>vendor</name></expr>;</condition> <incr><expr><name>vendor</name> <operator>=</operator> <name><name>vendor</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>mopt</name></decl>;</decl_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>vendor</name><operator>-&gt;</operator><name>match_type</name></name> <operator>==</operator> <name>MATCH_VENDOR</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>mopt</name> <operator>=</operator> <name>OPTION_VENDOR_ID</name></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name><name>vendor</name><operator>-&gt;</operator><name>match_type</name></name> <operator>==</operator> <name>MATCH_USER</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>mopt</name> <operator>=</operator> <name>OPTION_USER_CLASS</name></expr>;</expr_stmt></block_content></block></if> 
      <else>else<block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></else></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>option_find</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>mopt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <operator>(</operator><call><name>option_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>vendor</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>vendor</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><call><name>option_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>vendor</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name><name>vendor</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>netid</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>netid</name> <operator>=</operator> <operator>&amp;</operator><name><name>vendor</name><operator>-&gt;</operator><name>netid</name></name></expr>;</expr_stmt>
		<break>break;</break>
	      </block_content>}</block></if></if_stmt></block_content></block></for>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

  <comment type="block">/* mark vendor-encapsulated options which match the client-supplied vendor class,
     save client-supplied vendor class */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>option_find</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>OPTION_VENDOR_ID</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff3</name></name></expr></argument>, <argument><expr><call><name>option_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>option_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>vendor_class_len</name> <operator>=</operator> <call><name>option_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>match_vendor_opts</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOG_OPTS</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>sanitise</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%u vendor class: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>sanitise</name><argument_list>(<argument><expr><call><name>option_find</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>OPTION_USER_CLASS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%u user class: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <name>BOOTREPLY</name></expr>;</expr_stmt>
  
  <expr_stmt><expr><name>config</name> <operator>=</operator> <call><name>find_config</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_conf</name></name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>clid</name></expr></argument>, <argument><expr><name>clid_len</name></expr></argument>, 
		       <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>chaddr</name></name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>hlen</name></name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>htype</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>run_tag_if</name><argument_list>(<argument><expr><name>netid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* set "known" tag for known hosts */</comment>
  <if_stmt><if>if <condition>(<expr><name>config</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>known_id</name><operator>.</operator><name>net</name></name> <operator>=</operator> <literal type="string">"known"</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>known_id</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>netid</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>netid</name> <operator>=</operator> <operator>&amp;</operator><name>known_id</name></expr>;</expr_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><call><name>find_config</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_conf</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>clid</name></expr></argument>, <argument><expr><name>clid_len</name></expr></argument>, 
		       <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>chaddr</name></name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>hlen</name></name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>htype</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>run_tag_if</name><argument_list>(<argument><expr><name>netid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>known_id</name><operator>.</operator><name>net</name></name> <operator>=</operator> <literal type="string">"known-othernet"</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>known_id</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>netid</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>netid</name> <operator>=</operator> <operator>&amp;</operator><name>known_id</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>mess_type</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>pxe</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* BOOTP request */</comment>
      <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid</name></name></type> <name>id</name></decl>, <decl><type ref="prev"/><name>bootp_id</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name> <modifier>*</modifier></type><name>logaddr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

      <comment type="block">/* must have a MAC addr for bootp */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>mess</name><operator>-&gt;</operator><name>htype</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>mess</name><operator>-&gt;</operator><name>hlen</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_PROXY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><call><name>have_config</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>CONFIG_DISABLE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"disabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>mess</name><operator>-&gt;</operator><name>options</name></name> <operator>+</operator> <literal type="number">64</literal></expr>;</expr_stmt> <comment type="block">/* BOOTP vend area is only 64 bytes */</comment>
            
      <if_stmt><if>if <condition>(<expr><call><name>have_config</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>CONFIG_NAME</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>hostname</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>hostname</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>domain</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>domain</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>config</name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid_list</name></name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

	  <for>for <control>(<init><expr><name>list</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>netid</name></name></expr>;</init> <condition><expr><name>list</name></expr>;</condition> <incr><expr><name>list</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	    <block>{<block_content>
	      <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>list</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>netid</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>netid</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>list</name></name></expr>;</expr_stmt>
	    </block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

      <comment type="block">/* Match incoming filename field as a netid. */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>mess</name><operator>-&gt;</operator><name>file</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* ensure zero term. */</comment>
	  <expr_stmt><expr><name><name>id</name><operator>.</operator><name>net</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>id</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>netid</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>netid</name> <operator>=</operator> <operator>&amp;</operator><name>id</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

      <comment type="block">/* Add "bootp" as a tag to allow different options, address ranges etc
	 for BOOTP clients */</comment>
      <expr_stmt><expr><name><name>bootp_id</name><operator>.</operator><name>net</name></name> <operator>=</operator> <literal type="string">"bootp"</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>bootp_id</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>netid</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>netid</name> <operator>=</operator> <operator>&amp;</operator><name>bootp_id</name></expr>;</expr_stmt>
      
      <expr_stmt><expr><name>tagif_netid</name> <operator>=</operator> <call><name>run_tag_if</name><argument_list>(<argument><expr><name>netid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <for>for <control>(<init><expr><name>id_list</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_ignore</name></name></expr>;</init> <condition><expr><name>id_list</name></expr>;</condition> <incr><expr><name>id_list</name> <operator>=</operator> <name><name>id_list</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><call><name>match_netid</name><argument_list>(<argument><expr><name><name>id_list</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><name>tagif_netid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"ignored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>message</name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>int</name></type> <name>nailed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	  <if_stmt><if>if <condition>(<expr><call><name>have_config</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>CONFIG_ADDR</name></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>nailed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	      <expr_stmt><expr><name>logaddr</name> <operator>=</operator> <operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>yiaddr</name></name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>lease</name> <operator>=</operator> <call><name>lease_find_by_addr</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
		  <operator>(</operator><name><name>lease</name><operator>-&gt;</operator><name>hwaddr_len</name></name> <operator>!=</operator> <name><name>mess</name><operator>-&gt;</operator><name>hlen</name></name> <operator>||</operator>
		   <name><name>lease</name><operator>-&gt;</operator><name>hwaddr_type</name></name> <operator>!=</operator> <name><name>mess</name><operator>-&gt;</operator><name>htype</name></name> <operator>||</operator>
		   <call><name>memcmp</name><argument_list>(<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>hwaddr</name></name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>chaddr</name></name></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>hwaddr_len</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"address in use"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></if>
	  <else>else
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>lease</name> <operator>=</operator> <call><name>lease_find_by_client</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>chaddr</name></name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>hlen</name></name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>htype</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
		  <operator>!</operator><call><name>address_available</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>tagif_netid</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
		   <if_stmt><if>if <condition>(<expr><name>lease</name></expr>)</condition>
		     <block>{<block_content>
		       <comment type="block">/* lease exists, wrong network. */</comment>
		       <expr_stmt><expr><call><name>lease_prune</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		       <expr_stmt><expr><name>lease</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		     </block_content>}</block></if></if_stmt>
		   <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>address_allocate</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mess</name><operator>-&gt;</operator><name>yiaddr</name></name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>chaddr</name></name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>hlen</name></name></expr></argument>, <argument><expr><name>tagif_netid</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>loopback</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		     <expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"no address available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
	      <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>yiaddr</name></name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	    </block_content>}</block></else></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>message</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>context</name> <operator>=</operator> <call><name>narrow_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>yiaddr</name></name></expr></argument>, <argument><expr><name>netid</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"wrong network"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	  <if type="elseif">else if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>net</name></name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>netid</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>tagif_netid</name> <operator>=</operator> <call><name>run_tag_if</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>netid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>

	  <expr_stmt><expr><call><name>log_tags</name><argument_list>(<argument><expr><name>tagif_netid</name></expr></argument>, <argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>message</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>nailed</name></expr>)</condition>
	    <block>{<block_content>
	      <for>for <control>(<init><expr><name>id_list</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>bootp_dynamic</name></name></expr>;</init> <condition><expr><name>id_list</name></expr>;</condition> <incr><expr><name>id_list</name> <operator>=</operator> <name><name>id_list</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>id_list</name><operator>-&gt;</operator><name>list</name></name><operator>)</operator> <operator>||</operator> <call><name>match_netid</name><argument_list>(<argument><expr><name><name>id_list</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><name>tagif_netid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		  <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>id_list</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"no address configured"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>

	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>message</name> <operator>&amp;&amp;</operator> 
	      <operator>!</operator><name>lease</name> <operator>&amp;&amp;</operator> 
	      <operator>(</operator><operator>!</operator><operator>(</operator><name>lease</name> <operator>=</operator> <call><name>lease4_allocate</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>yiaddr</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"no leases left"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>message</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>logaddr</name> <operator>=</operator> <operator>&amp;</operator><name><name>mess</name><operator>-&gt;</operator><name>yiaddr</name></name></expr>;</expr_stmt>
		
	      <expr_stmt><expr><call><name>lease_set_hwaddr</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>chaddr</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>hlen</name></name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>htype</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><name>hostname</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>lease_set_hostname</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>get_domain</name><argument_list>(<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
	      <comment type="block">/* infinite lease unless nailed in dhcp-host line. */</comment>
	      <expr_stmt><expr><call><name>lease_set_expires</name><argument_list>(<argument><expr><name>lease</name></expr></argument>,  
				<argument><expr><ternary><condition><expr><call><name>have_config</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>CONFIG_TIME</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>config</name><operator>-&gt;</operator><name>lease_time</name></name></expr> </then><else>: <expr><literal type="number">0xffffffff</literal></expr></else></ternary></expr></argument>, 
				<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	      <expr_stmt><expr><call><name>lease_set_interface</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name>int_index</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      
	      <expr_stmt><expr><call><name>clear_packet</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>do_options</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><call><name>get_domain</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>yiaddr</name></name></expr></argument>)</argument_list></call></expr></argument>, 
			 <argument><expr><name>netid</name></expr></argument>, <argument><expr><name>subnet_addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vendor_class_len</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="number">0xffffffff</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
      
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><name>METRIC_BOOTP</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>log_packet</name><argument_list>(<argument><expr><literal type="string">"BOOTP"</literal></expr></argument>, <argument><expr><name>logaddr</name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>chaddr</name></name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>hlen</name></name></expr></argument>, <argument><expr><name>iface_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <return>return <expr><ternary><condition><expr><name>message</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>dhcp_packet_size</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>agent_id</name></expr></argument>, <argument><expr><name>real_end</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></if></if_stmt>
      
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>option_find</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>OPTION_CLIENT_FQDN</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* http://tools.ietf.org/wg/dhc/draft-ietf-dhc-fqdn-option/draft-ietf-dhc-fqdn-option-10.txt */</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>option_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pq</name> <init>= <expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>option_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      
      <expr_stmt><expr><name>fqdn_flags</name> <operator>=</operator> <operator>*</operator><name>op</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>op</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>pp</name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
      
      <comment type="block">/* NB, the following always sets at least one bit */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_FQDN_UPDATE</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name>fqdn_flags</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>fqdn_flags</name> <operator>|=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt> <comment type="block">/* set O */</comment>
	      <expr_stmt><expr><name>fqdn_flags</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">0x01</literal></expr>;</expr_stmt> <comment type="block">/* clear S */</comment>
	    </block_content>}</block></if></if_stmt>
	  <expr_stmt><expr><name>fqdn_flags</name> <operator>|=</operator> <literal type="number">0x08</literal></expr>;</expr_stmt> <comment type="block">/* set N */</comment>
	</block_content>}</block></if>
      <else>else 
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>fqdn_flags</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>fqdn_flags</name> <operator>|=</operator> <literal type="number">0x03</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block">/* set S and O */</comment>
	  <expr_stmt><expr><name>fqdn_flags</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">0x08</literal></expr>;</expr_stmt> <comment type="block">/* clear N */</comment>
	</block_content>}</block></else></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>fqdn_flags</name> <operator>&amp;</operator> <literal type="number">0x04</literal></expr>)</condition><block type="pseudo"><block_content>
	<while>while <condition>(<expr><operator>*</operator><name>op</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>op</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>op</name><operator>)</operator><operator>)</operator> <operator>-</operator> <name>pp</name><operator>)</operator> <operator>&lt;</operator> <name>len</name></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pq</name></expr></argument>, <argument><expr><name>op</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>pq</name> <operator>+=</operator> <operator>*</operator><name>op</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>op</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>op</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
	    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>pq</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
	  </block_content>}</block></while></block_content></block></if>
      <else>else
	<block>{<block_content>
	  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pq</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>op</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>borken_opt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  <expr_stmt><expr><name>pq</name> <operator>+=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>pq</name> <operator>!=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>pq</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <expr_stmt><expr><operator>*</operator><name>pq</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><call><name>legal_hostname</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>offer_hostname</name> <operator>=</operator> <name>client_hostname</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>option_find</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>OPTION_HOSTNAME</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>option_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></argument>, <argument><expr><call><name>option_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* Microsoft clients are broken, and need zero-terminated strings
	 in options. We detect this state here, and do the same in
	 any options we send */</comment>
      <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>borken_opt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>legal_hostname</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>client_hostname</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>client_hostname</name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_match_name</name></name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>size_t</name></type> <name>nl</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>client_hostname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      
      <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOG_OPTS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%u client provides name: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>client_hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <for>for <control>(<init><expr><name>m</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_name_match</name></name></expr>;</init> <condition><expr><name>m</name></expr>;</condition> <incr><expr><name>m</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>size_t</name></type> <name>ml</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>char</name></type> <name>save</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name>nl</name> <operator>&lt;</operator> <name>ml</name></expr>)</condition><block type="pseudo"><block_content>
	    <continue>continue;</continue></block_content></block></if></if_stmt>
	  <if_stmt><if>if <condition>(<expr><name>nl</name> <operator>&gt;</operator> <name>ml</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>save</name> <operator>=</operator> <name><name>client_hostname</name><index>[<expr><name>ml</name></expr>]</index></name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>client_hostname</name><index>[<expr><name>ml</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><call><name>hostname_isequal</name><argument_list>(<argument><expr><name>client_hostname</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	      <operator>(</operator><name>save</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>m</name><operator>-&gt;</operator><name>wildcard</name></name><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>netid</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>netid</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>netid</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>netid</name></name></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name>save</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>client_hostname</name><index>[<expr><name>ml</name></expr>]</index></name> <operator>=</operator> <name>save</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><call><name>have_config</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>CONFIG_NAME</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>hostname</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>hostname</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>domain</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>domain</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>hostname_auth</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <comment type="block">/* be careful not to send an OFFER with a hostname not matching the DISCOVER. */</comment>
      <if_stmt><if>if <condition>(<expr><name>fqdn_flags</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>client_hostname</name> <operator>||</operator> <call><name>hostname_isequal</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>client_hostname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>offer_hostname</name> <operator>=</operator> <name>hostname</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name>client_hostname</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>domain</name> <operator>=</operator> <call><name>strip_hostname</name><argument_list>(<argument><expr><name>client_hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>client_hostname</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>hostname</name> <operator>=</operator> <name>client_hostname</name></expr>;</expr_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>config</name></expr>)</condition>
	    <block>{<block_content>
	      <comment type="block">/* Search again now we have a hostname. 
		 Only accept configs without CLID and HWADDR here, (they won't match)
		 to avoid impersonation by name. */</comment>
	      <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_config</name></name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>find_config</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_conf</name></name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
						    <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>chaddr</name></name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>hlen</name></name></expr></argument>, 
						    <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>htype</name></name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><call><name>run_tag_if</name><argument_list>(<argument><expr><name>netid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	      <if_stmt><if>if <condition>(<expr><name>new</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>have_config</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><name>CONFIG_CLID</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>new</name><operator>-&gt;</operator><name>hwaddr</name></name></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name>config</name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
		  <comment type="block">/* set "known" tag for known hosts */</comment>
		  <expr_stmt><expr><name><name>known_id</name><operator>.</operator><name>net</name></name> <operator>=</operator> <literal type="string">"known"</literal></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>known_id</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>netid</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name>netid</name> <operator>=</operator> <operator>&amp;</operator><name>known_id</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>config</name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid_list</name></name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
      
      <for>for <control>(<init><expr><name>list</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>netid</name></name></expr>;</init> <condition><expr><name>list</name></expr>;</condition> <incr><expr><name>list</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
	  <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>list</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>netid</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>netid</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>list</name></name></expr>;</expr_stmt>
	</block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><name>tagif_netid</name> <operator>=</operator> <call><name>run_tag_if</name><argument_list>(<argument><expr><name>netid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* if all the netids in the ignore list are present, ignore this client */</comment>
  <for>for <control>(<init><expr><name>id_list</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_ignore</name></name></expr>;</init> <condition><expr><name>id_list</name></expr>;</condition> <incr><expr><name>id_list</name> <operator>=</operator> <name><name>id_list</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><call><name>match_netid</name><argument_list>(<argument><expr><name><name>id_list</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><name>tagif_netid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>ignore</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

  <comment type="block">/* If configured, we can override the server-id to be the address of the relay, 
     so that all traffic goes via the relay and can pick up agent-id info. This can be
     configured for all relays, or by address. */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>override</name></name> <operator>&amp;&amp;</operator> <name><name>mess</name><operator>-&gt;</operator><name>giaddr</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>override</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>daemon</name><operator>-&gt;</operator><name>override_relays</name></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>override</name> <operator>=</operator> <name><name>mess</name><operator>-&gt;</operator><name>giaddr</name></name></expr>;</expr_stmt></block_content></block></if>
      <else>else
	<block>{<block_content>
	  <decl_stmt><decl><type><name><name>struct</name> <name>addr_list</name></name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
	  <for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>override_relays</name></name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <name><name>mess</name><operator>-&gt;</operator><name>giaddr</name><operator>.</operator><name>s_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
	      <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	  <if_stmt><if>if <condition>(<expr><name>l</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>override</name> <operator>=</operator> <name><name>mess</name><operator>-&gt;</operator><name>giaddr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

  <comment type="block">/* Can have setting to ignore the client ID for a particular MAC address or hostname */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>have_config</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>CONFIG_NOCLID</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>clid</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
          
  <comment type="block">/* Check if client is PXE client. */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>enable_pxe</name></name> <operator>&amp;&amp;</operator>
      <call><name>is_pxe_client</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pxevendor</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>option_find</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>OPTION_PXE_UUID</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pxe_uuid</name></expr></argument>, <argument><expr><call><name>option_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>uuid</name> <operator>=</operator> <name>pxe_uuid</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

      <comment type="block">/* Check if this is really a PXE bootserver request, and handle specially if so. */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>mess_type</name> <operator>==</operator> <name>DHCPREQUEST</name> <operator>||</operator> <name>mess_type</name> <operator>==</operator> <name>DHCPINFORM</name><operator>)</operator> <operator>&amp;&amp;</operator>
	  <operator>(</operator><name>opt</name> <operator>=</operator> <call><name>option_find</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>OPTION_VENDOR_CLASS_OPT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
	  <operator>(</operator><name>opt</name> <operator>=</operator> <call><name>option_find1</name><argument_list>(<argument><expr><call><name>option_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>option_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><call><name>option_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SUBOPT_PXE_BOOT_ITEM</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name><name>struct</name> <name>pxe_service</name></name> <modifier>*</modifier></type><name>service</name></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name>option_uint</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>int</name></type> <name>layer</name> <init>= <expr><call><name>option_uint</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>save71</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_opt</name></name></type> <name>opt71</name></decl>;</decl_stmt>

	  <if_stmt><if>if <condition>(<expr><name>ignore</name></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	  <if_stmt><if>if <condition>(<expr><name>layer</name> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"PXE BIS not supported"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <return>return <expr><literal type="number">0</literal></expr>;</return>
	    </block_content>}</block></if></if_stmt>

	  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>save71</name></expr></argument>, <argument><expr><call><name>option_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
	  <for>for <control>(<init><expr><name>service</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>pxe_services</name></name></expr>;</init> <condition><expr><name>service</name></expr>;</condition> <incr><expr><name>service</name> <operator>=</operator> <name><name>service</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><name><name>service</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>type</name></expr>)</condition><block type="pseudo"><block_content>
	      <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	  
	  <for>for <control>(<init>;</init> <condition><expr><name>context</name></expr>;</condition> <incr><expr><name>context</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>current</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><call><name>match_netid</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>, <argument><expr><name>tagif_netid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<call><name>is_same_net</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>ciaddr</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>netmask</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	      <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	  
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>service</name> <operator>||</operator> <operator>!</operator><name><name>service</name><operator>-&gt;</operator><name>basename</name></name> <operator>||</operator> <operator>!</operator><name>context</name></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	  	  
	  <expr_stmt><expr><call><name>clear_packet</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
	  <expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>yiaddr</name></name> <operator>=</operator> <name><name>mess</name><operator>-&gt;</operator><name>ciaddr</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>ciaddr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name><name>service</name><operator>-&gt;</operator><name>sname</name></name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>siaddr</name></name> <operator>=</operator> <call><name>a_record_from_hosts</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>sname</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	  <if type="elseif">else if <condition>(<expr><name><name>service</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>siaddr</name></name> <operator>=</operator> <name><name>service</name><operator>-&gt;</operator><name>server</name></name></expr>;</expr_stmt></block_content></block></if> 
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>siaddr</name></name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>local</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt> 
	  
	  <if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>basename</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>mess</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
		<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>service</name><operator>-&gt;</operator><name>basename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>mess</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
		<argument><expr><literal type="string">"%s.%d"</literal></expr></argument>, <argument><expr><name><name>service</name><operator>-&gt;</operator><name>basename</name></name></expr></argument>, <argument><expr><name>layer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	  
	  <expr_stmt><expr><call><name>option_put</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>OPTION_MESSAGE_TYPE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>DHCPACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>option_put</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>OPTION_SERVER_IDENTIFIER</name></expr></argument>, <argument><expr><name>INADDRSZ</name></expr></argument>, <argument><expr><call><name>htonl</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>local</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>pxe_misc</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>uuid</name></expr></argument>, <argument><expr><name>pxevendor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
	  <expr_stmt><expr><call><name>prune_vendor_opts</name><argument_list>(<argument><expr><name>tagif_netid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>opt71</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>save71</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>opt71</name><operator>.</operator><name>opt</name></name> <operator>=</operator> <name>SUBOPT_PXE_BOOT_ITEM</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>opt71</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>opt71</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>DHOPT_VENDOR_MATCH</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>opt71</name><operator>.</operator><name>netid</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>opt71</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_opts</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>do_encap_opts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt71</name></expr></argument>, <argument><expr><name>OPTION_VENDOR_CLASS_OPT</name></expr></argument>, <argument><expr><name>DHOPT_VENDOR_MATCH</name></expr></argument>, <argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
	  <expr_stmt><expr><call><name>log_packet</name><argument_list>(<argument><expr><literal type="string">"PXE"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mess</name><operator>-&gt;</operator><name>yiaddr</name></name></expr></argument>, <argument><expr><name>emac</name></expr></argument>, <argument><expr><name>emac_len</name></expr></argument>, <argument><expr><name>iface_name</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>mess</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>log_tags</name><argument_list>(<argument><expr><name>tagif_netid</name></expr></argument>, <argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <return>return <expr><call><name>dhcp_packet_size</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>agent_id</name></expr></argument>, <argument><expr><name>real_end</name></expr></argument>)</argument_list></call></expr>;</return>	  
	</block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>option_find</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>OPTION_ARCH</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>pxearch</name> <operator>=</operator> <call><name>option_uint</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <comment type="block">/* proxy DHCP here. */</comment>
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>mess_type</name> <operator>==</operator> <name>DHCPDISCOVER</name> <operator>||</operator> <operator>(</operator><name>pxe</name> <operator>&amp;&amp;</operator> <name>mess_type</name> <operator>==</operator> <name>DHCPREQUEST</name><operator>)</operator><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name>int</name></type> <name>workaround</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	      
	      <for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name>context</name></expr>;</init> <condition><expr><name>tmp</name></expr>;</condition> <incr><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>current</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>tmp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_PROXY</name><operator>)</operator> <operator>&amp;&amp;</operator>
		    <call><name>match_netid</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>, <argument><expr><name>tagif_netid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		  <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	      
	      <if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition>
		<block>{<block_content>
		  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_boot</name></name> <modifier>*</modifier></type><name>boot</name></decl>;</decl_stmt>
		  <decl_stmt><decl><type><name>int</name></type> <name>redirect4011</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		  <if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>net</name></name></expr>)</condition>
		    <block>{<block_content>
		      <expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>netid</name></expr>;</expr_stmt>
		      <expr_stmt><expr><name>tagif_netid</name> <operator>=</operator> <call><name>run_tag_if</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp</name><operator>-&gt;</operator><name>netid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    </block_content>}</block></if></if_stmt>
		  
		  <expr_stmt><expr><name>boot</name> <operator>=</operator> <call><name>find_boot</name><argument_list>(<argument><expr><name>tagif_netid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  
		  <expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>yiaddr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		  <if_stmt><if>if  <condition>(<expr><name>mess_type</name> <operator>==</operator> <name>DHCPDISCOVER</name> <operator>||</operator> <name><name>mess</name><operator>-&gt;</operator><name>ciaddr</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		    <block>{<block_content>
		      <expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>ciaddr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		      <expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">0x8000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* broadcast */</comment>
		    </block_content>}</block></if></if_stmt>
		  
		  <expr_stmt><expr><call><name>clear_packet</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  
		  <comment type="block">/* Redirect EFI clients to port 4011 */</comment>
		  <if_stmt><if>if <condition>(<expr><name>pxearch</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition>
		    <block>{<block_content>
		      <expr_stmt><expr><name>redirect4011</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		      <expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>siaddr</name></name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>local</name></name></expr>;</expr_stmt>
		    </block_content>}</block></if></if_stmt>
		  
		  <comment type="block">/* Returns true if only one matching service is available. On port 4011, 
		     it also inserts the boot file and server name. */</comment>
		  <expr_stmt><expr><name>workaround</name> <operator>=</operator> <call><name>pxe_uefi_workaround</name><argument_list>(<argument><expr><name>pxearch</name></expr></argument>, <argument><expr><name>tagif_netid</name></expr></argument>, <argument><expr><name>mess</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>local</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>pxe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>workaround</name> <operator>&amp;&amp;</operator> <name>boot</name></expr>)</condition>
		    <block>{<block_content>
		      <comment type="block">/* Provide the bootfile here, for iPXE, and in case we have no menu items
			 and set discovery_control = 8 */</comment>
		      <if_stmt><if>if <condition>(<expr><name><name>boot</name><operator>-&gt;</operator><name>next_server</name><operator>.</operator><name>s_addr</name></name></expr>)</condition><block type="pseudo"><block_content> 
			<expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>siaddr</name></name> <operator>=</operator> <name><name>boot</name><operator>-&gt;</operator><name>next_server</name></name></expr>;</expr_stmt></block_content></block></if>
		      <if type="elseif">else if <condition>(<expr><name><name>boot</name><operator>-&gt;</operator><name>tftp_sname</name></name></expr>)</condition><block type="pseudo"><block_content> 
			<expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>siaddr</name></name> <operator>=</operator> <call><name>a_record_from_hosts</name><argument_list>(<argument><expr><name><name>boot</name><operator>-&gt;</operator><name>tftp_sname</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		      
		      <if_stmt><if>if <condition>(<expr><name><name>boot</name><operator>-&gt;</operator><name>file</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>safe_strncpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>mess</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name><name>boot</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		    </block_content>}</block></if></if_stmt>
		  
		  <expr_stmt><expr><call><name>option_put</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>OPTION_MESSAGE_TYPE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, 
			     <argument><expr><ternary><condition><expr><name>mess_type</name> <operator>==</operator> <name>DHCPDISCOVER</name></expr> ?</condition><then> <expr><name>DHCPOFFER</name></expr> </then><else>: <expr><name>DHCPACK</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>option_put</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>OPTION_SERVER_IDENTIFIER</name></expr></argument>, <argument><expr><name>INADDRSZ</name></expr></argument>, <argument><expr><call><name>htonl</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>local</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>pxe_misc</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>uuid</name></expr></argument>, <argument><expr><name>pxevendor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>prune_vendor_opts</name><argument_list>(<argument><expr><name>tagif_netid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pxe</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>workaround</name><operator>)</operator> <operator>||</operator> <operator>!</operator><name>redirect4011</name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><call><name>do_encap_opts</name><argument_list>(<argument><expr><call><name>pxe_opts</name><argument_list>(<argument><expr><name>pxearch</name></expr></argument>, <argument><expr><name>tagif_netid</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>local</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OPTION_VENDOR_CLASS_OPT</name></expr></argument>, <argument><expr><name>DHOPT_VENDOR_MATCH</name></expr></argument>, <argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    
		  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><name>METRIC_PXE</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>log_packet</name><argument_list>(<argument><expr><literal type="string">"PXE"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>emac</name></expr></argument>, <argument><expr><name>emac_len</name></expr></argument>, <argument><expr><name>iface_name</name></expr></argument>, <argument><expr><ternary><condition><expr><name>ignore</name></expr> ?</condition><then> <expr><literal type="string">"proxy-ignored"</literal></expr> </then><else>: <expr><literal type="string">"proxy"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>log_tags</name><argument_list>(<argument><expr><name>tagif_netid</name></expr></argument>, <argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ignore</name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><call><name>apply_delay</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>, <argument><expr><name>recvtime</name></expr></argument>, <argument><expr><name>tagif_netid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  <return>return <expr><ternary><condition><expr><name>ignore</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>dhcp_packet_size</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>agent_id</name></expr></argument>, <argument><expr><name>real_end</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>	  
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

  <comment type="block">/* if we're just a proxy server, go no further */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_PROXY</name><operator>)</operator> <operator>||</operator> <name>pxe</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>option_find</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>OPTION_REQUESTED_OPTIONS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>req_options</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>req_options</name></expr></argument>, <argument><expr><call><name>option_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>option_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>req_options</name><index>[<expr><call><name>option_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>OPTION_END</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  
  <switch>switch <condition>(<expr><name>mess_type</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>DHCPDECLINE</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>option_find</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>OPTION_SERVER_IDENTIFIER</name></expr></argument>, <argument><expr><name>INADDRSZ</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
	  <call><name>option_addr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call><operator>.</operator><name>s_addr</name> <operator>!=</operator> <call><name>server_id</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>override</name></expr></argument>, <argument><expr><name>fallback</name></expr></argument>)</argument_list></call><operator>.</operator><name>s_addr</name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
      
      <comment type="block">/* sanitise any message. Paranoid? Moi? */</comment>
      <expr_stmt><expr><call><name>sanitise</name><argument_list>(<argument><expr><call><name>option_find</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>OPTION_MESSAGE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>option_find</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>OPTION_REQUESTED_IP</name></expr></argument>, <argument><expr><name>INADDRSZ</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
      
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><name>METRIC_DHCPDECLINE</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>log_packet</name><argument_list>(<argument><expr><literal type="string">"DHCPDECLINE"</literal></expr></argument>, <argument><expr><call><name>option_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>emac</name></expr></argument>, <argument><expr><name>emac_len</name></expr></argument>, <argument><expr><name>iface_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>lease</name> <operator>&amp;&amp;</operator> <name><name>lease</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <call><name>option_addr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call><operator>.</operator><name>s_addr</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>lease_prune</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><call><name>have_config</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>CONFIG_ADDR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> 
	  <name><name>config</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <call><name>option_addr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call><operator>.</operator><name>s_addr</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>prettyprint_time</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></argument>, <argument><expr><name>DECLINE_BACKOFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"disabling DHCP static address %s for %s"</literal></expr></argument>)</argument_list></call></expr></argument>, 
		    <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CONFIG_DECLINED</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>decline_time</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
	</block_content>}</block></if>
      <else>else<block type="pseudo"><block_content>
	<comment type="block">/* make sure this host gets a different address next time. */</comment>
	<for>for <control>(<init>;</init> <condition><expr><name>context</name></expr>;</condition> <incr><expr><name>context</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>current</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	  <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>addr_epoch</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>
      
      <return>return <expr><literal type="number">0</literal></expr>;</return>

    <case>case <expr><name>DHCPRELEASE</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>context</name> <operator>=</operator> <call><name>narrow_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>ciaddr</name></name></expr></argument>, <argument><expr><name>tagif_netid</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
	  <operator>!</operator><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>option_find</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>OPTION_SERVER_IDENTIFIER</name></expr></argument>, <argument><expr><name>INADDRSZ</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
	  <call><name>option_addr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call><operator>.</operator><name>s_addr</name> <operator>!=</operator> <call><name>server_id</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>override</name></expr></argument>, <argument><expr><name>fallback</name></expr></argument>)</argument_list></call><operator>.</operator><name>s_addr</name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>lease</name> <operator>&amp;&amp;</operator> <name><name>lease</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <name><name>mess</name><operator>-&gt;</operator><name>ciaddr</name><operator>.</operator><name>s_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>lease_prune</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"unknown lease"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><name>METRIC_DHCPRELEASE</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>log_packet</name><argument_list>(<argument><expr><literal type="string">"DHCPRELEASE"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mess</name><operator>-&gt;</operator><name>ciaddr</name></name></expr></argument>, <argument><expr><name>emac</name></expr></argument>, <argument><expr><name>emac_len</name></expr></argument>, <argument><expr><name>iface_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
      <return>return <expr><literal type="number">0</literal></expr>;</return>
      
    <case>case <expr><name>DHCPDISCOVER</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>ignore</name> <operator>||</operator> <call><name>have_config</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>CONFIG_DISABLE</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_QUIET_DHCP</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	  <expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"ignored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>opt</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if>
      <else>else 
	<block>{<block_content>
	  <decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl>, <decl><type ref="prev"/><name>conf</name></decl>;</decl_stmt>
	  
	  <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name><name>conf</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>option_find</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>OPTION_REQUESTED_IP</name></expr></argument>, <argument><expr><name>INADDRSZ</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>	 
	    <expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>option_addr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><call><name>have_config</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>CONFIG_ADDR</name></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ltmp</name> <operator>=</operator> <call><name>lease_find_by_addr</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> 
		  <name>ltmp</name> <operator>!=</operator> <name>lease</name> <operator>&amp;&amp;</operator>
		  <operator>!</operator><call><name>config_has_mac</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name><name>ltmp</name><operator>-&gt;</operator><name>hwaddr</name></name></expr></argument>, <argument><expr><name><name>ltmp</name><operator>-&gt;</operator><name>hwaddr_len</name></name></expr></argument>, <argument><expr><name><name>ltmp</name><operator>-&gt;</operator><name>hwaddr_type</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
		  <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
		  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>mac</name> <init>= <expr><call><name>extended_hwaddr</name><argument_list>(<argument><expr><name><name>ltmp</name><operator>-&gt;</operator><name>hwaddr_type</name></name></expr></argument>, <argument><expr><name><name>ltmp</name><operator>-&gt;</operator><name>hwaddr_len</name></name></expr></argument>,
						       <argument><expr><name><name>ltmp</name><operator>-&gt;</operator><name>hwaddr</name></name></expr></argument>, <argument><expr><name><name>ltmp</name><operator>-&gt;</operator><name>clid_len</name></name></expr></argument>, <argument><expr><name><name>ltmp</name><operator>-&gt;</operator><name>clid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"not using configured address %s because it is leased to %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
			    <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><call><name>print_mac</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>mac</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
	      <else>else
		<block>{<block_content>
		  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
		  <for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name>context</name></expr>;</init> <condition><expr><name>tmp</name></expr>;</condition> <incr><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>current</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		    <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>router</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <name><name>config</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>s_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
		      <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
		  <if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"not using configured address %s because it is in use by the server or relay"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		  <if type="elseif">else if <condition>(<expr><call><name>have_config</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>CONFIG_DECLINED</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			   <call><name>difftime</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>decline_time</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <operator>(</operator><name>float</name><operator>)</operator><name>DECLINE_BACKOFF</name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"not using configured address %s because it was previously declined"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		  <else>else<block type="pseudo"><block_content>
		    <expr_stmt><expr><name>conf</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></else></if_stmt>
	    </block_content>}</block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>s_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>yiaddr</name></name> <operator>=</operator> <name>conf</name></expr>;</expr_stmt></block_content></block></if>
	  <if type="elseif">else if <condition>(<expr><name>lease</name> <operator>&amp;&amp;</operator> 
		   <call><name>address_available</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>tagif_netid</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> 
		   <operator>!</operator><call><name>config_find_by_address</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_conf</name></name></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>yiaddr</name></name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt></block_content></block></if>
	  <if type="elseif">else if <condition>(<expr><name>opt</name> <operator>&amp;&amp;</operator> <call><name>address_available</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>tagif_netid</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>lease_find_by_addr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> 
		   <operator>!</operator><call><name>config_find_by_address</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_conf</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>do_icmp_ping</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>loopback</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>yiaddr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt></block_content></block></if>
	  <if type="elseif">else if <condition>(<expr><name>emac_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"no unique-id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	  <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>address_allocate</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mess</name><operator>-&gt;</operator><name>yiaddr</name></name></expr></argument>, <argument><expr><name>emac</name></expr></argument>, <argument><expr><name>emac_len</name></expr></argument>, <argument><expr><name>tagif_netid</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>loopback</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"no address available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>      
	</block_content>}</block></else></if_stmt>
      
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><name>METRIC_DHCPDISCOVER</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>log_packet</name><argument_list>(<argument><expr><literal type="string">"DHCPDISCOVER"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>opt</name></expr> ?</condition><then> <expr><call><name>option_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>emac</name></expr></argument>, <argument><expr><name>emac_len</name></expr></argument>, <argument><expr><name>iface_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

      <if_stmt><if>if <condition>(<expr><name>message</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>context</name> <operator>=</operator> <call><name>narrow_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>yiaddr</name></name></expr></argument>, <argument><expr><name>tagif_netid</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>net</name></name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>netid</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>tagif_netid</name> <operator>=</operator> <call><name>run_tag_if</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>netid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>apply_delay</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>, <argument><expr><name>recvtime</name></expr></argument>, <argument><expr><name>tagif_netid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_RAPID_COMMIT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>option_find</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>OPTION_RAPID_COMMIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>rapid_commit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	  <comment type="block">/* If a lease exists for this host and another address, squash it. */</comment>
	  <if_stmt><if>if <condition>(<expr><name>lease</name> <operator>&amp;&amp;</operator> <name><name>lease</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <name><name>mess</name><operator>-&gt;</operator><name>yiaddr</name><operator>.</operator><name>s_addr</name></name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>lease_prune</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name>lease</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	  <goto>goto <name>rapid_commit</name>;</goto>
	</block_content>}</block></if></if_stmt>
      
      <expr_stmt><expr><call><name>log_tags</name><argument_list>(<argument><expr><name>tagif_netid</name></expr></argument>, <argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><name>METRIC_DHCPOFFER</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>log_packet</name><argument_list>(<argument><expr><literal type="string">"DHCPOFFER"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name><name>mess</name><operator>-&gt;</operator><name>yiaddr</name></name></expr></argument>, <argument><expr><name>emac</name></expr></argument>, <argument><expr><name>emac_len</name></expr></argument>, <argument><expr><name>iface_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <expr_stmt><expr><name>time</name> <operator>=</operator> <call><name>calc_time</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>config</name></expr></argument>, <argument><expr><call><name>option_find</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>OPTION_LEASE_TIME</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>clear_packet</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>option_put</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>OPTION_MESSAGE_TYPE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>DHCPOFFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>option_put</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>OPTION_SERVER_IDENTIFIER</name></expr></argument>, <argument><expr><name>INADDRSZ</name></expr></argument>, <argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><call><name>server_id</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>override</name></expr></argument>, <argument><expr><name>fallback</name></expr></argument>)</argument_list></call><operator>.</operator><name>s_addr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>option_put</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>OPTION_LEASE_TIME</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* T1 and T2 are required in DHCPOFFER by HP's wacky Jetdirect client. */</comment>
      <expr_stmt><expr><call><name>do_options</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>req_options</name></expr></argument>, <argument><expr><name>offer_hostname</name></expr></argument>, <argument><expr><call><name>get_domain</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>yiaddr</name></name></expr></argument>)</argument_list></call></expr></argument>, 
		 <argument><expr><name>netid</name></expr></argument>, <argument><expr><name>subnet_addr</name></expr></argument>, <argument><expr><name>fqdn_flags</name></expr></argument>, <argument><expr><name>borken_opt</name></expr></argument>, <argument><expr><name>pxearch</name></expr></argument>, <argument><expr><name>uuid</name></expr></argument>, <argument><expr><name>vendor_class_len</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><name>fuzz</name></expr></argument>, <argument><expr><name>pxevendor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <return>return <expr><call><name>dhcp_packet_size</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>agent_id</name></expr></argument>, <argument><expr><name>real_end</name></expr></argument>)</argument_list></call></expr>;</return>
	

    <case>case <expr><name>DHCPREQUEST</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>ignore</name> <operator>||</operator> <call><name>have_config</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>CONFIG_DISABLE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>option_find</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>OPTION_REQUESTED_IP</name></expr></argument>, <argument><expr><name>INADDRSZ</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <comment type="block">/* SELECTING  or INIT_REBOOT */</comment>
	  <expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>yiaddr</name></name> <operator>=</operator> <call><name>option_addr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
	  <comment type="block">/* send vendor and user class info for new or recreated lease */</comment>
	  <expr_stmt><expr><name>do_classes</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>option_find</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>OPTION_SERVER_IDENTIFIER</name></expr></argument>, <argument><expr><name>INADDRSZ</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <comment type="block">/* SELECTING */</comment>
	      <expr_stmt><expr><name>selecting</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><name><name>override</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
		  <if_stmt><if>if <condition>(<expr><call><name>option_addr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call><operator>.</operator><name>s_addr</name> <operator>!=</operator> <name><name>override</name><operator>.</operator><name>s_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
		    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if>
	      <else>else 
		<block>{<block_content>
		  <for>for <control>(<init>;</init> <condition><expr><name>context</name></expr>;</condition> <incr><expr><name>context</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>current</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		    <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>local</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <call><name>option_addr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call><operator>.</operator><name>s_addr</name></expr>)</condition><block type="pseudo"><block_content>
		      <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
		  
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>context</name></expr>)</condition>
		    <block>{<block_content>
		      <comment type="block">/* Handle very strange configs where clients have more than one route to the server.
			 If a clients idea of its server-id matches any of our DHCP interfaces, we let it pass.
			 Have to set override to make sure we echo back the correct server-id */</comment>
		      <decl_stmt><decl><type><name><name>struct</name> <name>irec</name></name> <modifier>*</modifier></type><name>intr</name></decl>;</decl_stmt>
		      
		      <expr_stmt><expr><call><name>enumerate_interfaces</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		      <for>for <control>(<init><expr><name>intr</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>interfaces</name></name></expr>;</init> <condition><expr><name>intr</name></expr>;</condition> <incr><expr><name>intr</name> <operator>=</operator> <name><name>intr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
			<if_stmt><if>if <condition>(<expr><name><name>intr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name> <operator>&amp;&amp;</operator>
			    <name><name>intr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <call><name>option_addr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call><operator>.</operator><name>s_addr</name> <operator>&amp;&amp;</operator>
			    <name><name>intr</name><operator>-&gt;</operator><name>tftp_ok</name></name></expr>)</condition><block type="pseudo"><block_content>
			  <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

		      <if_stmt><if>if <condition>(<expr><name>intr</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>override</name> <operator>=</operator> <name><name>intr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name></name></expr>;</expr_stmt></block_content></block></if>
		      <else>else
			<block>{<block_content>
			  <comment type="block">/* In auth mode, a REQUEST sent to the wrong server
			     should be faulted, so that the client establishes 
			     communication with us, otherwise, silently ignore. */</comment>
			  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_AUTHORITATIVE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
			  <expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"wrong server-ID"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		    </block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

	      <comment type="block">/* If a lease exists for this host and another address, squash it. */</comment>
	      <if_stmt><if>if <condition>(<expr><name>lease</name> <operator>&amp;&amp;</operator> <name><name>lease</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <name><name>mess</name><operator>-&gt;</operator><name>yiaddr</name><operator>.</operator><name>s_addr</name></name></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>lease_prune</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name>lease</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></if>
	  <else>else
	    <block>{<block_content>
	      <comment type="block">/* INIT-REBOOT */</comment>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>lease</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_AUTHORITATIVE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><name>lease</name> <operator>&amp;&amp;</operator> <name><name>lease</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <name><name>mess</name><operator>-&gt;</operator><name>yiaddr</name><operator>.</operator><name>s_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"wrong address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <comment type="block">/* RENEWING or REBINDING */</comment> 
	  <comment type="block">/* Check existing lease for this address.
	     We allow it to be missing if dhcp-authoritative mode
	     as long as we can allocate the lease now - checked below.
	     This makes for a smooth recovery from a lost lease DB */</comment>
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>lease</name> <operator>&amp;&amp;</operator> <name><name>mess</name><operator>-&gt;</operator><name>ciaddr</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <name><name>lease</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>s_addr</name></name><operator>)</operator> <operator>||</operator>
	      <operator>(</operator><operator>!</operator><name>lease</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_AUTHORITATIVE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <comment type="block">/* A client rebinding will broadcast the request, so we may see it even 
		 if the lease is held by another server. Just ignore it in that case. 
		 If the request is unicast to us, then somethings wrong, NAK */</comment>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>unicast_dest</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	      <expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"lease not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <comment type="block">/* ensure we broadcast NAK */</comment>
	      <expr_stmt><expr><name>unicast_dest</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>

	  <comment type="block">/* desynchronise renewals */</comment>
	  <expr_stmt><expr><name>fuzz</name> <operator>=</operator> <call><name>rand16</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>yiaddr</name></name> <operator>=</operator> <name><name>mess</name><operator>-&gt;</operator><name>ciaddr</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><name>METRIC_DHCPREQUEST</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>log_packet</name><argument_list>(<argument><expr><literal type="string">"DHCPREQUEST"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mess</name><operator>-&gt;</operator><name>yiaddr</name></name></expr></argument>, <argument><expr><name>emac</name></expr></argument>, <argument><expr><name>emac_len</name></expr></argument>, <argument><expr><name>iface_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
    <label><name>rapid_commit</name>:</label>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>message</name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_config</name></name> <modifier>*</modifier></type><name>addr_config</name></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><call><name>have_config</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>CONFIG_ADDR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name>context</name></expr>;</init> <condition><expr><name>tmp</name></expr>;</condition> <incr><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>current</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	      <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>router</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <name><name>config</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>s_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
		<break>break;</break></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>context</name> <operator>=</operator> <call><name>narrow_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>yiaddr</name></name></expr></argument>, <argument><expr><name>tagif_netid</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <comment type="block">/* If a machine moves networks whilst it has a lease, we catch that here. */</comment>
	      <expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"wrong network"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <comment type="block">/* ensure we broadcast NAK */</comment>
	      <expr_stmt><expr><name>unicast_dest</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	    </block_content>}</block></if>
	  
	  <comment type="block">/* Check for renewal of a lease which is outside the allowed range. */</comment>
	  <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>address_available</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>yiaddr</name></name></expr></argument>, <argument><expr><name>tagif_netid</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		   <operator>(</operator><operator>!</operator><call><name>have_config</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>CONFIG_ADDR</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>config</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <name><name>mess</name><operator>-&gt;</operator><name>yiaddr</name><operator>.</operator><name>s_addr</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"address not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	  
	  <comment type="block">/* Check if a new static address has been configured. Be very sure that
	     when the client does DISCOVER, it will get the static address, otherwise
	     an endless protocol loop will ensue. */</comment>
	  <if type="elseif">else if <condition>(<expr><operator>!</operator><name>tmp</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>selecting</name> <operator>&amp;&amp;</operator>
		   <call><name>have_config</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>CONFIG_ADDR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> 
		   <operator>(</operator><operator>!</operator><call><name>have_config</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>CONFIG_DECLINED</name></expr></argument>)</argument_list></call> <operator>||</operator>
		    <call><name>difftime</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>decline_time</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <operator>(</operator><name>float</name><operator>)</operator><name>DECLINE_BACKOFF</name><operator>)</operator> <operator>&amp;&amp;</operator>
		   <name><name>config</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <name><name>mess</name><operator>-&gt;</operator><name>yiaddr</name><operator>.</operator><name>s_addr</name></name> <operator>&amp;&amp;</operator>
		   <operator>(</operator><operator>!</operator><operator>(</operator><name>ltmp</name> <operator>=</operator> <call><name>lease_find_by_addr</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <name>ltmp</name> <operator>==</operator> <name>lease</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"static lease available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	  <comment type="block">/* Check to see if the address is reserved as a static address for another host */</comment>
	  <if type="elseif">else if <condition>(<expr><operator>(</operator><name>addr_config</name> <operator>=</operator> <call><name>config_find_by_address</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_conf</name></name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>yiaddr</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name>addr_config</name> <operator>!=</operator> <name>config</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"address reserved"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	  <if type="elseif">else if <condition>(<expr><operator>!</operator><name>lease</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>ltmp</name> <operator>=</operator> <call><name>lease_find_by_addr</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>yiaddr</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <comment type="block">/* If a host is configured with more than one MAC address, it's OK to 'nix 
		 a lease from one of it's MACs to give the address to another. */</comment>
	      <if_stmt><if>if <condition>(<expr><name>config</name> <operator>&amp;&amp;</operator> <call><name>config_has_mac</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name><name>ltmp</name><operator>-&gt;</operator><name>hwaddr</name></name></expr></argument>, <argument><expr><name><name>ltmp</name><operator>-&gt;</operator><name>hwaddr_len</name></name></expr></argument>, <argument><expr><name><name>ltmp</name><operator>-&gt;</operator><name>hwaddr_type</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ltmp</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"abandoning lease to %s of %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
			    <argument><expr><call><name>print_mac</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name><name>ltmp</name><operator>-&gt;</operator><name>hwaddr</name></name></expr></argument>, <argument><expr><name><name>ltmp</name><operator>-&gt;</operator><name>hwaddr_len</name></name></expr></argument>)</argument_list></call></expr></argument>, 
			    <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name>lease</name> <operator>=</operator> <name>ltmp</name></expr>;</expr_stmt>
		</block_content>}</block></if>
	      <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"address in use"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	    </block_content>}</block></if></if_stmt>

	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>message</name></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><name>emac_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"no unique-id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	      
	      <if type="elseif">else if <condition>(<expr><operator>!</operator><name>lease</name></expr>)</condition>
		<block>{<block_content>	     
		  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>lease</name> <operator>=</operator> <call><name>lease4_allocate</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>yiaddr</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name>do_classes</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
		  <else>else<block type="pseudo"><block_content>
		    <expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"no leases left"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>message</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><ternary><condition><expr><name>rapid_commit</name></expr> ?</condition><then> <expr><name>METRIC_NOANSWER</name></expr> </then><else>: <expr><name>METRIC_DHCPNAK</name></expr></else></ternary></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>log_packet</name><argument_list>(<argument><expr><ternary><condition><expr><name>rapid_commit</name></expr> ?</condition><then> <expr><literal type="string">"NOANSWER"</literal></expr> </then><else>: <expr><literal type="string">"DHCPNAK"</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mess</name><operator>-&gt;</operator><name>yiaddr</name></name></expr></argument>, <argument><expr><name>emac</name></expr></argument>, <argument><expr><name>emac_len</name></expr></argument>, <argument><expr><name>iface_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <comment type="block">/* rapid commit case: lease allocate failed but don't send DHCPNAK */</comment>
	  <if_stmt><if>if <condition>(<expr><name>rapid_commit</name></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	  
	  <expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>yiaddr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>clear_packet</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>option_put</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>OPTION_MESSAGE_TYPE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>DHCPNAK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>option_put</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>OPTION_SERVER_IDENTIFIER</name></expr></argument>, <argument><expr><name>INADDRSZ</name></expr></argument>, <argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><call><name>server_id</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>override</name></expr></argument>, <argument><expr><name>fallback</name></expr></argument>)</argument_list></call><operator>.</operator><name>s_addr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>option_put_string</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>OPTION_MESSAGE</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>borken_opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <comment type="block">/* This fixes a problem with the DHCP spec, broadcasting a NAK to a host on 
	     a distant subnet which unicast a REQ to us won't work. */</comment>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>unicast_dest</name> <operator>||</operator> <name><name>mess</name><operator>-&gt;</operator><name>giaddr</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> 
	      <name><name>mess</name><operator>-&gt;</operator><name>ciaddr</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>is_same_net</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>local</name></name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>ciaddr</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>netmask</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">0x8000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* broadcast */</comment>
	      <expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>ciaddr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>net</name></name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>netid</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>tagif_netid</name> <operator>=</operator> <call><name>run_tag_if</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>netid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>

	  <expr_stmt><expr><call><name>log_tags</name><argument_list>(<argument><expr><name>tagif_netid</name></expr></argument>, <argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name>do_classes</name></expr>)</condition>
	    <block>{<block_content>
	      <comment type="block">/* pick up INIT-REBOOT events. */</comment>
	      <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>LEASE_CHANGED</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SCRIPT</name></cpp:ifdef>
	      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>lease_change_command</name></name></expr>)</condition>
		<block>{<block_content>
		  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>
		  
		  <if_stmt><if>if <condition>(<expr><name><name>mess</name><operator>-&gt;</operator><name>giaddr</name><operator>.</operator><name>s_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>giaddr</name></name> <operator>=</operator> <name><name>mess</name><operator>-&gt;</operator><name>giaddr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  
		  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>extradata_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		  
		  <expr_stmt><expr><call><name>add_extradata_opt</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><call><name>option_find</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>OPTION_VENDOR_ID</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>add_extradata_opt</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><call><name>option_find</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>OPTION_HOSTNAME</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>add_extradata_opt</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name>oui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>add_extradata_opt</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name>serial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>add_extradata_opt</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name>class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>option_find</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>OPTION_AGENT_ID</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		    <block>{<block_content>
		      <expr_stmt><expr><call><name>add_extradata_opt</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><call><name>option_find1</name><argument_list>(<argument><expr><call><name>option_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>option_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><call><name>option_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SUBOPT_CIRCUIT_ID</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><call><name>add_extradata_opt</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><call><name>option_find1</name><argument_list>(<argument><expr><call><name>option_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>option_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><call><name>option_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SUBOPT_SUBSCR_ID</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><call><name>add_extradata_opt</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><call><name>option_find1</name><argument_list>(<argument><expr><call><name>option_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>option_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><call><name>option_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SUBOPT_REMOTE_ID</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    </block_content>}</block></if>
		  <else>else
		    <block>{<block_content>
		      <expr_stmt><expr><call><name>add_extradata_opt</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><call><name>add_extradata_opt</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><call><name>add_extradata_opt</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    </block_content>}</block></else></if_stmt>

		  <comment type="block">/* DNSMASQ_REQUESTED_OPTIONS */</comment>
		  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>option_find</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>OPTION_REQUESTED_OPTIONS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		    <block>{<block_content>
		      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name>option_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		      <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>rop</name> <init>= <expr><call><name>option_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		      
		      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>lease_add_extradata</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>,
					    <argument><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name><name>rop</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <name>len</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="char">','</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		    </block_content>}</block></if>
		  <else>else<block type="pseudo"><block_content>
		    <expr_stmt><expr><call><name>lease_add_extradata</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		  
		  <expr_stmt><expr><call><name>add_extradata_opt</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><call><name>option_find</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>OPTION_MUD_URL_V4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  
		  <comment type="block">/* space-concat tag set */</comment>
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tagif_netid</name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><call><name>add_extradata_opt</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		  <else>else<block type="pseudo"><block_content>
		    <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>tagif_netid</name></expr>;</init> <condition><expr><name>n</name></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
		      <block>{<block_content>
			<decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>n1</name></decl>;</decl_stmt>
			<comment type="block">/* kill dupes */</comment>
			<for>for <control>(<init><expr><name>n1</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr>;</init> <condition><expr><name>n1</name></expr>;</condition> <incr><expr><name>n1</name> <operator>=</operator> <name><name>n1</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
			  <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>net</name></name></expr></argument>, <argument><expr><name><name>n1</name><operator>-&gt;</operator><name>net</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			    <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n1</name></expr>)</condition><block type="pseudo"><block_content>
			  <expr_stmt><expr><call><name>lease_add_extradata</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>n</name><operator>-&gt;</operator><name>net</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>net</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr> ?</condition><then> <expr><literal type="char">' '</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
		      </block_content>}</block></for></block_content></block></else></if_stmt>
		  
		  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>option_find</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>OPTION_USER_CLASS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		    <block>{<block_content>
		      <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>option_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		      <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ucp</name> <init>= <expr><call><name>option_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		      <comment type="block">/* If the user-class option started as counted strings, the first byte will be zero. */</comment>
		      <if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ucp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>ucp</name><operator>++</operator></expr><operator>,</operator> <expr><name>len</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		      <expr_stmt><expr><call><name>lease_add_extradata</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name>ucp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    </block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    </block_content>}</block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hostname_auth</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>client_hostname</name> <operator>=</operator> <call><name>host_from_dns</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>yiaddr</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>domain</name> <operator>=</operator> <call><name>get_domain</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>yiaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name>hostname</name> <operator>=</operator> <name>client_hostname</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>hostname_auth</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	  
	  <expr_stmt><expr><name>time</name> <operator>=</operator> <call><name>calc_time</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>config</name></expr></argument>, <argument><expr><call><name>option_find</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>OPTION_LEASE_TIME</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>lease_set_hwaddr</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>chaddr</name></name></expr></argument>, <argument><expr><name>clid</name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>hlen</name></name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>htype</name></name></expr></argument>, <argument><expr><name>clid_len</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>do_classes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
	  <comment type="block">/* if all the netids in the ignore_name list are present, ignore client-supplied name */</comment>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hostname_auth</name></expr>)</condition>
	    <block>{<block_content>
	      <for>for <control>(<init><expr><name>id_list</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_ignore_names</name></name></expr>;</init> <condition><expr><name>id_list</name></expr>;</condition> <incr><expr><name>id_list</name> <operator>=</operator> <name><name>id_list</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>id_list</name><operator>-&gt;</operator><name>list</name></name><operator>)</operator> <operator>||</operator> <call><name>match_netid</name><argument_list>(<argument><expr><name><name>id_list</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><name>tagif_netid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		  <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	      <if_stmt><if>if <condition>(<expr><name>id_list</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>hostname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
	  
	  <comment type="block">/* Last ditch, if configured, generate hostname from mac address */</comment>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hostname</name> <operator>&amp;&amp;</operator> <name>emac_len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	    <block>{<block_content>
	      <for>for <control>(<init><expr><name>id_list</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_gen_names</name></name></expr>;</init> <condition><expr><name>id_list</name></expr>;</condition> <incr><expr><name>id_list</name> <operator>=</operator> <name><name>id_list</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>id_list</name><operator>-&gt;</operator><name>list</name></name><operator>)</operator> <operator>||</operator> <call><name>match_netid</name><argument_list>(<argument><expr><name><name>id_list</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><name>tagif_netid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		  <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	      <if_stmt><if>if <condition>(<expr><name>id_list</name></expr>)</condition>
		<block>{<block_content>
		  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

		  <expr_stmt><expr><name>hostname</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr>;</expr_stmt>
		  <comment type="block">/* buffer is 256 bytes, 3 bytes per octet */</comment>
		  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name>emac_len</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>&lt;</operator> <literal type="number">80</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		    <expr_stmt><expr><name>hostname</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><literal type="string">"%.2x%s"</literal></expr></argument>, <argument><expr><name><name>emac</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <name>emac_len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"-"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		  <expr_stmt><expr><name>hostname</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>

	  <if_stmt><if>if <condition>(<expr><name>hostname</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>lease_set_hostname</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>hostname_auth</name></expr></argument>, <argument><expr><call><name>get_domain</name><argument_list>(<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  
	  <expr_stmt><expr><call><name>lease_set_expires</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>lease_set_interface</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name>int_index</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <if_stmt><if>if <condition>(<expr><name><name>override</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>override</name></name> <operator>=</operator> <name>override</name></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><name>override</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>override</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><name>METRIC_DHCPACK</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>log_packet</name><argument_list>(<argument><expr><literal type="string">"DHCPACK"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mess</name><operator>-&gt;</operator><name>yiaddr</name></name></expr></argument>, <argument><expr><name>emac</name></expr></argument>, <argument><expr><name>emac_len</name></expr></argument>, <argument><expr><name>iface_name</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  

	  <expr_stmt><expr><call><name>clear_packet</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>option_put</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>OPTION_MESSAGE_TYPE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>DHCPACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>option_put</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>OPTION_SERVER_IDENTIFIER</name></expr></argument>, <argument><expr><name>INADDRSZ</name></expr></argument>, <argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><call><name>server_id</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>override</name></expr></argument>, <argument><expr><name>fallback</name></expr></argument>)</argument_list></call><operator>.</operator><name>s_addr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>option_put</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>OPTION_LEASE_TIME</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name>rapid_commit</name></expr>)</condition><block type="pseudo"><block_content>
	     <expr_stmt><expr><call><name>option_put</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>OPTION_RAPID_COMMIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	   <expr_stmt><expr><call><name>do_options</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>req_options</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><call><name>get_domain</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>yiaddr</name></name></expr></argument>)</argument_list></call></expr></argument>, 
		     <argument><expr><name>netid</name></expr></argument>, <argument><expr><name>subnet_addr</name></expr></argument>, <argument><expr><name>fqdn_flags</name></expr></argument>, <argument><expr><name>borken_opt</name></expr></argument>, <argument><expr><name>pxearch</name></expr></argument>, <argument><expr><name>uuid</name></expr></argument>, <argument><expr><name>vendor_class_len</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><name>fuzz</name></expr></argument>, <argument><expr><name>pxevendor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

      <return>return <expr><call><name>dhcp_packet_size</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>agent_id</name></expr></argument>, <argument><expr><name>real_end</name></expr></argument>)</argument_list></call></expr>;</return> 
      
    <case>case <expr><name>DHCPINFORM</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>ignore</name> <operator>||</operator> <call><name>have_config</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>CONFIG_DISABLE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"ignored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><name>METRIC_DHCPINFORM</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>log_packet</name><argument_list>(<argument><expr><literal type="string">"DHCPINFORM"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mess</name><operator>-&gt;</operator><name>ciaddr</name></name></expr></argument>, <argument><expr><name>emac</name></expr></argument>, <argument><expr><name>emac_len</name></expr></argument>, <argument><expr><name>iface_name</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     
      <if_stmt><if>if <condition>(<expr><name>message</name> <operator>||</operator> <name><name>mess</name><operator>-&gt;</operator><name>ciaddr</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

      <comment type="block">/* For DHCPINFORM only, cope without a valid context */</comment>
      <expr_stmt><expr><name>context</name> <operator>=</operator> <call><name>narrow_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>ciaddr</name></name></expr></argument>, <argument><expr><name>tagif_netid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Find a least based on IP address if we didn't
	 get one from MAC address/client-d */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>lease</name> <operator>&amp;&amp;</operator>
	  <operator>(</operator><name>lease</name> <operator>=</operator> <call><name>lease_find_by_addr</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>ciaddr</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> 
	  <name><name>lease</name><operator>-&gt;</operator><name>hostname</name></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>hostname</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>hostname</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hostname</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>hostname</name> <operator>=</operator> <call><name>host_from_dns</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>ciaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>context</name> <operator>&amp;&amp;</operator> <name><name>context</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>net</name></name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>netid</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>tagif_netid</name> <operator>=</operator> <call><name>run_tag_if</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>netid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>log_tags</name><argument_list>(<argument><expr><name>tagif_netid</name></expr></argument>, <argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><name>METRIC_DHCPACK</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>log_packet</name><argument_list>(<argument><expr><literal type="string">"DHCPACK"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mess</name><operator>-&gt;</operator><name>ciaddr</name></name></expr></argument>, <argument><expr><name>emac</name></expr></argument>, <argument><expr><name>emac_len</name></expr></argument>, <argument><expr><name>iface_name</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>lease</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>lease_set_interface</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name>int_index</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name><name>override</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>override</name></name> <operator>=</operator> <name>override</name></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><name>override</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>override</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>clear_packet</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>option_put</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>OPTION_MESSAGE_TYPE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>DHCPACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>option_put</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>OPTION_SERVER_IDENTIFIER</name></expr></argument>, <argument><expr><name>INADDRSZ</name></expr></argument>, <argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><call><name>server_id</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>override</name></expr></argument>, <argument><expr><name>fallback</name></expr></argument>)</argument_list></call><operator>.</operator><name>s_addr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     
      <comment type="block">/* RFC 2131 says that DHCPINFORM shouldn't include lease-time parameters, but 
	 we supply a utility which makes DHCPINFORM requests to get this information.
	 Only include lease time if OPTION_LEASE_TIME is in the parameter request list,
	 which won't be true for ordinary clients, but will be true for the 
	 dhcp_lease_time utility. */</comment>
      <if_stmt><if>if <condition>(<expr><name>lease</name> <operator>&amp;&amp;</operator> <call><name>in_list</name><argument_list>(<argument><expr><name>req_options</name></expr></argument>, <argument><expr><name>OPTION_LEASE_TIME</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name><name>lease</name><operator>-&gt;</operator><name>expires</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>time</name> <operator>=</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><name>time</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>difftime</name><argument_list>(<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>expires</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	  <expr_stmt><expr><call><name>option_put</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>OPTION_LEASE_TIME</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>do_options</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>req_options</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><call><name>get_domain</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>ciaddr</name></name></expr></argument>)</argument_list></call></expr></argument>,
		 <argument><expr><name>netid</name></expr></argument>, <argument><expr><name>subnet_addr</name></expr></argument>, <argument><expr><name>fqdn_flags</name></expr></argument>, <argument><expr><name>borken_opt</name></expr></argument>, <argument><expr><name>pxearch</name></expr></argument>, <argument><expr><name>uuid</name></expr></argument>, <argument><expr><name>vendor_class_len</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="number">0xffffffff</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pxevendor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <expr_stmt><expr><operator>*</operator><name>is_inform</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* handle reply differently */</comment>
      <return>return <expr><call><name>dhcp_packet_size</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>agent_id</name></expr></argument>, <argument><expr><name>real_end</name></expr></argument>)</argument_list></call></expr>;</return> 
    </block_content>}</block></switch>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* find a good value to use as MAC address for logging and address-allocation hashing.
   This is normally just the chaddr field from the DHCP packet,
   but eg Firewire will have hlen == 0 and use the client-id instead. 
   This could be anything, but will normally be EUI64 for Firewire.
   We assume that if the first byte of the client-id equals the htype byte
   then the client-id is using the usual encoding and use the rest of the 
   client-id: if not we can use the whole client-id. This should give
   sane MAC address logs. */</comment>
<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>extended_hwaddr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hwtype</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hwlen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hwaddr</name></decl></parameter>, 
				      <parameter><decl><type><name>int</name></type> <name>clid_len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>clid</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>len_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>hwlen</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>clid</name> <operator>&amp;&amp;</operator> <name>clid_len</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>clid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>  <operator>==</operator> <name>hwtype</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><operator>*</operator><name>len_out</name> <operator>=</operator> <name>clid_len</name> <operator>-</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
	  <return>return <expr><name>clid</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARPHRD_EUI64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ARPHRD_IEEE1394</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <if_stmt><if>if <condition>(<expr><name><name>clid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator>  <name>ARPHRD_EUI64</name> <operator>&amp;&amp;</operator> <name>hwtype</name> <operator>==</operator> <name>ARPHRD_IEEE1394</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><operator>*</operator><name>len_out</name> <operator>=</operator> <name>clid_len</name> <operator>-</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
	  <return>return <expr><name>clid</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      
      <expr_stmt><expr><operator>*</operator><name>len_out</name> <operator>=</operator> <name>clid_len</name></expr>;</expr_stmt>
      <return>return <expr><name>clid</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><operator>*</operator><name>len_out</name> <operator>=</operator> <name>hwlen</name></expr>;</expr_stmt>
  <return>return <expr><name>hwaddr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>calc_time</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_config</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>time</name> <init>= <expr><ternary><condition><expr><call><name>have_config</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>CONFIG_TIME</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>config</name><operator>-&gt;</operator><name>lease_time</name></name></expr> </then><else>: <expr><name><name>context</name><operator>-&gt;</operator><name>lease_time</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>opt</name></expr>)</condition>
    <block>{<block_content> 
      <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>req_time</name> <init>= <expr><call><name>option_uint</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>req_time</name> <operator>&lt;</operator> <literal type="number">120</literal></expr> )</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>req_time</name> <operator>=</operator> <literal type="number">120</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block">/* sanity */</comment>
      <if_stmt><if>if <condition>(<expr><name>time</name> <operator>==</operator> <literal type="number">0xffffffff</literal> <operator>||</operator> <operator>(</operator><name>req_time</name> <operator>!=</operator> <literal type="number">0xffffffff</literal> <operator>&amp;&amp;</operator> <name>req_time</name> <operator>&lt;</operator> <name>time</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>time</name> <operator>=</operator> <name>req_time</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

  <return>return <expr><name>time</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>in_addr</name></name></type> <name>server_id</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>override</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>fallback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>override</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>override</name></expr>;</return></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>context</name> <operator>&amp;&amp;</operator> <name><name>context</name><operator>-&gt;</operator><name>local</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name><name>context</name><operator>-&gt;</operator><name>local</name></name></expr>;</return></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <return>return <expr><name>fallback</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sanitise</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  
  <expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>opt</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>option_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <call><name>option_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
    <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>p</name><operator>++</operator></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>isprint</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
  <expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* add terminator */</comment>
  
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SCRIPT</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>add_extradata_opt</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>opt</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>lease_add_extradata</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>lease_add_extradata</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><call><name>option_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>option_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>log_packet</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ext_mac</name></decl></parameter>, 
		       <parameter><decl><type><name>int</name></type> <name>mac_len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>interface</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>xid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOG_OPTS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_QUIET_DHCP</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>addr</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><call><name>print_mac</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>ext_mac</name></expr></argument>, <argument><expr><name>mac_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOG_OPTS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%u %s(%s) %s%s%s %s%s"</literal></expr></argument>,
	      <argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name>xid</name></expr></argument>)</argument_list></call></expr></argument>, 
	      <argument><expr><name>type</name></expr></argument>,
	      <argument><expr><name>interface</name></expr></argument>, 
	      <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>,
	      <argument><expr><ternary><condition><expr><name>addr</name></expr> ?</condition><then> <expr><literal type="string">" "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
	      <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>,
	      <argument><expr><ternary><condition><expr><name>string</name></expr> ?</condition><then> <expr><name>string</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
	      <argument><expr><ternary><condition><expr><name>err</name></expr> ?</condition><then> <expr><name>err</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%s(%s) %s%s%s %s%s"</literal></expr></argument>,
	      <argument><expr><name>type</name></expr></argument>,
	      <argument><expr><name>interface</name></expr></argument>, 
	      <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>,
	      <argument><expr><ternary><condition><expr><name>addr</name></expr> ?</condition><then> <expr><literal type="string">" "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
	      <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>,
	      <argument><expr><ternary><condition><expr><name>string</name></expr> ?</condition><then> <expr><name>string</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
	      <argument><expr><ternary><condition><expr><name>err</name></expr> ?</condition><then> <expr><name>err</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UBUS</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"DHCPACK"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>ubus_event_bcast</name><argument_list>(<argument><expr><literal type="string">"dhcp.ack"</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>addr</name></expr> ?</condition><then> <expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>interface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"DHCPRELEASE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>ubus_event_bcast</name><argument_list>(<argument><expr><literal type="string">"dhcp.release"</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>addr</name></expr> ?</condition><then> <expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>interface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>log_options</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>xid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <while>while <condition>(<expr><operator>*</operator><name>start</name> <operator>!=</operator> <name>OPTION_END</name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>optname</name> <init>= <expr><call><name>option_string</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name><name>start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>option_ptr</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>option_len</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>MAXDNAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      
      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%u sent size:%3d option:%3d %s  %s"</literal></expr></argument>, 
		<argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name>xid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>option_len</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>start</name> <operator>+=</operator> <name><name>start</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>option_find1</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> 
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>OPTION_END</name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><ternary><condition><expr><name>opt</name> <operator>==</operator> <name>OPTION_END</name></expr> ?</condition><then> <expr><name>p</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>OPTION_PAD</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
      <else>else 
	<block>{<block_content> 
	  <decl_stmt><decl><type><name>int</name></type> <name>opt_len</name></decl>;</decl_stmt>
	  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>end</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* malformed packet */</comment>
	  <expr_stmt><expr><name>opt_len</name> <operator>=</operator> <call><name>option_len</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>end</name> <operator>-</operator> <operator>(</operator><literal type="number">2</literal> <operator>+</operator> <name>opt_len</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* malformed packet */</comment>
	  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>opt</name> <operator>&amp;&amp;</operator> <name>opt_len</name> <operator>&gt;=</operator> <name>minsize</name></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><name>p</name></expr>;</return></block_content></block></if></if_stmt>
	  <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>opt_len</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>
 
<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>option_find</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_packet</name></name> <modifier>*</modifier></type><name>mess</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt_type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ret</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>overload</name></decl>;</decl_stmt>
  
  <comment type="block">/* skip over DHCP cookie; */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>option_find1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mess</name><operator>-&gt;</operator><name>options</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>u32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>mess</name><operator>)</operator> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><name>opt_type</name></expr></argument>, <argument><expr><name>minsize</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

  <comment type="block">/* look for overload option. */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>overload</name> <operator>=</operator> <call><name>option_find1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mess</name><operator>-&gt;</operator><name>options</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>u32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>mess</name><operator>)</operator> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><name>OPTION_OVERLOAD</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  
  <comment type="block">/* Can we look in filename area ? */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>overload</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator>
      <operator>(</operator><name>ret</name> <operator>=</operator> <call><name>option_find1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mess</name><operator>-&gt;</operator><name>file</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mess</name><operator>-&gt;</operator><name>file</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></expr></argument>, <argument><expr><name>opt_type</name></expr></argument>, <argument><expr><name>minsize</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

  <comment type="block">/* finally try sname area */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>overload</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator>
      <operator>(</operator><name>ret</name> <operator>=</operator> <call><name>option_find1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mess</name><operator>-&gt;</operator><name>sname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mess</name><operator>-&gt;</operator><name>sname</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></expr></argument>, <argument><expr><name>opt_type</name></expr></argument>, <argument><expr><name>minsize</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>in_addr</name></name></type> <name>option_addr</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
   <comment type="block">/* this worries about unaligned data in the option. */</comment>
  <comment type="block">/* struct in_addr is network byte order */</comment>
  <decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>ret</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><call><name>option_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>option_uint</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* this worries about unaligned data and byte order */</comment>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>option_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>ret</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dhcp_skip_opts</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>start</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <while>while <condition>(<expr><operator>*</operator><name>start</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>start</name> <operator>+=</operator> <name><name>start</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></while>
  <return>return <expr><name>start</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* only for use when building packet: doesn't check for bad data. */</comment> 
<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>find_overload</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_packet</name></name> <modifier>*</modifier></type><name>mess</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>mess</name><operator>-&gt;</operator><name>options</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>u32</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  
  <while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>OPTION_OVERLOAD</name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>p</name></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>dhcp_packet_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_packet</name></name> <modifier>*</modifier></type><name>mess</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>agent_id</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>real_end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>dhcp_skip_opts</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mess</name><operator>-&gt;</operator><name>options</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>u32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>overload</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>ret</name></decl>;</decl_stmt>
  
  <comment type="block">/* move agent_id back down to the end of the packet */</comment>
  <if_stmt><if>if <condition>(<expr><name>agent_id</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>agent_id</name></expr></argument>, <argument><expr><name>real_end</name> <operator>-</operator> <name>agent_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>real_end</name> <operator>-</operator> <name>agent_id</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>real_end</name> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* in case of overlap */</comment>
    </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* add END options to the regions. */</comment>
  <expr_stmt><expr><name>overload</name> <operator>=</operator> <call><name>find_overload</name><argument_list>(<argument><expr><name>mess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>overload</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>option_uint</name><argument_list>(<argument><expr><name>overload</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><call><name>dhcp_skip_opts</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call> <operator>=</operator> <name>OPTION_END</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOG_OPTS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>log_options</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOG_OPTS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>mess</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%u bootfile name: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>mess</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>overload</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>option_uint</name><argument_list>(<argument><expr><name>overload</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><call><name>dhcp_skip_opts</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>sname</name></name></expr></argument>)</argument_list></call> <operator>=</operator> <name>OPTION_END</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOG_OPTS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>log_options</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>sname</name></name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOG_OPTS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>mess</name><operator>-&gt;</operator><name>sname</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%u server name: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>mess</name><operator>-&gt;</operator><name>sname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


  <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>OPTION_END</name></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOG_OPTS</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>mess</name><operator>-&gt;</operator><name>siaddr</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mess</name><operator>-&gt;</operator><name>siaddr</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%u next server: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mess</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">0x8000</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>mess</name><operator>-&gt;</operator><name>ciaddr</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%u broadcast response"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <expr_stmt><expr><call><name>log_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mess</name><operator>-&gt;</operator><name>options</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>u32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt> 
  
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>mess</name><operator>)</operator></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <name>MIN_PACKETSZ</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MIN_PACKETSZ</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>free_space</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_packet</name></name> <modifier>*</modifier></type><name>mess</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>dhcp_skip_opts</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mess</name><operator>-&gt;</operator><name>options</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>u32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;=</operator> <name>end</name></expr>)</condition>
    <comment type="block">/* not enough space in options area, try and use overload, if poss */</comment>
    <block>{<block_content>
      <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>overload</name></decl>;</decl_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>overload</name> <operator>=</operator> <call><name>find_overload</name><argument_list>(<argument><expr><name>mess</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
	  <operator>(</operator><name><name>mess</name><operator>-&gt;</operator><name>file</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>mess</name><operator>-&gt;</operator><name>sname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <comment type="block">/* attempt to overload fname and sname areas, we've reserved space for the
	     overflow option previuously. */</comment>
	  <expr_stmt><expr><name>overload</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
	  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>OPTION_OVERLOAD</name></expr>;</expr_stmt>
	  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
      
      <expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      
      <comment type="block">/* using filename field ? */</comment>
      <if_stmt><if>if <condition>(<expr><name>overload</name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name><name>mess</name><operator>-&gt;</operator><name>file</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>overload</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name><name>overload</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>dhcp_skip_opts</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><name>p</name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;=</operator> <name><name>mess</name><operator>-&gt;</operator><name>file</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition>
	    <block>{<block_content>
	      <comment type="block">/* try to bring sname into play (it may be already) */</comment>
	      <if_stmt><if>if <condition>(<expr><name><name>mess</name><operator>-&gt;</operator><name>sname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>overload</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><name><name>overload</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>dhcp_skip_opts</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>sname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;=</operator> <name><name>mess</name><operator>-&gt;</operator><name>sname</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>sname</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot send DHCP/BOOTP option %d: no space left in packet"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
 
  <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>opt</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>
	      
<function><type><specifier>static</specifier> <name>void</name></type> <name>option_put</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_packet</name></name> <modifier>*</modifier></type><name>mess</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>free_space</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content> 
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>val</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <operator>(</operator><name>len</name> <operator>-</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>option_put_string</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_packet</name></name> <modifier>*</modifier></type><name>mess</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt</name></decl></parameter>, 
			      <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>null_term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>null_term</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>!=</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>free_space</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* return length, note this only does the data part */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>do_opt</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_opt</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>null_term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DHOPT_STRING</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>null_term</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>!=</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>context</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DHOPT_ADDR</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>in_addr</name> <operator>*</operator><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>val</name></name></expr></init></decl>;</decl_stmt>
	  <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>opt</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>j</name><operator>+=</operator><name>INADDRSZ</name></expr><operator>,</operator> <expr><name>a</name><operator>++</operator></expr></incr>)</control>
	    <block>{<block_content>
	      <comment type="block">/* zero means "self" (but not in vendorclass options.) */</comment>
	      <if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>s_addr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>local</name></name></expr></argument>, <argument><expr><name>INADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	      <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>INADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	      <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>INADDRSZ</name></expr>;</expr_stmt>
	    </block_content>}</block></for>
	</block_content>}</block></if>
      <else>else<block type="pseudo"><block_content>
	<comment type="block">/* empty string may be extended to "\0" by null_term */</comment>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>opt</name><operator>-&gt;</operator><name>val</name></name></expr> ?</condition><then> <expr><name><name>opt</name><operator>-&gt;</operator><name>val</name></name></expr> </then><else>: <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>  
  <return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>in_list</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

   <comment type="block">/* If no requested options, send everything, not nothing. */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>OPTION_END</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name>opt</name> <operator>==</operator> <name><name>list</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>dhcp_opt</name></name> <modifier>*</modifier></type><name>option_find2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_opt</name></name> <modifier>*</modifier></type><name>opts</name></decl>;</decl_stmt>
  
  <for>for <control>(<init><expr><name>opts</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_opts</name></name></expr>;</init> <condition><expr><name>opts</name></expr>;</condition> <incr><expr><name>opts</name> <operator>=</operator> <name><name>opts</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>opt</name></name> <operator>==</operator> <name>opt</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DHOPT_TAGOK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>opts</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
  
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* mark vendor-encapsulated options which match the client-supplied  or
   config-supplied vendor class */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>match_vendor_opts</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_opt</name></name> <modifier>*</modifier></type><name>dopt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <for>for <control>(<init>;</init> <condition><expr><name>dopt</name></expr>;</condition> <incr><expr><name>dopt</name> <operator>=</operator> <name><name>dopt</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name><name>dopt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DHOPT_VENDOR_MATCH</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>opt</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>dopt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DHOPT_VENDOR</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>dhcp_pxe_vendor</name></name> <modifier>*</modifier></type><name>pv</name></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_pxe_vendor</name></name></type> <name>dummy_vendor</name> <init>= <expr><block>{
	    <expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>dopt</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>vendor_class</name></name></expr>,
	    <expr><operator>.</operator><name>next</name> <operator>=</operator> <name>NULL</name></expr>,
	  }</block></expr></init></decl>;</decl_stmt>
	  <if_stmt><if>if <condition>(<expr><name><name>dopt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DHOPT_VENDOR_PXE</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>pv</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_pxe_vendors</name></name></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><name>pv</name> <operator>=</operator> <operator>&amp;</operator><name>dummy_vendor</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	  <for>for <control>(<init>;</init> <condition><expr><name>pv</name></expr>;</condition> <incr><expr><name>pv</name> <operator>=</operator> <name><name>pv</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>matched</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	      <if_stmt><if>if <condition>(<expr><name><name>pv</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>
	        <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>pv</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <operator>(</operator><call><name>option_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>len</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>pv</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><call><name>option_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	          <block>{<block_content>
		    <expr_stmt><expr><name>matched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	            <break>break;</break>
	          </block_content>}</block></if></if_stmt></block_content></block></for>
	      <if_stmt><if>if <condition>(<expr><name>matched</name></expr>)</condition>
		<block>{<block_content>
	          <expr_stmt><expr><name><name>dopt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>DHOPT_VENDOR_MATCH</name></expr>;</expr_stmt>
		  <break>break;</break>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></for>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>do_encap_opts</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_opt</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>,  
			 <parameter><decl><type><name><name>struct</name> <name>dhcp_packet</name></name> <modifier>*</modifier></type><name>mess</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>null_term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>enc_len</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_opt</name></name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    
  <comment type="block">/* find size in advance */</comment>
  <for>for <control>(<init><expr><name>enc_len</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>start</name> <operator>=</operator> <name>opt</name></expr>;</init> <condition><expr><name>opt</name></expr>;</condition> <incr><expr><name>opt</name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>flag</name></expr>)</condition>
      <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>new</name> <init>= <expr><call><name>do_opt</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>null_term</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>ret</name>  <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>enc_len</name> <operator>+</operator> <name>new</name> <operator>&lt;=</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name>enc_len</name> <operator>+=</operator> <name>new</name></expr>;</expr_stmt></block_content></block></if>
	<else>else
	  <block>{<block_content>
	    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>free_space</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>encap</name></expr></argument>, <argument><expr><name>enc_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <for>for <control>(<init>;</init> <condition><expr><name>start</name> <operator>&amp;&amp;</operator> <name>start</name> <operator>!=</operator> <name>opt</name></expr>;</condition> <incr><expr><name>start</name> <operator>=</operator> <name><name>start</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	      <if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>start</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>flag</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>do_opt</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>null_term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name><name>start</name><operator>-&gt;</operator><name>opt</name></name></expr>;</expr_stmt>
		  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt></block_content></block></for>
	    <expr_stmt><expr><name>enc_len</name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>start</name> <operator>=</operator> <name>opt</name></expr>;</expr_stmt>
	  </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt></block_content></block></for>
  
  <if_stmt><if>if <condition>(<expr><name>enc_len</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
      <operator>(</operator><name>p</name> <operator>=</operator> <call><name>free_space</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>encap</name></expr></argument>, <argument><expr><name>enc_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <for>for <control>(<init>;</init> <condition><expr><name>start</name></expr>;</condition> <incr><expr><name>start</name> <operator>=</operator> <name><name>start</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><name><name>start</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>flag</name></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>do_opt</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>null_term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name><name>start</name><operator>-&gt;</operator><name>opt</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt></block_content></block></for>
      <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>OPTION_END</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pxe_misc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_packet</name></name> <modifier>*</modifier></type><name>mess</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>uuid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pxevendor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pxevendor</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>pxevendor</name><operator>=</operator><literal type="string">"PXEClient"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>option_put_string</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>OPTION_VENDOR_ID</name></expr></argument>, <argument><expr><name>pxevendor</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>uuid</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>p</name> <operator>=</operator> <call><name>free_space</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>OPTION_PXE_UUID</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>uuid</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>prune_vendor_opts</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>netid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>force</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_opt</name></name> <modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>

  <comment type="block">/* prune vendor-encapsulated options based on netid, and look if we're forcing them to be sent */</comment>
  <for>for <control>(<init><expr><name>opt</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_opts</name></name></expr>;</init> <condition><expr><name>opt</name></expr>;</condition> <incr><expr><name>opt</name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DHOPT_VENDOR_MATCH</name></expr>)</condition>
      <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>match_netid</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>netid</name></name></expr></argument>, <argument><expr><name>netid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DHOPT_VENDOR_MATCH</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DHOPT_FORCE</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name>force</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt></block_content></block></for>
  <return>return <expr><name>force</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Many UEFI PXE implementations have badly broken menu code.
   If there's exactly one relevant menu item, we abandon the menu system,
   and jamb the data direct into the DHCP file, siaddr and sname fields.
   Note that in this case, we have to assume that layer zero would be requested
   by the client PXE stack. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>pxe_uefi_workaround</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pxe_arch</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>netid</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_packet</name></name> <modifier>*</modifier></type><name>mess</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>local</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pxe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>pxe_service</name></name> <modifier>*</modifier></type><name>service</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>found</name></decl>;</decl_stmt>

  <comment type="block">/* Only workaround UEFI archs. */</comment>
  <if_stmt><if>if <condition>(<expr><name>pxe_arch</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <for>for <control>(<init><expr><name>found</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator> <expr><name>service</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>pxe_services</name></name></expr>;</init> <condition><expr><name>service</name></expr>;</condition> <incr><expr><name>service</name> <operator>=</operator> <name><name>service</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name>pxe_arch</name> <operator>==</operator> <name><name>service</name><operator>-&gt;</operator><name>CSA</name></name> <operator>&amp;&amp;</operator> <name><name>service</name><operator>-&gt;</operator><name>basename</name></name> <operator>&amp;&amp;</operator> <call><name>match_netid</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>netid</name></name></expr></argument>, <argument><expr><name>netid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
      <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
	  <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* More than one relevant menu item */</comment>
	  
	<expr_stmt><expr><name>found</name> <operator>=</operator> <name>service</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt></block_content></block></for>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* No relevant menu items. */</comment>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pxe</name></expr>)</condition><block type="pseudo"><block_content>
     <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>found</name><operator>-&gt;</operator><name>sname</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>siaddr</name></name> <operator>=</operator> <call><name>a_record_from_hosts</name><argument_list>(<argument><expr><name><name>found</name><operator>-&gt;</operator><name>sname</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>mess</name><operator>-&gt;</operator><name>sname</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>sname</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>found</name><operator>-&gt;</operator><name>sname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
  <else>else 
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>found</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>siaddr</name></name> <operator>=</operator> <name><name>found</name><operator>-&gt;</operator><name>server</name></name></expr>;</expr_stmt></block_content></block></if> 
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>siaddr</name></name> <operator>=</operator> <name>local</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
  
      <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mess</name><operator>-&gt;</operator><name>siaddr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>mess</name><operator>-&gt;</operator><name>sname</name></name></expr></argument>, <argument><expr><name>INET_ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>found</name><operator>-&gt;</operator><name>basename</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>mess</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	     <argument><expr><ternary><condition><expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>found</name><operator>-&gt;</operator><name>basename</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"%s"</literal></expr> </then><else>: <expr><literal type="string">"%s.0"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>found</name><operator>-&gt;</operator><name>basename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>dhcp_opt</name></name> <modifier>*</modifier></type><name>pxe_opts</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pxe_arch</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>netid</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>local</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_OPTS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>  

  <decl_stmt><decl><type><name>unsigned</name>  <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>pxe_service</name></name> <modifier>*</modifier></type><name>service</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>dhcp_opt</name></name> <modifier>*</modifier></type><name>o</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><name>NUM_OPTS</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>boot_server</name></decl>;</decl_stmt>
  
  <comment type="block">/* We pass back references to these, hence they are declared static */</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name>discovery_control</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>fake_prompt</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'P'</literal></expr>, <expr><literal type="char">'X'</literal></expr>, <expr><literal type="char">'E'</literal></expr> }</block></expr></init></decl>;</decl_stmt> 
  <decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>dhcp_opt</name></name> <modifier>*</modifier></type><name>fake_opts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Disable multicast, since we don't support it, and broadcast
     unless we need it */</comment>
  <expr_stmt><expr><name>discovery_control</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
  
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_opts</name></name></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fake_opts</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>fake_opts</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><name>NUM_OPTS</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>dhcp_opt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_OPTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name><name>fake_opts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>DHOPT_VENDOR_MATCH</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>fake_opts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>netid</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>fake_opts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>next</name> <operator>=</operator> <ternary><condition><expr><name>i</name> <operator>==</operator> <operator>(</operator><name>NUM_OPTS</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>fake_opts</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></for>
  
  <comment type="block">/* create the data for the PXE_MENU and PXE_SERVERS options. */</comment>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>q</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff3</name></name></expr>;</expr_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>service</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>pxe_services</name></name></expr>;</init> <condition><expr><name>service</name></expr>;</condition> <incr><expr><name>service</name> <operator>=</operator> <name><name>service</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name>pxe_arch</name> <operator>==</operator> <name><name>service</name><operator>-&gt;</operator><name>CSA</name></name> <operator>&amp;&amp;</operator> <call><name>match_netid</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>netid</name></name></expr></argument>, <argument><expr><name>netid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
      <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>menu</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="block">/* opt 43 max size is 255. encapsulated option has type and length
	   bytes, so its max size is 253. */</comment>
	<if_stmt><if>if <condition>(<expr><name>p</name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">3</literal> <operator>&lt;</operator> <literal type="number">253</literal></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name><name>service</name><operator>-&gt;</operator><name>type</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name><name>service</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>service</name><operator>-&gt;</operator><name>menu</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
	  </block_content>}</block></if>
	<else>else
	  <block>{<block_content>
	  <label><name>toobig</name>:</label>
	    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"PXE menu too large"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <return>return <expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_opts</name></name></expr>;</return>
	  </block_content>}</block></else></if_stmt>
	
	<expr_stmt><expr><name>boot_server</name> <operator>=</operator> <ternary><condition><expr><name><name>service</name><operator>-&gt;</operator><name>basename</name></name></expr> ?</condition><then> <expr><name>local</name></expr> </then><else>: 
	  <expr><operator>(</operator><ternary><condition><expr><name><name>service</name><operator>-&gt;</operator><name>sname</name></name></expr> ?</condition><then> <expr><call><name>a_record_from_hosts</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>sname</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>service</name><operator>-&gt;</operator><name>server</name></name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>(<expr><name><name>boot_server</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	  <block>{<block_content>
	    <if_stmt><if>if <condition>(<expr><name>q</name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff3</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name>INADDRSZ</name> <operator>&gt;=</operator> <literal type="number">253</literal></expr>)</condition><block type="pseudo"><block_content>
	      <goto>goto <name>toobig</name>;</goto></block_content></block></if></if_stmt>
	    
	    <comment type="block">/* Boot service with known address - give it */</comment>
	    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>q</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name><name>service</name><operator>-&gt;</operator><name>type</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>q</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name><name>service</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>q</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	    <comment type="block">/* dest misaligned */</comment>
	    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>boot_server</name><operator>.</operator><name>s_addr</name></name></expr></argument>, <argument><expr><name>INADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>q</name> <operator>+=</operator> <name>INADDRSZ</name></expr>;</expr_stmt>
	  </block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>service</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	  <comment type="block">/* We don't know the server for a service type, so we'll
	     allow the client to broadcast for it */</comment>
	  <expr_stmt><expr><name>discovery_control</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt></block_content></block></for>

  <comment type="block">/* if no prompt, wait forever if there's a choice */</comment>
  <expr_stmt><expr><name><name>fake_prompt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">255</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>discovery_control</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if> <comment type="block">/* no menu - just use use mess-&gt;filename */</comment>
  <else>else
    <block>{<block_content>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>&amp;</operator><name><name>fake_opts</name><index>[<expr><name>j</name><operator>--</operator></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>p</name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>opt</name></name> <operator>=</operator> <name>SUBOPT_PXE_MENU</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>q</name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff3</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>&amp;</operator><name><name>fake_opts</name><index>[<expr><name>j</name><operator>--</operator></expr>]</index></name></expr>;</expr_stmt> 
	  <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>q</name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff3</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff3</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>opt</name></name> <operator>=</operator> <name>SUBOPT_PXE_SERVERS</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

  <for>for <control>(<init><expr><name>o</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_opts</name></name></expr>;</init> <condition><expr><name>o</name></expr>;</condition> <incr><expr><name>o</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DHOPT_VENDOR_MATCH</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>opt</name></name> <operator>==</operator> <name>SUBOPT_PXE_MENU_PROMPT</name></expr>)</condition><block type="pseudo"><block_content>
      <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>o</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>&amp;</operator><name><name>fake_opts</name><index>[<expr><name>j</name><operator>--</operator></expr>]</index></name></expr>;</expr_stmt> 
      <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>fake_prompt</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>fake_prompt</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>opt</name></name> <operator>=</operator> <name>SUBOPT_PXE_MENU_PROMPT</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>&amp;</operator><name><name>fake_opts</name><index>[<expr><name>j</name><operator>--</operator></expr>]</index></name></expr>;</expr_stmt> 
  <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>opt</name></name> <operator>=</operator> <name>SUBOPT_PXE_DISCOVERY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>val</name></name><operator>=</operator> <operator>&amp;</operator><name>discovery_control</name></expr>;</expr_stmt>
 
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
  
<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_packet</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_packet</name></name> <modifier>*</modifier></type><name>mess</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>sname</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>sname</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mess</name><operator>-&gt;</operator><name>options</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>u32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <operator>(</operator><operator>&amp;</operator><name><name>mess</name><operator>-&gt;</operator><name>options</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>u32</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>siaddr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>dhcp_boot</name></name> <modifier>*</modifier></type><name>find_boot</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>netid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_boot</name></name> <modifier>*</modifier></type><name>boot</name></decl>;</decl_stmt>

  <comment type="block">/* decide which dhcp-boot option we're using */</comment>
  <for>for <control>(<init><expr><name>boot</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>boot_config</name></name></expr>;</init> <condition><expr><name>boot</name></expr>;</condition> <incr><expr><name>boot</name> <operator>=</operator> <name><name>boot</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><call><name>match_netid</name><argument_list>(<argument><expr><name><name>boot</name><operator>-&gt;</operator><name>netid</name></name></expr></argument>, <argument><expr><name>netid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>boot</name></expr>)</condition><block type="pseudo"><block_content>
    <comment type="block">/* No match, look for one without a netid */</comment>
    <for>for <control>(<init><expr><name>boot</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>boot_config</name></name></expr>;</init> <condition><expr><name>boot</name></expr>;</condition> <incr><expr><name>boot</name> <operator>=</operator> <name><name>boot</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><call><name>match_netid</name><argument_list>(<argument><expr><name><name>boot</name><operator>-&gt;</operator><name>netid</name></name></expr></argument>, <argument><expr><name>netid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<break>break;</break></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>

  <return>return <expr><name>boot</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_pxe_client</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_packet</name></name> <modifier>*</modifier></type><name>mess</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pxe_vendor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>conf_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>dhcp_pxe_vendor</name></name> <modifier>*</modifier></type><name>conf</name> <init>= <expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_pxe_vendors</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>opt</name> <operator>=</operator> <call><name>option_find</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>OPTION_VENDOR_ID</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>opt</name></expr>)</condition><block type="pseudo"><block_content> 
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <for>for <control>(<init>;</init> <condition><expr><name>conf</name></expr>;</condition> <incr><expr><name>conf</name> <operator>=</operator> <name><name>conf</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name>conf_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>option_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>conf_len</name></expr>)</condition><block type="pseudo"><block_content>
        <continue>continue;</continue></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><call><name>option_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>conf_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>pxe_vendor</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>*</operator><name>pxe_vendor</name> <operator>=</operator> <name><name>conf</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
          <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
		       <parameter><decl><type><name><name>struct</name> <name>dhcp_packet</name></name> <modifier>*</modifier></type><name>mess</name></decl></parameter>,
		       <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, 
		       <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>req_options</name></decl></parameter>,
		       <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>, 
		       <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>domain</name></decl></parameter>,
		       <parameter><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>netid</name></decl></parameter>,
		       <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>subnet_addr</name></decl></parameter>,
		       <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>fqdn_flags</name></decl></parameter>,
		       <parameter><decl><type><name>int</name></type> <name>null_term</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pxe_arch</name></decl></parameter>,
		       <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>uuid</name></decl></parameter>,
		       <parameter><decl><type><name>int</name></type> <name>vendor_class_len</name></decl></parameter>,
		       <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>,
		       <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>lease_time</name></decl></parameter>,
		       <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>fuzz</name></decl></parameter>,
		       <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pxevendor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_opt</name></name> <modifier>*</modifier></type><name>opt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>config_opts</name> <init>= <expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_opts</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_boot</name></name> <modifier>*</modifier></type><name>boot</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>force_encap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>f0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>s0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>done_file</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>done_server</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>done_vendor_class</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>tagif</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid_list</name></name> <modifier>*</modifier></type><name>id_list</name></decl>;</decl_stmt>

  <comment type="block">/* filter options based on tags, those we want get DHOPT_TAGOK bit set */</comment>
  <if_stmt><if>if <condition>(<expr><name>context</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>tagif</name> <operator>=</operator> <call><name>option_filter</name><argument_list>(<argument><expr><name>netid</name></expr></argument>, <argument><expr><ternary><condition><expr><name>context</name> <operator>&amp;&amp;</operator> <name><name>context</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>net</name></name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>netid</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>config_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
  <comment type="block">/* logging */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOG_OPTS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>req_options</name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>req_options</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>OPTION_END</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>option_string</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name><name>req_options</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	  <expr_stmt><expr><name>q</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>MAXDNAME</name> <operator>-</operator> <operator>(</operator><name>q</name> <operator>-</operator> <name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name><operator>)</operator></expr></argument>,
			<argument><expr><literal type="string">"%d%s%s%s"</literal></expr></argument>, 
			<argument><expr><name><name>req_options</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
			<argument><expr><ternary><condition><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">":"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
			<argument><expr><name>s</name></expr></argument>, 
			<argument><expr><ternary><condition><expr><name><name>req_options</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>OPTION_END</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">", "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name><name>req_options</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>OPTION_END</name> <operator>||</operator> <operator>(</operator><name>q</name> <operator>-</operator> <name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name><operator>)</operator> <operator>&gt;</operator> <literal type="number">40</literal></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%u requested options: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
      
  <for>for <control>(<init><expr><name>id_list</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>force_broadcast</name></name></expr>;</init> <condition><expr><name>id_list</name></expr>;</condition> <incr><expr><name>id_list</name> <operator>=</operator> <name><name>id_list</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>id_list</name><operator>-&gt;</operator><name>list</name></name><operator>)</operator> <operator>||</operator> <call><name>match_netid</name><argument_list>(<argument><expr><name><name>id_list</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><name>netid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
  <if_stmt><if>if <condition>(<expr><name>id_list</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">0x8000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block">/* force broadcast */</comment>
  
  <if_stmt><if>if <condition>(<expr><name>context</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>siaddr</name></name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>local</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <comment type="block">/* See if we can send the boot stuff as options.
     To do this we need a requested option list, BOOTP
     and very old DHCP clients won't have this, we also 
     provide a manual option to disable it.
     Some PXE ROMs have bugs (surprise!) and need zero-terminated 
     names, so we always send those.  */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>boot</name> <operator>=</operator> <call><name>find_boot</name><argument_list>(<argument><expr><name>tagif</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>boot</name><operator>-&gt;</operator><name>sname</name></name></expr>)</condition>
	<block>{<block_content>	  
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NO_OVERRIDE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	      <name>req_options</name> <operator>&amp;&amp;</operator> 
	      <call><name>in_list</name><argument_list>(<argument><expr><name>req_options</name></expr></argument>, <argument><expr><name>OPTION_SNAME</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>option_put_string</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>OPTION_SNAME</name></expr></argument>, <argument><expr><name><name>boot</name><operator>-&gt;</operator><name>sname</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>safe_strncpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>mess</name><operator>-&gt;</operator><name>sname</name></name></expr></argument>, <argument><expr><name><name>boot</name><operator>-&gt;</operator><name>sname</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>sname</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>boot</name><operator>-&gt;</operator><name>file</name></name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NO_OVERRIDE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	      <name>req_options</name> <operator>&amp;&amp;</operator> 
	      <call><name>in_list</name><argument_list>(<argument><expr><name>req_options</name></expr></argument>, <argument><expr><name>OPTION_FILENAME</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>option_put_string</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>OPTION_FILENAME</name></expr></argument>, <argument><expr><name><name>boot</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>safe_strncpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>mess</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name><name>boot</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>boot</name><operator>-&gt;</operator><name>next_server</name><operator>.</operator><name>s_addr</name></name></expr>)</condition><block type="pseudo"><block_content> 
	<expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>siaddr</name></name> <operator>=</operator> <name><name>boot</name><operator>-&gt;</operator><name>next_server</name></name></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name><name>boot</name><operator>-&gt;</operator><name>tftp_sname</name></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>siaddr</name></name> <operator>=</operator> <call><name>a_record_from_hosts</name><argument_list>(<argument><expr><name><name>boot</name><operator>-&gt;</operator><name>tftp_sname</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
  <else>else
    <comment type="block">/* Use the values of the relevant options if no dhcp-boot given and
       they're not explicitly asked for as options. OPTION_END is used
       as an internal way to specify siaddr without using dhcp-boot, for use in
       dhcp-optsfile. */</comment>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>req_options</name> <operator>||</operator> <operator>!</operator><call><name>in_list</name><argument_list>(<argument><expr><name>req_options</name></expr></argument>, <argument><expr><name>OPTION_FILENAME</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
	  <operator>(</operator><name>opt</name> <operator>=</operator> <call><name>option_find2</name><argument_list>(<argument><expr><name>OPTION_FILENAME</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DHOPT_FORCE</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>safe_strncpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>mess</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>done_file</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>req_options</name> <operator>||</operator> <operator>!</operator><call><name>in_list</name><argument_list>(<argument><expr><name>req_options</name></expr></argument>, <argument><expr><name>OPTION_SNAME</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
	  <operator>(</operator><name>opt</name> <operator>=</operator> <call><name>option_find2</name><argument_list>(<argument><expr><name>OPTION_SNAME</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DHOPT_FORCE</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>safe_strncpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>mess</name><operator>-&gt;</operator><name>sname</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>sname</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>done_server</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>option_find2</name><argument_list>(<argument><expr><name>OPTION_END</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>siaddr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator>struct <name>in_addr</name> <operator>*</operator><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>val</name></name><operator>)</operator><operator>-&gt;</operator><name>s_addr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>	
    </block_content>}</block></else></if_stmt>
        
  <comment type="block">/* We don't want to do option-overload for BOOTP, so make the file and sname
     fields look like they are in use, even when they aren't. This gets restored
     at the end of this function. */</comment>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>req_options</name> <operator>||</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NO_OVERRIDE</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>f0</name> <operator>=</operator> <name><name>mess</name><operator>-&gt;</operator><name>file</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>file</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>s0</name> <operator>=</operator> <name><name>mess</name><operator>-&gt;</operator><name>sname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>sname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
      
  <comment type="block">/* At this point, if mess-&gt;sname or mess-&gt;file are zeroed, they are available
     for option overload, reserve space for the overload option. */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>mess</name><operator>-&gt;</operator><name>file</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>mess</name><operator>-&gt;</operator><name>sname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>end</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="block">/* rfc3011 says this doesn't need to be in the requested options list. */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>subnet_addr</name><operator>.</operator><name>s_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>option_put</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>OPTION_SUBNET_SELECT</name></expr></argument>, <argument><expr><name>INADDRSZ</name></expr></argument>, <argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>subnet_addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
   
  <if_stmt><if>if <condition>(<expr><name>lease_time</name> <operator>!=</operator> <literal type="number">0xffffffff</literal></expr>)</condition>
    <block>{<block_content> 
      <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>t1val</name> <init>= <expr><name>lease_time</name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt> 
      <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>t2val</name> <init>= <expr><operator>(</operator><name>lease_time</name><operator>*</operator><literal type="number">7</literal><operator>)</operator><operator>/</operator><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>hval</name></decl>;</decl_stmt>
      
      <comment type="block">/* If set by user, sanity check, so not longer than lease. */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>option_find2</name><argument_list>(<argument><expr><name>OPTION_T1</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>hval</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>val</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name><name>hval</name> <argument_list type="generic">&lt; <argument><expr><name>lease_time</name> <operator>&amp;&amp;</operator> <name>hval</name></expr></argument> &gt;</argument_list></name> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>t1val</name> <operator>=</operator> <name>hval</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

       <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>option_find2</name><argument_list>(<argument><expr><name>OPTION_T2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>hval</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>val</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name><name>hval</name> <argument_list type="generic">&lt; <argument><expr><name>lease_time</name> <operator>&amp;&amp;</operator> <name>hval</name></expr></argument> &gt;</argument_list></name> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>t2val</name> <operator>=</operator> <name>hval</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
       	  
       <comment type="block">/* ensure T1 is still &lt; T2 */</comment>
       <if_stmt><if>if <condition>(<expr><name>t2val</name> <operator>&lt;=</operator> <name>t1val</name></expr>)</condition><block type="pseudo"><block_content>
	 <expr_stmt><expr><name>t1val</name> <operator>=</operator> <name>t2val</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

       <while>while <condition>(<expr><name>fuzz</name> <operator>&gt;</operator> <operator>(</operator><name>t1val</name><operator>/</operator><literal type="number">8</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	 <expr_stmt><expr><name>fuzz</name> <operator>=</operator> <name>fuzz</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></while>
	 
       <expr_stmt><expr><name>t1val</name> <operator>-=</operator> <name>fuzz</name></expr>;</expr_stmt>
       <expr_stmt><expr><name>t2val</name> <operator>-=</operator> <name>fuzz</name></expr>;</expr_stmt>
       
       <expr_stmt><expr><call><name>option_put</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>OPTION_T1</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>t1val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>option_put</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>OPTION_T2</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>t2val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <comment type="block">/* replies to DHCPINFORM may not have a valid context */</comment>
  <if_stmt><if>if <condition>(<expr><name>context</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_find2</name><argument_list>(<argument><expr><name>OPTION_NETMASK</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>option_put</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>OPTION_NETMASK</name></expr></argument>, <argument><expr><name>INADDRSZ</name></expr></argument>, <argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>netmask</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
      <comment type="block">/* May not have a "guessed" broadcast address if we got no packets via a relay
	 from this net yet (ie just unicast renewals after a restart */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>broadcast</name><operator>.</operator><name>s_addr</name></name> <operator>&amp;&amp;</operator>
	  <operator>!</operator><call><name>option_find2</name><argument_list>(<argument><expr><name>OPTION_BROADCAST</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>option_put</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>OPTION_BROADCAST</name></expr></argument>, <argument><expr><name>INADDRSZ</name></expr></argument>, <argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>broadcast</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <comment type="block">/* Same comments as broadcast apply, and also may not be able to get a sensible
	 default when using subnet select.  User must configure by steam in that case. */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>router</name><operator>.</operator><name>s_addr</name></name> <operator>&amp;&amp;</operator>
	  <call><name>in_list</name><argument_list>(<argument><expr><name>req_options</name></expr></argument>, <argument><expr><name>OPTION_ROUTER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	  <operator>!</operator><call><name>option_find2</name><argument_list>(<argument><expr><name>OPTION_ROUTER</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>option_put</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>OPTION_ROUTER</name></expr></argument>, <argument><expr><name>INADDRSZ</name></expr></argument>, <argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>router</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>port</name></name> <operator>==</operator> <name>NAMESERVER_PORT</name> <operator>&amp;&amp;</operator>
	  <call><name>in_list</name><argument_list>(<argument><expr><name>req_options</name></expr></argument>, <argument><expr><name>OPTION_DNSSERVER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	  <operator>!</operator><call><name>option_find2</name><argument_list>(<argument><expr><name>OPTION_DNSSERVER</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>option_put</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>OPTION_DNSSERVER</name></expr></argument>, <argument><expr><name>INADDRSZ</name></expr></argument>, <argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>local</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>domain</name> <operator>&amp;&amp;</operator> <call><name>in_list</name><argument_list>(<argument><expr><name>req_options</name></expr></argument>, <argument><expr><name>OPTION_DOMAINNAME</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> 
      <operator>!</operator><call><name>option_find2</name><argument_list>(<argument><expr><name>OPTION_DOMAINNAME</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>option_put_string</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>OPTION_DOMAINNAME</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>null_term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
 
  <comment type="block">/* Note that we ignore attempts to set the fqdn using --dhc-option=81,&lt;name&gt; */</comment>
  <if_stmt><if>if <condition>(<expr><name>hostname</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>in_list</name><argument_list>(<argument><expr><name>req_options</name></expr></argument>, <argument><expr><name>OPTION_HOSTNAME</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	  <operator>!</operator><call><name>option_find2</name><argument_list>(<argument><expr><name>OPTION_HOSTNAME</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>option_put_string</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>OPTION_HOSTNAME</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>null_term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>fqdn_flags</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name>fqdn_flags</name> <operator>&amp;</operator> <literal type="number">0x04</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
	  <if type="elseif">else if <condition>(<expr><name>null_term</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	  <if_stmt><if>if <condition>(<expr><name>domain</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>domain</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
	  <if type="elseif">else if <condition>(<expr><name>fqdn_flags</name> <operator>&amp;</operator> <literal type="number">0x04</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>free_space</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>OPTION_CLIENT_FQDN</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>fqdn_flags</name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt> <comment type="block">/* MBZ bits to zero */</comment> 
	      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
	      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

	      <if_stmt><if>if <condition>(<expr><name>fqdn_flags</name> <operator>&amp;</operator> <literal type="number">0x04</literal></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>do_rfc1035_name</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><name>domain</name></expr>)</condition>
		    <block>{<block_content>
		      <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>do_rfc1035_name</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		    </block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
	      <else>else
		<block>{<block_content>
		  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><name>domain</name></expr>)</condition>
		    <block>{<block_content>
		      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
		      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    </block_content>}</block></if></if_stmt>
		  <if_stmt><if>if <condition>(<expr><name>null_term</name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>      

  <for>for <control>(<init><expr><name>opt</name> <operator>=</operator> <name>config_opts</name></expr>;</init> <condition><expr><name>opt</name></expr>;</condition> <incr><expr><name>opt</name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>optno</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>opt</name></name></expr></init></decl>;</decl_stmt>

      <comment type="block">/* netids match and not encapsulated? */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DHOPT_TAGOK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if></if_stmt>
      
      <comment type="block">/* was it asked for, or are we sending it anyway? */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DHOPT_FORCE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>in_list</name><argument_list>(<argument><expr><name>req_options</name></expr></argument>, <argument><expr><name>optno</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if></if_stmt>
      
      <comment type="block">/* prohibit some used-internally options. T1 and T2 already handled. */</comment>
      <if_stmt><if>if <condition>(<expr><name>optno</name> <operator>==</operator> <name>OPTION_CLIENT_FQDN</name> <operator>||</operator>
	  <name>optno</name> <operator>==</operator> <name>OPTION_MAXMESSAGE</name> <operator>||</operator>
	  <name>optno</name> <operator>==</operator> <name>OPTION_OVERLOAD</name> <operator>||</operator>
	  <name>optno</name> <operator>==</operator> <name>OPTION_PAD</name> <operator>||</operator>
	  <name>optno</name> <operator>==</operator> <name>OPTION_END</name> <operator>||</operator>
	  <name>optno</name> <operator>==</operator> <name>OPTION_T1</name> <operator>||</operator>
	  <name>optno</name> <operator>==</operator> <name>OPTION_T2</name></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>optno</name> <operator>==</operator> <name>OPTION_SNAME</name> <operator>&amp;&amp;</operator> <name>done_server</name></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>optno</name> <operator>==</operator> <name>OPTION_FILENAME</name> <operator>&amp;&amp;</operator> <name>done_file</name></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if></if_stmt>
      
      <comment type="block">/* For the options we have default values on
	 dhc-option=&lt;optionno&gt; means "don't include this option"
	 not "include a zero-length option" */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> 
	  <operator>(</operator><name>optno</name> <operator>==</operator> <name>OPTION_NETMASK</name> <operator>||</operator>
	   <name>optno</name> <operator>==</operator> <name>OPTION_BROADCAST</name> <operator>||</operator>
	   <name>optno</name> <operator>==</operator> <name>OPTION_ROUTER</name> <operator>||</operator>
	   <name>optno</name> <operator>==</operator> <name>OPTION_DNSSERVER</name> <operator>||</operator> 
	   <name>optno</name> <operator>==</operator> <name>OPTION_DOMAINNAME</name> <operator>||</operator>
	   <name>optno</name> <operator>==</operator> <name>OPTION_HOSTNAME</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if></if_stmt>

      <comment type="block">/* vendor-class comes from elsewhere for PXE */</comment>
      <if_stmt><if>if <condition>(<expr><name>pxe_arch</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>optno</name> <operator>==</operator> <name>OPTION_VENDOR_ID</name></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if></if_stmt>
      
      <comment type="block">/* always force null-term for filename and servername - buggy PXE again. */</comment>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>do_opt</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, 
		   <argument><expr><ternary><condition><expr><operator>(</operator><name>optno</name> <operator>==</operator> <name>OPTION_SNAME</name> <operator>||</operator> <name>optno</name> <operator>==</operator> <name>OPTION_FILENAME</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>null_term</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>free_space</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>optno</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>do_opt</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, 
		 <argument><expr><ternary><condition><expr><operator>(</operator><name>optno</name> <operator>==</operator> <name>OPTION_SNAME</name> <operator>||</operator> <name>optno</name> <operator>==</operator> <name>OPTION_FILENAME</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>null_term</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
	  <comment type="block">/* If we send a vendor-id, revisit which vendor-ops we consider 
	     it appropriate to send. */</comment>
	  <if_stmt><if>if <condition>(<expr><name>optno</name> <operator>==</operator> <name>OPTION_VENDOR_ID</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>match_vendor_opts</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>config_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name>done_vendor_class</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>  
    </block_content>}</block></for>

  <comment type="block">/* Now send options to be encapsulated in arbitrary options, 
     eg dhcp-option=encap:172,17,.......
     Also handle vendor-identifying vendor-encapsulated options,
     dhcp-option = vi-encap:13,17,.......
     The may be more that one "outer" to do, so group
     all the options which match each outer in turn. */</comment>
  <for>for <control>(<init><expr><name>opt</name> <operator>=</operator> <name>config_opts</name></expr>;</init> <condition><expr><name>opt</name></expr>;</condition> <incr><expr><name>opt</name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DHOPT_ENCAP_DONE</name></expr>;</expr_stmt></block_content></block></for>
  
  <for>for <control>(<init><expr><name>opt</name> <operator>=</operator> <name>config_opts</name></expr>;</init> <condition><expr><name>opt</name></expr>;</condition> <incr><expr><name>opt</name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>=</operator> <operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>DHOPT_ENCAPSULATE</name> <operator>|</operator> <name>DHOPT_RFC3925</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_opt</name></name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>

	  <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DHOPT_ENCAP_DONE</name></expr>)</condition><block type="pseudo"><block_content>
	    <continue>continue;</continue></block_content></block></if></if_stmt>

	  <for>for <control>(<init><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>o</name> <operator>=</operator> <name>config_opts</name></expr>;</init> <condition><expr><name>o</name></expr>;</condition> <incr><expr><name>o</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name>int</name></type> <name>outer</name> <init>= <expr><ternary><condition><expr><name>flags</name> <operator>&amp;</operator> <name>DHOPT_ENCAPSULATE</name></expr> ?</condition><then> <expr><name><name>o</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>encap</name></name></expr> </then><else>: <expr><name>OPTION_VENDOR_IDENT_OPT</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

	      <expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DHOPT_ENCAP_MATCH</name></expr>;</expr_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>flags</name><operator>)</operator> <operator>||</operator> <name><name>opt</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>encap</name></name> <operator>!=</operator> <name><name>o</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>encap</name></name></expr>)</condition><block type="pseudo"><block_content>
		<continue>continue;</continue></block_content></block></if></if_stmt>
	      
	      <expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>DHOPT_ENCAP_DONE</name></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><call><name>match_netid</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>netid</name></name></expr></argument>, <argument><expr><name>tagif</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		  <operator>(</operator><operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DHOPT_FORCE</name><operator>)</operator> <operator>||</operator> <call><name>in_list</name><argument_list>(<argument><expr><name>req_options</name></expr></argument>, <argument><expr><name>outer</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>DHOPT_ENCAP_MATCH</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		  <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>do_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></for> 
	  
	  <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
	    <block>{<block_content> 
	      <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DHOPT_ENCAPSULATE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>do_encap_opts</name><argument_list>(<argument><expr><name>config_opts</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>encap</name></name></expr></argument>, <argument><expr><name>DHOPT_ENCAP_MATCH</name></expr></argument>, <argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>null_term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	      <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">250</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot send RFC3925 option: too many options for enterprise number %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>encap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	      <if type="elseif">else if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>free_space</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>,  <argument><expr><name>OPTION_VENDOR_IDENT_OPT</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		<block>{<block_content>
		  <decl_stmt><decl><type><name>int</name></type> <name>swap_ent</name> <init>= <expr><call><name>htonl</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>encap</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>swap_ent</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
		  <for>for <control>(<init><expr><name>o</name> <operator>=</operator> <name>config_opts</name></expr>;</init> <condition><expr><name>o</name></expr>;</condition> <incr><expr><name>o</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		    <if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DHOPT_ENCAP_MATCH</name></expr>)</condition>
		      <block>{<block_content>
			<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>do_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>opt</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
		      </block_content>}</block></if></if_stmt></block_content></block></for>     
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></for>      

  <expr_stmt><expr><name>force_encap</name> <operator>=</operator> <call><name>prune_vendor_opts</name><argument_list>(<argument><expr><name>tagif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>context</name> <operator>&amp;&amp;</operator> <name>pxe_arch</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>pxe_misc</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>uuid</name></expr></argument>, <argument><expr><name>pxevendor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pxe_uefi_workaround</name><argument_list>(<argument><expr><name>pxe_arch</name></expr></argument>, <argument><expr><name>tagif</name></expr></argument>, <argument><expr><name>mess</name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>local</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>config_opts</name> <operator>=</operator> <call><name>pxe_opts</name><argument_list>(<argument><expr><name>pxe_arch</name></expr></argument>, <argument><expr><name>tagif</name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>local</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>force_encap</name> <operator>||</operator> <call><name>in_list</name><argument_list>(<argument><expr><name>req_options</name></expr></argument>, <argument><expr><name>OPTION_VENDOR_CLASS_OPT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
      <call><name>do_encap_opts</name><argument_list>(<argument><expr><name>config_opts</name></expr></argument>, <argument><expr><name>OPTION_VENDOR_CLASS_OPT</name></expr></argument>, <argument><expr><name>DHOPT_VENDOR_MATCH</name></expr></argument>, <argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>null_term</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> 
      <name>pxe_arch</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>done_vendor_class</name> <operator>&amp;&amp;</operator> <name>vendor_class_len</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
      <operator>(</operator><name>p</name> <operator>=</operator> <call><name>free_space</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>OPTION_VENDOR_ID</name></expr></argument>, <argument><expr><name>vendor_class_len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <comment type="block">/* If we send vendor encapsulated options, and haven't already sent option 60,
       echo back the value we got from the client. */</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff3</name></name></expr></argument>, <argument><expr><name>vendor_class_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>	    
   
   <comment type="block">/* restore BOOTP anti-overload hack */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>req_options</name> <operator>||</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NO_OVERRIDE</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>file</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>f0</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>sname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>s0</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>apply_delay</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>xid</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>recvtime</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>netid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>delay_config</name></name> <modifier>*</modifier></type><name>delay_conf</name></decl>;</decl_stmt>
  
  <comment type="block">/* Decide which delay_config option we're using */</comment>
  <for>for <control>(<init><expr><name>delay_conf</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>delay_conf</name></name></expr>;</init> <condition><expr><name>delay_conf</name></expr>;</condition> <incr><expr><name>delay_conf</name> <operator>=</operator> <name><name>delay_conf</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><call><name>match_netid</name><argument_list>(<argument><expr><name><name>delay_conf</name><operator>-&gt;</operator><name>netid</name></name></expr></argument>, <argument><expr><name>netid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>delay_conf</name></expr>)</condition><block type="pseudo"><block_content>
    <comment type="block">/* No match, look for one without a netid */</comment>
    <for>for <control>(<init><expr><name>delay_conf</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>delay_conf</name></name></expr>;</init> <condition><expr><name>delay_conf</name></expr>;</condition> <incr><expr><name>delay_conf</name> <operator>=</operator> <name><name>delay_conf</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><call><name>match_netid</name><argument_list>(<argument><expr><name><name>delay_conf</name><operator>-&gt;</operator><name>netid</name></name></expr></argument>, <argument><expr><name>netid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <break>break;</break></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>delay_conf</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_QUIET_DHCP</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%u reply delay: %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name>xid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>delay_conf</name><operator>-&gt;</operator><name>delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>delay_dhcp</name><argument_list>(<argument><expr><name>recvtime</name></expr></argument>, <argument><expr><name><name>delay_conf</name><operator>-&gt;</operator><name>delay</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_DHCP */</comment>
</unit>
