<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/dnsmasq/forward.c"><comment type="block">/* dnsmasq is Copyright (c) 2000-2022 Simon Kelley

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 dated June, 1991, or
   (at your option) version 3 dated 29 June, 2007.
 
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
     
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnsmasq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../dnsmasq_interface.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>frec</name></name> <modifier>*</modifier></type><name>get_new_frec</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>serv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>frec</name></name> <modifier>*</modifier></type><name>lookup_frec</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>firstp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>lastp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>frec</name></name> <modifier>*</modifier></type><name>lookup_frec_by_query</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flagmask</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>frec</name></name> <modifier>*</modifier></type><name>lookup_frec_dnssec</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>class</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>short</name></type> <name>get_id</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_frec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>frec</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>query_full</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>domain</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>return_reply</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>frec</name></name> <modifier>*</modifier></type><name>forward</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Send a UDP packet with its source address set as "source" 
   unless nowild is true, when we just send it with the kernel default */</comment>
<function><type><name>int</name></type> <name>send_from</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nowild</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, 
	      <parameter><decl><type><name><name>union</name> <name>mysockaddr</name></name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>all_addr</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
	      <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>iface</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>msghdr</name></name></type> <name>msg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name><name>iov</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 
  <union>union <block>{
    <decl_stmt><decl><type><name><name>struct</name> <name>cmsghdr</name></name></type> <name>align</name></decl>;</decl_stmt> <comment type="block">/* this ensures alignment */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>char</name></type> <name><name>control</name><index>[<expr><call><name>CMSG_SPACE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_pktinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IP_SENDSRCADDR</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <decl_stmt><decl><type><name>char</name></type> <name><name>control</name><index>[<expr><call><name>CMSG_SPACE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>char</name></type> <name><name>control6</name><index>[<expr><call><name>CMSG_SPACE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in6_pktinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
  }</block> <decl><name>control_u</name></decl>;</union>
  
  <expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <name>packet</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_control</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_controllen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_name</name></name> <operator>=</operator> <name>to</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_namelen</name></name> <operator>=</operator> <call><name>sa_len</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_iov</name></name> <operator>=</operator> <name>iov</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_iovlen</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nowild</name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>cmsghdr</name></name> <modifier>*</modifier></type><name>cmptr</name></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_control</name></name> <operator>=</operator> <operator>&amp;</operator><name>control_u</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_controllen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>control_u</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <expr_stmt><expr><name>cmptr</name> <operator>=</operator> <call><name>CMSG_FIRSTHDR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>to</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition>
	<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:if>
	  <decl_stmt><decl><type><name><name>struct</name> <name>in_pktinfo</name></name></type> <name>p</name></decl>;</decl_stmt>
	  <expr_stmt><expr><name><name>p</name><operator>.</operator><name>ipi_ifindex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>p</name><operator>.</operator><name>ipi_spec_dst</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>addr4</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_controllen</name></name> <operator>=</operator> <call><name>CMSG_SPACE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_pktinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>CMSG_DATA</name><argument_list>(<argument><expr><name>cmptr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_len</name></name> <operator>=</operator> <call><name>CMSG_LEN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_pktinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_level</name></name> <operator>=</operator> <name>IPPROTO_IP</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_type</name></name> <operator>=</operator> <name>IP_PKTINFO</name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IP_SENDSRCADDR</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_controllen</name></name> <operator>=</operator> <call><name>CMSG_SPACE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>CMSG_DATA</name><argument_list>(<argument><expr><name>cmptr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>addr4</name></name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>addr4</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_len</name></name> <operator>=</operator> <call><name>CMSG_LEN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_level</name></name> <operator>=</operator> <name>IPPROTO_IP</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_type</name></name> <operator>=</operator> <name>IP_SENDSRCADDR</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <decl_stmt><decl><type><name><name>struct</name> <name>in6_pktinfo</name></name></type> <name>p</name></decl>;</decl_stmt>
	  <expr_stmt><expr><name><name>p</name><operator>.</operator><name>ipi6_ifindex</name></name> <operator>=</operator> <name>iface</name></expr>;</expr_stmt> <comment type="block">/* Need iface for IPv6 to handle link-local addrs */</comment>
	  <expr_stmt><expr><name><name>p</name><operator>.</operator><name>ipi6_addr</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>addr6</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_controllen</name></name> <operator>=</operator> <call><name>CMSG_SPACE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in6_pktinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>CMSG_DATA</name><argument_list>(<argument><expr><name>cmptr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_len</name></name> <operator>=</operator> <call><name>CMSG_LEN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in6_pktinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_type</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>v6pktinfo</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_level</name></name> <operator>=</operator> <name>IPPROTO_IPV6</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  
  <while>while <condition>(<expr><call><name>retry_send</name><argument_list>(<argument><expr><call><name>sendmsg</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>

  <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LINUX_NETWORK</name></cpp:ifdef>
      <comment type="block">/* If interface is still in DAD, EINVAL results - ignore that. */</comment>
      <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EINVAL</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to send packet: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
          
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONNTRACK</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>set_outgoing_mark</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>frec</name></name> <modifier>*</modifier></type><name>forward</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Copy connection mark of incoming query to outgoing connection. */</comment>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mark</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>get_incoming_mark</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>forward</name><operator>-&gt;</operator><name>frec_src</name><operator>.</operator><name>source</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>forward</name><operator>-&gt;</operator><name>frec_src</name><operator>.</operator><name>dest</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mark</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_MARK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mark</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">// Pi-hole modified</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>log_query_mysockaddr</name><parameter_list>(<parameter><type><name>flags</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_log_query_mysockaddr(flags, name, addr, arg, type, __LINE__)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_log_query_mysockaddr</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>mysockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_SERVER</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>_log_query</name><argument_list>(<argument><expr><name>flags</name> <operator>|</operator> <name>F_IPV4</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator>union <name>all_addr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_addr</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
  <else>else
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_SERVER</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>_log_query</name><argument_list>(<argument><expr><name>flags</name> <operator>|</operator> <name>F_IPV6</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator>union <name>all_addr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>server_send</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>server</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>,
			<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>plen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <while>while <condition>(<expr><call><name>retry_send</name><argument_list>(<argument><expr><call><name>sendto</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,
			   <argument><expr><operator>&amp;</operator><name><name>server</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa</name></name></expr></argument>,
			   <argument><expr><call><name>sa_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>domain_no_rebind</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>domain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>rebind_domain</name></name> <modifier>*</modifier></type><name>rbd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>tlen</name></decl>, <decl><type ref="prev"/><name>dlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dots</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Match whole labels only. Empty domain matches no dots (any single label) */</comment>
  <for>for <control>(<init><expr><name>rbd</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>no_rebind</name></name></expr>;</init> <condition><expr><name>rbd</name></expr>;</condition> <incr><expr><name>rbd</name> <operator>=</operator> <name><name>rbd</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>dlen</name> <operator>&gt;=</operator> <operator>(</operator><name>tlen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>rbd</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
	<call><name>hostname_isequal</name><argument_list>(<argument><expr><name><name>rbd</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>domain</name><index>[<expr><name>dlen</name> <operator>-</operator> <name>tlen</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	<operator>(</operator><name>dlen</name> <operator>==</operator> <name>tlen</name> <operator>||</operator> <name><name>domain</name><index>[<expr><name>dlen</name> <operator>-</operator> <name>tlen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>tlen</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>dots</name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>forward_query</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>udpfd</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>mysockaddr</name></name> <modifier>*</modifier></type><name>udpaddr</name></decl></parameter>,
			 <parameter><decl><type><name><name>union</name> <name>all_addr</name></name> <modifier>*</modifier></type><name>dst_addr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>dst_iface</name></decl></parameter>,
			 <parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>plen</name></decl></parameter>,  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>limit</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, 
			 <parameter><decl><type><name><name>struct</name> <name>frec</name></name> <modifier>*</modifier></type><name>forward</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ad_reqd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>do_bit</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fast_retry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>fwd_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>is_dnssec</name> <init>= <expr><name>forward</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>forward</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>FREC_DNSKEY_QUERY</name> <operator>|</operator> <name>FREC_DS_QUERY</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>master</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>hash</name> <init>= <expr><call><name>hash_questions</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>gotname</name> <init>= <expr><call><name>extract_request</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>oph</name> <init>= <expr><call><name>find_pseudoheader</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>old_src</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>old_reply</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>first</name></decl>, <decl><type ref="prev"/><name>last</name></decl>, <decl><type ref="prev"/><name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>cacheable</name></decl>, <decl><type ref="prev"/><name>forwarded</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>edns0_len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pheader</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ede</name> <init>= <expr><name>EDE_UNSET</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>do_bit</name></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>header</name><operator>-&gt;</operator><name>hb4</name></name> <operator>&amp;</operator> <name>HB4_CD</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>fwd_flags</name> <operator>|=</operator> <name>FREC_CHECKING_DISABLED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>ad_reqd</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>fwd_flags</name> <operator>|=</operator> <name>FREC_AD_QUESTION</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>oph</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>fwd_flags</name> <operator>|=</operator> <name>FREC_HAS_PHEADER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name>do_bit</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>fwd_flags</name> <operator>|=</operator> <name>FREC_DO_QUESTION</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
  <comment type="block">/* Check for retry on existing query.
     FREC_DNSKEY and FREC_DS_QUERY are never set in flags, so the test below 
     ensures that no frec created for internal DNSSEC query can be returned here.
     
     Similarly FREC_NO_CACHE is never set in flags, so a query which is
     contigent on a particular source address EDNS0 option will never be matched. */</comment>
  <if_stmt><if>if <condition>(<expr><name>forward</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>old_src</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>old_reply</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><name>forward</name> <operator>=</operator> <call><name>lookup_frec_by_query</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>fwd_flags</name></expr></argument>,
					   <argument><expr><name>FREC_CHECKING_DISABLED</name> <operator>|</operator> <name>FREC_AD_QUESTION</name> <operator>|</operator> <name>FREC_DO_QUESTION</name> <operator>|</operator>
					   <name>FREC_HAS_PHEADER</name> <operator>|</operator> <name>FREC_DNSKEY_QUERY</name> <operator>|</operator> <name>FREC_DS_QUERY</name> <operator>|</operator> <name>FREC_NO_CACHE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>frec_src</name></name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
      
      <for>for <control>(<init><expr><name>src</name> <operator>=</operator> <operator>&amp;</operator><name><name>forward</name><operator>-&gt;</operator><name>frec_src</name></name></expr>;</init> <condition><expr><name>src</name></expr>;</condition> <incr><expr><name>src</name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>orig_id</name></name> <operator>==</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> 
	    <call><name>sockaddr_isequal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>udpaddr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
      
      <if_stmt><if>if <condition>(<expr><name>src</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>old_src</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	  <comment type="block">/* If a query is retried, use the log_id for the retry when logging the answer. */</comment>
	  <expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>log_id</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>log_id</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <comment type="block">/* Existing query, but from new source, just add this 
	     client to the list that will get the reply.*/</comment>
	  
	  <comment type="block">/* Note whine_malloc() zeros memory. */</comment>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>daemon</name><operator>-&gt;</operator><name>free_frec_src</name></name> <operator>&amp;&amp;</operator>
	      <name><name>daemon</name><operator>-&gt;</operator><name>frec_src_count</name></name> <operator>&lt;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>ftabsize</name></name> <operator>&amp;&amp;</operator>
	      <operator>(</operator><name><name>daemon</name><operator>-&gt;</operator><name>free_frec_src</name></name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>frec_src</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>frec_src_count</name></name><operator>++</operator></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>free_frec_src</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	  
	  <comment type="block">/* If we've been spammed with many duplicates, return REFUSED. */</comment>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>daemon</name><operator>-&gt;</operator><name>free_frec_src</name></name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>query_full</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <comment type="block">/* This is tricky; if we're blasted with the same query
		 over and over, we'll end up taking this path each time
		 and never resetting until the frec gets deleted by
		 aging followed by the receipt of a different query. This
		 is a bit of a DoS vuln. Avoid by explicitly deleting the
		 frec once it expires. */</comment>
	      <if_stmt><if>if <condition>(<expr><call><name>difftime</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>forward</name><operator>-&gt;</operator><name>time</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>TIMEOUT</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free_frec</name><argument_list>(<argument><expr><name>forward</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      <goto>goto <name>reply</name>;</goto>
	    </block_content>}</block></if></if_stmt>
	  
	  <expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>free_frec_src</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>free_frec_src</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>forward</name><operator>-&gt;</operator><name>frec_src</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>frec_src</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>orig_id</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <operator>*</operator><name>udpaddr</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>dest</name></name> <operator>=</operator> <operator>*</operator><name>dst_addr</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>log_id</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>log_id</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>iface</name></name> <operator>=</operator> <name>dst_iface</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>udpfd</name></expr>;</expr_stmt>

	  <comment type="block">/* closely spaced identical queries cannot be a try and a retry, so
	     it's safe to wait for the reply from the first without
	     forwarding the second. */</comment>
	  <if_stmt><if>if <condition>(<expr><call><name>difftime</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>forward</name><operator>-&gt;</operator><name>time</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><call><name>FTL_query_in_progress</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>log_display_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <return>return <expr><literal type="number">0</literal></expr>;</return>
	  </block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

  <comment type="block">/* new query */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>forward</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* If the query is malformed, we can't forward it because
	 we can't get a reliable hash to recognise the answer. */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hash</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name>ede</name> <operator>=</operator> <name>EDE_INVALID_DATA</name></expr>;</expr_stmt>
	  <goto>goto <name>reply</name>;</goto>
	</block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><call><name>lookup_domain</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>gotname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>is_local_answer</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else
	<block>{<block_content>
	  <comment type="block">/* no available server. */</comment>
	  <expr_stmt><expr><name>ede</name> <operator>=</operator> <name>EDE_NOT_READY</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
       
      <comment type="block">/* don't forward A or AAAA queries for simple names, except the empty name */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>flags</name> <operator>&amp;&amp;</operator>
	  <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NODOTS_LOCAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	  <operator>(</operator><name>gotname</name> <operator>&amp;</operator> <operator>(</operator><name>F_IPV4</name> <operator>|</operator> <name>F_IPV6</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
	  <operator>!</operator><call><name>strchr</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	  <call><name>strlen</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><call><name>check_for_local_domain</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>F_NOERR</name></expr> </then><else>: <expr><name>F_NXDOMAIN</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <comment type="block">/* Configured answer. */</comment>
      <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>||</operator> <name>ede</name> <operator>==</operator> <name>EDE_NOT_READY</name></expr>)</condition><block type="pseudo"><block_content>
	<goto>goto <name>reply</name>;</goto></block_content></block></if></if_stmt>
      
      <expr_stmt><expr><name>master</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>first</name></expr>]</index></name></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>forward</name> <operator>=</operator> <call><name>get_new_frec</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>master</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<goto>goto <name>reply</name>;</goto></block_content></block></if></if_stmt>
      <comment type="block">/* table full - flags == 0, return REFUSED */</comment>
      
      <comment type="block">/* Keep copy of query if we're doing fast retry. */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>fast_retry_time</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>stash</name></name> <operator>=</operator> <call><name>blockdata_alloc</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>stash_len</name></name> <operator>=</operator> <name>plen</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
      
      <expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>frec_src</name><operator>.</operator><name>log_id</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>log_id</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>frec_src</name><operator>.</operator><name>source</name></name> <operator>=</operator> <operator>*</operator><name>udpaddr</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>frec_src</name><operator>.</operator><name>orig_id</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>frec_src</name><operator>.</operator><name>dest</name></name> <operator>=</operator> <operator>*</operator><name>dst_addr</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>frec_src</name><operator>.</operator><name>iface</name></name> <operator>=</operator> <name>dst_iface</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>frec_src</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>frec_src</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name>udpfd</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>new_id</name></name> <operator>=</operator> <call><name>get_id</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>forward</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>HASH_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>forwardall</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>fwd_flags</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>domain_no_rebind</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>FREC_NOREBIND</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>header</name><operator>-&gt;</operator><name>hb4</name></name> <operator>&amp;</operator> <name>HB4_CD</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>FREC_CHECKING_DISABLED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>ad_reqd</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>FREC_AD_QUESTION</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
      <expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>work_counter</name></name> <operator>=</operator> <name>DNSSEC_WORK</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>do_bit</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>FREC_DO_QUESTION</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      
      <expr_stmt><expr><name>start</name> <operator>=</operator> <name>first</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_ALL_SERVERS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>forwardall</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_ORDER</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name><name>master</name><operator>-&gt;</operator><name>forwardcount</name></name><operator>++</operator> <operator>&gt;</operator> <name>FORWARD_TEST</name> <operator>||</operator>
	      <call><name>difftime</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>master</name><operator>-&gt;</operator><name>forwardtime</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>FORWARD_TIME</name> <operator>||</operator>
	      <name><name>master</name><operator>-&gt;</operator><name>last_server</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>forwardtime</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>forwardcount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>forwardall</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	    </block_content>}</block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>master</name><operator>-&gt;</operator><name>last_server</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
  <else>else
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
      <comment type="block">/* If we've already got an answer to this query, but we're awaiting keys for validation,
	 there's no point retrying the query, retry the key query instead...... */</comment>
      <while>while <condition>(<expr><name><name>forward</name><operator>-&gt;</operator><name>blocking_query</name></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>forward</name> <operator>=</operator> <name><name>forward</name><operator>-&gt;</operator><name>blocking_query</name></name></expr>;</expr_stmt></block_content></block></while>

      <if_stmt><if>if <condition>(<expr><name><name>forward</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>FREC_DNSKEY_QUERY</name> <operator>|</operator> <name>FREC_DS_QUERY</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>int</name></type> <name>is_sign</name></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pheader</name></decl>;</decl_stmt>
	  
	  <comment type="block">/* log_id should match previous DNSSEC query. */</comment>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>log_display_id</name></name> <operator>=</operator> <name><name>forward</name><operator>-&gt;</operator><name>frec_src</name><operator>.</operator><name>log_id</name></name></expr>;</expr_stmt>
	  
	  <expr_stmt><expr><call><name>blockdata_retrieve</name><argument_list>(<argument><expr><name><name>forward</name><operator>-&gt;</operator><name>stash</name></name></expr></argument>, <argument><expr><name><name>forward</name><operator>-&gt;</operator><name>stash_len</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>plen</name> <operator>=</operator> <name><name>forward</name><operator>-&gt;</operator><name>stash_len</name></name></expr>;</expr_stmt>
	  <comment type="block">/* get query for logging. */</comment>
	  <expr_stmt><expr><call><name>extract_request</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><call><name>find_pseudoheader</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pheader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_sign</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_sign</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><name>SAFE_PKTSZ</name></expr></argument>, <argument><expr><name>pheader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	  <expr_stmt><expr><call><name>FTL_forwarding_retried</name><argument_list>(<argument><expr><name><name>forward</name><operator>-&gt;</operator><name>sentto</name></name></expr></argument>, <argument><expr><name><name>forward</name><operator>-&gt;</operator><name>frec_src</name><operator>.</operator><name>log_id</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>log_display_id</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
	  <comment type="block">/* Find suitable servers: should never fail. */</comment>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>filter_servers</name><argument_list>(<argument><expr><name><name>forward</name><operator>-&gt;</operator><name>sentto</name><operator>-&gt;</operator><name>arrayposn</name></name></expr></argument>, <argument><expr><name>F_DNSSECOK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	  
	  <expr_stmt><expr><name>is_dnssec</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>forwardall</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
      <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<block>{<block_content>
	  <comment type="block">/* retry on existing query, from original source. Send to all available servers  */</comment>
	  <if_stmt><if>if <condition>(<expr><name>udpfd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>fast_retry</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>sentto</name><operator>-&gt;</operator><name>failed_queries</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>sentto</name><operator>-&gt;</operator><name>retrys</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

	  <expr_stmt><expr><call><name>FTL_forwarding_retried</name><argument_list>(<argument><expr><name><name>forward</name><operator>-&gt;</operator><name>sentto</name></name></expr></argument>, <argument><expr><name><name>forward</name><operator>-&gt;</operator><name>frec_src</name><operator>.</operator><name>log_id</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>log_display_id</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>filter_servers</name><argument_list>(<argument><expr><name><name>forward</name><operator>-&gt;</operator><name>sentto</name><operator>-&gt;</operator><name>arrayposn</name></name></expr></argument>, <argument><expr><name>F_SERVER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <goto>goto <name>reply</name>;</goto></block_content></block></if></if_stmt>
	  
	  <expr_stmt><expr><name>master</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>first</name></expr>]</index></name></expr>;</expr_stmt>
	  
	  <comment type="block">/* Forward to all available servers on retry of query from same host. */</comment>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_ORDER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>old_src</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>fast_retry</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>forwardall</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
	  <else>else
	    <block>{<block_content>
	      <expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>forward</name><operator>-&gt;</operator><name>sentto</name><operator>-&gt;</operator><name>arrayposn</name></name></expr>;</expr_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_ORDER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>fast_retry</name></expr>)</condition>
		<block>{<block_content>
		  <comment type="block">/* In strict order mode, there must be a server later in the list
		     left to send to, otherwise without the forwardall mechanism,
		     code further on will cycle around the list forwever if they
		     all return REFUSED. If at the last, give up.
		     Note that we can get here EITHER because a client retried,
		     or an upstream server returned REFUSED. The above only
		     applied in the later case. For client retries,
		     keep trying the last server.. */</comment>
		  <if_stmt><if>if <condition>(<expr><operator>++</operator><name>start</name> <operator>==</operator> <name>last</name></expr>)</condition>
		    <block>{<block_content>
		      <if_stmt><if>if <condition>(<expr><name>old_reply</name></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>reply</name>;</goto></block_content></block></if>
		      <else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>start</name><operator>--</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
		    </block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></else></if_stmt>	  
	</block_content>}</block></else></if_stmt>
      
      <comment type="block">/* If we didn't get an answer advertising a maximal packet in EDNS,
	 fall back to 1280, which should work everywhere on IPv6.
	 If that generates an answer, it will become the new default
	 for this server */</comment>
      <expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>FREC_TEST_PKTSZ</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

  <comment type="block">/* We may be resending a DNSSEC query here, for which the below processing is not necessary. */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_dnssec</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>forward</name><operator>-&gt;</operator><name>new_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <expr_stmt><expr><name>plen</name> <operator>=</operator> <call><name>add_edns0_config</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>header</name><operator>)</operator> <operator>+</operator> <name>PACKETSZ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>forward</name><operator>-&gt;</operator><name>frec_src</name><operator>.</operator><name>source</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cacheable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cacheable</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>FREC_NO_CACHE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
      <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DNSSEC_VALID</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SERV_DO_DNSSEC</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>plen</name> <operator>=</operator> <call><name>add_do_bit</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>header</name><operator>)</operator> <operator>+</operator> <name>PACKETSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
	  <comment type="block">/* For debugging, set Checking Disabled, otherwise, have the upstream check too,
	     this allows it to select auth servers when one is returning bad data. */</comment>
	  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DNSSEC_DEBUG</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb4</name></name> <operator>|=</operator> <name>HB4_CD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      
      <if_stmt><if>if <condition>(<expr><call><name>find_pseudoheader</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>edns0_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pheader</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <comment type="block">/* If there wasn't a PH before, and there is now, we added it. */</comment>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>oph</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>FREC_ADDED_PHEADER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  
	  <comment type="block">/* If we're sending an EDNS0 with any options, we can't recreate the query from a reply. */</comment>
	  <if_stmt><if>if <condition>(<expr><name>edns0_len</name> <operator>&gt;</operator> <literal type="number">11</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>FREC_HAS_EXTRADATA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  
	  <comment type="block">/* Reduce udp size on retransmits. */</comment>
	  <if_stmt><if>if <condition>(<expr><name><name>forward</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FREC_TEST_PKTSZ</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><name>SAFE_PKTSZ</name></expr></argument>, <argument><expr><name>pheader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>forward</name><operator>-&gt;</operator><name>forwardall</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>start</name> <operator>=</operator> <name>first</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>forwarded</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  
  <comment type="block">/* check for send errors here (no route to host) 
     if we fail to send to all nameservers, send back an error
     packet straight away (helps modem users when offline)  */</comment>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content> 
      <decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>start</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>allocate_rfd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>forward</name><operator>-&gt;</operator><name>rfds</name></name></expr></argument>, <argument><expr><name>srv</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
	  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONNTRACK</name></cpp:ifdef>
	  <comment type="block">/* Copy connection mark of incoming query to outgoing connection. */</comment>
	  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CONNTRACK</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>set_outgoing_mark</name><argument_list>(<argument><expr><name>forward</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
	  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DNSSEC_VALID</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>forward</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FREC_ADDED_PHEADER</name><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <comment type="block">/* Difficult one here. If our client didn't send EDNS0, we will have set the UDP
		 packet size to 512. But that won't provide space for the RRSIGS in many cases.
		 The RRSIGS will be stripped out before the answer goes back, so the packet should
		 shrink again. So, if we added a do-bit, bump the udp packet size to the value
		 known to be OK for this server. We check returned size after stripping and set
		 the truncated bit if it's still too big. */</comment>		  
	      <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pheader</name></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name>int</name></type> <name>is_sign</name></decl>;</decl_stmt>
	      <if_stmt><if>if <condition>(<expr><call><name>find_pseudoheader</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pheader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_sign</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_sign</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>edns_pktsz</name></name></expr></argument>, <argument><expr><name>pheader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	  
	  <if_stmt><if>if <condition>(<expr><call><name>retry_send</name><argument_list>(<argument><expr><call><name>sendto</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
				<argument><expr><operator>&amp;</operator><name><name>srv</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa</name></name></expr></argument>,
				<argument><expr><call><name>sa_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>srv</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <continue>continue;</continue></block_content></block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DUMPFILE</name></cpp:ifdef>
	      <expr_stmt><expr><call><name>dump_packet_udp</name><argument_list>(<argument><expr><name>DUMP_UP_QUERY</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>srv</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	      
	      <comment type="block">/* Keep info in case we want to re-send this packet */</comment>
	      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>srv_save</name></name> <operator>=</operator> <name>srv</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>packet_len</name></name> <operator>=</operator> <name>plen</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>fd_save</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>forward</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>FREC_DNSKEY_QUERY</name> <operator>|</operator> <name>FREC_DS_QUERY</name><operator>)</operator><operator>)</operator></expr>)</condition>
		<block>{<block_content>
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>gotname</name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><literal type="string">"query"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  <expr_stmt><expr><call><name>log_query_mysockaddr</name><argument_list>(<argument><expr><name>F_SERVER</name> <operator>|</operator> <name>F_FORWARD</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>,
				       <argument><expr><operator>&amp;</operator><name><name>srv</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
	      <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>log_query_mysockaddr</name><argument_list>(<argument><expr><name>F_NOEXTRA</name> <operator>|</operator> <name>F_DNSSEC</name> <operator>|</operator> <name>F_SERVER</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>srv</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>,
				     <argument><expr><ternary><condition><expr><operator>(</operator><name><name>forward</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FREC_DNSKEY_QUERY</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"dnssec-retry[DNSKEY]"</literal></expr> </then><else>: <expr><literal type="string">"dnssec-retry[DS]"</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	      <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>queries</name></name><operator>++</operator></expr>;</expr_stmt>
	      <expr_stmt><expr><name>forwarded</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>sentto</name></name> <operator>=</operator> <name>srv</name></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>forward</name><operator>-&gt;</operator><name>forwardall</name></name></expr>)</condition><block type="pseudo"><block_content> 
		<break>break;</break></block_content></block></if></if_stmt>
	      <expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>forwardall</name></name><operator>++</operator></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>++</operator><name>start</name> <operator>==</operator> <name>last</name></expr>)</condition><block type="pseudo"><block_content>
	<break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></while>
  
  <if_stmt><if>if <condition>(<expr><name>forwarded</name> <operator>||</operator> <name>is_dnssec</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>forward_timestamp</name></name> <operator>=</operator> <call><name>dnsmasq_milliseconds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* could not send on, prepare to return */</comment> 
  <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>forward</name><operator>-&gt;</operator><name>frec_src</name><operator>.</operator><name>orig_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free_frec</name><argument_list>(<argument><expr><name>forward</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* cancel */</comment>
  <expr_stmt><expr><name>ede</name> <operator>=</operator> <name>EDE_NETERR</name></expr>;</expr_stmt>
  
 <label><name>reply</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>udpfd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>plen</name> <operator>=</operator> <call><name>make_local_answer</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>gotname</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>ede</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>oph</name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>u16</name></type> <name>swap</name> <init>= <expr><call><name>htons</name><argument_list>(<argument><expr><operator>(</operator><name>u16</name><operator>)</operator><name>ede</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	  <if_stmt><if>if <condition>(<expr><name>ede</name> <operator>!=</operator> <name>EDE_UNSET</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>plen</name> <operator>=</operator> <call><name>add_pseudoheader</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>limit</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>edns_pktsz</name></name></expr></argument>, <argument><expr><name>EDNS0_OPTION_EDE</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>swap</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>do_bit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><name>plen</name> <operator>=</operator> <call><name>add_pseudoheader</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>limit</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>edns_pktsz</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>do_bit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
      
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONNTRACK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UBUS</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CMARK_ALST_EN</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mark</name></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>int</name></type> <name>have_mark</name> <init>= <expr><call><name>get_incoming_mark</name><argument_list>(<argument><expr><name>udpaddr</name></expr></argument>, <argument><expr><name>dst_addr</name></expr></argument>, <comment type="block">/* istcp: */</comment> <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mark</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	  <if_stmt><if>if <condition>(<expr><name>have_mark</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>u32</name><operator>)</operator><name>mark</name> <operator>&amp;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>allowlist_mask</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>report_addresses</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      
      <expr_stmt><expr><call><name>send_from</name><argument_list>(<argument><expr><name>udpfd</name></expr></argument>, <argument><expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NOWILD</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CLEVERBIND</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>udpaddr</name></expr></argument>, <argument><expr><name>dst_addr</name></expr></argument>, <argument><expr><name>dst_iface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
	  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Check if any frecs need to do a retry, and action that if so. 
   Return time in milliseconds until he next retry will be required,
   or -1 if none. */</comment>
<function><type><name>int</name></type> <name>fast_retry</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>frec</name></name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>fast_retry_time</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>u32</name></type> <name>millis</name> <init>= <expr><call><name>dnsmasq_milliseconds</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      
      <for>for <control>(<init><expr><name>f</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>frec_list</name></name></expr>;</init> <condition><expr><name>f</name></expr>;</condition> <incr><expr><name>f</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>sentto</name></name> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>stash</name></name> <operator>&amp;&amp;</operator> <call><name>difftime</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>time</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>fast_retry_timeout</name></name></expr>)</condition>
	  <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
	    <if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>blocking_query</name></name></expr>)</condition><block type="pseudo"><block_content>
	      <continue>continue;</continue></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    <comment type="block">/* t is milliseconds since last query sent. */</comment> 
	    <decl_stmt><decl><type><name>int</name></type> <name>to_run</name></decl>, <decl><type ref="prev"/><name>t</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>millis</name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>forward_timestamp</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
	    
	    <if_stmt><if>if <condition>(<expr><name>t</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>forward_delay</name></name></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>to_run</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>forward_delay</name></name> <operator>-</operator> <name>t</name></expr>;</expr_stmt></block_content></block></if>
	    <else>else
	      <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>udpsz</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>udp_size</name> <init>=  <expr><name>PACKETSZ</name></expr></init></decl>;</decl_stmt> <comment type="block">/* default if no EDNS0 */</comment>
		<decl_stmt><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name> <init>= <expr><operator>(</operator>struct <name>dns_header</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></init></decl>;</decl_stmt>
		
		<comment type="block">/* packet buffer overwritten */</comment>
		<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>srv_save</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>blockdata_retrieve</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>stash</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>stash_len</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="block">/* UDP size already set in saved query. */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>find_pseudoheader</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>stash_len</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>udpsz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>udp_size</name></expr></argument>, <argument><expr><name>udpsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		
		<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>log_display_id</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>frec_src</name><operator>.</operator><name>log_id</name></name></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>forward_query</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>stash_len</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>header</name><operator>)</operator> <operator>+</operator> <name>udp_size</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>f</name></expr></argument>,
			      <argument><expr><name><name>f</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FREC_AD_QUESTION</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FREC_DO_QUESTION</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>to_run</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>forward_delay</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>f</name><operator>-&gt;</operator><name>forward_delay</name></name></expr>;</expr_stmt>
	      </block_content>}</block></else></if_stmt>

	    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>ret</name> <operator>&gt;</operator> <name>to_run</name></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>to_run</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  </block_content>}</block></if></if_stmt></block_content></block></for>
      
    </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>ipsets</name></name> <modifier>*</modifier></type><name>domain_find_sets</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ipsets</name></name> <modifier>*</modifier></type><name>setlist</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>domain</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="block">/* Similar algorithm to search_servers. */</comment>
  <decl_stmt><decl><type><name><name>struct</name> <name>ipsets</name></name> <modifier>*</modifier></type><name>ipset_pos</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>namelen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>matchlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>ipset_pos</name> <operator>=</operator> <name>setlist</name></expr>;</init> <condition><expr><name>ipset_pos</name></expr>;</condition> <incr><expr><name>ipset_pos</name> <operator>=</operator> <name><name>ipset_pos</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> 
    <block>{<block_content>
      <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>domainlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ipset_pos</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>matchstart</name> <init>= <expr><name>domain</name> <operator>+</operator> <name>namelen</name> <operator>-</operator> <name>domainlen</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>namelen</name> <operator>&gt;=</operator> <name>domainlen</name> <operator>&amp;&amp;</operator> <call><name>hostname_isequal</name><argument_list>(<argument><expr><name>matchstart</name></expr></argument>, <argument><expr><name><name>ipset_pos</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
          <operator>(</operator><name>domainlen</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>namelen</name> <operator>==</operator> <name>domainlen</name> <operator>||</operator> <operator>*</operator><operator>(</operator><name>matchstart</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'.'</literal> <operator>)</operator> <operator>&amp;&amp;</operator>
          <name>domainlen</name> <operator>&gt;=</operator> <name>matchlen</name></expr>)</condition> 
        <block>{<block_content>
          <expr_stmt><expr><name>matchlen</name> <operator>=</operator> <name>domainlen</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ipset_pos</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>process_reply</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>server</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>check_rebind</name></decl></parameter>, 
			    <parameter><decl><type><name>int</name></type> <name>no_cache</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cache_secure</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bogusanswer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ad_reqd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>do_bit</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>added_pheader</name></decl></parameter>, 
			    <parameter><decl><type><name><name>union</name> <name>mysockaddr</name></name> <modifier>*</modifier></type><name>query_source</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>limit</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ede</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pheader</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sizep</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>ipsets</name></name> <modifier>*</modifier></type><name>ipsets</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nftsets</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>munged</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>is_sign</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>rcode</name> <init>= <expr><call><name>RCODE</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>plen</name></decl>;</decl_stmt> 
  <comment type="block" format="doxygen">/******** Pi-hole modification ********/</comment>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pheader_copy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <comment type="block" format="doxygen">/**************************************/</comment>
    
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ad_reqd</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>do_bit</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>bogusanswer</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_IPSET</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>ipsets</name></name> <operator>&amp;&amp;</operator> <call><name>extract_request</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>ipsets</name> <operator>=</operator> <call><name>domain_find_sets</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>ipsets</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_NFTSET</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>nftsets</name></name> <operator>&amp;&amp;</operator> <call><name>extract_request</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>nftsets</name> <operator>=</operator> <call><name>domain_find_sets</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>nftsets</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pheader</name> <operator>=</operator> <call><name>find_pseudoheader</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>plen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sizep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_sign</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Get extended RCODE. */</comment>
      <expr_stmt><expr><name>rcode</name> <operator>|=</operator> <name><name>sizep</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CLIENT_SUBNET</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>check_source</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>pheader</name></expr></argument>, <argument><expr><name>query_source</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"discarding DNS reply: subnet option mismatch"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_sign</name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name>added_pheader</name></expr>)</condition>
	    <block>{<block_content>
	      <comment type="block">/* client didn't send EDNS0, we added one, strip it off before returning answer. */</comment>
	      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>rrfilter</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>RRFILTER_EDNS0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name>pheader</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	    </block_content>}</block></if>
	  <else>else
	    <block>{<block_content>
	      <comment type="block">/* If upstream is advertising a larger UDP packet size
		 than we allow, trim it so that we don't get overlarge
		 requests for the client. We can't do this for signed packets. */</comment>
	      <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>udpsz</name></decl>;</decl_stmt>
	      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>udpsz</name></expr></argument>, <argument><expr><name>sizep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><name>udpsz</name> <operator>&gt;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>edns_pktsz</name></name></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name>sizep</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>edns_pktsz</name></name></expr></argument>, <argument><expr><name>sizep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
	      <comment type="block">/* If the client didn't set the do bit, but we did, reset it. */</comment>
	      <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DNSSEC_VALID</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>do_bit</name></expr>)</condition>
		<block>{<block_content>
		  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>flags</name></decl>;</decl_stmt>
		  <expr_stmt><expr><name>sizep</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <comment type="block">/* skip RCODE */</comment>
		  <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>sizep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">0x8000</literal></expr>;</expr_stmt>
		  <expr_stmt><expr><name>sizep</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>sizep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    </block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><call><name>FTL_header_analysis</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>hb4</name></name></expr></argument>, <argument><expr><name>rcode</name></expr></argument>, <argument><expr><name>server</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>log_display_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* RFC 4035 sect 4.6 para 3 */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_sign</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DNSSEC_PROXY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
     <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb4</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HB4_AD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb4</name></name> <operator>|=</operator> <name>HB4_RA</name></expr>;</expr_stmt> <comment type="block">/* recursion if available */</comment>

  <if_stmt><if>if <condition>(<expr><call><name>OPCODE</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>QUERY</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>resize_packet</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>pheader</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>rcode</name> <operator>!=</operator> <name>NOERROR</name> <operator>&amp;&amp;</operator> <name>rcode</name> <operator>!=</operator> <name>NXDOMAIN</name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>union</name> <name>all_addr</name></name></type> <name>a</name></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>a</name><operator>.</operator><name>log</name><operator>.</operator><name>rcode</name></name> <operator>=</operator> <name>rcode</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>a</name><operator>.</operator><name>log</name><operator>.</operator><name>ede</name></name> <operator>=</operator> <name>ede</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>F_UPSTREAM</name> <operator>|</operator> <name>F_RCODE</name></expr></argument>, <argument><expr><literal type="string">"error"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <return>return <expr><call><name>resize_packet</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>pheader</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Complain loudly if the upstream server is non-recursive. */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>header</name><operator>-&gt;</operator><name>hb4</name></name> <operator>&amp;</operator> <name>HB4_RA</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>rcode</name> <operator>==</operator> <name>NOERROR</name> <operator>&amp;&amp;</operator>
      <name>server</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>server</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SERV_WARNED_RECURSIVE</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>prettyprint_addr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"nameserver %s refused to do a recursive query"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOG</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SERV_WARNED_RECURSIVE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>  

  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>bogus_addr</name></name> <operator>&amp;&amp;</operator> <name>rcode</name> <operator>!=</operator> <name>NXDOMAIN</name> <operator>&amp;&amp;</operator>
      <call><name>check_for_bogus_wildcard</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>munged</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SET_RCODE</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>NXDOMAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb3</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HB3_AA</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>cache_secure</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>ede</name> <operator>=</operator> <name>EDE_BLOCKED</name></expr>;</expr_stmt>
    </block_content>}</block></if>
  <else>else 
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>doctored</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>rcode</name> <operator>==</operator> <name>NXDOMAIN</name> <operator>&amp;&amp;</operator> 
	  <call><name>extract_request</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><call><name>check_for_local_domain</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call> <operator>||</operator>
	      <call><name>lookup_domain</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>F_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <comment type="block">/* if we forwarded a query for a locally known name (because it was for 
		 an unknown type) and the answer is NXDOMAIN, convert that to NODATA,
		 since we know that the domain exists, even if upstream doesn't */</comment>
	      <expr_stmt><expr><name>munged</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb3</name></name> <operator>|=</operator> <name>HB3_AA</name></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>SET_RCODE</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>NOERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name>cache_secure</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

      <comment type="block">/* Before extract_addresses() */</comment>
      <if_stmt><if>if <condition>(<expr><name>rcode</name> <operator>==</operator> <name>NOERROR</name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_FILTER_A</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>rrfilter</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>RRFILTER_A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_FILTER_AAAA</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>rrfilter</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>RRFILTER_AAAA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

      <comment type="block" format="doxygen">/******************************** Pi-hole modification ********************************/</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>extract_addresses</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>ipsets</name></expr></argument>, <argument><expr><name>nftsets</name></expr></argument>, <argument><expr><name>is_sign</name></expr></argument>, <argument><expr><name>check_rebind</name></expr></argument>, <argument><expr><name>no_cache</name></expr></argument>, <argument><expr><name>cache_secure</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>doctored</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>cache_secure</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	  <comment type="line">// Make a private copy of the pheader to ensure</comment>
	  <comment type="line">// we are not accidentially rewriting what is in</comment>
	  <comment type="line">// the pheader when we're creating a crafted reply</comment>
	  <comment type="line">// further below (when a query is to be blocked)</comment>
	  <if_stmt><if>if <condition>(<expr><name>pheader</name></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name>pheader_copy</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pheader_copy</name></expr></argument>, <argument><expr><name>pheader</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt>

	  <comment type="line">// Generate DNS packet for reply, a possibly existing pseudo header</comment>
	  <comment type="line">// will be restored later inside resize_packet()</comment>
	  <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>FTL_make_answer</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>header</name><operator>)</operator> <operator>+</operator> <literal type="number">65536</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ede</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
      <if type="elseif">else if<condition>(<expr><name>ret</name></expr>)</condition>
      <comment type="block" format="doxygen">/**************************************************************************************/</comment>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"possible DNS-rebind attack detected: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>munged</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name>cache_secure</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name>ede</name> <operator>=</operator> <name>EDE_BLOCKED</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>doctored</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>cache_secure</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name>bogusanswer</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>header</name><operator>-&gt;</operator><name>hb4</name></name> <operator>&amp;</operator> <name>HB4_CD</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DNSSEC_DEBUG</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Bogus reply, turn into SERVFAIL */</comment>
      <expr_stmt><expr><call><name>SET_RCODE</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>SERVFAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>munged</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DNSSEC_VALID</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb4</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HB4_AD</name></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>header</name><operator>-&gt;</operator><name>hb4</name></name> <operator>&amp;</operator> <name>HB4_CD</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>ad_reqd</name> <operator>&amp;&amp;</operator> <name>cache_secure</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb4</name></name> <operator>|=</operator> <name>HB4_AD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <comment type="block">/* If the requestor didn't set the DO bit, don't return DNSSEC info. */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>do_bit</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>rrfilter</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>RRFILTER_DNSSEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* do this after extract_addresses. Ensure NODATA reply and remove
     nameserver info. */</comment>
  <if_stmt><if>if <condition>(<expr><name>munged</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>ancount</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>nscount</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>arcount</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb3</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HB3_TC</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* the bogus-nxdomain stuff, doctor and NXDOMAIN-&gt;NODATA munging can all elide
     sections of the packet. Find the new length here and put back pseudoheader
     if it was removed. */</comment>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>resize_packet</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><ternary><condition><expr><name>pheader_copy</name></expr> ?</condition><then> <expr><name>pheader_copy</name></expr> </then><else>: <expr><name>pheader</name></expr></else></ternary></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block" format="doxygen">/******** Pi-hole modification ********/</comment>
  <comment type="line">// The line above was modified to use</comment>
  <comment type="line">// pheader_copy instead of pheader</comment>
  <if_stmt><if>if<condition>(<expr><name>pheader_copy</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pheader_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <comment type="block" format="doxygen">/**************************************/</comment>

  <if_stmt><if>if <condition>(<expr><name>pheader</name> <operator>&amp;&amp;</operator> <name>ede</name> <operator>!=</operator> <name>EDE_UNSET</name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>u16</name></type> <name>swap</name> <init>= <expr><call><name>htons</name><argument_list>(<argument><expr><operator>(</operator><name>u16</name><operator>)</operator><name>ede</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>add_pseudoheader</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>edns_pktsz</name></name></expr></argument>, <argument><expr><name>EDNS0_OPTION_EDE</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>swap</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>do_bit</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>RCODE</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NXDOMAIN</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>nxdomain_replies</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>dnssec_validate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>frec</name></name> <modifier>*</modifier></type><name>forward</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>,
			    <parameter><decl><type><name>ssize_t</name></type> <name>plen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>log_display_id</name></name> <operator>=</operator> <name><name>forward</name><operator>-&gt;</operator><name>frec_src</name><operator>.</operator><name>log_id</name></name></expr>;</expr_stmt>
  
  <comment type="block">/* We've had a reply already, which we're validating. Ignore this duplicate */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>forward</name><operator>-&gt;</operator><name>blocking_query</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>
  
  <comment type="block">/* Truncated answer can't be validated.
     If this is an answer to a DNSSEC-generated query, we still
     need to get the client to retry over TCP, so return
     an answer with the TC bit set, even if the actual answer fits.
  */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>header</name><operator>-&gt;</operator><name>hb3</name></name> <operator>&amp;</operator> <name>HB3_TC</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>STAT_TRUNCATED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="block">/* If all replies to a query are REFUSED, give up. */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>RCODE</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REFUSED</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>STAT_ABANDONED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <comment type="block">/* As soon as anything returns BOGUS, we stop and unwind, to do otherwise
     would invite infinite loops, since the answers to DNSKEY and DS queries
     will not be cached, so they'll be repeated. */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STAT_ISEQUAL</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>STAT_BOGUS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>STAT_ISEQUAL</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>STAT_TRUNCATED</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>STAT_ISEQUAL</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>STAT_ABANDONED</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>forward</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FREC_DNSKEY_QUERY</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>dnssec_validate_by_ds</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>keyname</name></name></expr></argument>, <argument><expr><name><name>forward</name><operator>-&gt;</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name><name>forward</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FREC_DS_QUERY</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>dnssec_validate_ds</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>keyname</name></name></expr></argument>, <argument><expr><name><name>forward</name><operator>-&gt;</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>dnssec_validate_reply</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>keyname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>forward</name><operator>-&gt;</operator><name>class</name></name></expr></argument>, 
				       <argument><expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DNSSEC_IGN_NS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>forward</name><operator>-&gt;</operator><name>sentto</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SERV_DO_DNSSEC</name><operator>)</operator></expr></argument>,
				       <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DUMPFILE</name></cpp:ifdef>
      <if_stmt><if>if <condition>(<expr><call><name>STAT_ISEQUAL</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>STAT_BOGUS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>dump_packet_udp</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>forward</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>FREC_DNSKEY_QUERY</name> <operator>|</operator> <name>FREC_DS_QUERY</name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><name>DUMP_SEC_BOGUS</name></expr> </then><else>: <expr><name>DUMP_BOGUS</name></expr></else></ternary></expr></argument>,
			<argument><expr><name>header</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>plen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>forward</name><operator>-&gt;</operator><name>sentto</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><name><name>daemon</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Can't validate, as we're missing key data. Put this
     answer aside, whilst we get that. */</comment>     
  <if_stmt><if>if <condition>(<expr><call><name>STAT_ISEQUAL</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>STAT_NEED_DS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>STAT_ISEQUAL</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>STAT_NEED_KEY</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>frec</name></name> <modifier>*</modifier></type><name>new</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>struct</name> <name>blockdata</name></name> <modifier>*</modifier></type><name>stash</name></decl>;</decl_stmt>
      
      <comment type="block">/* Now save reply pending receipt of key data */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>stash</name> <operator>=</operator> <call><name>blockdata_alloc</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <comment type="block">/* validate routines leave name of required record in daemon-&gt;keyname */</comment>
	  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name> <init>= <expr><ternary><condition><expr><call><name>STAT_ISEQUAL</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>STAT_NEED_KEY</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>FREC_DNSKEY_QUERY</name></expr> </then><else>: <expr><name>FREC_DS_QUERY</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>new</name> <operator>=</operator> <call><name>lookup_frec_dnssec</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>keyname</name></name></expr></argument>, <argument><expr><name><name>forward</name><operator>-&gt;</operator><name>class</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <comment type="block">/* This is tricky; it detects loops in the dependency
		 graph for DNSSEC validation, say validating A requires DS B
		 and validating DS B requires DNSKEY C and validating DNSKEY C requires DS B.
		 This should never happen in correctly signed records, but it's
		 likely the case that sufficiently broken ones can cause our validation
		 code requests to exhibit cycles. The result is that the -&gt;blocking_query list
		 can form a cycle, and under certain circumstances that can lock us in 
		 an infinite loop. Here we transform the situation into ABANDONED. */</comment>
	      <decl_stmt><decl><type><name><name>struct</name> <name>frec</name></name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
	      <for>for <control>(<init><expr><name>f</name> <operator>=</operator> <name>new</name></expr>;</init> <condition><expr><name>f</name></expr>;</condition> <incr><expr><name>f</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>blocking_query</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>forward</name></expr>)</condition><block type="pseudo"><block_content>
		  <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

	      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>next_dependent</name></name> <operator>=</operator> <name><name>new</name><operator>-&gt;</operator><name>dependent</name></name></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>dependent</name></name> <operator>=</operator> <name>forward</name></expr>;</expr_stmt>
		  <comment type="block">/* Make consistent, only replace query copy with unvalidated answer
		     when we set -&gt;blocking_query. */</comment>
		  <if_stmt><if>if <condition>(<expr><name><name>forward</name><operator>-&gt;</operator><name>stash</name></name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><call><name>blockdata_free</name><argument_list>(<argument><expr><name><name>forward</name><operator>-&gt;</operator><name>stash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  <expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>blocking_query</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>stash_len</name></name> <operator>=</operator> <name>plen</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>stash</name></name> <operator>=</operator> <name>stash</name></expr>;</expr_stmt>
		  <return>return;</return>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></if>
	  <else>else
	    <block>{<block_content>
	      <decl_stmt><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>server</name></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name><name>struct</name> <name>frec</name></name> <modifier>*</modifier></type><name>orig</name></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>hash</name></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name>size_t</name></type> <name>nn</name></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name>int</name></type> <name>serverind</name></decl>, <decl><type ref="prev"/><name>fd</name></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name><name>struct</name> <name>randfd_list</name></name> <modifier>*</modifier></type><name>rfds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	      
	      <comment type="block">/* Find the original query that started it all.... */</comment>
	      <for>for <control>(<init><expr><name>orig</name> <operator>=</operator> <name>forward</name></expr>;</init> <condition><expr><name><name>orig</name><operator>-&gt;</operator><name>dependent</name></name></expr>;</condition> <incr><expr><name>orig</name> <operator>=</operator> <name><name>orig</name><operator>-&gt;</operator><name>dependent</name></name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
	      
	      <comment type="block">/* Make sure we don't expire and free the orig frec during the
		 allocation of a new one: third arg of get_new_frec() does that. */</comment>
	      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>serverind</name> <operator>=</operator> <call><name>dnssec_server</name><argument_list>(<argument><expr><name><name>forward</name><operator>-&gt;</operator><name>sentto</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>keyname</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
		  <operator>(</operator><name>server</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>serverind</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator>
		  <operator>(</operator><name>nn</name> <operator>=</operator> <call><name>dnssec_generate_query</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>header</name><operator>)</operator> <operator>+</operator> <name><name>server</name><operator>-&gt;</operator><name>edns_pktsz</name></name></expr></argument>,
					      <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>keyname</name></name></expr></argument>, <argument><expr><name><name>forward</name><operator>-&gt;</operator><name>class</name></name></expr></argument>,
					      <argument><expr><ternary><condition><expr><call><name>STAT_ISEQUAL</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>STAT_NEED_KEY</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>T_DNSKEY</name></expr> </then><else>: <expr><name>T_DS</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>server</name><operator>-&gt;</operator><name>edns_pktsz</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> 
		  <operator>(</operator><name>hash</name> <operator>=</operator> <call><name>hash_questions</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>nn</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
		  <operator>--</operator><name><name>orig</name><operator>-&gt;</operator><name>work_counter</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
		  <operator>(</operator><name>fd</name> <operator>=</operator> <call><name>allocate_rfd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
		  <operator>(</operator><name>new</name> <operator>=</operator> <call><name>get_new_frec</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>server</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		<block>{<block_content>
		  <decl_stmt><decl><type><name><name>struct</name> <name>frec</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
		  
		  <expr_stmt><expr><operator>*</operator><name>new</name> <operator>=</operator> <operator>*</operator><name>forward</name></expr>;</expr_stmt> <comment type="block">/* copy everything, then overwrite */</comment>
		  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>blocking_query</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		  
		  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>frec_src</name><operator>.</operator><name>log_id</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>log_display_id</name></name> <operator>=</operator> <operator>++</operator><name><name>daemon</name><operator>-&gt;</operator><name>log_id</name></name></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>sentto</name></name> <operator>=</operator> <name>server</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>rfds</name></name> <operator>=</operator> <name>rfds</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>frec_src</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>FREC_DNSKEY_QUERY</name> <operator>|</operator> <name>FREC_DS_QUERY</name> <operator>|</operator> <name>FREC_HAS_EXTRADATA</name><operator>)</operator></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>flags</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>forwardall</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		  
		  <expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>next_dependent</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>dependent</name></name> <operator>=</operator> <name>forward</name></expr>;</expr_stmt> <comment type="block">/* to find query awaiting new one. */</comment>
		  
		  <comment type="block">/* Make consistent, only replace query copy with unvalidated answer
		     when we set -&gt;blocking_query. */</comment>
		  <expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>blocking_query</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt> 
		  <if_stmt><if>if <condition>(<expr><name><name>forward</name><operator>-&gt;</operator><name>stash</name></name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><call><name>blockdata_free</name><argument_list>(<argument><expr><name><name>forward</name><operator>-&gt;</operator><name>stash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  <expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>stash_len</name></name> <operator>=</operator> <name>plen</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>stash</name></name> <operator>=</operator> <name>stash</name></expr>;</expr_stmt>
		  
		  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>HASH_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>new_id</name></name> <operator>=</operator> <call><name>get_id</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>new_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <comment type="block">/* Save query for retransmission and de-dup */</comment>
		  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>stash</name></name> <operator>=</operator> <call><name>blockdata_alloc</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>header</name></expr></argument>, <argument><expr><name>nn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>stash_len</name></name> <operator>=</operator> <name>nn</name></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>fast_retry_time</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>forward_timestamp</name></name> <operator>=</operator> <call><name>dnsmasq_milliseconds</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  
		  <comment type="block">/* Don't resend this. */</comment>
		  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>srv_save</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONNTRACK</name></cpp:ifdef>
		  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CONNTRACK</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><call><name>set_outgoing_mark</name><argument_list>(<argument><expr><name>orig</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		  
		  <expr_stmt><expr><call><name>server_send</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>nn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>queries</name></name><operator>++</operator></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DUMPFILE</name></cpp:ifdef>
		  <expr_stmt><expr><call><name>dump_packet_udp</name><argument_list>(<argument><expr><name>DUMP_SEC_QUERY</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>header</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>nn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>server</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		  <expr_stmt><expr><call><name>log_query_mysockaddr</name><argument_list>(<argument><expr><name>F_NOEXTRA</name> <operator>|</operator> <name>F_DNSSEC</name> <operator>|</operator> <name>F_SERVER</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>keyname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>server</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>,
				       <argument><expr><ternary><condition><expr><call><name>STAT_ISEQUAL</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>STAT_NEED_KEY</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"dnssec-query[DNSKEY]"</literal></expr> </then><else>: <expr><literal type="string">"dnssec-query[DS]"</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <return>return;</return>
		</block_content>}</block></if></if_stmt>
	      
	      <expr_stmt><expr><call><name>free_rfds</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* error unwind */</comment>
	    </block_content>}</block></else></if_stmt>
	  
	  <expr_stmt><expr><call><name>blockdata_free</name><argument_list>(<argument><expr><name>stash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* don't leak this on failure. */</comment>
	</block_content>}</block></if></if_stmt>

      <comment type="block">/* sending DNSSEC query failed or loop detected. */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>STAT_ABANDONED</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <comment type="block">/* Validated original answer, all done. */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>forward</name><operator>-&gt;</operator><name>dependent</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>return_reply</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>forward</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else
    <block>{<block_content>
      <comment type="block">/* validated subsidiary query/queries, (and cached result)
	 pop that and return to the previous query/queries we were working on. */</comment>
      <decl_stmt><decl><type><name><name>struct</name> <name>frec</name></name> <modifier>*</modifier></type><name>prev</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nxt</name> <init>= <expr><name><name>forward</name><operator>-&gt;</operator><name>dependent</name></name></expr></init></decl>;</decl_stmt>
      
      <expr_stmt><expr><call><name>free_frec</name><argument_list>(<argument><expr><name>forward</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <while>while <condition>(<expr><operator>(</operator><name>prev</name> <operator>=</operator> <name>nxt</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <comment type="block">/* -&gt;next_dependent will have changed after return from recursive call below. */</comment>
	  <expr_stmt><expr><name>nxt</name> <operator>=</operator> <name><name>prev</name><operator>-&gt;</operator><name>next_dependent</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>blocking_query</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> <comment type="block">/* already gone */</comment>
	  <expr_stmt><expr><call><name>blockdata_retrieve</name><argument_list>(<argument><expr><name><name>prev</name><operator>-&gt;</operator><name>stash</name></name></expr></argument>, <argument><expr><name><name>prev</name><operator>-&gt;</operator><name>stash_len</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>dnssec_validate</name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name><name>prev</name><operator>-&gt;</operator><name>stash_len</name></name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* sets new last_server */</comment>
<function><type><name>void</name></type> <name>reply_query</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* packet from peer server, extract data for cache, and send to
     original requester */</comment>
  <decl_stmt><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>union</name> <name>mysockaddr</name></name></type> <name>serveraddr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>frec</name></name> <modifier>*</modifier></type><name>forward</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>socklen_t</name></type> <name>addrlen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>serveraddr</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name> <init>= <expr><call><name>recvfrom</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>packet_buff_sz</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>serveraddr</name><operator>.</operator><name>sa</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addrlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>server</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>hash</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>first</name></decl>, <decl><type ref="prev"/><name>last</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
    
  <comment type="block">/* packet buffer overwritten */</comment>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>srv_save</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <comment type="block">/* Determine the address of the server replying  so that we can mark that as good */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>serveraddr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>serveraddr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_flowinfo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><name>header</name> <operator>=</operator> <operator>(</operator>struct <name>dns_header</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dns_header</name></expr></argument>)</argument_list></sizeof> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>header</name><operator>-&gt;</operator><name>hb3</name></name> <operator>&amp;</operator> <name>HB3_QR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>hash_questions</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>forward</name> <operator>=</operator> <call><name>lookup_frec</name><argument_list>(<argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>
  
  <comment type="block">/* spoof check: answer must come from known server, also
     we may have sent the same query to multiple servers from
     the same local socket, and would like to know which one has answered. */</comment>
  <for>for <control>(<init><expr><name>c</name> <operator>=</operator> <name>first</name></expr>;</init> <condition><expr><name>c</name> <operator>!=</operator> <name>last</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><call><name>sockaddr_isequal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>c</name></expr>]</index></name><operator>-&gt;</operator><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>serveraddr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
  
  <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>last</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>server</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>RCODE</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REFUSED</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>first</name></expr>]</index></name><operator>-&gt;</operator><name>last_server</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>first</name></expr>]</index></name><operator>-&gt;</operator><name>last_server</name> <operator>==</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>first</name></expr>]</index></name><operator>-&gt;</operator><name>last_server</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="block">/* If sufficient time has elapsed, try and expand UDP buffer size again. */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>difftime</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>server</name><operator>-&gt;</operator><name>pktsz_reduced</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>UDP_TEST_TIME</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>edns_pktsz</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>edns_pktsz</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="block">/* log_query gets called indirectly all over the place, so 
     pass these in global variables - sorry. */</comment>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>log_display_id</name></name> <operator>=</operator> <name><name>forward</name><operator>-&gt;</operator><name>frec_src</name><operator>.</operator><name>log_id</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>log_source_addr</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>forward</name><operator>-&gt;</operator><name>frec_src</name><operator>.</operator><name>source</name></name></expr>;</expr_stmt>
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DUMPFILE</name></cpp:ifdef>
  <expr_stmt><expr><call><name>dump_packet_udp</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>forward</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>FREC_DNSKEY_QUERY</name> <operator>|</operator> <name>FREC_DS_QUERY</name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><name>DUMP_SEC_REPLY</name></expr> </then><else>: <expr><name>DUMP_UP_REPLY</name></expr></else></ternary></expr></argument>,
		  <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>header</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>serveraddr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>ignore_addr</name></name> <operator>&amp;&amp;</operator> <call><name>RCODE</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NOERROR</name> <operator>&amp;&amp;</operator>
      <call><name>check_for_ignored_address</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>
  
  <comment type="block">/* Note: if we send extra options in the EDNS0 header, we can't recreate
     the query from the reply. */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>RCODE</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REFUSED</name> <operator>||</operator> <call><name>RCODE</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SERVFAIL</name><operator>)</operator> <operator>&amp;&amp;</operator>
      <name><name>forward</name><operator>-&gt;</operator><name>forwardall</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
      <operator>!</operator><operator>(</operator><name><name>forward</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FREC_HAS_EXTRADATA</name><operator>)</operator></expr>)</condition>
    <comment type="block">/* for broken servers, attempt to send to another one. */</comment>
    <block>{<block_content>
      <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pheader</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>udpsz</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>udp_size</name> <init>=  <expr><name>PACKETSZ</name></expr></init></decl>;</decl_stmt> <comment type="block">/* default if no EDNS0 */</comment>
      <decl_stmt><decl><type><name>size_t</name></type> <name>plen</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>is_sign</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>size_t</name></type> <name>nn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
      <comment type="block">/* The query MAY have got a good answer, and be awaiting
	 the results of further queries, in which case
	 The Stash contains something else and we don't need to retry anyway. */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>forward</name><operator>-&gt;</operator><name>blocking_query</name></name></expr>)</condition><block type="pseudo"><block_content>
	<return>return;</return></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>forward</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>FREC_DNSKEY_QUERY</name> <operator>|</operator> <name>FREC_DS_QUERY</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <comment type="block">/* DNSSEC queries have a copy of the original query stashed. */</comment>
	  <expr_stmt><expr><call><name>blockdata_retrieve</name><argument_list>(<argument><expr><name><name>forward</name><operator>-&gt;</operator><name>stash</name></name></expr></argument>, <argument><expr><name><name>forward</name><operator>-&gt;</operator><name>stash_len</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>nn</name> <operator>=</operator> <name><name>forward</name><operator>-&gt;</operator><name>stash_len</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>udp_size</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>edns_pktsz</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
      <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<block>{<block_content>
	  <comment type="block">/* in fast retry mode, we have a copy of the query. */</comment>
	  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>fast_retry_time</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>forward</name><operator>-&gt;</operator><name>stash</name></name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>blockdata_retrieve</name><argument_list>(<argument><expr><name><name>forward</name><operator>-&gt;</operator><name>stash</name></name></expr></argument>, <argument><expr><name><name>forward</name><operator>-&gt;</operator><name>stash_len</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name>nn</name> <operator>=</operator> <name><name>forward</name><operator>-&gt;</operator><name>stash_len</name></name></expr>;</expr_stmt>
	      <comment type="block">/* UDP size already set in saved query. */</comment>
	      <if_stmt><if>if <condition>(<expr><call><name>find_pseudoheader</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>udpsz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>udp_size</name></expr></argument>, <argument><expr><name>udpsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></if>
	  <else>else
	    <block>{<block_content>
	      <comment type="block">/* recreate query from reply */</comment>
	      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pheader</name> <operator>=</operator> <call><name>find_pseudoheader</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>plen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>udpsz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_sign</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>udp_size</name></expr></argument>, <argument><expr><name>udpsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      
	      <comment type="block">/* If the client provides an EDNS0 UDP size, use that to limit our reply.
		 (bounded by the maximum configured). If no EDNS0, then it
		 defaults to 512 */</comment>
	      <if_stmt><if>if <condition>(<expr><name>udp_size</name> <operator>&gt;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>edns_pktsz</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>udp_size</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>edns_pktsz</name></name></expr>;</expr_stmt></block_content></block></if>
	      <if type="elseif">else if <condition>(<expr><name>udp_size</name> <operator>&lt;</operator> <name>PACKETSZ</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>udp_size</name> <operator>=</operator> <name>PACKETSZ</name></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block">/* Sanity check - can't reduce below default. RFC 6891 6.2.3 */</comment>
	      
	      <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>ancount</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>nscount</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>arcount</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb3</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>HB3_QR</name> <operator>|</operator> <name>HB3_AA</name> <operator>|</operator> <name>HB3_TC</name><operator>)</operator></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb4</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>HB4_RA</name> <operator>|</operator> <name>HB4_RCODE</name> <operator>|</operator> <name>HB4_CD</name> <operator>|</operator> <name>HB4_AD</name><operator>)</operator></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><name><name>forward</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FREC_CHECKING_DISABLED</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb4</name></name> <operator>|=</operator> <name>HB4_CD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      <if_stmt><if>if <condition>(<expr><name><name>forward</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FREC_AD_QUESTION</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb4</name></name> <operator>|=</operator> <name>HB4_AD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_sign</name> <operator>&amp;&amp;</operator>
		  <operator>(</operator><name>nn</name> <operator>=</operator> <call><name>resize_packet</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><name>pheader</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
		  <operator>(</operator><name><name>forward</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FREC_DO_QUESTION</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>add_do_bit</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>nn</name></expr></argument>,  <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>pheader</name> <operator>+</operator> <name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>nn</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>forward_query</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>nn</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>header</name><operator>)</operator> <operator>+</operator> <name>udp_size</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>forward</name></expr></argument>,
			<argument><expr><name><name>forward</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FREC_AD_QUESTION</name></expr></argument>, <argument><expr><name><name>forward</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FREC_DO_QUESTION</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <return>return;</return>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

  <comment type="block">/* If the answer is an error, keep the forward record in place in case
     we get a good reply from another server. Kill it when we've
     had replies from all to avoid filling the forwarding table when
     everything is broken */</comment>

  <comment type="block">/* decrement count of replies recieved if we sent to more than one server. */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>forward</name><operator>-&gt;</operator><name>forwardall</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>--</operator><name><name>forward</name><operator>-&gt;</operator><name>forwardall</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>RCODE</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REFUSED</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>

  <comment type="block">/* We tried resending to this server with a smaller maximum size and got an answer.
     Make that permanent. To avoid reduxing the packet size for a single dropped packet,
     only do this when we get a truncated answer, or one larger than the safe size. */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>-&gt;</operator><name>edns_pktsz</name></name> <operator>&gt;</operator> <name>SAFE_PKTSZ</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>forward</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FREC_TEST_PKTSZ</name><operator>)</operator> <operator>&amp;&amp;</operator> 
      <operator>(</operator><operator>(</operator><name><name>header</name><operator>-&gt;</operator><name>hb3</name></name> <operator>&amp;</operator> <name>HB3_TC</name><operator>)</operator> <operator>||</operator> <name>n</name> <operator>&gt;=</operator> <name>SAFE_PKTSZ</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>edns_pktsz</name></name> <operator>=</operator> <name>SAFE_PKTSZ</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>pktsz_reduced</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>prettyprint_addr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"reducing DNS packet size for nameserver %s to %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>SAFE_PKTSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>sentto</name></name> <operator>=</operator> <name>server</name></expr>;</expr_stmt>

  <comment type="block">/* We have a good answer, and will now validate it or return it. 
     It may be some time before this the validation completes, but we don't need
     any more answers, so close the socket(s) on which we were expecting
     answers, to conserve file descriptors, and to save work reading and
     discarding answers for other upstreams. */</comment>
  <expr_stmt><expr><call><name>free_rfds</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>forward</name><operator>-&gt;</operator><name>rfds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* calculate modified moving average of server latency */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>-&gt;</operator><name>query_latency</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>mma_latency</name></name> <operator>=</operator> <operator>(</operator><call><name>dnsmasq_milliseconds</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>forward</name><operator>-&gt;</operator><name>forward_timestamp</name></name><operator>)</operator> <operator>*</operator> <literal type="number">128</literal></expr>;</expr_stmt></block_content></block></if> <comment type="block">/* init */</comment>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>mma_latency</name></name> <operator>+=</operator> <call><name>dnsmasq_milliseconds</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>forward</name><operator>-&gt;</operator><name>forward_timestamp</name></name> <operator>-</operator> <name><name>server</name><operator>-&gt;</operator><name>query_latency</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <comment type="block">/* denominator controls how many queries we average over. */</comment>
  <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>query_latency</name></name> <operator>=</operator> <name><name>server</name><operator>-&gt;</operator><name>mma_latency</name></name><operator>/</operator><literal type="number">128</literal></expr>;</expr_stmt>
  
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>forward</name><operator>-&gt;</operator><name>sentto</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SERV_DO_DNSSEC</name><operator>)</operator> <operator>&amp;&amp;</operator> 
      <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DNSSEC_VALID</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
      <operator>!</operator><operator>(</operator><name><name>forward</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FREC_CHECKING_DISABLED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>dnssec_validate</name><argument_list>(<argument><expr><name>forward</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>STAT_OK</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>return_reply</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>forward</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>STAT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>return_reply</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>frec</name></name> <modifier>*</modifier></type><name>forward</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>check_rebind</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>no_cache_dnssec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cache_secure</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>bogusanswer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>nn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ede</name> <init>= <expr><name>EDE_UNSET</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>status</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>log_display_id</name></name> <operator>=</operator> <name><name>forward</name><operator>-&gt;</operator><name>frec_src</name><operator>.</operator><name>log_id</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>log_source_addr</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>forward</name><operator>-&gt;</operator><name>frec_src</name><operator>.</operator><name>source</name></name></expr>;</expr_stmt>
  
  <comment type="block">/* Don't cache replies where DNSSEC validation was turned off, either
     the upstream server told us so, or the original query specified it.  */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>header</name><operator>-&gt;</operator><name>hb4</name></name> <operator>&amp;</operator> <name>HB4_CD</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>forward</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FREC_CHECKING_DISABLED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>no_cache_dnssec</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STAT_ISEQUAL</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>STAT_OK</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* status is STAT_OK when validation not turned on. */</comment>
      <expr_stmt><expr><name>no_cache_dnssec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><call><name>STAT_ISEQUAL</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>STAT_TRUNCATED</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb3</name></name> <operator>|=</operator> <name>HB3_TC</name></expr>;</expr_stmt></block_content></block></if>
      <else>else
	<block>{<block_content>
	  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>domain</name> <init>= <expr><literal type="string">"result"</literal></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name><name>union</name> <name>all_addr</name></name></type> <name>a</name></decl>;</decl_stmt>

	  <expr_stmt><expr><name><name>a</name><operator>.</operator><name>log</name><operator>.</operator><name>ede</name></name> <operator>=</operator> <name>ede</name> <operator>=</operator> <call><name>errflags_to_ede</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <if_stmt><if>if <condition>(<expr><call><name>STAT_ISEQUAL</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>STAT_ABANDONED</name></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="string">"ABANDONED"</literal></expr>;</expr_stmt>
	      <expr_stmt><expr><name>status</name> <operator>=</operator> <name>STAT_BOGUS</name></expr>;</expr_stmt>
	    </block_content>}</block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><call><name>STAT_ISEQUAL</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>STAT_SECURE</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"SECURE"</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><call><name>STAT_ISEQUAL</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>STAT_INSECURE</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"INSECURE"</literal></expr> </then><else>: <expr><literal type="string">"BOGUS"</literal></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><call><name>STAT_ISEQUAL</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>STAT_SECURE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>cache_secure</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
	  <if type="elseif">else if <condition>(<expr><call><name>STAT_ISEQUAL</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>STAT_BOGUS</name></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>no_cache_dnssec</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	      <expr_stmt><expr><name>bogusanswer</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><call><name>extract_request</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>domain</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
	  
	  <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>F_SECSTAT</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NO_REBIND</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>check_rebind</name> <operator>=</operator> <operator>!</operator><operator>(</operator><name><name>forward</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FREC_NOREBIND</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <comment type="block">/* restore CD bit to the value in the query */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>forward</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FREC_CHECKING_DISABLED</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb4</name></name> <operator>|=</operator> <name>HB4_CD</name></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb4</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HB4_CD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
  
  <comment type="block">/* Never cache answers which are contingent on the source or MAC address EDSN0 option,
     since the cache is ignorant of such things. */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>forward</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FREC_NO_CACHE</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>no_cache_dnssec</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>nn</name> <operator>=</operator> <call><name>process_reply</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>forward</name><operator>-&gt;</operator><name>sentto</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><name>check_rebind</name></expr></argument>, <argument><expr><name>no_cache_dnssec</name></expr></argument>, <argument><expr><name>cache_secure</name></expr></argument>, <argument><expr><name>bogusanswer</name></expr></argument>, 
			  <argument><expr><name><name>forward</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FREC_AD_QUESTION</name></expr></argument>, <argument><expr><name><name>forward</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FREC_DO_QUESTION</name></expr></argument>, 
			  <argument><expr><name><name>forward</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FREC_ADDED_PHEADER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>forward</name><operator>-&gt;</operator><name>frec_src</name><operator>.</operator><name>source</name></name></expr></argument>,
			  <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>header</name><operator>)</operator> <operator>+</operator> <name><name>daemon</name><operator>-&gt;</operator><name>edns_pktsz</name></name></expr></argument>, <argument><expr><name>ede</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>frec_src</name></name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
      
      <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>forward</name><operator>-&gt;</operator><name>frec_src</name><operator>.</operator><name>orig_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
      <comment type="block">/* We added an EDNSO header for the purpose of getting DNSSEC RRs, and set the value of the UDP payload size
	 greater than the no-EDNS0-implied 512 to have space for the RRSIGS. If, having stripped them and the EDNS0
	 header, the answer is still bigger than 512, truncate it and mark it so. The client then retries with TCP. */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DNSSEC_VALID</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>forward</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FREC_ADDED_PHEADER</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>nn</name> <operator>&gt;</operator> <name>PACKETSZ</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>ancount</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>nscount</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>arcount</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb3</name></name> <operator>|=</operator> <name>HB3_TC</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>nn</name> <operator>=</operator> <call><name>resize_packet</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>nn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      
      <for>for <control>(<init><expr><name>src</name> <operator>=</operator> <operator>&amp;</operator><name><name>forward</name><operator>-&gt;</operator><name>frec_src</name></name></expr>;</init> <condition><expr><name>src</name></expr>;</condition> <incr><expr><name>src</name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
	  <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>orig_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONNTRACK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UBUS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CMARK_ALST_EN</name></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mark</name></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name>int</name></type> <name>have_mark</name> <init>= <expr><call><name>get_incoming_mark</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>dest</name></name></expr></argument>, <comment type="block">/* istcp: */</comment> <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mark</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	      <if_stmt><if>if <condition>(<expr><name>have_mark</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>u32</name><operator>)</operator><name>mark</name> <operator>&amp;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>allowlist_mask</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>report_addresses</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>nn</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	  
	  <comment type="block">/* Pi-hole modification */</comment>
	  <decl_stmt><decl><type><name>int</name></type> <name>first_ID</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DUMPFILE</name></cpp:ifdef>
	      <expr_stmt><expr><call><name>dump_packet_udp</name><argument_list>(<argument><expr><name>DUMP_REPLY</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>nn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
	      <expr_stmt><expr><call><name>send_from</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NOWILD</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>option_bool</name> <argument_list>(<argument><expr><name>OPT_CLEVERBIND</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>, <argument><expr><name>nn</name></expr></argument>, 
			<argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>dest</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>iface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_EXTRALOG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>src</name> <operator>!=</operator> <operator>&amp;</operator><name><name>forward</name><operator>-&gt;</operator><name>frec_src</name></name></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>log_display_id</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>log_id</name></name></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>log_source_addr</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>source</name></name></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>F_UPSTREAM</name></expr></argument>, <argument><expr><literal type="string">"query"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"duplicate"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
	  <comment type="block">/* Pi-hole modification */</comment>
	  <expr_stmt><expr><call><name>FTL_multiple_replies</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>log_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>free_frec</name><argument_list>(<argument><expr><name>forward</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* cancel */</comment>
</block_content>}</block></function>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONNTRACK</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>int</name></type> <name>is_query_allowed_for_mark</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>mark</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>is_allowable_name</name></decl>, <decl><type ref="prev"/><name>did_validate_name</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>allowlist</name></name> <modifier>*</modifier></type><name>allowlists</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>patterns_pos</name></decl>;</decl_stmt>
  
  <for>for <control>(<init><expr><name>allowlists</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>allowlists</name></name></expr>;</init> <condition><expr><name>allowlists</name></expr>;</condition> <incr><expr><name>allowlists</name> <operator>=</operator> <name><name>allowlists</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>allowlists</name><operator>-&gt;</operator><name>mark</name></name> <operator>==</operator> <operator>(</operator><name>mark</name> <operator>&amp;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>allowlist_mask</name></name> <operator>&amp;</operator> <name><name>allowlists</name><operator>-&gt;</operator><name>mask</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <for>for <control>(<init><expr><name>patterns_pos</name> <operator>=</operator> <name><name>allowlists</name><operator>-&gt;</operator><name>patterns</name></name></expr>;</init> <condition><expr><operator>*</operator><name>patterns_pos</name></expr>;</condition> <incr><expr><name>patterns_pos</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><operator>*</operator><name>patterns_pos</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_validate_name</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>is_allowable_name</name> <operator>=</operator> <ternary><condition><expr><name>name</name></expr> ?</condition><then> <expr><call><name>is_valid_dns_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
	      <expr_stmt><expr><name>did_validate_name</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	  <if_stmt><if>if <condition>(<expr><name>is_allowable_name</name> <operator>&amp;&amp;</operator> <call><name>is_dns_name_matching_pattern</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>*</operator><name>patterns_pos</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for></block_content></block></if></if_stmt></block_content></block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>answer_disallowed</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>qlen</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>mark</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>name</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mark</name></expr>;</expr_stmt>
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UBUS</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>ubus_event_bcast_connmark_allowlist_refused</name><argument_list>(<argument><expr><name>mark</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
  <expr_stmt><expr><call><name>setup_reply</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <comment type="block">/* flags: */</comment> <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>EDE_BLOCKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>skip_questions</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><name>p</name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>header</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>receive_query</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>listener</name></name> <modifier>*</modifier></type><name>listen</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name> <init>= <expr><operator>(</operator>struct <name>dns_header</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>union</name> <name>mysockaddr</name></name></type> <name>source_addr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pheader</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>type</name></decl>, <decl><type ref="prev"/><name>udp_size</name> <init>= <expr><name>PACKETSZ</name></expr></init></decl>;</decl_stmt> <comment type="block">/* default if no EDNS0 */</comment>
  <decl_stmt><decl><type><name><name>union</name> <name>all_addr</name></name></type> <name>dst_addr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>netmask</name></decl>, <decl><type ref="prev"/><name>dst_addr_4</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>m</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>if_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>auth_dns</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>do_bit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>have_pseudoheader</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONNTRACK</name></cpp:ifdef>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mark</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>have_mark</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>is_single_query</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>allowed</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_AUTH</name></cpp:ifdef>
  <decl_stmt><decl><type><name>int</name></type> <name>local_auth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name><name>iov</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>msghdr</name></name></type> <name>msg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>cmsghdr</name></name> <modifier>*</modifier></type><name>cmptr</name></decl>;</decl_stmt>
  <union>union <block>{
    <decl_stmt><decl><type><name><name>struct</name> <name>cmsghdr</name></name></type> <name>align</name></decl>;</decl_stmt> <comment type="block">/* this ensures alignment */</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>control6</name><index>[<expr><call><name>CMSG_SPACE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in6_pktinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>char</name></type> <name><name>control</name><index>[<expr><call><name>CMSG_SPACE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_pktinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IP_RECVDSTADDR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SOLARIS_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <expr_stmt><expr><name>char</name> <name><name>control</name><index>[<expr><call><name>CMSG_SPACE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>+</operator>
		 <call><name>CMSG_SPACE</name><argument_list>(<argument><expr/></argument></argument_list></call></expr></index></name>sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr></expr_stmt>)</block>];</union>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IP_RECVDSTADDR</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <decl_stmt><decl><type><name>char</name></type> <name><name>control</name><index>[<expr><call><name>CMSG_SPACE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>+</operator>
		 <call><name>CMSG_SPACE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_dl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></function> <expr_stmt><expr><name>control_u</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>family</name> <init>= <expr><name><name>listen</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name></expr></init></decl>;</decl_stmt>
   <comment type="block">/* Can always get recvd interface for IPv6 */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>check_dst</name> <init>= <expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NOWILD</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>family</name> <operator>==</operator> <name>AF_INET6</name></expr></init></decl>;</decl_stmt>

  <comment type="block" format="doxygen">/************ Pi-hole modification ************/</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>piholeblocked</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <comment type="block" format="doxygen">/**********************************************/</comment>
  
  <comment type="block">/* packet buffer overwritten */</comment>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>srv_save</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>dst_addr_4</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name><name>dst_addr</name><operator>.</operator><name>addr4</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>netmask</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NOWILD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>listen</name><operator>-&gt;</operator><name>iface</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>auth_dns</name> <operator>=</operator> <name><name>listen</name><operator>-&gt;</operator><name>iface</name><operator>-&gt;</operator><name>dns_auth</name></name></expr>;</expr_stmt>
     
      <if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_INET</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>dst_addr_4</name> <operator>=</operator> <name><name>dst_addr</name><operator>.</operator><name>addr4</name></name> <operator>=</operator> <name><name>listen</name><operator>-&gt;</operator><name>iface</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>netmask</name> <operator>=</operator> <name><name>listen</name><operator>-&gt;</operator><name>iface</name><operator>-&gt;</operator><name>netmask</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>edns_pktsz</name></name></expr>;</expr_stmt>
    
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_control</name></name> <operator>=</operator> <name><name>control_u</name><operator>.</operator><name>control</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_controllen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>control_u</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_name</name></name> <operator>=</operator> <operator>&amp;</operator><name>source_addr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_namelen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>source_addr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_iov</name></name> <operator>=</operator> <name>iov</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_iovlen</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>recvmsg</name><argument_list>(<argument><expr><name><name>listen</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dns_header</name></expr></argument>)</argument_list></sizeof> <operator>||</operator> 
      <operator>(</operator><name><name>msg</name><operator>.</operator><name>msg_flags</name></name> <operator>&amp;</operator> <name>MSG_TRUNC</name><operator>)</operator> <operator>||</operator>
      <operator>(</operator><name><name>header</name><operator>-&gt;</operator><name>hb3</name></name> <operator>&amp;</operator> <name>HB3_QR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>

  <comment type="block">/* Clear buffer beyond request to avoid risk of
     information disclosure. */</comment>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>edns_pktsz</name></name> <operator>-</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><name><name>source_addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>=</operator> <name>family</name></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_INET</name></expr>)</condition>
    <block>{<block_content>
       <comment type="block">/* Source-port == 0 is an error, we can't send back to that. 
	  http://www.ietf.org/mail-archive/web/dnsop/current/msg11441.html */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>source_addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_port</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<return>return;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if>
  <else>else
    <block>{<block_content>
      <comment type="block">/* Source-port == 0 is an error, we can't send back to that. */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>source_addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_port</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<return>return;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>source_addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_flowinfo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  
  <comment type="block">/* We can be configured to only accept queries from at-most-one-hop-away addresses. */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOCAL_SERVICE</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>addrlist</name></name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> 
	<block>{<block_content>
	  <for>for <control>(<init><expr><name>addr</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>interface_addrs</name></name></expr>;</init> <condition><expr><name>addr</name></expr>;</condition> <incr><expr><name>addr</name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>addr</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ADDRLIST_IPV6</name><operator>)</operator> <operator>&amp;&amp;</operator>
		<call><name>is_same_net6</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr6</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>source_addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>prefixlen</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	      <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>netmask</name></decl>;</decl_stmt>
	  <for>for <control>(<init><expr><name>addr</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>interface_addrs</name></name></expr>;</init> <condition><expr><name>addr</name></expr>;</condition> <incr><expr><name>addr</name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	    <block>{<block_content>
	      <expr_stmt><expr><name><name>netmask</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><operator>~</operator><operator>(</operator><name>in_addr_t</name><operator>)</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name><name>addr</name><operator>-&gt;</operator><name>prefixlen</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>addr</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ADDRLIST_IPV6</name><operator>)</operator> <operator>&amp;&amp;</operator>
		  <call><name>is_same_net</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr4</name></name></expr></argument>, <argument><expr><name><name>source_addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name></name></expr></argument>, <argument><expr><name>netmask</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<break>break;</break></block_content></block></if></if_stmt>
	    </block_content>}</block></for>
	</block_content>}</block></else></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>addr</name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>warned</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>warned</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>prettyprint_addr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>source_addr</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"ignoring query from non-local network %s (logged only once)"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name>warned</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	  <return>return;</return>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>check_dst</name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>ifreq</name></name></type> <name>ifr</name></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>.</operator><name>msg_controllen</name></name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>cmsghdr</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
	<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_INET</name></expr>)</condition><block type="pseudo"><block_content>
	<for>for <control>(<init><expr><name>cmptr</name> <operator>=</operator> <call><name>CMSG_FIRSTHDR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>cmptr</name></expr>;</condition> <incr><expr><name>cmptr</name> <operator>=</operator> <call><name>CMSG_NXTHDR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>cmptr</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
	  <if_stmt><if>if <condition>(<expr><name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_level</name></name> <operator>==</operator> <name>IPPROTO_IP</name> <operator>&amp;&amp;</operator> <name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_type</name></name> <operator>==</operator> <name>IP_PKTINFO</name></expr>)</condition>
	    <block>{<block_content>
	      <union>union <block>{
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>struct</name> <name>in_pktinfo</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	      }</block> <decl><name>p</name></decl>;</union>
	      <expr_stmt><expr><name><name>p</name><operator>.</operator><name>c</name></name> <operator>=</operator> <call><name>CMSG_DATA</name><argument_list>(<argument><expr><name>cmptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name>dst_addr_4</name> <operator>=</operator> <name><name>dst_addr</name><operator>.</operator><name>addr4</name></name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>p</name><operator>-&gt;</operator><name>ipi_spec_dst</name></name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>if_index</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>p</name><operator>-&gt;</operator><name>ipi_ifindex</name></name></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IP_RECVDSTADDR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>IP_RECVIF</name></expr></argument>)</argument_list></call></expr></cpp:elif>
      <if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_INET</name></expr>)</condition>
	<block>{<block_content>
	  <for>for <control>(<init><expr><name>cmptr</name> <operator>=</operator> <call><name>CMSG_FIRSTHDR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>cmptr</name></expr>;</condition> <incr><expr><name>cmptr</name> <operator>=</operator> <call><name>CMSG_NXTHDR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>cmptr</name></expr></argument>)</argument_list></call></expr></incr>)</control>
	    <block>{<block_content>
	      <union>union <block>{
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>i</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_SOLARIS_NETWORK</name></cpp:ifndef>
		<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_dl</name></name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	      }</block> <decl><name>p</name></decl>;</union>
	       <expr_stmt><expr><name><name>p</name><operator>.</operator><name>c</name></name> <operator>=</operator> <call><name>CMSG_DATA</name><argument_list>(<argument><expr><name>cmptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	       <if_stmt><if>if <condition>(<expr><name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_level</name></name> <operator>==</operator> <name>IPPROTO_IP</name> <operator>&amp;&amp;</operator> <name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_type</name></name> <operator>==</operator> <name>IP_RECVDSTADDR</name></expr>)</condition><block type="pseudo"><block_content>
		 <expr_stmt><expr><name>dst_addr_4</name> <operator>=</operator> <name><name>dst_addr</name><operator>.</operator><name>addr4</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>p</name><operator>.</operator><name>a</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
	       <if type="elseif">else if <condition>(<expr><name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_level</name></name> <operator>==</operator> <name>IPPROTO_IP</name> <operator>&amp;&amp;</operator> <name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_type</name></name> <operator>==</operator> <name>IP_RECVIF</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SOLARIS_NETWORK</name></cpp:ifdef>
		 <expr_stmt><expr><name>if_index</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>p</name><operator>.</operator><name>i</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  	         <expr_stmt><expr><name>if_index</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>s</name><operator>-&gt;</operator><name>sdl_index</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    </block_content>}</block></for>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      
      <if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition>
	<block>{<block_content>
	  <for>for <control>(<init><expr><name>cmptr</name> <operator>=</operator> <call><name>CMSG_FIRSTHDR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>cmptr</name></expr>;</condition> <incr><expr><name>cmptr</name> <operator>=</operator> <call><name>CMSG_NXTHDR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>cmptr</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_level</name></name> <operator>==</operator> <name>IPPROTO_IPV6</name> <operator>&amp;&amp;</operator> <name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_type</name></name> <operator>==</operator> <name><name>daemon</name><operator>-&gt;</operator><name>v6pktinfo</name></name></expr>)</condition>
	      <block>{<block_content>
		<union>union <block>{
		  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
		  <decl_stmt><decl><type><name><name>struct</name> <name>in6_pktinfo</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
		}</block> <decl><name>p</name></decl>;</union>
		<expr_stmt><expr><name><name>p</name><operator>.</operator><name>c</name></name> <operator>=</operator> <call><name>CMSG_DATA</name><argument_list>(<argument><expr><name>cmptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  
		<expr_stmt><expr><name><name>dst_addr</name><operator>.</operator><name>addr6</name></name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>p</name><operator>-&gt;</operator><name>ipi6_addr</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>if_index</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>p</name><operator>-&gt;</operator><name>ipi6_ifindex</name></name></expr>;</expr_stmt>
	      </block_content>}</block></if></if_stmt></block_content></block></for>
	</block_content>}</block></if></if_stmt>
      
      <comment type="block">/* enforce available interface configuration */</comment>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>indextoname</name><argument_list>(<argument><expr><name><name>listen</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>if_index</name></expr></argument>, <argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return;</return></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>iface_check</name><argument_list>(<argument><expr><name>family</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst_addr</name></expr></argument>, <argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>auth_dns</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	   <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CLEVERBIND</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	     <expr_stmt><expr><call><name>enumerate_interfaces</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
	   <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>loopback_exception</name><argument_list>(<argument><expr><name><name>listen</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>family</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst_addr</name></expr></argument>, <argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	       <operator>!</operator><call><name>label_exception</name><argument_list>(<argument><expr><name>if_index</name></expr></argument>, <argument><expr><name>family</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst_addr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	     <return>return;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_INET</name> <operator>&amp;&amp;</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOCALISE</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name><name>struct</name> <name>irec</name></name> <modifier>*</modifier></type><name>iface</name></decl>;</decl_stmt>
	  
	  <comment type="block">/* get the netmask of the interface which has the address we were sent to.
	     This is no necessarily the interface we arrived on. */</comment>
	  
	  <for>for <control>(<init><expr><name>iface</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>interfaces</name></name></expr>;</init> <condition><expr><name>iface</name></expr>;</condition> <incr><expr><name>iface</name> <operator>=</operator> <name><name>iface</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><name><name>iface</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name> <operator>&amp;&amp;</operator>
		<name><name>iface</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <name><name>dst_addr_4</name><operator>.</operator><name>s_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
	      <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	  
	  <comment type="block">/* interface may be new */</comment>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>iface</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CLEVERBIND</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>enumerate_interfaces</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
	  
	  <for>for <control>(<init><expr><name>iface</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>interfaces</name></name></expr>;</init> <condition><expr><name>iface</name></expr>;</condition> <incr><expr><name>iface</name> <operator>=</operator> <name><name>iface</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><name><name>iface</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name> <operator>&amp;&amp;</operator>
		<name><name>iface</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <name><name>dst_addr_4</name><operator>.</operator><name>s_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
	      <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	  
	  <comment type="block">/* If we failed, abandon localisation */</comment>
	  <if_stmt><if>if <condition>(<expr><name>iface</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>netmask</name> <operator>=</operator> <name><name>iface</name><operator>-&gt;</operator><name>netmask</name></name></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>dst_addr_4</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block" format="doxygen">/********************* Pi-hole modification ***********************/</comment>
    <comment type="line">// This gets the interface in all cases where this is possible here</comment>
    <expr_stmt><expr><call><name>FTL_iface</name><argument_list>(<argument><expr><name><name>listen</name><operator>-&gt;</operator><name>iface</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst_addr</name></expr></argument>, <argument><expr><name>family</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" format="doxygen">/****************************************************************/</comment>
   
  <comment type="block">/* log_query gets called indirectly all over the place, so 
     pass these in global variables - sorry. */</comment>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>log_display_id</name></name> <operator>=</operator> <operator>++</operator><name><name>daemon</name><operator>-&gt;</operator><name>log_id</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>log_source_addr</name></name> <operator>=</operator> <operator>&amp;</operator><name>source_addr</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DUMPFILE</name></cpp:ifdef>
  <expr_stmt><expr><call><name>dump_packet_udp</name><argument_list>(<argument><expr><name>DUMP_QUERY</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>source_addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>listen</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONNTRACK</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CMARK_ALST_EN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>have_mark</name> <operator>=</operator> <call><name>get_incoming_mark</name><argument_list>(<argument><expr><operator>&amp;</operator><name>source_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst_addr</name></expr></argument>, <comment type="block">/* istcp: */</comment> <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <comment type="line">//********************** Pi-hole modification **********************//</comment>
  <decl_stmt><decl><type><name>ednsData</name></type> <name>edns</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>find_pseudoheader</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pheader</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>FTL_parse_pseudoheaders</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>source_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>edns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <comment type="line">//******************************************************************//</comment>
	  
  <if_stmt><if>if <condition>(<expr><call><name>extract_request</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_AUTH</name></cpp:ifdef>
      <decl_stmt><decl><type><name><name>struct</name> <name>auth_zone</name></name> <modifier>*</modifier></type><name>zone</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <expr_stmt><expr><call><name>log_query_mysockaddr</name><argument_list>(<argument><expr><name>F_QUERY</name> <operator>|</operator> <name>F_FORWARD</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>,
			   <argument><expr><operator>&amp;</operator><name>source_addr</name></expr></argument>, <argument><expr><ternary><condition><expr><name>auth_dns</name></expr> ?</condition><then> <expr><literal type="string">"auth"</literal></expr> </then><else>: <expr><literal type="string">"query"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>piholeblocked</name> <operator>=</operator> <call><name>FTL_new_query</name><argument_list>(<argument><expr><name>F_QUERY</name> <operator>|</operator> <name>F_FORWARD</name></expr></argument> , <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>,
				    <argument><expr><operator>&amp;</operator><name>source_addr</name></expr></argument>, <argument><expr><ternary><condition><expr><name>auth_dns</name></expr> ?</condition><then> <expr><literal type="string">"auth"</literal></expr> </then><else>: <expr><literal type="string">"query"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>log_display_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>edns</name></expr></argument>, <argument><expr><name>UDP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONNTRACK</name></cpp:ifdef>
      <expr_stmt><expr><name>is_single_query</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_AUTH</name></cpp:ifdef>
      <comment type="block">/* find queries for zones we're authoritative for, and answer them directly */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>auth_dns</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOCALISE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<for>for <control>(<init><expr><name>zone</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>auth_zones</name></name></expr>;</init> <condition><expr><name>zone</name></expr>;</condition> <incr><expr><name>zone</name> <operator>=</operator> <name><name>zone</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	  <if_stmt><if>if <condition>(<expr><call><name>in_zone</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>auth_dns</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	      <expr_stmt><expr><name>local_auth</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	      <break>break;</break>
	    </block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LOOP</name></cpp:ifdef>
      <comment type="block">/* Check for forwarding loop */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>detect_loop</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><call><name>find_pseudoheader</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pheader</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
      <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>flags</name></decl>;</decl_stmt>
      
      <expr_stmt><expr><name>have_pseudoheader</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>udp_size</name></expr></argument>, <argument><expr><name>pheader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pheader</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <comment type="block">/* ext_rcode */</comment>
      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>pheader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>do_bit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt><comment type="block">/* do bit */</comment> 
	
      <comment type="block">/* If the client provides an EDNS0 UDP size, use that to limit our reply.
	 (bounded by the maximum configured). If no EDNS0, then it
	 defaults to 512. We write this value into the query packet too, so that
	 if it's forwarded, we don't specify a maximum size greater than we can handle. */</comment>
      <if_stmt><if>if <condition>(<expr><name>udp_size</name> <operator>&gt;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>edns_pktsz</name></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>udp_size</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>edns_pktsz</name></name></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name>udp_size</name> <operator>&lt;</operator> <name>PACKETSZ</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>udp_size</name> <operator>=</operator> <name>PACKETSZ</name></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block">/* Sanity check - can't reduce below default. RFC 6891 6.2.3 */</comment>

      <expr_stmt><expr><name>pheader</name> <operator>-=</operator> <literal type="number">6</literal></expr>;</expr_stmt> <comment type="block">/* ext_class */</comment>
      <expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><name>udp_size</name></expr></argument>, <argument><expr><name>pheader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Bounding forwarded queries to maximum configured */</comment>
    </block_content>}</block></if></if_stmt>
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONNTRACK</name></cpp:ifdef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_AUTH</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>auth_dns</name> <operator>||</operator> <name>local_auth</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CMARK_ALST_EN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>have_mark</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>u32</name><operator>)</operator><name>mark</name> <operator>&amp;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>allowlist_mask</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>allowed</name> <operator>=</operator> <call><name>is_query_allowed_for_mark</name><argument_list>(<argument><expr><operator>(</operator><name>u32</name><operator>)</operator><name>mark</name></expr></argument>, <argument><expr><ternary><condition><expr><name>is_single_query</name></expr> ?</condition><then> <expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONNTRACK</name></cpp:ifdef>
  <if type="elseif">else if <condition>(<expr><operator>!</operator><name>allowed</name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>u16</name></type> <name>swap</name> <init>= <expr><call><name>htons</name><argument_list>(<argument><expr><name>EDE_BLOCKED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>answer_disallowed</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><operator>(</operator><name>u32</name><operator>)</operator><name>mark</name></expr></argument>, <argument><expr><ternary><condition><expr><name>is_single_query</name></expr> ?</condition><then> <expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>have_pseudoheader</name> <operator>&amp;&amp;</operator> <name>m</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>add_pseudoheader</name><argument_list>(<argument><expr><name>header</name></expr></argument>,  <argument><expr><name>m</name></expr></argument>,  <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>header</name><operator>)</operator> <operator>+</operator> <name>udp_size</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>edns_pktsz</name></name></expr></argument>,
			     <argument><expr><name>EDNS0_OPTION_EDE</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>swap</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>do_bit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>m</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DUMPFILE</name></cpp:ifdef>
	  <expr_stmt><expr><call><name>dump_packet_udp</name><argument_list>(<argument><expr><name>DUMP_REPLY</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>source_addr</name></expr></argument>, <argument><expr><name><name>listen</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	  <expr_stmt><expr><call><name>send_from</name><argument_list>(<argument><expr><name><name>listen</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NOWILD</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CLEVERBIND</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>header</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>source_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst_addr</name></expr></argument>, <argument><expr><name>if_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><name>METRIC_DNS_LOCAL_ANSWERED</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_AUTH</name></cpp:ifdef>
  <if type="elseif">else if <condition>(<expr><name>auth_dns</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>answer_auth</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>header</name><operator>)</operator> <operator>+</operator> <name>udp_size</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>source_addr</name></expr></argument>, 
		      <argument><expr><name>local_auth</name></expr></argument>, <argument><expr><name>do_bit</name></expr></argument>, <argument><expr><name>have_pseudoheader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>m</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DUMPFILE</name></cpp:ifdef>
	  <expr_stmt><expr><call><name>dump_packet_udp</name><argument_list>(<argument><expr><name>DUMP_REPLY</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>source_addr</name></expr></argument>, <argument><expr><name><name>listen</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONNTRACK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UBUS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	  <if_stmt><if>if <condition>(<expr><name>local_auth</name></expr>)</condition><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CMARK_ALST_EN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>have_mark</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>u32</name><operator>)</operator><name>mark</name> <operator>&amp;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>allowlist_mask</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><call><name>report_addresses</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	  <expr_stmt><expr><call><name>send_from</name><argument_list>(<argument><expr><name><name>listen</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NOWILD</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CLEVERBIND</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>header</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>source_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst_addr</name></expr></argument>, <argument><expr><name>if_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><name>METRIC_DNS_AUTH_ANSWERED</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <else>else
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>stale</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>ad_reqd</name> <init>= <expr><name>do_bit</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>u16</name></type> <name>hb3</name> <init>= <expr><name><name>header</name><operator>-&gt;</operator><name>hb3</name></name></expr></init></decl>, <decl><type ref="prev"/><name>hb4</name> <init>= <expr><name><name>header</name><operator>-&gt;</operator><name>hb4</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><name><name>listen</name><operator>-&gt;</operator><name>fd</name></name></expr></init></decl>;</decl_stmt>
      
      <comment type="block">/* RFC 6840 5.7 */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>header</name><operator>-&gt;</operator><name>hb4</name></name> <operator>&amp;</operator> <name>HB4_AD</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>ad_reqd</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <comment type="block" format="doxygen">/************ Pi-hole modification ************/</comment>
      <if_stmt><if>if<condition>(<expr><name>piholeblocked</name></expr>)</condition>
	<block>{<block_content>
	  <comment type="line">// Generate DNS packet for reply</comment>
	  <decl_stmt><decl><type><name>int</name></type> <name>ede</name> <init>= <expr><name>EDE_UNSET</name></expr></init></decl>;</decl_stmt>
	  <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>FTL_make_answer</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>header</name><operator>)</operator> <operator>+</operator> <name>udp_size</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ede</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <comment type="line">// The pseudoheader may contain important information such as EDNS0 version important for</comment>
	  <comment type="line">// some DNS resolvers (such as systemd-resolved) to work properly. We should not discard them.</comment>

	  <comment type="line">// Check if this query is to be dropped. If so, return immediately without sending anything</comment>
	  <if_stmt><if>if<condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <return>return;</return></block_content></block></if></if_stmt>

	  <if_stmt><if>if <condition>(<expr><name>have_pseudoheader</name></expr>)</condition>
	  <block>{<block_content>
	    <decl_stmt><decl><type><name>u16</name></type> <name>swap</name> <init>= <expr><call><name>htons</name><argument_list>(<argument><expr><name>ede</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    <if_stmt><if>if <condition>(<expr><name>ede</name> <operator>!=</operator> <name>EDE_UNSET</name></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// Add EDNS0 option EDE if applicable</comment>
	      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>add_pseudoheader</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>header</name><operator>)</operator> <operator>+</operator> <name>udp_size</name></expr></argument>,
				   <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>edns_pktsz</name></name></expr></argument>, <argument><expr><name>EDNS0_OPTION_EDE</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>swap</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>do_bit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	    <else>else<block type="pseudo"><block_content>
	      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>add_pseudoheader</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>header</name><operator>)</operator> <operator>+</operator> <name>udp_size</name></expr></argument>,
				   <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>edns_pktsz</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>do_bit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	  </block_content>}</block></if></if_stmt>
	  <expr_stmt><expr><call><name>send_from</name><argument_list>(<argument><expr><name><name>listen</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NOWILD</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CLEVERBIND</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>header</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>source_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst_addr</name></expr></argument>, <argument><expr><name>if_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><name>METRIC_DNS_LOCAL_ANSWERED</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	  <return>return;</return>
	</block_content>}</block></if></if_stmt>
      <comment type="block" format="doxygen">/**********************************************/</comment>
      
      <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>answer_request</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>header</name><operator>)</operator> <operator>+</operator> <name>udp_size</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>n</name></expr></argument>, 
			 <argument><expr><name>dst_addr_4</name></expr></argument>, <argument><expr><name>netmask</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>ad_reqd</name></expr></argument>, <argument><expr><name>do_bit</name></expr></argument>, <argument><expr><name>have_pseudoheader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>m</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name>stale</name> <operator>&amp;&amp;</operator> <name>have_pseudoheader</name></expr>)</condition>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name>u16</name></type> <name>swap</name> <init>= <expr><call><name>htons</name><argument_list>(<argument><expr><name>EDE_STALE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	      
	      <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>add_pseudoheader</name><argument_list>(<argument><expr><name>header</name></expr></argument>,  <argument><expr><name>m</name></expr></argument>,  <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>header</name><operator>)</operator> <operator>+</operator> <name>udp_size</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>edns_pktsz</name></name></expr></argument>,
				   <argument><expr><name>EDNS0_OPTION_EDE</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>swap</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>do_bit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DUMPFILE</name></cpp:ifdef>
	  <expr_stmt><expr><call><name>dump_packet_udp</name><argument_list>(<argument><expr><name>DUMP_REPLY</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>source_addr</name></expr></argument>, <argument><expr><name><name>listen</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONNTRACK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UBUS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CMARK_ALST_EN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>have_mark</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>u32</name><operator>)</operator><name>mark</name> <operator>&amp;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>allowlist_mask</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>report_addresses</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	  <expr_stmt><expr><call><name>send_from</name><argument_list>(<argument><expr><name><name>listen</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NOWILD</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CLEVERBIND</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>header</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>source_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst_addr</name></expr></argument>, <argument><expr><name>if_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><name>METRIC_DNS_LOCAL_ANSWERED</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name>stale</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><name>METRIC_DNS_STALE_ANSWERED</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>stale</name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name>m</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name>size_t</name></type> <name>plen</name></decl>;</decl_stmt>
	      
	      <comment type="block">/* We answered with stale cache data, so forward the query anyway to
		 refresh that. Restore the query from the answer packet. */</comment>
	      <expr_stmt><expr><name>pheader</name> <operator>=</operator> <call><name>find_pseudoheader</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>plen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      
	      <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb3</name></name> <operator>=</operator> <name>hb3</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb4</name></name> <operator>=</operator> <name>hb4</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>ancount</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>nscount</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>arcount</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	      <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>resize_packet</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>pheader</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	      <comment type="block">/* We've already answered the client, so don't send it the answer 
		 when it comes back. */</comment>
	      <expr_stmt><expr><name>fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><call><name>forward_query</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>source_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst_addr</name></expr></argument>, <argument><expr><name>if_index</name></expr></argument>,
			    <argument><expr><name>header</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>n</name></expr></argument>,  <argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>header</name><operator>)</operator> <operator>+</operator> <name>udp_size</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ad_reqd</name></expr></argument>, <argument><expr><name>do_bit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><name>METRIC_DNS_QUERIES_FORWARDED</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><name>METRIC_DNS_LOCAL_ANSWERED</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
}

<comment type="block">/* Send query in packet, qsize to a server determined by first,last,start and
   get the reply. return reply size. */</comment>
static <function><type><name>ssize_t</name></type> <name>tcp_talk</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>last</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>,  <parameter><decl><type><name>size_t</name></type> <name>qsize</name></decl></parameter>,
			<parameter><decl><type><name>int</name></type> <name>have_mark</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mark</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>servp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>firstsendto</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u16</name> <modifier>*</modifier></type><name>length</name> <init>= <expr><operator>(</operator><name>u16</name> <operator>*</operator><operator>)</operator><name>packet</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>payload</name> <init>= <expr><operator>&amp;</operator><name><name>packet</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name> <init>= <expr><operator>(</operator>struct <name>dns_header</name> <operator>*</operator><operator>)</operator><name>payload</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash</name><index>[<expr><name>HASH_SIZE</name></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hashp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>rsize</name></decl>;</decl_stmt>
  
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mark</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>have_mark</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>hashp</name> <operator>=</operator> <call><name>hash_questions</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>qsize</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>hashp</name></expr></argument>, <argument><expr><name>HASH_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> 
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>data_sent</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>serv</name></decl>;</decl_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>firstsendto</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>firstsendto</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt></block_content></block></if>
      <else>else
	<block>{<block_content>
	  <expr_stmt><expr><name>start</name><operator>++</operator></expr>;</expr_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name>start</name> <operator>==</operator> <name>last</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>start</name> <operator>=</operator> <name>first</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name>start</name> <operator>==</operator> <name>firstsendto</name></expr>)</condition><block type="pseudo"><block_content>
	    <break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
      
      <expr_stmt><expr><name>serv</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>start</name></expr>]</index></name></expr>;</expr_stmt>
      
    <label><name>retry</name>:</label>
      <expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>qsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>serv</name><operator>-&gt;</operator><name>tcpfd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>serv</name><operator>-&gt;</operator><name>tcpfd</name></name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name><name>serv</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	    <continue>continue;</continue></block_content></block></if></if_stmt>
	  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONNTRACK</name></cpp:ifdef>
	  <comment type="block">/* Copy connection mark of incoming query to outgoing connection. */</comment>
	  <if_stmt><if>if <condition>(<expr><name>have_mark</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>serv</name><operator>-&gt;</operator><name>tcpfd</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_MARK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mark</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>			  
	  
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>local_bind</name><argument_list>(<argument><expr><name><name>serv</name><operator>-&gt;</operator><name>tcpfd</name></name></expr></argument>,  <argument><expr><operator>&amp;</operator><name><name>serv</name><operator>-&gt;</operator><name>source_addr</name></name></expr></argument>, <argument><expr><name><name>serv</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>serv</name><operator>-&gt;</operator><name>tcpfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>serv</name><operator>-&gt;</operator><name>tcpfd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	      <continue>continue;</continue>
	    </block_content>}</block></if></if_stmt>
	  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MSG_FASTOPEN</name></cpp:ifdef>
	  <expr_stmt><expr><call><name>server_send</name><argument_list>(<argument><expr><name>serv</name></expr></argument>, <argument><expr><name><name>serv</name><operator>-&gt;</operator><name>tcpfd</name></name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><name>qsize</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>u16</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>MSG_FASTOPEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>data_sent</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	  
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>data_sent</name> <operator>&amp;&amp;</operator> <call><name>connect</name><argument_list>(<argument><expr><name><name>serv</name><operator>-&gt;</operator><name>tcpfd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>serv</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa</name></name></expr></argument>, <argument><expr><call><name>sa_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>serv</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>serv</name><operator>-&gt;</operator><name>tcpfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>serv</name><operator>-&gt;</operator><name>tcpfd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	      <continue>continue;</continue>
	    </block_content>}</block></if></if_stmt>
	  
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>first</name></expr>]</index></name><operator>-&gt;</operator><name>last_server</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>serv</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SERV_GOT_TCP</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>data_sent</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>read_write</name><argument_list>(<argument><expr><name><name>serv</name><operator>-&gt;</operator><name>tcpfd</name></name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><name>qsize</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>u16</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
	  <operator>!</operator><call><name>read_write</name><argument_list>(<argument><expr><name><name>serv</name><operator>-&gt;</operator><name>tcpfd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>||</operator>
	  <operator>!</operator><call><name>read_write</name><argument_list>(<argument><expr><name><name>serv</name><operator>-&gt;</operator><name>tcpfd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>||</operator>
	  <operator>!</operator><call><name>read_write</name><argument_list>(<argument><expr><name><name>serv</name><operator>-&gt;</operator><name>tcpfd</name></name></expr></argument>, <argument><expr><name>payload</name></expr></argument>, <argument><expr><operator>(</operator><name>rsize</name> <operator>=</operator> <operator>(</operator><name>c1</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>c2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>serv</name><operator>-&gt;</operator><name>tcpfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>serv</name><operator>-&gt;</operator><name>tcpfd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	  <comment type="block">/* We get data then EOF, reopen connection to same server,
	     else try next. This avoids DoS from a server which accepts
	     connections and then closes them. */</comment>
	  <if_stmt><if>if <condition>(<expr><name><name>serv</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SERV_GOT_TCP</name></expr>)</condition><block type="pseudo"><block_content>
	    <goto>goto <name>retry</name>;</goto></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <continue>continue;</continue></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

      <comment type="block">/* If the hash of the question section doesn't match the crc we sent, then
	 someone might be attempting to insert bogus values into the cache by 
	 sending replies containing questions and bogus answers. 
	 Try another server, or give up */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>hashp</name> <operator>=</operator> <call><name>hash_questions</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>rsize</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>hashp</name></expr></argument>, <argument><expr><name>HASH_SIZE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if></if_stmt>
      
      <expr_stmt><expr><name><name>serv</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SERV_GOT_TCP</name></expr>;</expr_stmt>
      
      <expr_stmt><expr><operator>*</operator><name>servp</name> <operator>=</operator> <name>serv</name></expr>;</expr_stmt>
      <return>return <expr><name>rsize</name></expr>;</return>
    </block_content>}</block></while>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
		  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
<comment type="block">/* Recurse down the key hierarchy */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tcp_key_recurse</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, 
			   <parameter><decl><type><name>int</name></type> <name>class</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>keyname</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>server</name></decl></parameter>, 
			   <parameter><decl><type><name>int</name></type> <name>have_mark</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mark</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keycount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>first</name></decl>, <decl><type ref="prev"/><name>last</name></decl>, <decl><type ref="prev"/><name>start</name></decl>, <decl><type ref="prev"/><name>new_status</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>new_header</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>m</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>log_save</name></decl>;</decl_stmt>
            
      <comment type="block">/* limit the amount of work we do, to avoid cycling forever on loops in the DNS */</comment>
      <if_stmt><if>if <condition>(<expr><operator>--</operator><operator>(</operator><operator>*</operator><name>keycount</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>new_status</name> <operator>=</operator> <name>STAT_ABANDONED</name></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><call><name>STAT_ISEQUAL</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>STAT_NEED_KEY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>new_status</name> <operator>=</operator> <call><name>dnssec_validate_by_ds</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>keyname</name></expr></argument>, <argument><expr><name>class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><call><name>STAT_ISEQUAL</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>STAT_NEED_DS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>new_status</name> <operator>=</operator> <call><name>dnssec_validate_ds</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>keyname</name></expr></argument>, <argument><expr><name>class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content> 
	<expr_stmt><expr><name>new_status</name> <operator>=</operator> <call><name>dnssec_validate_reply</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>keyname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>class</name></expr></argument>,
					   <argument><expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DNSSEC_IGN_NS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>server</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SERV_DO_DNSSEC</name><operator>)</operator></expr></argument>,
					   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STAT_ISEQUAL</name><argument_list>(<argument><expr><name>new_status</name></expr></argument>, <argument><expr><name>STAT_NEED_DS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>STAT_ISEQUAL</name><argument_list>(<argument><expr><name>new_status</name></expr></argument>, <argument><expr><name>STAT_NEED_KEY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<break>break;</break></block_content></block></if></if_stmt>

      <comment type="block">/* Can't validate because we need a key/DS whose name now in keyname.
	 Make query for same, and recurse to validate */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>packet</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>packet</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><literal type="number">65536</literal> <operator>+</operator> <name>MAXDNAME</name> <operator>+</operator> <name>RRFIXEDSZ</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>u16</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>new_header</name> <operator>=</operator> <operator>(</operator>struct <name>dns_header</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>packet</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>packet</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>new_status</name> <operator>=</operator> <name>STAT_ABANDONED</name></expr>;</expr_stmt>
	  <break>break;</break>
	</block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>dnssec_generate_query</name><argument_list>(<argument><expr><name>new_header</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>new_header</name><operator>)</operator> <operator>+</operator> <literal type="number">65536</literal></expr></argument>, <argument><expr><name>keyname</name></expr></argument>, <argument><expr><name>class</name></expr></argument>, 
				<argument><expr><ternary><condition><expr><call><name>STAT_ISEQUAL</name><argument_list>(<argument><expr><name>new_status</name></expr></argument>, <argument><expr><name>STAT_NEED_KEY</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>T_DNSKEY</name></expr> </then><else>: <expr><name>T_DS</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>server</name><operator>-&gt;</operator><name>edns_pktsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>start</name> <operator>=</operator> <call><name>dnssec_server</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>keyname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
	  <operator>(</operator><name>m</name> <operator>=</operator> <call><name>tcp_talk</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>have_mark</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>server</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>new_status</name> <operator>=</operator> <name>STAT_ABANDONED</name></expr>;</expr_stmt>
	  <break>break;</break>
	</block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>log_save</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>log_display_id</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>log_display_id</name></name> <operator>=</operator> <operator>++</operator><name><name>daemon</name><operator>-&gt;</operator><name>log_id</name></name></expr>;</expr_stmt>
      
      <expr_stmt><expr><call><name>log_query_mysockaddr</name><argument_list>(<argument><expr><name>F_NOEXTRA</name> <operator>|</operator> <name>F_DNSSEC</name> <operator>|</operator> <name>F_SERVER</name></expr></argument>, <argument><expr><name>keyname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>server</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>,
			    <argument><expr><ternary><condition><expr><call><name>STAT_ISEQUAL</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>STAT_NEED_KEY</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"dnssec-query[DNSKEY]"</literal></expr> </then><else>: <expr><literal type="string">"dnssec-query[DS]"</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
      <expr_stmt><expr><name>new_status</name> <operator>=</operator> <call><name>tcp_key_recurse</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>new_status</name></expr></argument>, <argument><expr><name>new_header</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>class</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>keyname</name></expr></argument>, <argument><expr><name>server</name></expr></argument>, <argument><expr><name>have_mark</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>, <argument><expr><name>keycount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>log_display_id</name></name> <operator>=</operator> <name>log_save</name></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STAT_ISEQUAL</name><argument_list>(<argument><expr><name>new_status</name></expr></argument>, <argument><expr><name>STAT_OK</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></while>
    
  <if_stmt><if>if <condition>(<expr><name>packet</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    
  <return>return <expr><name>new_status</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/* The daemon forks before calling this: it should deal with one connection,
   blocking as necessary, and then return. Note, need to be a bit careful
   about resources for debug mode, when the fork is suppressed: that's
   done by the caller. */</comment>
<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tcp_request</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>confd</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>,
			   <parameter><decl><type><name><name>union</name> <name>mysockaddr</name></name> <modifier>*</modifier></type><name>local_addr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>netmask</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>auth_dns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>norebind</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONNTRACK</name></cpp:ifdef>
  <decl_stmt><decl><type><name>int</name></type> <name>is_single_query</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>allowed</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_AUTH</name></cpp:ifdef>
  <decl_stmt><decl><type><name>int</name></type> <name>local_auth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>int</name></type> <name>checking_disabled</name></decl>, <decl><type ref="prev"/><name>do_bit</name></decl>, <decl><type ref="prev"/><name>added_pheader</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>have_pseudoheader</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>cacheable</name></decl>, <decl><type ref="prev"/><name>no_cache_dnssec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cache_secure</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>bogusanswer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>m</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>qtype</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>gotname</name></decl>;</decl_stmt>
  <comment type="block">/* Max TCP packet + slop + size */</comment>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><call><name>whine_malloc</name><argument_list>(<argument><expr><literal type="number">65536</literal> <operator>+</operator> <name>MAXDNAME</name> <operator>+</operator> <name>RRFIXEDSZ</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>u16</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>payload</name> <init>= <expr><operator>&amp;</operator><name><name>packet</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>
  <comment type="block">/* largest field in header is 16-bits, so this is still sufficiently aligned */</comment>
  <decl_stmt><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name> <init>= <expr><operator>(</operator>struct <name>dns_header</name> <operator>*</operator><operator>)</operator><name>payload</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u16</name> <modifier>*</modifier></type><name>length</name> <init>= <expr><operator>(</operator><name>u16</name> <operator>*</operator><operator>)</operator><name>packet</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>serv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>dst_addr_4</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>union</name> <name>mysockaddr</name></name></type> <name>peer_addr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>socklen_t</name></type> <name>peer_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr>union <name>mysockaddr</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>query_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pheader</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mark</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>have_mark</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>first</name></decl>, <decl><type ref="prev"/><name>last</name></decl>, <decl><type ref="prev"/><name>stale</name></decl>, <decl><type ref="prev"/><name>do_stale</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u16</name></type> <name>hb3</name></decl>, <decl><type ref="prev"/><name>hb4</name></decl>;</decl_stmt>
    
  <comment type="block" format="doxygen">/************ Pi-hole modification ************/</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>piholeblocked</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <comment type="block" format="doxygen">/**********************************************/</comment>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>packet</name> <operator>||</operator> <call><name>getpeername</name><argument_list>(<argument><expr><name>confd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>peer_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>peer_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>packet</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONNTRACK</name></cpp:ifdef>
  <comment type="block">/* Get connection mark of incoming query to set on outgoing connections. */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CONNTRACK</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CMARK_ALST_EN</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>union</name> <name>all_addr</name></name></type> <name>local</name></decl>;</decl_stmt>
		      
      <if_stmt><if>if <condition>(<expr><name><name>local_addr</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>local</name><operator>.</operator><name>addr6</name></name> <operator>=</operator> <name><name>local_addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>local</name><operator>.</operator><name>addr4</name></name> <operator>=</operator> <name><name>local_addr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_addr</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
      
      <expr_stmt><expr><name>have_mark</name> <operator>=</operator> <call><name>get_incoming_mark</name><argument_list>(<argument><expr><operator>&amp;</operator><name>peer_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>local</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>	

  <comment type="block">/* We can be configured to only accept queries from at-most-one-hop-away addresses. */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOCAL_SERVICE</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>addrlist</name></name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>peer_addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> 
	<block>{<block_content>
	  <for>for <control>(<init><expr><name>addr</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>interface_addrs</name></name></expr>;</init> <condition><expr><name>addr</name></expr>;</condition> <incr><expr><name>addr</name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>addr</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ADDRLIST_IPV6</name><operator>)</operator> <operator>&amp;&amp;</operator>
		<call><name>is_same_net6</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr6</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>peer_addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>prefixlen</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	      <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>netmask</name></decl>;</decl_stmt>
	  <for>for <control>(<init><expr><name>addr</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>interface_addrs</name></name></expr>;</init> <condition><expr><name>addr</name></expr>;</condition> <incr><expr><name>addr</name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	    <block>{<block_content>
	      <expr_stmt><expr><name><name>netmask</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><operator>~</operator><operator>(</operator><name>in_addr_t</name><operator>)</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name><name>addr</name><operator>-&gt;</operator><name>prefixlen</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>addr</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ADDRLIST_IPV6</name><operator>)</operator> <operator>&amp;&amp;</operator> 
		  <call><name>is_same_net</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr4</name></name></expr></argument>, <argument><expr><name><name>peer_addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name></name></expr></argument>, <argument><expr><name>netmask</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<break>break;</break></block_content></block></if></if_stmt>
	    </block_content>}</block></for>
	</block_content>}</block></else></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>addr</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>prettyprint_addr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>peer_addr</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"ignoring query from non-local network %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <return>return <expr><name>packet</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>ede</name> <init>= <expr><name>EDE_UNSET</name></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>query_count</name> <operator>==</operator> <name>TCP_MAX_QUERIES</name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>packet</name></expr>;</return></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>do_stale</name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>size_t</name></type> <name>plen</name></decl>;</decl_stmt>

	  <comment type="block">/* We answered the last query with stale data. Now try and get fresh data.
	     Restore query from answer. */</comment>
	  <expr_stmt><expr><name>pheader</name> <operator>=</operator> <call><name>find_pseudoheader</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>plen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
	  <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb3</name></name> <operator>=</operator> <name>hb3</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb4</name></name> <operator>=</operator> <name>hb4</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>ancount</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>nscount</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>arcount</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
	  <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>resize_packet</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>pheader</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_write</name><argument_list>(<argument><expr><name>confd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>read_write</name><argument_list>(<argument><expr><name>confd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>||</operator>
	      <operator>!</operator><operator>(</operator><name>size</name> <operator>=</operator> <name>c1</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name>c2</name><operator>)</operator> <operator>||</operator>
	      <operator>!</operator><call><name>read_write</name><argument_list>(<argument><expr><name>confd</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><name>packet</name></expr>;</return></block_content></block></if></if_stmt>
	  
	  <comment type="block">/* for stale-answer processing. */</comment>
	  <expr_stmt><expr><name>hb3</name> <operator>=</operator> <name><name>header</name><operator>-&gt;</operator><name>hb3</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>hb4</name> <operator>=</operator> <name><name>header</name><operator>-&gt;</operator><name>hb4</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dns_header</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if></if_stmt>

      <comment type="block">/* Clear buffer beyond request to avoid risk of
	 information disclosure. */</comment>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>payload</name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">65536</literal> <operator>-</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <expr_stmt><expr><name>query_count</name><operator>++</operator></expr>;</expr_stmt>

      <comment type="block">/* log_query gets called indirectly all over the place, so 
	 pass these in global variables - sorry. */</comment>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>log_display_id</name></name> <operator>=</operator> <operator>++</operator><name><name>daemon</name><operator>-&gt;</operator><name>log_id</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>log_source_addr</name></name> <operator>=</operator> <operator>&amp;</operator><name>peer_addr</name></expr>;</expr_stmt>
      
      <comment type="block">/* save state of "cd" flag in query */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>checking_disabled</name> <operator>=</operator> <name><name>header</name><operator>-&gt;</operator><name>hb4</name></name> <operator>&amp;</operator> <name>HB4_CD</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>no_cache_dnssec</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <comment type="line">//********************** Pi-hole modification **********************//</comment>
      <decl_stmt><decl><type><name>ednsData</name></type> <name>edns</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>find_pseudoheader</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pheader</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>FTL_parse_pseudoheaders</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>peer_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>edns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <comment type="line">//******************************************************************//</comment>
       
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>gotname</name> <operator>=</operator> <call><name>extract_request</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>size</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qtype</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_AUTH</name></cpp:ifdef>
	  <decl_stmt><decl><type><name><name>struct</name> <name>auth_zone</name></name> <modifier>*</modifier></type><name>zone</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONNTRACK</name></cpp:ifdef>
	  <expr_stmt><expr><name>is_single_query</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>do_stale</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>log_query_mysockaddr</name><argument_list>(<argument><expr><name>F_QUERY</name> <operator>|</operator> <name>F_FORWARD</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>,
				   <argument><expr><operator>&amp;</operator><name>peer_addr</name></expr></argument>, <argument><expr><ternary><condition><expr><name>auth_dns</name></expr> ?</condition><then> <expr><literal type="string">"auth"</literal></expr> </then><else>: <expr><literal type="string">"query"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>qtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      
	      <expr_stmt><expr><name>piholeblocked</name> <operator>=</operator> <call><name>FTL_new_query</name><argument_list>(<argument><expr><name>F_QUERY</name> <operator>|</operator> <name>F_FORWARD</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>,
					    <argument><expr><operator>&amp;</operator><name>peer_addr</name></expr></argument>, <argument><expr><ternary><condition><expr><name>auth_dns</name></expr> ?</condition><then> <expr><literal type="string">"auth"</literal></expr> </then><else>: <expr><literal type="string">"query"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>qtype</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>log_display_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>edns</name></expr></argument>, <argument><expr><name>TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_AUTH</name></cpp:ifdef>
	      <comment type="block">/* find queries for zones we're authoritative for, and answer them directly */</comment>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>auth_dns</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOCALISE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<for>for <control>(<init><expr><name>zone</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>auth_zones</name></name></expr>;</init> <condition><expr><name>zone</name></expr>;</condition> <incr><expr><name>zone</name> <operator>=</operator> <name><name>zone</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		  <if_stmt><if>if <condition>(<expr><call><name>in_zone</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
		    <block>{<block_content>
		      <expr_stmt><expr><name>auth_dns</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		      <expr_stmt><expr><name>local_auth</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		      <break>break;</break>
		    </block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
      
      <expr_stmt><expr><name>norebind</name> <operator>=</operator> <call><name>domain_no_rebind</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>local_addr</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>dst_addr_4</name> <operator>=</operator> <name><name>local_addr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_addr</name></name></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>dst_addr_4</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
      
      <expr_stmt><expr><name>do_bit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>find_pseudoheader</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pheader</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content> 
	  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>flags</name></decl>;</decl_stmt>
	  
	  <expr_stmt><expr><name>have_pseudoheader</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name>pheader</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <comment type="block">/* udp_size, ext_rcode */</comment>
	  <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>pheader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
	  <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>do_bit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block">/* do bit */</comment> 
	</block_content>}</block></if></if_stmt>
      
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONNTRACK</name></cpp:ifdef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_AUTH</name></cpp:ifdef>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>auth_dns</name> <operator>||</operator> <name>local_auth</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CMARK_ALST_EN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>have_mark</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>u32</name><operator>)</operator><name>mark</name> <operator>&amp;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>allowlist_mask</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name>allowed</name> <operator>=</operator> <call><name>is_query_allowed_for_mark</name><argument_list>(<argument><expr><operator>(</operator><name>u32</name><operator>)</operator><name>mark</name></expr></argument>, <argument><expr><ternary><condition><expr><name>is_single_query</name></expr> ?</condition><then> <expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

      <if_stmt><if>if <condition>(<expr><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONNTRACK</name></cpp:ifdef>
      <if type="elseif">else if <condition>(<expr><operator>!</operator><name>allowed</name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>u16</name></type> <name>swap</name> <init>= <expr><call><name>htons</name><argument_list>(<argument><expr><name>EDE_BLOCKED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	  <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>answer_disallowed</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>(</operator><name>u32</name><operator>)</operator><name>mark</name></expr></argument>, <argument><expr><ternary><condition><expr><name>is_single_query</name></expr> ?</condition><then> <expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name>have_pseudoheader</name> <operator>&amp;&amp;</operator> <name>m</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>add_pseudoheader</name><argument_list>(<argument><expr><name>header</name></expr></argument>,  <argument><expr><name>m</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>header</name><operator>)</operator> <operator>+</operator> <literal type="number">65536</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>edns_pktsz</name></name></expr></argument>,
				 <argument><expr><name>EDNS0_OPTION_EDE</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>swap</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>do_bit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_AUTH</name></cpp:ifdef>
      <if type="elseif">else if <condition>(<expr><name>auth_dns</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>answer_auth</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>header</name><operator>)</operator> <operator>+</operator> <literal type="number">65536</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>size</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>peer_addr</name></expr></argument>, 
			<argument><expr><name>local_auth</name></expr></argument>, <argument><expr><name>do_bit</name></expr></argument>, <argument><expr><name>have_pseudoheader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <else>else
	<block>{<block_content>
	   <decl_stmt><decl><type><name>int</name></type> <name>ad_reqd</name> <init>= <expr><name>do_bit</name></expr></init></decl>;</decl_stmt>
	   <comment type="block">/* RFC 6840 5.7 */</comment>
	   <if_stmt><if>if <condition>(<expr><name><name>header</name><operator>-&gt;</operator><name>hb4</name></name> <operator>&amp;</operator> <name>HB4_AD</name></expr>)</condition><block type="pseudo"><block_content>
	     <expr_stmt><expr><name>ad_reqd</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	  <comment type="block" format="doxygen">/************ Pi-hole modification ************/</comment>
	  <comment type="line">// Interface name is known from before forking</comment>
	  <if_stmt><if>if<condition>(<expr><name>piholeblocked</name></expr>)</condition>
	  <block>{<block_content>
	    <decl_stmt><decl><type><name>int</name></type> <name>ede</name> <init>= <expr><name>EDE_UNSET</name></expr></init></decl>;</decl_stmt>
	    <expr_stmt><expr><name>stale</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	    <comment type="line">// Generate DNS packet for reply</comment>
	    <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>FTL_make_answer</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>header</name><operator>)</operator> <operator>+</operator> <literal type="number">65536</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ede</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <comment type="line">// The pseudoheader may contain important information such as EDNS0 version important for</comment>
	    <comment type="line">// some DNS resolvers (such as systemd-resolved) to work properly. We should not discard them.</comment>
	    <if_stmt><if>if <condition>(<expr><name>have_pseudoheader</name> <operator>&amp;&amp;</operator> <name>m</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name>u16</name></type> <name>swap</name> <init>= <expr><call><name>htons</name><argument_list>(<argument><expr><name>ede</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	      <if_stmt><if>if <condition>(<expr><name>ede</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// Add EDNS0 option EDE if applicable</comment>
		<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>add_pseudoheader</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>header</name><operator>)</operator> <operator>+</operator> <literal type="number">65536</literal></expr></argument>,
				     <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>edns_pktsz</name></name></expr></argument>, <argument><expr><name>EDNS0_OPTION_EDE</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>swap</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>do_bit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	      <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>add_pseudoheader</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>header</name><operator>)</operator> <operator>+</operator> <literal type="number">65536</literal></expr></argument>,
				     <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>edns_pktsz</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>do_bit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	    </block_content>}</block></if></if_stmt>
	  </block_content>}</block></if>
	  <else>else
	  <block>{<block_content>
	  <comment type="block" format="doxygen">/**********************************************/</comment>

	   <if_stmt><if>if <condition>(<expr><name>do_stale</name></expr>)</condition><block type="pseudo"><block_content>
	     <expr_stmt><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
	   <else>else<block type="pseudo"><block_content>
	     <comment type="block">/* m &gt; 0 if answered from cache */</comment>
	     <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>answer_request</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>header</name><operator>)</operator> <operator>+</operator> <literal type="number">65536</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>size</name></expr></argument>, 
				<argument><expr><name>dst_addr_4</name></expr></argument>, <argument><expr><name>netmask</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>ad_reqd</name></expr></argument>, <argument><expr><name>do_bit</name></expr></argument>, <argument><expr><name>have_pseudoheader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	   
	  <comment type="block">/* Do this by steam now we're not in the select() loop */</comment>
	  <expr_stmt><expr><call><name>check_log_writer</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	  
	  <if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>master</name></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>;</decl_stmt>

	      <if_stmt><if>if <condition>(<expr><call><name>lookup_domain</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>gotname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>is_local_answer</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	      <else>else
		<block>{<block_content>
		  <comment type="block">/* No configured servers */</comment>
		  <expr_stmt><expr><name>ede</name> <operator>=</operator> <name>EDE_NOT_READY</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	      
	      <comment type="block">/* don't forward A or AAAA queries for simple names, except the empty name */</comment>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>flags</name> <operator>&amp;&amp;</operator>
		  <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NODOTS_LOCAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		  <operator>(</operator><name>gotname</name> <operator>&amp;</operator> <operator>(</operator><name>F_IPV4</name> <operator>|</operator> <name>F_IPV6</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
		  <operator>!</operator><call><name>strchr</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		  <call><name>strlen</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><call><name>check_for_local_domain</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>F_NOERR</name></expr> </then><else>: <expr><name>F_NXDOMAIN</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
		
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>flags</name> <operator>&amp;&amp;</operator> <name>ede</name> <operator>!=</operator> <name>EDE_NOT_READY</name></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name>master</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>first</name></expr>]</index></name></expr>;</expr_stmt>
		  
		  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_ORDER</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>master</name><operator>-&gt;</operator><name>last_server</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name>start</name> <operator>=</operator> <name>first</name></expr>;</expr_stmt></block_content></block></if>
		  <else>else<block type="pseudo"><block_content>
		    <expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>master</name><operator>-&gt;</operator><name>last_server</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		  
		  <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_edns0_config</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>header</name><operator>)</operator> <operator>+</operator> <literal type="number">65536</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>peer_addr</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cacheable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
		  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DNSSEC_VALID</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SERV_DO_DNSSEC</name><operator>)</operator></expr>)</condition>
		    <block>{<block_content>
		      <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_do_bit</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>header</name><operator>)</operator> <operator>+</operator> <literal type="number">65536</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      
		      <comment type="block">/* For debugging, set Checking Disabled, otherwise, have the upstream check too,
			 this allows it to select auth servers when one is returning bad data. */</comment>
		      <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DNSSEC_DEBUG</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb4</name></name> <operator>|=</operator> <name>HB4_CD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		  
		  <comment type="block">/* Check if we added a pheader on forwarding - may need to
		     strip it from the reply. */</comment>
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>have_pseudoheader</name> <operator>&amp;&amp;</operator> <call><name>find_pseudoheader</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name>added_pheader</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  
		  <comment type="block">/* Loop round available servers until we succeed in connecting to one. */</comment>
		  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>tcp_talk</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>have_mark</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>serv</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		    <block>{<block_content>
		      <expr_stmt><expr><name>ede</name> <operator>=</operator> <name>EDE_NETERR</name></expr>;</expr_stmt>
		      <break>break;</break>
		    </block_content>}</block></if></if_stmt>
		  
		  <comment type="block">/* get query name again for logging - may have been overwritten */</comment>
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>gotname</name> <operator>=</operator> <call><name>extract_request</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>size</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qtype</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><literal type="string">"query"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  <expr_stmt><expr><call><name>log_query_mysockaddr</name><argument_list>(<argument><expr><name>F_SERVER</name> <operator>|</operator> <name>F_FORWARD</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>serv</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
		  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DNSSEC_VALID</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>checking_disabled</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SERV_DO_DNSSEC</name><operator>)</operator></expr>)</condition>
		    <block>{<block_content>
		      <decl_stmt><decl><type><name>int</name></type> <name>keycount</name> <init>= <expr><name>DNSSEC_WORK</name></expr></init></decl>;</decl_stmt> <comment type="block">/* Limit to number of DNSSEC questions, to catch loops and avoid filling cache. */</comment>
		      <decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name>tcp_key_recurse</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>STAT_OK</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>keyname</name></name></expr></argument>, 
						   <argument><expr><name>serv</name></expr></argument>, <argument><expr><name>have_mark</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keycount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>domain</name> <init>= <expr><literal type="string">"result"</literal></expr></init></decl>;</decl_stmt>
		      
		      <decl_stmt><decl><type><name><name>union</name> <name>all_addr</name></name></type> <name>a</name></decl>;</decl_stmt>
		      <expr_stmt><expr><name><name>a</name><operator>.</operator><name>log</name><operator>.</operator><name>ede</name></name> <operator>=</operator> <name>ede</name> <operator>=</operator> <call><name>errflags_to_ede</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      
		      <if_stmt><if>if <condition>(<expr><call><name>STAT_ISEQUAL</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>STAT_ABANDONED</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
			  <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="string">"ABANDONED"</literal></expr>;</expr_stmt>
			  <expr_stmt><expr><name>status</name> <operator>=</operator> <name>STAT_BOGUS</name></expr>;</expr_stmt>
			</block_content>}</block></if>
		      <else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><call><name>STAT_ISEQUAL</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>STAT_SECURE</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"SECURE"</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><call><name>STAT_ISEQUAL</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>STAT_INSECURE</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"INSECURE"</literal></expr> </then><else>: <expr><literal type="string">"BOGUS"</literal></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
		      
		      <if_stmt><if>if <condition>(<expr><call><name>STAT_ISEQUAL</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>STAT_SECURE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>cache_secure</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
		      <if type="elseif">else if <condition>(<expr><call><name>STAT_ISEQUAL</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>STAT_BOGUS</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
			  <expr_stmt><expr><name>no_cache_dnssec</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			  <expr_stmt><expr><name>bogusanswer</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			  
			  <if_stmt><if>if <condition>(<expr><call><name>extract_request</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			    <expr_stmt><expr><name>domain</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		      
		      <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>F_SECSTAT</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		  
		  <comment type="block">/* restore CD bit to the value in the query */</comment>
		  <if_stmt><if>if <condition>(<expr><name>checking_disabled</name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb4</name></name> <operator>|=</operator> <name>HB4_CD</name></expr>;</expr_stmt></block_content></block></if>
		  <else>else<block type="pseudo"><block_content>
		    <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb4</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HB4_CD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		  
		  <comment type="block">/* Never cache answers which are contingent on the source or MAC address EDSN0 option,
		     since the cache is ignorant of such things. */</comment>
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cacheable</name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name>no_cache_dnssec</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  
		  <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>process_reply</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>serv</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>m</name></expr></argument>, 
				    <argument><expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NO_REBIND</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>norebind</name></expr></argument>, <argument><expr><name>no_cache_dnssec</name></expr></argument>, <argument><expr><name>cache_secure</name></expr></argument>, <argument><expr><name>bogusanswer</name></expr></argument>,
				    <argument><expr><name>ad_reqd</name></expr></argument>, <argument><expr><name>do_bit</name></expr></argument>, <argument><expr><name>added_pheader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>peer_addr</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>header</name><operator>)</operator> <operator>+</operator> <literal type="number">65536</literal></expr></argument>, <argument><expr><name>ede</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
	  <comment type="block" format="doxygen">/************ Pi-hole modification ************/</comment>
	  </block_content>}</block></else></if_stmt>
	  <comment type="block" format="doxygen">/**********************************************/</comment>
	</block_content>}</block></else></if_stmt>
	
      <if_stmt><if>if <condition>(<expr><name>do_stale</name></expr>)</condition><block type="pseudo"><block_content>
	<break>break;</break></block_content></block></if></if_stmt>
    
      <comment type="block">/* In case of local answer or no connections made. */</comment>
      <if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>piholeblocked</name></expr>)</condition> <comment type="line">// Pi-hole modified to ensure we don't provide local answers when dropping the reply</comment>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>m</name> <operator>=</operator> <call><name>make_local_answer</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>gotname</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>,
				      <argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>header</name><operator>)</operator> <operator>+</operator> <literal type="number">65536</literal></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>ede</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <break>break;</break></block_content></block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name>have_pseudoheader</name></expr>)</condition>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name>u16</name></type> <name>swap</name> <init>= <expr><call><name>htons</name><argument_list>(<argument><expr><operator>(</operator><name>u16</name><operator>)</operator><name>ede</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><name>ede</name> <operator>!=</operator> <name>EDE_UNSET</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>add_pseudoheader</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>header</name><operator>)</operator> <operator>+</operator> <literal type="number">65536</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>edns_pktsz</name></name></expr></argument>, <argument><expr><name>EDNS0_OPTION_EDE</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>swap</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>do_bit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	      <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>add_pseudoheader</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>header</name><operator>)</operator> <operator>+</operator> <literal type="number">65536</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>edns_pktsz</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>do_bit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><name>stale</name></expr>)</condition>
	 <block>{<block_content>
	   <decl_stmt><decl><type><name>u16</name></type> <name>swap</name> <init>= <expr><call><name>htons</name><argument_list>(<argument><expr><operator>(</operator><name>u16</name><operator>)</operator><name>EDE_STALE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	   
	   <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>add_pseudoheader</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>header</name><operator>)</operator> <operator>+</operator> <literal type="number">65536</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>edns_pktsz</name></name></expr></argument>, <argument><expr><name>EDNS0_OPTION_EDE</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>swap</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>do_bit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 </block_content>}</block></if></if_stmt>
      
      <expr_stmt><expr><call><name>check_log_writer</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONNTRACK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UBUS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_AUTH</name></cpp:ifdef>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>auth_dns</name> <operator>||</operator> <name>local_auth</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CMARK_ALST_EN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>have_mark</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>u32</name><operator>)</operator><name>mark</name> <operator>&amp;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>allowlist_mask</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>report_addresses</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_write</name><argument_list>(<argument><expr><name>confd</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><name>m</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>u16</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<break>break;</break></block_content></block></if></if_stmt>
      
      <comment type="block">/* If we answered with stale data, this process will now try and get fresh data into
	 the cache then and cannot therefore accept new queries. Close the incoming
	 connection to signal that to the client. Then set do_stale and loop round
	 once more to try and get fresh data, after which we exit. */</comment>
      <if_stmt><if>if <condition>(<expr><name>stale</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>shutdown</name><argument_list>(<argument><expr><name>confd</name></expr></argument>, <argument><expr><name>SHUT_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>confd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>do_stale</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

  <comment type="block">/* If we ran once to get fresh data, confd is already closed. */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>do_stale</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>shutdown</name><argument_list>(<argument><expr><name>confd</name></expr></argument>, <argument><expr><name>SHUT_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>confd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <return>return <expr><name>packet</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* return a UDP socket bound to a random port, have to cope with straying into
   occupied port nos and reserved ones. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>random_sock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>source_addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* We need to set IPV6ONLY so we can use the same ports
	 for IPv4 and IPV6, otherwise, in restriced port situations,
	 we can end up with all our available ports in use for 
	 one address family, and the other address family cannot be used. */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>source_addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>int</name></type> <name>opt</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	  <if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_IPV6</name></expr></argument>, <argument><expr><name>IPV6_V6ONLY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><call><name>local_bind</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>source_addr</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ifindex</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>fd</name></expr>;</return></block_content></block></if></if_stmt>

      <comment type="block">/* don't log errors due to running out of available ports, we handle those. */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sockaddr_isnull</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>source_addr</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name>errno</name> <operator>!=</operator> <name>EADDRINUSE</name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>interface</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>prettyprint_addr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>source_addr</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>safe_strncpy</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	  
	  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to bind server socket to %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	  
      <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* compare source addresses and interface, serv2 can be null. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>server_isequal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>serv1</name></decl></parameter>,
			 <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>serv2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><operator>(</operator><name>serv2</name> <operator>&amp;&amp;</operator>
    <name><name>serv2</name><operator>-&gt;</operator><name>ifindex</name></name> <operator>==</operator> <name><name>serv1</name><operator>-&gt;</operator><name>ifindex</name></name> <operator>&amp;&amp;</operator>
    <call><name>sockaddr_isequal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>serv2</name><operator>-&gt;</operator><name>source_addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>serv1</name><operator>-&gt;</operator><name>source_addr</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
    <call><name>strncmp</name><argument_list>(<argument><expr><name><name>serv2</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>, <argument><expr><name><name>serv1</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>, <argument><expr><name>IF_NAMESIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* fdlp points to chain of randomfds already in use by transaction.
   If there's already a suitable one, return it, else allocate a 
   new one and add it to the list. 

   Not leaking any resources in the face of allocation failures
   is rather convoluted here.
   
   Note that rfd-&gt;serv may be NULL, when a server goes away.
*/</comment>
<function><type><name>int</name></type> <name>allocate_rfd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>randfd_list</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>fdlp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>serv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>finger</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ports_full</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>randfd_list</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>up</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rfl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>found</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>found_link</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>randfd</name></name> <modifier>*</modifier></type><name>rfd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ports_avail</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* We can't have more randomsocks for this AF available than ports in  our port range,
     so check that here, to avoid trying and failing to bind every port
     in local_bind(), called from random_sock(). The actual check is below when 
     ports_avail != 0 */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>max_port</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>ports_avail</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>max_port</name></name> <operator>-</operator> <name><name>daemon</name><operator>-&gt;</operator><name>min_port</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>ports_avail</name> <operator>&gt;=</operator> <name>SMALL_PORT_RANGE</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>ports_avail</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* If server has a pre-allocated fd, use that. */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>serv</name><operator>-&gt;</operator><name>sfd</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name><name>serv</name><operator>-&gt;</operator><name>sfd</name><operator>-&gt;</operator><name>fd</name></name></expr>;</return></block_content></block></if></if_stmt>
  
  <comment type="block">/* existing suitable random port socket linked to this transaction?
     Find the last one in the list and count how many there are. */</comment>
  <for>for <control>(<init><expr><name>found</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator> <expr><name>found_link</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>up</name> <operator>=</operator> <name>fdlp</name></expr><operator>,</operator> <expr><name>rfl</name> <operator>=</operator> <operator>*</operator><name>fdlp</name></expr>;</init> <condition><expr><name>rfl</name></expr>;</condition> <incr><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>rfl</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><name>rfl</name> <operator>=</operator> <name><name>rfl</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><call><name>server_isequal</name><argument_list>(<argument><expr><name>serv</name></expr></argument>, <argument><expr><name><name>rfl</name><operator>-&gt;</operator><name>rfd</name><operator>-&gt;</operator><name>serv</name></name></expr></argument>)</argument_list></call></expr>)</condition>
      <block>{<block_content>
	<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>found</name> <operator>=</operator> <name>rfl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>found_link</name> <operator>=</operator> <name>up</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt></block_content></block></for>

  <comment type="block">/* We have the maximum number for this query already. Promote
     the last one on the list to the head, to circulate them,
     and return it. */</comment>
  <if_stmt><if>if <condition>(<expr><name>found</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>randport_limit</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>found_link</name> <operator>=</operator> <name><name>found</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>found</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>*</operator><name>fdlp</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>fdlp</name> <operator>=</operator> <name>found</name></expr>;</expr_stmt>
      <return>return <expr><name><name>found</name><operator>-&gt;</operator><name>rfd</name><operator>-&gt;</operator><name>fd</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>

  <comment type="block">/* check for all available ports in use. */</comment>
  <if_stmt><if>if <condition>(<expr><name>ports_avail</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>ports_inuse</name></decl>;</decl_stmt>

      <for>for <control>(<init><expr><name>ports_inuse</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>numrrand</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>randomsocks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>refcount</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
	    <name><name>daemon</name><operator>-&gt;</operator><name>randomsocks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>serv</name><operator>-&gt;</operator><name>source_addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name><name>serv</name><operator>-&gt;</operator><name>source_addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>&amp;&amp;</operator>
	    <operator>++</operator><name>ports_inuse</name> <operator>&gt;=</operator> <name>ports_avail</name></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name>ports_full</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	    <break>break;</break>
	  </block_content>}</block></if></if_stmt></block_content></block></for>
    </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* limit the number of sockets we have open to avoid starvation of 
     (eg) TFTP. Once we have a reasonable number, randomness should be OK */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ports_full</name></expr>)</condition><block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>numrrand</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>randomsocks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>refcount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>random_sock</name><argument_list>(<argument><expr><name>serv</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>rfd</name> <operator>=</operator> <operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>randomsocks</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>rfd</name><operator>-&gt;</operator><name>serv</name></name> <operator>=</operator> <name>serv</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>rfd</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>rfd</name><operator>-&gt;</operator><name>refcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	  <break>break;</break>
	</block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
    
  <comment type="block">/* No good existing. Need new link. */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rfl</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>rfl_spare</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>rfl_spare</name></name> <operator>=</operator> <name><name>rfl</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>rfl</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>randfd_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* malloc failed, don't leak allocated sock */</comment>
      <if_stmt><if>if <condition>(<expr><name>rfd</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>rfd</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>rfd</name><operator>-&gt;</operator><name>refcount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* No free ones or cannot get new socket, grab an existing one */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rfd</name></expr>)</condition><block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>numrrand</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
      <block>{<block_content>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>j</name> <operator>+</operator> <name>finger</name><operator>)</operator> <operator>%</operator> <name><name>daemon</name><operator>-&gt;</operator><name>numrrand</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>randomsocks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>refcount</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
	    <call><name>server_isequal</name><argument_list>(<argument><expr><name>serv</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>randomsocks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>serv</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	    <name><name>daemon</name><operator>-&gt;</operator><name>randomsocks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>refcount</name> <operator>!=</operator> <literal type="number">0xfffe</literal></expr>)</condition>
	  <block>{<block_content>
	    <decl_stmt><decl><type><name><name>struct</name> <name>randfd_list</name></name> <modifier>*</modifier></type><name>rl</name></decl>;</decl_stmt>
	    <comment type="block">/* Don't pick one we already have. */</comment>
	    <for>for <control>(<init><expr><name>rl</name> <operator>=</operator> <operator>*</operator><name>fdlp</name></expr>;</init> <condition><expr><name>rl</name></expr>;</condition> <incr><expr><name>rl</name> <operator>=</operator> <name><name>rl</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	      <if_stmt><if>if <condition>(<expr><name><name>rl</name><operator>-&gt;</operator><name>rfd</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>randomsocks</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
		<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

	    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rl</name></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name>finger</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>rfd</name> <operator>=</operator> <operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>randomsocks</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>rfd</name><operator>-&gt;</operator><name>refcount</name></name><operator>++</operator></expr>;</expr_stmt>
		<break>break;</break>
	      </block_content>}</block></if></if_stmt>
	  </block_content>}</block></if></if_stmt>
      </block_content>}</block></for></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rfd</name></expr>)</condition> <comment type="block">/* should be when j == daemon-&gt;numrrand */</comment>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>randfd_list</name></name> <modifier>*</modifier></type><name>rfl_poll</name></decl>;</decl_stmt>

      <comment type="block">/* there are no free slots, and non with the same parameters we can piggy-back on. 
	 We're going to have to allocate a new temporary record, distinguished by
	 refcount == 0xffff. This will exist in the frec randfd list, never be shared,
	 and be freed when no longer in use. It will also be held on 
	 the daemon-&gt;rfl_poll list so the poll system can find it. */</comment>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rfl_poll</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>rfl_spare</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>rfl_spare</name></name> <operator>=</operator> <name><name>rfl_poll</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><name>rfl_poll</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>randfd_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rfl_poll</name> <operator>||</operator>
	  <operator>!</operator><operator>(</operator><name>rfd</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>randfd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
	  <operator>(</operator><name>fd</name> <operator>=</operator> <call><name>random_sock</name><argument_list>(<argument><expr><name>serv</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
	  
	  <comment type="block">/* Don't leak anything we may already have */</comment>
	  <expr_stmt><expr><name><name>rfl</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>rfl_spare</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>rfl_spare</name></name> <operator>=</operator> <name>rfl</name></expr>;</expr_stmt>

	  <if_stmt><if>if <condition>(<expr><name>rfl_poll</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name><name>rfl_poll</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>rfl_spare</name></name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>rfl_spare</name></name> <operator>=</operator> <name>rfl_poll</name></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name>rfd</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  
	  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> <comment type="block">/* doom */</comment>
	</block_content>}</block></if></if_stmt>

      <comment type="block">/* Note rfd-&gt;serv not set here, since it's not reused */</comment>
      <expr_stmt><expr><name><name>rfd</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>rfd</name><operator>-&gt;</operator><name>refcount</name></name> <operator>=</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt> <comment type="block">/* marker for temp record */</comment>

      <expr_stmt><expr><name><name>rfl_poll</name><operator>-&gt;</operator><name>rfd</name></name> <operator>=</operator> <name>rfd</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>rfl_poll</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>rfl_poll</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>rfl_poll</name></name> <operator>=</operator> <name>rfl_poll</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><name><name>rfl</name><operator>-&gt;</operator><name>rfd</name></name> <operator>=</operator> <name>rfd</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rfl</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>*</operator><name>fdlp</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>fdlp</name> <operator>=</operator> <name>rfl</name></expr>;</expr_stmt>
  
  <return>return <expr><name><name>rfl</name><operator>-&gt;</operator><name>rfd</name><operator>-&gt;</operator><name>fd</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>free_rfds</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>randfd_list</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>fdlp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>randfd_list</name></name> <modifier>*</modifier></type><name>tmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rfl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>poll</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>up</name></decl>;</decl_stmt>
  
  <for>for <control>(<init><expr><name>rfl</name> <operator>=</operator> <operator>*</operator><name>fdlp</name></expr>;</init> <condition><expr><name>rfl</name></expr>;</condition> <incr><expr><name>rfl</name> <operator>=</operator> <name>tmp</name></expr></incr>)</control>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>rfl</name><operator>-&gt;</operator><name>rfd</name><operator>-&gt;</operator><name>refcount</name></name> <operator>==</operator> <literal type="number">0xffff</literal> <operator>||</operator> <operator>--</operator><operator>(</operator><name><name>rfl</name><operator>-&gt;</operator><name>rfd</name><operator>-&gt;</operator><name>refcount</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>rfl</name><operator>-&gt;</operator><name>rfd</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <comment type="block">/* temporary overflow record */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>rfl</name><operator>-&gt;</operator><name>rfd</name><operator>-&gt;</operator><name>refcount</name></name> <operator>==</operator> <literal type="number">0xffff</literal></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rfl</name><operator>-&gt;</operator><name>rfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
	  <comment type="block">/* go through the link of all these by steam to delete.
	     This list is expected to be almost always empty. */</comment>
	  <for>for <control>(<init><expr><name>poll</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>rfl_poll</name></name></expr><operator>,</operator> <expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>rfl_poll</name></name></expr>;</init> <condition><expr><name>poll</name></expr>;</condition> <incr><expr><name>poll</name> <operator>=</operator> <name>next</name></expr></incr>)</control>
	    <block>{<block_content>
	      <expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>poll</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><name><name>poll</name><operator>-&gt;</operator><name>rfd</name></name> <operator>==</operator> <name><name>rfl</name><operator>-&gt;</operator><name>rfd</name></name></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name><name>poll</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>poll</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>rfl_spare</name></name></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>rfl_spare</name></name> <operator>=</operator> <name>poll</name></expr>;</expr_stmt>
		</block_content>}</block></if>
	      <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>poll</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	    </block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>rfl</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>rfl</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>rfl_spare</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>rfl_spare</name></name> <operator>=</operator> <name>rfl</name></expr>;</expr_stmt>
    </block_content>}</block></for>

  <expr_stmt><expr><operator>*</operator><name>fdlp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_frec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>frec</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>frec_src</name></name> <modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
  
  <comment type="block">/* add back to freelist if not the record builtin to every frec. */</comment>
  <for>for <control>(<init><expr><name>last</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>frec_src</name><operator>.</operator><name>next</name></name></expr>;</init> <condition><expr><name>last</name> <operator>&amp;&amp;</operator> <name><name>last</name><operator>-&gt;</operator><name>next</name></name></expr>;</condition> <incr><expr><name>last</name> <operator>=</operator> <name><name>last</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></for>
  <if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>last</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>free_frec_src</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>free_frec_src</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>frec_src</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>frec_src</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>    
  <expr_stmt><expr><call><name>free_rfds</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>rfds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sentto</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>stash</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>blockdata_free</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>stash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>stash</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
  <comment type="block">/* Anything we're waiting on is pointless now, too */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>blocking_query</name></name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>frec</name></name> <modifier>*</modifier></type><name>n</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>up</name></decl>;</decl_stmt>

      <comment type="block">/* unlink outselves from the blocking query's dependents list. */</comment>
      <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>blocking_query</name><operator>-&gt;</operator><name>dependent</name></name></expr><operator>,</operator> <expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>blocking_query</name><operator>-&gt;</operator><name>dependent</name></name></expr>;</init> <condition><expr><name>n</name></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next_dependent</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>f</name></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next_dependent</name></name></expr>;</expr_stmt>
	    <break>break;</break>
	  </block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
	  <expr_stmt><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>n</name><operator>-&gt;</operator><name>next_dependent</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>

      <comment type="block">/* If we were the only/last dependent, free the blocking query too. */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>blocking_query</name><operator>-&gt;</operator><name>dependent</name></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>free_frec</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>blocking_query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>blocking_query</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>dependent</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>next_dependent</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<comment type="block">/* Impose an absolute
   limit of 4*TIMEOUT before we wipe things (for random sockets).
   If force is set, always return a result, even if we have
   to allocate above the limit, and don'y free any records.
   This is set when allocating for DNSSEC to avoid cutting off
   the branch we are sitting on. */</comment>
<function><type><specifier>static</specifier> <name><name>struct</name> <name>frec</name></name> <modifier>*</modifier></type><name>get_new_frec</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>master</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>frec</name></name> <modifier>*</modifier></type><name>f</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>oldest</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>target</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
  
  <comment type="block">/* look for free records, garbage collect old records and count number in use by our server-group. */</comment>
  <for>for <control>(<init><expr><name>f</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>frec_list</name></name></expr><operator>,</operator> <expr><name>oldest</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator> <expr><name>target</name> <operator>=</operator>  <name>NULL</name></expr><operator>,</operator> <expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>f</name></expr>;</condition> <incr><expr><name>f</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>sentto</name></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>target</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt></block_content></block></if>
      <else>else
	<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
	  <comment type="block">/* Don't free DNSSEC sub-queries here, as we may end up with
	     dangling references to them. They'll go when their "real" query 
	     is freed. */</comment>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>dependent</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>force</name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><call><name>difftime</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>time</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal><operator>*</operator><name>TIMEOUT</name></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><name>METRIC_DNS_UNANSWERED_QUERY</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>free_frec</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name>target</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
		</block_content>}</block></if>
	      <if type="elseif">else if <condition>(<expr><operator>!</operator><name>oldest</name> <operator>||</operator> <call><name>difftime</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>time</name></name></expr></argument>, <argument><expr><name><name>oldest</name><operator>-&gt;</operator><name>time</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>oldest</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>sentto</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><call><name>difftime</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>time</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <name>TIMEOUT</name> <operator>&amp;&amp;</operator> <call><name>server_samegroup</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>sentto</name></name></expr></argument>, <argument><expr><name>master</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>force</name> <operator>&amp;&amp;</operator> <name>count</name> <operator>&gt;=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>ftabsize</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>query_full</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>master</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>target</name> <operator>&amp;&amp;</operator> <name>oldest</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><call><name>difftime</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>oldest</name><operator>-&gt;</operator><name>time</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <name>TIMEOUT</name></expr>)</condition>
    <block>{<block_content> 
      <comment type="block">/* can't find empty one, use oldest if there is one and it's older than timeout */</comment>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><name>METRIC_DNS_UNANSWERED_QUERY</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>free_frec</name><argument_list>(<argument><expr><name>oldest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>target</name> <operator>=</operator> <name>oldest</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>target</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>target</name> <operator>=</operator> <operator>(</operator>struct <name>frec</name> <operator>*</operator><operator>)</operator><call><name>whine_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>frec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>frec_list</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>frec_list</name></name> <operator>=</operator> <name>target</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>target</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>time</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>forward_delay</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>fast_retry_time</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  
  <return>return <expr><name>target</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>query_full</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>domain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>time_t</name></type> <name>last_log</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><call><name>difftime</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>last_log</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>last_log</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>domain</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>domain</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Maximum number of concurrent DNS queries reached (max: %d)"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>ftabsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Maximum number of concurrent DNS queries to %s reached (max: %d)"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>ftabsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name><name>struct</name> <name>frec</name></name> <modifier>*</modifier></type><name>lookup_frec</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>firstp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>lastp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>frec</name></name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>first</name></decl>, <decl><type ref="prev"/><name>last</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>randfd_list</name></name> <modifier>*</modifier></type><name>fdl</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>hash</name></expr>)</condition><block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>f</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>frec_list</name></name></expr>;</init> <condition><expr><name>f</name></expr>;</condition> <incr><expr><name>f</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>sentto</name></name> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>new_id</name></name> <operator>==</operator> <name>id</name> <operator>&amp;&amp;</operator> 
	  <operator>(</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name>HASH_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>filter_servers</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>sentto</name><operator>-&gt;</operator><name>arrayposn</name></name></expr></argument>, <argument><expr><name>F_SERVER</name></expr></argument>, <argument><expr><name>firstp</name></expr></argument>, <argument><expr><name>lastp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
	  <comment type="block">/* sent from random port */</comment>
	  <for>for <control>(<init><expr><name>fdl</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>rfds</name></name></expr>;</init> <condition><expr><name>fdl</name></expr>;</condition> <incr><expr><name>fdl</name> <operator>=</operator> <name><name>fdl</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><name><name>fdl</name><operator>-&gt;</operator><name>rfd</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <name>fd</name></expr>)</condition><block type="pseudo"><block_content>
	      <return>return <expr><name>f</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
	  
	  <comment type="block">/* Sent to upstream from socket associated with a server. 
	     Note we have to iterate over all the possible servers, since they may
	     have different bound sockets. */</comment>
	  <for>for <control>(<init><expr><name>first</name> <operator>=</operator> <operator>*</operator><name>firstp</name></expr><operator>,</operator> <expr><name>last</name> <operator>=</operator> <operator>*</operator><name>lastp</name></expr>;</init> <condition><expr><name>first</name> <operator>!=</operator> <name>last</name></expr>;</condition> <incr><expr><name>first</name><operator>++</operator></expr></incr>)</control>
	    <block>{<block_content>
	      <expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>first</name></expr>]</index></name></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sfd</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>sfd</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <name>fd</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>f</name></expr>;</return></block_content></block></if></if_stmt>
	    </block_content>}</block></for>
	</block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
  
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>frec</name></name> <modifier>*</modifier></type><name>lookup_frec_by_query</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flagmask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>frec</name></name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>hash</name></expr>)</condition><block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>f</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>frec_list</name></name></expr>;</init> <condition><expr><name>f</name></expr>;</condition> <incr><expr><name>f</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>sentto</name></name> <operator>&amp;&amp;</operator>
	  <operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>flagmask</name><operator>)</operator> <operator>==</operator> <name>flags</name> <operator>&amp;&amp;</operator>
	  <call><name>memcmp</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name>HASH_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>f</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
  
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
<comment type="block">/* DNSSEC frecs have the complete query in the block stash.
   Search for an existing query using that. */</comment>
<function><type><specifier>static</specifier> <name><name>struct</name> <name>frec</name></name> <modifier>*</modifier></type><name>lookup_frec_dnssec</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>class</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>)</parameter_list>
<block>{<block_content>
   <decl_stmt><decl><type><name><name>struct</name> <name>frec</name></name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

   <for>for <control>(<init><expr><name>f</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>frec_list</name></name></expr>;</init> <condition><expr><name>f</name></expr>;</condition> <incr><expr><name>f</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
     <if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>sentto</name></name> <operator>&amp;&amp;</operator>
	 <operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>flags</name><operator>)</operator> <operator>&amp;&amp;</operator>
	 <call><name>blockdata_retrieve</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>stash</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>stash_len</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>header</name></expr></argument>)</argument_list></call></expr>)</condition>
       <block>{<block_content>
	 <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>header</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
	 <decl_stmt><decl><type><name>int</name></type> <name>hclass</name></decl>;</decl_stmt>

	 <if_stmt><if>if <condition>(<expr><call><name>extract_name</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>stash_len</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	   <continue>continue;</continue></block_content></block></if></if_stmt>

	 <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>  <comment type="block">/* type, known from flags */</comment> 
	 <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>hclass</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	 <if_stmt><if>if <condition>(<expr><name>class</name> <operator>!=</operator> <name>hclass</name></expr>)</condition><block type="pseudo"><block_content>
	   <continue>continue;</continue></block_content></block></if></if_stmt>

	 <return>return <expr><name>f</name></expr>;</return>
       </block_content>}</block></if></if_stmt></block_content></block></for>

   <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Send query packet again, if we can. */</comment>
<function><type><name>void</name></type> <name>resend_query</name><parameter_list>()</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>srv_save</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>server_send</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>srv_save</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>fd_save</name></name></expr></argument>,
		<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>packet_len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* A server record is going away, remove references to it */</comment>
<function><type><name>void</name></type> <name>server_gone</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>server</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>frec</name></name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  
  <for>for <control>(<init><expr><name>f</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>frec_list</name></name></expr>;</init> <condition><expr><name>f</name></expr>;</condition> <incr><expr><name>f</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>sentto</name></name> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>sentto</name></name> <operator>==</operator> <name>server</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>free_frec</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

  <comment type="block">/* If any random socket refers to this server, NULL the reference.
     No more references to the socket will be created in the future. */</comment>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>numrrand</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>randomsocks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>refcount</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>randomsocks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>serv</name> <operator>==</operator> <name>server</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>randomsocks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>serv</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
  
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>srv_save</name></name> <operator>==</operator> <name>server</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>srv_save</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* return unique random ids. */</comment>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>short</name></type> <name>get_id</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>frec</name></name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
  
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rand16</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* ensure id is unique. */</comment>
      <for>for <control>(<init><expr><name>f</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>frec_list</name></name></expr>;</init> <condition><expr><name>f</name></expr>;</condition> <incr><expr><name>f</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>sentto</name></name> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>new_id</name></name> <operator>==</operator> <name>ret</name></expr>)</condition><block type="pseudo"><block_content>
	  <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>
</unit>
