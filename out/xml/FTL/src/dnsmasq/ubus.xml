<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/dnsmasq/ubus.c"><comment type="block">/* dnsmasq is Copyright (c) 2000-2022 Simon Kelley

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 dated June, 1991, or
   (at your option) version 3 dated 29 June, 2007.
 
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
     
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnsmasq.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UBUS</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libubus.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>blob_buf</name></name></type> <name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>error_logged</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ubus_handle_metrics</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ubus_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ubus_object</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
			       <parameter><decl><type><name><name>struct</name> <name>ubus_request_data</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>method</name></decl></parameter>,
			       <parameter><decl><type><name><name>struct</name> <name>blob_attr</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONNTRACK</name></cpp:ifdef>
<enum>enum <block>{
  <decl><name>SET_CONNMARK_ALLOWLIST_MARK</name></decl>,
  <decl><name>SET_CONNMARK_ALLOWLIST_MASK</name></decl>,
  <decl><name>SET_CONNMARK_ALLOWLIST_PATTERNS</name></decl>
}</block>;</enum>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>blobmsg_policy</name></name></type> <name><name>set_connmark_allowlist_policy</name><index>[]</index></name> <init>= <expr><block>{
  <expr><index>[<expr><name>SET_CONNMARK_ALLOWLIST_MARK</name></expr>]</index> <operator>=</operator> <block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mark"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>BLOBMSG_TYPE_INT32</name></expr>
  }</block></expr>,
  <expr><index>[<expr><name>SET_CONNMARK_ALLOWLIST_MASK</name></expr>]</index> <operator>=</operator> <block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mask"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>BLOBMSG_TYPE_INT32</name></expr>
  }</block></expr>,
  <expr><index>[<expr><name>SET_CONNMARK_ALLOWLIST_PATTERNS</name></expr>]</index> <operator>=</operator> <block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"patterns"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>BLOBMSG_TYPE_ARRAY</name></expr>
  }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ubus_handle_set_connmark_allowlist</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ubus_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ubus_object</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
					      <parameter><decl><type><name><name>struct</name> <name>ubus_request_data</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>method</name></decl></parameter>,
					      <parameter><decl><type><name><name>struct</name> <name>blob_attr</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ubus_subscribe_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ubus_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ubus_object</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ubus_method</name></name></type> <name><name>ubus_object_methods</name><index>[]</index></name> <init>= <expr><block>{
  <expr><call><name>UBUS_METHOD_NOARG</name><argument_list>(<argument><expr><literal type="string">"metrics"</literal></expr></argument>, <argument><expr><name>ubus_handle_metrics</name></expr></argument>)</argument_list></call></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONNTRACK</name></cpp:ifdef>
  <expr><call><name>UBUS_METHOD</name><argument_list>(<argument><expr><literal type="string">"set_connmark_allowlist"</literal></expr></argument>, <argument><expr><name>ubus_handle_set_connmark_allowlist</name></expr></argument>, <argument><expr><name>set_connmark_allowlist_policy</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>ubus_object_type</name></name></type> <name>ubus_object_type</name> <init>=
  <expr><call><name>UBUS_OBJECT_TYPE</name><argument_list>(<argument><expr><literal type="string">"dnsmasq"</literal></expr></argument>, <argument><expr><name>ubus_object_methods</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>ubus_object</name></name></type> <name>ubus_object</name> <init>= <expr><block>{
  <expr><operator>.</operator><name>name</name> <operator>=</operator> <name>NULL</name></expr>,
  <expr><operator>.</operator><name>type</name> <operator>=</operator> <operator>&amp;</operator><name>ubus_object_type</name></expr>,
  <expr><operator>.</operator><name>methods</name> <operator>=</operator> <name>ubus_object_methods</name></expr>,
  <expr><operator>.</operator><name>n_methods</name> <operator>=</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>ubus_object_methods</name></expr></argument>)</argument_list></call></expr>,
  <expr><operator>.</operator><name>subscribe_cb</name> <operator>=</operator> <name>ubus_subscribe_cb</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ubus_subscribe_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ubus_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ubus_object</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ctx</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"UBus subscription callback: %s subscriber(s)"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name><name>obj</name><operator>-&gt;</operator><name>has_subscribers</name></name></expr> ?</condition><then> <expr><literal type="string">"1"</literal></expr> </then><else>: <expr><literal type="string">"0"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ubus_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ubus_context</name></name> <modifier>*</modifier></type><name>ubus</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>ubus_free</name><argument_list>(<argument><expr><name>ubus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>ubus</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  
  <comment type="block">/* Forces re-initialization when we're reusing the same definitions later on. */</comment>
  <expr_stmt><expr><name><name>ubus_object</name><operator>.</operator><name>id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ubus_object_type</name><operator>.</operator><name>id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ubus_disconnect_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ubus_context</name></name> <modifier>*</modifier></type><name>ubus</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ubus_reconnect</name><argument_list>(<argument><expr><name>ubus</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Cannot reconnect to UBus: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ubus_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>ubus_destroy</name><argument_list>(<argument><expr><name>ubus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>ubus_init</name><parameter_list>()</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>ubus_context</name></name> <modifier>*</modifier></type><name>ubus</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ubus</name> <operator>=</operator> <call><name>ubus_connect</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><name><name>ubus_object</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>ubus_name</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ubus_add_object</name><argument_list>(<argument><expr><name>ubus</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ubus_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>ubus_destroy</name><argument_list>(<argument><expr><name>ubus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>ubus_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>    
  
  <expr_stmt><expr><name><name>ubus</name><operator>-&gt;</operator><name>connection_lost</name></name> <operator>=</operator> <name>ubus_disconnect_cb</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>ubus</name></name> <operator>=</operator> <name>ubus</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>error_logged</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_ubus_listeners</name><parameter_list>()</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>ubus_context</name></name> <modifier>*</modifier></type><name>ubus</name> <init>= <expr><operator>(</operator>struct <name>ubus_context</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>ubus</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ubus</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>error_logged</name></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Cannot set UBus listeners: no connection"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>error_logged</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>error_logged</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>poll_listen</name><argument_list>(<argument><expr><name><name>ubus</name><operator>-&gt;</operator><name>sock</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>POLLIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>poll_listen</name><argument_list>(<argument><expr><name><name>ubus</name><operator>-&gt;</operator><name>sock</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>POLLERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>poll_listen</name><argument_list>(<argument><expr><name><name>ubus</name><operator>-&gt;</operator><name>sock</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>POLLHUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>check_ubus_listeners</name><parameter_list>()</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>ubus_context</name></name> <modifier>*</modifier></type><name>ubus</name> <init>= <expr><operator>(</operator>struct <name>ubus_context</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>ubus</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ubus</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>error_logged</name></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Cannot poll UBus listeners: no connection"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>error_logged</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><name>error_logged</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>poll_check</name><argument_list>(<argument><expr><name><name>ubus</name><operator>-&gt;</operator><name>sock</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>POLLIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>ubus_handle_event</name><argument_list>(<argument><expr><name>ubus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><call><name>poll_check</name><argument_list>(<argument><expr><name><name>ubus</name><operator>-&gt;</operator><name>sock</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>POLLHUP</name> <operator>|</operator> <name>POLLERR</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Disconnecting from UBus"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>ubus_destroy</name><argument_list>(<argument><expr><name>ubus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK</name><parameter_list>(<parameter><type><name>stmt</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>do { \
    int e = (stmt); \
    if (e) \
      { \
	my_syslog(LOG_ERR, _("UBus command failed: %d (%s)"), e, #stmt); \
	return (UBUS_STATUS_UNKNOWN_ERROR); \
      } \
  } while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ubus_handle_metrics</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ubus_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ubus_object</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
			       <parameter><decl><type><name><name>struct</name> <name>ubus_request_data</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>method</name></decl></parameter>,
			       <parameter><decl><type><name><name>struct</name> <name>blob_attr</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>obj</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>method</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>msg</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>blob_buf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>BLOBMSG_TYPE_TABLE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>__METRIC_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>blobmsg_add_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><call><name>get_metric_name</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  
  <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>ubus_send_reply</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>head</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>UBUS_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONNTRACK</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ubus_handle_set_connmark_allowlist</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ubus_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ubus_object</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
					      <parameter><decl><type><name><name>struct</name> <name>ubus_request_data</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>method</name></decl></parameter>,
					      <parameter><decl><type><name><name>struct</name> <name>blob_attr</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>blobmsg_policy</name></name> <modifier>*</modifier></type><name>policy</name> <init>= <expr><name>set_connmark_allowlist_policy</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>policy_len</name> <init>= <expr><call><name>countof</name><argument_list>(<argument><expr><name>set_connmark_allowlist_policy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>allowlist</name></name> <modifier>*</modifier></type><name>allowlists</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>allowlists_pos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>patterns</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>patterns_pos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u32</name></type> <name>mark</name></decl>, <decl><type ref="prev"/><name>mask</name> <init>= <expr><name>UINT32_MAX</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>num_patterns</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>blob_attr</name></name> <modifier>*</modifier></type><name><name>tb</name><index>[<expr><name>policy_len</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>blob_attr</name></name> <modifier>*</modifier></type><name>attr</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><call><name>blobmsg_parse</name><argument_list>(<argument><expr><name>policy</name></expr></argument>, <argument><expr><name>policy_len</name></expr></argument>, <argument><expr><name>tb</name></expr></argument>, <argument><expr><call><name>blob_data</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>blob_len</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>UBUS_STATUS_INVALID_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tb</name><index>[<expr><name>SET_CONNMARK_ALLOWLIST_MARK</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>UBUS_STATUS_INVALID_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>mark</name> <operator>=</operator> <call><name>blobmsg_get_u32</name><argument_list>(<argument><expr><name><name>tb</name><index>[<expr><name>SET_CONNMARK_ALLOWLIST_MARK</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mark</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>UBUS_STATUS_INVALID_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>tb</name><index>[<expr><name>SET_CONNMARK_ALLOWLIST_MASK</name></expr>]</index></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>blobmsg_get_u32</name><argument_list>(<argument><expr><name><name>tb</name><index>[<expr><name>SET_CONNMARK_ALLOWLIST_MASK</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mask</name> <operator>||</operator> <operator>(</operator><name>mark</name> <operator>&amp;</operator> <operator>~</operator><name>mask</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>UBUS_STATUS_INVALID_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>tb</name><index>[<expr><name>SET_CONNMARK_ALLOWLIST_PATTERNS</name></expr>]</index></name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>blob_attr</name></name> <modifier>*</modifier></type><name>head</name> <init>= <expr><call><name>blobmsg_data</name><argument_list>(<argument><expr><name><name>tb</name><index>[<expr><name>SET_CONNMARK_ALLOWLIST_PATTERNS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>blobmsg_data_len</name><argument_list>(<argument><expr><name><name>tb</name><index>[<expr><name>SET_CONNMARK_ALLOWLIST_PATTERNS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <macro><name>__blob_for_each_attr</name><argument_list>(<argument>attr</argument>, <argument>head</argument>, <argument>len</argument>)</argument_list></macro>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pattern</name></decl>;</decl_stmt>
	  <if_stmt><if>if <condition>(<expr><call><name>blob_id</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>BLOBMSG_TYPE_STRING</name></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><name>UBUS_STATUS_INVALID_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pattern</name> <operator>=</operator> <call><name>blobmsg_get_string</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><name>UBUS_STATUS_INVALID_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
	  <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_valid_dns_name_pattern</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><name>UBUS_STATUS_INVALID_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
	  <expr_stmt><expr><name>num_patterns</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block>
    </block_content>}</block></if></if_stmt>
  
  <for>for <control>(<init><expr><name>allowlists_pos</name> <operator>=</operator> <operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>allowlists</name></name></expr>;</init> <condition><expr><operator>*</operator><name>allowlists_pos</name></expr>;</condition> <incr><expr><name>allowlists_pos</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>allowlists_pos</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>allowlists_pos</name><operator>)</operator><operator>-&gt;</operator><name>mark</name></name> <operator>==</operator> <name>mark</name> <operator>&amp;&amp;</operator> <name><operator>(</operator><operator>*</operator><name>allowlists_pos</name><operator>)</operator><operator>-&gt;</operator><name>mask</name></name> <operator>==</operator> <name>mask</name></expr>)</condition>
      <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>allowlist</name></name> <modifier>*</modifier></type><name>allowlists_next</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>allowlists_pos</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>patterns_pos</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>allowlists_pos</name><operator>)</operator><operator>-&gt;</operator><name>patterns</name></name></expr>;</init> <condition><expr><operator>*</operator><name>patterns_pos</name></expr>;</condition> <incr><expr><name>patterns_pos</name><operator>++</operator></expr></incr>)</control>
	  <block>{<block_content>
	    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>patterns_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><operator>*</operator><name>patterns_pos</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	  </block_content>}</block></for>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>allowlists_pos</name><operator>)</operator><operator>-&gt;</operator><name>patterns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>allowlists_pos</name><operator>)</operator><operator>-&gt;</operator><name>patterns</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>allowlists_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>allowlists_pos</name> <operator>=</operator> <name>allowlists_next</name></expr>;</expr_stmt>
	<break>break;</break>
      </block_content>}</block></if></if_stmt></block_content></block></for>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>num_patterns</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>UBUS_STATUS_OK</name></expr>;</return></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><name>patterns</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><operator>(</operator><name>num_patterns</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>patterns</name></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>patterns_pos</name> <operator>=</operator> <name>patterns</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>tb</name><index>[<expr><name>SET_CONNMARK_ALLOWLIST_PATTERNS</name></expr>]</index></name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>blob_attr</name></name> <modifier>*</modifier></type><name>head</name> <init>= <expr><call><name>blobmsg_data</name><argument_list>(<argument><expr><name><name>tb</name><index>[<expr><name>SET_CONNMARK_ALLOWLIST_PATTERNS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>blobmsg_data_len</name><argument_list>(<argument><expr><name><name>tb</name><index>[<expr><name>SET_CONNMARK_ALLOWLIST_PATTERNS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <macro><name>__blob_for_each_attr</name><argument_list>(<argument>attr</argument>, <argument>head</argument>, <argument>len</argument>)</argument_list></macro>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pattern</name></decl>;</decl_stmt>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pattern</name> <operator>=</operator> <call><name>blobmsg_get_string</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>patterns_pos</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
	  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>*</operator><name>patterns_pos</name><operator>++</operator></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
    </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><name>allowlists</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>allowlist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>allowlists</name></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>allowlists</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>allowlist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>allowlists</name><operator>-&gt;</operator><name>mark</name></name> <operator>=</operator> <name>mark</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>allowlists</name><operator>-&gt;</operator><name>mask</name></name> <operator>=</operator> <name>mask</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>allowlists</name><operator>-&gt;</operator><name>patterns</name></name> <operator>=</operator> <name>patterns</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>allowlists</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>allowlists</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>allowlists</name></name> <operator>=</operator> <name>allowlists</name></expr>;</expr_stmt>
  <return>return <expr><name>UBUS_STATUS_OK</name></expr>;</return>
  
<label><name>fail</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>patterns</name></expr>)</condition>
    <block>{<block_content>
      <for>for <control>(<init><expr><name>patterns_pos</name> <operator>=</operator> <name>patterns</name></expr>;</init> <condition><expr><operator>*</operator><name>patterns_pos</name></expr>;</condition> <incr><expr><name>patterns_pos</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>patterns_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><operator>*</operator><name>patterns_pos</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></for>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>patterns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>patterns</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>allowlists</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>allowlists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>allowlists</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  <return>return <expr><name>UBUS_STATUS_UNKNOWN_ERROR</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHECK</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK</name><parameter_list>(<parameter><type><name>stmt</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>do { \
    int e = (stmt); \
    if (e) \
      { \
	my_syslog(LOG_ERR, _("UBus command failed: %d (%s)"), e, #stmt); \
	return; \
      } \
  } while (0)</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>ubus_event_bcast</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mac</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>interface</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>ubus_context</name></name> <modifier>*</modifier></type><name>ubus</name> <init>= <expr><operator>(</operator>struct <name>ubus_context</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>ubus</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ubus</name> <operator>||</operator> <operator>!</operator><name><name>ubus_object</name><operator>.</operator><name>has_subscribers</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>blob_buf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>BLOBMSG_TYPE_TABLE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>mac</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>blobmsg_add_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="string">"mac"</literal></expr></argument>, <argument><expr><name>mac</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>ip</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>blobmsg_add_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="string">"ip"</literal></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>blobmsg_add_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>interface</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>blobmsg_add_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="string">"interface"</literal></expr></argument>, <argument><expr><name>interface</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>ubus_notify</name><argument_list>(<argument><expr><name>ubus</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ubus_object</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>head</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONNTRACK</name></cpp:ifdef>
<function><type><name>void</name></type> <name>ubus_event_bcast_connmark_allowlist_refused</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>mark</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>ubus_context</name></name> <modifier>*</modifier></type><name>ubus</name> <init>= <expr><operator>(</operator>struct <name>ubus_context</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>ubus</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ubus</name> <operator>||</operator> <operator>!</operator><name><name>ubus_object</name><operator>.</operator><name>has_subscribers</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>blob_buf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>blobmsg_add_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="string">"mark"</literal></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>blobmsg_add_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>ubus_notify</name><argument_list>(<argument><expr><name>ubus</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ubus_object</name></expr></argument>, <argument><expr><literal type="string">"connmark-allowlist.refused"</literal></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>head</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ubus_event_bcast_connmark_allowlist_resolved</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>mark</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>ttl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>ubus_context</name></name> <modifier>*</modifier></type><name>ubus</name> <init>= <expr><operator>(</operator>struct <name>ubus_context</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>ubus</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ubus</name> <operator>||</operator> <operator>!</operator><name><name>ubus_object</name><operator>.</operator><name>has_subscribers</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>blob_buf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>blobmsg_add_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="string">"mark"</literal></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>blobmsg_add_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>blobmsg_add_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>blobmsg_add_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="string">"ttl"</literal></expr></argument>, <argument><expr><name>ttl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Set timeout to allow UBus subscriber to configure firewall rules before returning. */</comment>
  <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>ubus_notify</name><argument_list>(<argument><expr><name>ubus</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ubus_object</name></expr></argument>, <argument><expr><literal type="string">"connmark-allowlist.resolved"</literal></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>head</name></name></expr></argument>, <comment type="block">/* timeout: */</comment> <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHECK</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_UBUS */</comment>
</unit>
