<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/dnsmasq/network.c"><comment type="block">/* dnsmasq is Copyright (c) 2000-2022 Simon Kelley

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 dated June, 1991, or
   (at your option) version 3 dated 29 June, 2007.
 
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
     
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnsmasq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../dnsmasq_interface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../log.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LINUX_NETWORK</name></cpp:ifdef>

<function><type><name>int</name></type> <name>indextoname</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>ifreq</name></name></type> <name>ifr</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>ifr</name><operator>.</operator><name>ifr_ifindex</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SIOCGIFNAME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>safe_strncpy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>, <argument><expr><name>IF_NAMESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

 <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SOLARIS_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zone.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;alloca.h&gt;</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LIFC_UNDER_IPMP</name></cpp:ifndef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>LIFC_UNDER_IPMP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>indextoname</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>lifc_flags</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>lifnum</name></name></type> <name>lifn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>numifs</name></decl>, <decl><type ref="prev"/><name>bufsize</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>lifconf</name></name></type> <name>lifc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>lifreq</name></name> <modifier>*</modifier></type><name>lifrp</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><call><name>getzoneid</name><argument_list>()</argument_list></call> <operator>==</operator> <name>GLOBAL_ZONEID</name></expr>)</condition> 
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>if_indextoname</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><name>lifc_flags</name> <operator>=</operator> <name>LIFC_NOXMIT</name> <operator>|</operator> <name>LIFC_TEMPORARY</name> <operator>|</operator> <name>LIFC_ALLZONES</name> <operator>|</operator> <name>LIFC_UNDER_IPMP</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lifn</name><operator>.</operator><name>lifn_family</name></name> <operator>=</operator> <name>AF_UNSPEC</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lifn</name><operator>.</operator><name>lifn_flags</name></name> <operator>=</operator> <name>lifc_flags</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SIOCGLIFNUM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lifn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><name>numifs</name> <operator>=</operator> <name><name>lifn</name><operator>.</operator><name>lifn_count</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>bufsize</name> <operator>=</operator> <name>numifs</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>lifreq</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  
  <expr_stmt><expr><name><name>lifc</name><operator>.</operator><name>lifc_family</name></name> <operator>=</operator> <name>AF_UNSPEC</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lifc</name><operator>.</operator><name>lifc_flags</name></name> <operator>=</operator> <name>lifc_flags</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lifc</name><operator>.</operator><name>lifc_len</name></name> <operator>=</operator> <name>bufsize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lifc</name><operator>.</operator><name>lifc_buf</name></name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SIOCGLIFCONF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lifc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>  
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><name>lifrp</name> <operator>=</operator> <name><name>lifc</name><operator>.</operator><name>lifc_req</name></name></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>lifc</name><operator>.</operator><name>lifc_len</name></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>lifreq</name></expr></argument>)</argument_list></sizeof></expr>;</init> <condition><expr><name>i</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr><operator>,</operator> <expr><name>lifrp</name><operator>++</operator></expr></incr>)</control> 
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>lifreq</name></name></type> <name>lifr</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>safe_strncpy</name><argument_list>(<argument><expr><name><name>lifr</name><operator>.</operator><name>lifr_name</name></name></expr></argument>, <argument><expr><name><name>lifrp</name><operator>-&gt;</operator><name>lifr_name</name></name></expr></argument>, <argument><expr><name>IF_NAMESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SIOCGLIFINDEX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lifr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>lifr</name><operator>.</operator><name>lifr_index</name></name> <operator>==</operator> <name>index</name></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>safe_strncpy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>lifr</name><operator>.</operator><name>lifr_name</name></name></expr></argument>, <argument><expr><name>IF_NAMESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>int</name></type> <name>indextoname</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>fd</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><call><name>if_indextoname</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>iface_check</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>family</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>all_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>auth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iname</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>match_addr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Note: have to check all and not bail out early, so that we set the "used" flags.
     May be called with family == AF_LOCAL to check interface by name only. */</comment>
  
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>if_names</name></name> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>if_addrs</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

      <for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>if_names</name></name></expr>;</init> <condition><expr><name>tmp</name></expr>;</condition> <incr><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <call><name>wildcard_match</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
	        
      <if_stmt><if>if <condition>(<expr><name>addr</name></expr>)</condition><block type="pseudo"><block_content>
	<for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>if_addrs</name></name></expr>;</init> <condition><expr><name>tmp</name></expr>;</condition> <incr><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	  <if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>family</name></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_INET</name> <operator>&amp;&amp;</operator>
		  <name><name>tmp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <name><name>addr</name><operator>-&gt;</operator><name>addr4</name><operator>.</operator><name>s_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>match_addr</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
	      <if type="elseif">else if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_INET6</name> <operator>&amp;&amp;</operator>
		       <call><name>IN6_ARE_ADDR_EQUAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>, 
					  <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>addr6</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>match_addr</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>          
    </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>match_addr</name></expr>)</condition><block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>if_except</name></name></expr>;</init> <condition><expr><name>tmp</name></expr>;</condition> <incr><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <call><name>wildcard_match</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
    
  <if_stmt><if>if <condition>(<expr><name>auth</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>auth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

      <for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>authinterface</name></name></expr>;</init> <condition><expr><name>tmp</name></expr>;</condition> <incr><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition>
	  <block>{<block_content>
	    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
		<operator>(</operator><name><name>tmp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>tmp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>family</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	      <break>break;</break></block_content></block></if></if_stmt>
	  </block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>addr</name> <operator>&amp;&amp;</operator> <name><name>tmp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name> <operator>&amp;&amp;</operator> <name>family</name> <operator>==</operator> <name>AF_INET</name> <operator>&amp;&amp;</operator>
		 <name><name>tmp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <name><name>addr</name><operator>-&gt;</operator><name>addr4</name><operator>.</operator><name>s_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
	  <break>break;</break></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>addr</name> <operator>&amp;&amp;</operator> <name><name>tmp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name> <operator>&amp;&amp;</operator> <name>family</name> <operator>==</operator> <name>AF_INET6</name> <operator>&amp;&amp;</operator>
		 <call><name>IN6_ARE_ADDR_EQUAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>addr6</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
      
      <if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition> 
	<block>{<block_content>
	  <expr_stmt><expr><operator>*</operator><name>auth</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

  <return>return <expr><name>ret</name></expr>;</return> 
</block_content>}</block></function>


<comment type="block">/* Fix for problem that the kernel sometimes reports the loopback interface as the
   arrival interface when a packet originates locally, even when sent to address of 
   an interface other than the loopback. Accept packet if it arrived via a loopback 
   interface, even when we're not accepting packets that way, as long as the destination
   address is one we're believing. Interface list must be up-to-date before calling. */</comment>
<function><type><name>int</name></type> <name>loopback_exception</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>family</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>all_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>    
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>ifreq</name></name></type> <name>ifr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>irec</name></name> <modifier>*</modifier></type><name>iface</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>safe_strncpy</name><argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>IF_NAMESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SIOCGIFFLAGS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
      <name><name>ifr</name><operator>.</operator><name>ifr_flags</name></name> <operator>&amp;</operator> <name>IFF_LOOPBACK</name></expr>)</condition>
    <block>{<block_content>
      <for>for <control>(<init><expr><name>iface</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>interfaces</name></name></expr>;</init> <condition><expr><name>iface</name></expr>;</condition> <incr><expr><name>iface</name> <operator>=</operator> <name><name>iface</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><name><name>iface</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>family</name></expr>)</condition>
	  <block>{<block_content>
	    <if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_INET</name></expr>)</condition>
	      <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>iface</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <name><name>addr</name><operator>-&gt;</operator><name>addr4</name><operator>.</operator><name>s_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
		  <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	      </block_content>}</block></if>
	    <if type="elseif">else if <condition>(<expr><call><name>IN6_ARE_ADDR_EQUAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iface</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>addr6</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	      <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	  </block_content>}</block></if></if_stmt></block_content></block></for>
    </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* If we're configured with something like --interface=eth0:0 then we'll listen correctly
   on the relevant address, but the name of the arrival interface, derived from the
   index won't match the config. Check that we found an interface address for the arrival 
   interface: daemon-&gt;interfaces must be up-to-date. */</comment>
<function><type><name>int</name></type> <name>label_exception</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>family</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>all_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>irec</name></name> <modifier>*</modifier></type><name>iface</name></decl>;</decl_stmt>

  <comment type="block">/* labels only supported on IPv4 addresses. */</comment>
  <if_stmt><if>if <condition>(<expr><name>family</name> <operator>!=</operator> <name>AF_INET</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <for>for <control>(<init><expr><name>iface</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>interfaces</name></name></expr>;</init> <condition><expr><name>iface</name></expr>;</condition> <incr><expr><name>iface</name> <operator>=</operator> <name><name>iface</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>iface</name><operator>-&gt;</operator><name>index</name></name> <operator>==</operator> <name>index</name> <operator>&amp;&amp;</operator> <name><name>iface</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name> <operator>&amp;&amp;</operator>
	<name><name>iface</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <name><name>addr</name><operator>-&gt;</operator><name>addr4</name><operator>.</operator><name>s_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>iface_param</name> <block>{
  <decl_stmt><decl><type><name><name>struct</name> <name>addrlist</name></name> <modifier>*</modifier></type><name>spare</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>iface_allowed</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iface_param</name></name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>if_index</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>,
			 <parameter><decl><type><name><name>union</name> <name>mysockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>netmask</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prefixlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iface_flags</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>irec</name></name> <modifier>*</modifier></type><name>iface</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>cond_domain</name></name> <modifier>*</modifier></type><name>cond</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>loopback</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>ifreq</name></name></type> <name>ifr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>tftp_ok</name> <init>= <expr><operator>!</operator><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_TFTP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>dhcp_ok</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>auth_dns</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>is_label</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DHCP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TFTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name><name>struct</name> <name>iname</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>prefixlen</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>indextoname</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>if_index</name></expr></argument>, <argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
      <call><name>ioctl</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SIOCGIFFLAGS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
   
  <expr_stmt><expr><name>loopback</name> <operator>=</operator> <name><name>ifr</name><operator>.</operator><name>ifr_flags</name></name> <operator>&amp;</operator> <name>IFF_LOOPBACK</name></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>loopback</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>dhcp_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>label</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>label</name> <operator>=</operator> <name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>is_label</name> <operator>=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
 
  <comment type="block">/* maintain a list of all addresses on all interfaces for --local-service option */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOCAL_SERVICE</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>addrlist</name></name> <modifier>*</modifier></type><name>al</name></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>spare</name></name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>al</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>spare</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>spare</name></name> <operator>=</operator> <name><name>al</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><name>al</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>addrlist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>al</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name><name>al</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>interface_addrs</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>interface_addrs</name></name> <operator>=</operator> <name>al</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>al</name><operator>-&gt;</operator><name>prefixlen</name></name> <operator>=</operator> <name>prefixlen</name></expr>;</expr_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name><name>al</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr4</name></name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_addr</name></name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>al</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	    </block_content>}</block></if>
	  <else>else
	    <block>{<block_content>
	      <expr_stmt><expr><name><name>al</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr6</name></name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>al</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>ADDRLIST_IPV6</name></expr>;</expr_stmt>
	    </block_content>}</block></else></if_stmt> 
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>!=</operator> <name>AF_INET6</name> <operator>||</operator> <operator>!</operator><call><name>IN6_IS_ADDR_LINKLOCAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>interface_name</name></name> <modifier>*</modifier></type><name>int_name</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>struct</name> <name>addrlist</name></name> <modifier>*</modifier></type><name>al</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_AUTH</name></cpp:ifdef>
      <decl_stmt><decl><type><name><name>struct</name> <name>auth_zone</name></name> <modifier>*</modifier></type><name>zone</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>struct</name> <name>auth_name_list</name></name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

      <comment type="block">/* Find subnets in auth_zones */</comment>
      <for>for <control>(<init><expr><name>zone</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>auth_zones</name></name></expr>;</init> <condition><expr><name>zone</name></expr>;</condition> <incr><expr><name>zone</name> <operator>=</operator> <name><name>zone</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<for>for <control>(<init><expr><name>name</name> <operator>=</operator> <name><name>zone</name><operator>-&gt;</operator><name>interface_names</name></name></expr>;</init> <condition><expr><name>name</name></expr>;</condition> <incr><expr><name>name</name> <operator>=</operator> <name><name>name</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	  <if_stmt><if>if <condition>(<expr><call><name>wildcard_match</name><argument_list>(<argument><expr><name><name>name</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>name</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AUTH4</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
		  <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>spare</name></name></expr>)</condition>
		    <block>{<block_content>
		      <expr_stmt><expr><name>al</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>spare</name></name></expr>;</expr_stmt>
		      <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>spare</name></name> <operator>=</operator> <name><name>al</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		    </block_content>}</block></if>
		  <else>else<block type="pseudo"><block_content>
		    <expr_stmt><expr><name>al</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>addrlist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		  
		  <if_stmt><if>if <condition>(<expr><name>al</name></expr>)</condition>
		    <block>{<block_content>
		      <expr_stmt><expr><name><name>al</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>zone</name><operator>-&gt;</operator><name>subnet</name></name></expr>;</expr_stmt>
		      <expr_stmt><expr><name><name>zone</name><operator>-&gt;</operator><name>subnet</name></name> <operator>=</operator> <name>al</name></expr>;</expr_stmt>
		      <expr_stmt><expr><name><name>al</name><operator>-&gt;</operator><name>prefixlen</name></name> <operator>=</operator> <name>prefixlen</name></expr>;</expr_stmt>
		      <expr_stmt><expr><name><name>al</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr4</name></name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_addr</name></name></expr>;</expr_stmt>
		      <expr_stmt><expr><name><name>al</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		    </block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>name</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AUTH6</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
		  <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>spare</name></name></expr>)</condition>
		    <block>{<block_content>
		      <expr_stmt><expr><name>al</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>spare</name></name></expr>;</expr_stmt>
		      <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>spare</name></name> <operator>=</operator> <name><name>al</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		    </block_content>}</block></if>
		  <else>else<block type="pseudo"><block_content>
		    <expr_stmt><expr><name>al</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>addrlist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		  
		  <if_stmt><if>if <condition>(<expr><name>al</name></expr>)</condition>
		    <block>{<block_content>
		      <expr_stmt><expr><name><name>al</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>zone</name><operator>-&gt;</operator><name>subnet</name></name></expr>;</expr_stmt>
		      <expr_stmt><expr><name><name>zone</name><operator>-&gt;</operator><name>subnet</name></name> <operator>=</operator> <name>al</name></expr>;</expr_stmt>
		      <expr_stmt><expr><name><name>al</name><operator>-&gt;</operator><name>prefixlen</name></name> <operator>=</operator> <name>prefixlen</name></expr>;</expr_stmt>
		      <expr_stmt><expr><name><name>al</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr6</name></name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr>;</expr_stmt>
		      <expr_stmt><expr><name><name>al</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>ADDRLIST_IPV6</name></expr>;</expr_stmt>
		    </block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt> 
	    </block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
       
      <comment type="block">/* Update addresses from interface_names. These are a set independent
	 of the set we're listening on. */</comment>  
      <for>for <control>(<init><expr><name>int_name</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>int_names</name></name></expr>;</init> <condition><expr><name>int_name</name></expr>;</condition> <incr><expr><name>int_name</name> <operator>=</operator> <name><name>int_name</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name><name>int_name</name><operator>-&gt;</operator><name>intr</name></name></expr></argument>, <argument><expr><name>IF_NAMESIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	  <block>{<block_content>
	    <decl_stmt><decl><type><name><name>struct</name> <name>addrlist</name></name> <modifier>*</modifier></type><name>lp</name></decl>;</decl_stmt>

	    <expr_stmt><expr><name>al</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	    
	    <if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>int_name</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>IN4</name> <operator>|</operator> <name>INP4</name><operator>)</operator><operator>)</operator></expr>)</condition>
	      <block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>newaddr</name> <init>= <expr><name><name>addr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_addr</name></name></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>(<expr><name><name>int_name</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>INP4</name></expr>)</condition>
		  <block>{<block_content>
		    <if_stmt><if>if <condition>(<expr><name><name>netmask</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <literal type="number">0xffffffff</literal></expr>)</condition><block type="pseudo"><block_content>
		      <continue>continue;</continue></block_content></block></if></if_stmt>

		    <expr_stmt><expr><name><name>newaddr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <operator>(</operator><name><name>addr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>&amp;</operator> <name><name>netmask</name><operator>.</operator><name>s_addr</name></name><operator>)</operator> <operator>|</operator>
		      <operator>(</operator><name><name>int_name</name><operator>-&gt;</operator><name>proto4</name><operator>.</operator><name>s_addr</name></name> <operator>&amp;</operator> <operator>~</operator><name><name>netmask</name><operator>.</operator><name>s_addr</name></name><operator>)</operator></expr>;</expr_stmt>
		  </block_content>}</block></if></if_stmt>
		
		<comment type="block">/* check for duplicates. */</comment>
		<for>for <control>(<init><expr><name>lp</name> <operator>=</operator> <name><name>int_name</name><operator>-&gt;</operator><name>addr</name></name></expr>;</init> <condition><expr><name>lp</name></expr>;</condition> <incr><expr><name>lp</name> <operator>=</operator> <name><name>lp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		  <if_stmt><if>if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>flags</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>lp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr4</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <name><name>newaddr</name><operator>.</operator><name>s_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
		    <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
		
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lp</name></expr>)</condition>
		  <block>{<block_content>
		    <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>spare</name></name></expr>)</condition>
		      <block>{<block_content>
			<expr_stmt><expr><name>al</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>spare</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>spare</name></name> <operator>=</operator> <name><name>al</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		      </block_content>}</block></if>
		    <else>else<block type="pseudo"><block_content>
		      <expr_stmt><expr><name>al</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>addrlist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		    <if_stmt><if>if <condition>(<expr><name>al</name></expr>)</condition>
		      <block>{<block_content>
			<expr_stmt><expr><name><name>al</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>al</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr4</name></name> <operator>=</operator> <name>newaddr</name></expr>;</expr_stmt>
		      </block_content>}</block></if></if_stmt>
		  </block_content>}</block></if></if_stmt>
	      </block_content>}</block></if></if_stmt>

	    <if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>int_name</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>IN6</name> <operator>|</operator> <name>INP6</name><operator>)</operator><operator>)</operator></expr>)</condition>
	      <block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>newaddr</name> <init>= <expr><name><name>addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>(<expr><name><name>int_name</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>INP6</name></expr>)</condition>
		  <block>{<block_content>
		    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

		    <comment type="block">/* No sense in doing /128. */</comment>
		    <if_stmt><if>if <condition>(<expr><name>prefixlen</name> <operator>==</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>
		      <continue>continue;</continue></block_content></block></if></if_stmt>
		    
		    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		      <block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><operator>(</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">8</literal><operator>)</operator> <operator>-</operator> <name>prefixlen</name></expr></init></decl>;</decl_stmt>
		       
			<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
			  <expr_stmt><expr><name><name>newaddr</name><operator>.</operator><name>s6_addr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>int_name</name><operator>-&gt;</operator><name>proto6</name><operator>.</operator><name>s6_addr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name>bits</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
			  <block>{<block_content>
			    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>mask</name> <init>= <expr><literal type="number">0xff</literal> <operator>&lt;&lt;</operator> <name>bits</name></expr></init></decl>;</decl_stmt>
			    <expr_stmt><expr><name><name>newaddr</name><operator>.</operator><name>s6_addr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
			      <operator>(</operator><name><name>addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_addr</name><operator>.</operator><name>s6_addr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>|</operator>
			      <operator>(</operator><name><name>int_name</name><operator>-&gt;</operator><name>proto6</name><operator>.</operator><name>s6_addr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <operator>~</operator><name>mask</name><operator>)</operator></expr>;</expr_stmt>
			  </block_content>}</block></if></if_stmt>
		      </block_content>}</block></for>
		  </block_content>}</block></if></if_stmt>
		
		<comment type="block">/* check for duplicates. */</comment>
		<for>for <control>(<init><expr><name>lp</name> <operator>=</operator> <name><name>int_name</name><operator>-&gt;</operator><name>addr</name></name></expr>;</init> <condition><expr><name>lp</name></expr>;</condition> <incr><expr><name>lp</name> <operator>=</operator> <name><name>lp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>lp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ADDRLIST_IPV6</name><operator>)</operator> <operator>&amp;&amp;</operator>
		      <call><name>IN6_ARE_ADDR_EQUAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr6</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newaddr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		    <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
					
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lp</name></expr>)</condition>
		  <block>{<block_content>
		    <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>spare</name></name></expr>)</condition>
		      <block>{<block_content>
			<expr_stmt><expr><name>al</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>spare</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>spare</name></name> <operator>=</operator> <name><name>al</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		      </block_content>}</block></if>
		    <else>else<block type="pseudo"><block_content>
		      <expr_stmt><expr><name>al</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>addrlist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		    
		    <if_stmt><if>if <condition>(<expr><name>al</name></expr>)</condition>
		      <block>{<block_content>
			<expr_stmt><expr><name><name>al</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>ADDRLIST_IPV6</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>al</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr6</name></name> <operator>=</operator> <name>newaddr</name></expr>;</expr_stmt>

			<comment type="block">/* Privacy addresses and addresses still undergoing DAD and deprecated addresses
			   don't appear in forward queries, but will in reverse ones. */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>iface_flags</name> <operator>&amp;</operator> <name>IFACE_PERMANENT</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>iface_flags</name> <operator>&amp;</operator> <operator>(</operator><name>IFACE_DEPRECATED</name> <operator>|</operator> <name>IFACE_TENTATIVE</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			  <expr_stmt><expr><name><name>al</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ADDRLIST_REVONLY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		      </block_content>}</block></if></if_stmt>
		  </block_content>}</block></if></if_stmt>
	      </block_content>}</block></if></if_stmt>
	    
	    <if_stmt><if>if <condition>(<expr><name>al</name></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name><name>al</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>int_name</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>int_name</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>al</name></expr>;</expr_stmt>
	      </block_content>}</block></if></if_stmt>
	  </block_content>}</block></if></if_stmt></block_content></block></for>
    </block_content>}</block></if></if_stmt>

  <comment type="block">/* Update addresses for domain=&lt;domain&gt;,&lt;interface&gt; */</comment>
  <for>for <control>(<init><expr><name>cond</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>cond_domain</name></name></expr>;</init> <condition><expr><name>cond</name></expr>;</condition> <incr><expr><name>cond</name> <operator>=</operator> <name><name>cond</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>cond</name><operator>-&gt;</operator><name>interface</name></name> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name><name>cond</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>, <argument><expr><name>IF_NAMESIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
      <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>addrlist</name></name> <modifier>*</modifier></type><name>al</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>spare</name></name></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name>al</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>spare</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>spare</name></name> <operator>=</operator> <name><name>al</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	  </block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
	  <expr_stmt><expr><name>al</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>addrlist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name><name>al</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr4</name></name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_addr</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>al</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	  </block_content>}</block></if>
	<else>else
	  <block>{<block_content>
	    <expr_stmt><expr><name><name>al</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr6</name></name> <operator>=</operator>  <name><name>addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>al</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>ADDRLIST_IPV6</name></expr>;</expr_stmt>
	  </block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>al</name><operator>-&gt;</operator><name>prefixlen</name></name> <operator>=</operator> <name>prefixlen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>al</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>cond</name><operator>-&gt;</operator><name>al</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cond</name><operator>-&gt;</operator><name>al</name></name> <operator>=</operator> <name>al</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt></block_content></block></for>
  
  <comment type="block">/* check whether the interface IP has been added already 
     we call this routine multiple times. */</comment>
  <for>for <control>(<init><expr><name>iface</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>interfaces</name></name></expr>;</init> <condition><expr><name>iface</name></expr>;</condition> <incr><expr><name>iface</name> <operator>=</operator> <name><name>iface</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content> 
    <if_stmt><if>if <condition>(<expr><call><name>sockaddr_isequal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iface</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>iface</name><operator>-&gt;</operator><name>index</name></name> <operator>==</operator> <name>if_index</name></expr>)</condition>
      <block>{<block_content>
	<expr_stmt><expr><name><name>iface</name><operator>-&gt;</operator><name>dad</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>iface_flags</name> <operator>&amp;</operator> <name>IFACE_TENTATIVE</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iface</name><operator>-&gt;</operator><name>found</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* for garbage collection */</comment>
	<expr_stmt><expr><name><name>iface</name><operator>-&gt;</operator><name>netmask</name></name> <operator>=</operator> <name>netmask</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt></block_content></block></for>

 <comment type="block">/* If we are restricting the set of interfaces to use, make
     sure that loopback interfaces are in that set. */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>if_names</name></name> <operator>&amp;&amp;</operator> <name>loopback</name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>iname</name></name> <modifier>*</modifier></type><name>lo</name></decl>;</decl_stmt>
      <for>for <control>(<init><expr><name>lo</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>if_names</name></name></expr>;</init> <condition><expr><name>lo</name></expr>;</condition> <incr><expr><name>lo</name> <operator>=</operator> <name><name>lo</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><name><name>lo</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>lo</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	  <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>lo</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>lo</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>iname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> 
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>lo</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>lo</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>lo</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>lo</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>if_names</name></name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>if_names</name></name> <operator>=</operator> <name>lo</name></expr>;</expr_stmt>
	    </block_content>}</block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>lo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name> <operator>&amp;&amp;</operator>
      <operator>!</operator><call><name>iface_check</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>(</operator>union <name>all_addr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_addr</name></name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>auth_dns</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name> <operator>&amp;&amp;</operator>
      <operator>!</operator><call><name>iface_check</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>(</operator>union <name>all_addr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>auth_dns</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP</name></cpp:ifdef>
  <comment type="block">/* No DHCP where we're doing auth DNS. */</comment>
  <if_stmt><if>if <condition>(<expr><name>auth_dns</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>tftp_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>dhcp_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_except</name></name></expr>;</init> <condition><expr><name>tmp</name></expr>;</condition> <incr><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <call><name>wildcard_match</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>tftp_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name>dhcp_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
 
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_TFTP</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>tftp_interfaces</name></name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* dedicated tftp interface list */</comment>
      <expr_stmt><expr><name>tftp_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>tftp_interfaces</name></name></expr>;</init> <condition><expr><name>tmp</name></expr>;</condition> <incr><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <call><name>wildcard_match</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name>tftp_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
  <comment type="block">/* add to list */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>iface</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>irec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>mtu</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SIOCGIFMTU</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>mtu</name> <operator>=</operator> <name><name>ifr</name><operator>.</operator><name>ifr_mtu</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <expr_stmt><expr><name><name>iface</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>*</operator><name>addr</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>iface</name><operator>-&gt;</operator><name>netmask</name></name> <operator>=</operator> <name>netmask</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>iface</name><operator>-&gt;</operator><name>tftp_ok</name></name> <operator>=</operator> <name>tftp_ok</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>iface</name><operator>-&gt;</operator><name>dhcp_ok</name></name> <operator>=</operator> <name>dhcp_ok</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>iface</name><operator>-&gt;</operator><name>dns_auth</name></name> <operator>=</operator> <name>auth_dns</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>iface</name><operator>-&gt;</operator><name>mtu</name></name> <operator>=</operator> <name>mtu</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>iface</name><operator>-&gt;</operator><name>dad</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>iface_flags</name> <operator>&amp;</operator> <name>IFACE_TENTATIVE</name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>iface</name><operator>-&gt;</operator><name>found</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>iface</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <name><name>iface</name><operator>-&gt;</operator><name>multicast_done</name></name> <operator>=</operator> <name><name>iface</name><operator>-&gt;</operator><name>warned</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>iface</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>if_index</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>iface</name><operator>-&gt;</operator><name>label</name></name> <operator>=</operator> <name>is_label</name></expr>;</expr_stmt>
      <comment type="block" format="doxygen">/************** Pi-hole modification **************/</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>iface</name><operator>-&gt;</operator><name>slabel</name></name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>iface</name><operator>-&gt;</operator><name>slabel</name></name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <comment type="block" format="doxygen">/**************************************************/</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>iface</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>iface</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>iface</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>interfaces</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>interfaces</name></name> <operator>=</operator> <name>iface</name></expr>;</expr_stmt>
	  <return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>iface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt> 
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>iface_allowed_v6</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>local</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prefix</name></decl></parameter>, 
			    <parameter><decl><type><name>int</name></type> <name>scope</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>if_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, 
			    <parameter><decl><type><name>int</name></type> <name>preferred</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>valid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vparam</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>union</name> <name>mysockaddr</name></name></type> <name>addr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>netmask</name></decl>;</decl_stmt> <comment type="block">/* dummy */</comment>
  <expr_stmt><expr><name><name>netmask</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>scope</name></expr>;</expr_stmt> <comment type="block">/* warning */</comment>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>preferred</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>valid</name></expr>;</expr_stmt>
  
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SOCKADDR_SA_LEN</name></cpp:ifdef>
  <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>in6</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name> <operator>=</operator> <operator>*</operator><name>local</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* FreeBSD insists this is zero for non-linklocal addresses */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>IN6_IS_ADDR_LINKLOCAL</name><argument_list>(<argument><expr><name>local</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_scope_id</name></name> <operator>=</operator> <name>if_index</name></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_scope_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
  
  <return>return <expr><call><name>iface_allowed</name><argument_list>(<argument><expr><operator>(</operator>struct <name>iface_param</name> <operator>*</operator><operator>)</operator><name>vparam</name></expr></argument>, <argument><expr><name>if_index</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>netmask</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>iface_allowed_v4</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>local</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>if_index</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>,
			    <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>netmask</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>broadcast</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vparam</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>union</name> <name>mysockaddr</name></name></type> <name>addr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>prefix</name></decl>, <decl><type ref="prev"/><name>bit</name></decl>;</decl_stmt>
 
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>broadcast</name></expr>;</expr_stmt> <comment type="block">/* warning */</comment>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SOCKADDR_SA_LEN</name></cpp:ifdef>
  <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name></name> <operator>=</operator> <name>local</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* determine prefix length from netmask */</comment>
  <for>for <control>(<init><expr><name>prefix</name> <operator>=</operator> <literal type="number">32</literal></expr><operator>,</operator> <expr><name>bit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>(</operator><name>bit</name> <operator>&amp;</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>netmask</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>prefix</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>bit</name> <operator>=</operator> <name>bit</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>prefix</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

  <return>return <expr><call><name>iface_allowed</name><argument_list>(<argument><expr><operator>(</operator>struct <name>iface_param</name> <operator>*</operator><operator>)</operator><name>vparam</name></expr></argument>, <argument><expr><name>if_index</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>netmask</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Clean old interfaces no longer found.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>clean_interfaces</name><parameter_list>()</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>irec</name></name> <modifier>*</modifier></type><name>iface</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>irec</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>up</name> <init>= <expr><operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>interfaces</name></name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>iface</name> <operator>=</operator> <operator>*</operator><name>up</name></expr>;</init> <condition><expr><name>iface</name></expr>;</condition> <incr><expr><name>iface</name> <operator>=</operator> <operator>*</operator><name>up</name></expr></incr>)</control>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>iface</name><operator>-&gt;</operator><name>found</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>iface</name><operator>-&gt;</operator><name>done</name></name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name><name>iface</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>iface</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>iface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if>
    <else>else
      <block>{<block_content>
        <expr_stmt><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>iface</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** Release listener if no other interface needs it.
 *
 * @return 1 if released, 0 if still required
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>release_listener</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>listener</name></name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>used</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>irec</name></name> <modifier>*</modifier></type><name>iface</name></decl>;</decl_stmt>
      <for>for <control>(<init><expr><name>iface</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>interfaces</name></name></expr>;</init> <condition><expr><name>iface</name></expr>;</condition> <incr><expr><name>iface</name> <operator>=</operator> <name><name>iface</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><name><name>iface</name><operator>-&gt;</operator><name>done</name></name> <operator>&amp;&amp;</operator> <call><name>sockaddr_isequal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iface</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	  <block>{<block_content>
	    <if_stmt><if>if <condition>(<expr><name><name>iface</name><operator>-&gt;</operator><name>found</name></name></expr>)</condition>
	      <block>{<block_content>
		<comment type="block">/* update listener to point to active interface instead */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>l</name><operator>-&gt;</operator><name>iface</name><operator>-&gt;</operator><name>found</name></name></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>iface</name></name> <operator>=</operator> <name>iface</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      </block_content>}</block></if>
	    <else>else
	      <block>{<block_content>
		<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>used</name></name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iface</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	      </block_content>}</block></else></if_stmt>
	  </block_content>}</block></if></if_stmt></block_content></block></for>

      <comment type="block">/* Someone is still using this listener, skip its deletion */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>used</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>iface</name><operator>-&gt;</operator><name>done</name></name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>prettyprint_addr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>iface</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name><operator>|</operator><name>MS_DEBUG</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"stopped listening on %s(#%d): %s port %d"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name><name>l</name><operator>-&gt;</operator><name>iface</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>iface</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* In case it ever returns */</comment>
      <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>iface</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <comment type="line">// Pi-hole modification</comment>
      <expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"stopped listening on %s(#%d): %s port %d"</literal></expr></argument>,
	   <argument><expr><name><name>l</name><operator>-&gt;</operator><name>iface</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>iface</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>tcpfd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>tcpfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>tftpfd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>tftpfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>enumerate_interfaces</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>reset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>addrlist</name></name> <modifier>*</modifier></type><name>spare</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iface_param</name></name></type> <name>param</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>errsave</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>addrlist</name></name> <modifier>*</modifier></type><name>addr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>interface_name</name></name> <modifier>*</modifier></type><name>intname</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>cond_domain</name></name> <modifier>*</modifier></type><name>cond</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>irec</name></name> <modifier>*</modifier></type><name>iface</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_AUTH</name></cpp:ifdef>
  <decl_stmt><decl><type><name><name>struct</name> <name>auth_zone</name></name> <modifier>*</modifier></type><name>zone</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>serv</name></decl>;</decl_stmt>
  
  <comment type="block">/* Do this max once per select cycle  - also inhibits netlink socket use
   in TCP child processes. */</comment>

  <if_stmt><if>if <condition>(<expr><name>reset</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>done</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>param</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>PF_INET</name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <comment type="block">/* iface indexes can change when interfaces are created/destroyed. 
     We use them in the main forwarding control path, when the path
     to a server is specified by an interface, so cache them.
     Update the cache here. */</comment>
  <for>for <control>(<init><expr><name>serv</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>servers</name></name></expr>;</init> <condition><expr><name>serv</name></expr>;</condition> <incr><expr><name>serv</name> <operator>=</operator> <name><name>serv</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>serv</name><operator>-&gt;</operator><name>interface</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
      <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LINUX_NETWORK</name></cpp:ifdef>
	<decl_stmt><decl><type><name><name>struct</name> <name>ifreq</name></name></type> <name>ifr</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><call><name>safe_strncpy</name><argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>, <argument><expr><name><name>serv</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>, <argument><expr><name>IF_NAMESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SIOCGIFINDEX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 
	  <expr_stmt><expr><name><name>serv</name><operator>-&gt;</operator><name>ifindex</name></name> <operator>=</operator> <name><name>ifr</name><operator>.</operator><name>ifr_ifindex</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name><name>serv</name><operator>-&gt;</operator><name>ifindex</name></name> <operator>=</operator> <call><name>if_nametoindex</name><argument_list>(<argument><expr><name><name>serv</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      </block_content>}</block></if></if_stmt></block_content></block></for>
    
<label><name>again</name>:</label>
  <comment type="block">/* Mark interfaces for garbage collection */</comment>
  <for>for <control>(<init><expr><name>iface</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>interfaces</name></name></expr>;</init> <condition><expr><name>iface</name></expr>;</condition> <incr><expr><name>iface</name> <operator>=</operator> <name><name>iface</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content> 
    <expr_stmt><expr><name><name>iface</name><operator>-&gt;</operator><name>found</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

  <comment type="block">/* remove addresses stored against interface_names */</comment>
  <for>for <control>(<init><expr><name>intname</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>int_names</name></name></expr>;</init> <condition><expr><name>intname</name></expr>;</condition> <incr><expr><name>intname</name> <operator>=</operator> <name><name>intname</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <for>for <control>(<init><expr><name>addr</name> <operator>=</operator> <name><name>intname</name><operator>-&gt;</operator><name>addr</name></name></expr>;</init> <condition><expr><name>addr</name></expr>;</condition> <incr><expr><name>addr</name> <operator>=</operator> <name>tmp</name></expr></incr>)</control>
	<block>{<block_content>
	  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>spare</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>spare</name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
	</block_content>}</block></for>
      
      <expr_stmt><expr><name><name>intname</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></for>

  <comment type="block">/* remove addresses stored against cond-domains. */</comment>
  <for>for <control>(<init><expr><name>cond</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>cond_domain</name></name></expr>;</init> <condition><expr><name>cond</name></expr>;</condition> <incr><expr><name>cond</name> <operator>=</operator> <name><name>cond</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <for>for <control>(<init><expr><name>addr</name> <operator>=</operator> <name><name>cond</name><operator>-&gt;</operator><name>al</name></name></expr>;</init> <condition><expr><name>addr</name></expr>;</condition> <incr><expr><name>addr</name> <operator>=</operator> <name>tmp</name></expr></incr>)</control>
	<block>{<block_content>
	  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>spare</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>spare</name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
      </block_content>}</block></for>
      
      <expr_stmt><expr><name><name>cond</name><operator>-&gt;</operator><name>al</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></for>
  
  <comment type="block">/* Remove list of addresses of local interfaces */</comment>
  <for>for <control>(<init><expr><name>addr</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>interface_addrs</name></name></expr>;</init> <condition><expr><name>addr</name></expr>;</condition> <incr><expr><name>addr</name> <operator>=</operator> <name>tmp</name></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>spare</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>spare</name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
    </block_content>}</block></for>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>interface_addrs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_AUTH</name></cpp:ifdef>
  <comment type="block">/* remove addresses stored against auth_zone subnets, but not 
   ones configured as address literals */</comment>
  <for>for <control>(<init><expr><name>zone</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>auth_zones</name></name></expr>;</init> <condition><expr><name>zone</name></expr>;</condition> <incr><expr><name>zone</name> <operator>=</operator> <name><name>zone</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>zone</name><operator>-&gt;</operator><name>interface_names</name></name></expr>)</condition>
      <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>addrlist</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>up</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>zone</name><operator>-&gt;</operator><name>subnet</name></name></expr><operator>,</operator> <expr><name>addr</name> <operator>=</operator> <name><name>zone</name><operator>-&gt;</operator><name>subnet</name></name></expr>;</init> <condition><expr><name>addr</name></expr>;</condition> <incr><expr><name>addr</name> <operator>=</operator> <name>tmp</name></expr></incr>)</control>
	  <block>{<block_content>
	    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ADDRLIST_LITERAL</name></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
	    <else>else
	      <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>spare</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>spare</name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
	      </block_content>}</block></else></if_stmt>
	  </block_content>}</block></for>
      </block_content>}</block></if></if_stmt></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name><name>param</name><operator>.</operator><name>spare</name></name> <operator>=</operator> <name>spare</name></expr>;</expr_stmt>
  
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iface_enumerate</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>, <argument><expr><name>iface_allowed_v6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>again</name>;</goto></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>ret</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iface_enumerate</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>, <argument><expr><name>iface_allowed_v4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<goto>goto <name>again</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
 
  <expr_stmt><expr><name>errsave</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CLEVERBIND</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
      <comment type="block">/* Garbage-collect listeners listening on addresses that no longer exist.
	 Does nothing when not binding interfaces or for listeners on localhost, 
	 since the -&gt;iface field is NULL. Note that this needs the protections
	 against reentrancy, hence it's here.  It also means there's a possibility,
	 in OPT_CLEVERBIND mode, that at listener will just disappear after
	 a call to enumerate_interfaces, this is checked OK on all calls. */</comment>
      <decl_stmt><decl><type><name><name>struct</name> <name>listener</name></name> <modifier>*</modifier></type><name>l</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>up</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>freed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      
      <for>for <control>(<init><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>listeners</name></name></expr><operator>,</operator> <expr><name>l</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>listeners</name></name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name>tmp</name></expr></incr>)</control>
	<block>{<block_content>
	  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>l</name><operator>-&gt;</operator><name>iface</name></name> <operator>||</operator> <name><name>l</name><operator>-&gt;</operator><name>iface</name><operator>-&gt;</operator><name>found</name></name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
	  <if type="elseif">else if <condition>(<expr><call><name>release_listener</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>freed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

      <if_stmt><if>if <condition>(<expr><name>freed</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>clean_interfaces</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>errsave</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>spare</name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>spare</name></name></expr>;</expr_stmt>
  
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* set NONBLOCK bit on fd: See Stevens 16.6 */</comment>
<function><type><name>int</name></type> <name>fix_fd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
      <call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>O_NONBLOCK</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>make_sock</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>mysockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dienow</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>family</name> <init>= <expr><name><name>addr</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>, <decl><type ref="prev"/><name>rc</name></decl>, <decl><type ref="prev"/><name>opt</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>family</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>, <decl><type ref="prev"/><name>errsave</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

      <comment type="block">/* No error if the kernel just doesn't support this IP flavour */</comment>
      <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EPROTONOSUPPORT</name> <operator>||</operator>
	  <name>errno</name> <operator>==</operator> <name>EAFNOSUPPORT</name> <operator>||</operator>
	  <name>errno</name> <operator>==</operator> <name>EINVAL</name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      
    <label><name>err</name>:</label>
      <expr_stmt><expr><name>errsave</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>prettyprint_addr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NOWILD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CLEVERBIND</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><literal type="string">"port %d"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to create listening socket for %s: %s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
      <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>errsave</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>dienow</name></expr>)</condition>
	<block>{<block_content>
	  <comment type="block">/* failure to bind addresses given by --listen-address at this point
	     is OK if we're doing bind-dynamic */</comment>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CLEVERBIND</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>EC_BADNET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
      
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>	
  
  <if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_REUSEADDR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>fix_fd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_INET6</name> <operator>&amp;&amp;</operator> <call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_IPV6</name></expr></argument>, <argument><expr><name>IPV6_V6ONLY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>bind</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><call><name>sa_len</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>SOCK_STREAM</name></expr>)</condition>
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TCP_FASTOPEN</name></cpp:ifdef>
      <decl_stmt><decl><type><name>int</name></type> <name>qlen</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>                           
      <expr_stmt><expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_FASTOPEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qlen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>qlen</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      
      <if_stmt><if>if <condition>(<expr><call><name>listen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>TCP_BACKLOG</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_INET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NOWILD</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:if> 
	  <if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_IP</name></expr></argument>, <argument><expr><name>IP_PKTINFO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	    <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IP_RECVDSTADDR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>IP_RECVIF</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	  <if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_IP</name></expr></argument>, <argument><expr><name>IP_RECVDSTADDR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
	      <call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_IP</name></expr></argument>, <argument><expr><name>IP_RECVIF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	    <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>set_ipv6pktinfo</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
  
  <return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>set_ipv6pktinfo</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>opt</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* The API changed around Linux 2.6.14 but the old ABI is still supported:
     handle all combinations of headers and kernel.
     OpenWrt note that this fixes the problem addressed by your very broken patch. */</comment>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>v6pktinfo</name></name> <operator>=</operator> <name>IPV6_PKTINFO</name></expr>;</expr_stmt>
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>IPV6_RECVPKTINFO</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_IPV6</name></expr></argument>, <argument><expr><name>IPV6_RECVPKTINFO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>IPV6_2292PKTINFO</name></cpp:ifdef>
  <if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOPROTOOPT</name> <operator>&amp;&amp;</operator> <call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_IPV6</name></expr></argument>, <argument><expr><name>IPV6_2292PKTINFO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>v6pktinfo</name></name> <operator>=</operator> <name>IPV6_2292PKTINFO</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_IPV6</name></expr></argument>, <argument><expr><name>IPV6_PKTINFO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Find the interface on which a TCP connection arrived, if possible, or zero otherwise. */</comment>
<function><type><name>int</name></type> <name>tcp_interface</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>af</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>fd</name></expr>;</expr_stmt> <comment type="block">/* suppress potential unused warning */</comment>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>af</name></expr>;</expr_stmt> <comment type="block">/* suppress potential unused warning */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>if_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LINUX_NETWORK</name></cpp:ifdef>
  <decl_stmt><decl><type><name>int</name></type> <name>opt</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>cmsghdr</name></name> <modifier>*</modifier></type><name>cmptr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>msghdr</name></name></type> <name>msg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>socklen_t</name></type> <name>len</name></decl>;</decl_stmt>
  
  <comment type="block">/* use mshdr so that the CMSDG_* macros are available */</comment>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_control</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_controllen</name></name> <operator>=</operator> <name>len</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>packet_buff_sz</name></name></expr>;</expr_stmt>

  <comment type="block">/* we overwrote the buffer... */</comment>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>srv_save</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

  <if_stmt><if>if <condition>(<expr><name>af</name> <operator>==</operator> <name>AF_INET</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_IP</name></expr></argument>, <argument><expr><name>IP_PKTINFO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
	  <call><name>getsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_IP</name></expr></argument>, <argument><expr><name>IP_PKTOPTIONS</name></expr></argument>, <argument><expr><name><name>msg</name><operator>.</operator><name>msg_control</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_controllen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
	  <for>for <control>(<init><expr><name>cmptr</name> <operator>=</operator> <call><name>CMSG_FIRSTHDR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>cmptr</name></expr>;</condition> <incr><expr><name>cmptr</name> <operator>=</operator> <call><name>CMSG_NXTHDR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>cmptr</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_level</name></name> <operator>==</operator> <name>IPPROTO_IP</name> <operator>&amp;&amp;</operator> <name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_type</name></name> <operator>==</operator> <name>IP_PKTINFO</name></expr>)</condition>
	      <block>{<block_content>
		<union>union <block>{
		  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
		  <decl_stmt><decl><type><name><name>struct</name> <name>in_pktinfo</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
		}</block> <decl><name>p</name></decl>;</union>
		
		<expr_stmt><expr><name><name>p</name><operator>.</operator><name>c</name></name> <operator>=</operator> <call><name>CMSG_DATA</name><argument_list>(<argument><expr><name>cmptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>if_index</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>p</name><operator>-&gt;</operator><name>ipi_ifindex</name></name></expr>;</expr_stmt>
	      </block_content>}</block></if></if_stmt></block_content></block></for>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
  <else>else
    <block>{<block_content>
      <comment type="block">/* Only the RFC-2292 API has the ability to find the interface for TCP connections,
	 it was removed in RFC-3542 !!!! 

	 Fortunately, Linux kept the 2292 ABI when it moved to 3542. The following code always
	 uses the old ABI, and should work with pre- and post-3542 kernel headers */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>IPV6_2292PKTOPTIONS</name></cpp:ifdef>   
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>PKTOPTIONS</name></cpp:macro> <cpp:value>IPV6_2292PKTOPTIONS</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>PKTOPTIONS</name></cpp:macro> <cpp:value>IPV6_PKTOPTIONS</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

      <if_stmt><if>if <condition>(<expr><call><name>set_ipv6pktinfo</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	  <call><name>getsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_IPV6</name></expr></argument>, <argument><expr><name>PKTOPTIONS</name></expr></argument>, <argument><expr><name><name>msg</name><operator>.</operator><name>msg_control</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
          <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_controllen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
	  <for>for <control>(<init><expr><name>cmptr</name> <operator>=</operator> <call><name>CMSG_FIRSTHDR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>cmptr</name></expr>;</condition> <incr><expr><name>cmptr</name> <operator>=</operator> <call><name>CMSG_NXTHDR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>cmptr</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_level</name></name> <operator>==</operator> <name>IPPROTO_IPV6</name> <operator>&amp;&amp;</operator> <name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_type</name></name> <operator>==</operator> <name><name>daemon</name><operator>-&gt;</operator><name>v6pktinfo</name></name></expr>)</condition>
              <block>{<block_content>
                <union>union <block>{
                  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
                  <decl_stmt><decl><type><name><name>struct</name> <name>in6_pktinfo</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
                }</block> <decl><name>p</name></decl>;</union>
                <expr_stmt><expr><name><name>p</name><operator>.</operator><name>c</name></name> <operator>=</operator> <call><name>CMSG_DATA</name><argument_list>(<argument><expr><name>cmptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>if_index</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>p</name><operator>-&gt;</operator><name>ipi6_ifindex</name></name></expr>;</expr_stmt>
              </block_content>}</block></if></if_stmt></block_content></block></for>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* Linux */</comment>
 
  <return>return <expr><name>if_index</name></expr>;</return>
</block_content>}</block></function>
      
<function><type><specifier>static</specifier> <name><name>struct</name> <name>listener</name></name> <modifier>*</modifier></type><name>create_listeners</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>mysockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>do_tftp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dienow</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>listener</name></name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>tcpfd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>tftpfd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>do_tftp</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>port</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>make_sock</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><name>dienow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>tcpfd</name> <operator>=</operator> <call><name>make_sock</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>dienow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_TFTP</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name>do_tftp</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition>
	<block>{<block_content>
	  <comment type="block">/* port must be restored to DNS port for TCP code */</comment>
	  <decl_stmt><decl><type><name>short</name></type> <name>save</name> <init>= <expr><name><name>addr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_port</name></name></expr></init></decl>;</decl_stmt>
	  <expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>TFTP_PORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>tftpfd</name> <operator>=</operator> <call><name>make_sock</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><name>dienow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <name>save</name></expr>;</expr_stmt>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <decl_stmt><decl><type><name>short</name></type> <name>save</name> <init>= <expr><name><name>addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_port</name></name></expr></init></decl>;</decl_stmt>
	  <expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>TFTP_PORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>tftpfd</name> <operator>=</operator> <call><name>make_sock</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><name>dienow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <name>save</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>  
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>tcpfd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>tftpfd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>safe_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>listener</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>tcpfd</name></name> <operator>=</operator> <name>tcpfd</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>tftpfd</name></name> <operator>=</operator> <name>tftpfd</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>*</operator><name>addr</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>iface</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Pi-hole modification</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>port</name> <init>= <expr><call><name>prettyprint_addr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"listening on %s port %d"</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>l</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>create_wildcard_listeners</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>union</name> <name>mysockaddr</name></name></type> <name>addr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>listener</name></name> <modifier>*</modifier></type><name>l</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>l6</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SOCKADDR_SA_LEN</name></cpp:ifdef>
  <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name>INADDR_ANY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>create_listeners</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><operator>!</operator><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_TFTP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SOCKADDR_SA_LEN</name></cpp:ifdef>
  <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>in6</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name> <operator>=</operator> <name>in6addr_any</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
  <expr_stmt><expr><name>l6</name> <operator>=</operator> <call><name>create_listeners</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><operator>!</operator><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_TFTP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>l</name></expr>)</condition><block type="pseudo"><block_content> 
    <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>l6</name></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content> 
    <expr_stmt><expr><name>l</name> <operator>=</operator> <name>l6</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>listeners</name></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>listener</name></name> <modifier>*</modifier></type><name>find_listener</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>mysockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>listener</name></name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>listeners</name></name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><call><name>sockaddr_isequal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>l</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>create_bound_listeners</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dienow</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>listener</name></name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>irec</name></name> <modifier>*</modifier></type><name>iface</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iname</name></name> <modifier>*</modifier></type><name>if_tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>listener</name></name> <modifier>*</modifier></type><name>existing</name></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>iface</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>interfaces</name></name></expr>;</init> <condition><expr><name>iface</name></expr>;</condition> <incr><expr><name>iface</name> <operator>=</operator> <name><name>iface</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>iface</name><operator>-&gt;</operator><name>done</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>iface</name><operator>-&gt;</operator><name>dad</name></name> <operator>&amp;&amp;</operator> <name><name>iface</name><operator>-&gt;</operator><name>found</name></name></expr>)</condition>
      <block>{<block_content>
	<expr_stmt><expr><name>existing</name> <operator>=</operator> <call><name>find_listener</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iface</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>existing</name></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name><name>iface</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>existing</name><operator>-&gt;</operator><name>used</name></name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* increase usage counter */</comment>
	  </block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><name>new</name> <operator>=</operator> <call><name>create_listeners</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iface</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>iface</name><operator>-&gt;</operator><name>tftp_ok</name></name></expr></argument>, <argument><expr><name>dienow</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>iface</name></name> <operator>=</operator> <name>iface</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>listeners</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>listeners</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>iface</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	    <comment type="block">/* Don't log the initial set of listen addresses created
               at startup, since this is happening before the logging
               system is initialised and the sign-on printed. */</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dienow</name></expr>)</condition>
              <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr><call><name>prettyprint_addr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iface</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name><operator>|</operator><name>MS_DEBUG</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"listening on %s(#%d): %s port %d"</literal></expr></argument>)</argument_list></call></expr></argument>,
			  <argument><expr><name><name>iface</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>iface</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      </block_content>}</block></if></if_stmt>
	    <comment type="line">// Pi-hole modification</comment>
	    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>port</name> <init>= <expr><call><name>prettyprint_addr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iface</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    <expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"listening on %s(#%d): %s port %d"</literal></expr></argument>,
		 <argument><expr><name><name>iface</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>iface</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt></block_content></block></for>

  <comment type="block">/* Check for --listen-address options that haven't been used because there's
     no interface with a matching address. These may be valid: eg it's possible
     to listen on 127.0.1.1 even if the loopback interface is 127.0.0.1

     If the address isn't valid the bind() will fail and we'll die() 
     (except in bind-dynamic mode, when we'll complain but keep trying.)

     The resulting listeners have the -&gt;iface field NULL, and this has to be
     handled by the DNS and TFTP code. It disables --localise-queries processing
     (no netmask) and some MTU login the tftp code. */</comment>

  <for>for <control>(<init><expr><name>if_tmp</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>if_addrs</name></name></expr>;</init> <condition><expr><name>if_tmp</name></expr>;</condition> <incr><expr><name>if_tmp</name> <operator>=</operator> <name><name>if_tmp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>if_tmp</name><operator>-&gt;</operator><name>used</name></name> <operator>&amp;&amp;</operator> 
	<operator>(</operator><name>new</name> <operator>=</operator> <call><name>create_listeners</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>if_tmp</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>!</operator><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_TFTP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dienow</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
      <block>{<block_content>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>listeners</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>listeners</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dienow</name></expr>)</condition>
	  <block>{<block_content>
	    <decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr><call><name>prettyprint_addr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>if_tmp</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name><operator>|</operator><name>MS_DEBUG</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"listening on %s port %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt>
	<comment type="line">// Pi-hole modification</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>port</name> <init>= <expr><call><name>prettyprint_addr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>if_tmp</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"listening on %s port %d"</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>

<comment type="block">/* In --bind-interfaces, the only access control is the addresses we're listening on. 
   There's nothing to avoid a query to the address of an internal interface arriving via
   an external interface where we don't want to accept queries, except that in the usual 
   case the addresses of internal interfaces are RFC1918. When bind-interfaces in use, 
   and we listen on an address that looks like it's probably globally routeable, shout.

   The fix is to use --bind-dynamic, which actually checks the arrival interface too.
   Tough if your platform doesn't support this.

   Note that checking the arrival interface is supported in the standard IPv6 API and
   always done, so we don't warn about any IPv6 addresses here.
*/</comment>

<function><type><name>void</name></type> <name>warn_bound_listeners</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>irec</name></name> <modifier>*</modifier></type><name>iface</name></decl>;</decl_stmt> 	
  <decl_stmt><decl><type><name>int</name></type> <name>advice</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>iface</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>interfaces</name></name></expr>;</init> <condition><expr><name>iface</name></expr>;</condition> <incr><expr><name>iface</name> <operator>=</operator> <name><name>iface</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>iface</name><operator>-&gt;</operator><name>dns_auth</name></name></expr>)</condition>
      <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>iface</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition>
	  <block>{<block_content>
	    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>private_net</name><argument_list>(<argument><expr><name><name>iface</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iface</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iface</name><operator>-&gt;</operator><name>warned</name></name> <operator>=</operator> <name>advice</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, 
			  <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"LOUD WARNING: listening on %s may accept requests via interfaces other than %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
			  <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name><name>iface</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      </block_content>}</block></if></if_stmt>
	  </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt></block_content></block></for>
  
  <if_stmt><if>if <condition>(<expr><name>advice</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"LOUD WARNING: use --bind-dynamic rather than --bind-interfaces to avoid DNS amplification attacks via these interface(s)"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></function>

<function><type><name>void</name></type> <name>warn_wild_labels</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>irec</name></name> <modifier>*</modifier></type><name>iface</name></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>iface</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>interfaces</name></name></expr>;</init> <condition><expr><name>iface</name></expr>;</condition> <incr><expr><name>iface</name> <operator>=</operator> <name><name>iface</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>iface</name><operator>-&gt;</operator><name>found</name></name> <operator>&amp;&amp;</operator> <name><name>iface</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <name><name>iface</name><operator>-&gt;</operator><name>label</name></name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"warning: using interface %s instead"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>iface</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>warn_int_names</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>interface_name</name></name> <modifier>*</modifier></type><name>intname</name></decl>;</decl_stmt>
 
  <for>for <control>(<init><expr><name>intname</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>int_names</name></name></expr>;</init> <condition><expr><name>intname</name></expr>;</condition> <incr><expr><name>intname</name> <operator>=</operator> <name><name>intname</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>intname</name><operator>-&gt;</operator><name>addr</name></name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"warning: no addresses found for interface %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>intname</name><operator>-&gt;</operator><name>intr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>
 
<function><type><name>int</name></type> <name>is_dad_listeners</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>irec</name></name> <modifier>*</modifier></type><name>iface</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NOWILD</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>iface</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>interfaces</name></name></expr>;</init> <condition><expr><name>iface</name></expr>;</condition> <incr><expr><name>iface</name> <operator>=</operator> <name><name>iface</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><name><name>iface</name><operator>-&gt;</operator><name>dad</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>iface</name><operator>-&gt;</operator><name>done</name></name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
<function><type><name>void</name></type> <name>join_multicast</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dienow</name></decl></parameter>)</parameter_list>      
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>irec</name></name> <modifier>*</modifier></type><name>iface</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>iface</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>interfaces</name></name></expr>;</init> <condition><expr><name>iface</name></expr>;</condition> <incr><expr><name>iface</name> <operator>=</operator> <name><name>iface</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>iface</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name> <operator>&amp;&amp;</operator> <name><name>iface</name><operator>-&gt;</operator><name>dhcp_ok</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>iface</name><operator>-&gt;</operator><name>multicast_done</name></name></expr>)</condition>
      <block>{<block_content>
	<comment type="block">/* There's an irec per address but we only want to join for multicast 
	   once per interface. Weed out duplicates. */</comment>
	<for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>interfaces</name></name></expr>;</init> <condition><expr><name>tmp</name></expr>;</condition> <incr><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	  <if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>multicast_done</name></name> <operator>&amp;&amp;</operator> <name><name>tmp</name><operator>-&gt;</operator><name>index</name></name> <operator>==</operator> <name><name>iface</name><operator>-&gt;</operator><name>index</name></name></expr>)</condition><block type="pseudo"><block_content>
	    <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	
	<expr_stmt><expr><name><name>iface</name><operator>-&gt;</operator><name>multicast_done</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition>
	  <block>{<block_content>
	    <decl_stmt><decl><type><name><name>struct</name> <name>ipv6_mreq</name></name></type> <name>mreq</name></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	    <expr_stmt><expr><name><name>mreq</name><operator>.</operator><name>ipv6mr_interface</name></name> <operator>=</operator> <name><name>iface</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
	    
	    <expr_stmt><expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>ALL_RELAY_AGENTS_AND_SERVERS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mreq</name><operator>.</operator><name>ipv6mr_multiaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    
	    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>daemon</name><operator>-&gt;</operator><name>doing_dhcp6</name></name> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>relay6</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
		<call><name>setsockopt</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp6fd</name></name></expr></argument>, <argument><expr><name>IPPROTO_IPV6</name></expr></argument>, <argument><expr><name>IPV6_JOIN_GROUP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mreq</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mreq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>err</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    
	    <expr_stmt><expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>ALL_SERVERS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mreq</name><operator>.</operator><name>ipv6mr_multiaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    
	    <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>doing_dhcp6</name></name> <operator>&amp;&amp;</operator> 
		<call><name>setsockopt</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp6fd</name></name></expr></argument>, <argument><expr><name>IPPROTO_IPV6</name></expr></argument>, <argument><expr><name>IPV6_JOIN_GROUP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mreq</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mreq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>err</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    
	    <expr_stmt><expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>ALL_ROUTERS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mreq</name><operator>.</operator><name>ipv6mr_multiaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    
	    <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>doing_ra</name></name> <operator>&amp;&amp;</operator>
		<call><name>setsockopt</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>icmp6fd</name></name></expr></argument>, <argument><expr><name>IPPROTO_IPV6</name></expr></argument>, <argument><expr><name>IPV6_JOIN_GROUP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mreq</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mreq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>err</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    
	    <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition>
	      <block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"interface %s failed to join DHCPv6 multicast group: %s"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LINUX_NETWORK</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"try increasing /proc/sys/net/core/optmem_max"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<if_stmt><if>if <condition>(<expr><name>dienow</name></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>iface</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>EC_BADNET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
		  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>iface</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	      </block_content>}</block></if></if_stmt>
	  </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>local_bind</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>mysockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>intname</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ifindex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_tcp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>union</name> <name>mysockaddr</name></name></type> <name>addr_copy</name> <init>= <expr><operator>*</operator><name>addr</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>port</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>tries</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>ports_avail</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>addr_copy</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>port</name> <operator>=</operator> <name><name>addr_copy</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_port</name></name></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>port</name> <operator>=</operator> <name><name>addr_copy</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_port</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <comment type="block">/* cannot set source _port_ for TCP connections. */</comment>
  <if_stmt><if>if <condition>(<expr><name>is_tcp</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>port</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>port</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>max_port</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Bind a random port within the range given by min-port and max-port if either
	 or both are set. Otherwise use the OS's random ephemeral port allocation by
	 leaving port == 0 and tries == 1 */</comment>
      <expr_stmt><expr><name>ports_avail</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>max_port</name></name> <operator>-</operator> <name><name>daemon</name><operator>-&gt;</operator><name>min_port</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>tries</name> <operator>=</operator>  <ternary><condition><expr><operator>(</operator><name>ports_avail</name> <operator>&lt;</operator> <name>SMALL_PORT_RANGE</name><operator>)</operator></expr> ?</condition><then> <expr><name>ports_avail</name></expr> </then><else>: <expr><literal type="number">100</literal></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>min_port</name></name> <operator>+</operator> <operator>(</operator><call><name>rand16</name><argument_list>()</argument_list></call> <operator>%</operator> <name>ports_avail</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* elide bind() call if it's to port 0, address 0 */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>addr_copy</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name>port</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>addr_copy</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <break>break;</break></block_content></block></if></if_stmt>
	  <expr_stmt><expr><name><name>addr_copy</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name>port</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>IN6_IS_ADDR_UNSPECIFIED</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr_copy</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <break>break;</break></block_content></block></if></if_stmt>
	  <expr_stmt><expr><name><name>addr_copy</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>addr_copy</name></expr></argument>, <argument><expr><call><name>sa_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr_copy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	<break>break;</break></block_content></block></if></if_stmt>
      
       <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EADDRINUSE</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EACCES</name></expr>)</condition><block type="pseudo"><block_content> 
	 <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>--</operator><name>tries</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

      <comment type="block">/* For small ranges, do a systematic search, not a random one. */</comment>
      <if_stmt><if>if <condition>(<expr><name>ports_avail</name> <operator>&lt;</operator> <name>SMALL_PORT_RANGE</name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>hport</name> <init>= <expr><call><name>ntohs</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	  <if_stmt><if>if <condition>(<expr><name>hport</name><operator>++</operator> <operator>==</operator> <name><name>daemon</name><operator>-&gt;</operator><name>max_port</name></name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>hport</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>min_port</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  <expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>hport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>min_port</name></name> <operator>+</operator> <operator>(</operator><call><name>rand16</name><argument_list>()</argument_list></call> <operator>%</operator> <name>ports_avail</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_tcp</name> <operator>&amp;&amp;</operator> <name>ifindex</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IP_UNICAST_IF</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <if_stmt><if>if <condition>(<expr><name><name>addr_copy</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition>
        <block>{<block_content>
          <decl_stmt><decl><type><name>uint32_t</name></type> <name>ifindex_opt</name> <init>= <expr><call><name>htonl</name><argument_list>(<argument><expr><name>ifindex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <return>return <expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_IP</name></expr></argument>, <argument><expr><name>IP_UNICAST_IF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifindex_opt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ifindex_opt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>IPV6_UNICAST_IF</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <if_stmt><if>if <condition>(<expr><name><name>addr_copy</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition>
        <block>{<block_content>
          <decl_stmt><decl><type><name>uint32_t</name></type> <name>ifindex_opt</name> <init>= <expr><call><name>htonl</name><argument_list>(<argument><expr><name>ifindex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <return>return <expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_IPV6</name></expr></argument>, <argument><expr><name>IPV6_UNICAST_IF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifindex_opt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ifindex_opt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>intname</name></expr>;</expr_stmt> <comment type="block">/* suppress potential unused warning */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_BINDTODEVICE</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><name><name>intname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
      <call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_BINDTODEVICE</name></expr></argument>, <argument><expr><name>intname</name></expr></argument>, <argument><expr><name>IF_NAMESIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>serverfd</name></name> <modifier>*</modifier></type><name>allocate_sfd</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>mysockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>intname</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ifindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>serverfd</name></name> <modifier>*</modifier></type><name>sfd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>errsave</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>opt</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* when using random ports, servers which would otherwise use
     the INADDR_ANY/port0 socket have sfd set to NULL, this is 
     anything without an explictly set source port. */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>daemon</name><operator>-&gt;</operator><name>osport</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name> <operator>&amp;&amp;</operator>
	  <name><name>addr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_port</name></name> <operator>==</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
	<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name> <operator>&amp;&amp;</operator>
	  <name><name>addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_port</name></name> <operator>==</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
	<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

  <comment type="block">/* may have a suitable one already */</comment>
  <for>for <control>(<init><expr><name>sfd</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>sfds</name></name></expr>;</init> <condition><expr><name>sfd</name></expr>;</condition> <incr><expr><name>sfd</name> <operator>=</operator> <name><name>sfd</name><operator>-&gt;</operator><name>next</name></name></expr></incr> )</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name>ifindex</name> <operator>==</operator> <name><name>sfd</name><operator>-&gt;</operator><name>ifindex</name></name> <operator>&amp;&amp;</operator>
	<call><name>sockaddr_isequal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sfd</name><operator>-&gt;</operator><name>source_addr</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	<call><name>strcmp</name><argument_list>(<argument><expr><name>intname</name></expr></argument>, <argument><expr><name><name>sfd</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>sfd</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
  
  <comment type="block">/* need to make a new one. */</comment>
  <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt> <comment type="block">/* in case malloc fails. */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sfd</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>serverfd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sfd</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>addr</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name> <operator>&amp;&amp;</operator> <call><name>setsockopt</name><argument_list>(<argument><expr><name><name>sfd</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>IPPROTO_IPV6</name></expr></argument>, <argument><expr><name>IPV6_V6ONLY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator>
      <operator>!</operator><call><name>local_bind</name><argument_list>(<argument><expr><name><name>sfd</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>intname</name></expr></argument>, <argument><expr><name>ifindex</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>fix_fd</name><argument_list>(<argument><expr><name><name>sfd</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
      <expr_stmt><expr><name>errsave</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt> <comment type="block">/* save error from bind/setsockopt. */</comment>
      <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>sfd</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>errsave</name></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>safe_strncpy</name><argument_list>(<argument><expr><name><name>sfd</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>, <argument><expr><name>intname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sfd</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  <expr_stmt><expr><name><name>sfd</name><operator>-&gt;</operator><name>source_addr</name></name> <operator>=</operator> <operator>*</operator><name>addr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sfd</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>sfds</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sfd</name><operator>-&gt;</operator><name>ifindex</name></name> <operator>=</operator> <name>ifindex</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sfd</name><operator>-&gt;</operator><name>preallocated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>sfds</name></name> <operator>=</operator> <name>sfd</name></expr>;</expr_stmt>

  <return>return <expr><name>sfd</name></expr>;</return> 
</block_content>}</block></function>

<comment type="block">/* create upstream sockets during startup, before root is dropped which may be needed
   this allows query_port to be a low port and interface binding */</comment>
<function><type><name>void</name></type> <name>pre_allocate_sfds</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>srv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>serverfd</name></name> <modifier>*</modifier></type><name>sfd</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>query_port</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>union</name>  <name>mysockaddr</name></name></type> <name>addr</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name>INADDR_ANY</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>query_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SOCKADDR_SA_LEN</name></cpp:ifdef>
      <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sfd</name> <operator>=</operator> <call><name>allocate_sfd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>sfd</name><operator>-&gt;</operator><name>preallocated</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name> <operator>=</operator> <name>in6addr_any</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>query_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SOCKADDR_SA_LEN</name></cpp:ifdef>
      <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sfd</name> <operator>=</operator> <call><name>allocate_sfd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>sfd</name><operator>-&gt;</operator><name>preallocated</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  
  <for>for <control>(<init><expr><name>srv</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>servers</name></name></expr>;</init> <condition><expr><name>srv</name></expr>;</condition> <incr><expr><name>srv</name> <operator>=</operator> <name><name>srv</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>allocate_sfd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>srv</name><operator>-&gt;</operator><name>source_addr</name></name></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>ifindex</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	<name>errno</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
	<call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NOWILD</name></expr></argument>)</argument_list></call></expr>)</condition>
      <block>{<block_content>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>prettyprint_addr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>srv</name><operator>-&gt;</operator><name>source_addr</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>interface</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to bind server socket for %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>EC_BADNET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt></block_content></block></for>  
</block_content>}</block></function>

<function><type><name>void</name></type> <name>check_servers</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>no_loop_check</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>irec</name></name> <modifier>*</modifier></type><name>iface</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>serv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>serverfd</name></name> <modifier>*</modifier></type><name>sfd</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>up</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>locals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LOOP</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_loop_check</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>loop_send_probes</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* clear all marks. */</comment>
  <expr_stmt><expr><call><name>mark_servers</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
 <comment type="block">/* interface may be new since startup */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NOWILD</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>enumerate_interfaces</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="block">/* don't garbage collect pre-allocated sfds. */</comment>
  <for>for <control>(<init><expr><name>sfd</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>sfds</name></name></expr>;</init> <condition><expr><name>sfd</name></expr>;</condition> <incr><expr><name>sfd</name> <operator>=</operator> <name><name>sfd</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>sfd</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <name><name>sfd</name><operator>-&gt;</operator><name>preallocated</name></name></expr>;</expr_stmt></block_content></block></for>

  <for>for <control>(<init><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>serv</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>servers</name></name></expr>;</init> <condition><expr><name>serv</name></expr>;</condition> <incr><expr><name>serv</name> <operator>=</operator> <name><name>serv</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <comment type="block">/* Init edns_pktsz for newly created server records. */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>serv</name><operator>-&gt;</operator><name>edns_pktsz</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>serv</name><operator>-&gt;</operator><name>edns_pktsz</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>edns_pktsz</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
      <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DNSSEC_VALID</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content> 
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>serv</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SERV_FOR_NODOTS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>serv</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SERV_DO_DNSSEC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  
	  <comment type="block">/* Disable DNSSEC validation when using server=/domain/.... servers
	     unless there's a configured trust anchor. */</comment>
	  <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>serv</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name><name>struct</name> <name>ds_config</name></name> <modifier>*</modifier></type><name>ds</name></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>domain</name> <init>= <expr><name><name>serv</name><operator>-&gt;</operator><name>domain</name></name></expr></init></decl>;</decl_stmt>
	      
	      <comment type="block">/* .example.com is valid */</comment>
	      <while>while <condition>(<expr><operator>*</operator><name>domain</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>domain</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
	      
	      <for>for <control>(<init><expr><name>ds</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>ds</name></name></expr>;</init> <condition><expr><name>ds</name></expr>;</condition> <incr><expr><name>ds</name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>hostname_isequal</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		  <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	      
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ds</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>serv</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SERV_DO_DNSSEC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      
      <expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>prettyprint_addr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>serv</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* 0.0.0.0 is nothing, the stack treats it like 127.0.0.1 */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>serv</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name> <operator>&amp;&amp;</operator>
	  <name><name>serv</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name><name>serv</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SERV_MARK</name></expr>;</expr_stmt>
	  <continue>continue;</continue>
	</block_content>}</block></if></if_stmt>
      
      <for>for <control>(<init><expr><name>iface</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>interfaces</name></name></expr>;</init> <condition><expr><name>iface</name></expr>;</condition> <incr><expr><name>iface</name> <operator>=</operator> <name><name>iface</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><call><name>sockaddr_isequal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>serv</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iface</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
      <if_stmt><if>if <condition>(<expr><name>iface</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"ignoring nameserver %s - local interface"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>serv</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SERV_MARK</name></expr>;</expr_stmt>
	  <continue>continue;</continue>
	</block_content>}</block></if></if_stmt>
      
      <comment type="block">/* Do we need a socket set? */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>serv</name><operator>-&gt;</operator><name>sfd</name></name> <operator>&amp;&amp;</operator> 
	  <operator>!</operator><operator>(</operator><name><name>serv</name><operator>-&gt;</operator><name>sfd</name></name> <operator>=</operator> <call><name>allocate_sfd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>serv</name><operator>-&gt;</operator><name>source_addr</name></name></expr></argument>, <argument><expr><name><name>serv</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>, <argument><expr><name><name>serv</name><operator>-&gt;</operator><name>ifindex</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
	  <name>errno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, 
		    <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"ignoring nameserver %s - cannot make/bind socket: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>serv</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SERV_MARK</name></expr>;</expr_stmt>
	  <continue>continue;</continue>
	</block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>serv</name><operator>-&gt;</operator><name>sfd</name></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>serv</name><operator>-&gt;</operator><name>sfd</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <name>SERVERS_LOGGED</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"more servers are defined but not logged"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>++</operator><name>count</name> <operator>&gt;</operator> <name>SERVERS_LOGGED</name></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>serv</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>serv</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SERV_FOR_NODOTS</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s3</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s4</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
	  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DNSSEC_VALID</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>serv</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SERV_DO_DNSSEC</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>s3</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"(no DNSSEC)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	  <if_stmt><if>if <condition>(<expr><name><name>serv</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SERV_FOR_NODOTS</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"unqualified"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>s2</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"names"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	  <if type="elseif">else if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>serv</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>s2</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"domain"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>s2</name> <operator>=</operator> <name><name>serv</name><operator>-&gt;</operator><name>domain</name></name></expr><operator>,</operator> <expr><name>s4</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>serv</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SERV_WILDCARD</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"*"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>
	  
	  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"using nameserver %s#%d for %s %s%s %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s4</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LOOP</name></cpp:ifdef>
      <if type="elseif">else if <condition>(<expr><name><name>serv</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SERV_LOOP</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"NOT using nameserver %s#%d - query loop detected"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <if type="elseif">else if <condition>(<expr><name><name>serv</name><operator>-&gt;</operator><name>interface</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"using nameserver %s#%d(via %s)"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>serv</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"using nameserver %s#%d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

    </block_content>}</block></for>
  
  <for>for <control>(<init><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>serv</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>local_domains</name></name></expr>;</init> <condition><expr><name>serv</name></expr>;</condition> <incr><expr><name>serv</name> <operator>=</operator> <name><name>serv</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
       <if_stmt><if>if <condition>(<expr><operator>++</operator><name>count</name> <operator>&gt;</operator> <name>SERVERS_LOGGED</name></expr>)</condition><block type="pseudo"><block_content>
	 <continue>continue;</continue></block_content></block></if></if_stmt>
       
       <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>serv</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SERV_LITERAL_ADDRESS</name><operator>)</operator> <operator>&amp;&amp;</operator>
	   <operator>!</operator><operator>(</operator><name><name>serv</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SERV_6ADDR</name> <operator>|</operator> <name>SERV_4ADDR</name> <operator>|</operator> <name>SERV_ALL_ZEROS</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
	   <call><name>strlen</name><argument_list>(<argument><expr><name><name>serv</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	 <block>{<block_content>
	   <expr_stmt><expr><name>count</name><operator>--</operator></expr>;</expr_stmt>
	   <if_stmt><if>if <condition>(<expr><operator>++</operator><name>locals</name> <operator>&lt;=</operator> <name>LOCALS_LOGGED</name></expr>)</condition><block type="pseudo"><block_content>
	     <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"using only locally-known addresses for %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>serv</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	 </block_content>}</block></if>
       <if type="elseif">else if <condition>(<expr><name><name>serv</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SERV_USE_RESOLV</name></expr>)</condition><block type="pseudo"><block_content>
	 <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"using standard nameservers for %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>serv</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
  
  <if_stmt><if>if <condition>(<expr><name>locals</name> <operator>&gt;</operator> <name>LOCALS_LOGGED</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"using %d more local addresses"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>locals</name> <operator>-</operator> <name>LOCALS_LOGGED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>count</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>SERVERS_LOGGED</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"using %d more nameservers"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>count</name> <operator>-</operator> <name>SERVERS_LOGGED</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="block">/* Remove unused sfds */</comment>
  <for>for <control>(<init><expr><name>sfd</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>sfds</name></name></expr><operator>,</operator> <expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>sfds</name></name></expr>;</init> <condition><expr><name>sfd</name></expr>;</condition> <incr><expr><name>sfd</name> <operator>=</operator> <name>tmp</name></expr></incr>)</control>
    <block>{<block_content>
       <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>sfd</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
       <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sfd</name><operator>-&gt;</operator><name>used</name></name></expr>)</condition> 
	<block>{<block_content>
	  <expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name><name>sfd</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>sfd</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> 
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>sfd</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>
  
  <expr_stmt><expr><call><name>cleanup_servers</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="block">/* remove servers we just deleted. */</comment>
  <expr_stmt><expr><call><name>build_server_array</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>

<comment type="block">/* Return zero if no servers found, in that case we keep polling.
   This is a protection against an update-time/write race on resolv.conf */</comment>
<function><type><name>int</name></type> <name>reload_servers</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>gotone</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* buff happens to be MAXDNAME long... */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to read %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
   
  <expr_stmt><expr><call><name>mark_servers</name><argument_list>(<argument><expr><name>SERV_FROM_RESOLV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
  <while>while <condition>(<expr><operator>(</operator><name>line</name> <operator>=</operator> <call><name>fgets</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>MAXDNAME</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>union</name> <name>mysockaddr</name></name></type> <name>addr</name></decl>, <decl><type ref="prev"/><name>source_addr</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name> <init>= <expr><call><name>strtok</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">" \t\n\r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"nameserver"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"server"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>token</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" \t\n\r"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if></if_stmt>
      
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>source_addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>source_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SOCKADDR_SA_LEN</name></cpp:ifdef>
	  <expr_stmt><expr><name><name>source_addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_len</name></name> <operator>=</operator> <name><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>source_addr</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	  <expr_stmt><expr><name><name>source_addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>NAMESERVER_PORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>source_addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name>INADDR_ANY</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>source_addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>query_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
      <else>else 
	<block>{<block_content>	
	  <decl_stmt><decl><type><name>int</name></type> <name>scope_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>scope_id</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name>scope_id</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>scope_id</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	      <expr_stmt><expr><name>scope_index</name> <operator>=</operator> <call><name>if_nametoindex</name><argument_list>(<argument><expr><name>scope_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SOCKADDR_SA_LEN</name></cpp:ifdef>
	      <expr_stmt><expr><name><name>source_addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_len</name></name> <operator>=</operator> <name><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>source_addr</name><operator>.</operator><name>in6</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	      <expr_stmt><expr><name><name>source_addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_family</name></name> <operator>=</operator> <name><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>source_addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_flowinfo</name></name> <operator>=</operator> <name><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_flowinfo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>NAMESERVER_PORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_scope_id</name></name> <operator>=</operator> <name>scope_index</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>source_addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name> <operator>=</operator> <name>in6addr_any</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>source_addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>query_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>source_addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_scope_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	    </block_content>}</block></if>
	  <else>else<block type="pseudo"><block_content>
	    <continue>continue;</continue></block_content></block></else></if_stmt>
	</block_content>}</block></else></if_stmt>

      <expr_stmt><expr><call><name>add_update_server</name><argument_list>(<argument><expr><name>SERV_FROM_RESOLV</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>source_addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>gotone</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
  
  <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cleanup_servers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>gotone</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Called when addresses are added or deleted from an interface */</comment>
<function><type><name>void</name></type> <name>newaddress</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_relay</name></name> <modifier>*</modifier></type><name>relay</name></decl>;</decl_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>now</name></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CLEVERBIND</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOCAL_SERVICE</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <name><name>daemon</name><operator>-&gt;</operator><name>doing_dhcp6</name></name> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>relay6</name></name> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>doing_ra</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>enumerate_interfaces</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CLEVERBIND</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>create_bound_listeners</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP</name></cpp:ifdef>
  <comment type="block">/* clear cache of subnet-&gt;relay index */</comment>
  <for>for <control>(<init><expr><name>relay</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>relay4</name></name></expr>;</init> <condition><expr><name>relay</name></expr>;</condition> <incr><expr><name>relay</name> <operator>=</operator> <name><name>relay</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>relay</name><operator>-&gt;</operator><name>iface_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>doing_dhcp6</name></name> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>relay6</name></name> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>doing_ra</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>join_multicast</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>doing_dhcp6</name></name> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>doing_ra</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>dhcp_construct_contexts</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>doing_dhcp6</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>lease_find_interfaces</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <for>for <control>(<init><expr><name>relay</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>relay6</name></name></expr>;</init> <condition><expr><name>relay</name></expr>;</condition> <incr><expr><name>relay</name> <operator>=</operator> <name><name>relay</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>relay</name><operator>-&gt;</operator><name>iface_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
