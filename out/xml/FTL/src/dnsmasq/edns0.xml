<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/dnsmasq/edns0.c"><comment type="block">/* dnsmasq is Copyright (c) 2000-2022 Simon Kelley

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 dated June, 1991, or
   (at your option) version 3 dated 29 June, 2007.
 
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
     
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnsmasq.h"</cpp:file></cpp:include>

<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>find_pseudoheader</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>plen</name></decl></parameter>, <parameter><decl><type><name>size_t</name>  <modifier>*</modifier></type><name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>is_sign</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>is_last</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* See if packet has an RFC2671 pseudoheader, and if so return a pointer to it. 
     also return length of pseudoheader in *len and pointer to the UDP size in *p
     Finally, check to see if a packet is signed. If it is we cannot change a single bit before
     forwarding. We look for TSIG in the addition section, and TKEY queries (for GSS-TSIG) */</comment>
  
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>arcount</name> <init>= <expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>arcount</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ansp</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>header</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>rdlen</name></decl>, <decl><type ref="prev"/><name>type</name></decl>, <decl><type ref="prev"/><name>class</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>is_sign</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>is_sign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>OPCODE</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>QUERY</name></expr>)</condition>
	<block>{<block_content>
	  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>qdcount</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ansp</name> <operator>=</operator> <call><name>skip_name</name><argument_list>(<argument><expr><name>ansp</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	      
	      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>ansp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>class</name></expr></argument>, <argument><expr><name>ansp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><name>class</name> <operator>==</operator> <name>C_IN</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <name>T_TKEY</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>is_sign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></for>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
  <else>else
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ansp</name> <operator>=</operator> <call><name>skip_questions</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    
  <if_stmt><if>if <condition>(<expr><name>arcount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ansp</name> <operator>=</operator> <call><name>skip_section</name><argument_list>(<argument><expr><name>ansp</name></expr></argument>, <argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>ancount</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>nscount</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 
  
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>arcount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
      <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>save</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>start</name> <init>= <expr><name>ansp</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ansp</name> <operator>=</operator> <call><name>skip_name</name><argument_list>(<argument><expr><name>ansp</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>ansp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>save</name> <operator>=</operator> <name>ansp</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>class</name></expr></argument>, <argument><expr><name>ansp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ansp</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <comment type="block">/* TTL */</comment>
      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>rdlen</name></expr></argument>, <argument><expr><name>ansp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ADD_RDLEN</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>ansp</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>rdlen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>T_OPT</name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>ansp</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	  <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>save</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name>is_last</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><operator>*</operator><name>is_last</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>==</operator> <name>arcount</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	  <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><name>is_sign</name> <operator>&amp;&amp;</operator> 
	       <name>i</name> <operator>==</operator> <name>arcount</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> 
	       <name>class</name> <operator>==</operator> <name>C_ANY</name> <operator>&amp;&amp;</operator> 
	       <name>type</name> <operator>==</operator> <name>T_TSIG</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><operator>*</operator><name>is_sign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
  
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
 

<comment type="block">/* replace == 2 -&gt;delete existing option only. */</comment>
<function><type><name>size_t</name></type> <name>add_pseudoheader</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>plen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>limit</name></decl></parameter>, 
			<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>udp_sz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>optno</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>optlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>set_do</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>replace</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>lenp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>datap</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>udp_len</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buff</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rdlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>is_sign</name></decl>, <decl><type ref="prev"/><name>is_last</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>flags</name> <init>= <expr><ternary><condition><expr><name>set_do</name></expr> ?</condition><then> <expr><literal type="number">0x8000</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>, <decl><type ref="prev"/><name>rcode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>find_pseudoheader</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>udp_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_sign</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>is_sign</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>plen</name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Existing header */</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>code</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>p</name> <operator>=</operator> <name>udp_len</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>udp_sz</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>rcode</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>set_do</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>p</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name>flags</name> <operator>|=</operator> <literal type="number">0x8000</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>lenp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>rdlen</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CHECK_LEN</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>rdlen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>plen</name></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* bad packet */</comment>
      <expr_stmt><expr><name>datap</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

       <comment type="block">/* no option to add */</comment>
      <if_stmt><if>if <condition>(<expr><name>optno</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>plen</name></expr>;</return></block_content></block></if></if_stmt>
      	  
      <comment type="block">/* check if option already there */</comment>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">4</literal> <operator>&lt;</operator> <name>rdlen</name></expr>;</condition><incr/>)</control>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
	  <comment type="block">/* malformed option, delete the whole OPT RR and start again. */</comment>
	  <if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name>rdlen</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>rdlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	      <expr_stmt><expr><name>is_last</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	      <break>break;</break>
	    </block_content>}</block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>optno</name></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><name>replace</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>plen</name></expr>;</return></block_content></block></if></if_stmt>

	      <comment type="block">/* delete option if we're to replace it. */</comment>
	      <expr_stmt><expr><name>p</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	      <expr_stmt><expr><name>rdlen</name> <operator>-=</operator> <name>len</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name><operator>+</operator><name>len</name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>rdlen</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><name>rdlen</name></expr></argument>, <argument><expr><name>lenp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name>lenp</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	    </block_content>}</block></if>
	  <else>else
	    <block>{<block_content>
	      <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>i</name> <operator>+=</operator> <name>len</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	    </block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

      <comment type="block">/* If we're going to extend the RR, it has to be the last RR in the packet */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_last</name></expr>)</condition>
	<block>{<block_content>
	  <comment type="block">/* First, take a copy of the options. */</comment>
	  <if_stmt><if>if <condition>(<expr><name>rdlen</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>buff</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><name>rdlen</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>datap</name></expr></argument>, <argument><expr><name>rdlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>	      
	  
	  <comment type="block">/* now, delete OPT RR */</comment>
	  <expr_stmt><expr><name>plen</name> <operator>=</operator> <call><name>rrfilter</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>RRFILTER_EDNS0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
	  <comment type="block">/* Now, force addition of a new one */</comment>
	  <expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>	  
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* We are (re)adding the pseudoheader */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>skip_questions</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
	  <operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>skip_section</name><argument_list>(<argument><expr><name>p</name></expr></argument>, 
			     <argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>ancount</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>nscount</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>arcount</name></name></expr></argument>)</argument_list></call></expr></argument>, 
			     <argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
      <block>{<block_content>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>plen</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">11</literal> <operator>&gt;</operator> <name>limit</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>plen</name></expr>;</return> <comment type="block">/* Too big */</comment>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* empty name */</comment>
      <expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><name>T_OPT</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><name>udp_sz</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* max packet length, 512 if not given in EDNS0 header */</comment>
      <expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><name>rcode</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block">/* extended RCODE and version */</comment>
      <expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* DO flag */</comment>
      <expr_stmt><expr><name>lenp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><name>rdlen</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block">/* RDLEN */</comment>
      <expr_stmt><expr><name>datap</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
      <comment type="block">/* Copy back any options */</comment>
      <if_stmt><if>if <condition>(<expr><name>buff</name></expr>)</condition>
	<block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>p</name> <operator>+</operator> <name>rdlen</name> <operator>&gt;</operator> <name>limit</name></expr>)</condition>
          <block>{<block_content>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>plen</name></expr>;</return> <comment type="block">/* Too big */</comment>
          </block_content>}</block></if></if_stmt>
	  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>rdlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>rdlen</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
      
      <comment type="block">/* Only bump arcount if RR is going to fit */</comment> 
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>ssize_t</name><operator>)</operator><name>optlen</name><operator>)</operator> <operator>&lt;=</operator> <operator>(</operator><name>limit</name> <operator>-</operator> <operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>arcount</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>arcount</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>ssize_t</name><operator>)</operator><name>optlen</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>limit</name> <operator>-</operator> <operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>plen</name></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* Too big */</comment>
  
  <comment type="block">/* Add new option */</comment>
  <if_stmt><if>if <condition>(<expr><name>optno</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>replace</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">4</literal> <operator>&gt;</operator> <name>limit</name></expr>)</condition><block type="pseudo"><block_content>
       <return>return <expr><name>plen</name></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* Too big */</comment>
      <expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><name>optno</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><name>optlen</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>p</name> <operator>+</operator> <name>optlen</name> <operator>&gt;</operator> <name>limit</name></expr>)</condition><block type="pseudo"><block_content>
       <return>return <expr><name>plen</name></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* Too big */</comment>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>optlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>optlen</name></expr>;</expr_stmt>  
      <expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name>datap</name></expr></argument>, <argument><expr><name>lenp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  <return>return <expr><name>p</name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>header</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>add_do_bit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>plen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>add_pseudoheader</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>limit</name></expr></argument>, <argument><expr><name>PACKETSZ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name>char64</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><literal type="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</literal><index>[<expr><name>c</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encoder</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>char64</name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>char64</name><argument_list>(<argument><expr><operator>(</operator><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>char64</name><argument_list>(<argument><expr><operator>(</operator><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">6</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>char64</name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* OPT_ADD_MAC = MAC is added (if available)
   OPT_ADD_MAC + OPT_STRIP_MAC = MAC is replaced, if not available, it is only removed
   OPT_STRIP_MAC = MAC is removed */</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type> <name>add_dns_client</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>plen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>limit</name></decl></parameter>,
			     <parameter><decl><type><name><name>union</name> <name>mysockaddr</name></name> <modifier>*</modifier></type><name>l3</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>cacheablep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>replace</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>maclen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>mac</name><index>[<expr><name>DHCP_CHADDR_MAX</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>encode</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="block">/* handle 6 byte MACs ONLY */</comment>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_MAC_B64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_MAC_HEX</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>maclen</name> <operator>=</operator> <call><name>find_mac</name><argument_list>(<argument><expr><name>l3</name></expr></argument>, <argument><expr><name>mac</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">6</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_STRIP_MAC</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	 <expr_stmt><expr><name>replace</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
       <expr_stmt><expr><operator>*</operator><name>cacheablep</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    
       <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_MAC_HEX</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	 <expr_stmt><expr><call><name>print_mac</name><argument_list>(<argument><expr><name>encode</name></expr></argument>, <argument><expr><name>mac</name></expr></argument>, <argument><expr><name>maclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
       <else>else
	 <block>{<block_content>
	   <expr_stmt><expr><call><name>encoder</name><argument_list>(<argument><expr><name>mac</name></expr></argument>, <argument><expr><name>encode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	   <expr_stmt><expr><call><name>encoder</name><argument_list>(<argument><expr><name>mac</name><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>encode</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	   <expr_stmt><expr><name><name>encode</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	 </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_STRIP_MAC</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>replace</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>replace</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>maclen</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>plen</name> <operator>=</operator> <call><name>add_pseudoheader</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>PACKETSZ</name></expr></argument>, <argument><expr><name>EDNS0_OPTION_NOMDEVICEID</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>encode</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>encode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>replace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <return>return <expr><name>plen</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* OPT_ADD_MAC = MAC is added (if available)
   OPT_ADD_MAC + OPT_STRIP_MAC = MAC is replaced, if not available, it is only removed
   OPT_STRIP_MAC = MAC is removed */</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type> <name>add_mac</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>plen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>limit</name></decl></parameter>,
		      <parameter><decl><type><name><name>union</name> <name>mysockaddr</name></name> <modifier>*</modifier></type><name>l3</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>cacheablep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>maclen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>replace</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>mac</name><index>[<expr><name>DHCP_CHADDR_MAX</name></expr>]</index></name></decl>;</decl_stmt>
    
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_ADD_MAC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>maclen</name> <operator>=</operator> <call><name>find_mac</name><argument_list>(<argument><expr><name>l3</name></expr></argument>, <argument><expr><name>mac</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>cacheablep</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_STRIP_MAC</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>replace</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_STRIP_MAC</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>replace</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>replace</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>maclen</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>plen</name> <operator>=</operator> <call><name>add_pseudoheader</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>PACKETSZ</name></expr></argument>, <argument><expr><name>EDNS0_OPTION_MAC</name></expr></argument>, <argument><expr><name>mac</name></expr></argument>, <argument><expr><name>maclen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>replace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <return>return <expr><name>plen</name></expr>;</return> 
</block_content>}</block></function>

<struct>struct <name>subnet_opt</name> <block>{
  <decl_stmt><decl><type><name>u16</name></type> <name>family</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name></type> <name>source_netmask</name></decl>, <decl><type ref="prev"/><name>scope_netmask</name></decl>;</decl_stmt> 
  <decl_stmt><decl><type><name>u8</name></type> <name><name>addr</name><index>[<expr><name>IN6ADDRSZ</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>get_addrp</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>mysockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>short</name></type> <name>family</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_addr</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>calc_subnet_opt</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>subnet_opt</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>mysockaddr</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>cacheablep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* http://tools.ietf.org/html/draft-vandergaast-edns-client-subnet-02 */</comment>
  
  <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>addrp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>sa_family</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>cacheable</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  
  <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>source_netmask</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>scope_netmask</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    
  <if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name> <operator>&amp;&amp;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>add_subnet6</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>source_netmask</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>add_subnet6</name><operator>-&gt;</operator><name>mask</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>add_subnet6</name><operator>-&gt;</operator><name>addr_used</name></name></expr>)</condition> 
	<block>{<block_content>
	  <expr_stmt><expr><name>sa_family</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>add_subnet6</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>addrp</name> <operator>=</operator> <call><name>get_addrp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>add_subnet6</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>sa_family</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>cacheable</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if> 
      <else>else<block type="pseudo"><block_content> 
	<expr_stmt><expr><name>addrp</name> <operator>=</operator> <operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name> <operator>&amp;&amp;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>add_subnet4</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>source_netmask</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>add_subnet4</name><operator>-&gt;</operator><name>mask</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>add_subnet4</name><operator>-&gt;</operator><name>addr_used</name></name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>sa_family</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>add_subnet4</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>addrp</name> <operator>=</operator> <call><name>get_addrp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>add_subnet4</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>sa_family</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>cacheable</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* Address is constant */</comment>
	</block_content>}</block></if> 
	<else>else<block type="pseudo"><block_content> 
	  <expr_stmt><expr><name>addrp</name> <operator>=</operator> <operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_addr</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><ternary><condition><expr><name>sa_family</name> <operator>==</operator> <name>AF_INET6</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>addrp</name> <operator>&amp;&amp;</operator> <name><name>opt</name><operator>-&gt;</operator><name>source_netmask</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>source_netmask</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>addrp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>source_netmask</name></name> <operator>&amp;</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>addr</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xff</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>source_netmask</name></name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
  <else>else
    <block>{<block_content>
      <expr_stmt><expr><name>cacheable</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* No address ever supplied. */</comment>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>cacheablep</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator><name>cacheablep</name> <operator>=</operator> <name>cacheable</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <return>return <expr><name>len</name> <operator>+</operator> <literal type="number">4</literal></expr>;</return>
</block_content>}</block></function>
 
<comment type="block">/* OPT_CLIENT_SUBNET = client subnet is added
   OPT_CLIENT_SUBNET + OPT_STRIP_ECS = client subnet is replaced
   OPT_STRIP_ECS = client subnet is removed */</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type> <name>add_source_addr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>plen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>limit</name></decl></parameter>,
			      <parameter><decl><type><name><name>union</name> <name>mysockaddr</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>cacheable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* http://tools.ietf.org/html/draft-vandergaast-edns-client-subnet-02 */</comment>
  
  <decl_stmt><decl><type><name>int</name></type> <name>replace</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>subnet_opt</name></name></type> <name>opt</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CLIENT_SUBNET</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_STRIP_ECS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>replace</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>calc_subnet_opt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>cacheable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_STRIP_ECS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>replace</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <return>return <expr><name>plen</name></expr>;</return></block_content></block></else></if_stmt>

  <return>return <expr><call><name>add_pseudoheader</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>limit</name></expr></argument>, <argument><expr><name>PACKETSZ</name></expr></argument>, <argument><expr><name>EDNS0_OPTION_CLIENT_SUBNET</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>replace</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>check_source</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>plen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pseudoheader</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>mysockaddr</name></name> <modifier>*</modifier></type><name>peer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Section 9.2, Check that subnet option in reply matches. */</comment>
  
  <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>calc_len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>subnet_opt</name></name></type> <name>opt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>rdlen</name></decl>;</decl_stmt>
  
  <expr_stmt><expr><name>calc_len</name> <operator>=</operator> <call><name>calc_subnet_opt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><name>peer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>skip_name</name><argument_list>(<argument><expr><name>pseudoheader</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt> <comment type="block">/* skip UDP length and RCODE */</comment>
  
  <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>rdlen</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CHECK_LEN</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>rdlen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* bad packet */</comment>
  
  <comment type="block">/* check if option there */</comment>
   <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">4</literal> <operator>&lt;</operator> <name>rdlen</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>len</name> <operator>+</operator> <literal type="number">4</literal></expr></incr>)</control>
     <block>{<block_content>
       <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>EDNS0_OPTION_CLIENT_SUBNET</name></expr>)</condition>
	 <block>{<block_content>
	   <comment type="block">/* make sure this doesn't mismatch. */</comment>
	   <expr_stmt><expr><name><name>opt</name><operator>.</operator><name>scope_netmask</name></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
	   <if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <name>calc_len</name> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	     <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	 </block_content>}</block></if></if_stmt>
       <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
     </block_content>}</block></for>
   
   <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* See https://docs.umbrella.com/umbrella-api/docs/identifying-dns-traffic for
 * detailed information on packet formating.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UMBRELLA_VERSION</name></cpp:macro>    <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UMBRELLA_TYPESZ</name></cpp:macro>     <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UMBRELLA_ASSET</name></cpp:macro>      <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UMBRELLA_ASSETSZ</name></cpp:macro>    <cpp:value>sizeof(daemon-&gt;umbrella_asset)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UMBRELLA_ORG</name></cpp:macro>        <cpp:value>0x0008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UMBRELLA_ORGSZ</name></cpp:macro>      <cpp:value>sizeof(daemon-&gt;umbrella_org)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UMBRELLA_IPV4</name></cpp:macro>       <cpp:value>0x0010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UMBRELLA_IPV6</name></cpp:macro>       <cpp:value>0x0020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UMBRELLA_DEVICE</name></cpp:macro>     <cpp:value>0x0040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UMBRELLA_DEVICESZ</name></cpp:macro>   <cpp:value>sizeof(daemon-&gt;umbrella_device)</cpp:value></cpp:define>

<struct>struct <name>umbrella_opt</name> <block>{
  <decl_stmt><decl><type><name>u8</name></type> <name><name>magic</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name></type> <name>version</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name></type> <name>flags</name></decl>;</decl_stmt>
  <comment type="block">/* We have 4 possible fields since we'll never send both IPv4 and
   * IPv6, so using the larger of the two to calculate max buffer size.
   * Each field also has a type header.  So the following accounts for
   * the type headers and each field size to get a max buffer size.
   */</comment>
  <decl_stmt><decl><type><name>u8</name></type> <name><name>fields</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>UMBRELLA_TYPESZ</name> <operator>+</operator> <name>UMBRELLA_ORGSZ</name> <operator>+</operator> <name>IN6ADDRSZ</name> <operator>+</operator> <name>UMBRELLA_DEVICESZ</name> <operator>+</operator> <name>UMBRELLA_ASSETSZ</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>add_umbrella_opt</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>plen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>limit</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>mysockaddr</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>cacheable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>cacheable</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>umbrella_opt</name></name></type> <name>opt</name> <init>= <expr><block>{<expr><block>{<expr><literal type="string">"ODNS"</literal></expr>}</block></expr>, <expr><name>UMBRELLA_VERSION</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{}</block></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>u</name> <init>= <expr><operator>&amp;</operator><name><name>opt</name><operator>.</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>family</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><ternary><condition><expr><name>family</name> <operator>==</operator> <name>AF_INET</name></expr> ?</condition><then> <expr><name>INADDRSZ</name></expr> </then><else>: <expr><name>IN6ADDRSZ</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>umbrella_org</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><name>UMBRELLA_ORG</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>PUTLONG</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>umbrella_org</name></name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><ternary><condition><expr><name>family</name> <operator>==</operator> <name>AF_INET</name></expr> ?</condition><then> <expr><name>UMBRELLA_IPV4</name></expr> </then><else>: <expr><name>UMBRELLA_IPV6</name></expr></else></ternary></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><call><name>get_addrp</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>family</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>u</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_UMBRELLA_DEVID</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><name>UMBRELLA_DEVICE</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>umbrella_device</name></name></expr></argument>, <argument><expr><name>UMBRELLA_DEVICESZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>u</name> <operator>+=</operator> <name>UMBRELLA_DEVICESZ</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>umbrella_asset</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><name>UMBRELLA_ASSET</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>PUTLONG</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>umbrella_asset</name></name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  
  <return>return <expr><call><name>add_pseudoheader</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>limit</name></expr></argument>, <argument><expr><name>PACKETSZ</name></expr></argument>, <argument><expr><name>EDNS0_OPTION_UMBRELLA</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><name>u</name> <operator>-</operator> <operator>(</operator><name>u8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Set *check_subnet if we add a client subnet option, which needs to checked 
   in the reply. Set *cacheable to zero if we add an option which the answer
   may depend on. */</comment>
<function><type><name>size_t</name></type> <name>add_edns0_config</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>plen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>limit</name></decl></parameter>, 
			<parameter><decl><type><name><name>union</name> <name>mysockaddr</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>cacheable</name></decl></parameter>)</parameter_list>    
<block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>cacheable</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  
  <expr_stmt><expr><name>plen</name>  <operator>=</operator> <call><name>add_mac</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>cacheable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>plen</name> <operator>=</operator> <call><name>add_dns_client</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>cacheable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>dns_client_id</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>plen</name> <operator>=</operator> <call><name>add_pseudoheader</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>PACKETSZ</name></expr></argument>, <argument><expr><name>EDNS0_OPTION_NOMCPEID</name></expr></argument>, 
			    <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>dns_client_id</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dns_client_id</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_UMBRELLA</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>plen</name> <operator>=</operator> <call><name>add_umbrella_opt</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>cacheable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><name>plen</name> <operator>=</operator> <call><name>add_source_addr</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>cacheable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  	  
  <return>return <expr><name>plen</name></expr>;</return>
</block_content>}</block></function>
</unit>
