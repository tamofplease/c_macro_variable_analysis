<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/dnsmasq/conntrack.c"><comment type="block">/* dnsmasq is Copyright (c) 2000-2022 Simon Kelley

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 dated June, 1991, or
   (at your option) version 3 dated 29 June, 2007.
 
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
     
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnsmasq.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONNTRACK</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libnetfilter_conntrack/libnetfilter_conntrack.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>gotit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* yuck */</comment>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>callback</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>nf_conntrack_msg_type</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>nf_conntrack</name></name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>get_incoming_mark</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>mysockaddr</name></name> <modifier>*</modifier></type><name>peer_addr</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>all_addr</name></name> <modifier>*</modifier></type><name>local_addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>istcp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>markp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>nf_conntrack</name></name> <modifier>*</modifier></type><name>ct</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>nfct_handle</name></name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
  
  <expr_stmt><expr><name>gotit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ct</name> <operator>=</operator> <call><name>nfct_new</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> 
    <block>{<block_content>
      <expr_stmt><expr><call><name>nfct_set_attr_u8</name><argument_list>(<argument><expr><name>ct</name></expr></argument>, <argument><expr><name>ATTR_L4PROTO</name></expr></argument>, <argument><expr><ternary><condition><expr><name>istcp</name></expr> ?</condition><then> <expr><name>IPPROTO_TCP</name></expr> </then><else>: <expr><name>IPPROTO_UDP</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>nfct_set_attr_u16</name><argument_list>(<argument><expr><name>ct</name></expr></argument>, <argument><expr><name>ATTR_PORT_DST</name></expr></argument>, <argument><expr><call><name>htons</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>peer_addr</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>nfct_set_attr_u8</name><argument_list>(<argument><expr><name>ct</name></expr></argument>, <argument><expr><name>ATTR_L3PROTO</name></expr></argument>, <argument><expr><name>AF_INET6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>nfct_set_attr</name><argument_list>(<argument><expr><name>ct</name></expr></argument>, <argument><expr><name>ATTR_IPV6_SRC</name></expr></argument>, <argument><expr><name><name>peer_addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_addr</name><operator>.</operator><name>s6_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>nfct_set_attr_u16</name><argument_list>(<argument><expr><name>ct</name></expr></argument>, <argument><expr><name>ATTR_PORT_SRC</name></expr></argument>, <argument><expr><name><name>peer_addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>nfct_set_attr</name><argument_list>(<argument><expr><name>ct</name></expr></argument>, <argument><expr><name>ATTR_IPV6_DST</name></expr></argument>, <argument><expr><name><name>local_addr</name><operator>-&gt;</operator><name>addr6</name><operator>.</operator><name>s6_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <expr_stmt><expr><call><name>nfct_set_attr_u8</name><argument_list>(<argument><expr><name>ct</name></expr></argument>, <argument><expr><name>ATTR_L3PROTO</name></expr></argument>, <argument><expr><name>AF_INET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>nfct_set_attr_u32</name><argument_list>(<argument><expr><name>ct</name></expr></argument>, <argument><expr><name>ATTR_IPV4_SRC</name></expr></argument>, <argument><expr><name><name>peer_addr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>nfct_set_attr_u16</name><argument_list>(<argument><expr><name>ct</name></expr></argument>, <argument><expr><name>ATTR_PORT_SRC</name></expr></argument>, <argument><expr><name><name>peer_addr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>nfct_set_attr_u32</name><argument_list>(<argument><expr><name>ct</name></expr></argument>, <argument><expr><name>ATTR_IPV4_DST</name></expr></argument>, <argument><expr><name><name>local_addr</name><operator>-&gt;</operator><name>addr4</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
      
      
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>h</name> <operator>=</operator> <call><name>nfct_open</name><argument_list>(<argument><expr><name>CONNTRACK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> 
	<block>{<block_content>
	  <expr_stmt><expr><call><name>nfct_callback_register</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>NFCT_T_ALL</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>markp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
	  <if_stmt><if>if <condition>(<expr><call><name>nfct_query</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>NFCT_Q_GET</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	    <block>{<block_content>
	      <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>warned</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>warned</name></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Conntrack connection mark retrieval failed: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name>warned</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
	  <expr_stmt><expr><call><name>nfct_close</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
	</block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>nfct_destroy</name><argument_list>(<argument><expr><name>ct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <return>return <expr><name>gotit</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>callback</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>nf_conntrack_msg_type</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>nf_conntrack</name></name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <call><name>nfct_get_attr_u32</name><argument_list>(<argument><expr><name>ct</name></expr></argument>, <argument><expr><name>ATTR_MARK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>type</name></expr>;</expr_stmt> <comment type="block">/* eliminate warning */</comment>
  <expr_stmt><expr><name>gotit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <return>return <expr><name>NFCT_CB_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_CONNTRACK */</comment>
</unit>
