<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/dnsmasq/metrics.c"><comment type="block">/* dnsmasq is Copyright (c) 2000-2022 Simon Kelley

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 dated June, 1991, or
   (at your option) version 3 dated 29 June, 2007.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnsmasq.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name><name>metric_names</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="string">"dns_cache_inserted"</literal></expr>,
    <expr><literal type="string">"dns_cache_live_freed"</literal></expr>,
    <expr><literal type="string">"dns_queries_forwarded"</literal></expr>,
    <expr><literal type="string">"dns_auth_answered"</literal></expr>,
    <expr><literal type="string">"dns_local_answered"</literal></expr>,
    <expr><literal type="string">"dns_stale_answered"</literal></expr>,
    <expr><literal type="string">"dns_unanswered"</literal></expr>,
    <expr><literal type="string">"bootp"</literal></expr>,
    <expr><literal type="string">"pxe"</literal></expr>,
    <expr><literal type="string">"dhcp_ack"</literal></expr>,
    <expr><literal type="string">"dhcp_decline"</literal></expr>,
    <expr><literal type="string">"dhcp_discover"</literal></expr>,
    <expr><literal type="string">"dhcp_inform"</literal></expr>,
    <expr><literal type="string">"dhcp_nak"</literal></expr>,
    <expr><literal type="string">"dhcp_offer"</literal></expr>,
    <expr><literal type="string">"dhcp_release"</literal></expr>,
    <expr><literal type="string">"dhcp_request"</literal></expr>,
    <expr><literal type="string">"noanswer"</literal></expr>,
    <expr><literal type="string">"leases_allocated_4"</literal></expr>,
    <expr><literal type="string">"leases_pruned_4"</literal></expr>,
    <expr><literal type="string">"leases_allocated_6"</literal></expr>,
    <expr><literal type="string">"leases_pruned_6"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>get_metric_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>metric_names</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>clear_metrics</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>serv</name></decl>;</decl_stmt>
  
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>__METRIC_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

  <for>for <control>(<init><expr><name>serv</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>servers</name></name></expr>;</init> <condition><expr><name>serv</name></expr>;</condition> <incr><expr><name>serv</name> <operator>=</operator> <name><name>serv</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name><name>serv</name><operator>-&gt;</operator><name>queries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>serv</name><operator>-&gt;</operator><name>failed_queries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>serv</name><operator>-&gt;</operator><name>failed_queries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>serv</name><operator>-&gt;</operator><name>retrys</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>serv</name><operator>-&gt;</operator><name>nxdomain_replies</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>serv</name><operator>-&gt;</operator><name>query_latency</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>
	
</unit>
