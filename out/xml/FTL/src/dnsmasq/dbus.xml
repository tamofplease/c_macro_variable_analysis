<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/dnsmasq/dbus.c"><comment type="block">/* dnsmasq is Copyright (c) 2000-2022 Simon Kelley

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 dated June, 1991, or
   (at your option) version 3 dated 29 June, 2007.
 
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
     
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnsmasq.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DBUS</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dbus/dbus.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>introspection_xml_template</name> <init>=
<expr><literal type="string">"&lt;!DOCTYPE node PUBLIC \"-//freedesktop//DTD D-BUS Object Introspection 1.0//EN\"\n"</literal>
<literal type="string">"\"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd\"&gt;\n"</literal>
<literal type="string">"&lt;node name=\""</literal> <name>DNSMASQ_PATH</name> <literal type="string">"\"&gt;\n"</literal>
<literal type="string">"  &lt;interface name=\"org.freedesktop.DBus.Introspectable\"&gt;\n"</literal>
<literal type="string">"    &lt;method name=\"Introspect\"&gt;\n"</literal>
<literal type="string">"      &lt;arg name=\"data\" direction=\"out\" type=\"s\"/&gt;\n"</literal>
<literal type="string">"    &lt;/method&gt;\n"</literal>
<literal type="string">"  &lt;/interface&gt;\n"</literal>
<literal type="string">"  &lt;interface name=\"%s\"&gt;\n"</literal>
<literal type="string">"    &lt;method name=\"ClearCache\"&gt;\n"</literal>
<literal type="string">"    &lt;/method&gt;\n"</literal>
<literal type="string">"    &lt;method name=\"GetVersion\"&gt;\n"</literal>
<literal type="string">"      &lt;arg name=\"version\" direction=\"out\" type=\"s\"/&gt;\n"</literal>
<literal type="string">"    &lt;/method&gt;\n"</literal>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LOOP</name></cpp:ifdef>
<literal type="string">"    &lt;method name=\"GetLoopServers\"&gt;\n"</literal>
<literal type="string">"      &lt;arg name=\"server\" direction=\"out\" type=\"as\"/&gt;\n"</literal>
<literal type="string">"    &lt;/method&gt;\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">"    &lt;method name=\"SetServers\"&gt;\n"</literal>
<literal type="string">"      &lt;arg name=\"servers\" direction=\"in\" type=\"av\"/&gt;\n"</literal>
<literal type="string">"    &lt;/method&gt;\n"</literal>
<literal type="string">"    &lt;method name=\"SetDomainServers\"&gt;\n"</literal>
<literal type="string">"      &lt;arg name=\"servers\" direction=\"in\" type=\"as\"/&gt;\n"</literal>
<literal type="string">"    &lt;/method&gt;\n"</literal>
<literal type="string">"    &lt;method name=\"SetServersEx\"&gt;\n"</literal>
<literal type="string">"      &lt;arg name=\"servers\" direction=\"in\" type=\"aas\"/&gt;\n"</literal>
<literal type="string">"    &lt;/method&gt;\n"</literal>
<literal type="string">"    &lt;method name=\"SetFilterWin2KOption\"&gt;\n"</literal>
<literal type="string">"      &lt;arg name=\"filterwin2k\" direction=\"in\" type=\"b\"/&gt;\n"</literal>
<literal type="string">"    &lt;/method&gt;\n"</literal>
<literal type="string">"    &lt;method name=\"SetLocaliseQueriesOption\"&gt;\n"</literal>
<literal type="string">"      &lt;arg name=\"localise-queries\" direction=\"in\" type=\"b\"/&gt;\n"</literal>
<literal type="string">"    &lt;/method&gt;\n"</literal>
<literal type="string">"    &lt;method name=\"SetBogusPrivOption\"&gt;\n"</literal>
<literal type="string">"      &lt;arg name=\"boguspriv\" direction=\"in\" type=\"b\"/&gt;\n"</literal>
<literal type="string">"    &lt;/method&gt;\n"</literal>
<literal type="string">"    &lt;signal name=\"DhcpLeaseAdded\"&gt;\n"</literal>
<literal type="string">"      &lt;arg name=\"ipaddr\" type=\"s\"/&gt;\n"</literal>
<literal type="string">"      &lt;arg name=\"hwaddr\" type=\"s\"/&gt;\n"</literal>
<literal type="string">"      &lt;arg name=\"hostname\" type=\"s\"/&gt;\n"</literal>
<literal type="string">"    &lt;/signal&gt;\n"</literal>
<literal type="string">"    &lt;signal name=\"DhcpLeaseDeleted\"&gt;\n"</literal>
<literal type="string">"      &lt;arg name=\"ipaddr\" type=\"s\"/&gt;\n"</literal>
<literal type="string">"      &lt;arg name=\"hwaddr\" type=\"s\"/&gt;\n"</literal>
<literal type="string">"      &lt;arg name=\"hostname\" type=\"s\"/&gt;\n"</literal>
<literal type="string">"    &lt;/signal&gt;\n"</literal>
<literal type="string">"    &lt;signal name=\"DhcpLeaseUpdated\"&gt;\n"</literal>
<literal type="string">"      &lt;arg name=\"ipaddr\" type=\"s\"/&gt;\n"</literal>
<literal type="string">"      &lt;arg name=\"hwaddr\" type=\"s\"/&gt;\n"</literal>
<literal type="string">"      &lt;arg name=\"hostname\" type=\"s\"/&gt;\n"</literal>
<literal type="string">"    &lt;/signal&gt;\n"</literal>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP</name></cpp:ifdef>
<literal type="string">"    &lt;method name=\"AddDhcpLease\"&gt;\n"</literal>
<literal type="string">"       &lt;arg name=\"ipaddr\" type=\"s\"/&gt;\n"</literal>
<literal type="string">"       &lt;arg name=\"hwaddr\" type=\"s\"/&gt;\n"</literal>
<literal type="string">"       &lt;arg name=\"hostname\" type=\"ay\"/&gt;\n"</literal>
<literal type="string">"       &lt;arg name=\"clid\" type=\"ay\"/&gt;\n"</literal>
<literal type="string">"       &lt;arg name=\"lease_duration\" type=\"u\"/&gt;\n"</literal>
<literal type="string">"       &lt;arg name=\"ia_id\" type=\"u\"/&gt;\n"</literal>
<literal type="string">"       &lt;arg name=\"is_temporary\" type=\"b\"/&gt;\n"</literal>
<literal type="string">"    &lt;/method&gt;\n"</literal>
<literal type="string">"    &lt;method name=\"DeleteDhcpLease\"&gt;\n"</literal>
<literal type="string">"       &lt;arg name=\"ipaddr\" type=\"s\"/&gt;\n"</literal>
<literal type="string">"       &lt;arg name=\"success\" type=\"b\" direction=\"out\"/&gt;\n"</literal>
<literal type="string">"    &lt;/method&gt;\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">"    &lt;method name=\"GetMetrics\"&gt;\n"</literal>
<literal type="string">"      &lt;arg name=\"metrics\" direction=\"out\" type=\"a{su}\"/&gt;\n"</literal>
<literal type="string">"    &lt;/method&gt;\n"</literal>
<literal type="string">"    &lt;method name=\"GetServerMetrics\"&gt;\n"</literal>
<literal type="string">"      &lt;arg name=\"metrics\" direction=\"out\" type=\"a{ss}\"/&gt;\n"</literal>
<literal type="string">"    &lt;/method&gt;\n"</literal>
<literal type="string">"    &lt;method name=\"ClearMetrics\"&gt;\n"</literal>
<literal type="string">"    &lt;/method&gt;\n"</literal>
<literal type="string">"  &lt;/interface&gt;\n"</literal>
<literal type="string">"&lt;/node&gt;\n"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>introspection_xml</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<struct>struct <name>watch</name> <block>{
  <decl_stmt><decl><type><name>DBusWatch</name> <modifier>*</modifier></type><name>watch</name></decl>;</decl_stmt>      
  <decl_stmt><decl><type><name><name>struct</name> <name>watch</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>


<function><type><specifier>static</specifier> <name>dbus_bool_t</name></type> <name>add_watch</name><parameter_list>(<parameter><decl><type><name>DBusWatch</name> <modifier>*</modifier></type><name>watch</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>watch</name></name> <modifier>*</modifier></type><name>w</name></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>w</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>watches</name></name></expr>;</init> <condition><expr><name>w</name></expr>;</condition> <incr><expr><name>w</name> <operator>=</operator> <name><name>w</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>watch</name></name> <operator>==</operator> <name>watch</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>w</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>watch</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>watch</name></name> <operator>=</operator> <name>watch</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>watches</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>watches</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt> <comment type="block">/* no warning */</comment>
  <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remove_watch</name><parameter_list>(<parameter><decl><type><name>DBusWatch</name> <modifier>*</modifier></type><name>watch</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>watch</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>up</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>w</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>  
  
  <for>for <control>(<init><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>daemon</name><operator>-&gt;</operator><name>watches</name></name><operator>)</operator></expr><operator>,</operator> <expr><name>w</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>watches</name></name></expr>;</init> <condition><expr><name>w</name></expr>;</condition> <incr><expr><name>w</name> <operator>=</operator> <name>tmp</name></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>w</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>watch</name></name> <operator>==</operator> <name>watch</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>w</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt> <comment type="block">/* no warning */</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DBusMessage</name><modifier>*</modifier></type> <name>dbus_read_servers</name><parameter_list>(<parameter><decl><type><name>DBusMessage</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>DBusMessageIter</name></type> <name>iter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>union</name>  <name>mysockaddr</name></name></type> <name>addr</name></decl>, <decl><type ref="prev"/><name>source_addr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>domain</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dbus_message_iter_init</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><call><name>dbus_message_new_error</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>DBUS_ERROR_INVALID_ARGS</name></expr></argument>,
                                    <argument><expr><literal type="string">"Failed to initialize dbus message iter"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mark_servers</name><argument_list>(<argument><expr><name>SERV_FROM_DBUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>skip</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>dbus_message_iter_get_arg_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DBUS_TYPE_UINT32</name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>u32</name></type> <name>a</name></decl>;</decl_stmt>
	  
	  <expr_stmt><expr><call><name>dbus_message_iter_get_basic</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>dbus_message_iter_next</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SOCKADDR_SA_LEN</name></cpp:ifdef>
	  <expr_stmt><expr><name><name>source_addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_len</name></name> <operator>=</operator> <name><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	  <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>source_addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>NAMESERVER_PORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>source_addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name>INADDR_ANY</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>source_addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>query_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><call><name>dbus_message_iter_get_arg_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DBUS_TYPE_BYTE</name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>p</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in6_addr</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

	  <expr_stmt><expr><name>skip</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	  <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>in6_addr</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>dbus_message_iter_get_basic</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>dbus_message_iter_next</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><call><name>dbus_message_iter_get_arg_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DBUS_TYPE_BYTE</name></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
		  <break>break;</break>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></for>

	  <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>in6_addr</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in6_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SOCKADDR_SA_LEN</name></cpp:ifdef>
              <expr_stmt><expr><name><name>source_addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_len</name></name> <operator>=</operator> <name><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
              <expr_stmt><expr><name><name>source_addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_family</name></name> <operator>=</operator> <name><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>NAMESERVER_PORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>source_addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_flowinfo</name></name> <operator>=</operator> <name><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_flowinfo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>source_addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_scope_id</name></name> <operator>=</operator> <name><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_scope_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>source_addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name> <operator>=</operator> <name>in6addr_any</name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>source_addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>query_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name>skip</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
      <else>else<block type="pseudo"><block_content>
	<comment type="block">/* At the end */</comment>
	<break>break;</break></block_content></block></else></if_stmt>
      
      <comment type="block">/* process each domain */</comment>
      <do>do <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>dbus_message_iter_get_arg_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DBUS_TYPE_STRING</name></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><call><name>dbus_message_iter_get_basic</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>dbus_message_iter_next</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
	  <expr_stmt><expr><name>domain</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>skip</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>add_update_server</name><argument_list>(<argument><expr><name>SERV_FROM_DBUS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>source_addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
     
      </block_content>}</block> while <condition>(<expr><call><name>dbus_message_iter_get_arg_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DBUS_TYPE_STRING</name></expr>)</condition>;</do> 
    </block_content>}</block></while>
   
  <comment type="block">/* unlink and free anything still marked. */</comment>
  <expr_stmt><expr><call><name>cleanup_servers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LOOP</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>DBusMessage</name> <modifier>*</modifier></type><name>dbus_reply_server_loop</name><parameter_list>(<parameter><decl><type><name>DBusMessage</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>DBusMessageIter</name></type> <name>args</name></decl>, <decl><type ref="prev"/><name>args_iter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>serv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBusMessage</name> <modifier>*</modifier></type><name>reply</name> <init>= <expr><call><name>dbus_message_new_method_return</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
   
  <expr_stmt><expr><call><name>dbus_message_iter_init_append</name> <argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dbus_message_iter_open_container</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_ARRAY</name></expr></argument>,<argument><expr><name>DBUS_TYPE_STRING_AS_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>args_iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><expr><name>serv</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>servers</name></name></expr>;</init> <condition><expr><name>serv</name></expr>;</condition> <incr><expr><name>serv</name> <operator>=</operator> <name><name>serv</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>serv</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SERV_LOOP</name></expr>)</condition>
      <block>{<block_content>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>prettyprint_addr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>serv</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dbus_message_iter_append_basic</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>args_iter</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt></block_content></block></for>
  
  <expr_stmt><expr><call><name>dbus_message_iter_close_container</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>args_iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>reply</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>DBusMessage</name><modifier>*</modifier></type> <name>dbus_read_servers_ex</name><parameter_list>(<parameter><decl><type><name>DBusMessage</name> <modifier>*</modifier></type><name>message</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>strings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>DBusMessageIter</name></type> <name>iter</name></decl>, <decl><type ref="prev"/><name>array_iter</name></decl>, <decl><type ref="prev"/><name>string_iter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBusMessage</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr_err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dbus_message_iter_init</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><call><name>dbus_message_new_error</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>DBUS_ERROR_INVALID_ARGS</name></expr></argument>,
                                    <argument><expr><literal type="string">"Failed to initialize dbus message iter"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

  <comment type="block">/* check that the message contains an array of arrays */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>dbus_message_iter_get_arg_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DBUS_TYPE_ARRAY</name><operator>)</operator> <operator>||</operator>
      <operator>(</operator><call><name>dbus_message_iter_get_element_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><ternary><condition><expr><name>strings</name></expr> ?</condition><then> <expr><name>DBUS_TYPE_STRING</name></expr> </then><else>: <expr><name>DBUS_TYPE_ARRAY</name></expr></else></ternary><operator>)</operator><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <return>return <expr><call><name>dbus_message_new_error</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>DBUS_ERROR_INVALID_ARGS</name></expr></argument>,
                                    <argument><expr><ternary><condition><expr><name>strings</name></expr> ?</condition><then> <expr><literal type="string">"Expected array of string"</literal></expr> </then><else>: <expr><literal type="string">"Expected array of string arrays"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></if></if_stmt>
 
  <expr_stmt><expr><call><name>mark_servers</name><argument_list>(<argument><expr><name>SERV_FROM_DBUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* array_iter points to each "as" element in the outer array */</comment>
  <expr_stmt><expr><call><name>dbus_message_iter_recurse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>array_iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><call><name>dbus_message_iter_get_arg_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>array_iter</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DBUS_TYPE_INVALID</name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>union</name>  <name>mysockaddr</name></name></type> <name>addr</name></decl>, <decl><type ref="prev"/><name>source_addr</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>u16</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type> <name><name>interface</name><index>[<expr><name>IF_NAMESIZE</name></expr>]</index></name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str_addr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>str_domain</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>struct</name> <name>server_details</name></name></type> <name>sdetails</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>sdetails</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <operator>&amp;</operator><name>addr</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sdetails</name><operator>.</operator><name>source_addr</name></name> <operator>=</operator> <operator>&amp;</operator><name>source_addr</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sdetails</name><operator>.</operator><name>interface</name></name> <operator>=</operator> <name>interface</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sdetails</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <operator>&amp;</operator><name>flags</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>strings</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>dbus_message_iter_get_basic</name><argument_list>(<argument><expr><operator>&amp;</operator><name>array_iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name> <operator>||</operator> <operator>!</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>dbus_message_new_error</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>DBUS_ERROR_INVALID_ARGS</name></expr></argument>,
					     <argument><expr><literal type="string">"Empty string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <break>break;</break>
	    </block_content>}</block></if></if_stmt>
	  
	  <comment type="block">/* dup the string because it gets modified during parsing */</comment>
	  <if_stmt><if>if <condition>(<expr><name>dup</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>dup</name> <operator>=</operator> <name>str_domain</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <break>break;</break></block_content></block></if></if_stmt>
	  
	  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>str_domain</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <comment type="block">/* point to address part of old string for error message */</comment>
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>str_addr</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>str</name> <operator>=</operator> <name>str_addr</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>str_addr</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>str_domain</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>str_domain</name> <operator>!=</operator> <literal type="char">'/'</literal> <operator>||</operator> <name>str_addr</name> <operator>==</operator> <name>str_domain</name></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>dbus_message_new_error_printf</name><argument_list>(<argument><expr><name>message</name></expr></argument>,
							<argument><expr><name>DBUS_ERROR_INVALID_ARGS</name></expr></argument>,
							<argument><expr><literal type="string">"No domain terminator '%s'"</literal></expr></argument>,
							<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <break>break;</break>
		</block_content>}</block></if></if_stmt>
	      <expr_stmt><expr><operator>*</operator><name>str_addr</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	      <expr_stmt><expr><name>str_domain</name><operator>++</operator></expr>;</expr_stmt>
	    </block_content>}</block></if>
	  <else>else
	    <block>{<block_content>
	      <expr_stmt><expr><name>str_addr</name> <operator>=</operator> <name>str_domain</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>str_domain</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	    </block_content>}</block></else></if_stmt>

	  
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <comment type="block">/* check the types of the struct and its elements */</comment>
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>dbus_message_iter_get_arg_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>array_iter</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DBUS_TYPE_ARRAY</name><operator>)</operator> <operator>||</operator>
	      <operator>(</operator><call><name>dbus_message_iter_get_element_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>array_iter</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DBUS_TYPE_STRING</name><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>dbus_message_new_error</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>DBUS_ERROR_INVALID_ARGS</name></expr></argument>,
					     <argument><expr><literal type="string">"Expected inner array of strings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <break>break;</break>
	    </block_content>}</block></if></if_stmt>
	  
	  <comment type="block">/* string_iter points to each "s" element in the inner array */</comment>
	  <expr_stmt><expr><call><name>dbus_message_iter_recurse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>array_iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>string_iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><call><name>dbus_message_iter_get_arg_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>string_iter</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DBUS_TYPE_STRING</name></expr>)</condition>
	    <block>{<block_content>
	      <comment type="block">/* no IP address given */</comment>
	      <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>dbus_message_new_error</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>DBUS_ERROR_INVALID_ARGS</name></expr></argument>,
					     <argument><expr><literal type="string">"Expected IP address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <break>break;</break>
	    </block_content>}</block></if></if_stmt>
	  
	  <expr_stmt><expr><call><name>dbus_message_iter_get_basic</name><argument_list>(<argument><expr><operator>&amp;</operator><name>string_iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name> <operator>||</operator> <operator>!</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>dbus_message_new_error</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>DBUS_ERROR_INVALID_ARGS</name></expr></argument>,
					     <argument><expr><literal type="string">"Empty IP address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <break>break;</break>
	    </block_content>}</block></if></if_stmt>
	  
	  <comment type="block">/* dup the string because it gets modified during parsing */</comment>
	  <if_stmt><if>if <condition>(<expr><name>dup</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>dup</name> <operator>=</operator> <name>str_addr</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <break>break;</break></block_content></block></if></if_stmt>
	  
	  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>str_addr</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>strings</name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	  
	  <do>do <block>{<block_content>
	    <if_stmt><if>if <condition>(<expr><name>str_domain</name></expr>)</condition>
	      <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>str_domain</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      </block_content>}</block></if>
	    <else>else<block type="pseudo"><block_content> 
	      <expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	    
	     <if_stmt><if>if <condition>(<expr><name>strings</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str_addr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	       <expr_stmt><expr><call><name>add_update_server</name><argument_list>(<argument><expr><name>SERV_LITERAL_ADDRESS</name> <operator>|</operator> <name>SERV_FROM_DBUS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>source_addr</name></expr></argument>, <argument><expr><name>interface</name></expr></argument>, <argument><expr><name>str_domain</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	     <else>else
	       <block>{<block_content>
		 <if_stmt><if>if <condition>(<expr><operator>(</operator><name>addr_err</name> <operator>=</operator> <call><name>parse_server</name><argument_list>(<argument><expr><name>str_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sdetails</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		   <block>{<block_content>
		     <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>dbus_message_new_error_printf</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>DBUS_ERROR_INVALID_ARGS</name></expr></argument>,
							   <argument><expr><literal type="string">"Invalid IP address '%s': %s"</literal></expr></argument>,
							   <argument><expr><name>str</name></expr></argument>, <argument><expr><name>addr_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		     <break>break;</break>
		   </block_content>}</block></if></if_stmt>
		 
		 <while>while <condition>(<expr><call><name>parse_server_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sdetails</name></expr></argument>)</argument_list></call></expr>)</condition>
		   <block>{<block_content>
		     <if_stmt><if>if <condition>(<expr><operator>(</operator><name>addr_err</name> <operator>=</operator> <call><name>parse_server_addr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sdetails</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		       <block>{<block_content>
			 <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>dbus_message_new_error_printf</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>DBUS_ERROR_INVALID_ARGS</name></expr></argument>,
							       <argument><expr><literal type="string">"Invalid IP address '%s': %s"</literal></expr></argument>,
							       <argument><expr><name>str</name></expr></argument>, <argument><expr><name>addr_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			 <break>break;</break>
		       </block_content>}</block></if></if_stmt>
		     
		     <expr_stmt><expr><call><name>add_update_server</name><argument_list>(<argument><expr><name>flags</name> <operator>|</operator> <name>SERV_FROM_DBUS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>source_addr</name></expr></argument>, <argument><expr><name>interface</name></expr></argument>, <argument><expr><name>str_domain</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		   </block_content>}</block></while>
	       </block_content>}</block></else></if_stmt>
	  </block_content>}</block> while <condition>(<expr><operator>(</operator><name>str_domain</name> <operator>=</operator> <name>p</name><operator>)</operator></expr>)</condition>;</do>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <comment type="block">/* jump past the address to the domain list (if any) */</comment>
	  <expr_stmt><expr><call><name>dbus_message_iter_next</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>string_iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
	  <comment type="block">/* parse domains and add each server/domain pair to the list */</comment>
	  <do>do <block>{<block_content>
	    <expr_stmt><expr><name>str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><call><name>dbus_message_iter_get_arg_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>string_iter</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DBUS_TYPE_STRING</name></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><call><name>dbus_message_iter_get_basic</name><argument_list>(<argument><expr><operator>&amp;</operator><name>string_iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    <expr_stmt><expr><call><name>dbus_message_iter_next</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>string_iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>addr_err</name> <operator>=</operator> <call><name>parse_server</name><argument_list>(<argument><expr><name>str_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sdetails</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>dbus_message_new_error_printf</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>DBUS_ERROR_INVALID_ARGS</name></expr></argument>,
						      <argument><expr><literal type="string">"Invalid IP address '%s': %s"</literal></expr></argument>,
						      <argument><expr><name>str</name></expr></argument>, <argument><expr><name>addr_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	      </block_content>}</block></if></if_stmt>
	    
	    <while>while <condition>(<expr><call><name>parse_server_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sdetails</name></expr></argument>)</argument_list></call></expr>)</condition>
	      <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>addr_err</name> <operator>=</operator> <call><name>parse_server_addr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sdetails</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>dbus_message_new_error_printf</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>DBUS_ERROR_INVALID_ARGS</name></expr></argument>,
							  <argument><expr><literal type="string">"Invalid IP address '%s': %s"</literal></expr></argument>,
							  <argument><expr><name>str</name></expr></argument>, <argument><expr><name>addr_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <break>break;</break>
		  </block_content>}</block></if></if_stmt>
		
		<comment type="block">/* 0.0.0.0 for server address == NULL, for Dbus */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_family</name></name> <operator>==</operator> <name>AF_INET</name> <operator>&amp;&amp;</operator>
		    <name><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SERV_LITERAL_ADDRESS</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
		  <expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>SERV_LITERAL_ADDRESS</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		
		<expr_stmt><expr><call><name>add_update_server</name><argument_list>(<argument><expr><name>flags</name> <operator>|</operator> <name>SERV_FROM_DBUS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>source_addr</name></expr></argument>, <argument><expr><name>interface</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      </block_content>}</block></while>
	  </block_content>}</block> while <condition>(<expr><call><name>dbus_message_iter_get_arg_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>string_iter</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DBUS_TYPE_STRING</name></expr>)</condition>;</do>
	</block_content>}</block></else></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>sdetails</name><operator>.</operator><name>resolved</name></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name><name>sdetails</name><operator>.</operator><name>hostinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <comment type="block">/* jump to next element in outer array */</comment>
      <expr_stmt><expr><call><name>dbus_message_iter_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>array_iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

  <expr_stmt><expr><call><name>cleanup_servers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
  <if_stmt><if>if <condition>(<expr><name>dup</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DBusMessage</name> <modifier>*</modifier></type><name>dbus_set_bool</name><parameter_list>(<parameter><decl><type><name>DBusMessage</name> <modifier>*</modifier></type><name>message</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>DBusMessageIter</name></type> <name>iter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>dbus_bool_t</name></type> <name>enabled</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dbus_message_iter_init</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>dbus_message_iter_get_arg_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DBUS_TYPE_BOOLEAN</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>dbus_message_new_error</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>DBUS_ERROR_INVALID_ARGS</name></expr></argument>, <argument><expr><literal type="string">"Expected boolean argument"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><call><name>dbus_message_iter_get_basic</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>enabled</name></expr>)</condition>
    <block>{<block_content> 
      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Enabling --%s option from D-Bus"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>set_option_bool</name><argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
  <else>else
    <block>{<block_content>
      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Disabling --%s option from D-Bus"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>reset_option_bool</name><argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>DBusMessage</name> <modifier>*</modifier></type><name>dbus_add_lease</name><parameter_list>(<parameter><decl><type><name>DBusMessage</name><modifier>*</modifier></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ipaddr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hwaddr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hostname</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>clid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>clid_len</name></decl>, <decl><type ref="prev"/><name>hostname_len</name></decl>, <decl><type ref="prev"/><name>hw_len</name></decl>, <decl><type ref="prev"/><name>hw_type</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>dbus_uint32_t</name></type> <name>expires</name></decl>, <decl><type ref="prev"/><name>ia_id</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>dbus_bool_t</name></type> <name>is_temporary</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>union</name> <name>all_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>time_t</name></type> <name>now</name> <init>= <expr><call><name>dnsmasq_time</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>dhcp_chaddr</name><index>[<expr><name>DHCP_CHADDR_MAX</name></expr>]</index></name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>DBusMessageIter</name></type> <name>iter</name></decl>, <decl><type ref="prev"/><name>array_iter</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dbus_message_iter_init</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>dbus_message_new_error</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>DBUS_ERROR_INVALID_ARGS</name></expr></argument>,
				  <argument><expr><literal type="string">"Failed to initialize dbus message iter"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>dbus_message_iter_get_arg_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DBUS_TYPE_STRING</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>dbus_message_new_error</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>DBUS_ERROR_INVALID_ARGS</name></expr></argument>,
				  <argument><expr><literal type="string">"Expected string as first argument"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>dbus_message_iter_get_basic</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ipaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dbus_message_iter_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>dbus_message_iter_get_arg_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DBUS_TYPE_STRING</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>dbus_message_new_error</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>DBUS_ERROR_INVALID_ARGS</name></expr></argument>,
				  <argument><expr><literal type="string">"Expected string as second argument"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    
  <expr_stmt><expr><call><name>dbus_message_iter_get_basic</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hwaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dbus_message_iter_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>dbus_message_iter_get_arg_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DBUS_TYPE_ARRAY</name><operator>)</operator> <operator>||</operator>
      <operator>(</operator><call><name>dbus_message_iter_get_element_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DBUS_TYPE_BYTE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>dbus_message_new_error</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>DBUS_ERROR_INVALID_ARGS</name></expr></argument>,
				  <argument><expr><literal type="string">"Expected byte array as third argument"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    
  <expr_stmt><expr><call><name>dbus_message_iter_recurse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>array_iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dbus_message_iter_get_fixed_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name>array_iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hostname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hostname_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>hostname_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <operator>&amp;</operator><name><name>hostname</name><index>[<expr><name>hostname_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>hostname_len</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
	<return>return <expr><call><name>dbus_message_new_error</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>DBUS_ERROR_INVALID_ARGS</name></expr></argument>,
				      <argument><expr><literal type="string">"Hostname contains an embedded NUL character"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>dbus_message_iter_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>dbus_message_iter_get_arg_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DBUS_TYPE_ARRAY</name><operator>)</operator> <operator>||</operator>
      <operator>(</operator><call><name>dbus_message_iter_get_element_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DBUS_TYPE_BYTE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>dbus_message_new_error</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>DBUS_ERROR_INVALID_ARGS</name></expr></argument>,
				  <argument><expr><literal type="string">"Expected byte array as fourth argument"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>dbus_message_iter_recurse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>array_iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dbus_message_iter_get_fixed_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name>array_iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clid_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dbus_message_iter_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>dbus_message_iter_get_arg_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DBUS_TYPE_UINT32</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>dbus_message_new_error</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>DBUS_ERROR_INVALID_ARGS</name></expr></argument>,
				  <argument><expr><literal type="string">"Expected uint32 as fifth argument"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    
  <expr_stmt><expr><call><name>dbus_message_iter_get_basic</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>expires</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dbus_message_iter_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>dbus_message_iter_get_arg_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DBUS_TYPE_UINT32</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>dbus_message_new_error</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>DBUS_ERROR_INVALID_ARGS</name></expr></argument>,
                                    <argument><expr><literal type="string">"Expected uint32 as sixth argument"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><call><name>dbus_message_iter_get_basic</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ia_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dbus_message_iter_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>dbus_message_iter_get_arg_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DBUS_TYPE_BOOLEAN</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>dbus_message_new_error</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>DBUS_ERROR_INVALID_ARGS</name></expr></argument>,
				  <argument><expr><literal type="string">"Expected uint32 as sixth argument"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>dbus_message_iter_get_basic</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_temporary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>addr4</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>ia_id</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>is_temporary</name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><call><name>dbus_message_new_error</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>DBUS_ERROR_INVALID_ARGS</name></expr></argument>,
				      <argument><expr><literal type="string">"ia_id and is_temporary must be zero for IPv4 lease"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>lease</name> <operator>=</operator> <call><name>lease_find_by_addr</name><argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>addr4</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    	<expr_stmt><expr><name>lease</name> <operator>=</operator> <call><name>lease4_allocate</name><argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>addr4</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
  <if type="elseif">else if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>addr6</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>lease</name> <operator>=</operator> <call><name>lease6_find_by_addr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>addr6</name></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>lease</name> <operator>=</operator> <call><name>lease6_allocate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>addr6</name></name></expr></argument>,
				<argument><expr><ternary><condition><expr><name>is_temporary</name></expr> ?</condition><then> <expr><name>LEASE_TA</name></expr> </then><else>: <expr><name>LEASE_NA</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>lease_set_iaid</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name>ia_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <else>else<block type="pseudo"><block_content>
    <return>return <expr><call><name>dbus_message_new_error_printf</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>DBUS_ERROR_INVALID_ARGS</name></expr></argument>,
					 <argument><expr><literal type="string">"Invalid IP address '%s'"</literal></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
   
  <expr_stmt><expr><name>hw_len</name> <operator>=</operator> <call><name>parse_hex</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>hwaddr</name></expr></argument>, <argument><expr><name>dhcp_chaddr</name></expr></argument>, <argument><expr><name>DHCP_CHADDR_MAX</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hw_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>hw_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>dbus_message_new_error_printf</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>DBUS_ERROR_INVALID_ARGS</name></expr></argument>,
					 <argument><expr><literal type="string">"Invalid HW address '%s'"</literal></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>hw_type</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>hw_len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>hw_type</name> <operator>=</operator> <name>ARPHRD_ETHER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><call><name>lease_set_hwaddr</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name>dhcp_chaddr</name></expr></argument>, <argument><expr><name>clid</name></expr></argument>, <argument><expr><name>hw_len</name></expr></argument>, <argument><expr><name>hw_type</name></expr></argument>,
                   <argument><expr><name>clid_len</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lease_set_expires</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name>expires</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>hostname_len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>lease_set_hostname</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>get_domain</name><argument_list>(<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><call><name>lease_update_file</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lease_update_dns</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DBusMessage</name> <modifier>*</modifier></type><name>dbus_del_lease</name><parameter_list>(<parameter><decl><type><name>DBusMessage</name><modifier>*</modifier></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBusMessageIter</name></type> <name>iter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ipaddr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBusMessage</name> <modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>union</name> <name>all_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>dbus_bool_t</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>time_t</name></type> <name>now</name> <init>= <expr><call><name>dnsmasq_time</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dbus_message_iter_init</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>dbus_message_new_error</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>DBUS_ERROR_INVALID_ARGS</name></expr></argument>,
				  <argument><expr><literal type="string">"Failed to initialize dbus message iter"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
   
  <if_stmt><if>if <condition>(<expr><call><name>dbus_message_iter_get_arg_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DBUS_TYPE_STRING</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>dbus_message_new_error</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>DBUS_ERROR_INVALID_ARGS</name></expr></argument>,
				  <argument><expr><literal type="string">"Expected string as first argument"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
   
  <expr_stmt><expr><call><name>dbus_message_iter_get_basic</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ipaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>addr4</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>lease</name> <operator>=</operator> <call><name>lease_find_by_addr</name><argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>addr4</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
  <if type="elseif">else if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>addr6</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>lease</name> <operator>=</operator> <call><name>lease6_find_by_addr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>addr6</name></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <else>else<block type="pseudo"><block_content>
    <return>return <expr><call><name>dbus_message_new_error_printf</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>DBUS_ERROR_INVALID_ARGS</name></expr></argument>,
					 <argument><expr><literal type="string">"Invalid IP address '%s'"</literal></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
    
  <if_stmt><if>if <condition>(<expr><name>lease</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>lease_prune</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>lease_update_file</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>lease_update_dns</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>reply</name> <operator>=</operator> <call><name>dbus_message_new_method_return</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>dbus_message_append_args</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><name>DBUS_TYPE_BOOLEAN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>,
			     <argument><expr><name>DBUS_TYPE_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
    
  <return>return <expr><name>reply</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>DBusMessage</name> <modifier>*</modifier></type><name>dbus_get_metrics</name><parameter_list>(<parameter><decl><type><name>DBusMessage</name><modifier>*</modifier></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>DBusMessage</name> <modifier>*</modifier></type><name>reply</name> <init>= <expr><call><name>dbus_message_new_method_return</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBusMessageIter</name></type> <name>array</name></decl>, <decl><type ref="prev"/><name>dict</name></decl>, <decl><type ref="prev"/><name>iter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>dbus_message_iter_init_append</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dbus_message_iter_open_container</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>DBUS_TYPE_ARRAY</name></expr></argument>, <argument><expr><literal type="string">"{su}"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>__METRIC_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name>     <init>= <expr><call><name>get_metric_name</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dbus_uint32_t</name></type> <name>value</name> <init>= <expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>dbus_message_iter_open_container</name><argument_list>(<argument><expr><operator>&amp;</operator><name>array</name></expr></argument>, <argument><expr><name>DBUS_TYPE_DICT_ENTRY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dbus_message_iter_append_basic</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dbus_message_iter_append_basic</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>, <argument><expr><name>DBUS_TYPE_UINT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dbus_message_iter_close_container</name><argument_list>(<argument><expr><operator>&amp;</operator><name>array</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>dbus_message_iter_close_container</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>reply</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_dict_entry</name><parameter_list>(<parameter><decl><type><name>DBusMessageIter</name> <modifier>*</modifier></type><name>container</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>DBusMessageIter</name></type> <name>dict</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>dbus_message_iter_open_container</name><argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><name>DBUS_TYPE_DICT_ENTRY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dbus_message_iter_append_basic</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dbus_message_iter_append_basic</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dbus_message_iter_close_container</name><argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_dict_int</name><parameter_list>(<parameter><decl><type><name>DBusMessageIter</name> <modifier>*</modifier></type><name>container</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>MAXDNAME</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><call><name>add_dict_entry</name><argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DBusMessage</name> <modifier>*</modifier></type><name>dbus_get_server_metrics</name><parameter_list>(<parameter><decl><type><name>DBusMessage</name><modifier>*</modifier></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>DBusMessage</name> <modifier>*</modifier></type><name>reply</name> <init>= <expr><call><name>dbus_message_new_method_return</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBusMessageIter</name></type> <name>server_array</name></decl>, <decl><type ref="prev"/><name>dict_array</name></decl>, <decl><type ref="prev"/><name>server_iter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>serv</name></decl>;</decl_stmt>
  
  <expr_stmt><expr><call><name>dbus_message_iter_init_append</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>server_iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dbus_message_iter_open_container</name><argument_list>(<argument><expr><operator>&amp;</operator><name>server_iter</name></expr></argument>, <argument><expr><name>DBUS_TYPE_ARRAY</name></expr></argument>, <argument><expr><literal type="string">"a{ss}"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>server_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* sum counts from different records for same server */</comment>
  <for>for <control>(<init><expr><name>serv</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>servers</name></name></expr>;</init> <condition><expr><name>serv</name></expr>;</condition> <incr><expr><name>serv</name> <operator>=</operator> <name><name>serv</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>serv</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SERV_MARK</name></expr>;</expr_stmt></block_content></block></for>
  
  <for>for <control>(<init><expr><name>serv</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>servers</name></name></expr>;</init> <condition><expr><name>serv</name></expr>;</condition> <incr><expr><name>serv</name> <operator>=</operator> <name><name>serv</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>serv</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SERV_MARK</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>port</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>queries</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>failed_queries</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nxdomain_replies</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>retrys</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sigma_latency</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>count_latency</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>serv1</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>serv1</name> <operator>=</operator> <name>serv</name></expr>;</init> <condition><expr><name>serv1</name></expr>;</condition> <incr><expr><name>serv1</name> <operator>=</operator> <name><name>serv1</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>serv1</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SERV_MARK</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>sockaddr_isequal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>serv</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>serv1</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name><name>serv1</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SERV_MARK</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>queries</name> <operator>+=</operator> <name><name>serv1</name><operator>-&gt;</operator><name>queries</name></name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>failed_queries</name> <operator>+=</operator> <name><name>serv1</name><operator>-&gt;</operator><name>failed_queries</name></name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>nxdomain_replies</name> <operator>+=</operator> <name><name>serv1</name><operator>-&gt;</operator><name>nxdomain_replies</name></name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>retrys</name> <operator>+=</operator> <name><name>serv1</name><operator>-&gt;</operator><name>retrys</name></name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>sigma_latency</name> <operator>+=</operator> <name><name>serv1</name><operator>-&gt;</operator><name>query_latency</name></name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>count_latency</name><operator>++</operator></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt></block_content></block></for>
	
	<expr_stmt><expr><call><name>dbus_message_iter_open_container</name><argument_list>(<argument><expr><operator>&amp;</operator><name>server_array</name></expr></argument>, <argument><expr><name>DBUS_TYPE_ARRAY</name></expr></argument>, <argument><expr><literal type="string">"{ss}"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dict_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>prettyprint_addr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>serv</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_dict_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dict_array</name></expr></argument>, <argument><expr><literal type="string">"address"</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>add_dict_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dict_array</name></expr></argument>, <argument><expr><literal type="string">"port"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_dict_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dict_array</name></expr></argument>, <argument><expr><literal type="string">"queries"</literal></expr></argument>, <argument><expr><name><name>serv</name><operator>-&gt;</operator><name>queries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_dict_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dict_array</name></expr></argument>, <argument><expr><literal type="string">"failed_queries"</literal></expr></argument>, <argument><expr><name><name>serv</name><operator>-&gt;</operator><name>failed_queries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_dict_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dict_array</name></expr></argument>, <argument><expr><literal type="string">"nxdomain"</literal></expr></argument>, <argument><expr><name><name>serv</name><operator>-&gt;</operator><name>nxdomain_replies</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_dict_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dict_array</name></expr></argument>, <argument><expr><literal type="string">"retries"</literal></expr></argument>, <argument><expr><name><name>serv</name><operator>-&gt;</operator><name>retrys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_dict_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dict_array</name></expr></argument>, <argument><expr><literal type="string">"latency"</literal></expr></argument>, <argument><expr><name>sigma_latency</name><operator>/</operator><name>count_latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>dbus_message_iter_close_container</name><argument_list>(<argument><expr><operator>&amp;</operator><name>server_array</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dict_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt></block_content></block></for>
  
  <expr_stmt><expr><call><name>dbus_message_iter_close_container</name><argument_list>(<argument><expr><operator>&amp;</operator><name>server_iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>server_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <return>return <expr><name>reply</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>DBusHandlerResult</name></type> <name>message_handler</name><parameter_list>(<parameter><decl><type><name>DBusConnection</name> <modifier>*</modifier></type><name>connection</name></decl></parameter>, 
				  <parameter><decl><type><name>DBusMessage</name> <modifier>*</modifier></type><name>message</name></decl></parameter>, 
				  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>method</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>dbus_message_get_member</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBusMessage</name> <modifier>*</modifier></type><name>reply</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>clear_cache</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>new_servers</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    
  <if_stmt><if>if <condition>(<expr><call><name>dbus_message_is_method_call</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>DBUS_INTERFACE_INTROSPECTABLE</name></expr></argument>, <argument><expr><literal type="string">"Introspect"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* string length: "%s" provides space for termination zero */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>introspection_xml</name> <operator>&amp;&amp;</operator> 
	  <operator>(</operator><name>introspection_xml</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>introspection_xml_template</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dbus_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>introspection_xml</name></expr></argument>, <argument><expr><name>introspection_xml_template</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dbus_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    
      <if_stmt><if>if <condition>(<expr><name>introspection_xml</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>dbus_message_new_method_return</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>dbus_message_append_args</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>introspection_xml</name></expr></argument>, <argument><expr><name>DBUS_TYPE_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><literal type="string">"GetVersion"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name>VERSION</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>dbus_message_new_method_return</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <expr_stmt><expr><call><name>dbus_message_append_args</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>DBUS_TYPE_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LOOP</name></cpp:ifdef>
  <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><literal type="string">"GetLoopServers"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>dbus_reply_server_loop</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><literal type="string">"SetServers"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>dbus_read_servers</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>new_servers</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><literal type="string">"SetServersEx"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>dbus_read_servers_ex</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>new_servers</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><literal type="string">"SetDomainServers"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>dbus_read_servers_ex</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>new_servers</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><literal type="string">"SetFilterWin2KOption"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>dbus_set_bool</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>OPT_FILTER</name></expr></argument>, <argument><expr><literal type="string">"filterwin2k"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><literal type="string">"SetLocaliseQueriesOption"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>dbus_set_bool</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>OPT_LOCALISE</name></expr></argument>, <argument><expr><literal type="string">"localise-queries"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><literal type="string">"SetBogusPrivOption"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>dbus_set_bool</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>OPT_BOGUSPRIV</name></expr></argument>, <argument><expr><literal type="string">"bogus-priv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP</name></cpp:ifdef>
  <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><literal type="string">"AddDhcpLease"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>dbus_add_lease</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><literal type="string">"DeleteDhcpLease"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>dbus_del_lease</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><literal type="string">"GetMetrics"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>dbus_get_metrics</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><literal type="string">"GetServerMetrics"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>dbus_get_server_metrics</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><literal type="string">"ClearMetrics"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>clear_metrics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><literal type="string">"ClearCache"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>clear_cache</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <return>return <expr><operator>(</operator><name>DBUS_HANDLER_RESULT_NOT_YET_HANDLED</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
   
  <if_stmt><if>if <condition>(<expr><name>new_servers</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"setting upstream servers from DBus"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>check_servers</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_RELOAD</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>clear_cache</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>clear_cache</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>clear_cache_and_reload</name><argument_list>(<argument><expr><call><name>dnsmasq_time</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>user_data</name></expr>;</expr_stmt> <comment type="block">/* no warning */</comment>

  <comment type="block">/* If no reply or no error, return nothing */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>reply</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>dbus_message_new_method_return</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>reply</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>dbus_connection_send</name> <argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><name>reply</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>dbus_message_unref</name> <argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <return>return <expr><operator>(</operator><name>DBUS_HANDLER_RESULT_HANDLED</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
 

<comment type="block">/* returns NULL or error message, may fail silently if dbus daemon not yet up. */</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name>dbus_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>DBusConnection</name> <modifier>*</modifier></type><name>connection</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBusObjectPathVTable</name></type> <name>dnsmasq_vtable</name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <expr><operator>&amp;</operator><name>message_handler</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBusError</name></type> <name>dbus_error</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBusMessage</name> <modifier>*</modifier></type><name>message</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>dbus_error_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>dbus_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>connection</name> <operator>=</operator> <call><name>dbus_bus_get</name> <argument_list>(<argument><expr><name>DBUS_BUS_SYSTEM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbus_error</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>dbus_error_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dbus_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><call><name>dbus_connection_set_exit_on_disconnect</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dbus_connection_set_watch_functions</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><name>add_watch</name></expr></argument>, <argument><expr><name>remove_watch</name></expr></argument>, 
				      <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dbus_error_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>dbus_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dbus_bus_request_name</name> <argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dbus_name</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbus_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dbus_error_is_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>dbus_error</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>dbus_error</name><operator>.</operator><name>message</name></name></expr>;</return></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dbus_connection_register_object_path</name><argument_list>(<argument><expr><name>connection</name></expr></argument>,  <argument><expr><name>DNSMASQ_PATH</name></expr></argument>, 
					    <argument><expr><operator>&amp;</operator><name>dnsmasq_vtable</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not register a DBus message handler"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dbus</name></name> <operator>=</operator> <name>connection</name></expr>;</expr_stmt> 
  
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>message</name> <operator>=</operator> <call><name>dbus_message_new_signal</name><argument_list>(<argument><expr><name>DNSMASQ_PATH</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dbus_name</name></name></expr></argument>, <argument><expr><literal type="string">"Up"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>dbus_connection_send</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>dbus_message_unref</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
 

<function><type><name>void</name></type> <name>set_dbus_listeners</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>watch</name></name> <modifier>*</modifier></type><name>w</name></decl>;</decl_stmt>
  
  <for>for <control>(<init><expr><name>w</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>watches</name></name></expr>;</init> <condition><expr><name>w</name></expr>;</condition> <incr><expr><name>w</name> <operator>=</operator> <name><name>w</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><call><name>dbus_watch_get_enabled</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>watch</name></name></expr></argument>)</argument_list></call></expr>)</condition>
      <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name> <init>= <expr><call><name>dbus_watch_get_flags</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>watch</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>dbus_watch_get_unix_fd</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>watch</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DBUS_WATCH_READABLE</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>poll_listen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>POLLIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DBUS_WATCH_WRITABLE</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>poll_listen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>POLLOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<expr_stmt><expr><call><name>poll_listen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>POLLERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>check_dbus_listeners</name><parameter_list>()</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>DBusConnection</name> <modifier>*</modifier></type><name>connection</name> <init>= <expr><operator>(</operator><name>DBusConnection</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>dbus</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>watch</name></name> <modifier>*</modifier></type><name>w</name></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>w</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>watches</name></name></expr>;</init> <condition><expr><name>w</name></expr>;</condition> <incr><expr><name>w</name> <operator>=</operator> <name><name>w</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><call><name>dbus_watch_get_enabled</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>watch</name></name></expr></argument>)</argument_list></call></expr>)</condition>
      <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>dbus_watch_get_unix_fd</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>watch</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<if_stmt><if>if <condition>(<expr><call><name>poll_check</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>POLLIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>DBUS_WATCH_READABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><call><name>poll_check</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>POLLOUT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>DBUS_WATCH_WRITABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><call><name>poll_check</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>POLLERR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>DBUS_WATCH_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>dbus_watch_handle</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>watch</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt></block_content></block></for>

  <if_stmt><if>if <condition>(<expr><name>connection</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>dbus_connection_ref</name> <argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <while>while <condition>(<expr><call><name>dbus_connection_dispatch</name> <argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DBUS_DISPATCH_DATA_REMAINS</name></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
      <expr_stmt><expr><call><name>dbus_connection_unref</name> <argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP</name></cpp:ifdef>
<function><type><name>void</name></type> <name>emit_dbus_signal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>DBusConnection</name> <modifier>*</modifier></type><name>connection</name> <init>= <expr><operator>(</operator><name>DBusConnection</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>dbus</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBusMessage</name><modifier>*</modifier></type> <name>message</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBusMessageIter</name></type> <name>args</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>action_str</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mac</name> <init>= <expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>connection</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hostname</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>hostname</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
   <if_stmt><if>if <condition>(<expr><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>LEASE_TA</name> <operator>|</operator> <name>LEASE_NA</name><operator>)</operator></expr>)</condition>
     <block>{<block_content>
       <expr_stmt><expr><call><name>print_mac</name><argument_list>(<argument><expr><name>mac</name></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>clid</name></name></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>clid_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lease</name><operator>-&gt;</operator><name>addr6</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if>
   <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
     <block>{<block_content>
       <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>extended_hwaddr</name><argument_list>(<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>hwaddr_type</name></name></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>hwaddr_len</name></name></expr></argument>,
			   <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>hwaddr</name></name></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>clid_len</name></name></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>clid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>print_mac</name><argument_list>(<argument><expr><name>mac</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lease</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>ACTION_DEL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>action_str</name> <operator>=</operator> <literal type="string">"DhcpLeaseDeleted"</literal></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>action</name> <operator>==</operator> <name>ACTION_ADD</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>action_str</name> <operator>=</operator> <literal type="string">"DhcpLeaseAdded"</literal></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>action</name> <operator>==</operator> <name>ACTION_OLD</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>action_str</name> <operator>=</operator> <literal type="string">"DhcpLeaseUpdated"</literal></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <return>return;</return></block_content></block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>message</name> <operator>=</operator> <call><name>dbus_message_new_signal</name><argument_list>(<argument><expr><name>DNSMASQ_PATH</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dbus_name</name></name></expr></argument>, <argument><expr><name>action_str</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><call><name>dbus_message_iter_init_append</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><call><name>dbus_message_iter_append_basic</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
      <call><name>dbus_message_iter_append_basic</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mac</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
      <call><name>dbus_message_iter_append_basic</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hostname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>dbus_connection_send</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><call><name>dbus_message_unref</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
