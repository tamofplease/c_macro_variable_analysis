<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/dnsmasq/util.c"><comment type="block">/* dnsmasq is Copyright (c) 2000-2022 Simon Kelley

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 dated June, 1991, or
   (at your option) version 3 dated 29 June, 2007.
 
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
      
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
*/</comment>

<comment type="block">/* The SURF random number generator was taken from djbdns-1.05, by 
   Daniel J Bernstein, which is public domain. */</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnsmasq.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_BROKEN_RTC</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/times.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBIDN2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;idn2.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_IDN</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;idna.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LINUX_NETWORK</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/utsname.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* SURF random number generator */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>u32</name></type> <name><name>seed</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>u32</name></type> <name><name>in</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>u32</name></type> <name><name>out</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>outleft</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>rand_init</name><parameter_list>()</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>open</name><argument_list>(<argument><expr><name>RANDFILE</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
      <operator>!</operator><call><name>read_write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>seed</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>||</operator>
      <operator>!</operator><call><name>read_write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>in</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to seed the random number generator: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_MISC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROTATE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &lt;&lt; (b)) | ((x) &gt;&gt; (32 - (b))))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUSH</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x = t[i] += (((x ^ seed[i]) + sum) ^ ROTATE(x,b));</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>surf</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>u32</name></type> <name><name>t</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt> <decl_stmt><decl><type><name>u32</name></type> <name>x</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>u32</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>loop</name></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>seed</name><index>[<expr><literal type="number">12</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>seed</name><index>[<expr><literal type="number">24</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
  <expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>t</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>loop</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition><expr><name>loop</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition><incr><expr><operator>++</operator><name>loop</name></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition><expr><name>r</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition><incr><expr><operator>++</operator><name>r</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>sum</name> <operator>+=</operator> <literal type="number">0x9e3779b9</literal></expr>;</expr_stmt>
      <macro><name>MUSH</name><argument_list>(<argument><literal type="number">0</literal></argument>,<argument><literal type="number">5</literal></argument>)</argument_list></macro> <macro><name>MUSH</name><argument_list>(<argument><literal type="number">1</literal></argument>,<argument><literal type="number">7</literal></argument>)</argument_list></macro> <macro><name>MUSH</name><argument_list>(<argument><literal type="number">2</literal></argument>,<argument><literal type="number">9</literal></argument>)</argument_list></macro> <macro><name>MUSH</name><argument_list>(<argument><literal type="number">3</literal></argument>,<argument><literal type="number">13</literal></argument>)</argument_list></macro>
      <macro><name>MUSH</name><argument_list>(<argument><literal type="number">4</literal></argument>,<argument><literal type="number">5</literal></argument>)</argument_list></macro> <macro><name>MUSH</name><argument_list>(<argument><literal type="number">5</literal></argument>,<argument><literal type="number">7</literal></argument>)</argument_list></macro> <macro><name>MUSH</name><argument_list>(<argument><literal type="number">6</literal></argument>,<argument><literal type="number">9</literal></argument>)</argument_list></macro> <macro><name>MUSH</name><argument_list>(<argument><literal type="number">7</literal></argument>,<argument><literal type="number">13</literal></argument>)</argument_list></macro>
      <macro><name>MUSH</name><argument_list>(<argument><literal type="number">8</literal></argument>,<argument><literal type="number">5</literal></argument>)</argument_list></macro> <macro><name>MUSH</name><argument_list>(<argument><literal type="number">9</literal></argument>,<argument><literal type="number">7</literal></argument>)</argument_list></macro> <macro><name>MUSH</name><argument_list>(<argument><literal type="number">10</literal></argument>,<argument><literal type="number">9</literal></argument>)</argument_list></macro> <macro><name>MUSH</name><argument_list>(<argument><literal type="number">11</literal></argument>,<argument><literal type="number">13</literal></argument>)</argument_list></macro>
    </block_content>}</block></for>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name><name>t</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>short</name></type> <name>rand16</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>outleft</name></expr>)</condition> 
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>++</operator><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>++</operator><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>++</operator><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>surf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>outleft</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  
  <return>return <expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <name><name>out</name><index>[<expr><operator>--</operator><name>outleft</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>u32</name></type> <name>rand32</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
 <if_stmt><if>if <condition>(<expr><operator>!</operator><name>outleft</name></expr>)</condition> 
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>++</operator><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>++</operator><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>++</operator><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>surf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>outleft</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  
  <return>return <expr><name><name>out</name><index>[<expr><operator>--</operator><name>outleft</name></expr>]</index></name></expr>;</return> 
</block_content>}</block></function>

<function><type><name>u64</name></type> <name>rand64</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>outleft</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>outleft</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>++</operator><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>++</operator><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>++</operator><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>surf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>outleft</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><name>outleft</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

  <return>return <expr><operator>(</operator><name>u64</name><operator>)</operator><name><name>out</name><index>[<expr><name>outleft</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>u64</name><operator>)</operator><name><name>out</name><index>[<expr><name>outleft</name></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* returns 1 if name is OK and ascii printable
 * returns 2 if name should be processed by IDN */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>check_name</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* remove trailing . 
     also fail empty string and label &gt; 63 chars */</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>dotgap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nowhite</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>idn_encode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>hasuscore</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>hasucase</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>l</name> <operator>&gt;</operator> <name>MAXDNAME</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>in</name><index>[<expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>in</name><index>[<expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>nowhite</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <for>for <control>(<init>;</init> <condition><expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>in</name><operator>)</operator></expr>;</condition> <incr><expr><name>in</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>dotgap</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><operator>++</operator><name>dotgap</name> <operator>&gt;</operator> <name>MAXLABEL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><call><name>isascii</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>iscntrl</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
        <comment type="block">/* iscntrl only gives expected results for ascii */</comment>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>isascii</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_IDN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBIDN2</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><name>idn_encode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <if_stmt><if type="elseif">else if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><name>nowhite</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBIDN2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>IDN2_VERSION_NUMBER</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>IDN2_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x02000003</literal><operator>)</operator></expr></cpp:if>
          <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>hasuscore</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
          <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>hasuscore</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_IDN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBIDN2</name></expr></argument>)</argument_list></call></expr></cpp:if>
          <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>hasucase</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
          <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>hasucase</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nowhite</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBIDN2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>IDN2_VERSION_NUMBER</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>IDN2_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x02000003</literal><operator>)</operator></expr></cpp:if>
  <comment type="block">/* Older libidn2 strips underscores, so don't do IDN processing
     if the name has an underscore unless it also has non-ascii characters. */</comment>
  <expr_stmt><expr><name>idn_encode</name> <operator>=</operator> <name>idn_encode</name> <operator>||</operator> <operator>(</operator><name>hasucase</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>hasuscore</name><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name>idn_encode</name> <operator>=</operator> <name>idn_encode</name> <operator>||</operator> <name>hasucase</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><ternary><condition><expr><operator>(</operator><name>idn_encode</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Hostnames have a more limited valid charset than domain names
   so check for legal char a-z A-Z 0-9 - _ 
   Note that this may receive a FQDN, so only check the first label 
   for the tighter criteria. */</comment>
<function><type><name>int</name></type> <name>legal_hostname</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>first</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <for>for <control>(<init><expr><name>first</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>name</name><operator>)</operator></expr>;</condition> <incr><expr><name>name</name><operator>++</operator></expr><operator>,</operator> <expr><name>first</name> <operator>=</operator> <literal type="number">0</literal></expr></incr>)</control>
    <comment type="block">/* check for legal char a-z A-Z 0-9 - _ . */</comment>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator> <operator>||</operator>
	  <operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator> <operator>||</operator>
	  <operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'_'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if></if_stmt>
      
      <comment type="block">/* end of hostname part */</comment>
      <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></for>
  
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
  
<function><type><name>char</name> <modifier>*</modifier></type><name>canonicalise</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nomem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>nomem</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator><name>nomem</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>check_name</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_IDN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBIDN2</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
    <block>{<block_content>
<cpp:ifdef>#  <cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBIDN2</name></cpp:ifdef>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>idn2_to_ascii_lz</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><name>IDN2_NONTRANSITIONAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#  <cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>idna_to_ascii_lz</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
      <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>IDNA_SUCCESS</name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name>nomem</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>rc</name> <operator>==</operator> <name>IDNA_MALLOC_ERROR</name> <operator>||</operator> <name>rc</name> <operator>==</operator> <name>IDNA_DLOPEN_ERROR</name><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to allocate memory"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><operator>*</operator><name>nomem</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	  
	  <return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
      
      <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>rc</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>nomem</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator><name>nomem</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>do_rfc1035_name</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>sval</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
  
  <while>while <condition>(<expr><name>sval</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>sval</name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><name>p</name><operator>++</operator></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>limit</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>limit</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

      <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>sval</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>sval</name> <operator>!=</operator> <literal type="char">'.'</literal><operator>)</operator></expr>;</condition> <incr><expr><name>sval</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>limit</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>limit</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
	  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DNSSEC_VALID</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>sval</name> <operator>==</operator> <name>NAME_ESCAPE</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><operator>++</operator><name>sval</name><operator>)</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>		
	    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sval</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></for>
      
      <expr_stmt><expr><operator>*</operator><name>cp</name>  <operator>=</operator> <name>j</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>sval</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>sval</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></while>
  
  <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* for use during startup */</comment>
<function><type><name>void</name> <modifier>*</modifier></type><name>safe_malloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not get memory"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Ensure limited size string is always terminated.
 * Can be replaced by (void)strlcpy() on some platforms */</comment>
<function><type><name>void</name></type> <name>safe_strncpy</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>dest</name><index>[<expr><name>size</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>safe_pipe</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>read_noblock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>pipe</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> 
      <operator>!</operator><call><name>fix_fd</name><argument_list>(<argument><expr><name><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator>
      <operator>(</operator><name>read_noblock</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>fix_fd</name><argument_list>(<argument><expr><name><name>fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot create pipe: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_MISC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>whine_malloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to allocate %d bytes"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>whine_realloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to reallocate %d bytes"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sockaddr_isequal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>union</name> <name>mysockaddr</name></name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>union</name> <name>mysockaddr</name></name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>s1</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name><name>s2</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name></expr>)</condition>
    <block>{<block_content> 
      <if_stmt><if>if <condition>(<expr><name><name>s1</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name> <operator>&amp;&amp;</operator>
	  <name><name>s1</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_port</name></name> <operator>==</operator> <name><name>s2</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_port</name></name> <operator>&amp;&amp;</operator>
	  <name><name>s1</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <name><name>s2</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>s1</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name> <operator>&amp;&amp;</operator>
	  <name><name>s1</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_port</name></name> <operator>==</operator> <name><name>s2</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_port</name></name> <operator>&amp;&amp;</operator>
	  <name><name>s1</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_scope_id</name></name> <operator>==</operator> <name><name>s2</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_scope_id</name></name> <operator>&amp;&amp;</operator>
	  <call><name>IN6_ARE_ADDR_EQUAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s2</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sockaddr_isnull</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>union</name> <name>mysockaddr</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name> <operator>&amp;&amp;</operator>
      <name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name> <operator>&amp;&amp;</operator>
      <call><name>IN6_IS_ADDR_UNSPECIFIED</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sa_len</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>mysockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SOCKADDR_SA_LEN</name></cpp:ifdef>
  <return>return <expr><name><name>addr</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_len</name></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>in6</name></name></expr></argument>)</argument_list></sizeof></expr>;</return></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>in</name></name></expr></argument>)</argument_list></sizeof></expr>;</return></block_content></block></else></if_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/* don't use strcasecmp and friends here - they may be messed up by LOCALE */</comment>
<function><type><name>int</name></type> <name>hostname_order</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>
  
  <do>do <block>{<block_content>
    <expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>a</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>c2</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>b</name><operator>++</operator></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>c1</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c1</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>c1</name> <operator>+=</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>c2</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c2</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>c2</name> <operator>+=</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>c1</name> <operator>&lt;</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>c1</name> <operator>&gt;</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    
  </block_content>}</block> while <condition>(<expr><name>c1</name></expr>)</condition>;</do>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>hostname_isequal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>hostname_order</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* is b equal to or a subdomain of a return 2 for equal, 1 for subdomain */</comment>
<function><type><name>int</name></type> <name>hostname_issubdomain</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ap</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>
  
  <comment type="block">/* move to the end */</comment>
  <for>for <control>(<init><expr><name>ap</name> <operator>=</operator> <name>a</name></expr>;</init> <condition><expr><operator>*</operator><name>ap</name></expr>;</condition> <incr><expr><name>ap</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for> 
  <for>for <control>(<init><expr><name>bp</name> <operator>=</operator> <name>b</name></expr>;</init> <condition><expr><operator>*</operator><name>bp</name></expr>;</condition> <incr><expr><name>bp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

  <comment type="block">/* a shorter than b or a empty. */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>bp</name> <operator>-</operator> <name>b</name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>ap</name> <operator>-</operator> <name>a</name><operator>)</operator> <operator>||</operator> <name>ap</name> <operator>==</operator> <name>a</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <do>do
    <block>{<block_content>
      <expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><operator>(</operator><operator>--</operator><name>ap</name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>c2</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><operator>(</operator><operator>--</operator><name>bp</name><operator>)</operator></expr>;</expr_stmt>
  
       <if_stmt><if>if <condition>(<expr><name>c1</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c1</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content>
	 <expr_stmt><expr><name>c1</name> <operator>+=</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
       <if_stmt><if>if <condition>(<expr><name>c2</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c2</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content>
	 <expr_stmt><expr><name>c2</name> <operator>+=</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

       <if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content>
	 <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block> while <condition>(<expr><name>ap</name> <operator>!=</operator> <name>a</name></expr>)</condition>;</do>

  <if_stmt><if>if <condition>(<expr><name>bp</name> <operator>==</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><operator>--</operator><name>bp</name><operator>)</operator> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
 
  
<function><type><name>time_t</name></type> <name>dnsmasq_time</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_BROKEN_RTC</name></cpp:ifdef>
  <decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot read monotonic clock: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_MISC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <return>return <expr><name><name>ts</name><operator>.</operator><name>tv_sec</name></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>u32</name></type> <name>dnsmasq_milliseconds</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><operator>(</operator><name><name>tv</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal> <operator>+</operator> <operator>(</operator><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>netmask_length</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>zero_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">0x0</literal> <operator>==</operator> <operator>(</operator><name><name>mask</name><operator>.</operator><name>s_addr</name></name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>zero_count</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition> 
    <block>{<block_content>
      <expr_stmt><expr><name><name>mask</name><operator>.</operator><name>s_addr</name></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>zero_count</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
  
  <return>return <expr><literal type="number">32</literal> <operator>-</operator> <name>zero_count</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>is_same_net</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><operator>(</operator><name><name>a</name><operator>.</operator><name>s_addr</name></name> <operator>&amp;</operator> <name><name>mask</name><operator>.</operator><name>s_addr</name></name><operator>)</operator> <operator>==</operator> <operator>(</operator><name><name>b</name><operator>.</operator><name>s_addr</name></name> <operator>&amp;</operator> <name><name>mask</name><operator>.</operator><name>s_addr</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>is_same_net_prefix</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prefix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>mask</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>mask</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><operator>~</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>prefix</name><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>is_same_net</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>is_same_net6</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prefixlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>pfbytes</name> <init>= <expr><name>prefixlen</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>pfbits</name> <init>= <expr><name>prefixlen</name> <operator>&amp;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>s6_addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>s6_addr</name></name></expr></argument>, <argument><expr><name>pfbytes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pfbits</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
      <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>s6_addr</name><index>[<expr><name>pfbytes</name></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>pfbits</name><operator>)</operator> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>s6_addr</name><index>[<expr><name>pfbytes</name></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>pfbits</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* return least significant 64 bits if IPv6 address */</comment>
<function><type><name>u64</name></type> <name>addr6part</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u64</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>ret</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>addr</name><operator>-&gt;</operator><name>s6_addr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setaddr6part</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>u64</name></type> <name>host</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">15</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>s6_addr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>host</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>host</name> <operator>=</operator> <name>host</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>


<comment type="block">/* returns port number from address */</comment>
<function><type><name>int</name></type> <name>prettyprint_addr</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>mysockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_addr</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>IF_NAMESIZE</name></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_scope_id</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
	  <call><name>if_indextoname</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_scope_id</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	  <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;=</operator> <name>ADDRSTRLEN</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  
  <return>return <expr><name>port</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>prettyprint_time</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">0xffffffff</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"infinite"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else
    <block>{<block_content>
      <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><operator>(</operator><name>x</name> <operator>=</operator> <name>t</name><operator>/</operator><literal type="number">86400</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"%ud"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
       <if_stmt><if>if <condition>(<expr><operator>(</operator><name>x</name> <operator>=</operator> <operator>(</operator><name>t</name><operator>/</operator><literal type="number">3600</literal><operator>)</operator><operator>%</operator><literal type="number">24</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"%uh"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>x</name> <operator>=</operator> <operator>(</operator><name>t</name><operator>/</operator><literal type="number">60</literal><operator>)</operator><operator>%</operator><literal type="number">60</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"%um"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>x</name> <operator>=</operator> <name>t</name><operator>%</operator><literal type="number">60</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"%us"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/* in may equal out, when maxlen may be -1 (No max len). 
   Return -1 for extraneous no-hex chars found. */</comment>
<function><type><name>int</name></type> <name>parse_hex</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxlen</name></decl></parameter>, 
	      <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>wildcard_mask</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mac_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
    
  <if_stmt><if>if <condition>(<expr><name>mac_type</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator><name>mac_type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <while>while <condition>(<expr><operator>!</operator><name>done</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>maxlen</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>i</name> <operator>&lt;</operator> <name>maxlen</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <for>for <control>(<init><expr><name>r</name> <operator>=</operator> <name>in</name></expr>;</init> <condition><expr><operator>*</operator><name>r</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>r</name> <operator>!=</operator> <literal type="char">':'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>r</name> <operator>!=</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>r</name> <operator>!=</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>r</name> <operator>!=</operator> <literal type="char">'*'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isxdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
      
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>in</name></expr> )</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>r</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mac_type</name></expr>)</condition>
	   <block>{<block_content>
	      <expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	      <expr_stmt><expr><operator>*</operator><name>mac_type</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name>mac_type</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	   </block_content>}</block></if>
	  <else>else
	    <block>{<block_content>
	      <expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name>mask</name> <operator>=</operator> <operator>(</operator><name>mask</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		  <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
	      <else>else
		<block>{<block_content>
		  <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>bytes</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>r</name> <operator>-</operator> <name>in</name><operator>)</operator><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
		  <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>bytes</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		    <block>{<block_content> 
		      <decl_stmt><decl><type><name>char</name></type> <name>sav</name></decl>;</decl_stmt>
		      <if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>bytes</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
			  <expr_stmt><expr><name>sav</name> <operator>=</operator> <name><name>in</name><index>[<expr><operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
			  <expr_stmt><expr><name><name>in</name><index>[<expr><operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		      <comment type="block">/* checks above allow mix of hexdigit and *, which
			 is illegal. */</comment>
		      <if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>in</name><index>[<expr><name>j</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
		      <expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>in</name><index>[<expr><name>j</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><name>mask</name> <operator>=</operator> <name>mask</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		      <if_stmt><if>if <condition>(<expr><operator>++</operator><name>i</name> <operator>==</operator> <name>maxlen</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt> 
		      <if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>bytes</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>in</name><index>[<expr><operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>sav</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		    </block_content>}</block></for>
		</block_content>}</block></else></if_stmt>
	    </block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>in</name> <operator>=</operator> <name>r</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
  
  <if_stmt><if>if <condition>(<expr><name>wildcard_mask</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator><name>wildcard_mask</name> <operator>=</operator> <name>mask</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* return 0 for no match, or (no matched octets) + 1 */</comment>
<function><type><name>int</name></type> <name>memcmp_masked</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>count</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr><operator>,</operator> <expr><name>mask</name> <operator>=</operator> <name>mask</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mask</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
      <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
	  <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
      </block_content>}</block></if></if_stmt></block_content></block></for>
  <return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* _note_ may copy buffer */</comment>
<function><type><name>int</name></type> <name>expand_buf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>iov</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>iov</name><operator>-&gt;</operator><name>iov_len</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>new</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>iov</name><operator>-&gt;</operator><name>iov_base</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><name><name>iov</name><operator>-&gt;</operator><name>iov_base</name></name></expr></argument>, <argument><expr><name><name>iov</name><operator>-&gt;</operator><name>iov_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>iov</name><operator>-&gt;</operator><name>iov_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>iov</name><operator>-&gt;</operator><name>iov_base</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iov</name><operator>-&gt;</operator><name>iov_len</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>print_mac</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>mac</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buff</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
   
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"&lt;null&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%.2x%s"</literal></expr></argument>, <argument><expr><name><name>mac</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">":"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>
  
  <return>return <expr><name>buff</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* rc is return from sendto and friends.
   Return 1 if we should retry.
   Set errno to zero if we succeeded. */</comment>
<function><type><name>int</name></type> <name>retry_send</name><parameter_list>(<parameter><decl><type><name>ssize_t</name></type> <name>rc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>retries</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>waiter</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>retries</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Linux kernels can return EAGAIN in perpetuity when calling
     sendmsg() and the relevant interface has gone. Here we loop
     retrying in EAGAIN for 1 second max, to avoid this hanging 
     dnsmasq. */</comment>

  <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EAGAIN</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr>)</condition>
     <block>{<block_content>
       <expr_stmt><expr><name><name>waiter</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>waiter</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>nanosleep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>waiter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <if_stmt><if>if <condition>(<expr><name>retries</name><operator>++</operator> <operator>&lt;</operator> <literal type="number">1000</literal></expr>)</condition><block type="pseudo"><block_content>
	 <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
     </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><name>retries</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>read_write</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>done</name></decl>;</decl_stmt>
  
  <for>for <control>(<init><expr><name>done</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>done</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>done</name> <operator>+=</operator> <name>n</name></expr></incr>)</control>
    <block>{<block_content>
      <do>do <block>{<block_content> 
	<if_stmt><if>if <condition>(<expr><name>rw</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>packet</name><index>[<expr><name>done</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>size</name> <operator>-</operator> <name>done</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
	  <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>packet</name><index>[<expr><name>done</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>size</name> <operator>-</operator> <name>done</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	  <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	
      </block_content>}</block> while <condition>(<expr><call><name>retry_send</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>ENOMEM</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>ENOBUFS</name></expr>)</condition>;</do>

      <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
     
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* close all fds except STDIN, STDOUT and STDERR, spare1, spare2 and spare3 */</comment>
<function><type><name>void</name></type> <name>close_fds</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>max_fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>spare1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>spare2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>spare3</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
  <comment type="block">/* On Linux, use the /proc/ filesystem to find which files
     are actually open, rather than iterate over the whole space,
     for efficiency reasons. If this fails we drop back to the dumb code. */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LINUX_NETWORK</name></cpp:ifdef> 
  <decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>d</name> <operator>=</operator> <call><name>opendir</name><argument_list>(<argument><expr><literal type="string">"/proc/self/fd"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>

      <while>while <condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>readdir</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>long</name></type> <name>fd</name></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	  
	  <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>de</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  	  
      	  <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>e</name> <operator>||</operator> <operator>*</operator><name>e</name> <operator>||</operator> <name>fd</name> <operator>==</operator> <call><name>dirfd</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>||</operator>
	      <name>fd</name> <operator>==</operator> <name>STDOUT_FILENO</name> <operator>||</operator> <name>fd</name> <operator>==</operator> <name>STDERR_FILENO</name> <operator>||</operator> <name>fd</name> <operator>==</operator> <name>STDIN_FILENO</name> <operator>||</operator>
	      <name>fd</name> <operator>==</operator> <name>spare1</name> <operator>||</operator> <name>fd</name> <operator>==</operator> <name>spare2</name> <operator>||</operator> <name>fd</name> <operator>==</operator> <name>spare3</name></expr>)</condition><block type="pseudo"><block_content>
	    <continue>continue;</continue></block_content></block></if></if_stmt>
	  
	  <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
      
      <expr_stmt><expr><call><name>closedir</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* fallback, dumb code. */</comment>
  <for>for <control>(<init><expr><name>max_fd</name><operator>--</operator></expr>;</init> <condition><expr><name>max_fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>max_fd</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name>max_fd</name> <operator>!=</operator> <name>STDOUT_FILENO</name> <operator>&amp;&amp;</operator> <name>max_fd</name> <operator>!=</operator> <name>STDERR_FILENO</name> <operator>&amp;&amp;</operator> <name>max_fd</name> <operator>!=</operator> <name>STDIN_FILENO</name> <operator>&amp;&amp;</operator>
	<name>max_fd</name> <operator>!=</operator> <name>spare1</name> <operator>&amp;&amp;</operator> <name>max_fd</name> <operator>!=</operator> <name>spare2</name> <operator>&amp;&amp;</operator> <name>max_fd</name> <operator>!=</operator> <name>spare3</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>max_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>

<comment type="block">/* Basically match a string value against a wildcard pattern.  */</comment>
<function><type><name>int</name></type> <name>wildcard_match</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>wildcard</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>match</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <while>while <condition>(<expr><operator>*</operator><name>wildcard</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>match</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>wildcard</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>wildcard</name> <operator>!=</operator> <operator>*</operator><name>match</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

      <expr_stmt><expr><operator>++</operator><name>wildcard</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name>match</name></expr>;</expr_stmt>
    </block_content>}</block></while>

  <return>return <expr><operator>*</operator><name>wildcard</name> <operator>==</operator> <operator>*</operator><name>match</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* The same but comparing a maximum of NUM characters, like strncmp.  */</comment>
<function><type><name>int</name></type> <name>wildcard_matchn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>wildcard</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>match</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <while>while <condition>(<expr><operator>*</operator><name>wildcard</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>match</name> <operator>&amp;&amp;</operator> <name>num</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>wildcard</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>wildcard</name> <operator>!=</operator> <operator>*</operator><name>match</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

      <expr_stmt><expr><operator>++</operator><name>wildcard</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name>match</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>--</operator><name>num</name></expr>;</expr_stmt>
    </block_content>}</block></while>

  <return>return <expr><operator>(</operator><operator>!</operator><name>num</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>wildcard</name> <operator>==</operator> <operator>*</operator><name>match</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LINUX_NETWORK</name></cpp:ifdef>
<function><type><name>int</name></type> <name>kernel_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>utsname</name></name></type> <name>utsname</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>version</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>split</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><call><name>uname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>utsname</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to find kernel version: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_MISC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><name>split</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name><name>utsname</name><operator>.</operator><name>release</name></name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>version</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>split</name></expr> ?</condition><then> <expr><call><name>atoi</name><argument_list>(<argument><expr><name>split</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>split</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>version</name> <operator>=</operator> <name>version</name> <operator>*</operator> <literal type="number">256</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>split</name></expr> ?</condition><then> <expr><call><name>atoi</name><argument_list>(<argument><expr><name>split</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>split</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>version</name> <operator>*</operator> <literal type="number">256</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>split</name></expr> ?</condition><then> <expr><call><name>atoi</name><argument_list>(<argument><expr><name>split</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
