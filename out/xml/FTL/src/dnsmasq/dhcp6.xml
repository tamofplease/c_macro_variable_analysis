<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/dnsmasq/dhcp6.c"><comment type="block">/* dnsmasq is Copyright (c) 2000-2022 Simon Kelley

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 dated June, 1991, or
   (at your option) version 3 dated 29 June, 2007.
 
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
     
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnsmasq.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/icmp6.h&gt;</cpp:file></cpp:include>

<struct>struct <name>iface_param</name> <block>{
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>current</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>fallback</name></decl>, <decl><type ref="prev"/><name>ll_addr</name></decl>, <decl><type ref="prev"/><name>ula_addr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ind</name></decl>, <decl><type ref="prev"/><name>addr_match</name></decl>;</decl_stmt>
}</block>;</struct>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>complete_context6</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>local</name></decl></parameter>,  <parameter><decl><type><name>int</name></type> <name>prefix</name></decl></parameter>,
			     <parameter><decl><type><name>int</name></type> <name>scope</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>if_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, 
			     <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>preferred</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>valid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vparam</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>make_duid1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>mac</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maclen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>parm</name></decl></parameter>)</parameter_list>;</function_decl> 

<function><type><name>void</name></type> <name>dhcp6_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name></type> <name>saddr</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IPV6_TCLASS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>IPTOS_CLASS_CS6</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>int</name></type> <name>class</name> <init>= <expr><name>IPTOS_CLASS_CS6</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>int</name></type> <name>oneopt</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>PF_INET6</name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><name>IPPROTO_UDP</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IPV6_TCLASS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>IPTOS_CLASS_CS6</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_IPV6</name></expr></argument>, <argument><expr><name>IPV6_TCLASS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>class</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>class</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_IPV6</name></expr></argument>, <argument><expr><name>IPV6_V6ONLY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oneopt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>oneopt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
      <operator>!</operator><call><name>fix_fd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <operator>!</operator><call><name>set_ipv6pktinfo</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>die</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot create DHCPv6 socket: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_BADNET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
 <comment type="block">/* When bind-interfaces is set, there might be more than one dnsmasq
     instance binding port 547. That's OK if they serve different networks.
     Need to set REUSEADDR|REUSEPORT to make this possible.
     Handle the case that REUSEPORT is defined, but the kernel doesn't 
     support it. This handles the introduction of REUSEPORT on Linux. */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NOWILD</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CLEVERBIND</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SO_REUSEPORT</name></cpp:ifdef>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_REUSEPORT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oneopt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>oneopt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
	  <name>errno</name> <operator>==</operator> <name>ENOPROTOOPT</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      
      <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_REUSEADDR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oneopt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>oneopt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to set SO_REUSE{ADDR|PORT} on DHCPv6 socket: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_BADNET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>saddr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>saddr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SOCKADDR_SA_LEN</name></cpp:ifdef>
  <expr_stmt><expr><name><name>saddr</name><operator>.</operator><name>sin6_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name><name>saddr</name><operator>.</operator><name>sin6_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>saddr</name><operator>.</operator><name>sin6_addr</name></name> <operator>=</operator> <name>in6addr_any</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>saddr</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>DHCPV6_SERVER_PORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>saddr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to bind DHCPv6 server socket: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_BADNET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp6fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dhcp6_packet</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iface_param</name></name></type> <name>parm</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>cmsghdr</name></name> <modifier>*</modifier></type><name>cmptr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>msghdr</name></name></type> <name>msg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>if_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <union>union <block>{
    <decl_stmt><decl><type><name><name>struct</name> <name>cmsghdr</name></name></type> <name>align</name></decl>;</decl_stmt> <comment type="block">/* this ensures alignment */</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>control6</name><index>[<expr><call><name>CMSG_SPACE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in6_pktinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
  }</block> <decl><name>control_u</name></decl>;</union>
  <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name></type> <name>from</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>sz</name></decl>;</decl_stmt> 
  <decl_stmt><decl><type><name><name>struct</name> <name>ifreq</name></name></type> <name>ifr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iname</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>port</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>dst_addr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>all_servers</name></decl>;</decl_stmt>
  
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dst_addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dst_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_control</name></name> <operator>=</operator> <name><name>control_u</name><operator>.</operator><name>control6</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_controllen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>control_u</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_name</name></name> <operator>=</operator> <operator>&amp;</operator><name>from</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_namelen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_iov</name></name> <operator>=</operator>  <operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_packet</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_iovlen</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sz</name> <operator>=</operator> <call><name>recv_dhcp_packet</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp6fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DUMPFILE</name></cpp:ifdef>
  <expr_stmt><expr><call><name>dump_packet_udp</name><argument_list>(<argument><expr><name>DUMP_DHCPV6</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_packet</name><operator>.</operator><name>iov_base</name></name></expr></argument>, <argument><expr><name>sz</name></expr></argument>,
		  <argument><expr><operator>(</operator>union <name>mysockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>from</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp6fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
  <for>for <control>(<init><expr><name>cmptr</name> <operator>=</operator> <call><name>CMSG_FIRSTHDR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>cmptr</name></expr>;</condition> <incr><expr><name>cmptr</name> <operator>=</operator> <call><name>CMSG_NXTHDR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>cmptr</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_level</name></name> <operator>==</operator> <name>IPPROTO_IPV6</name> <operator>&amp;&amp;</operator> <name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_type</name></name> <operator>==</operator> <name><name>daemon</name><operator>-&gt;</operator><name>v6pktinfo</name></name></expr>)</condition>
      <block>{<block_content>
	<union>union <block>{
	  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name><name>struct</name> <name>in6_pktinfo</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	}</block> <decl><name>p</name></decl>;</union>
	<expr_stmt><expr><name><name>p</name><operator>.</operator><name>c</name></name> <operator>=</operator> <call><name>CMSG_DATA</name><argument_list>(<argument><expr><name>cmptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
	<expr_stmt><expr><name>if_index</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>p</name><operator>-&gt;</operator><name>ipi6_ifindex</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>dst_addr</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>p</name><operator>-&gt;</operator><name>ipi6_addr</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt></block_content></block></for>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>indextoname</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp6fd</name></name></expr></argument>, <argument><expr><name>if_index</name></expr></argument>, <argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>relay_reply6</name><argument_list>(<argument><expr><operator>&amp;</operator><name>from</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DUMPFILE</name></cpp:ifdef>
      <expr_stmt><expr><call><name>dump_packet_udp</name><argument_list>(<argument><expr><name>DUMP_DHCPV6</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>outpacket</name><operator>.</operator><name>iov_base</name></name></expr></argument>, <argument><expr><call><name>save_counter</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
		      <argument><expr><operator>(</operator>union <name>mysockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>from</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp6fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      
      <while>while <condition>(<expr><call><name>retry_send</name><argument_list>(<argument><expr><call><name>sendto</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp6fd</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>outpacket</name><operator>.</operator><name>iov_base</name></name></expr></argument>, 
			       <argument><expr><call><name>save_counter</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>from</name></expr></argument>, 
			       <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
    </block_content>}</block></if>
  <else>else
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_bridge</name></name> <modifier>*</modifier></type><name>bridge</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>alias</name></decl>;</decl_stmt>
      
      <for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>if_except</name></name></expr>;</init> <condition><expr><name>tmp</name></expr>;</condition> <incr><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <call><name>wildcard_match</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <return>return;</return></block_content></block></if></if_stmt></block_content></block></for>
      
      <for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_except</name></name></expr>;</init> <condition><expr><name>tmp</name></expr>;</condition> <incr><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <call><name>wildcard_match</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <return>return;</return></block_content></block></if></if_stmt></block_content></block></for>
      
      <expr_stmt><expr><name><name>parm</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>parm</name><operator>.</operator><name>ind</name></name> <operator>=</operator> <name>if_index</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>parm</name><operator>.</operator><name>addr_match</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parm</name><operator>.</operator><name>fallback</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parm</name><operator>.</operator><name>ll_addr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parm</name><operator>.</operator><name>ula_addr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* If the interface on which the DHCPv6 request was received is
         an alias of some other interface (as specified by the
         --bridge-interface option), change parm.ind so that we look
         for DHCPv6 contexts associated with the aliased interface
         instead of with the aliasing one. */</comment>
      <for>for <control>(<init><expr><name>bridge</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>bridges</name></name></expr>;</init> <condition><expr><name>bridge</name></expr>;</condition> <incr><expr><name>bridge</name> <operator>=</operator> <name><name>bridge</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
	  <for>for <control>(<init><expr><name>alias</name> <operator>=</operator> <name><name>bridge</name><operator>-&gt;</operator><name>alias</name></name></expr>;</init> <condition><expr><name>alias</name></expr>;</condition> <incr><expr><name>alias</name> <operator>=</operator> <name><name>alias</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><call><name>wildcard_matchn</name><argument_list>(<argument><expr><name><name>alias</name><operator>-&gt;</operator><name>iface</name></name></expr></argument>, <argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>, <argument><expr><name>IF_NAMESIZE</name></expr></argument>)</argument_list></call></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name><name>parm</name><operator>.</operator><name>ind</name></name> <operator>=</operator> <call><name>if_nametoindex</name><argument_list>(<argument><expr><name><name>bridge</name><operator>-&gt;</operator><name>iface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>parm</name><operator>.</operator><name>ind</name></name></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_WARNING</name></expr></argument>,
			      <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unknown interface %s in bridge-interface"</literal></expr></argument>)</argument_list></call></expr></argument>,
			      <argument><expr><name><name>bridge</name><operator>-&gt;</operator><name>iface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <return>return;</return>
		  </block_content>}</block></if></if_stmt>
		<break>break;</break>
	      </block_content>}</block></if></if_stmt></block_content></block></for>
	  <if_stmt><if>if <condition>(<expr><name>alias</name></expr>)</condition><block type="pseudo"><block_content>
	    <break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></for>
      
      <for>for <control>(<init><expr><name>context</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp6</name></name></expr>;</init> <condition><expr><name>context</name></expr>;</condition> <incr><expr><name>context</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><call><name>IN6_IS_ADDR_UNSPECIFIED</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>context</name><operator>-&gt;</operator><name>prefix</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	  <block>{<block_content>
	    <comment type="block">/* wildcard context for DHCP-stateless only */</comment>
	    <expr_stmt><expr><name><name>parm</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	  </block_content>}</block></if>
	<else>else
	  <block>{<block_content>
	    <comment type="block">/* unlinked contexts are marked by context-&gt;current == context */</comment>
	    <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>local6</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></else></if_stmt></block_content></block></for>
      
      <comment type="block">/* Ignore requests sent to the ALL_SERVERS multicast address for relay when
	 we're listening there for DHCPv6 server reasons. */</comment>
      <expr_stmt><expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>ALL_SERVERS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>all_servers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IN6_ARE_ADDR_EQUAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dst_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>all_servers</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	  <call><name>relay_upstream6</name><argument_list>(<argument><expr><name>if_index</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>sz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>from</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><name><name>from</name><operator>.</operator><name>sin6_scope_id</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return;</return></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>iface_enumerate</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parm</name></expr></argument>, <argument><expr><name>complete_context6</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return;</return></block_content></block></if></if_stmt>
      
      <comment type="block">/* Check for a relay again after iface_enumerate/complete_context has had
	 chance to fill in relay-&gt;iface_index fields. This handles first time through
	 and any changes in interface config. */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IN6_ARE_ADDR_EQUAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dst_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>all_servers</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	  <call><name>relay_upstream6</name><argument_list>(<argument><expr><name>if_index</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>sz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>from</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><name><name>from</name><operator>.</operator><name>sin6_scope_id</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return;</return></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>if_names</name></name> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>if_addrs</name></name></expr>)</condition>
	<block>{<block_content>
	  
	  <for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>if_names</name></name></expr>;</init> <condition><expr><name>tmp</name></expr>;</condition> <incr><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <call><name>wildcard_match</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	      <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	  
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>parm</name><operator>.</operator><name>addr_match</name></name></expr>)</condition><block type="pseudo"><block_content>
	    <return>return;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
      
      <comment type="block">/* May have configured relay, but not DHCP server */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>daemon</name><operator>-&gt;</operator><name>doing_dhcp6</name></name></expr>)</condition><block type="pseudo"><block_content>
	<return>return;</return></block_content></block></if></if_stmt>
      
      <expr_stmt><expr><call><name>lease_prune</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* lose any expired leases */</comment>
      
      <expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>dhcp6_reply</name><argument_list>(<argument><expr><name><name>parm</name><operator>.</operator><name>current</name></name></expr></argument>, <argument><expr><name>if_index</name></expr></argument>, <argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>parm</name><operator>.</operator><name>fallback</name></name></expr></argument>, 
			 <argument><expr><operator>&amp;</operator><name><name>parm</name><operator>.</operator><name>ll_addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>parm</name><operator>.</operator><name>ula_addr</name></name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>from</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* The port in the source address of the original request should
	 be correct, but at least once client sends from the server port,
	 so we explicitly send to the client port to a client, and the
	 server port to a relay. */</comment>
      <if_stmt><if>if <condition>(<expr><name>port</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name><name>from</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DUMPFILE</name></cpp:ifdef>
	  <expr_stmt><expr><call><name>dump_packet_udp</name><argument_list>(<argument><expr><name>DUMP_DHCPV6</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>outpacket</name><operator>.</operator><name>iov_base</name></name></expr></argument>, <argument><expr><call><name>save_counter</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
			  <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator>union <name>mysockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>from</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp6fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
	  
	  <while>while <condition>(<expr><call><name>retry_send</name><argument_list>(<argument><expr><call><name>sendto</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp6fd</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>outpacket</name><operator>.</operator><name>iov_base</name></name></expr></argument>,
				   <argument><expr><call><name>save_counter</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>from</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
	</block_content>}</block></if></if_stmt>
      
      <comment type="block">/* These need to be called _after_ we send DHCPv6 packet, since lease_update_file()
	 may trigger sending an RA packet, which overwrites our buffer. */</comment>
      <expr_stmt><expr><call><name>lease_update_file</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>lease_update_dns</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>get_client_mac</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iface</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>mac</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>maclenp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>mactypep</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Receiving a packet from a host does not populate the neighbour
     cache, so we send a neighbour discovery request if we can't 
     find the sender. Repeat a few times in case of packet loss. */</comment>
  
  <decl_stmt><decl><type><name><name>struct</name> <name>neigh_packet</name></name></type> <name>neigh</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>union</name> <name>mysockaddr</name></name></type> <name>addr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>maclen</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>neigh</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ND_NEIGHBOR_SOLICIT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>neigh</name><operator>.</operator><name>code</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>neigh</name><operator>.</operator><name>reserved</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>neigh</name><operator>.</operator><name>target</name></name> <operator>=</operator> <operator>*</operator><name>client</name></expr>;</expr_stmt>
  <comment type="block">/* RFC4443 section-2.3: checksum has to be zero to be calculated */</comment>
  <expr_stmt><expr><name><name>neigh</name><operator>.</operator><name>checksum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
   
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SOCKADDR_SA_LEN</name></cpp:ifdef>
  <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>IPPROTO_ICMPV6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name> <operator>=</operator> <operator>*</operator><name>client</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_scope_id</name></name> <operator>=</operator> <name>iface</name></expr>;</expr_stmt>
  
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name></decl>;</decl_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>maclen</name> <operator>=</operator> <call><name>find_mac</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>mac</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<break>break;</break></block_content></block></if></if_stmt>
	  
      <while>while<condition>(<expr><call><name>retry_send</name><argument_list>(<argument><expr><call><name>sendto</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>icmp6fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>neigh</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>neigh</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>sa</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
      
      <expr_stmt><expr><name><name>ts</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ts</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <literal type="number">100000000</literal></expr>;</expr_stmt> <comment type="block">/* 100ms */</comment>
      <expr_stmt><expr><call><name>nanosleep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

  <expr_stmt><expr><operator>*</operator><name>maclenp</name> <operator>=</operator> <name>maclen</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>mactypep</name> <operator>=</operator> <name>ARPHRD_ETHER</name></expr>;</expr_stmt>
</block_content>}</block></function>
    
<function><type><specifier>static</specifier> <name>int</name></type> <name>complete_context6</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>local</name></decl></parameter>,  <parameter><decl><type><name>int</name></type> <name>prefix</name></decl></parameter>,
			     <parameter><decl><type><name>int</name></type> <name>scope</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>if_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>preferred</name></decl></parameter>, 
			     <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>valid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vparam</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>shared_network</name></name> <modifier>*</modifier></type><name>share</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_relay</name></name> <modifier>*</modifier></type><name>relay</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iface_param</name></name> <modifier>*</modifier></type><name>param</name> <init>= <expr><name>vparam</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iname</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>match</name> <init>= <expr><operator>!</operator><name><name>daemon</name><operator>-&gt;</operator><name>if_addrs</name></name></expr></init></decl>;</decl_stmt>
 
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>scope</name></expr>;</expr_stmt> <comment type="block">/* warning */</comment>
  
  <if_stmt><if>if <condition>(<expr><name>if_index</name> <operator>!=</operator> <name><name>param</name><operator>-&gt;</operator><name>ind</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><call><name>IN6_IS_ADDR_LINKLOCAL</name><argument_list>(<argument><expr><name>local</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>ll_addr</name></name> <operator>=</operator> <operator>*</operator><name>local</name></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><call><name>IN6_IS_ADDR_ULA</name><argument_list>(<argument><expr><name>local</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>ula_addr</name></name> <operator>=</operator> <operator>*</operator><name>local</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
  <if_stmt><if>if <condition>(<expr><call><name>IN6_IS_ADDR_LOOPBACK</name><argument_list>(<argument><expr><name>local</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <call><name>IN6_IS_ADDR_LINKLOCAL</name><argument_list>(<argument><expr><name>local</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <call><name>IN6_IS_ADDR_MULTICAST</name><argument_list>(<argument><expr><name>local</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <comment type="block">/* if we have --listen-address config, see if the 
     arrival interface has a matching address. */</comment>
  <for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>if_addrs</name></name></expr>;</init> <condition><expr><name>tmp</name></expr>;</condition> <incr><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name> <operator>&amp;&amp;</operator>
	<call><name>IN6_ARE_ADDR_EQUAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><name>local</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>match</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>addr_match</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
  
  <comment type="block">/* Determine a globally address on the arrival interface, even
     if we have no matching dhcp-context, because we're only
     allocating on remote subnets via relays. This
     is used as a default for the DNS server option. */</comment>
  <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>fallback</name></name> <operator>=</operator> <operator>*</operator><name>local</name></expr>;</expr_stmt>
  
  <for>for <control>(<init><expr><name>context</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp6</name></name></expr>;</init> <condition><expr><name>context</name></expr>;</condition> <incr><expr><name>context</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_DHCP</name><operator>)</operator> <operator>&amp;&amp;</operator>
	<operator>!</operator><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>CONTEXT_TEMPLATE</name> <operator>|</operator> <name>CONTEXT_OLD</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
	<name>prefix</name> <operator>&lt;=</operator> <name><name>context</name><operator>-&gt;</operator><name>prefix</name></name> <operator>&amp;&amp;</operator>
	<name><name>context</name><operator>-&gt;</operator><name>current</name></name> <operator>==</operator> <name>context</name></expr>)</condition>
      <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>is_same_net6</name><argument_list>(<argument><expr><name>local</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	    <call><name>is_same_net6</name><argument_list>(<argument><expr><name>local</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>end6</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	  <block>{<block_content>
	    <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>tmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>up</name></decl>;</decl_stmt>
	    
	    <comment type="block">/* use interface values only for constructed contexts */</comment>
	    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_CONSTRUCTED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>preferred</name> <operator>=</operator> <name>valid</name> <operator>=</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt></block_content></block></if>
	    <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>IFACE_DEPRECATED</name></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>preferred</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		    
	    <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_DEPRECATE</name></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>preferred</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    
	    <comment type="block">/* order chain, longest preferred time first */</comment>
	    <for>for <control>(<init><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>param</name><operator>-&gt;</operator><name>current</name></name></expr><operator>,</operator> <expr><name>tmp</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>current</name></name></expr>;</init> <condition><expr><name>tmp</name></expr>;</condition> <incr><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>current</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	      <if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>preferred</name></name> <operator>&lt;=</operator> <name>preferred</name></expr>)</condition><block type="pseudo"><block_content>
		<break>break;</break></block_content></block></if>
	      <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>tmp</name><operator>-&gt;</operator><name>current</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>
	    
	    <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <operator>*</operator><name>up</name></expr>;</expr_stmt>
	    <expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>local6</name></name> <operator>=</operator> <operator>*</operator><name>local</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>preferred</name></name> <operator>=</operator> <name>preferred</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <name>valid</name></expr>;</expr_stmt>
	  </block_content>}</block></if>
	<else>else
	  <block>{<block_content>
	    <for>for <control>(<init><expr><name>share</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>shared_networks</name></name></expr>;</init> <condition><expr><name>share</name></expr>;</condition> <incr><expr><name>share</name> <operator>=</operator> <name><name>share</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	      <block>{<block_content>
		<comment type="block">/* IPv4 shared_address - ignore */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>share</name><operator>-&gt;</operator><name>shared_addr</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		  <continue>continue;</continue></block_content></block></if></if_stmt>
			
		<if_stmt><if>if <condition>(<expr><name><name>share</name><operator>-&gt;</operator><name>if_index</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		  <block>{<block_content>
		    <if_stmt><if>if <condition>(<expr><name><name>share</name><operator>-&gt;</operator><name>if_index</name></name> <operator>!=</operator> <name>if_index</name></expr>)</condition><block type="pseudo"><block_content>
		      <continue>continue;</continue></block_content></block></if></if_stmt>
		  </block_content>}</block></if>
		<else>else
		  <block>{<block_content>
		    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IN6_ARE_ADDR_EQUAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>share</name><operator>-&gt;</operator><name>match_addr6</name></name></expr></argument>, <argument><expr><name>local</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		      <continue>continue;</continue></block_content></block></if></if_stmt>
		  </block_content>}</block></else></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><call><name>is_same_net6</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>share</name><operator>-&gt;</operator><name>shared_addr6</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		    <call><name>is_same_net6</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>share</name><operator>-&gt;</operator><name>shared_addr6</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>end6</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>current</name></name></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>local6</name></name> <operator>=</operator> <operator>*</operator><name>local</name></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>preferred</name></name> <operator>=</operator> <ternary><condition><expr><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_DEPRECATE</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>:<expr><literal type="number">0xffffffff</literal></expr></else></ternary></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>
		  </block_content>}</block></if></if_stmt>
	      </block_content>}</block></for>
	  </block_content>}</block></else></if_stmt>      
      </block_content>}</block></if></if_stmt></block_content></block></for>
  
  <if_stmt><if>if <condition>(<expr><name>match</name></expr>)</condition><block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>relay</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>relay6</name></name></expr>;</init> <condition><expr><name>relay</name></expr>;</condition> <incr><expr><name>relay</name> <operator>=</operator> <name><name>relay</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><call><name>IN6_ARE_ADDR_EQUAL</name><argument_list>(<argument><expr><name>local</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>relay</name><operator>-&gt;</operator><name>local</name><operator>.</operator><name>addr6</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>relay</name><operator>-&gt;</operator><name>iface_index</name></name> <operator>=</operator> <name>if_index</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
  
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>dhcp_config</name></name> <modifier>*</modifier></type><name>config_find_by_address6</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_config</name></name> <modifier>*</modifier></type><name>configs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>net</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prefix</name></decl></parameter>,  <parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_config</name></name> <modifier>*</modifier></type><name>config</name></decl>;</decl_stmt>
  
  <for>for <control>(<init><expr><name>config</name> <operator>=</operator> <name>configs</name></expr>;</init> <condition><expr><name>config</name></expr>;</condition> <incr><expr><name>config</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONFIG_ADDR6</name></expr>)</condition>
      <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>addrlist</name></name> <modifier>*</modifier></type><name>addr_list</name></decl>;</decl_stmt>
	
	<for>for <control>(<init><expr><name>addr_list</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>addr6</name></name></expr>;</init> <condition><expr><name>addr_list</name></expr>;</condition> <incr><expr><name>addr_list</name> <operator>=</operator> <name><name>addr_list</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>net</name> <operator>||</operator> <call><name>is_same_net6</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr_list</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr6</name></name></expr></argument>, <argument><expr><name>net</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>addr_list</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ADDRLIST_WILDCARD</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>prefix</name> <operator>==</operator> <literal type="number">64</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
	      <call><name>is_same_net6</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr_list</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr6</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>addr_list</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ADDRLIST_PREFIX</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>addr_list</name><operator>-&gt;</operator><name>prefixlen</name></name></expr> </then><else>: <expr><literal type="number">128</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><name>config</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
      </block_content>}</block></if></if_stmt></block_content></block></for>
  
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>address6_allocate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>,  <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>clid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>clid_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>temp_addr</name></decl></parameter>,
				       <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>iaid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>serial</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>netids</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plain_range</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>ans</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Find a free address: exclude anything in use and anything allocated to
     a particular hwaddr/clientid/hostname in our configuration.
     Try to return from contexts which match netids first. 
     
     Note that we assume the address prefix lengths are 64 or greater, so we can
     get by with 64 bit arithmetic.
*/</comment>

  <decl_stmt><decl><type><name>u64</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>addr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pass</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u64</name></type> <name>j</name></decl>;</decl_stmt> 

  <comment type="block">/* hash hwaddr: use the SDBM hashing algorithm.  This works
     for MAC addresses, let's see how it manages with client-ids! 
     For temporary addresses, we generate a new random one each time. */</comment>
  <if_stmt><if>if <condition>(<expr><name>temp_addr</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>rand64</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>iaid</name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>clid_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>clid</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <name>j</name></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>
  
  <for>for <control>(<init><expr><name>pass</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><ternary><condition><expr><name>pass</name> <operator>&lt;=</operator> <name>plain_range</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</condition> <incr><expr><name>pass</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>c</name> <operator>=</operator> <name>context</name></expr>;</init> <condition><expr><name>c</name></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>current</name></name></expr></incr>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>CONTEXT_DEPRECATE</name> <operator>|</operator> <name>CONTEXT_STATIC</name> <operator>|</operator> <name>CONTEXT_RA_STATELESS</name> <operator>|</operator> <name>CONTEXT_USED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>match_netid</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>, <argument><expr><name>netids</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if>
      <else>else
	<block>{<block_content> 
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>temp_addr</name> <operator>&amp;&amp;</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CONSEC_ADDR</name></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <comment type="block">/* seed is largest extant lease addr in this context,
		 skip addresses equal to the number of addresses rejected
		 by clients. This should avoid the same client being offered the same
		 address after it has rjected it. */</comment>
	      <expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>lease_find_max_addr6</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>serial</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>addr_epoch</name></name></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>addr_epoch</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>addr_epoch</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></if>
	  <else>else
	    <block>{<block_content>
	      <decl_stmt><decl><type><name>u64</name></type> <name>range</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <call><name>addr6part</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>end6</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>addr6part</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name>u64</name></type> <name>offset</name> <init>= <expr><name>j</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>addr_epoch</name></name></expr></init></decl>;</decl_stmt>

	      <comment type="block">/* don't divide by zero if range is whole 2^64 */</comment>
	      <if_stmt><if>if <condition>(<expr><name>range</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>offset</name> <operator>%</operator> <name>range</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	      <expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>addr6part</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
	    </block_content>}</block></else></if_stmt>

	  <comment type="block">/* iterate until we find a free address. */</comment>
	  <expr_stmt><expr><name>addr</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
	  
	  <do>do <block>{<block_content>
	    <comment type="block">/* eliminate addresses in use by the server. */</comment>
	    <for>for <control>(<init><expr><name>d</name> <operator>=</operator> <name>context</name></expr>;</init> <condition><expr><name>d</name></expr>;</condition> <incr><expr><name>d</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>current</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	      <if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <call><name>addr6part</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>local6</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	    
	    <expr_stmt><expr><operator>*</operator><name>ans</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>start6</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>setaddr6part</name> <argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>d</name> <operator>&amp;&amp;</operator>
		<operator>!</operator><call><name>lease6_find_by_addr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> 
		<operator>!</operator><call><name>config_find_by_address6</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_conf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	      <return>return <expr><name>c</name></expr>;</return></block_content></block></if></if_stmt>
	    
	    <expr_stmt><expr><name>addr</name><operator>++</operator></expr>;</expr_stmt>
	    
	    <if_stmt><if>if <condition>(<expr><name>addr</name>  <operator>==</operator> <call><name>addr6part</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>end6</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>addr6part</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    
	  </block_content>}</block> while <condition>(<expr><name>addr</name> <operator>!=</operator> <name>start</name></expr>)</condition>;</do>
	</block_content>}</block></else></if_stmt></block_content></block></for></block_content></block></for>
	   
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* can dynamically allocate addr */</comment>
<function><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>address6_available</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, 
					<parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>taddr</name></decl></parameter>,
					<parameter><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>netids</name></decl></parameter>,
					<parameter><decl><type><name>int</name></type> <name>plain_range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>u64</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>, <decl><type ref="prev"/><name>addr</name> <init>= <expr><call><name>addr6part</name><argument_list>(<argument><expr><name>taddr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
 
  <for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name>context</name></expr>;</init> <condition><expr><name>tmp</name></expr>;</condition> <incr><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>current</name></name></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>addr6part</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>addr6part</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp</name><operator>-&gt;</operator><name>end6</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>tmp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>CONTEXT_STATIC</name> <operator>|</operator> <name>CONTEXT_RA_STATELESS</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
          <call><name>is_same_net6</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>, <argument><expr><name>taddr</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	  <call><name>is_same_net6</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp</name><operator>-&gt;</operator><name>end6</name></name></expr></argument>, <argument><expr><name>taddr</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	  <name>addr</name> <operator>&gt;=</operator> <name>start</name> <operator>&amp;&amp;</operator>
          <name>addr</name> <operator>&lt;=</operator> <name>end</name> <operator>&amp;&amp;</operator>
          <call><name>match_netid</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>, <argument><expr><name>netids</name></expr></argument>, <argument><expr><name>plain_range</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>tmp</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* address OK if configured */</comment>
<function><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>address6_valid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, 
				    <parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>taddr</name></decl></parameter>,
				    <parameter><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>netids</name></decl></parameter>,
				    <parameter><decl><type><name>int</name></type> <name>plain_range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
 
  <for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name>context</name></expr>;</init> <condition><expr><name>tmp</name></expr>;</condition> <incr><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>current</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><call><name>is_same_net6</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>, <argument><expr><name>taddr</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	<call><name>match_netid</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>, <argument><expr><name>netids</name></expr></argument>, <argument><expr><name>plain_range</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>tmp</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>make_duid</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>now</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>duid_config</name></name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
      
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>duid</name></name> <operator>=</operator> <name>p</name> <operator>=</operator> <call><name>safe_malloc</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>duid_config_len</name></name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>duid_len</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>duid_config_len</name></name> <operator>+</operator> <literal type="number">6</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* DUID_EN */</comment>
      <expr_stmt><expr><call><name>PUTLONG</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>duid_enterprise</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>duid_config</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>duid_config_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
  <else>else
    <block>{<block_content>
      <decl_stmt><decl><type><name>time_t</name></type> <name>newnow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      
      <comment type="block">/* If we have no persistent lease database, or a non-stable RTC, use DUID_LL (newnow == 0) */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_BROKEN_RTC</name></cpp:ifndef>
      <comment type="block">/* rebase epoch to 1/1/2000 */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LEASE_RO</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>lease_change_command</name></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>newnow</name> <operator>=</operator> <name>now</name> <operator>-</operator> <literal type="number">946684800</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>      
      
      <expr_stmt><expr><call><name>iface_enumerate</name><argument_list>(<argument><expr><name>AF_LOCAL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newnow</name></expr></argument>, <argument><expr><name>make_duid1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>daemon</name><operator>-&gt;</operator><name>duid</name></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Cannot create DHCPv6 server DUID: %s"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_MISC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>make_duid1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>mac</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maclen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>parm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* create DUID as specified in RFC3315. We use the MAC of the
     first interface we find that isn't loopback or P-to-P and
     has address-type &lt; 256. Address types above 256 are things like 
     tunnels which don't have usable MAC addresses. */</comment>
  
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>index</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>parm</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>time_t</name></type> <name>newnow</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>time_t</name> <operator>*</operator><operator>)</operator><name>parm</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>newnow</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>duid</name></name> <operator>=</operator> <name>p</name> <operator>=</operator> <call><name>safe_malloc</name><argument_list>(<argument><expr><name>maclen</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>duid_len</name></name> <operator>=</operator> <name>maclen</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* DUID_LL */</comment>
      <expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* address type */</comment>
    </block_content>}</block></if>
  <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>duid</name></name> <operator>=</operator> <name>p</name> <operator>=</operator> <call><name>safe_malloc</name><argument_list>(<argument><expr><name>maclen</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>duid_len</name></name> <operator>=</operator> <name>maclen</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* DUID_LLT */</comment>
      <expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* address type */</comment>
      <expr_stmt><expr><call><name>PUTLONG</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>time_t</name> <operator>*</operator><operator>)</operator><name>parm</name><operator>)</operator></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* time */</comment>
    </block_content>}</block></else></if_stmt>
  
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>mac</name></expr></argument>, <argument><expr><name>maclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>cparam</name> <block>{
  <decl_stmt><decl><type><name>time_t</name></type> <name>now</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>newone</name></decl>, <decl><type ref="prev"/><name>newname</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>construct_worker</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>local</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prefix</name></decl></parameter>, 
			    <parameter><decl><type><name>int</name></type> <name>scope</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>if_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, 
			    <parameter><decl><type><name>int</name></type> <name>preferred</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>valid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vparam</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>ifrn_name</name><index>[<expr><name>IFNAMSIZ</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>start6</name></decl>, <decl><type ref="prev"/><name>end6</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>template</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iname</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
  
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>scope</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>flags</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>valid</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>preferred</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>cparam</name></name> <modifier>*</modifier></type><name>param</name> <init>= <expr><name>vparam</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>IN6_IS_ADDR_LOOPBACK</name><argument_list>(<argument><expr><name>local</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <call><name>IN6_IS_ADDR_LINKLOCAL</name><argument_list>(<argument><expr><name>local</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <call><name>IN6_IS_ADDR_MULTICAST</name><argument_list>(<argument><expr><name>local</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>IFACE_PERMANENT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>IFACE_DEPRECATED</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <comment type="block">/* Ignore interfaces where we're not doing RA/DHCP6 */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>indextoname</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>icmp6fd</name></name></expr></argument>, <argument><expr><name>if_index</name></expr></argument>, <argument><expr><name>ifrn_name</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <operator>!</operator><call><name>iface_check</name><argument_list>(<argument><expr><name>AF_LOCAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ifrn_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_except</name></name></expr>;</init> <condition><expr><name>tmp</name></expr>;</condition> <incr><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <call><name>wildcard_match</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>ifrn_name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

  <for>for <control>(<init><expr><name>template</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp6</name></name></expr>;</init> <condition><expr><name>template</name></expr>;</condition> <incr><expr><name>template</name> <operator>=</operator> <name><name>template</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>template</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>CONTEXT_TEMPLATE</name> <operator>|</operator> <name>CONTEXT_CONSTRUCTED</name><operator>)</operator><operator>)</operator></expr>)</condition>
      <block>{<block_content>
	<comment type="block">/* non-template entries, just fill in interface and local addresses */</comment>
	<if_stmt><if>if <condition>(<expr><name>prefix</name> <operator>&lt;=</operator> <name><name>template</name><operator>-&gt;</operator><name>prefix</name></name> <operator>&amp;&amp;</operator>
	    <call><name>is_same_net6</name><argument_list>(<argument><expr><name>local</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>template</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>, <argument><expr><name><name>template</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	    <call><name>is_same_net6</name><argument_list>(<argument><expr><name>local</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>template</name><operator>-&gt;</operator><name>end6</name></name></expr></argument>, <argument><expr><name><name>template</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	  <block>{<block_content>
	    <comment type="block">/* First time found, do fast RA. */</comment>
	    <if_stmt><if>if <condition>(<expr><name><name>template</name><operator>-&gt;</operator><name>if_index</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><call><name>ra_start_unsolicited</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>now</name></name></expr></argument>, <argument><expr><name>template</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>newone</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	      </block_content>}</block></if></if_stmt>
	    
	    <expr_stmt><expr><name><name>template</name><operator>-&gt;</operator><name>if_index</name></name> <operator>=</operator> <name>if_index</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>template</name><operator>-&gt;</operator><name>local6</name></name> <operator>=</operator> <operator>*</operator><name>local</name></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt>
	
      </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>wildcard_match</name><argument_list>(<argument><expr><name><name>template</name><operator>-&gt;</operator><name>template_interface</name></name></expr></argument>, <argument><expr><name>ifrn_name</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	     <name><name>template</name><operator>-&gt;</operator><name>prefix</name></name> <operator>&gt;=</operator> <name>prefix</name></expr>)</condition>
      <block>{<block_content>
	<expr_stmt><expr><name>start6</name> <operator>=</operator> <operator>*</operator><name>local</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>setaddr6part</name><argument_list>(<argument><expr><operator>&amp;</operator><name>start6</name></expr></argument>, <argument><expr><call><name>addr6part</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>template</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>end6</name> <operator>=</operator> <operator>*</operator><name>local</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>setaddr6part</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end6</name></expr></argument>, <argument><expr><call><name>addr6part</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>template</name><operator>-&gt;</operator><name>end6</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<for>for <control>(<init><expr><name>context</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp6</name></name></expr>;</init> <condition><expr><name>context</name></expr>;</condition> <incr><expr><name>context</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_TEMPLATE</name><operator>)</operator> <operator>&amp;&amp;</operator>
	      <call><name>IN6_ARE_ADDR_EQUAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>start6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	      <call><name>IN6_ARE_ADDR_EQUAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>end6</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <comment type="block">/* If there's an absolute address context covering this address
		 then don't construct one as well. */</comment>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_CONSTRUCTED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<break>break;</break></block_content></block></if></if_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>if_index</name></name> <operator>==</operator> <name>if_index</name></expr>)</condition>
		<block>{<block_content>
		  <decl_stmt><decl><type><name>int</name></type> <name>cflags</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>flags</name></name></expr></init></decl>;</decl_stmt>
		  <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>CONTEXT_GC</name> <operator>|</operator> <name>CONTEXT_OLD</name><operator>)</operator></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><name>cflags</name> <operator>&amp;</operator> <name>CONTEXT_OLD</name></expr>)</condition>
		    <block>{<block_content>
		      <comment type="block">/* address went, now it's back, and on the same interface */</comment>
		      <expr_stmt><expr><call><name>log_context</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
		      <comment type="block">/* fast RAs for a while */</comment>
		      <expr_stmt><expr><call><name>ra_start_unsolicited</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>now</name></name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>newone</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
		      <comment type="block">/* Add address to name again */</comment>
		      <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_RA_NAME</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>newname</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		    
		    </block_content>}</block></if></if_stmt>
		  <break>break;</break>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></if></if_stmt></block_content></block></for>
	
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>context</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>context</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>dhcp_context</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><operator>*</operator><name>context</name> <operator>=</operator> <operator>*</operator><name>template</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>start6</name></name> <operator>=</operator> <name>start6</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>end6</name></name> <operator>=</operator> <name>end6</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CONTEXT_TEMPLATE</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CONTEXT_CONSTRUCTED</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>if_index</name></name> <operator>=</operator> <name>if_index</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>local6</name></name> <operator>=</operator> <operator>*</operator><name>local</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>saved_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	    
	    <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp6</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp6</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>

	    <expr_stmt><expr><call><name>ra_start_unsolicited</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>now</name></name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <comment type="block">/* we created a new one, need to call
	       lease_update_file to get periodic functions called */</comment>
	    <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>newone</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

	    <comment type="block">/* Will need to add new putative SLAAC addresses to existing leases */</comment>
	    <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_RA_NAME</name></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>newname</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    
	    <expr_stmt><expr><call><name>log_context</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt> 
      </block_content>}</block></if></if_stmt></block_content></block></for>
  
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dhcp_construct_contexts</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>up</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>cparam</name></name></type> <name>param</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>param</name><operator>.</operator><name>newone</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>param</name><operator>.</operator><name>newname</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>param</name><operator>.</operator><name>now</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>

  <for>for <control>(<init><expr><name>context</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp6</name></name></expr>;</init> <condition><expr><name>context</name></expr>;</condition> <incr><expr><name>context</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_CONSTRUCTED</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CONTEXT_GC</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
   
  <expr_stmt><expr><call><name>iface_enumerate</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>, <argument><expr><name>construct_worker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp6</name></name></expr><operator>,</operator> <expr><name>context</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp6</name></name></expr>;</init> <condition><expr><name>context</name></expr>;</condition> <incr><expr><name>context</name> <operator>=</operator> <name>tmp</name></expr></incr>)</control>
    <block>{<block_content>
      
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt> 
     
      <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_GC</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_OLD</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_RA</name><operator>)</operator> <operator>||</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_RA</name></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <comment type="block">/* previously constructed context has gone. advertise it's demise */</comment>
	      <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CONTEXT_OLD</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>address_lost_time</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
	      <comment type="block">/* Apply same ceiling of configured lease time as in radv.c */</comment>
	      <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>saved_valid</name></name> <operator>&gt;</operator> <name><name>context</name><operator>-&gt;</operator><name>lease_time</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>saved_valid</name></name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>lease_time</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      <comment type="block">/* maximum time is 2 hours, from RFC */</comment>
	      <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>saved_valid</name></name> <operator>&gt;</operator> <literal type="number">7200</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* 2 hours */</comment>
		<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>saved_valid</name></name> <operator>=</operator> <literal type="number">7200</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      <expr_stmt><expr><call><name>ra_start_unsolicited</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>param</name><operator>.</operator><name>newone</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* include deletion */</comment> 
	      
	      <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_RA_NAME</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>param</name><operator>.</operator><name>newname</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
			      
	      <expr_stmt><expr><call><name>log_context</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      
	      <expr_stmt><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	    </block_content>}</block></if>
	  <else>else
	    <block>{<block_content>
	      <comment type="block">/* we were never doing RA for this, so free now */</comment>
	      <expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
      <else>else<block type="pseudo"><block_content>
	 <expr_stmt><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>
  
  <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>newone</name></name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp</name></name> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>doing_dhcp6</name></name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>newname</name></name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>lease_update_slaac</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  <expr_stmt><expr><call><name>lease_update_file</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
      <else>else<block type="pseudo"><block_content> 
	<comment type="block">/* Not doing DHCP, so no lease system, manage alarms for ra only */</comment>
	<expr_stmt><expr><call><name>send_alarm</name><argument_list>(<argument><expr><call><name>periodic_ra</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_DHCP6 */</comment>
</unit>
