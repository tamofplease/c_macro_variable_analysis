<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/dnsmasq/poll.c"><comment type="block">/* dnsmasq is Copyright (c) 2000-2022 Simon Kelley

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 dated June, 1991, or
   (at your option) version 3 dated 29 June, 2007.
 
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
     
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnsmasq.h"</cpp:file></cpp:include>

<comment type="block">/* Wrapper for poll(). Allocates and extends array of struct pollfds,
   keeps them in fd order so that we can set and test conditions on
   fd using a simple but efficient binary chop. */</comment>

<comment type="block">/* poll_reset()
   poll_listen(fd, event)
   .
   .
   poll_listen(fd, event);

   hits = do_poll(timeout);

   if (poll_check(fd, event)
    .
    .

   if (poll_check(fd, event)
    .
    .

    event is OR of POLLIN, POLLOUT, POLLERR, etc
*/</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>pollfds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>nfds_t</name></type> <name>nfds</name></decl>, <decl><type ref="prev"/><name>arrsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* Binary search. Returns either the pollfd with fd, or
   if the fd doesn't match, or return equals nfds, the entry
   to the left of which a new record should be inserted. */</comment>
<function><type><specifier>static</specifier> <name>nfds_t</name></type> <name>fd_search</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>nfds_t</name></type> <name>left</name></decl>, <decl><type ref="prev"/><name>right</name></decl>, <decl><type ref="prev"/><name>mid</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>right</name> <operator>=</operator> <name>nfds</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><name>left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>right</name> <operator>==</operator> <name>left</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>pollfds</name><index>[<expr><name>left</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>&gt;=</operator> <name>fd</name><operator>)</operator></expr> ?</condition><then> <expr><name>left</name></expr> </then><else>: <expr><name>right</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
      
      <expr_stmt><expr><name>mid</name> <operator>=</operator> <operator>(</operator><name>left</name> <operator>+</operator> <name>right</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>pollfds</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>&gt;</operator> <name>fd</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>right</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content> 
	<expr_stmt><expr><name>left</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>poll_reset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name>nfds</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>do_poll</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>poll</name><argument_list>(<argument><expr><name>pollfds</name></expr></argument>, <argument><expr><name>nfds</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>poll_check</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>nfds_t</name></type> <name>i</name> <init>= <expr><call><name>fd_search</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>nfds</name> <operator>&amp;&amp;</operator> <name><name>pollfds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>==</operator> <name>fd</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name><name>pollfds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <name>event</name></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>poll_listen</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
   <decl_stmt><decl><type><name>nfds_t</name></type> <name>i</name> <init>= <expr><call><name>fd_search</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
   <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>nfds</name> <operator>&amp;&amp;</operator> <name><name>pollfds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>==</operator> <name>fd</name></expr>)</condition><block type="pseudo"><block_content>
     <expr_stmt><expr><name><name>pollfds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>|=</operator> <name>event</name></expr>;</expr_stmt></block_content></block></if>
   <else>else
     <block>{<block_content>
       <if_stmt><if>if <condition>(<expr><name>arrsize</name> <operator>==</operator> <name>nfds</name></expr>)</condition>
	 <block>{<block_content>
	   <comment type="block">/* Array too small, extend. */</comment>
	   <decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>

	   <expr_stmt><expr><name>arrsize</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>arrsize</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">64</literal></expr> </then><else>: <expr><name>arrsize</name> <operator>*</operator> <literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>

	   <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>new</name> <operator>=</operator> <call><name>whine_realloc</name><argument_list>(<argument><expr><name>pollfds</name></expr></argument>, <argument><expr><name>arrsize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>pollfd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	     <return>return;</return></block_content></block></if></if_stmt>

	   <expr_stmt><expr><name>pollfds</name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	 </block_content>}</block></if></if_stmt>

       <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pollfds</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pollfds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>nfds</name> <operator>-</operator> <name>i</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>pollfd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt><expr><name><name>pollfds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>pollfds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>event</name></expr>;</expr_stmt>
       <expr_stmt><expr><name>nfds</name><operator>++</operator></expr>;</expr_stmt>
     </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
