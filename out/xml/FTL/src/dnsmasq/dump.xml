<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/dnsmasq/dump.c"><comment type="block">/* dnsmasq is Copyright (c) 2000-2022 Simon Kelley

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 dated June, 1991, or
   (at your option) version 3 dated 29 June, 2007.
 
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
     
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnsmasq.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DUMPFILE</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/icmp6.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>u32</name></type> <name>packet_count</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>do_dump_packet</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
			   <parameter><decl><type><name><name>union</name> <name>mysockaddr</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>mysockaddr</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>proto</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* https://wiki.wireshark.org/Development/LibpcapFileFormat */</comment>
<struct>struct <name>pcap_hdr_s</name> <block>{
        <decl_stmt><decl><type><name>u32</name></type> <name>magic_number</name></decl>;</decl_stmt>   <comment type="block">/* magic number */</comment>
        <decl_stmt><decl><type><name>u16</name></type> <name>version_major</name></decl>;</decl_stmt>  <comment type="block">/* major version number */</comment>
        <decl_stmt><decl><type><name>u16</name></type> <name>version_minor</name></decl>;</decl_stmt>  <comment type="block">/* minor version number */</comment>
        <decl_stmt><decl><type><name>u32</name></type> <name>thiszone</name></decl>;</decl_stmt>       <comment type="block">/* GMT to local correction */</comment>
        <decl_stmt><decl><type><name>u32</name></type> <name>sigfigs</name></decl>;</decl_stmt>        <comment type="block">/* accuracy of timestamps */</comment>
        <decl_stmt><decl><type><name>u32</name></type> <name>snaplen</name></decl>;</decl_stmt>        <comment type="block">/* max length of captured packets, in octets */</comment>
        <decl_stmt><decl><type><name>u32</name></type> <name>network</name></decl>;</decl_stmt>        <comment type="block">/* data link type */</comment>
}</block>;</struct>

<struct>struct <name>pcaprec_hdr_s</name> <block>{
        <decl_stmt><decl><type><name>u32</name></type> <name>ts_sec</name></decl>;</decl_stmt>         <comment type="block">/* timestamp seconds */</comment>
        <decl_stmt><decl><type><name>u32</name></type> <name>ts_usec</name></decl>;</decl_stmt>        <comment type="block">/* timestamp microseconds */</comment>
        <decl_stmt><decl><type><name>u32</name></type> <name>incl_len</name></decl>;</decl_stmt>       <comment type="block">/* number of octets of packet saved in file */</comment>
        <decl_stmt><decl><type><name>u32</name></type> <name>orig_len</name></decl>;</decl_stmt>       <comment type="block">/* actual length of packet */</comment>
}</block>;</struct>


<function><type><name>void</name></type> <name>dump_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>buf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>pcap_hdr_s</name></name></type> <name>header</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>pcaprec_hdr_s</name></name></type> <name>pcap_header</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>packet_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dump_file</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* doesn't exist, create and add header */</comment>
      <expr_stmt><expr><name><name>header</name><operator>.</operator><name>magic_number</name></name> <operator>=</operator> <literal type="number">0xa1b2c3d4</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>header</name><operator>.</operator><name>version_major</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>header</name><operator>.</operator><name>version_minor</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>header</name><operator>.</operator><name>thiszone</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>header</name><operator>.</operator><name>sigfigs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>header</name><operator>.</operator><name>snaplen</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>edns_pktsz</name></name> <operator>+</operator> <literal type="number">200</literal></expr>;</expr_stmt> <comment type="block">/* slop for IP/UDP headers */</comment>
      <expr_stmt><expr><name><name>header</name><operator>.</operator><name>network</name></name> <operator>=</operator> <literal type="number">101</literal></expr>;</expr_stmt> <comment type="block">/* DLT_RAW http://www.tcpdump.org/linktypes.html */</comment>

      <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOENT</name> <operator>||</operator>
	  <operator>(</operator><name><name>daemon</name><operator>-&gt;</operator><name>dumpfd</name></name> <operator>=</operator> <call><name>creat</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dump_file</name></name></expr></argument>, <argument><expr><name>S_IRUSR</name> <operator>|</operator> <name>S_IWUSR</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
	  <operator>!</operator><call><name>read_write</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dumpfd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot create %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dump_file</name></name></expr></argument>, <argument><expr><name>EC_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>daemon</name><operator>-&gt;</operator><name>dumpfd</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dump_file</name></name></expr></argument>, <argument><expr><name>O_APPEND</name> <operator>|</operator> <name>O_RDWR</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
	   <operator>!</operator><call><name>read_write</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dumpfd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot access %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dump_file</name></name></expr></argument>, <argument><expr><name>EC_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name><name>header</name><operator>.</operator><name>magic_number</name></name> <operator>!=</operator> <literal type="number">0xa1b2c3d4</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad header in %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dump_file</name></name></expr></argument>, <argument><expr><name>EC_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else
    <block>{<block_content>
      <comment type="block">/* count existing records */</comment>
      <while>while <condition>(<expr><call><name>read_write</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dumpfd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pcap_header</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pcap_header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dumpfd</name></name></expr></argument>, <argument><expr><name><name>pcap_header</name><operator>.</operator><name>incl_len</name></name></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>packet_count</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dump_packet_udp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
		     <parameter><decl><type><name><name>union</name> <name>mysockaddr</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>mysockaddr</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>union</name> <name>mysockaddr</name></name></type> <name>fd_addr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>socklen_t</name></type> <name>addr_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>fd_addr</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>dumpfd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>mask</name> <operator>&amp;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dump_mask</name></name><operator>)</operator></expr>)</condition>
     <block>{<block_content>
       <comment type="block">/* if fd is negative it carries a port number (negated) 
	  which we use as a source or destination when not otherwise
	  specified so wireshark can ID the packet. 
	  If both src and dst are specified, set this to -1 to avoid
	  a spurious getsockname() call. */</comment>
       <decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><name>fd</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
       
       <comment type="block">/* fd &gt;= 0 is a file descriptor and the address of that file descriptor is used
	  in place of a NULL src or dst. */</comment>
       <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>getsockname</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>fd_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr_len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	 <block>{<block_content>
	   <if_stmt><if>if <condition>(<expr><operator>!</operator><name>src</name></expr>)</condition><block type="pseudo"><block_content>
	     <expr_stmt><expr><name>src</name> <operator>=</operator> <operator>&amp;</operator><name>fd_addr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	   
	   <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst</name></expr>)</condition><block type="pseudo"><block_content>
	     <expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>&amp;</operator><name>fd_addr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	 </block_content>}</block></if></if_stmt>
       
       <expr_stmt><expr><call><name>do_dump_packet</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>IPPROTO_UDP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dump_packet_icmp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
		      <parameter><decl><type><name><name>union</name> <name>mysockaddr</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>mysockaddr</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>dumpfd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>mask</name> <operator>&amp;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dump_mask</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>do_dump_packet</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>IPPROTO_ICMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_dump_packet</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
			   <parameter><decl><type><name><name>union</name> <name>mysockaddr</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>mysockaddr</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>proto</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>ip</name></name></type> <name>ip</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>ip6_hdr</name></name></type> <name>ip6</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>family</name></decl>;</decl_stmt>
  <struct>struct <name>udphdr</name> <block>{
    <decl_stmt><decl><type><name>u16</name></type> <name>uh_sport</name></decl>;</decl_stmt>               <comment type="block">/* source port */</comment>
    <decl_stmt><decl><type><name>u16</name></type> <name>uh_dport</name></decl>;</decl_stmt>               <comment type="block">/* destination port */</comment>
    <decl_stmt><decl><type><name>u16</name></type> <name>uh_ulen</name></decl>;</decl_stmt>                <comment type="block">/* udp length */</comment>
    <decl_stmt><decl><type><name>u16</name></type> <name>uh_sum</name></decl>;</decl_stmt>                 <comment type="block">/* udp checksum */</comment>
  }</block> <decl><name>udp</name></decl>;</struct>
  <decl_stmt><decl><type><name><name>struct</name> <name>pcaprec_hdr_s</name></name></type> <name>pcap_header</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>time</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>sum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>iphdr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>ipsz</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
     
  <comment type="block">/* if port != -1 it carries a port number 
     which we use as a source or destination when not otherwise
     specified so wireshark can ID the packet. 
     If both src and dst are specified, set this to -1 to avoid
     a spurious getsockname() call. */</comment>
  <expr_stmt><expr><name><name>udp</name><operator>.</operator><name>uh_sport</name></name> <operator>=</operator> <name><name>udp</name><operator>.</operator><name>uh_dport</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><ternary><condition><expr><name>port</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>port</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>src</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>family</name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>family</name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>iphdr</name> <operator>=</operator> <operator>&amp;</operator><name>ip6</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>ipsz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ip6</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ip6</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ip6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <expr_stmt><expr><name><name>ip6</name><operator>.</operator><name>ip6_vfc</name></name> <operator>=</operator> <literal type="number">6</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ip6</name><operator>.</operator><name>ip6_hops</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ip6</name><operator>.</operator><name>ip6_nxt</name></name> <operator>=</operator> <name>proto</name><operator>)</operator> <operator>==</operator> <name>IPPROTO_UDP</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>ip6</name><operator>.</operator><name>ip6_plen</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>udphdr</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else
	<block>{<block_content>
	  <expr_stmt><expr><name>proto</name> <operator>=</operator> <name><name>ip6</name><operator>.</operator><name>ip6_nxt</name></name> <operator>=</operator> <name>IPPROTO_ICMPV6</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>ip6</name><operator>.</operator><name>ip6_plen</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>src</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ip6</name><operator>.</operator><name>ip6_src</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><name>IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>udp</name><operator>.</operator><name>uh_sport</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_port</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>dst</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ip6</name><operator>.</operator><name>ip6_dst</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><name>IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>udp</name><operator>.</operator><name>uh_dport</name></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_port</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
            
      <comment type="block">/* start UDP checksum */</comment>
      <for>for <control>(<init><expr><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>IN6ADDRSZ</name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control>
	<block>{<block_content>
	  <expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><operator>(</operator><name><name>ip6</name><operator>.</operator><name>ip6_src</name><operator>.</operator><name>s6_addr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>ip6</name><operator>.</operator><name>ip6_src</name><operator>.</operator><name>s6_addr</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	  <expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><operator>(</operator><name><name>ip6</name><operator>.</operator><name>ip6_dst</name><operator>.</operator><name>s6_addr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>ip6</name><operator>.</operator><name>ip6_dst</name><operator>.</operator><name>s6_addr</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 
	</block_content>}</block></for>
    </block_content>}</block></if>
  <else>else
    <block>{<block_content>
      <expr_stmt><expr><name>iphdr</name> <operator>=</operator> <operator>&amp;</operator><name>ip</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>ipsz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <expr_stmt><expr><name><name>ip</name><operator>.</operator><name>ip_v</name></name> <operator>=</operator> <name>IPVERSION</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ip</name><operator>.</operator><name>ip_hl</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>ip</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ip</name><operator>.</operator><name>ip_ttl</name></name> <operator>=</operator> <name>IPDEFTTL</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ip</name><operator>.</operator><name>ip_p</name></name> <operator>=</operator> <name>proto</name><operator>)</operator> <operator>==</operator> <name>IPPROTO_UDP</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>ip</name><operator>.</operator><name>ip_len</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ip</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>udphdr</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else
	<block>{<block_content>
	  <expr_stmt><expr><name><name>ip</name><operator>.</operator><name>ip_len</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ip</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>proto</name> <operator>=</operator> <name><name>ip</name><operator>.</operator><name>ip_p</name></name> <operator>=</operator> <name>IPPROTO_ICMP</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>src</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name><name>ip</name><operator>.</operator><name>ip_src</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_addr</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>udp</name><operator>.</operator><name>uh_sport</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_port</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>dst</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name><name>ip</name><operator>.</operator><name>ip_dst</name></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_addr</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>udp</name><operator>.</operator><name>uh_dport</name></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_port</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
      
      <expr_stmt><expr><name><name>ip</name><operator>.</operator><name>ip_sum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>ip</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	<expr_stmt><expr><name>sum</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>u16</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ip</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt></block_content></block></for>
      <while>while <condition>(<expr><name>sum</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>sum</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>sum</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></while>  
      <expr_stmt><expr><name><name>ip</name><operator>.</operator><name>ip_sum</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>sum</name> <operator>==</operator> <literal type="number">0xffff</literal><operator>)</operator></expr> ?</condition><then> <expr><name>sum</name></expr> </then><else>: <expr><operator>~</operator><name>sum</name></expr></else></ternary></expr>;</expr_stmt>
      
      <comment type="block">/* start UDP/ICMP checksum */</comment>
      <expr_stmt><expr><name>sum</name> <operator>=</operator> <name><name>ip</name><operator>.</operator><name>ip_src</name><operator>.</operator><name>s_addr</name></name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>sum</name> <operator>+=</operator> <operator>(</operator><name><name>ip</name><operator>.</operator><name>ip_src</name><operator>.</operator><name>s_addr</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>ip</name><operator>.</operator><name>ip_dst</name><operator>.</operator><name>s_addr</name></name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>sum</name> <operator>+=</operator> <operator>(</operator><name><name>ip</name><operator>.</operator><name>ip_dst</name><operator>.</operator><name>s_addr</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>packet</name><operator>)</operator><index>[<expr><name>len</name></expr>]</index> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block">/* for checksum, in case length is odd. */</comment>

  <if_stmt><if>if <condition>(<expr><name>proto</name> <operator>==</operator> <name>IPPROTO_UDP</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Add Remaining part of the pseudoheader. Note that though the
	 IPv6 pseudoheader is very different to the IPv4 one, the 
	 net result of this calculation is correct as long as the 
	 packet length is less than 65536, which is fine for us. */</comment>
      <expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>IPPROTO_UDP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>htons</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>udphdr</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <expr_stmt><expr><name><name>udp</name><operator>.</operator><name>uh_sum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>udp</name><operator>.</operator><name>uh_ulen</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>udphdr</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>udphdr</name></expr></argument>)</argument_list></sizeof><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	<expr_stmt><expr><name>sum</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>u16</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>udp</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt></block_content></block></for>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	<expr_stmt><expr><name>sum</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>u16</name> <operator>*</operator><operator>)</operator><name>packet</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt></block_content></block></for>
      <while>while <condition>(<expr><name>sum</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>sum</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>sum</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></while>
      <expr_stmt><expr><name><name>udp</name><operator>.</operator><name>uh_sum</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>sum</name> <operator>==</operator> <literal type="number">0xffff</literal><operator>)</operator></expr> ?</condition><then> <expr><name>sum</name></expr> </then><else>: <expr><operator>~</operator><name>sum</name></expr></else></ternary></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pcap_header</name><operator>.</operator><name>incl_len</name></name> <operator>=</operator> <name><name>pcap_header</name><operator>.</operator><name>orig_len</name></name> <operator>=</operator> <name>ipsz</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>udp</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
    </block_content>}</block></if>
  <else>else
    <block>{<block_content>
      <comment type="block">/* ICMP - ICMPv6 packet is a superset of ICMP */</comment>
      <decl_stmt><decl><type><name><name>struct</name> <name>icmp6_hdr</name></name> <modifier>*</modifier></type><name>icmp</name> <init>= <expr><name>packet</name></expr></init></decl>;</decl_stmt>
      
      <comment type="block">/* See comment in UDP code above. */</comment>
      <expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <expr_stmt><expr><name><name>icmp</name><operator>-&gt;</operator><name>icmp6_cksum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	<expr_stmt><expr><name>sum</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>u16</name> <operator>*</operator><operator>)</operator><name>packet</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt></block_content></block></for>
      <while>while <condition>(<expr><name>sum</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>sum</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>sum</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></while>
      <expr_stmt><expr><name><name>icmp</name><operator>-&gt;</operator><name>icmp6_cksum</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>sum</name> <operator>==</operator> <literal type="number">0xffff</literal><operator>)</operator></expr> ?</condition><then> <expr><name>sum</name></expr> </then><else>: <expr><operator>~</operator><name>sum</name></expr></else></ternary></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pcap_header</name><operator>.</operator><name>incl_len</name></name> <operator>=</operator> <name><name>pcap_header</name><operator>.</operator><name>orig_len</name></name> <operator>=</operator> <name>ipsz</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>time</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pcap_header</name><operator>.</operator><name>ts_sec</name></name> <operator>=</operator> <name><name>time</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pcap_header</name><operator>.</operator><name>ts_usec</name></name> <operator>=</operator> <name><name>time</name><operator>.</operator><name>tv_usec</name></name></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
      <operator>!</operator><call><name>read_write</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dumpfd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pcap_header</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pcap_header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator>
      <operator>!</operator><call><name>read_write</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dumpfd</name></name></expr></argument>, <argument><expr><name>iphdr</name></expr></argument>, <argument><expr><name>ipsz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator>
      <operator>(</operator><name>proto</name> <operator>==</operator> <name>IPPROTO_UDP</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>read_write</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dumpfd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>udp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>udp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
      <operator>!</operator><call><name>read_write</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dumpfd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>packet</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to write packet dump"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_EXTRALOG</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%u dumping packet %u mask 0x%04x"</literal></expr></argument>)</argument_list></call></expr></argument>,  <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>log_display_id</name></name></expr></argument>, <argument><expr><operator>++</operator><name>packet_count</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"dumping packet %u mask 0x%04x"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>++</operator><name>packet_count</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
