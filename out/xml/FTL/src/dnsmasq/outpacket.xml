<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/dnsmasq/outpacket.c"><comment type="block">/* dnsmasq is Copyright (c) 2000-2022 Simon Kelley

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 dated June, 1991, or
   (at your option) version 3 dated 29 June, 2007.
 
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
     
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
*/</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnsmasq.h"</cpp:file></cpp:include>
 
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>outpacket_counter</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>end_opt6</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>container</name></decl></parameter>)</parameter_list>
<block>{<block_content>
   <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>daemon</name><operator>-&gt;</operator><name>outpacket</name><operator>.</operator><name>iov_base</name></name> <operator>+</operator> <name>container</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><type><name>u16</name></type> <name>len</name> <init>= <expr><name>outpacket_counter</name> <operator>-</operator> <name>container</name> <operator>-</operator> <literal type="number">4</literal></expr></init></decl> ;</decl_stmt>
   
   <expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>reset_counter</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Clear out buffer when starting from beginning */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>outpacket</name><operator>.</operator><name>iov_base</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>outpacket</name><operator>.</operator><name>iov_base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>outpacket</name><operator>.</operator><name>iov_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
 
  <expr_stmt><expr><call><name>save_counter</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>save_counter</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>newval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>outpacket_counter</name></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>newval</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>outpacket_counter</name> <operator>=</operator> <name>newval</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>expand</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>headroom</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>expand_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>outpacket</name></name></expr></argument>, <argument><expr><name>outpacket_counter</name> <operator>+</operator> <name>headroom</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>outpacket</name><operator>.</operator><name>iov_base</name></name> <operator>+</operator> <name>outpacket_counter</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>outpacket_counter</name> <operator>+=</operator> <name>headroom</name></expr>;</expr_stmt>
      <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
    
<function><type><name>int</name></type> <name>new_opt6</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>outpacket_counter</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>expand</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>put_opt6</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>expand</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name>data</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>   
  
  <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>
  
<function><type><name>void</name></type> <name>put_opt6_long</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>expand</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>  
    <expr_stmt><expr><call><name>PUTLONG</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>put_opt6_short</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>expand</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>   
</block_content>}</block></function>

<function><type><name>void</name></type> <name>put_opt6_char</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>expand</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>   
</block_content>}</block></function>

<function><type><name>void</name></type> <name>put_opt6_string</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>put_opt6</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
