<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/dnsmasq/arp.c"><comment type="block">/* dnsmasq is Copyright (c) 2000-2022 Simon Kelley

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 dated June, 1991, or
   (at your option) version 3 dated 29 June, 2007.
 
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
     
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnsmasq.h"</cpp:file></cpp:include>

<comment type="block">/* Time between forced re-loads from kernel. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERVAL</name></cpp:macro> <cpp:value>90</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARP_MARK</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARP_FOUND</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>  <comment type="block">/* Confirmed */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARP_NEW</name></cpp:macro>   <cpp:value>2</cpp:value></cpp:define>  <comment type="block">/* Newly created */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARP_EMPTY</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>  <comment type="block">/* No MAC addr */</comment>

<struct>struct <name>arp_record</name> <block>{
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>hwlen</name></decl>, <decl><type ref="prev"/><name>status</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>family</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hwaddr</name><index>[<expr><name>DHCP_CHADDR_MAX</name></expr>]</index></name></decl>;</decl_stmt> 
  <decl_stmt><decl><type><name><name>union</name> <name>all_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>arp_record</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>arp_record</name></name> <modifier>*</modifier></type><name>arps</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>old</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>freelist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>time_t</name></type> <name>last</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_mac</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>family</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>addrp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>mac</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maclen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>parmv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>arp_record</name></name> <modifier>*</modifier></type><name>arp</name></decl>;</decl_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>parmv</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>maclen</name> <operator>&gt;</operator> <name>DHCP_CHADDR_MAX</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <comment type="block">/* Look for existing entry */</comment>
  <for>for <control>(<init><expr><name>arp</name> <operator>=</operator> <name>arps</name></expr>;</init> <condition><expr><name>arp</name></expr>;</condition> <incr><expr><name>arp</name> <operator>=</operator> <name><name>arp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>family</name> <operator>!=</operator> <name><name>arp</name><operator>-&gt;</operator><name>family</name></name> <operator>||</operator> <name><name>arp</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>ARP_NEW</name></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_INET</name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name><name>arp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr4</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <operator>(</operator><operator>(</operator>struct <name>in_addr</name> <operator>*</operator><operator>)</operator><name>addrp</name><operator>)</operator><operator>-&gt;</operator><name>s_addr</name></expr>)</condition><block type="pseudo"><block_content>
	    <continue>continue;</continue></block_content></block></if></if_stmt>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IN6_ARE_ADDR_EQUAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>arp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr6</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>in6_addr</name> <operator>*</operator><operator>)</operator><name>addrp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <continue>continue;</continue></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>arp</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>ARP_EMPTY</name></expr>)</condition>
	<block>{<block_content>
	  <comment type="block">/* existing address, was negative. */</comment>
	  <expr_stmt><expr><name><name>arp</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ARP_NEW</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>arp</name><operator>-&gt;</operator><name>hwlen</name></name> <operator>=</operator> <name>maclen</name></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>arp</name><operator>-&gt;</operator><name>hwaddr</name></name></expr></argument>, <argument><expr><name>mac</name></expr></argument>, <argument><expr><name>maclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><name><name>arp</name><operator>-&gt;</operator><name>hwlen</name></name> <operator>==</operator> <name>maclen</name> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>arp</name><operator>-&gt;</operator><name>hwaddr</name></name></expr></argument>, <argument><expr><name>mac</name></expr></argument>, <argument><expr><name>maclen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<comment type="block">/* Existing entry matches - confirm. */</comment>
	<expr_stmt><expr><name><name>arp</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ARP_FOUND</name></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></else></if_stmt>
      
      <break>break;</break>
    </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>arp</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* New entry */</comment>
      <if_stmt><if>if <condition>(<expr><name>freelist</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>arp</name> <operator>=</operator> <name>freelist</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>freelist</name> <operator>=</operator> <name><name>freelist</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>arp</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>arp_record</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      
      <expr_stmt><expr><name><name>arp</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>arps</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>arps</name> <operator>=</operator> <name>arp</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>arp</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ARP_NEW</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>arp</name><operator>-&gt;</operator><name>hwlen</name></name> <operator>=</operator> <name>maclen</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>arp</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>family</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>arp</name><operator>-&gt;</operator><name>hwaddr</name></name></expr></argument>, <argument><expr><name>mac</name></expr></argument>, <argument><expr><name>maclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_INET</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>arp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr4</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator>struct <name>in_addr</name> <operator>*</operator><operator>)</operator><name>addrp</name><operator>)</operator><operator>-&gt;</operator><name>s_addr</name></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>arp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr6</name></name></expr></argument>, <argument><expr><name>addrp</name></expr></argument>, <argument><expr><name>IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* If in lazy mode, we cache absence of ARP entries. */</comment>
<function><type><name>int</name></type> <name>find_mac</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>mysockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>mac</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lazy</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>arp_record</name></name> <modifier>*</modifier></type><name>arp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>up</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>updated</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

 <label><name>again</name>:</label>
  
  <comment type="block">/* If the database is less then INTERVAL old, look in there */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>difftime</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>INTERVAL</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* addr == NULL -&gt; just make cache up-to-date */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>addr</name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

      <for>for <control>(<init><expr><name>arp</name> <operator>=</operator> <name>arps</name></expr>;</init> <condition><expr><name>arp</name></expr>;</condition> <incr><expr><name>arp</name> <operator>=</operator> <name><name>arp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>!=</operator> <name><name>arp</name><operator>-&gt;</operator><name>family</name></name></expr>)</condition><block type="pseudo"><block_content>
	    <continue>continue;</continue></block_content></block></if></if_stmt>
	    
	  <if_stmt><if>if <condition>(<expr><name><name>arp</name><operator>-&gt;</operator><name>family</name></name> <operator>==</operator> <name>AF_INET</name> <operator>&amp;&amp;</operator>
	      <name><name>arp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr4</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <name><name>addr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
	    <continue>continue;</continue></block_content></block></if></if_stmt>
	    
	  <if_stmt><if>if <condition>(<expr><name><name>arp</name><operator>-&gt;</operator><name>family</name></name> <operator>==</operator> <name>AF_INET6</name> <operator>&amp;&amp;</operator> 
	      <operator>!</operator><call><name>IN6_ARE_ADDR_EQUAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>arp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr6</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <continue>continue;</continue></block_content></block></if></if_stmt>
	  
	  <comment type="block">/* Only accept positive entries unless in lazy mode. */</comment>
	  <if_stmt><if>if <condition>(<expr><name><name>arp</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>ARP_EMPTY</name> <operator>||</operator> <name>lazy</name> <operator>||</operator> <name>updated</name></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><name>mac</name> <operator>&amp;&amp;</operator> <name><name>arp</name><operator>-&gt;</operator><name>hwlen</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mac</name></expr></argument>, <argument><expr><name><name>arp</name><operator>-&gt;</operator><name>hwaddr</name></name></expr></argument>, <argument><expr><name><name>arp</name><operator>-&gt;</operator><name>hwlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      <return>return <expr><name><name>arp</name><operator>-&gt;</operator><name>hwlen</name></name></expr>;</return>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

  <comment type="block">/* Not found, try the kernel */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>updated</name></expr>)</condition>
     <block>{<block_content>
       <expr_stmt><expr><name>updated</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
       <expr_stmt><expr><name>last</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>

       <comment type="block">/* Mark all non-negative entries */</comment>
       <for>for <control>(<init><expr><name>arp</name> <operator>=</operator> <name>arps</name></expr>;</init> <condition><expr><name>arp</name></expr>;</condition> <incr><expr><name>arp</name> <operator>=</operator> <name><name>arp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	 <if_stmt><if>if <condition>(<expr><name><name>arp</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>ARP_EMPTY</name></expr>)</condition><block type="pseudo"><block_content>
	   <expr_stmt><expr><name><name>arp</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ARP_MARK</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
       
       <expr_stmt><expr><call><name>iface_enumerate</name><argument_list>(<argument><expr><name>AF_UNSPEC</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>filter_mac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       
       <comment type="block">/* Remove all unconfirmed entries to old list. */</comment>
       <for>for <control>(<init><expr><name>arp</name> <operator>=</operator> <name>arps</name></expr><operator>,</operator> <expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name>arps</name></expr>;</init> <condition><expr><name>arp</name></expr>;</condition> <incr><expr><name>arp</name> <operator>=</operator> <name>tmp</name></expr></incr>)</control>
	 <block>{<block_content>
	   <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>arp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	   
	   <if_stmt><if>if <condition>(<expr><name><name>arp</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>ARP_MARK</name></expr>)</condition>
	     <block>{<block_content>
	       <expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name><name>arp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	       <expr_stmt><expr><name><name>arp</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>old</name></expr>;</expr_stmt>
	       <expr_stmt><expr><name>old</name> <operator>=</operator> <name>arp</name></expr>;</expr_stmt>
	     </block_content>}</block></if>
	   <else>else<block type="pseudo"><block_content>
	     <expr_stmt><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>arp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	 </block_content>}</block></for>

       <goto>goto <name>again</name>;</goto>
     </block_content>}</block></if></if_stmt>

  <comment type="block">/* record failure, so we don't consult the kernel each time
     we're asked for this address */</comment>
  <if_stmt><if>if <condition>(<expr><name>freelist</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>arp</name> <operator>=</operator> <name>freelist</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>freelist</name> <operator>=</operator> <name><name>freelist</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>arp</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>arp_record</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>arp</name></expr>)</condition>
    <block>{<block_content>      
      <expr_stmt><expr><name><name>arp</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>arps</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>arps</name> <operator>=</operator> <name>arp</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>arp</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ARP_EMPTY</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>arp</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>arp</name><operator>-&gt;</operator><name>hwlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>arp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr4</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>arp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr6</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><name>IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
	  
   <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>do_arp_script_run</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>arp_record</name></name> <modifier>*</modifier></type><name>arp</name></decl>;</decl_stmt>
  
  <comment type="block">/* Notify any which went, then move to free list */</comment>
  <if_stmt><if>if <condition>(<expr><name>old</name></expr>)</condition>
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SCRIPT</name></cpp:ifdef>
      <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_SCRIPT_ARP</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>queue_arp</name><argument_list>(<argument><expr><name>ACTION_ARP_DEL</name></expr></argument>, <argument><expr><name><name>old</name><operator>-&gt;</operator><name>hwaddr</name></name></expr></argument>, <argument><expr><name><name>old</name><operator>-&gt;</operator><name>hwlen</name></name></expr></argument>, <argument><expr><name><name>old</name><operator>-&gt;</operator><name>family</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>old</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <expr_stmt><expr><name>arp</name> <operator>=</operator> <name>old</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>old</name> <operator>=</operator> <name><name>arp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>arp</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>freelist</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>freelist</name> <operator>=</operator> <name>arp</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><expr><name>arp</name> <operator>=</operator> <name>arps</name></expr>;</init> <condition><expr><name>arp</name></expr>;</condition> <incr><expr><name>arp</name> <operator>=</operator> <name><name>arp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>arp</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>ARP_NEW</name></expr>)</condition>
      <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SCRIPT</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_SCRIPT_ARP</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>queue_arp</name><argument_list>(<argument><expr><name>ACTION_ARP</name></expr></argument>, <argument><expr><name><name>arp</name><operator>-&gt;</operator><name>hwaddr</name></name></expr></argument>, <argument><expr><name><name>arp</name><operator>-&gt;</operator><name>hwlen</name></name></expr></argument>, <argument><expr><name><name>arp</name><operator>-&gt;</operator><name>family</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arp</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>arp</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ARP_FOUND</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt></block_content></block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
