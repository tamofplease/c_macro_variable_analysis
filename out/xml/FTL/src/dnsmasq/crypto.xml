<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/dnsmasq/crypto.c"><comment type="block">/* dnsmasq is Copyright (c) 2000-2022 Simon Kelley

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 dated June, 1991, or
   (at your option) version 3 dated 29 June, 2007.
 
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
     
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnsmasq.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DNSSEC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CRYPTOHASH</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block">/* Minimal version of nettle */</comment>

<comment type="block">/* bignum.h includes version.h and works on
   earlier releases of nettle which don't have version.h */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nettle/bignum.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NETTLE_VERSION_MAJOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>NETTLE_VERSION_MAJOR</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>NETTLE_VERSION_MINOR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_VERSION</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((NETTLE_VERSION_MAJOR == (major) &amp;&amp; NETTLE_VERSION_MINOR &gt;= (minor)) || \
				   (NETTLE_VERSION_MAJOR &gt; (major)))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(HAVE_DNSSEC) || defined(HAVE_CRYPTOHASH) */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DNSSEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nettle/rsa.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nettle/ecdsa.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nettle/ecc-curve.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>MIN_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nettle/eddsa.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>MIN_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>&lt;nettle/gostdsa.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>MIN_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* Implement a "hash-function" to the nettle API, which simply returns
   the input data, concatenated into a single, statically maintained, buffer.

   Used for the EdDSA sigs, which operate on the whole message, rather 
   than a digest. */</comment>

<struct>struct <name>null_hash_digest</name>
<block>{
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buff</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>null_hash_ctx</name>
<block>{
  <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>null_hash_buff_sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>null_hash_buff</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFF_INCR</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>null_hash_init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><operator>(</operator><operator>(</operator>struct <name>null_hash_ctx</name> <operator>*</operator><operator>)</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>null_hash_update</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctxv</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>null_hash_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>ctxv</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>new_len</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name>length</name></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>new_len</name> <operator>&gt;</operator> <name>null_hash_buff_sz</name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>new</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><name>new_len</name> <operator>+</operator> <name>BUFF_INCR</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<return>return;</return></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>null_hash_buff</name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>len</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><name>null_hash_buff</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>null_hash_buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
      
      <expr_stmt><expr><name>null_hash_buff_sz</name> <operator>=</operator> <name>new_len</name> <operator>+</operator> <name>BUFF_INCR</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>null_hash_buff</name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>null_hash_buff</name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
</block_content>}</block></function>
 
<function><type><specifier>static</specifier> <name>void</name></type> <name>null_hash_digest</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>length</name></expr>;</expr_stmt>
  
  <expr_stmt><expr><operator>(</operator><operator>(</operator>struct <name>null_hash_digest</name> <operator>*</operator><operator>)</operator><name>dst</name><operator>)</operator><operator>-&gt;</operator><name>buff</name> <operator>=</operator> <name>null_hash_buff</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator>struct <name>null_hash_digest</name> <operator>*</operator><operator>)</operator><name>dst</name><operator>)</operator><operator>-&gt;</operator><name>len</name> <operator>=</operator> <operator>(</operator><operator>(</operator>struct <name>null_hash_ctx</name> <operator>*</operator><operator>)</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>nettle_hash</name></name></type> <name>null_hash</name> <init>= <expr><block>{
  <expr><literal type="string">"null_hash"</literal></expr>,
  <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>null_hash_ctx</name></expr></argument>)</argument_list></sizeof></expr>,
  <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>null_hash_digest</name></expr></argument>)</argument_list></sizeof></expr>,
  <expr><literal type="number">0</literal></expr>,
  <expr><operator>(</operator><name>nettle_hash_init_func</name> <operator>*</operator><operator>)</operator> <name>null_hash_init</name></expr>,
  <expr><operator>(</operator><name>nettle_hash_update_func</name> <operator>*</operator><operator>)</operator> <name>null_hash_update</name></expr>,
  <expr><operator>(</operator><name>nettle_hash_digest_func</name> <operator>*</operator><operator>)</operator> <name>null_hash_digest</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MIN_VERSION(3, 1) */</comment>

<comment type="block">/* expand ctx and digest memory allocations if necessary and init hash function */</comment>
<function><type><name>int</name></type> <name>hash_init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>nettle_hash</name></name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctxp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>digestp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>digest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>ctx_sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>digest_sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>ctx_sz</name> <operator>&lt;</operator> <name><name>hash</name><operator>-&gt;</operator><name>context_size</name></name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>new</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><name><name>hash</name><operator>-&gt;</operator><name>context_size</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>ctx</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>ctx</name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>ctx_sz</name> <operator>=</operator> <name><name>hash</name><operator>-&gt;</operator><name>context_size</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>digest_sz</name> <operator>&lt;</operator> <name><name>hash</name><operator>-&gt;</operator><name>digest_size</name></name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>new</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><name><name>hash</name><operator>-&gt;</operator><name>digest_size</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>digest</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>digest</name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>digest_sz</name> <operator>=</operator> <name><name>hash</name><operator>-&gt;</operator><name>digest_size</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>ctxp</name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>digestp</name> <operator>=</operator> <name>digest</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>hash</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dnsmasq_rsa_verify</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>blockdata</name></name> <modifier>*</modifier></type><name>key_data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>key_len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sig_len</name></decl></parameter>,
			      <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>digest_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>algo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>exp_len</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>rsa_public_key</name></name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>mpz_t</name></type> <name>sig_mpz</name></decl>;</decl_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>digest_len</name></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>key</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rsa_public_key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
      
      <expr_stmt><expr><call><name>nettle_rsa_public_key_init</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mpz_init</name><argument_list>(<argument><expr><name>sig_mpz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>key_len</name> <operator>&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>blockdata_retrieve</name><argument_list>(<argument><expr><name>key_data</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><name>key_len</name><operator>--</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>exp_len</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>exp_len</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>key_len</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>exp_len</name> <operator>&gt;=</operator> <name>key_len</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator>  <name>key_len</name> <operator>-</operator> <name>exp_len</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mpz_import</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>e</name></name></expr></argument>, <argument><expr><name>exp_len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mpz_import</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>exp_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>mpz_import</name><argument_list>(<argument><expr><name>sig_mpz</name></expr></argument>, <argument><expr><name>sig_len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <switch>switch <condition>(<expr><name>algo</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><literal type="number">5</literal></expr>:</case> <case>case <expr><literal type="number">7</literal></expr>:</case>
      <return>return <expr><call><name>nettle_rsa_sha1_verify_digest</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><name>sig_mpz</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><literal type="number">8</literal></expr>:</case>
      <return>return <expr><call><name>nettle_rsa_sha256_verify_digest</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><name>sig_mpz</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><literal type="number">10</literal></expr>:</case>
      <return>return <expr><call><name>nettle_rsa_sha512_verify_digest</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><name>sig_mpz</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></switch>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>  

<function><type><specifier>static</specifier> <name>int</name></type> <name>dnsmasq_ecdsa_verify</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>blockdata</name></name> <modifier>*</modifier></type><name>key_data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>key_len</name></decl></parameter>, 
				<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sig_len</name></decl></parameter>,
				<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>digest_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>algo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>t</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>ecc_point</name></name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>ecc_point</name></name> <modifier>*</modifier></type><name>key_256</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>key_384</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>mpz_t</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>dsa_signature</name></name> <modifier>*</modifier></type><name>sig_struct</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>MIN_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nettle_get_secp_256r1</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(&amp;nettle_secp_256r1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nettle_get_secp_384r1</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(&amp;nettle_secp_384r1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>sig_struct</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sig_struct</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dsa_signature</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
      
      <expr_stmt><expr><call><name>nettle_dsa_signature_init</name><argument_list>(<argument><expr><name>sig_struct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mpz_init</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mpz_init</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  
  <switch>switch <condition>(<expr><name>algo</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><literal type="number">13</literal></expr>:</case>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>key_256</name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>key_256</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ecc_point</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	  
	  <expr_stmt><expr><call><name>nettle_ecc_point_init</name><argument_list>(<argument><expr><name>key_256</name></expr></argument>, <argument><expr><call><name>nettle_get_secp_256r1</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
      
      <expr_stmt><expr><name>key</name> <operator>=</operator> <name>key_256</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
      <break>break;</break>
      
    <case>case <expr><literal type="number">14</literal></expr>:</case>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>key_384</name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>key_384</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ecc_point</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	  
	  <expr_stmt><expr><call><name>nettle_ecc_point_init</name><argument_list>(<argument><expr><name>key_384</name></expr></argument>, <argument><expr><call><name>nettle_get_secp_384r1</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
      
      <expr_stmt><expr><name>key</name> <operator>=</operator> <name>key_384</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">48</literal></expr>;</expr_stmt>
      <break>break;</break>
        
    <default>default:</default>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></switch>
  
  <if_stmt><if>if <condition>(<expr><name>sig_len</name> <operator>!=</operator> <literal type="number">2</literal><operator>*</operator><name>t</name> <operator>||</operator> <name>key_len</name> <operator>!=</operator> <literal type="number">2</literal><operator>*</operator><name>t</name> <operator>||</operator>
      <operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>blockdata_retrieve</name><argument_list>(<argument><expr><name>key_data</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><call><name>mpz_import</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>t</name></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mpz_import</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>t</name></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecc_point_set</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><call><name>mpz_import</name><argument_list>(<argument><expr><name><name>sig_struct</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mpz_import</name><argument_list>(<argument><expr><name><name>sig_struct</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sig</name> <operator>+</operator> <name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <return>return <expr><call><name>nettle_ecdsa_verify</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>digest_len</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><name>sig_struct</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>MIN_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dnsmasq_gostdsa_verify</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>blockdata</name></name> <modifier>*</modifier></type><name>key_data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>key_len</name></decl></parameter>, 
				  <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sig_len</name></decl></parameter>,
				  <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>digest_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>algo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>ecc_point</name></name> <modifier>*</modifier></type><name>gost_key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>mpz_t</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>dsa_signature</name></name> <modifier>*</modifier></type><name>sig_struct</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>algo</name> <operator>!=</operator> <literal type="number">12</literal> <operator>||</operator>
      <name>sig_len</name> <operator>!=</operator> <literal type="number">64</literal> <operator>||</operator> <name>key_len</name> <operator>!=</operator> <literal type="number">64</literal> <operator>||</operator>
      <operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>blockdata_retrieve</name><argument_list>(<argument><expr><name>key_data</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>sig_struct</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sig_struct</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dsa_signature</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
	  <operator>!</operator><operator>(</operator><name>gost_key</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ecc_point</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
      
      <expr_stmt><expr><call><name>nettle_dsa_signature_init</name><argument_list>(<argument><expr><name>sig_struct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>nettle_ecc_point_init</name><argument_list>(<argument><expr><name>gost_key</name></expr></argument>, <argument><expr><call><name>nettle_get_gost_gc256b</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mpz_init</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mpz_init</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
  <expr_stmt><expr><call><name>mpz_import</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mpz_import</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecc_point_set</name><argument_list>(<argument><expr><name>gost_key</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 
  
  <expr_stmt><expr><call><name>mpz_import</name><argument_list>(<argument><expr><name><name>sig_struct</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mpz_import</name><argument_list>(<argument><expr><name><name>sig_struct</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sig</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <return>return <expr><call><name>nettle_gostdsa_verify</name><argument_list>(<argument><expr><name>gost_key</name></expr></argument>, <argument><expr><name>digest_len</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><name>sig_struct</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>MIN_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dnsmasq_eddsa_verify</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>blockdata</name></name> <modifier>*</modifier></type><name>key_data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>key_len</name></decl></parameter>, 
				<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sig_len</name></decl></parameter>,
				<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>digest_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>algo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
   
  <if_stmt><if>if <condition>(<expr><name>digest_len</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>null_hash_digest</name></expr></argument>)</argument_list></sizeof> <operator>||</operator>
      <operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>blockdata_retrieve</name><argument_list>(<argument><expr><name>key_data</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <comment type="block">/* The "digest" returned by the null_hash function is simply a struct null_hash_digest
     which has a pointer to the actual data and a length, because the buffer
     may need to be extended during "hashing". */</comment>
  
  <switch>switch <condition>(<expr><name>algo</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><literal type="number">15</literal></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>key_len</name> <operator>!=</operator> <name>ED25519_KEY_SIZE</name> <operator>||</operator>
	  <name>sig_len</name> <operator>!=</operator> <name>ED25519_SIGNATURE_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

      <return>return <expr><call><name>ed25519_sha512_verify</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
				   <argument><expr><operator>(</operator><operator>(</operator>struct <name>null_hash_digest</name> <operator>*</operator><operator>)</operator><name>digest</name><operator>)</operator><operator>-&gt;</operator><name>len</name></expr></argument>,
				   <argument><expr><operator>(</operator><operator>(</operator>struct <name>null_hash_digest</name> <operator>*</operator><operator>)</operator><name>digest</name><operator>)</operator><operator>-&gt;</operator><name>buff</name></expr></argument>,
				   <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</return>
      
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>MIN_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><literal type="number">16</literal></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>key_len</name> <operator>!=</operator> <name>ED448_KEY_SIZE</name> <operator>||</operator>
	  <name>sig_len</name> <operator>!=</operator> <name>ED448_SIGNATURE_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

      <return>return <expr><call><name>ed448_shake256_verify</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
				   <argument><expr><operator>(</operator><operator>(</operator>struct <name>null_hash_digest</name> <operator>*</operator><operator>)</operator><name>digest</name><operator>)</operator><operator>-&gt;</operator><name>len</name></expr></argument>,
				   <argument><expr><operator>(</operator><operator>(</operator>struct <name>null_hash_digest</name> <operator>*</operator><operator>)</operator><name>digest</name><operator>)</operator><operator>-&gt;</operator><name>buff</name></expr></argument>,
				   <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    </block_content>}</block></switch>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><specifier>static</specifier> <macro><name>int</name> <argument_list>(<argument>*verify_func(int algo)</argument>)</argument_list></macro><operator>(</operator>struct <name>blockdata</name> <operator>*</operator><name>key_data</name><operator>,</operator> <name>unsigned</name> <name>int</name> <name>key_len</name><operator>,</operator> <name>unsigned</name> <name>char</name> <operator>*</operator><name>sig</name><operator>,</operator> <name>size_t</name> <name>sig_len</name><operator>,</operator>
			     <name>unsigned</name> <name>char</name> <operator>*</operator><name>digest</name><operator>,</operator> <name>size_t</name> <name>digest_len</name><operator>,</operator> <name>int</name> <name>algo</name><operator>)</operator>
<block>{
    
  <comment type="block">/* Ensure at runtime that we have support for this digest */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hash_find</name><argument_list>(<argument><expr><call><name>algo_digest_name</name><argument_list>(<argument><expr><name>algo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
  
  <comment type="block">/* This switch defines which sig algorithms we support, can't introspect Nettle for that. */</comment>
  <switch>switch <condition>(<expr><name>algo</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><literal type="number">5</literal></expr>:</case> <case>case <expr><literal type="number">7</literal></expr>:</case> <case>case <expr><literal type="number">8</literal></expr>:</case> <case>case <expr><literal type="number">10</literal></expr>:</case>
      <return>return <expr><name>dnsmasq_rsa_verify</name></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>MIN_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><literal type="number">12</literal></expr>:</case>
      <return>return <expr><name>dnsmasq_gostdsa_verify</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      
    <case>case <expr><literal type="number">13</literal></expr>:</case> <case>case <expr><literal type="number">14</literal></expr>:</case>
      <return>return <expr><name>dnsmasq_ecdsa_verify</name></expr>;</return>
      
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>MIN_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><literal type="number">15</literal></expr>:</case>
      <return>return <expr><name>dnsmasq_eddsa_verify</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>MIN_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><literal type="number">16</literal></expr>:</case>
      <return>return <expr><name>dnsmasq_eddsa_verify</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></switch>
  
  <return>return <expr><name>NULL</name></expr>;</return>
}

int <macro><name>verify</name><argument_list>(<argument>struct blockdata *key_data</argument>, <argument>unsigned int key_len</argument>, <argument>unsigned char *sig</argument>, <argument>size_t sig_len</argument>,
	   <argument>unsigned char *digest</argument>, <argument>size_t digest_len</argument>, <argument>int algo</argument>)</argument_list></macro>
<block>{<block_content>

  <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>blockdata</name></name> <modifier>*</modifier></type><name>key_data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>key_len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sig_len</name></decl></parameter>,
	      <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>digest_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>algo</name></decl></parameter>)</parameter_list>;</function_decl>
  
  <expr_stmt><expr><name>func</name> <operator>=</operator> <call><name>verify_func</name><argument_list>(<argument><expr><name>algo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>func</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><name>key_data</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><name>sig_len</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><name>digest_len</name></expr></argument>, <argument><expr><name>algo</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<comment type="block">/* Note the ds_digest_name(), algo_digest_name() and nsec3_digest_name()
   define which algo numbers we support. If algo_digest_name() returns
   non-NULL for an algorithm number, we assume that algorithm is 
   supported by verify(). */</comment>

<comment type="block">/* http://www.iana.org/assignments/ds-rr-types/ds-rr-types.xhtml */</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name>ds_digest_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>digest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <switch>switch <condition>(<expr><name>digest</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><literal type="number">1</literal></expr>:</case> <return>return <expr><literal type="string">"sha1"</literal></expr>;</return>
    <case>case <expr><literal type="number">2</literal></expr>:</case> <return>return <expr><literal type="string">"sha256"</literal></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>MIN_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><literal type="number">3</literal></expr>:</case> <return>return <expr><literal type="string">"gosthash94cp"</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <case>case <expr><literal type="number">4</literal></expr>:</case> <return>return <expr><literal type="string">"sha384"</literal></expr>;</return>
    <default>default:</default> <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>
 
<comment type="block">/* http://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xhtml */</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name>algo_digest_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>algo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <switch>switch <condition>(<expr><name>algo</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><literal type="number">1</literal></expr>:</case> <return>return <expr><name>NULL</name></expr>;</return>          <comment type="block">/* RSA/MD5 - Must Not Implement.  RFC 6944 para 2.3. */</comment>
    <case>case <expr><literal type="number">2</literal></expr>:</case> <return>return <expr><name>NULL</name></expr>;</return>          <comment type="block">/* Diffie-Hellman */</comment>
    <case>case <expr><literal type="number">3</literal></expr>:</case> <return>return <expr><name>NULL</name></expr>;</return> <empty_stmt>;</empty_stmt>        <comment type="block">/* DSA/SHA1 - Must Not Implement. RFC 8624 section 3.1 */</comment> 
    <case>case <expr><literal type="number">5</literal></expr>:</case> <return>return <expr><literal type="string">"sha1"</literal></expr>;</return>        <comment type="block">/* RSA/SHA1 */</comment>
    <case>case <expr><literal type="number">6</literal></expr>:</case> <return>return <expr><name>NULL</name></expr>;</return>          <comment type="block">/* DSA-NSEC3-SHA1 - Must Not Implement. RFC 8624 section 3.1 */</comment>
    <case>case <expr><literal type="number">7</literal></expr>:</case> <return>return <expr><literal type="string">"sha1"</literal></expr>;</return>        <comment type="block">/* RSASHA1-NSEC3-SHA1 */</comment>
    <case>case <expr><literal type="number">8</literal></expr>:</case> <return>return <expr><literal type="string">"sha256"</literal></expr>;</return>      <comment type="block">/* RSA/SHA-256 */</comment>
    <case>case <expr><literal type="number">10</literal></expr>:</case> <return>return <expr><literal type="string">"sha512"</literal></expr>;</return>     <comment type="block">/* RSA/SHA-512 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>MIN_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><literal type="number">12</literal></expr>:</case> <return>return <expr><literal type="string">"gosthash94cp"</literal></expr>;</return> <comment type="block">/* ECC-GOST */</comment> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <case>case <expr><literal type="number">13</literal></expr>:</case> <return>return <expr><literal type="string">"sha256"</literal></expr>;</return>     <comment type="block">/* ECDSAP256SHA256 */</comment>
    <case>case <expr><literal type="number">14</literal></expr>:</case> <return>return <expr><literal type="string">"sha384"</literal></expr>;</return>     <comment type="block">/* ECDSAP384SHA384 */</comment> 	
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>MIN_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><literal type="number">15</literal></expr>:</case> <return>return <expr><literal type="string">"null_hash"</literal></expr>;</return>  <comment type="block">/* ED25519 */</comment>
<cpp:if>#  <cpp:directive>if</cpp:directive> <expr><call><name>MIN_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><literal type="number">16</literal></expr>:</case> <return>return <expr><literal type="string">"null_hash"</literal></expr>;</return>  <comment type="block">/* ED448 */</comment>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <default>default:</default> <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>
  
<comment type="block">/* http://www.iana.org/assignments/dnssec-nsec3-parameters/dnssec-nsec3-parameters.xhtml */</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name>nsec3_digest_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>digest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <switch>switch <condition>(<expr><name>digest</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><literal type="number">1</literal></expr>:</case> <return>return <expr><literal type="string">"sha1"</literal></expr>;</return>
    <default>default:</default> <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(HAVE_DNSSEC) */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DNSSEC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CRYPTOHASH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* Find pointer to correct hash function in nettle library */</comment>
<function><type><specifier>const</specifier> <name><name>struct</name> <name>nettle_hash</name></name> <modifier>*</modifier></type><name>hash_find</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>MIN_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DNSSEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* We provide a "null" hash which returns the input data as digest. */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>null_hash</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>&amp;</operator><name>null_hash</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
  <comment type="block">/* libnettle &gt;= 3.4 provides nettle_lookup_hash() which avoids nasty ABI
     incompatibilities if sizeof(nettle_hashes) changes between library
     versions. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>MIN_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></cpp:if>
  <return>return <expr><call><name>nettle_lookup_hash</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>nettle_hashes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>nettle_hashes</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name><name>nettle_hashes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
  </block_content>}</block>
  
  <return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(HAVE_DNSSEC) || defined(HAVE_CRYPTOHASH) */</comment>
</unit>
