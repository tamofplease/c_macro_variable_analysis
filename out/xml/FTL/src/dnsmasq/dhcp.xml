<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/dnsmasq/dhcp.c"><comment type="block">/* dnsmasq is Copyright (c) 2000-2022 Simon Kelley

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 dated June, 1991, or
   (at your option) version 3 dated 29 June, 2007.
 
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
     
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnsmasq.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP</name></cpp:ifdef>

<struct>struct <name>iface_param</name> <block>{
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>current</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ind</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>match_param</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>ind</name></decl>, <decl><type ref="prev"/><name>matched</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>netmask</name></decl>, <decl><type ref="prev"/><name>broadcast</name></decl>, <decl><type ref="prev"/><name>addr</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>complete_context</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>local</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>if_index</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>,
			    <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>netmask</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>broadcast</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vparam</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>check_listen_addrs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>local</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>if_index</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>,
			      <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>netmask</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>broadcast</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vparam</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>relay_upstream4</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iface_index</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_packet</name></name> <modifier>*</modifier></type><name>mess</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>dhcp_relay</name></name> <modifier>*</modifier></type><name>relay_reply4</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_packet</name></name> <modifier>*</modifier></type><name>mess</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arrival_interface</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>make_fd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>socket</name><argument_list>(<argument><expr><name>PF_INET</name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><name>IPPROTO_UDP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>saddr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>oneopt</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IP_MTU_DISCOVER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>IP_PMTUDISC_DONT</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>int</name></type> <name>mtu</name> <init>= <expr><name>IP_PMTUDISC_DONT</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IP_TOS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>IPTOS_CLASS_CS6</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>int</name></type> <name>tos</name> <init>= <expr><name>IPTOS_CLASS_CS6</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>die</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot create DHCP socket: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_BADNET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fix_fd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>||</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IP_MTU_DISCOVER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>IP_PMTUDISC_DONT</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_IP</name></expr></argument>, <argument><expr><name>IP_MTU_DISCOVER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mtu</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mtu</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IP_TOS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>IPTOS_CLASS_CS6</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_IP</name></expr></argument>, <argument><expr><name>IP_TOS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tos</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tos</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_IP</name></expr></argument>, <argument><expr><name>IP_PKTINFO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oneopt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>oneopt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_IP</name></expr></argument>, <argument><expr><name>IP_RECVIF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oneopt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>oneopt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_BROADCAST</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oneopt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>oneopt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>  
    <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to set options on DHCP socket: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_BADNET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <comment type="block">/* When bind-interfaces is set, there might be more than one dnsmasq
     instance binding port 67. That's OK if they serve different networks.
     Need to set REUSEADDR|REUSEPORT to make this possible.
     Handle the case that REUSEPORT is defined, but the kernel doesn't 
     support it. This handles the introduction of REUSEPORT on Linux. */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NOWILD</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CLEVERBIND</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SO_REUSEPORT</name></cpp:ifdef>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_REUSEPORT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oneopt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>oneopt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> 
	  <name>errno</name> <operator>==</operator> <name>ENOPROTOOPT</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      
      <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_REUSEADDR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oneopt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>oneopt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to set SO_REUSE{ADDR|PORT} on DHCP socket: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_BADNET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>saddr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>saddr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>saddr</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>saddr</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>saddr</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name>INADDR_ANY</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SOCKADDR_SA_LEN</name></cpp:ifdef>
  <expr_stmt><expr><name><name>saddr</name><operator>.</operator><name>sin_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if <condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>saddr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to bind DHCP server socket: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_BADNET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dhcp_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BSD_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>int</name></type> <name>oneopt</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcpfd</name></name> <operator>=</operator> <call><name>make_fd</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_server_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>enable_pxe</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>pxefd</name></name> <operator>=</operator> <call><name>make_fd</name><argument_list>(<argument><expr><name>PXE_PORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>pxefd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BSD_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* When we're not using capabilities, we need to do this here before
     we drop root. Also, set buffer size small, to avoid wasting
     kernel buffers */</comment>
  
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NO_PING</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_icmp_fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_icmp_fd</name></name> <operator>=</operator> <call><name>make_icmp_sock</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
	   <call><name>setsockopt</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_icmp_fd</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_RCVBUF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oneopt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>oneopt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot create ICMP raw socket: %s."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_BADNET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <comment type="block">/* Make BPF raw send socket */</comment>
  <expr_stmt><expr><call><name>init_bpf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dhcp_packet</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pxe_fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><ternary><condition><expr><name>pxe_fd</name></expr> ?</condition><then> <expr><name><name>daemon</name><operator>-&gt;</operator><name>pxefd</name></name></expr> </then><else>: <expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcpfd</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_packet</name></name> <modifier>*</modifier></type><name>mess</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_relay</name></name> <modifier>*</modifier></type><name>relay</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>is_relay_reply</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iname</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>ifreq</name></name></type> <name>ifr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>msghdr</name></name></type> <name>msg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>dest</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>cmsghdr</name></name> <modifier>*</modifier></type><name>cmptr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name>iov</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>sz</name></decl>;</decl_stmt> 
  <decl_stmt><decl><type><name>int</name></type> <name>iface_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>unicast_dest</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>is_inform</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>loopback</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rcvd_iface_index</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>iface_addr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iface_param</name></name></type> <name>parm</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>time_t</name></type> <name>recvtime</name> <init>= <expr><name>now</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LINUX_NETWORK</name></cpp:ifdef>
  <decl_stmt><decl><type><name><name>struct</name> <name>arpreq</name></name></type> <name>arp_req</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
  <union>union <block>{
    <decl_stmt><decl><type><name><name>struct</name> <name>cmsghdr</name></name></type> <name>align</name></decl>;</decl_stmt> <comment type="block">/* this ensures alignment */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>char</name></type> <name><name>control</name><index>[<expr><call><name>CMSG_SPACE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_pktinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SOLARIS_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <expr_stmt><expr><name>char</name> <name><name>control</name><index>[<expr><call><name>CMSG_SPACE</name><argument_list>(<argument><expr/></argument></argument_list></call></expr></index></name>sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr></expr_stmt>)</block>];</union>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BSD_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:elif> 
    <decl_stmt><decl><type><name>char</name></type> <name><name>control</name><index>[<expr><call><name>CMSG_SPACE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_dl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></function> <expr_stmt><expr><name>control_u</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_bridge</name></name> <modifier>*</modifier></type><name>bridge</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>alias</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_controllen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>control_u</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_control</name></name> <operator>=</operator> <name><name>control_u</name><operator>.</operator><name>control</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_name</name></name> <operator>=</operator> <operator>&amp;</operator><name>dest</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_namelen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_iov</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_packet</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_iovlen</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sz</name> <operator>=</operator> <call><name>recv_dhcp_packet</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> 
      <operator>(</operator><name>sz</name> <operator>&lt;</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>mess</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>options</name></name></expr></argument>)</argument_list></sizeof><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> 
    <return>return;</return></block_content></block></if></if_stmt>
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DUMPFILE</name></cpp:ifdef>
  <expr_stmt><expr><call><name>dump_packet_udp</name><argument_list>(<argument><expr><name>DUMP_DHCP</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_packet</name><operator>.</operator><name>iov_base</name></name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><operator>(</operator>union <name>mysockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>HAVE_LINUX_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SIOCGSTAMP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>recvtime</name> <operator>=</operator> <name><name>tv</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>.</operator><name>msg_controllen</name></name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>cmsghdr</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>cmptr</name> <operator>=</operator> <call><name>CMSG_FIRSTHDR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>cmptr</name></expr>;</condition> <incr><expr><name>cmptr</name> <operator>=</operator> <call><name>CMSG_NXTHDR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>cmptr</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_level</name></name> <operator>==</operator> <name>IPPROTO_IP</name> <operator>&amp;&amp;</operator> <name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_type</name></name> <operator>==</operator> <name>IP_PKTINFO</name></expr>)</condition>
	<block>{<block_content>
	  <union>union <block>{
	    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name><name>struct</name> <name>in_pktinfo</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	  }</block> <decl><name>p</name></decl>;</union>
	  <expr_stmt><expr><name><name>p</name><operator>.</operator><name>c</name></name> <operator>=</operator> <call><name>CMSG_DATA</name><argument_list>(<argument><expr><name>cmptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>iface_index</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>p</name><operator>-&gt;</operator><name>ipi_ifindex</name></name></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>.</operator><name>p</name><operator>-&gt;</operator><name>ipi_addr</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <name>INADDR_BROADCAST</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>unicast_dest</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BSD_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:elif> 
  <if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>.</operator><name>msg_controllen</name></name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>cmsghdr</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>cmptr</name> <operator>=</operator> <call><name>CMSG_FIRSTHDR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>cmptr</name></expr>;</condition> <incr><expr><name>cmptr</name> <operator>=</operator> <call><name>CMSG_NXTHDR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>cmptr</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_level</name></name> <operator>==</operator> <name>IPPROTO_IP</name> <operator>&amp;&amp;</operator> <name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_type</name></name> <operator>==</operator> <name>IP_RECVIF</name></expr>)</condition>
        <block>{<block_content>
	  <union>union <block>{
            <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_dl</name></name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
          }</block> <decl><name>p</name></decl>;</union>
	  <expr_stmt><expr><name><name>p</name><operator>.</operator><name>c</name></name> <operator>=</operator> <call><name>CMSG_DATA</name><argument_list>(<argument><expr><name>cmptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>iface_index</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>s</name><operator>-&gt;</operator><name>sdl_index</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
  
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SOLARIS_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:elif> 
  <if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>.</operator><name>msg_controllen</name></name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>cmsghdr</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>cmptr</name> <operator>=</operator> <call><name>CMSG_FIRSTHDR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>cmptr</name></expr>;</condition> <incr><expr><name>cmptr</name> <operator>=</operator> <call><name>CMSG_NXTHDR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>cmptr</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_level</name></name> <operator>==</operator> <name>IPPROTO_IP</name> <operator>&amp;&amp;</operator> <name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_type</name></name> <operator>==</operator> <name>IP_RECVIF</name></expr>)</condition>
	<block>{<block_content>
	  <union>union <block>{
	    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>i</name></decl>;</decl_stmt>
	  }</block> <decl><name>p</name></decl>;</union>
	  <expr_stmt><expr><name><name>p</name><operator>.</operator><name>c</name></name> <operator>=</operator> <call><name>CMSG_DATA</name><argument_list>(<argument><expr><name>cmptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>iface_index</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>p</name><operator>.</operator><name>i</name></name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>indextoname</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcpfd</name></name></expr></argument>, <argument><expr><name>iface_index</name></expr></argument>, <argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
      <call><name>ioctl</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcpfd</name></name></expr></argument>, <argument><expr><name>SIOCGIFFLAGS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><name>mess</name> <operator>=</operator> <operator>(</operator>struct <name>dhcp_packet</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_packet</name><operator>.</operator><name>iov_base</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>loopback</name> <operator>=</operator> <operator>!</operator><name><name>mess</name><operator>-&gt;</operator><name>giaddr</name><operator>.</operator><name>s_addr</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ifr</name><operator>.</operator><name>ifr_flags</name></name> <operator>&amp;</operator> <name>IFF_LOOPBACK</name><operator>)</operator></expr>;</expr_stmt>
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LINUX_NETWORK</name></cpp:ifdef>
  <comment type="block">/* ARP fiddling uses original interface even if we pretend to use a different one. */</comment>
  <expr_stmt><expr><call><name>safe_strncpy</name><argument_list>(<argument><expr><name><name>arp_req</name><operator>.</operator><name>arp_dev</name></name></expr></argument>, <argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>arp_req</name><operator>.</operator><name>arp_dev</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

  <comment type="block">/* If the interface on which the DHCP request was received is an
     alias of some other interface (as specified by the
     --bridge-interface option), change ifr.ifr_name so that we look
     for DHCP contexts associated with the aliased interface instead
     of with the aliasing one. */</comment>
  <expr_stmt><expr><name>rcvd_iface_index</name> <operator>=</operator> <name>iface_index</name></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>bridge</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>bridges</name></name></expr>;</init> <condition><expr><name>bridge</name></expr>;</condition> <incr><expr><name>bridge</name> <operator>=</operator> <name><name>bridge</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <for>for <control>(<init><expr><name>alias</name> <operator>=</operator> <name><name>bridge</name><operator>-&gt;</operator><name>alias</name></name></expr>;</init> <condition><expr><name>alias</name></expr>;</condition> <incr><expr><name>alias</name> <operator>=</operator> <name><name>alias</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><call><name>wildcard_matchn</name><argument_list>(<argument><expr><name><name>alias</name><operator>-&gt;</operator><name>iface</name></name></expr></argument>, <argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>, <argument><expr><name>IF_NAMESIZE</name></expr></argument>)</argument_list></call></expr>)</condition>
	  <block>{<block_content>
	    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>iface_index</name> <operator>=</operator> <call><name>if_nametoindex</name><argument_list>(<argument><expr><name><name>bridge</name><operator>-&gt;</operator><name>iface</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_WARNING</name></expr></argument>,
			  <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unknown interface %s in bridge-interface"</literal></expr></argument>)</argument_list></call></expr></argument>,
			  <argument><expr><name><name>bridge</name><operator>-&gt;</operator><name>iface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	      </block_content>}</block></if>
	    <else>else 
	      <block>{<block_content>
		<expr_stmt><expr><call><name>safe_strncpy</name><argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>,  <argument><expr><name><name>bridge</name><operator>-&gt;</operator><name>iface</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	      </block_content>}</block></else></if_stmt>
	  </block_content>}</block></if></if_stmt></block_content></block></for>
      
      <if_stmt><if>if <condition>(<expr><name>alias</name></expr>)</condition><block type="pseudo"><block_content>
	<break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></for>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MSG_BCAST</name></cpp:ifdef>
  <comment type="block">/* OpenBSD tells us when a packet was broadcast */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>msg</name><operator>.</operator><name>msg_flags</name></name> <operator>&amp;</operator> <name>MSG_BCAST</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>unicast_dest</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>relay</name> <operator>=</operator> <call><name>relay_reply4</name><argument_list>(<argument><expr><operator>(</operator>struct <name>dhcp_packet</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_packet</name><operator>.</operator><name>iov_base</name></name></expr></argument>, <argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Reply from server, using us as relay. */</comment>
      <expr_stmt><expr><name>rcvd_iface_index</name> <operator>=</operator> <name><name>relay</name><operator>-&gt;</operator><name>iface_index</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>indextoname</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcpfd</name></name></expr></argument>, <argument><expr><name>rcvd_iface_index</name></expr></argument>, <argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>is_relay_reply</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
      <expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_len</name></name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LINUX_NETWORK</name></cpp:ifdef>
      <expr_stmt><expr><call><name>safe_strncpy</name><argument_list>(<argument><expr><name><name>arp_req</name><operator>.</operator><name>arp_dev</name></name></expr></argument>, <argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>arp_req</name><operator>.</operator><name>arp_dev</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
    </block_content>}</block></if>
  <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>ifr</name><operator>.</operator><name>ifr_addr</name><operator>.</operator><name>sa_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcpfd</name></name></expr></argument>, <argument><expr><name>SIOCGIFADDR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>iface_addr</name> <operator>=</operator> <operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>ifr</name><operator>.</operator><name>ifr_addr</name></name><operator>)</operator><operator>-&gt;</operator><name>sin_addr</name></expr>;</expr_stmt></block_content></block></if>
      <else>else
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><call><name>iface_check</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"DHCP packet received on %s which has no address"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  <return>return;</return>
	</block_content>}</block></else></if_stmt>
      
      <for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_except</name></name></expr>;</init> <condition><expr><name>tmp</name></expr>;</condition> <incr><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <call><name>wildcard_match</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <return>return;</return></block_content></block></if></if_stmt></block_content></block></for>
      
      <comment type="block">/* unlinked contexts/relays are marked by context-&gt;current == context */</comment>
      <for>for <control>(<init><expr><name>context</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp</name></name></expr>;</init> <condition><expr><name>context</name></expr>;</condition> <incr><expr><name>context</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt></block_content></block></for>
      
      <expr_stmt><expr><name><name>parm</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>parm</name><operator>.</operator><name>ind</name></name> <operator>=</operator> <name>iface_index</name></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>iface_check</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>(</operator>union <name>all_addr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>iface_addr</name></expr></argument>, <argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <comment type="block">/* If we failed to match the primary address of the interface, see if we've got a --listen-address
	     for a secondary */</comment>
	  <decl_stmt><decl><type><name><name>struct</name> <name>match_param</name></name></type> <name>match</name></decl>;</decl_stmt>
	  
	  <expr_stmt><expr><name><name>match</name><operator>.</operator><name>matched</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>match</name><operator>.</operator><name>ind</name></name> <operator>=</operator> <name>iface_index</name></expr>;</expr_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>daemon</name><operator>-&gt;</operator><name>if_addrs</name></name> <operator>||</operator>
	      <operator>!</operator><call><name>iface_enumerate</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>match</name></expr></argument>, <argument><expr><name>check_listen_addrs</name></expr></argument>)</argument_list></call> <operator>||</operator>
	      <operator>!</operator><name><name>match</name><operator>.</operator><name>matched</name></name></expr>)</condition><block type="pseudo"><block_content>
	    <return>return;</return></block_content></block></if></if_stmt>
	  
	  <expr_stmt><expr><name>iface_addr</name> <operator>=</operator> <name><name>match</name><operator>.</operator><name>addr</name></name></expr>;</expr_stmt>
	  <comment type="block">/* make sure secondary address gets priority in case
	     there is more than one address on the interface in the same subnet */</comment>
	  <expr_stmt><expr><call><name>complete_context</name><argument_list>(<argument><expr><name><name>match</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name>iface_index</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>match</name><operator>.</operator><name>netmask</name></name></expr></argument>, <argument><expr><name><name>match</name><operator>.</operator><name>broadcast</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>    
            
      <if_stmt><if>if <condition>(<expr><call><name>relay_upstream4</name><argument_list>(<argument><expr><name>iface_index</name></expr></argument>, <argument><expr><name>mess</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>sz</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return;</return></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>iface_enumerate</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parm</name></expr></argument>, <argument><expr><name>complete_context</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return;</return></block_content></block></if></if_stmt>

      <comment type="block">/* Check for a relay again after iface_enumerate/complete_context has had
	 chance to fill in relay-&gt;iface_index fields. This handles first time through
	 and any changes in interface config. */</comment>
       <if_stmt><if>if <condition>(<expr><call><name>relay_upstream4</name><argument_list>(<argument><expr><name>iface_index</name></expr></argument>, <argument><expr><name>mess</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>sz</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return;</return></block_content></block></if></if_stmt>
       
      <comment type="block">/* May have configured relay, but not DHCP server */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp</name></name></expr>)</condition><block type="pseudo"><block_content>
	<return>return;</return></block_content></block></if></if_stmt>

      <expr_stmt><expr><call><name>lease_prune</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* lose any expired leases */</comment>
      <expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_len</name></name> <operator>=</operator> <call><name>dhcp_reply</name><argument_list>(<argument><expr><name><name>parm</name><operator>.</operator><name>current</name></name></expr></argument>, <argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>, <argument><expr><name>iface_index</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>sz</name></expr></argument>, 
			       <argument><expr><name>now</name></expr></argument>, <argument><expr><name>unicast_dest</name></expr></argument>, <argument><expr><name>loopback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_inform</name></expr></argument>, <argument><expr><name>pxe_fd</name></expr></argument>, <argument><expr><name>iface_addr</name></expr></argument>, <argument><expr><name>recvtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>lease_update_file</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>lease_update_dns</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>iov</name><operator>.</operator><name>iov_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<return>return;</return></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_name</name></name> <operator>=</operator> <operator>&amp;</operator><name>dest</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_namelen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_control</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_controllen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_iov</name></name> <operator>=</operator> <operator>&amp;</operator><name>iov</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_base</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_packet</name><operator>.</operator><name>iov_base</name></name></expr>;</expr_stmt>
  
  <comment type="block">/* packet buffer may have moved */</comment>
  <expr_stmt><expr><name>mess</name> <operator>=</operator> <operator>(</operator>struct <name>dhcp_packet</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_packet</name><operator>.</operator><name>iov_base</name></name></expr>;</expr_stmt>
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SOCKADDR_SA_LEN</name></cpp:ifdef>
  <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>sin_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
  <if_stmt><if>if <condition>(<expr><name>pxe_fd</name></expr>)</condition>
    <block>{<block_content> 
      <if_stmt><if>if <condition>(<expr><name><name>mess</name><operator>-&gt;</operator><name>ciaddr</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>dest</name><operator>.</operator><name>sin_addr</name></name> <operator>=</operator> <name><name>mess</name><operator>-&gt;</operator><name>ciaddr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>mess</name><operator>-&gt;</operator><name>giaddr</name><operator>.</operator><name>s_addr</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_relay_reply</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Send to BOOTP relay  */</comment>
      <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_server_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>sin_addr</name></name> <operator>=</operator> <name><name>mess</name><operator>-&gt;</operator><name>giaddr</name></name></expr>;</expr_stmt> 
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>mess</name><operator>-&gt;</operator><name>ciaddr</name><operator>.</operator><name>s_addr</name></name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* If the client's idea of its own address tallys with
	 the source address in the request packet, we believe the
	 source port too, and send back to that.  If we're replying 
	 to a DHCPINFORM, trust the source address always. */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>is_inform</name> <operator>&amp;&amp;</operator> <name><name>dest</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <name><name>mess</name><operator>-&gt;</operator><name>ciaddr</name><operator>.</operator><name>s_addr</name></name><operator>)</operator> <operator>||</operator>
	  <name><name>dest</name><operator>.</operator><name>sin_port</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>dest</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>is_relay_reply</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_client_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	  <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>sin_addr</name></name> <operator>=</operator> <name><name>mess</name><operator>-&gt;</operator><name>ciaddr</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <else>else
    <block>{<block_content>
      <comment type="block">/* fill cmsg for outbound interface (both broadcast &amp; unicast) */</comment>
      <decl_stmt><decl><type><name><name>struct</name> <name>in_pktinfo</name></name> <modifier>*</modifier></type><name>pkt</name></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_control</name></name> <operator>=</operator> <name><name>control_u</name><operator>.</operator><name>control</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_controllen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>control_u</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <expr_stmt><expr><name>cmptr</name> <operator>=</operator> <call><name>CMSG_FIRSTHDR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pkt</name> <operator>=</operator> <operator>(</operator>struct <name>in_pktinfo</name> <operator>*</operator><operator>)</operator><call><name>CMSG_DATA</name><argument_list>(<argument><expr><name>cmptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>ipi_ifindex</name></name> <operator>=</operator> <name>rcvd_iface_index</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>ipi_spec_dst</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_controllen</name></name> <operator>=</operator> <call><name>CMSG_SPACE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_pktinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_len</name></name> <operator>=</operator> <call><name>CMSG_LEN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_pktinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_level</name></name> <operator>=</operator> <name>IPPROTO_IP</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_type</name></name> <operator>=</operator> <name>IP_PKTINFO</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>ntohs</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x8000</literal><operator>)</operator> <operator>||</operator> <name><name>mess</name><operator>-&gt;</operator><name>hlen</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
         <name><name>mess</name><operator>-&gt;</operator><name>hlen</name></name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_addr</name><operator>.</operator><name>sa_data</name></name></expr></argument>)</argument_list></sizeof> <operator>||</operator> <name><name>mess</name><operator>-&gt;</operator><name>htype</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* broadcast to 255.255.255.255 (or mac address invalid) */</comment>
          <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name>INADDR_BROADCAST</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_client_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
      <else>else
        <block>{<block_content>
          <comment type="block">/* unicast to unconfigured client. Inject mac address direct into ARP cache.
          struct sockaddr limits size to 14 bytes. */</comment>
          <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>sin_addr</name></name> <operator>=</operator> <name><name>mess</name><operator>-&gt;</operator><name>yiaddr</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_client_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>arp_req</name><operator>.</operator><name>arp_pa</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dest</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>arp_req</name><operator>.</operator><name>arp_ha</name><operator>.</operator><name>sa_family</name></name> <operator>=</operator> <name><name>mess</name><operator>-&gt;</operator><name>htype</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>arp_req</name><operator>.</operator><name>arp_ha</name><operator>.</operator><name>sa_data</name></name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>chaddr</name></name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>hlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <comment type="block">/* interface name already copied in */</comment>
          <expr_stmt><expr><name><name>arp_req</name><operator>.</operator><name>arp_flags</name></name> <operator>=</operator> <name>ATF_COM</name></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcpfd</name></name></expr></argument>, <argument><expr><name>SIOCSARP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arp_req</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"ARP-cache injection failed: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SOLARIS_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <if_stmt><if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>ntohs</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x8000</literal><operator>)</operator> <operator>||</operator> <name><name>mess</name><operator>-&gt;</operator><name>hlen</name></name> <operator>!=</operator> <name>ETHER_ADDR_LEN</name> <operator>||</operator> <name><name>mess</name><operator>-&gt;</operator><name>htype</name></name> <operator>!=</operator> <name>ARPHRD_ETHER</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* broadcast to 255.255.255.255 (or mac address invalid) */</comment>
      <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name>INADDR_BROADCAST</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_client_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* note that we don't specify the interface here: that's done by the
	 IP_BOUND_IF sockopt lower down. */</comment>
    </block_content>}</block></if>
  <else>else
    <block>{<block_content>
      <comment type="block">/* unicast to unconfigured client. Inject mac address direct into ARP cache. 
	 Note that this only works for ethernet on solaris, because we use SIOCSARP
	 and not SIOCSXARP, which would be perfect, except that it returns ENXIO 
	 mysteriously. Bah. Fall back to broadcast for other net types. */</comment>
      <decl_stmt><decl><type><name><name>struct</name> <name>arpreq</name></name></type> <name>req</name></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>sin_addr</name></name> <operator>=</operator> <name><name>mess</name><operator>-&gt;</operator><name>yiaddr</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_client_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>req</name><operator>.</operator><name>arp_pa</name></name><operator>)</operator> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>req</name><operator>.</operator><name>arp_ha</name><operator>.</operator><name>sa_family</name></name> <operator>=</operator> <name>AF_UNSPEC</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>arp_ha</name><operator>.</operator><name>sa_data</name></name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>chaddr</name></name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>hlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>req</name><operator>.</operator><name>arp_flags</name></name> <operator>=</operator> <name>ATF_COM</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcpfd</name></name></expr></argument>, <argument><expr><name>SIOCSARP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BSD_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <if_stmt><else>else 
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DUMPFILE</name></cpp:ifdef>
      <if_stmt><if>if <condition>(<expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name>INADDR_BROADCAST</name></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>sin_addr</name></name> <operator>=</operator> <name><name>mess</name><operator>-&gt;</operator><name>yiaddr</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
      <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_client_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <expr_stmt><expr><call><name>dump_packet_udp</name><argument_list>(<argument><expr><name>DUMP_DHCP</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>iov</name><operator>.</operator><name>iov_base</name></name></expr></argument>, <argument><expr><name><name>iov</name><operator>.</operator><name>iov_len</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
		      <argument><expr><operator>(</operator>union <name>mysockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dest</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      
      <expr_stmt><expr><call><name>send_via_bpf</name><argument_list>(<argument><expr><name>mess</name></expr></argument>, <argument><expr><name><name>iov</name><operator>.</operator><name>iov_len</name></name></expr></argument>, <argument><expr><name>iface_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
   
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SOLARIS_NETWORK</name></cpp:ifdef>
  <expr_stmt><expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_IP</name></expr></argument>, <argument><expr><name>IP_BOUND_IF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iface_index</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>iface_index</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DUMPFILE</name></cpp:ifdef>
  <expr_stmt><expr><call><name>dump_packet_udp</name><argument_list>(<argument><expr><name>DUMP_DHCP</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>iov</name><operator>.</operator><name>iov_base</name></name></expr></argument>, <argument><expr><name><name>iov</name><operator>.</operator><name>iov_len</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
		  <argument><expr><operator>(</operator>union <name>mysockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dest</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
  <while>while<condition>(<expr><call><name>retry_send</name><argument_list>(<argument><expr><call><name>sendmsg</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>

  <comment type="block">/* This can fail when, eg, iptables DROPS destination 255.255.255.255 */</comment>
  <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dest</name><operator>.</operator><name>sin_addr</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Error sending DHCP packet to %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
}

<comment type="block">/* check against secondary interface addresses */</comment>
static <function><type><name>int</name></type> <name>check_listen_addrs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>local</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>if_index</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>,
			      <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>netmask</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>broadcast</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vparam</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>match_param</name></name> <modifier>*</modifier></type><name>param</name> <init>= <expr><name>vparam</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iname</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>label</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>if_index</name> <operator>==</operator> <name><name>param</name><operator>-&gt;</operator><name>ind</name></name></expr>)</condition>
    <block>{<block_content>
      <for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>if_addrs</name></name></expr>;</init> <condition><expr><name>tmp</name></expr>;</condition> <incr><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>( <expr><name><name>tmp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name> <operator>&amp;&amp;</operator>
	     <name><name>tmp</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <name><name>local</name><operator>.</operator><name>s_addr</name></name></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>matched</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>local</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>netmask</name></name> <operator>=</operator> <name>netmask</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>broadcast</name></name> <operator>=</operator> <name>broadcast</name></expr>;</expr_stmt>
	    <break>break;</break>
	  </block_content>}</block></if></if_stmt></block_content></block></for>
    </block_content>}</block></if></if_stmt>
  
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* This is a complex routine: it gets called with each (address,netmask,broadcast) triple 
   of each interface (and any relay address) and does the  following things:

   1) Discards stuff for interfaces other than the one on which a DHCP packet just arrived.
   2) Fills in any netmask and broadcast addresses which have not been explicitly configured.
   3) Fills in local (this host) and router (this host or relay) addresses.
   4) Links contexts which are valid for hosts directly connected to the arrival interface on -&gt;current.

   Note that the current chain may be superseded later for configured hosts or those coming via gateways. */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>guess_range_netmask</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>netmask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>context</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp</name></name></expr>;</init> <condition><expr><name>context</name></expr>;</condition> <incr><expr><name>context</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_NETMASK</name><operator>)</operator> <operator>&amp;&amp;</operator>
	<operator>(</operator><call><name>is_same_net</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name>netmask</name></expr></argument>)</argument_list></call> <operator>||</operator>
	 <call><name>is_same_net</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name>netmask</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
      <block>{<block_content> 
	<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>netmask</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <name><name>netmask</name><operator>.</operator><name>s_addr</name></name> <operator>&amp;&amp;</operator>
	    <operator>!</operator><operator>(</operator><call><name>is_same_net</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name>netmask</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	      <call><name>is_same_net</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name>netmask</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></argument>, <argument><expr><name>DHCP_BUFF_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>, <argument><expr><name>DHCP_BUFF_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>netmask</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"DHCP range %s -- %s is not consistent with netmask %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
		      <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt>	
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>netmask</name></name> <operator>=</operator> <name>netmask</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>complete_context</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>local</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>if_index</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>,
			    <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>netmask</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>broadcast</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vparam</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_relay</name></name> <modifier>*</modifier></type><name>relay</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iface_param</name></name> <modifier>*</modifier></type><name>param</name> <init>= <expr><name>vparam</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>shared_network</name></name> <modifier>*</modifier></type><name>share</name></decl>;</decl_stmt>
  
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>label</name></expr>;</expr_stmt>

  <for>for <control>(<init><expr><name>share</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>shared_networks</name></name></expr>;</init> <condition><expr><name>share</name></expr>;</condition> <incr><expr><name>share</name> <operator>=</operator> <name><name>share</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
      <if_stmt><if>if <condition>(<expr><name><name>share</name><operator>-&gt;</operator><name>shared_addr</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      
      <if_stmt><if>if <condition>(<expr><name><name>share</name><operator>-&gt;</operator><name>if_index</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name><name>share</name><operator>-&gt;</operator><name>if_index</name></name> <operator>!=</operator> <name>if_index</name></expr>)</condition><block type="pseudo"><block_content>
	    <continue>continue;</continue></block_content></block></if></if_stmt>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name><name>share</name><operator>-&gt;</operator><name>match_addr</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <name><name>local</name><operator>.</operator><name>s_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
	    <continue>continue;</continue></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

      <for>for <control>(<init><expr><name>context</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp</name></name></expr>;</init> <condition><expr><name>context</name></expr>;</condition> <incr><expr><name>context</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>netmask</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
	      <call><name>is_same_net</name><argument_list>(<argument><expr><name><name>share</name><operator>-&gt;</operator><name>shared_addr</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>netmask</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	      <call><name>is_same_net</name><argument_list>(<argument><expr><name><name>share</name><operator>-&gt;</operator><name>shared_addr</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>netmask</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <comment type="block">/* link it onto the current chain if we've not seen it before */</comment>
	      <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>current</name></name> <operator>==</operator> <name>context</name></expr>)</condition>
		<block>{<block_content>
		  <comment type="block">/* For a shared network, we have no way to guess what the default route should be. */</comment>
		  <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>router</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>local</name></name> <operator>=</operator> <name>local</name></expr>;</expr_stmt> <comment type="block">/* Use configured address for Server Identifier */</comment>
		  <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>current</name></name></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_BRDCAST</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>broadcast</name><operator>.</operator><name>s_addr</name></name>  <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>s_addr</name></name> <operator>|</operator> <operator>~</operator><name><name>context</name><operator>-&gt;</operator><name>netmask</name><operator>.</operator><name>s_addr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>		
	</block_content>}</block></for>
    </block_content>}</block></for>

  <expr_stmt><expr><call><name>guess_range_netmask</name><argument_list>(<argument><expr><name>local</name></expr></argument>, <argument><expr><name>netmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <for>for <control>(<init><expr><name>context</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp</name></name></expr>;</init> <condition><expr><name>context</name></expr>;</condition> <incr><expr><name>context</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>netmask</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
	  <call><name>is_same_net</name><argument_list>(<argument><expr><name>local</name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>netmask</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	  <call><name>is_same_net</name><argument_list>(<argument><expr><name>local</name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>netmask</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <comment type="block">/* link it onto the current chain if we've not seen it before */</comment>
	  <if_stmt><if>if <condition>(<expr><name>if_index</name> <operator>==</operator> <name><name>param</name><operator>-&gt;</operator><name>ind</name></name> <operator>&amp;&amp;</operator> <name><name>context</name><operator>-&gt;</operator><name>current</name></name> <operator>==</operator> <name>context</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>router</name></name> <operator>=</operator> <name>local</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>local</name></name> <operator>=</operator> <name>local</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>current</name></name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_BRDCAST</name><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><call><name>is_same_net</name><argument_list>(<argument><expr><name>broadcast</name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>netmask</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>broadcast</name></name> <operator>=</operator> <name>broadcast</name></expr>;</expr_stmt></block_content></block></if>
	      <else>else<block type="pseudo"><block_content> 
		<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>broadcast</name><operator>.</operator><name>s_addr</name></name>  <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>s_addr</name></name> <operator>|</operator> <operator>~</operator><name><name>context</name><operator>-&gt;</operator><name>netmask</name><operator>.</operator><name>s_addr</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>		
    </block_content>}</block></for>

  <for>for <control>(<init><expr><name>relay</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>relay4</name></name></expr>;</init> <condition><expr><name>relay</name></expr>;</condition> <incr><expr><name>relay</name> <operator>=</operator> <name><name>relay</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>relay</name><operator>-&gt;</operator><name>local</name><operator>.</operator><name>addr4</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <name><name>local</name><operator>.</operator><name>s_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>relay</name><operator>-&gt;</operator><name>iface_index</name></name> <operator>=</operator> <name>if_index</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
  
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
	  
<function><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>address_available</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, 
				       <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>taddr</name></decl></parameter>,
				       <parameter><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>netids</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Check is an address is OK for this network, check all
     possible ranges. Make sure that the address isn't in use
     by the server itself. */</comment>
  
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>, <decl><type ref="prev"/><name>addr</name> <init>= <expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>taddr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name>context</name></expr>;</init> <condition><expr><name>tmp</name></expr>;</condition> <incr><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>current</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>taddr</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <name><name>context</name><operator>-&gt;</operator><name>router</name><operator>.</operator><name>s_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
  
  <for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name>context</name></expr>;</init> <condition><expr><name>tmp</name></expr>;</condition> <incr><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>current</name></name></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>tmp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>CONTEXT_STATIC</name> <operator>|</operator> <name>CONTEXT_PROXY</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
	  <name>addr</name> <operator>&gt;=</operator> <name>start</name> <operator>&amp;&amp;</operator>
	  <name>addr</name> <operator>&lt;=</operator> <name>end</name> <operator>&amp;&amp;</operator>
	  <call><name>match_netid</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>, <argument><expr><name>netids</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>tmp</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>narrow_context</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, 
				    <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>taddr</name></decl></parameter>,
				    <parameter><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>netids</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* We start of with a set of possible contexts, all on the current physical interface.
     These are chained on -&gt;current.
     Here we have an address, and return the actual context corresponding to that
     address. Note that none may fit, if the address came a dhcp-host and is outside
     any dhcp-range. In that case we return a static range if possible, or failing that,
     any context on the correct subnet. (If there's more than one, this is a dodgy 
     configuration: maybe there should be a warning.) */</comment>
  
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>address_available</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>taddr</name></expr></argument>, <argument><expr><name>netids</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name>context</name></expr>;</init> <condition><expr><name>tmp</name></expr>;</condition> <incr><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>current</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><call><name>match_netid</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>, <argument><expr><name>netids</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	    <call><name>is_same_net</name><argument_list>(<argument><expr><name>taddr</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>netmask</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> 
	    <operator>(</operator><name><name>tmp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_STATIC</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	  <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>
	<for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name>context</name></expr>;</init> <condition><expr><name>tmp</name></expr>;</condition> <incr><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>current</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	  <if_stmt><if>if <condition>(<expr><call><name>match_netid</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>, <argument><expr><name>netids</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	      <call><name>is_same_net</name><argument_list>(<argument><expr><name>taddr</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>netmask</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	      <operator>!</operator><operator>(</operator><name><name>tmp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_PROXY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <break>break;</break></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Only one context allowed now */</comment>
  <if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <return>return <expr><name>tmp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>dhcp_config</name></name> <modifier>*</modifier></type><name>config_find_by_address</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_config</name></name> <modifier>*</modifier></type><name>configs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_config</name></name> <modifier>*</modifier></type><name>config</name></decl>;</decl_stmt>
  
  <for>for <control>(<init><expr><name>config</name> <operator>=</operator> <name>configs</name></expr>;</init> <condition><expr><name>config</name></expr>;</condition> <incr><expr><name>config</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONFIG_ADDR</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>config</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <name><name>addr</name><operator>.</operator><name>s_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>config</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Check if and address is in use by sending ICMP ping.
   This wrapper handles a cache and load-limiting.
   Return is NULL is address in use, or a pointer to a cache entry
   recording that it isn't. */</comment>
<function><type><name><name>struct</name> <name>ping_result</name></name> <modifier>*</modifier></type><name>do_icmp_ping</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>loopback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>ping_result</name></name></type> <name>dummy</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>ping_result</name></name> <modifier>*</modifier></type><name>r</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>victim</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>max</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">0.6</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>PING_CACHE_TIME</name><operator>)</operator><operator>/</operator>
				<operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>PING_WAIT</name><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

  <comment type="block">/* check if we failed to ping addr sometime in the last
     PING_CACHE_TIME seconds. If so, assume the same situation still exists.
     This avoids problems when a stupid client bangs
     on us repeatedly. As a final check, if we did more
     than 60% of the possible ping checks in the last 
     PING_CACHE_TIME, we are in high-load mode, so don't do any more. */</comment>
  <for>for <control>(<init><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>r</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>ping_results</name></name></expr>;</init> <condition><expr><name>r</name></expr>;</condition> <incr><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><call><name>difftime</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>time</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator>  <operator>(</operator><name>float</name><operator>)</operator><name>PING_CACHE_TIME</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>victim</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt></block_content></block></if> <comment type="block">/* old record */</comment>
    <else>else 
      <block>{<block_content>
	<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <name><name>addr</name><operator>.</operator><name>s_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
	  <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
      </block_content>}</block></else></if_stmt></block_content></block></for>
  
  <comment type="block">/* didn't find cached entry */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>count</name> <operator>&gt;=</operator> <name>max</name><operator>)</operator> <operator>||</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NO_PING</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>loopback</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* overloaded, or configured not to check, loopback interface, return "not in use" */</comment>
      <expr_stmt><expr><name><name>dummy</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
      <return>return <expr><operator>&amp;</operator><name>dummy</name></expr>;</return>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><call><name>icmp_ping</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if> <comment type="block">/* address in use. */</comment>
  <else>else
    <block>{<block_content>
      <comment type="block">/* at this point victim may hold an expired record */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>victim</name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>victim</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ping_result</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name><name>victim</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>ping_results</name></name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>ping_results</name></name> <operator>=</operator> <name>victim</name></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
      
      <comment type="block">/* record that this address is OK for 30s 
	 without more ping checks */</comment>
      <if_stmt><if>if <condition>(<expr><name>victim</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name><name>victim</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>victim</name><operator>-&gt;</operator><name>time</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>victim</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
      <return>return <expr><name>victim</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>address_allocate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
		     <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name> <modifier>*</modifier></type><name>addrp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hwaddr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hw_len</name></decl></parameter>, 
		     <parameter><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>netids</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>loopback</name></decl></parameter>)</parameter_list>   
<block>{<block_content>
  <comment type="block">/* Find a free address: exclude anything in use and anything allocated to
     a particular hwaddr/clientid/hostname in our configuration.
     Try to return from contexts which match netids first. */</comment>

  <decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>addr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pass</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name></decl>;</decl_stmt> 

  <comment type="block">/* hash hwaddr: use the SDBM hashing algorithm.  Seems to give good
     dispersal even with similarly-valued "strings". */</comment> 
  <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>hw_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>hwaddr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <name>j</name></expr>;</expr_stmt></block_content></block></for>

  <comment type="block">/* j == 0 is marker */</comment>
  <if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <for>for <control>(<init><expr><name>pass</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pass</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>pass</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>c</name> <operator>=</operator> <name>context</name></expr>;</init> <condition><expr><name>c</name></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>current</name></name></expr></incr>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>CONTEXT_STATIC</name> <operator>|</operator> <name>CONTEXT_PROXY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>match_netid</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>, <argument><expr><name>netids</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if>
      <else>else
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CONSEC_ADDR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <comment type="block">/* seed is largest extant lease addr in this context */</comment>
	    <expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>lease_find_max_addr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <comment type="block">/* pick a seed based on hwaddr */</comment>
	    <expr_stmt><expr><name><name>start</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call> <operator>+</operator> 
				 <operator>(</operator><operator>(</operator><name>j</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>addr_epoch</name></name><operator>)</operator> <operator>%</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	  <comment type="block">/* iterate until we find a free address. */</comment>
	  <expr_stmt><expr><name>addr</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
	  
	  <do>do <block>{<block_content>
	    <comment type="block">/* eliminate addresses in use by the server. */</comment>
	    <for>for <control>(<init><expr><name>d</name> <operator>=</operator> <name>context</name></expr>;</init> <condition><expr><name>d</name></expr>;</condition> <incr><expr><name>d</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>current</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	      <if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <name><name>d</name><operator>-&gt;</operator><name>router</name><operator>.</operator><name>s_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
		<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

	    <comment type="block">/* Addresses which end in .255 and .0 are broken in Windows even when using 
	       supernetting. ie dhcp-range=192.168.0.1,192.168.1.254,255,255,254.0
	       then 192.168.0.255 is a valid IP address, but not for Windows as it's
	       in the class C range. See  KB281579. We therefore don't allocate these 
	       addresses to avoid hard-to-diagnose problems. Thanks Bill. */</comment>	    
	    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>d</name> <operator>&amp;&amp;</operator>
		<operator>!</operator><call><name>lease_find_by_addr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> 
		<operator>!</operator><call><name>config_find_by_address</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_conf</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<operator>(</operator><operator>!</operator><call><name>IN_CLASSC</name><argument_list>(<argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> 
		 <operator>(</operator><operator>(</operator><call><name>ntohl</name><argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><call><name>ntohl</name><argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x0</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition>
	      <block>{<block_content>
		<comment type="block">/* in consec-ip mode, skip addresses equal to
		   the number of addresses rejected by clients. This
		   should avoid the same client being offered the same
		   address after it has rjected it. */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CONSEC_ADDR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>addr_epoch</name></name></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>addr_epoch</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if>
		<else>else
		  <block>{<block_content>
		    <decl_stmt><decl><type><name><name>struct</name> <name>ping_result</name></name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
		    
		    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>do_icmp_ping</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>loopback</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		      <block>{<block_content>
			<comment type="block">/* consec-ip mode: we offered this address for another client
			   (different hash) recently, don't offer it to this one. */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CONSEC_ADDR</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>r</name><operator>-&gt;</operator><name>hash</name></name> <operator>==</operator> <name>j</name></expr>)</condition>
			  <block>{<block_content>
			    <expr_stmt><expr><operator>*</operator><name>addrp</name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
			    <return>return <expr><literal type="number">1</literal></expr>;</return>
			  </block_content>}</block></if></if_stmt>
		      </block_content>}</block></if>
		    <else>else
		      <block>{<block_content>
			<comment type="block">/* address in use: perturb address selection so that we are
			   less likely to try this address again. */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CONSEC_ADDR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			  <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>addr_epoch</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		      </block_content>}</block></else></if_stmt>
		  </block_content>}</block></else></if_stmt>
	      </block_content>}</block></if></if_stmt>
	    
	    <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    
	    <if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <call><name>htonl</name><argument_list>(<argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>addr</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    
	  </block_content>}</block> while <condition>(<expr><name><name>addr</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <name><name>start</name><operator>.</operator><name>s_addr</name></name></expr>)</condition>;</do>
	</block_content>}</block></else></if_stmt></block_content></block></for></block_content></block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dhcp_read_ethers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>ETHERSFILE</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buff</name> <init>= <expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ip</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hwaddr</name><index>[<expr><name>ETHER_ADDR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_config</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>up</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_config</name></name> <modifier>*</modifier></type><name>config</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>lineno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* eliminate warning */</comment>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to read %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ETHERSFILE</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

  <comment type="block">/* This can be called again on SIGHUP, so remove entries created last time round. */</comment>
  <for>for <control>(<init><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_conf</name></name></expr><operator>,</operator> <expr><name>config</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_conf</name></name></expr>;</init> <condition><expr><name>config</name></expr>;</condition> <incr><expr><name>config</name> <operator>=</operator> <name>tmp</name></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONFIG_FROM_ETHERS</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	  <comment type="block">/* cannot have a clid */</comment>
	  <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONFIG_NAME</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>hwaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>

  <while>while <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>MAXDNAME</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      
      <expr_stmt><expr><name>lineno</name><operator>++</operator></expr>;</expr_stmt>
      
      <while>while <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>buff</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>buff</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
      
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>buff</name> <operator>==</operator> <literal type="char">'#'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>buff</name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>buff</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if></if_stmt>
      
      <for>for <control>(<init><expr><name>ip</name> <operator>=</operator> <name>buff</name></expr>;</init> <condition><expr><operator>*</operator><name>ip</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><name>ip</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>ip</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
      <for>for<control>(<init>;</init> <condition><expr><operator>*</operator><name>ip</name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><name>ip</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>ip</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	<expr_stmt><expr><operator>*</operator><name>ip</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>ip</name> <operator>||</operator> <call><name>parse_hex</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>ETHER_ADDR_LEN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ETHER_ADDR_LEN</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad line at %s line %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ETHERSFILE</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	  <continue>continue;</continue>
	</block_content>}</block></if></if_stmt>
      
      <comment type="block">/* check for name or dotted-quad */</comment>
      <for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>ip</name></expr>;</init> <condition><expr><operator>*</operator><name>cp</name></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <operator>(</operator><operator>*</operator><name>cp</name> <operator>&gt;=</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>cp</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	  <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>cp</name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad address at %s line %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ETHERSFILE</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	      <continue>continue;</continue>
	    </block_content>}</block></if></if_stmt>

	  <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>CONFIG_ADDR</name></expr>;</expr_stmt>
	  
	  <for>for <control>(<init><expr><name>config</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_conf</name></name></expr>;</init> <condition><expr><name>config</name></expr>;</condition> <incr><expr><name>config</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONFIG_ADDR</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>config</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <name><name>addr</name><operator>.</operator><name>s_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
	      <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	</block_content>}</block></if>
      <else>else 
	<block>{<block_content>
	  <decl_stmt><decl><type><name>int</name></type> <name>nomem</name></decl>;</decl_stmt>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>host</name> <operator>=</operator> <call><name>canonicalise</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nomem</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>legal_hostname</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nomem</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad name at %s line %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ETHERSFILE</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
	      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <continue>continue;</continue>
	    </block_content>}</block></if></if_stmt>
	      
	  <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>CONFIG_NAME</name></expr>;</expr_stmt>

	  <for>for <control>(<init><expr><name>config</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_conf</name></name></expr>;</init> <condition><expr><name>config</name></expr>;</condition> <incr><expr><name>config</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONFIG_NAME</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>hostname_isequal</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	      <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	</block_content>}</block></else></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>config</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONFIG_FROM_ETHERS</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"ignoring %s line %d, duplicate name or IP address"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ETHERSFILE</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	  <continue>continue;</continue>
	</block_content>}</block></if></if_stmt>
	
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>config</name></expr>)</condition>
	<block>{<block_content> 
	  <for>for <control>(<init><expr><name>config</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_conf</name></name></expr>;</init> <condition><expr><name>config</name></expr>;</condition> <incr><expr><name>config</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name><name>struct</name> <name>hwaddr_config</name></name> <modifier>*</modifier></type><name>conf_addr</name> <init>= <expr><name><name>config</name><operator>-&gt;</operator><name>hwaddr</name></name></expr></init></decl>;</decl_stmt>
	      <if_stmt><if>if <condition>(<expr><name>conf_addr</name> <operator>&amp;&amp;</operator> 
		  <name><name>conf_addr</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> 
		  <name><name>conf_addr</name><operator>-&gt;</operator><name>wildcard_mask</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
		  <name><name>conf_addr</name><operator>-&gt;</operator><name>hwaddr_len</name></name> <operator>==</operator> <name>ETHER_ADDR_LEN</name> <operator>&amp;&amp;</operator>
		  <operator>(</operator><name><name>conf_addr</name><operator>-&gt;</operator><name>hwaddr_type</name></name> <operator>==</operator> <name>ARPHRD_ETHER</name> <operator>||</operator> <name><name>conf_addr</name><operator>-&gt;</operator><name>hwaddr_type</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
		  <call><name>memcmp</name><argument_list>(<argument><expr><name><name>conf_addr</name><operator>-&gt;</operator><name>hwaddr</name></name></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>ETHER_ADDR_LEN</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<break>break;</break></block_content></block></if></if_stmt>
	    </block_content>}</block></for>
	  
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>config</name></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>config</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dhcp_config</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<continue>continue;</continue></block_content></block></if></if_stmt>
	      <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>CONFIG_FROM_ETHERS</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>hwaddr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>domain</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>netid</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_conf</name></name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_conf</name></name> <operator>=</operator> <name>config</name></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	  
	  <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>flags</name></expr>;</expr_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>CONFIG_NAME</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>hostname</name></name> <operator>=</operator> <name>host</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>host</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>CONFIG_ADDR</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
      
      <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CONFIG_NOCLID</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>hwaddr</name></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>hwaddr</name></name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>hwaddr_config</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>hwaddr</name></name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>hwaddr</name><operator>-&gt;</operator><name>hwaddr</name></name></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>ETHER_ADDR_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>hwaddr</name><operator>-&gt;</operator><name>hwaddr_len</name></name> <operator>=</operator> <name>ETHER_ADDR_LEN</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>hwaddr</name><operator>-&gt;</operator><name>hwaddr_type</name></name> <operator>=</operator> <name>ARPHRD_ETHER</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>hwaddr</name><operator>-&gt;</operator><name>wildcard_mask</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>hwaddr</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
      
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>
  
  <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"read %s - %d addresses"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ETHERSFILE</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* If we've not found a hostname any other way, try and see if there's one in /etc/hosts
   for this address. If it has a domain part, that must match the set domain and
   it gets stripped. The set of legal domain names is bigger than the set of legal hostnames
   so check here that the domain name is legal as a hostname. 
   NOTE: we're only allowed to overwrite daemon-&gt;dhcp_buff if we succeed. */</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name>host_from_dns</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>lookup</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>port</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* DNS disabled. */</comment>
  
  <expr_stmt><expr><name>lookup</name> <operator>=</operator> <call><name>cache_find_by_addr</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator>union <name>all_addr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>F_IPV4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>lookup</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>lookup</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_HOSTS</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dot</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hostname</name> <init>= <expr><call><name>cache_get_name</name><argument_list>(<argument><expr><name>lookup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>dot</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>dot</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>dot</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>d2</name> <init>= <expr><call><name>get_domain</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>d2</name> <operator>||</operator> <operator>!</operator><call><name>hostname_isequal</name><argument_list>(<argument><expr><name>dot</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* wrong domain */</comment>
	</block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>legal_hostname</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
      
      <expr_stmt><expr><call><name>safe_strncpy</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>strip_hostname</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>relay_upstream4</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iface_index</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_packet</name></name> <modifier>*</modifier></type><name>mess</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>giaddr</name> <init>= <expr><name><name>mess</name><operator>-&gt;</operator><name>giaddr</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name></type> <name>hops</name> <init>= <expr><name><name>mess</name><operator>-&gt;</operator><name>hops</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_relay</name></name> <modifier>*</modifier></type><name>relay</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>mess</name><operator>-&gt;</operator><name>op</name></name> <operator>!=</operator> <name>BOOTREQUEST</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <for>for <control>(<init><expr><name>relay</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>relay4</name></name></expr>;</init> <condition><expr><name>relay</name></expr>;</condition> <incr><expr><name>relay</name> <operator>=</operator> <name><name>relay</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>relay</name><operator>-&gt;</operator><name>iface_index</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>relay</name><operator>-&gt;</operator><name>iface_index</name></name> <operator>==</operator> <name>iface_index</name></expr>)</condition><block type="pseudo"><block_content>
      <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

  <comment type="block">/* No relay config. */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>relay</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <for>for <control>(<init>;</init> <condition><expr><name>relay</name></expr>;</condition> <incr><expr><name>relay</name> <operator>=</operator> <name><name>relay</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>relay</name><operator>-&gt;</operator><name>iface_index</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>relay</name><operator>-&gt;</operator><name>iface_index</name></name> <operator>==</operator> <name>iface_index</name></expr>)</condition>
      <block>{<block_content>
	<decl_stmt><decl><type><name><name>union</name> <name>mysockaddr</name></name></type> <name>to</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>union</name> <name>all_addr</name></name></type> <name>from</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>hops</name></name> <operator>=</operator> <name>hops</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>giaddr</name></name> <operator>=</operator> <name>giaddr</name></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mess</name><operator>-&gt;</operator><name>hops</name></name><operator>++</operator><operator>)</operator> <operator>&gt;</operator> <literal type="number">20</literal></expr>)</condition><block type="pseudo"><block_content>
	  <continue>continue;</continue></block_content></block></if></if_stmt>
	
	<comment type="block">/* source address == relay address */</comment>
	<expr_stmt><expr><name><name>from</name><operator>.</operator><name>addr4</name></name> <operator>=</operator> <name><name>relay</name><operator>-&gt;</operator><name>local</name><operator>.</operator><name>addr4</name></name></expr>;</expr_stmt>

	<comment type="block">/* already gatewayed ? */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>giaddr</name><operator>.</operator><name>s_addr</name></name></expr>)</condition>
	  <block>{<block_content>
	    <comment type="block">/* if so check if by us, to stomp on loops. */</comment>
	    <if_stmt><if>if <condition>(<expr><name><name>giaddr</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <name><name>relay</name><operator>-&gt;</operator><name>local</name><operator>.</operator><name>addr4</name><operator>.</operator><name>s_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
	      <continue>continue;</continue></block_content></block></if></if_stmt>
	  </block_content>}</block></if>
	<else>else
	  <block>{<block_content>
	    <comment type="block">/* plug in our address */</comment>
	    <expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>giaddr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name><name>relay</name><operator>-&gt;</operator><name>local</name><operator>.</operator><name>addr4</name><operator>.</operator><name>s_addr</name></name></expr>;</expr_stmt>
	  </block_content>}</block></else></if_stmt>
	
	<expr_stmt><expr><name><name>to</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>to</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name></name> <operator>=</operator> <name><name>relay</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>addr4</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>to</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>relay</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<comment type="block">/* Broadcasting to server. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>relay</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>addr4</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	  <block>{<block_content>
	    <decl_stmt><decl><type><name><name>struct</name> <name>ifreq</name></name></type> <name>ifr</name></decl>;</decl_stmt>
	    
	    <if_stmt><if>if <condition>(<expr><name><name>relay</name><operator>-&gt;</operator><name>interface</name></name></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><call><name>safe_strncpy</name><argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>, <argument><expr><name><name>relay</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>, <argument><expr><name>IF_NAMESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    
	    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>relay</name><operator>-&gt;</operator><name>interface</name></name> <operator>||</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>relay</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call> <operator>||</operator>
		<call><name>ioctl</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcpfd</name></name></expr></argument>, <argument><expr><name>SIOCGIFBRDADDR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Cannot broadcast DHCP relay via interface %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>relay</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<continue>continue;</continue>
	      </block_content>}</block></if></if_stmt>
	    
	    <expr_stmt><expr><name><name>to</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>ifr</name><operator>.</operator><name>ifr_addr</name></name><operator>)</operator><operator>-&gt;</operator><name>sin_addr</name></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt>
	
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DUMPFILE</name></cpp:ifdef>
	<block>{<block_content>
	  <decl_stmt><decl><type><name><name>union</name> <name>mysockaddr</name></name></type> <name>fromsock</name></decl>;</decl_stmt>
	  <expr_stmt><expr><name><name>fromsock</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_server_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>fromsock</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name></name> <operator>=</operator> <name><name>from</name><operator>.</operator><name>addr4</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>fromsock</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>

	  <expr_stmt><expr><call><name>dump_packet_udp</name><argument_list>(<argument><expr><name>DUMP_DHCP</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>mess</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fromsock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>to</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	
	 <expr_stmt><expr><call><name>send_from</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcpfd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>mess</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>to</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>from</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 
	 <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOG_OPTS</name></expr></argument>)</argument_list></call></expr>)</condition>
	   <block>{<block_content>
	     <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>relay</name><operator>-&gt;</operator><name>local</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	     <if_stmt><if>if <condition>(<expr><name><name>relay</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>addr4</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	       <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>, <argument><expr><name>DHCP_BUFF_SZ</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"broadcast via %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>relay</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	     <else>else<block type="pseudo"><block_content>
	       <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>relay</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>addr4</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>, <argument><expr><name>DHCP_BUFF_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	     <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"DHCP relay at %s -&gt; %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	   </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt></block_content></block></for>
  
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name><name>struct</name> <name>dhcp_relay</name></name> <modifier>*</modifier></type><name>relay_reply4</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_packet</name></name> <modifier>*</modifier></type><name>mess</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arrival_interface</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_relay</name></name> <modifier>*</modifier></type><name>relay</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>mess</name><operator>-&gt;</operator><name>giaddr</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>mess</name><operator>-&gt;</operator><name>op</name></name> <operator>!=</operator> <name>BOOTREPLY</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <for>for <control>(<init><expr><name>relay</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>relay4</name></name></expr>;</init> <condition><expr><name>relay</name></expr>;</condition> <incr><expr><name>relay</name> <operator>=</operator> <name><name>relay</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>mess</name><operator>-&gt;</operator><name>giaddr</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <name><name>relay</name><operator>-&gt;</operator><name>local</name><operator>.</operator><name>addr4</name><operator>.</operator><name>s_addr</name></name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>relay</name><operator>-&gt;</operator><name>interface</name></name> <operator>||</operator> <call><name>wildcard_match</name><argument_list>(<argument><expr><name><name>relay</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>, <argument><expr><name>arrival_interface</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><ternary><condition><expr><name><name>relay</name><operator>-&gt;</operator><name>iface_index</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>relay</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  
  <return>return <expr><name>NULL</name></expr>;</return>	 
</block_content>}</block></function>     

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
