<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/dnsmasq/loop.c"><comment type="block">/* dnsmasq is Copyright (c) 2000-2022 Simon Kelley

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 dated June, 1991, or
   (at your option) version 3 dated 29 June, 2007.
 
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
     
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnsmasq.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LOOP</name></cpp:ifdef>
<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>loop_make_probe</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>uid</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>loop_send_probes</name><parameter_list>()</parameter_list>
<block>{<block_content>
   <decl_stmt><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>serv</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><name><name>struct</name> <name>randfd_list</name></name> <modifier>*</modifier></type><name>rfds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
   
   <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOOP_DETECT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
     <return>return;</return></block_content></block></if></if_stmt>

   <comment type="block">/* Loop through all upstream servers not for particular domains, and send a query to that server which is
      identifiable, via the uid. If we see that query back again, then the server is looping, and we should not use it. */</comment>
   <for>for <control>(<init><expr><name>serv</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>servers</name></name></expr>;</init> <condition><expr><name>serv</name></expr>;</condition> <incr><expr><name>serv</name> <operator>=</operator> <name><name>serv</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
     <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>serv</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
	 <operator>!</operator><operator>(</operator><name><name>serv</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SERV_FOR_NODOTS</name><operator>)</operator><operator>)</operator></expr>)</condition>
       <block>{<block_content>
	 <decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name> <init>= <expr><call><name>loop_make_probe</name><argument_list>(<argument><expr><name><name>serv</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	 <decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
	 
	 <expr_stmt><expr><name><name>serv</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SERV_LOOP</name></expr>;</expr_stmt>

	 <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>allocate_rfd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>, <argument><expr><name>serv</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	   <continue>continue;</continue></block_content></block></if></if_stmt>
	 
	 <while>while <condition>(<expr><call><name>retry_send</name><argument_list>(<argument><expr><call><name>sendto</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, 
				  <argument><expr><operator>&amp;</operator><name><name>serv</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa</name></name></expr></argument>, <argument><expr><call><name>sa_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>serv</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
       </block_content>}</block></if></if_stmt></block_content></block></for>

   <expr_stmt><expr><call><name>free_rfds</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
  
<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>loop_make_probe</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>uid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name> <init>= <expr><operator>(</operator>struct <name>dns_header</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>header</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* packet buffer overwritten */</comment>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>srv_save</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  
  <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>rand16</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>ancount</name></name> <operator>=</operator> <name><name>header</name><operator>-&gt;</operator><name>nscount</name></name> <operator>=</operator> <name><name>header</name><operator>-&gt;</operator><name>arcount</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>qdcount</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb3</name></name> <operator>=</operator> <name>HB3_RD</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb4</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SET_OPCODE</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><literal type="string">"%.8x"</literal></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>LOOP_TEST_DOMAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><name>LOOP_TEST_DOMAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Add terminating zero */</comment>
  <expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>LOOP_TEST_DOMAIN</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><name>LOOP_TEST_TYPE</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PUTSHORT</name><argument_list>(<argument><expr><name>C_IN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>p</name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>header</name></expr>;</return>
</block_content>}</block></function>
  

<function><type><name>int</name></type> <name>detect_loop</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u32</name></type> <name>uid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>serv</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOOP_DETECT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>LOOP_TEST_TYPE</name> <operator>||</operator>
      <call><name>strlen</name><argument_list>(<argument><expr><name>LOOP_TEST_DOMAIN</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">9</literal> <operator>!=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <call><name>strstr</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>LOOP_TEST_DOMAIN</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>query</name> <operator>+</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isxdigit</name><argument_list>(<argument><expr><name><name>query</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

  <expr_stmt><expr><name>uid</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><expr><name>serv</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>servers</name></name></expr>;</init> <condition><expr><name>serv</name></expr>;</condition> <incr><expr><name>serv</name> <operator>=</operator> <name><name>serv</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>serv</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
	<operator>!</operator><operator>(</operator><name><name>serv</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SERV_LOOP</name><operator>)</operator> <operator>&amp;&amp;</operator>
	<name>uid</name> <operator>==</operator> <name><name>serv</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition>
      <block>{<block_content>
	<expr_stmt><expr><name><name>serv</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SERV_LOOP</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>check_servers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* log new state - don't send more probes. */</comment>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt></block_content></block></for>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
