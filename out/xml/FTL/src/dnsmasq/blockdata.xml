<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/dnsmasq/blockdata.c"><comment type="block">/* dnsmasq is Copyright (c) 2000-2022 Simon Kelley

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 dated June, 1991, or
   (at your option) version 3 dated 29 June, 2007.
 
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
     
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnsmasq.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>blockdata</name></name> <modifier>*</modifier></type><name>keyblock_free</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>blockdata_count</name></decl>, <decl><type ref="prev"/><name>blockdata_hwm</name></decl>, <decl><type ref="prev"/><name>blockdata_alloced</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blockdata_expand</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>blockdata</name></name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>whine_malloc</name><argument_list>(<argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>blockdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>new</name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      
      <expr_stmt><expr><name><name>new</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>next</name> <operator>=</operator> <name>keyblock_free</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>keyblock_free</name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>

      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>new</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>next</name> <operator>=</operator> <operator>&amp;</operator><name><name>new</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

      <expr_stmt><expr><name>blockdata_alloced</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Preallocate some blocks, proportional to cachesize, to reduce heap fragmentation. */</comment>
<function><type><name>void</name></type> <name>blockdata_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name>keyblock_free</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>blockdata_alloced</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>blockdata_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>blockdata_hwm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="block">/* Note that daemon-&gt;cachesize is enforced to have non-zero size if OPT_DNSSEC_VALID is set */</comment>  
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DNSSEC_VALID</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>blockdata_expand</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>cachesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>blockdata_report</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"pool memory in use %zu, max %zu, allocated %zu"</literal></expr></argument>)</argument_list></call></expr></argument>, 
	    <argument><expr><name>blockdata_count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>blockdata</name></expr></argument>)</argument_list></sizeof></expr></argument>,  
	    <argument><expr><name>blockdata_hwm</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>blockdata</name></expr></argument>)</argument_list></sizeof></expr></argument>,  
	    <argument><expr><name>blockdata_alloced</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>blockdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function> 

<function><type><specifier>static</specifier> <name><name>struct</name> <name>blockdata</name></name> <modifier>*</modifier></type><name>blockdata_alloc_real</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>blockdata</name></name> <modifier>*</modifier></type><name>block</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>blockdata</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>prev</name> <init>= <expr><operator>&amp;</operator><name>ret</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>blen</name></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>keyblock_free</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>blockdata_expand</name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>keyblock_free</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>block</name> <operator>=</operator> <name>keyblock_free</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>keyblock_free</name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>blockdata_count</name><operator>++</operator></expr>;</expr_stmt> 
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <comment type="block">/* failed to alloc, free partial chain */</comment>
	  <expr_stmt><expr><call><name>blockdata_free</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
       
      <if_stmt><if>if <condition>(<expr><name>blockdata_hwm</name> <operator>&lt;</operator> <name>blockdata_count</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>blockdata_hwm</name> <operator>=</operator> <name>blockdata_count</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
      
      <expr_stmt><expr><name>blen</name> <operator>=</operator> <ternary><condition><expr><name>len</name> <operator>&gt;</operator> <name>KEYBLOCK_LEN</name></expr> ?</condition><then> <expr><name>KEYBLOCK_LEN</name></expr> </then><else>: <expr><name>len</name></expr></else></ternary></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>blen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>data</name> <operator>+=</operator> <name>blen</name></expr>;</expr_stmt>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>read_write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>blen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <comment type="block">/* failed read free partial chain */</comment>
	  <expr_stmt><expr><call><name>blockdata_free</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>len</name> <operator>-=</operator> <name>blen</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>prev</name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>prev</name> <operator>=</operator> <operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></while>
  
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>blockdata</name></name> <modifier>*</modifier></type><name>blockdata_alloc</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>blockdata_alloc_real</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>blockdata_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>blockdata</name></name> <modifier>*</modifier></type><name>blocks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>blockdata</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>blocks</name></expr>)</condition>
    <block>{<block_content>
      <for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name>blocks</name></expr>;</init> <condition><expr><name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr>;</condition> <incr><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<expr_stmt><expr><name>blockdata_count</name><operator>--</operator></expr>;</expr_stmt></block_content></block></for>
      <expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>keyblock_free</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>keyblock_free</name> <operator>=</operator> <name>blocks</name></expr>;</expr_stmt> 
      <expr_stmt><expr><name>blockdata_count</name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* if data == NULL, return pointer to static block of sufficient size */</comment>
<function><type><name>void</name> <modifier>*</modifier></type><name>blockdata_retrieve</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>blockdata</name></name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>blen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name>  <name>blockdata</name></name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>new</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>buff_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buff</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
   
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>buff_len</name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>new</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	  <if_stmt><if>if <condition>(<expr><name>buff</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  <expr_stmt><expr><name>buff</name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>data</name> <operator>=</operator> <name>buff</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  
  <for>for <control>(<init><expr><name>d</name> <operator>=</operator> <name>data</name></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <name>block</name></expr>;</init> <condition><expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>b</name></expr>;</condition>  <incr><expr><name>b</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name>blen</name> <operator>=</operator> <ternary><condition><expr><name>len</name> <operator>&gt;</operator> <name>KEYBLOCK_LEN</name></expr> ?</condition><then> <expr><name>KEYBLOCK_LEN</name></expr> </then><else>: <expr><name>len</name></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>blen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>d</name> <operator>+=</operator> <name>blen</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>len</name> <operator>-=</operator> <name>blen</name></expr>;</expr_stmt>
    </block_content>}</block></for>

  <return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>blockdata_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>blockdata</name></name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <for>for <control>(<init>;</init> <condition><expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>block</name></expr>;</condition> <incr><expr><name>block</name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>blen</name> <init>= <expr><ternary><condition><expr><name>len</name> <operator>&gt;</operator> <name>KEYBLOCK_LEN</name></expr> ?</condition><then> <expr><name>KEYBLOCK_LEN</name></expr> </then><else>: <expr><name>len</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>read_write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>blen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>len</name> <operator>-=</operator> <name>blen</name></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>blockdata</name></name> <modifier>*</modifier></type><name>blockdata_read</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>blockdata_alloc_real</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
