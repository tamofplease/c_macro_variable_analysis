<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/dnsmasq/domain.c"><comment type="block">/* dnsmasq is Copyright (c) 2000-2022 Simon Kelley

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 dated June, 1991, or
   (at your option) version 3 dated 29 June, 2007.
 
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
     
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnsmasq.h"</cpp:file></cpp:include>


<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>cond_domain</name></name> <modifier>*</modifier></type><name>search_domain</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cond_domain</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>match_domain</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cond_domain</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>cond_domain</name></name> <modifier>*</modifier></type><name>search_domain6</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cond_domain</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>match_domain6</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cond_domain</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>is_name_synthetic</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>all_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>cond_domain</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>prot</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>F_IPV6</name><operator>)</operator></expr> ?</condition><then> <expr><name>AF_INET6</name></expr> </then><else>: <expr><name>AF_INET</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>c</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>synth_domains</name></name></expr>;</init> <condition><expr><name>c</name></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tail</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pref</name></decl>;</decl_stmt>
      
      <for>for <control>(<init><expr><name>tail</name> <operator>=</operator> <name>name</name></expr><operator>,</operator> <expr><name>pref</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>prefix</name></name></expr>;</init> <condition><expr><operator>*</operator><name>tail</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pref</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pref</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>tail</name><operator>++</operator></expr><operator>,</operator> <expr><name>pref</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>c1</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>pref</name></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>c2</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>tail</name></expr></init></decl>;</decl_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name>c1</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c1</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>c1</name> <operator>+=</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  <if_stmt><if>if <condition>(<expr><name>c2</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c2</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>c2</name> <operator>+=</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content>
	    <break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></for>
      
      <if_stmt><if>if <condition>(<expr><name>pref</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pref</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if></if_stmt> <comment type="block">/* prefix match fail */</comment>

      <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>indexed</name></name></expr>)</condition>
	<block>{<block_content>
	  <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>tail</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
		<break>break;</break></block_content></block></if></if_stmt>
	    </block_content>}</block></for>
	  
	  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
	    <continue>continue;</continue></block_content></block></if></if_stmt>
	  
	  <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><call><name>hostname_isequal</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>, <argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><name>prot</name> <operator>==</operator> <name>AF_INET</name></expr>)</condition>
		<block>{<block_content>
		  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>tail</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		   <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>is6</name></name> <operator>&amp;&amp;</operator>
		      <name>index</name> <operator>&lt;=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		    <block>{<block_content>
		      <expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>addr4</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		    </block_content>}</block></if></if_stmt>
		</block_content>}</block></if> 
	      <else>else
		<block>{<block_content>
		  <decl_stmt><decl><type><name>u64</name></type> <name>index</name> <init>= <expr><call><name>atoll</name><argument_list>(<argument><expr><name>tail</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		  
		  <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>is6</name></name> <operator>&amp;&amp;</operator>
		      <name>index</name> <operator>&lt;=</operator> <call><name>addr6part</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>end6</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>addr6part</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		    <block>{<block_content>
		      <decl_stmt><decl><type><name>u64</name></type> <name>start</name> <init>= <expr><call><name>addr6part</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		      <expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>addr6</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>start6</name></name></expr>;</expr_stmt>
		      <expr_stmt><expr><call><name>setaddr6part</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>addr6</name></name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		    </block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <comment type="block">/* NB, must not alter name if we return zero */</comment>
	  <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>tail</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&gt;=</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
		<continue>continue;</continue></block_content></block></if></if_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><name>prot</name> <operator>==</operator> <name>AF_INET6</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;=</operator><literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'F'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;=</operator><literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'f'</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> 
		<continue>continue;</continue></block_content></block></if></if_stmt>
	      
	      <break>break;</break>
	    </block_content>}</block></for>
	  
	  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
	    <continue>continue;</continue></block_content></block></if></if_stmt>
	  
	  <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>	
	  
	  <if_stmt><if>if <condition>(<expr><name>prot</name> <operator>==</operator> <name>AF_INET6</name> <operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>tail</name></expr></argument>, <argument><expr><literal type="string">"--ffff-"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>tail</name></expr>)</condition>
	    <block>{<block_content>
	      <comment type="block">/* special hack for v4-mapped. */</comment>
	      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tail</name></expr></argument>, <argument><expr><literal type="string">"::ffff:"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>tail</name> <operator>+</operator> <literal type="number">7</literal></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
	    </block_content>}</block></if>
	  <else>else
	    <block>{<block_content>
	      <comment type="block">/* swap . or : for - */</comment>
	      <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>tail</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>
		  <block>{<block_content>
		    <if_stmt><if>if <condition>(<expr><name>prot</name> <operator>==</operator> <name>AF_INET</name></expr>)</condition><block type="pseudo"><block_content>
		      <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt></block_content></block></if>
		    <else>else<block type="pseudo"><block_content>
		      <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
		  </block_content>}</block></if></if_stmt></block_content></block></for>
	    </block_content>}</block></else></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><call><name>hostname_isequal</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>, <argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>inet_pton</name><argument_list>(<argument><expr><name>prot</name></expr></argument>, <argument><expr><name>tail</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>found</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>prot</name> <operator>==</operator> <name>AF_INET</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>match_domain</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>addr4</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>match_domain6</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>addr6</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
      
      <comment type="block">/* restore name */</comment>
      <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>tail</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
      
      <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
      
      
      <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>is_rev_synth</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>all_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
   <decl_stmt><decl><type><name><name>struct</name> <name>cond_domain</name></name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

   <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>F_IPV4</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>=</operator> <call><name>search_domain</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>addr4</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>synth_domains</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> 
     <block>{<block_content>
       <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
       
       <expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
       <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>indexed</name></name></expr>)</condition>
	 <block>{<block_content>
	   <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name> <init>= <expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>addr4</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	   <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>MAXDNAME</name></expr></argument>, <argument><expr><literal type="string">"%s%u"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>prefix</name></name></expr> ?</condition><then> <expr><name><name>c</name><operator>-&gt;</operator><name>prefix</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 </block_content>}</block></if>
       <else>else
	 <block>{<block_content>
	   <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>prefix</name></name></expr>)</condition><block type="pseudo"><block_content>
	     <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><name>MAXDNAME</name> <operator>-</operator> <name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
       
       	   <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>addr4</name></name></expr></argument>, <argument><expr><name>name</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	   <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>name</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	     <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
	       <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
	 </block_content>}</block></else></if_stmt>
       
       <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>, <argument><expr><name>MAXDNAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>, <argument><expr><name>MAXDNAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <return>return <expr><literal type="number">1</literal></expr>;</return>
     </block_content>}</block></if></if_stmt>

   <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>F_IPV6</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>=</operator> <call><name>search_domain6</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>addr6</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>synth_domains</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> 
     <block>{<block_content>
       <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
       
       <expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
       <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>indexed</name></name></expr>)</condition>
	 <block>{<block_content>
	   <decl_stmt><decl><type><name>u64</name></type> <name>index</name> <init>= <expr><call><name>addr6part</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>addr6</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>addr6part</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	   <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>MAXDNAME</name></expr></argument>, <argument><expr><literal type="string">"%s%llu"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>prefix</name></name></expr> ?</condition><then> <expr><name><name>c</name><operator>-&gt;</operator><name>prefix</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 </block_content>}</block></if>
       <else>else
	 <block>{<block_content>
	   <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>prefix</name></name></expr>)</condition><block type="pseudo"><block_content>
	     <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><name>MAXDNAME</name> <operator>-</operator> <name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
       
	   <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>addr6</name></name></expr></argument>, <argument><expr><name>name</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	   <comment type="block">/* IPv6 presentation address can start with ":", but valid domain names
	      cannot start with "-" so prepend a zero in that case. */</comment>
	   <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>prefix</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition>
	     <block>{<block_content>
	       <expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
	       <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>addr6</name></name></expr></argument>, <argument><expr><name>name</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	     </block_content>}</block></if></if_stmt>
	   
	   <comment type="block">/* V4-mapped have periods.... */</comment>
	   <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>name</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	     <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">':'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
	       <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
	   
	 </block_content>}</block></else></if_stmt>

       <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>, <argument><expr><name>MAXDNAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>, <argument><expr><name>MAXDNAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       
       <return>return <expr><literal type="number">1</literal></expr>;</return>
     </block_content>}</block></if></if_stmt>
   
   <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>match_domain</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cond_domain</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>interface</name></name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>addrlist</name></name> <modifier>*</modifier></type><name>al</name></decl>;</decl_stmt>
      <for>for <control>(<init><expr><name>al</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>al</name></name></expr>;</init> <condition><expr><name>al</name></expr>;</condition> <incr><expr><name>al</name> <operator>=</operator> <name><name>al</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>al</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ADDRLIST_IPV6</name><operator>)</operator> <operator>&amp;&amp;</operator>
	    <call><name>is_same_net_prefix</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>al</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr4</name></name></expr></argument>, <argument><expr><name><name>al</name><operator>-&gt;</operator><name>prefixlen</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>is6</name></name> <operator>&amp;&amp;</operator>
	   <call><name>ntohl</name><argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	   <call><name>ntohl</name><argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>cond_domain</name></name> <modifier>*</modifier></type><name>search_domain</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cond_domain</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <for>for <control>(<init>;</init> <condition><expr><name>c</name></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><call><name>match_domain</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>c</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
  
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>get_domain</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>cond_domain</name></name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>search_domain</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>cond_domain</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name><name>c</name><operator>-&gt;</operator><name>domain</name></name></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><name><name>daemon</name><operator>-&gt;</operator><name>domain_suffix</name></name></expr>;</return>
</block_content>}</block></function> 

<function><type><specifier>static</specifier> <name>int</name></type> <name>match_domain6</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cond_domain</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    
  <comment type="block">/* subnet from interface address. */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>interface</name></name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>addrlist</name></name> <modifier>*</modifier></type><name>al</name></decl>;</decl_stmt>
      <for>for <control>(<init><expr><name>al</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>al</name></name></expr>;</init> <condition><expr><name>al</name></expr>;</condition> <incr><expr><name>al</name> <operator>=</operator> <name><name>al</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><name><name>al</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ADDRLIST_IPV6</name> <operator>&amp;&amp;</operator>
	    <call><name>is_same_net6</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>al</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr6</name></name></expr></argument>, <argument><expr><name><name>al</name><operator>-&gt;</operator><name>prefixlen</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>is6</name></name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>prefixlen</name></name> <operator>&gt;=</operator> <literal type="number">64</literal></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>u64</name></type> <name>addrpart</name> <init>= <expr><call><name>addr6part</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	  <if_stmt><if>if <condition>(<expr><call><name>is_same_net6</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	      <name>addrpart</name> <operator>&gt;=</operator> <call><name>addr6part</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	      <name>addrpart</name> <operator>&lt;=</operator> <call><name>addr6part</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>end6</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><call><name>is_same_net6</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>prefixlen</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>cond_domain</name></name> <modifier>*</modifier></type><name>search_domain6</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cond_domain</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <for>for <control>(<init>;</init> <condition><expr><name>c</name></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><call><name>match_domain6</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>c</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
  
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>get_domain6</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>cond_domain</name></name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>=</operator> <call><name>search_domain6</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>cond_domain</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name><name>c</name><operator>-&gt;</operator><name>domain</name></name></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><name><name>daemon</name><operator>-&gt;</operator><name>domain_suffix</name></name></expr>;</return>
</block_content>}</block></function> 
</unit>
