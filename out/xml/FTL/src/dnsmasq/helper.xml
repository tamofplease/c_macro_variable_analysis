<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/dnsmasq/helper.c"><comment type="block">/* dnsmasq is Copyright (c) 2000-2022 Simon Kelley

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 dated June, 1991, or
   (at your option) version 3 dated 29 June, 2007.
 
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
     
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnsmasq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../log.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SCRIPT</name></cpp:ifdef>

<comment type="block">/* This file has code to fork a helper process which receives data via a pipe 
   shared with the main process and which is responsible for calling a script when
   DHCP leases change.

   The helper process is forked before the main process drops root, so it retains root 
   privs to pass on to the script. For this reason it tries to be paranoid about 
   data received from the main process, in case that has been compromised. We don't
   want the helper to give an attacker root. In particular, the script to be run is
   not settable via the pipe, once the fork has taken place it is not alterable by the 
   main process.
*/</comment>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>my_setenv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>grab_extradata</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LUASCRIPT</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_COMPAT_ALL</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lua.h&gt;</cpp:file></cpp:include>  
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lualib.h&gt;</cpp:file></cpp:include>  
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lauxlib.h&gt;</cpp:file></cpp:include>  

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>lua_open</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lua_open</name><parameter_list>()</parameter_list></cpp:macro>     <cpp:value>luaL_newstate()</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>grab_extradata_lua</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>field</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<struct>struct <name>script_data</name>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>action</name></decl>, <decl><type ref="prev"/><name>hwaddr_len</name></decl>, <decl><type ref="prev"/><name>hwaddr_type</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>clid_len</name></decl>, <decl><type ref="prev"/><name>hostname_len</name></decl>, <decl><type ref="prev"/><name>ed_len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl>, <decl><type ref="prev"/><name>giaddr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>remaining_time</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_BROKEN_RTC</name></cpp:ifdef>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>length</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>time_t</name></type> <name>expires</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_TFTP</name></cpp:ifdef>
  <decl_stmt><decl><type><name>off_t</name></type> <name>file_len</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>addr6</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
  <decl_stmt><decl><type><name>int</name></type> <name>vendorclass_count</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>iaid</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hwaddr</name><index>[<expr><name>DHCP_CHADDR_MAX</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>interface</name><index>[<expr><name>IF_NAMESIZE</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>script_data</name></name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>bytes_in_buf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>buf_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>create_helper</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event_fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>err_fd</name></decl></parameter>, <parameter><decl><type><name>uid_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>gid_t</name></type> <name>gid</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>max_fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name><name>pipefd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>sigact</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>alloc_buff</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* create the pipe through which the main program sends us commands,
     then fork our process. */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>pipe</name><argument_list>(<argument><expr><name>pipefd</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>fix_fd</name><argument_list>(<argument><expr><name><name>pipefd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>pid</name> <operator>=</operator> <call><name>fork</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>send_event</name><argument_list>(<argument><expr><name>err_fd</name></expr></argument>, <argument><expr><name>EVENT_PIPE_ERR</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pid</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pipefd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* close reader side */</comment>
      <return>return <expr><name><name>pipefd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>
    </block_content>}</block></if></if_stmt>

  <comment type="block" format="doxygen">/**** Pi-hole modification ****/</comment>
  <expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Started dnsmasq helper"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block" format="doxygen">/******************************/</comment>

  <comment type="block">/* ignore SIGTERM and SIGINT, so that we can clean up when the main process gets hit
     and SIGALRM so that we can use sleep() */</comment>
  <expr_stmt><expr><name><name>sigact</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>SIG_IGN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sigact</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sigact</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sigact</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sigact</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sigact</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DEBUG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>uid</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>gid_t</name></type> <name>dummy</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>setgroups</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> 
	  <call><name>setgid</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> 
	  <call><name>setuid</name><argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NO_FORK</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <comment type="block">/* send error to daemon process if no-fork */</comment>
	    <expr_stmt><expr><call><name>send_event</name><argument_list>(<argument><expr><name>event_fd</name></expr></argument>, <argument><expr><name>EVENT_USER_ERR</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>scriptuser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	  <else>else
	    <block>{<block_content>
	      <comment type="block">/* kill daemon */</comment>
	      <expr_stmt><expr><call><name>send_event</name><argument_list>(<argument><expr><name>event_fd</name></expr></argument>, <argument><expr><name>EVENT_DIE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <comment type="block">/* return error */</comment>
	      <expr_stmt><expr><call><name>send_event</name><argument_list>(<argument><expr><name>err_fd</name></expr></argument>, <argument><expr><name>EVENT_USER_ERR</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>scriptuser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></else></if_stmt>
	  <expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

  <comment type="block">/* close all the sockets etc, we don't need them here. 
     Don't close err_fd, in case the lua-init fails.
     Note that we have to do this before lua init
     so we don't close any lua fds. */</comment>
  <expr_stmt><expr><call><name>close_fds</name><argument_list>(<argument><expr><name>max_fd</name></expr></argument>, <argument><expr><name><name>pipefd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>event_fd</name></expr></argument>, <argument><expr><name>err_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LUASCRIPT</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>luascript</name></name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lua_err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>lua</name> <operator>=</operator> <call><name>lua_open</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>luaL_openlibs</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* get Lua to load our script file */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>luaL_dofile</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>luascript</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>lua_err</name> <operator>=</operator> <call><name>lua_tostring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else
	<block>{<block_content>
	  <expr_stmt><expr><call><name>lua_getglobal</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="string">"lease"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><call><name>lua_type</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LUA_TFUNCTION</name></expr>)</condition><block type="pseudo"><block_content> 
	    <expr_stmt><expr><name>lua_err</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"lease() function missing in Lua script"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>lua_err</name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NO_FORK</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DEBUG</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <comment type="block">/* send error to daemon process if no-fork */</comment>
	    <expr_stmt><expr><call><name>send_event</name><argument_list>(<argument><expr><name>event_fd</name></expr></argument>, <argument><expr><name>EVENT_LUA_ERR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>lua_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	  <else>else
	    <block>{<block_content>
	      <comment type="block">/* kill daemon */</comment>
	      <expr_stmt><expr><call><name>send_event</name><argument_list>(<argument><expr><name>event_fd</name></expr></argument>, <argument><expr><name>EVENT_DIE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <comment type="block">/* return error */</comment>
	      <expr_stmt><expr><call><name>send_event</name><argument_list>(<argument><expr><name>err_fd</name></expr></argument>, <argument><expr><name>EVENT_LUA_ERR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>lua_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></else></if_stmt>
	  <expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
      
      <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* remove nil from stack */</comment>
      <expr_stmt><expr><call><name>lua_getglobal</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="string">"init"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>lua_type</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>LUA_TFUNCTION</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>lua_call</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>  <comment type="block">/* remove nil from stack */</comment>	
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* All init done, close our copy of the error pipe, so that main process can return */</comment>
  <if_stmt><if>if <condition>(<expr><name>err_fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>err_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    
  <comment type="block">/* loop here */</comment>
  <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>script_data</name></name></type> <name>data</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>action_str</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hostname</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>domain</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>extradata</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>is6</name></decl>, <decl><type ref="prev"/><name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name><name>pipeout</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

      <comment type="block">/* Free rarely-allocated memory from previous iteration. */</comment>
      <if_stmt><if>if <condition>(<expr><name>alloc_buff</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>alloc_buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>alloc_buff</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
      
      <comment type="block">/* we read zero bytes when pipe closed: this is our signal to exit */</comment> 
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_write</name><argument_list>(<argument><expr><name><name>pipefd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LUASCRIPT</name></cpp:ifdef>
	  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>luascript</name></name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>lua_getglobal</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="string">"shutdown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><call><name>lua_type</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>LUA_TFUNCTION</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>lua_call</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	  <expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
 
      <expr_stmt><expr><name>is6</name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>data</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>LEASE_TA</name> <operator>|</operator> <name>LEASE_NA</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>action</name></name> <operator>==</operator> <name>ACTION_DEL</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>action_str</name> <operator>=</operator> <literal type="string">"del"</literal></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name><name>data</name><operator>.</operator><name>action</name></name> <operator>==</operator> <name>ACTION_ADD</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>action_str</name> <operator>=</operator> <literal type="string">"add"</literal></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name><name>data</name><operator>.</operator><name>action</name></name> <operator>==</operator> <name>ACTION_OLD</name> <operator>||</operator> <name><name>data</name><operator>.</operator><name>action</name></name> <operator>==</operator> <name>ACTION_OLD_HOSTNAME</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>action_str</name> <operator>=</operator> <literal type="string">"old"</literal></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name><name>data</name><operator>.</operator><name>action</name></name> <operator>==</operator> <name>ACTION_TFTP</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>action_str</name> <operator>=</operator> <literal type="string">"tftp"</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name>is6</name> <operator>=</operator> <operator>(</operator><name><name>data</name><operator>.</operator><name>flags</name></name> <operator>!=</operator> <name>AF_INET</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><name><name>data</name><operator>.</operator><name>action</name></name> <operator>==</operator> <name>ACTION_ARP</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>action_str</name> <operator>=</operator> <literal type="string">"arp-add"</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name>is6</name> <operator>=</operator> <operator>(</operator><name><name>data</name><operator>.</operator><name>flags</name></name> <operator>!=</operator> <name>AF_INET</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if>
       <if type="elseif">else if <condition>(<expr><name><name>data</name><operator>.</operator><name>action</name></name> <operator>==</operator> <name>ACTION_ARP_DEL</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>action_str</name> <operator>=</operator> <literal type="string">"arp-del"</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name>is6</name> <operator>=</operator> <operator>(</operator><name><name>data</name><operator>.</operator><name>flags</name></name> <operator>!=</operator> <name>AF_INET</name><operator>)</operator></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>data</name><operator>.</operator><name>action</name></name> <operator>=</operator> <name>ACTION_ARP</name></expr>;</expr_stmt>
	</block_content>}</block></if>
       <if type="elseif">else if <condition>(<expr><name><name>data</name><operator>.</operator><name>action</name></name> <operator>==</operator> <name>ACTION_RELAY_SNOOP</name></expr>)</condition>
	 <block>{<block_content>
	   <expr_stmt><expr><name>is6</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	   <expr_stmt><expr><name>action_str</name> <operator>=</operator> <literal type="string">"relay-snoop"</literal></expr>;</expr_stmt>
	 </block_content>}</block></if>
       <else>else<block type="pseudo"><block_content>
	 <continue>continue;</continue></block_content></block></else></if_stmt>

      <comment type="block" format="doxygen">/************************** Pi-hole modification **************************/</comment>
      <expr_stmt><expr><call><name>FTL_log_helper</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>action_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block" format="doxygen">/**************************************************************************/</comment>
      	
      <comment type="block">/* stringify MAC into dhcp_buff */</comment>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>hwaddr_type</name></name> <operator>!=</operator> <name>ARPHRD_ETHER</name> <operator>||</operator> <name><name>data</name><operator>.</operator><name>hwaddr_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%.2x-"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>hwaddr_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>.</operator><name>hwaddr_len</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>&lt;</operator> <name>DHCP_CHADDR_MAX</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
	  <expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%.2x"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>hwaddr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name><name>data</name><operator>.</operator><name>hwaddr_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
      
      <comment type="block">/* supplied data may just exceed normal buffer (unlikely) */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>data</name><operator>.</operator><name>hostname_len</name></name> <operator>+</operator> <name><name>data</name><operator>.</operator><name>ed_len</name></name> <operator>+</operator> <name><name>data</name><operator>.</operator><name>clid_len</name></name><operator>)</operator> <operator>&gt;</operator> <name>MAXDNAME</name> <operator>&amp;&amp;</operator> 
	  <operator>!</operator><operator>(</operator><name>alloc_buff</name> <operator>=</operator> <name>buf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>hostname_len</name></name> <operator>+</operator> <name><name>data</name><operator>.</operator><name>ed_len</name></name> <operator>+</operator> <name><name>data</name><operator>.</operator><name>clid_len</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_write</name><argument_list>(<argument><expr><name><name>pipefd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, 
		      <argument><expr><name><name>data</name><operator>.</operator><name>hostname_len</name></name> <operator>+</operator> <name><name>data</name><operator>.</operator><name>ed_len</name></name> <operator>+</operator> <name><name>data</name><operator>.</operator><name>clid_len</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if></if_stmt>

      <comment type="block">/* CLID into packet */</comment>
      <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>.</operator><name>clid_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
	  <expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%.2x"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name><name>data</name><operator>.</operator><name>clid_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 
	      <expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
      <if_stmt><if>if <condition>(<expr><name>is6</name></expr>)</condition>
	<block>{<block_content>
	  <comment type="block">/* or IAID and server DUID for IPv6 */</comment>
	  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff3</name></name></expr></argument>, <argument><expr><literal type="string">"%s%u"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>data</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>LEASE_TA</name></expr> ?</condition><then> <expr><literal type="string">"T"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>iaid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
	  <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_packet</name><operator>.</operator><name>iov_base</name></name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>duid_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	    <block>{<block_content>
	      <expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%.2x"</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>duid</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>duid_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></for>

	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

      <expr_stmt><expr><name>buf</name> <operator>+=</operator> <name><name>data</name><operator>.</operator><name>clid_len</name></name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>hostname_len</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dot</name></decl>;</decl_stmt>
	  <expr_stmt><expr><name>hostname</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>hostname</name><index>[<expr><name><name>data</name><operator>.</operator><name>hostname_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>action</name></name> <operator>!=</operator> <name>ACTION_TFTP</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>.</operator><name>action</name></name> <operator>!=</operator> <name>ACTION_RELAY_SNOOP</name></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>legal_hostname</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>hostname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
	      <if type="elseif">else if <condition>(<expr><operator>(</operator><name>dot</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name>domain</name> <operator>=</operator> <name>dot</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
		  <expr_stmt><expr><operator>*</operator><name>dot</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt> 
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
    
      <expr_stmt><expr><name>extradata</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name><name>data</name><operator>.</operator><name>hostname_len</name></name></expr>;</expr_stmt>
    
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is6</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>addr6</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_TFTP</name></cpp:ifdef>
      <comment type="block">/* file length */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>action</name></name> <operator>==</operator> <name>ACTION_TFTP</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><ternary><condition><expr><name>is6</name></expr> ?</condition><then> <expr><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr> </then><else>: <expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>data</name><operator>.</operator><name>file_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LUASCRIPT</name></cpp:ifdef>
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>luascript</name></name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>action</name></name> <operator>==</operator> <name>ACTION_TFTP</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>lua_getglobal</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="string">"tftp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	      <if_stmt><if>if <condition>(<expr><call><name>lua_type</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LUA_TFUNCTION</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> <comment type="block">/* tftp function optional */</comment>
	      <else>else
		<block>{<block_content>
		  <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>action_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* arg1 - action */</comment>
		  <expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>               <comment type="block">/* arg2 - data table */</comment>
		  <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"destination_address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"file_name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
		  <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><ternary><condition><expr><name>is6</name></expr> ?</condition><then> <expr><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr> </then><else>: <expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"file_size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>lua_call</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* pass 2 values, expect 0 */</comment>
		</block_content>}</block></else></if_stmt>
	    </block_content>}</block></if>
	  <if type="elseif">else if <condition>(<expr><name><name>data</name><operator>.</operator><name>action</name></name> <operator>==</operator> <name>ACTION_RELAY_SNOOP</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>lua_getglobal</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="string">"snoop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	      <if_stmt><if>if <condition>(<expr><call><name>lua_type</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LUA_TFUNCTION</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> <comment type="block">/* tftp function optional */</comment>
	      <else>else
		<block>{<block_content>
		  <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>action_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* arg1 - action */</comment>
		  <expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>               <comment type="block">/* arg2 - data table */</comment>
		  <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"client_address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"prefix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
		  <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>interface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"client_interface"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>lua_call</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* pass 2 values, expect 0 */</comment>
		</block_content>}</block></else></if_stmt>
	    </block_content>}</block></if>
	  <if type="elseif">else if <condition>(<expr><name><name>data</name><operator>.</operator><name>action</name></name> <operator>==</operator> <name>ACTION_ARP</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>lua_getglobal</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="string">"arp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	      <if_stmt><if>if <condition>(<expr><call><name>lua_type</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LUA_TFUNCTION</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> <comment type="block">/* arp function optional */</comment>
	      <else>else
		<block>{<block_content>
		  <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>action_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* arg1 - action */</comment>
		  <expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>               <comment type="block">/* arg2 - data table */</comment>
		  <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"client_address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"mac_address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>lua_call</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* pass 2 values, expect 0 */</comment>
		</block_content>}</block></else></if_stmt>
	    </block_content>}</block></if>
	  <else>else
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>lua_getglobal</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="string">"lease"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="block">/* function to call */</comment>
	      <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>action_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* arg1 - action */</comment>
	      <expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>               <comment type="block">/* arg2 - data table */</comment>
	      
	      <if_stmt><if>if <condition>(<expr><name>is6</name></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"client_duid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_packet</name><operator>.</operator><name>iov_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"server_duid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff3</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"iaid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is6</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>.</operator><name>clid_len</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"client_id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>interface</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>interface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"interface"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	      
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_BROKEN_RTC</name></cpp:ifdef>	
	      <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"lease_length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	      <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>expires</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"lease_expires"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	      
	      <if_stmt><if>if <condition>(<expr><name>hostname</name></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"hostname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><name>domain</name></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"domain"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	      
	      <expr_stmt><expr><name>end</name> <operator>=</operator> <name>extradata</name> <operator>+</operator> <name><name>data</name><operator>.</operator><name>ed_len</name></name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>buf</name> <operator>=</operator> <name>extradata</name></expr>;</expr_stmt>

	      <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>data</name><operator>.</operator><name>ed_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"data_missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is6</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>grab_extradata_lua</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="string">"vendor_class"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
	      <if type="elseif">else  if <condition>(<expr><name><name>data</name><operator>.</operator><name>vendorclass_count</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>, <argument><expr><literal type="string">"vendor_class_id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>grab_extradata_lua</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>.</operator><name>vendorclass_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		    <block>{<block_content>
		      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>, <argument><expr><literal type="string">"vendor_class%i"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>grab_extradata_lua</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    </block_content>}</block></for>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	      
	      <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>grab_extradata_lua</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="string">"supplied_hostname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is6</name></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>grab_extradata_lua</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="string">"cpewan_oui"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>grab_extradata_lua</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="string">"cpewan_serial"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
		  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>grab_extradata_lua</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="string">"cpewan_class"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>grab_extradata_lua</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="string">"circuit_id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>grab_extradata_lua</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="string">"subscriber_id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>grab_extradata_lua</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="string">"remote_id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

	      <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>grab_extradata_lua</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="string">"requested_options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>grab_extradata_lua</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="string">"mud_url"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>grab_extradata_lua</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="string">"tags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><name>is6</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>grab_extradata_lua</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="string">"relay_address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	      <if type="elseif">else if <condition>(<expr><name><name>data</name><operator>.</operator><name>giaddr</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>giaddr</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"relay_address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	      
	      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>buf</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>, <argument><expr><literal type="string">"user_class%i"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>grab_extradata_lua</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	      
	      <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>action</name></name> <operator>!=</operator> <name>ACTION_DEL</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>.</operator><name>remaining_time</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>remaining_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"time_remaining"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>action</name></name> <operator>==</operator> <name>ACTION_OLD_HOSTNAME</name> <operator>&amp;&amp;</operator> <name>hostname</name></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"old_hostname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is6</name> <operator>||</operator> <name><name>data</name><operator>.</operator><name>hwaddr_len</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"mac_address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	      
	      <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"ip_address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    
	      <expr_stmt><expr><call><name>lua_call</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* pass 2 values, expect 0 */</comment>
	    </block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

      <comment type="block">/* no script, just lua */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>daemon</name><operator>-&gt;</operator><name>lease_change_command</name></name></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if></if_stmt>

      <comment type="block">/* Pipe to capture stdout and stderr from script */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DEBUG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>pipe</name><argument_list>(<argument><expr><name>pipeout</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if></if_stmt>
      
      <comment type="block">/* possible fork errors are all temporary resource problems */</comment>
      <while>while <condition>(<expr><operator>(</operator><name>pid</name> <operator>=</operator> <call><name>fork</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>errno</name> <operator>==</operator> <name>EAGAIN</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>ENOMEM</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

      <if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DEBUG</name></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pipeout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pipeout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	  <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
      
      <comment type="block">/* wait for child to complete */</comment>
      <if_stmt><if>if <condition>(<expr><name>pid</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DEBUG</name></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
	  
	      <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pipeout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      
	      <comment type="block">/* Read lines sent to stdout/err by the script and pass them back to be logged */</comment>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>fdopen</name><argument_list>(<argument><expr><name><name>pipeout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pipeout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	      <else>else
		<block>{<block_content>
		  <while>while <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>packet_buff_sz</name></name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition>
		    <block>{<block_content>
		      <comment type="block">/* do not include new lines, log will append them */</comment>
		      <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		      <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
			  <expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt>
			  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>packet</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
			    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>packet</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		      <expr_stmt><expr><call><name>send_event</name><argument_list>(<argument><expr><name>event_fd</name></expr></argument>, <argument><expr><name>EVENT_SCRIPT_LOG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    </block_content>}</block></while>
		  <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	    </block_content>}</block></if></if_stmt>
	  
	  <comment type="block">/* reap our children's children, if necessary */</comment>
	  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name>pid_t</name></type> <name>rc</name> <init>= <expr><call><name>wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>pid</name></expr>)</condition>
		<block>{<block_content>
		  <comment type="block">/* On error send event back to main process for logging */</comment>
		  <if_stmt><if>if <condition>(<expr><call><name>WIFSIGNALED</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><call><name>send_event</name><argument_list>(<argument><expr><name>event_fd</name></expr></argument>, <argument><expr><name>EVENT_KILLED</name></expr></argument>, <argument><expr><call><name>WTERMSIG</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		  <if type="elseif">else if <condition>(<expr><call><name>WIFEXITED</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>WEXITSTATUS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><call><name>send_event</name><argument_list>(<argument><expr><name>event_fd</name></expr></argument>, <argument><expr><name>EVENT_EXITED</name></expr></argument>, <argument><expr><call><name>WEXITSTATUS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  <break>break;</break>
		</block_content>}</block></if></if_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
		<break>break;</break></block_content></block></if></if_stmt>
	    </block_content>}</block></while>
	  
	  <continue>continue;</continue>
	</block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DEBUG</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <comment type="block">/* map stdout/stderr of script to pipeout */</comment>
	  <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pipeout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name><name>pipeout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name><name>pipeout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>STDERR_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pipeout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>action</name></name> <operator>!=</operator> <name>ACTION_TFTP</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>.</operator><name>action</name></name> <operator>!=</operator> <name>ACTION_ARP</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>.</operator><name>action</name></name> <operator>!=</operator> <name>ACTION_RELAY_SNOOP</name></expr>)</condition>
	<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
	  <expr_stmt><expr><call><name>my_setenv</name><argument_list>(<argument><expr><literal type="string">"DNSMASQ_IAID"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>is6</name></expr> ?</condition><then> <expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff3</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>my_setenv</name><argument_list>(<argument><expr><literal type="string">"DNSMASQ_SERVER_DUID"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>is6</name></expr> ?</condition><then> <expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_packet</name><operator>.</operator><name>iov_base</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	  <expr_stmt><expr><call><name>my_setenv</name><argument_list>(<argument><expr><literal type="string">"DNSMASQ_MAC"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>is6</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>.</operator><name>hwaddr_len</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	  
	  <expr_stmt><expr><call><name>my_setenv</name><argument_list>(<argument><expr><literal type="string">"DNSMASQ_CLIENT_ID"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>!</operator><name>is6</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>.</operator><name>clid_len</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>my_setenv</name><argument_list>(<argument><expr><literal type="string">"DNSMASQ_INTERFACE"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>interface</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>data</name><operator>.</operator><name>interface</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_BROKEN_RTC</name></cpp:ifdef>
	  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>my_setenv</name><argument_list>(<argument><expr><literal type="string">"DNSMASQ_LEASE_LENGTH"</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>data</name><operator>.</operator><name>expires</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>my_setenv</name><argument_list>(<argument><expr><literal type="string">"DNSMASQ_LEASE_EXPIRES"</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	  
	  <expr_stmt><expr><call><name>my_setenv</name><argument_list>(<argument><expr><literal type="string">"DNSMASQ_DOMAIN"</literal></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
	  <expr_stmt><expr><name>end</name> <operator>=</operator> <name>extradata</name> <operator>+</operator> <name><name>data</name><operator>.</operator><name>ed_len</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>buf</name> <operator>=</operator> <name>extradata</name></expr>;</expr_stmt>

	  <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>ed_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>my_setenv</name><argument_list>(<argument><expr><literal type="string">"DNSMASQ_DATA_MISSING"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is6</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>grab_extradata</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="string">"DNSMASQ_VENDOR_CLASS"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
	  <else>else
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>vendorclass_count</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>grab_extradata</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="string">"DNSMASQ_VENDOR_CLASS_ID"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>.</operator><name>vendorclass_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		    <block>{<block_content>
		      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>, <argument><expr><literal type="string">"DNSMASQ_VENDOR_CLASS%i"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>grab_extradata</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    </block_content>}</block></for>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	  
	  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>grab_extradata</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="string">"DNSMASQ_SUPPLIED_HOSTNAME"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is6</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>grab_extradata</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="string">"DNSMASQ_CPEWAN_OUI"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>grab_extradata</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="string">"DNSMASQ_CPEWAN_SERIAL"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
	      <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>grab_extradata</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="string">"DNSMASQ_CPEWAN_CLASS"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>grab_extradata</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="string">"DNSMASQ_CIRCUIT_ID"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>grab_extradata</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="string">"DNSMASQ_SUBSCRIBER_ID"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>grab_extradata</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="string">"DNSMASQ_REMOTE_ID"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	  
	  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>grab_extradata</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="string">"DNSMASQ_REQUESTED_OPTIONS"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>grab_extradata</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="string">"DNSMASQ_MUD_URL"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>grab_extradata</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="string">"DNSMASQ_TAGS"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  	  
	  <if_stmt><if>if <condition>(<expr><name>is6</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>grab_extradata</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="string">"DNSMASQ_RELAY_ADDRESS"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	  <else>else
	    <block>{<block_content>
	      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>giaddr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	      <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>giaddr</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name>giaddr</name> <operator>=</operator> <call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>giaddr</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      <expr_stmt><expr><call><name>my_setenv</name><argument_list>(<argument><expr><literal type="string">"DNSMASQ_RELAY_ADDRESS"</literal></expr></argument>, <argument><expr><name>giaddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></else></if_stmt>
	  
	  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>buf</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>, <argument><expr><literal type="string">"DNSMASQ_USER_CLASS%i"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>grab_extradata</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></for>
	  
	  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>remaining_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>my_setenv</name><argument_list>(<argument><expr><literal type="string">"DNSMASQ_TIME_REMAINING"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>data</name><operator>.</operator><name>action</name></name> <operator>!=</operator> <name>ACTION_DEL</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>.</operator><name>remaining_time</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
	  <expr_stmt><expr><call><name>my_setenv</name><argument_list>(<argument><expr><literal type="string">"DNSMASQ_OLD_HOSTNAME"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>data</name><operator>.</operator><name>action</name></name> <operator>==</operator> <name>ACTION_OLD_HOSTNAME</name></expr> ?</condition><then> <expr><name>hostname</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>action</name></name> <operator>==</operator> <name>ACTION_OLD_HOSTNAME</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>hostname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  
	  <expr_stmt><expr><call><name>my_setenv</name><argument_list>(<argument><expr><literal type="string">"DNSMASQ_LOG_DHCP"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOG_OPTS</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"1"</literal></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
      
      <comment type="block">/* we need to have the event_fd around if exec fails */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><name>event_fd</name></expr></argument>, <argument><expr><name>F_GETFD</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>fcntl</name><argument_list>(<argument><expr><name>event_fd</name></expr></argument>, <argument><expr><name>F_SETFD</name></expr></argument>, <argument><expr><name>i</name> <operator>|</operator> <name>FD_CLOEXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pipefd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>action</name></name> <operator>==</operator> <name>ACTION_RELAY_SNOOP</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>interface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <comment type="block" format="doxygen">/**************************** Pi-hole modification ****************************/</comment>
      <expr_stmt><expr><call><name>FTL_log_helper</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>lease_change_command</name></name></expr></argument>, <argument><expr><name>action_str</name></expr></argument>,
		     <argument><expr><ternary><condition><expr><operator>(</operator><name>is6</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>.</operator><name>action</name></name> <operator>!=</operator> <name>ACTION_ARP</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr> </then><else>: <expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></else></ternary></expr></argument>,
		     <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block" format="doxygen">/******************************************************************************/</comment>

      <expr_stmt><expr><name>p</name> <operator>=</operator>  <call><name>strrchr</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>lease_change_command</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>execl</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>lease_change_command</name></name></expr></argument>, 
		<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr> </then><else>: <expr><name><name>daemon</name><operator>-&gt;</operator><name>lease_change_command</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>action_str</name></expr></argument>, 
		<argument><expr><ternary><condition><expr><operator>(</operator><name>is6</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>.</operator><name>action</name></name> <operator>!=</operator> <name>ACTION_ARP</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr> </then><else>: <expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></else></ternary></expr></argument>, 
		<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>err</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
      <comment type="block">/* failed, send event so the main process logs the problem */</comment>
      <comment type="block" format="doxygen">/**************************** Pi-hole modification ****************************/</comment>
      <expr_stmt><expr><call><name>FTL_log_helper</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>lease_change_command</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block" format="doxygen">/******************************************************************************/</comment>
      <expr_stmt><expr><call><name>send_event</name><argument_list>(<argument><expr><name>event_fd</name></expr></argument>, <argument><expr><name>EVENT_EXEC_ERR</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>my_setenv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>error</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>unsetenv</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><call><name>setenv</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
 
<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>grab_extradata</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>buf</name> <operator>!=</operator> <name>end</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <for>for <control>(<init><expr><name>next</name> <operator>=</operator> <name>buf</name></expr>;</init> <condition>;</condition> <incr><expr><name>next</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><name>next</name> <operator>==</operator> <name>end</name></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name>next</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	    <break>break;</break>
	  </block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><operator>*</operator><name>next</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	  <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

      <if_stmt><if>if <condition>(<expr><name>next</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>next</name> <operator>!=</operator> <name>buf</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	  <comment type="block">/* No "=" in value */</comment>
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><call><name>my_setenv</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   
  <return>return <expr><ternary><condition><expr><name>next</name></expr> ?</condition><then> <expr><name>next</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LUASCRIPT</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>grab_extradata_lua</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>field</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name> <operator>||</operator> <operator>(</operator><name>buf</name> <operator>==</operator> <name>end</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <for>for <control>(<init><expr><name>next</name> <operator>=</operator> <name>buf</name></expr>;</init> <condition><expr><operator>*</operator><name>next</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>next</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name>next</name> <operator>==</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
  
  <if_stmt><if>if <condition>(<expr><name>next</name> <operator>!=</operator> <name>buf</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,  <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <return>return <expr><name>next</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>buff_alloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>buf_size</name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>script_data</name></name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>
      
      <comment type="block">/* start with reasonable size, will almost never need extending. */</comment>
      <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>script_data</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">200</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>script_data</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">200</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>new</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<return>return;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>buf</name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>buf_size</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* pack up lease data into a buffer */</comment>    
<function><type><name>void</name></type> <name>queue_script</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>hostname_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>clid_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ed_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcpfd</name></name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef> 
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>fd</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp6fd</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* no script */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>helperfd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>lease</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>ed_len</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>extradata_len</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>lease</name><operator>-&gt;</operator><name>clid</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>clid_len</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>clid_len</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>hostname</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>hostname_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>buff_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>script_data</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>  <name>clid_len</name> <operator>+</operator> <name>ed_len</name> <operator>+</operator> <name>hostname_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>action</name></name> <operator>=</operator> <name>action</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef> 
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>vendorclass_count</name></name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>vendorclass_count</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>addr6</name></name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>addr6</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>iaid</name></name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>iaid</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>hwaddr_len</name></name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>hwaddr_len</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>hwaddr_type</name></name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>hwaddr_type</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>clid_len</name></name> <operator>=</operator> <name>clid_len</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>ed_len</name></name> <operator>=</operator> <name>ed_len</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>hostname_len</name></name> <operator>=</operator> <name>hostname_len</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>giaddr</name></name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>giaddr</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>hwaddr</name></name></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>hwaddr</name></name></expr></argument>, <argument><expr><name>DHCP_CHADDR_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>indextoname</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>last_interface</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>interface</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_BROKEN_RTC</name></cpp:ifdef> 
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>expires</name></name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>expires</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if <condition>(<expr><name><name>lease</name><operator>-&gt;</operator><name>expires</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>remaining_time</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>difftime</name><argument_list>(<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>expires</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>remaining_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>clid_len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>clid</name></name></expr></argument>, <argument><expr><name>clid_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>clid_len</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>hostname_len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>hostname_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>hostname_len</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>ed_len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name>ed_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>ed_len</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>bytes_in_buf</name> <operator>=</operator> <name>p</name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
<function><type><name>void</name></type> <name>queue_relay_snoop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>if_index</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prefix_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* no script */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>helperfd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* 5 for /nnn and zero on the end of the prefix. */</comment>
  <expr_stmt><expr><call><name>buff_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>script_data</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>ADDRSTRLEN</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>script_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>action</name></name> <operator>=</operator> <name>ACTION_RELAY_SNOOP</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>addr6</name></name> <operator>=</operator> <operator>*</operator><name>client</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>hostname_len</name></name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"%s/%u"</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>prefix_len</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  
  <expr_stmt><expr><call><name>indextoname</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp6fd</name></name></expr></argument>, <argument><expr><name>if_index</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>bytes_in_buf</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>script_data</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>buf</name><operator>-&gt;</operator><name>hostname_len</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_TFTP</name></cpp:ifdef>
<comment type="block">/* This nastily re-uses DHCP-fields for TFTP stuff */</comment>
<function><type><name>void</name></type> <name>queue_tftp</name><parameter_list>(<parameter><decl><type><name>off_t</name></type> <name>file_len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>mysockaddr</name></name> <modifier>*</modifier></type><name>peer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>filename_len</name></decl>;</decl_stmt>

  <comment type="block">/* no script */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>helperfd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><name>filename_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>buff_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>script_data</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>  <name>filename_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>script_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>action</name></name> <operator>=</operator> <name>ACTION_TFTP</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>hostname_len</name></name> <operator>=</operator> <name>filename_len</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>file_len</name></name> <operator>=</operator> <name>file_len</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>peer</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name><operator>)</operator> <operator>==</operator> <name>AF_INET</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>peer</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_addr</name></name></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>addr6</name></name> <operator>=</operator> <name><name>peer</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>filename_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><name>bytes_in_buf</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>script_data</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>  <name>filename_len</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>queue_arp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>mac</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maclen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>family</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>all_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* no script */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>helperfd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><call><name>buff_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>script_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>script_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>action</name></name> <operator>=</operator> <name>action</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>hwaddr_len</name></name> <operator>=</operator> <name>maclen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>hwaddr_type</name></name> <operator>=</operator>  <name>ARPHRD_ETHER</name></expr>;</expr_stmt> 
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>family</name><operator>)</operator> <operator>==</operator> <name>AF_INET</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>addr4</name></name></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>addr6</name></name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>addr6</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
  
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>hwaddr</name></name></expr></argument>, <argument><expr><name>mac</name></expr></argument>, <argument><expr><name>maclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><name>bytes_in_buf</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>script_data</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>helper_buf_empty</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name>bytes_in_buf</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>helper_write</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>bytes_in_buf</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>helperfd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bytes_in_buf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>bytes_in_buf</name> <operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>rc</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>rc</name></expr></argument>, <argument><expr><name>bytes_in_buf</name> <operator>-</operator> <name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
      <expr_stmt><expr><name>bytes_in_buf</name> <operator>-=</operator> <name>rc</name></expr>;</expr_stmt>
    </block_content>}</block></if>
  <else>else
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EAGAIN</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
	<return>return;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>bytes_in_buf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_SCRIPT */</comment>
</unit>
