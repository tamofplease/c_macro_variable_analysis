<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/dnsmasq/ipset.c"><comment type="block">/* ipset.c is Copyright (c) 2013 Jason A. Donenfeld &lt;Jason@zx2c4.com&gt;. All Rights Reserved.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 dated June, 1991, or
   (at your option) version 3 dated 29 June, 2007.
 
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
     
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnsmasq.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_IPSET</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/netlink.h&gt;</cpp:file></cpp:include>

<comment type="block">/* We want to be able to compile against old header files
   Kernel version is handled at run-time. */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFNL_SUBSYS_IPSET</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPSET_ATTR_DATA</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPSET_ATTR_IP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPSET_ATTR_IPADDR_IPV4</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPSET_ATTR_IPADDR_IPV6</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPSET_ATTR_PROTOCOL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPSET_ATTR_SETNAME</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPSET_CMD_ADD</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPSET_CMD_DEL</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPSET_MAXNAMELEN</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPSET_PROTOCOL</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NFNETLINK_V0</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFNETLINK_V0</name></cpp:macro>    <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NLA_F_NESTED</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NLA_F_NESTED</name></cpp:macro>		<cpp:value>(1 &lt;&lt; 15)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NLA_F_NET_BYTEORDER</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NLA_F_NET_BYTEORDER</name></cpp:macro>	<cpp:value>(1 &lt;&lt; 14)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>my_nlattr</name> <block>{
        <decl_stmt><decl><type><name>__u16</name></type>           <name>nla_len</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>__u16</name></type>           <name>nla_type</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>my_nfgenmsg</name> <block>{
        <decl_stmt><decl><type><name>__u8</name></type>  <name>nfgen_family</name></decl>;</decl_stmt>             <comment type="block">/* AF_xxx */</comment>
        <decl_stmt><decl><type><name>__u8</name></type>  <name>version</name></decl>;</decl_stmt>          <comment type="block">/* nfnetlink version */</comment>
        <decl_stmt><decl><type><name>__be16</name></type>    <name>res_id</name></decl>;</decl_stmt>               <comment type="block">/* resource id */</comment>
}</block>;</struct>


<comment type="block">/* data structure size in here is fixed */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFF_SZ</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NL_ALIGN</name><parameter_list>(<parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((len)+3) &amp; ~(3))</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>sockaddr_nl</name></name></type> <name>snl</name> <init>= <expr><block>{ <expr><operator>.</operator><name>nl_family</name> <operator>=</operator> <name>AF_NETLINK</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>ipset_sock</name></decl>, <decl><type ref="prev"/><name>old_kernel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>add_attr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>nlmsghdr</name></name> <modifier>*</modifier></type><name>nlh</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>my_nlattr</name></name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>nlh</name> <operator>+</operator> <call><name>NL_ALIGN</name><argument_list>(<argument><expr><name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>payload_len</name> <init>= <expr><call><name>NL_ALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>my_nlattr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>nla_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>nla_len</name></name> <operator>=</operator> <name>payload_len</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>attr</name> <operator>+</operator> <call><name>NL_ALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>my_nlattr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_len</name></name> <operator>+=</operator> <call><name>NL_ALIGN</name><argument_list>(<argument><expr><name>payload_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ipset_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name>old_kernel</name> <operator>=</operator> <operator>(</operator><name><name>daemon</name><operator>-&gt;</operator><name>kernel_version</name></name> <operator>&lt;</operator> <call><name>KERNEL_VERSION</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>old_kernel</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>ipset_sock</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>SOCK_RAW</name></expr></argument>, <argument><expr><name>IPPROTO_RAW</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>old_kernel</name> <operator>&amp;&amp;</operator> 
      <operator>(</operator><name>buffer</name> <operator>=</operator> <call><name>safe_malloc</name><argument_list>(<argument><expr><name>BUFF_SZ</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
      <operator>(</operator><name>ipset_sock</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_NETLINK</name></expr></argument>, <argument><expr><name>SOCK_RAW</name></expr></argument>, <argument><expr><name>NETLINK_NETFILTER</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
      <operator>(</operator><call><name>bind</name><argument_list>(<argument><expr><name>ipset_sock</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>snl</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>snl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><call><name>die</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to create IPset control socket: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_MISC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>new_add_to_ipset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>setname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>union</name> <name>all_addr</name></name> <modifier>*</modifier></type><name>ipaddr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>af</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>remove</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>nlmsghdr</name></name> <modifier>*</modifier></type><name>nlh</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>my_nfgenmsg</name></name> <modifier>*</modifier></type><name>nfg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>my_nlattr</name></name> <modifier>*</modifier></type><name><name>nested</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>proto</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>addrsz</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>af</name> <operator>==</operator> <name>AF_INET6</name><operator>)</operator></expr> ?</condition><then> <expr><name>IN6ADDRSZ</name></expr> </then><else>: <expr><name>INADDRSZ</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>setname</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>IPSET_MAXNAMELEN</name></expr>)</condition> 
    <block>{<block_content>
      <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENAMETOOLONG</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BUFF_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>nlh</name> <operator>=</operator> <operator>(</operator>struct <name>nlmsghdr</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_len</name></name> <operator>=</operator> <call><name>NL_ALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>nlmsghdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_type</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>remove</name></expr> ?</condition><then> <expr><name>IPSET_CMD_DEL</name></expr> </then><else>: <expr><name>IPSET_CMD_ADD</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <operator>(</operator><name>NFNL_SUBSYS_IPSET</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_flags</name></name> <operator>=</operator> <name>NLM_F_REQUEST</name></expr>;</expr_stmt>
  
  <expr_stmt><expr><name>nfg</name> <operator>=</operator> <operator>(</operator>struct <name>my_nfgenmsg</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buffer</name> <operator>+</operator> <name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_len</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_len</name></name> <operator>+=</operator> <call><name>NL_ALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>my_nfgenmsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>nfg</name><operator>-&gt;</operator><name>nfgen_family</name></name> <operator>=</operator> <name>af</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>nfg</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>NFNETLINK_V0</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>nfg</name><operator>-&gt;</operator><name>res_id</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><name>proto</name> <operator>=</operator> <name>IPSET_PROTOCOL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>add_attr</name><argument_list>(<argument><expr><name>nlh</name></expr></argument>, <argument><expr><name>IPSET_ATTR_PROTOCOL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proto</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>add_attr</name><argument_list>(<argument><expr><name>nlh</name></expr></argument>, <argument><expr><name>IPSET_ATTR_SETNAME</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>setname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>setname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>nested</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator>struct <name>my_nlattr</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buffer</name> <operator>+</operator> <call><name>NL_ALIGN</name><argument_list>(<argument><expr><name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_len</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_len</name></name> <operator>+=</operator> <call><name>NL_ALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>my_nlattr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>nested</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>nla_type</name> <operator>=</operator> <name>NLA_F_NESTED</name> <operator>|</operator> <name>IPSET_ATTR_DATA</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>nested</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator>struct <name>my_nlattr</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buffer</name> <operator>+</operator> <call><name>NL_ALIGN</name><argument_list>(<argument><expr><name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_len</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_len</name></name> <operator>+=</operator> <call><name>NL_ALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>my_nlattr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>nested</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>nla_type</name> <operator>=</operator> <name>NLA_F_NESTED</name> <operator>|</operator> <name>IPSET_ATTR_IP</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>add_attr</name><argument_list>(<argument><expr><name>nlh</name></expr></argument>, 
	   <argument><expr><operator>(</operator><ternary><condition><expr><name>af</name> <operator>==</operator> <name>AF_INET</name></expr> ?</condition><then> <expr><name>IPSET_ATTR_IPADDR_IPV4</name></expr> </then><else>: <expr><name>IPSET_ATTR_IPADDR_IPV6</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <name>NLA_F_NET_BYTEORDER</name></expr></argument>,
	   <argument><expr><name>addrsz</name></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>nested</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>nla_len</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buffer</name> <operator>+</operator> <call><name>NL_ALIGN</name><argument_list>(<argument><expr><name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_len</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>nested</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>nested</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>nla_len</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buffer</name> <operator>+</operator> <call><name>NL_ALIGN</name><argument_list>(<argument><expr><name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_len</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>nested</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	
  <while>while <condition>(<expr><call><name>retry_send</name><argument_list>(<argument><expr><call><name>sendto</name><argument_list>(<argument><expr><name>ipset_sock</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>nlh</name><operator>-&gt;</operator><name>nlmsg_len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
			   <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>snl</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>snl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
								    
  <return>return <expr><ternary><condition><expr><name>errno</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>old_add_to_ipset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>setname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>union</name> <name>all_addr</name></name> <modifier>*</modifier></type><name>ipaddr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>remove</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>socklen_t</name></type> <name>size</name></decl>;</decl_stmt>
  <struct>struct <name>ip_set_req_adt_get</name> <block>{
    <decl_stmt><decl><type><name>unsigned</name></type> <name>op</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>version</name></decl>;</decl_stmt>
    <union>union <block>{
      <decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>IPSET_MAXNAMELEN</name></expr>]</index></name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>uint16_t</name></type> <name>index</name></decl>;</decl_stmt>
    }</block> <decl><name>set</name></decl>;</union>
    <decl_stmt><decl><type><name>char</name></type> <name><name>typename</name><index>[<expr><name>IPSET_MAXNAMELEN</name></expr>]</index></name></decl>;</decl_stmt>
  }</block> <decl><name>req_adt_get</name></decl>;</struct>
  <struct>struct <name>ip_set_req_adt</name> <block>{
    <decl_stmt><decl><type><name>unsigned</name></type> <name>op</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>index</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>ip</name></decl>;</decl_stmt>
  }</block> <decl><name>req_adt</name></decl>;</struct>
  
  <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>setname</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>req_adt_get</name><operator>.</operator><name>set</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> 
    <block>{<block_content>
      <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENAMETOOLONG</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><name><name>req_adt_get</name><operator>.</operator><name>op</name></name> <operator>=</operator> <literal type="number">0x10</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req_adt_get</name><operator>.</operator><name>version</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>req_adt_get</name><operator>.</operator><name>set</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>setname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>req_adt_get</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>getsockopt</name><argument_list>(<argument><expr><name>ipset_sock</name></expr></argument>, <argument><expr><name>SOL_IP</name></expr></argument>, <argument><expr><literal type="number">83</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>req_adt_get</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>req_adt</name><operator>.</operator><name>op</name></name> <operator>=</operator> <ternary><condition><expr><name>remove</name></expr> ?</condition><then> <expr><literal type="number">0x102</literal></expr> </then><else>: <expr><literal type="number">0x101</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req_adt</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name><name>req_adt_get</name><operator>.</operator><name>set</name><operator>.</operator><name>index</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req_adt</name><operator>.</operator><name>ip</name></name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>ipaddr</name><operator>-&gt;</operator><name>addr4</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>ipset_sock</name></expr></argument>, <argument><expr><name>SOL_IP</name></expr></argument>, <argument><expr><literal type="number">83</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>req_adt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>req_adt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>add_to_ipset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>setname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>union</name> <name>all_addr</name></name> <modifier>*</modifier></type><name>ipaddr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>remove</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>af</name> <init>= <expr><name>AF_INET</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_IPV6</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>af</name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
      <comment type="block">/* old method only supports IPv4 */</comment>
      <if_stmt><if>if <condition>(<expr><name>old_kernel</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EAFNOSUPPORT</name></expr> ;</expr_stmt>
	  <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><name>old_kernel</name></expr> ?</condition><then> <expr><call><name>old_add_to_ipset</name><argument_list>(<argument><expr><name>setname</name></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><name>remove</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>new_add_to_ipset</name><argument_list>(<argument><expr><name>setname</name></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><name>af</name></expr></argument>, <argument><expr><name>remove</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
     <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to update ipset %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
