<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/dnsmasq/rfc3315.c"><comment type="block">/* dnsmasq is Copyright (c) 2000-2022 Simon Kelley

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 dated June, 1991, or
   (at your option) version 3 dated 29 June, 2007.
 
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
     
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
*/</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnsmasq.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>

<struct>struct <name>state</name> <block>{
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>clid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>clid_len</name></decl>, <decl><type ref="prev"/><name>ia_type</name></decl>, <decl><type ref="prev"/><name>interface</name></decl>, <decl><type ref="prev"/><name>hostname_auth</name></decl>, <decl><type ref="prev"/><name>lease_allocate</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>client_hostname</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hostname</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>domain</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>send_domain</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>link_address</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>fallback</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ll_addr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ula_addr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>xid</name></decl>, <decl><type ref="prev"/><name>fqdn_flags</name></decl>, <decl><type ref="prev"/><name>iaid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>iface_name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>packet_options</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>tags</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>context_tags</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>mac</name><index>[<expr><name>DHCP_CHADDR_MAX</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mac_len</name></decl>, <decl><type ref="prev"/><name>mac_type</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>dhcp6_maybe_relay</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>inbuff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, 
			     <parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>client_addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_unicast</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>dhcp6_no_relay</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>msg_type</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>inbuff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_unicast</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>log6_opts</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nest</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>xid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>start_opts</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>end_opts</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>log6_packet</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>log6_quiet</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>opt6_find</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>search</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>minsize</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>opt6_next</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>opt6_uint</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>get_context_tag</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>check_ia</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>endp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ia_option</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>build_ia</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>t1cntr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>end_ia</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>t1cntr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>min_time</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>do_fuzz</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>mark_context_used</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>mark_config_used</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>check_address</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>config_valid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_config</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>addrlist</name></name> <modifier>*</modifier></type><name>config_implies</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_config</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>add_address</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>lease_time</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ia_option</name></decl></parameter>, 
			<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>min_time</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>update_leases</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>lease_time</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>add_local_addrs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>add_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>do_refresh</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>calculate_times</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>min_time</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>valid_timep</name></decl></parameter>, 
			    <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>preferred_timep</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>lease_time</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>opt6_len</name><parameter_list>(<parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)(opt6_uint(opt, -2, 2)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>opt6_type</name><parameter_list>(<parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(opt6_uint(opt, -4, 2))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>opt6_ptr</name><parameter_list>(<parameter><type><name>opt</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void *)&amp;(((unsigned char *)(opt))[4+(i)]))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>opt6_user_vendor_ptr</name><parameter_list>(<parameter><type><name>opt</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void *)&amp;(((unsigned char *)(opt))[2+(i)]))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>opt6_user_vendor_len</name><parameter_list>(<parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)(opt6_uint(opt, -4, 2)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>opt6_user_vendor_next</name><parameter_list>(<parameter><type><name>opt</name></type></parameter>, <parameter><type><name>end</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(opt6_next(((void *) opt) - 2, end))</cpp:value></cpp:define>
 

<function><type><name>unsigned</name> <name>short</name></type> <name>dhcp6_reply</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>interface</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>iface_name</name></decl></parameter>,
			   <parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>fallback</name></decl></parameter>,  <parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>ll_addr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>ula_addr</name></decl></parameter>,
			   <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>client_addr</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_vendor</name></name> <modifier>*</modifier></type><name>vendor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>msg_type</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>state</name></name></type> <name>state</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><name>msg_type</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_packet</name><operator>.</operator><name>iov_base</name></name><operator>)</operator></expr>;</expr_stmt>
  
  <comment type="block">/* Mark these so we only match each at most once, to avoid tangled linked lists */</comment>
  <for>for <control>(<init><expr><name>vendor</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_vendors</name></name></expr>;</init> <condition><expr><name>vendor</name></expr>;</condition> <incr><expr><name>vendor</name> <operator>=</operator> <name><name>vendor</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>vendor</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>next</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>vendor</name><operator>-&gt;</operator><name>netid</name></name></expr>;</expr_stmt></block_content></block></for>
  
  <expr_stmt><expr><call><name>reset_counter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name><operator>.</operator><name>interface</name></name> <operator>=</operator> <name>interface</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name><operator>.</operator><name>iface_name</name></name> <operator>=</operator> <name>iface_name</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name><operator>.</operator><name>fallback</name></name> <operator>=</operator> <name>fallback</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name><operator>.</operator><name>ll_addr</name></name> <operator>=</operator> <name>ll_addr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name><operator>.</operator><name>ula_addr</name></name> <operator>=</operator> <name>ula_addr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name><operator>.</operator><name>mac_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name><operator>.</operator><name>tags</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name><operator>.</operator><name>link_address</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>dhcp6_maybe_relay</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_packet</name><operator>.</operator><name>iov_base</name></name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>client_addr</name></expr></argument>, 
			<argument><expr><call><name>IN6_IS_ADDR_MULTICAST</name><argument_list>(<argument><expr><name>client_addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><ternary><condition><expr><name>msg_type</name> <operator>==</operator> <name>DHCP6RELAYFORW</name></expr> ?</condition><then> <expr><name>DHCPV6_SERVER_PORT</name></expr> </then><else>: <expr><name>DHCPV6_CLIENT_PORT</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* This cost me blood to write, it will probably cost you blood to understand - srk. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dhcp6_maybe_relay</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>inbuff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, 
			     <parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>client_addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_unicast</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>inbuff</name> <operator>+</operator> <name>sz</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><name>inbuff</name> <operator>+</operator> <literal type="number">34</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>msg_type</name> <init>= <expr><operator>*</operator><name>inbuff</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>outmsgtypep</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_vendor</name></name> <modifier>*</modifier></type><name>vendor</name></decl>;</decl_stmt>

  <comment type="block">/* if not an encapsulated relayed message, just do the stuff */</comment>
  <if_stmt><if>if <condition>(<expr><name>msg_type</name> <operator>!=</operator> <name>DHCP6RELAYFORW</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* if link_address != NULL if points to the link address field of the 
	 innermost nested RELAYFORW message, which is where we find the
	 address of the network on which we can allocate an address.
	 Recalculate the available contexts using that information. 

      link_address == NULL means there's no relay in use, so we try and find the client's 
      MAC address from the local ND cache. */</comment>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>link_address</name></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>get_client_mac</name><argument_list>(<argument><expr><name>client_addr</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>mac</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>mac_len</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>mac_type</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else
	<block>{<block_content>
	  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name><name>struct</name> <name>shared_network</name></name> <modifier>*</modifier></type><name>share</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	  <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IN6_IS_ADDR_LOOPBACK</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>link_address</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	      <operator>!</operator><call><name>IN6_IS_ADDR_LINKLOCAL</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>link_address</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	      <operator>!</operator><call><name>IN6_IS_ADDR_MULTICAST</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>link_address</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <for>for <control>(<init><expr><name>c</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp6</name></name></expr>;</init> <condition><expr><name>c</name></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	      <block>{<block_content>
		<for>for <control>(<init><expr><name>share</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>shared_networks</name></name></expr>;</init> <condition><expr><name>share</name></expr>;</condition> <incr><expr><name>share</name> <operator>=</operator> <name><name>share</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
		  <block>{<block_content>
		    <if_stmt><if>if <condition>(<expr><name><name>share</name><operator>-&gt;</operator><name>shared_addr</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		      <continue>continue;</continue></block_content></block></if></if_stmt>
		    
		    <if_stmt><if>if <condition>(<expr><name><name>share</name><operator>-&gt;</operator><name>if_index</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
			<operator>!</operator><call><name>IN6_ARE_ADDR_EQUAL</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>link_address</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>share</name><operator>-&gt;</operator><name>match_addr6</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		      <continue>continue;</continue></block_content></block></if></if_stmt>
		    
		    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_DHCP</name><operator>)</operator> <operator>&amp;&amp;</operator>
			<operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>CONTEXT_TEMPLATE</name> <operator>|</operator> <name>CONTEXT_OLD</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
			<call><name>is_same_net6</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>share</name><operator>-&gt;</operator><name>shared_addr6</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			<call><name>is_same_net6</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>share</name><operator>-&gt;</operator><name>shared_addr6</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>end6</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		      <break>break;</break></block_content></block></if></if_stmt>
		  </block_content>}</block></for>
		
		<if_stmt><if>if <condition>(<expr><name>share</name> <operator>||</operator>
		    <operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_DHCP</name><operator>)</operator> <operator>&amp;&amp;</operator>
		     <operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>CONTEXT_TEMPLATE</name> <operator>|</operator> <name>CONTEXT_OLD</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
		     <call><name>is_same_net6</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>link_address</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		     <call><name>is_same_net6</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>link_address</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>end6</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>preferred</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>context</name></name></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
		  </block_content>}</block></if></if_stmt>
	      </block_content>}</block></for></block_content></block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>context</name></name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>link_address</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_WARNING</name></expr></argument>, 
			<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"no address range available for DHCPv6 request from relay at %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <return>return <expr><literal type="number">0</literal></expr>;</return>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	  
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>context</name></name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_WARNING</name></expr></argument>, 
		    <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"no address range available for DHCPv6 request via %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>iface_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

      <return>return <expr><call><name>dhcp6_no_relay</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>msg_type</name></expr></argument>, <argument><expr><name>inbuff</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>is_unicast</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

  <comment type="block">/* must have at least msg_type+hopcount+link_address+peer_address+minimal size option
     which is               1   +    1   +    16      +     16     + 2 + 2 = 38 */</comment>
  <if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&lt;</operator> <literal type="number">38</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <comment type="block">/* copy header stuff into reply message and set type to reply */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>outmsgtypep</name> <operator>=</operator> <call><name>put_opt6</name><argument_list>(<argument><expr><name>inbuff</name></expr></argument>, <argument><expr><literal type="number">34</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>outmsgtypep</name> <operator>=</operator> <name>DHCP6RELAYREPL</name></expr>;</expr_stmt>

  <comment type="block">/* look for relay options and set tags if found. */</comment>
  <for>for <control>(<init><expr><name>vendor</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_vendors</name></name></expr>;</init> <condition><expr><name>vendor</name></expr>;</condition> <incr><expr><name>vendor</name> <operator>=</operator> <name><name>vendor</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>mopt</name></decl>;</decl_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>vendor</name><operator>-&gt;</operator><name>match_type</name></name> <operator>==</operator> <name>MATCH_SUBSCRIBER</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>mopt</name> <operator>=</operator> <name>OPTION6_SUBSCRIBER_ID</name></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name><name>vendor</name><operator>-&gt;</operator><name>match_type</name></name> <operator>==</operator> <name>MATCH_REMOTE</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>mopt</name> <operator>=</operator> <name>OPTION6_REMOTE_ID</name></expr>;</expr_stmt></block_content></block></if> 
      <else>else<block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></else></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>opt6_find</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>mopt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
	  <name><name>vendor</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <call><name>opt6_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	  <call><name>memcmp</name><argument_list>(<argument><expr><name><name>vendor</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><call><name>opt6_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>vendor</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
	  <name><name>vendor</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>next</name></name> <operator>!=</operator> <operator>&amp;</operator><name><name>vendor</name><operator>-&gt;</operator><name>netid</name></name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name><name>vendor</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>tags</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>tags</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>vendor</name><operator>-&gt;</operator><name>netid</name></name></expr>;</expr_stmt>
	  <break>break;</break>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  
  <comment type="block">/* RFC-6939 */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>opt6_find</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>OPTION6_CLIENT_MAC</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>opt6_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>DHCP_CHADDR_MAX</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mac_type</name></name> <operator>=</operator> <call><name>opt6_uint</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mac_len</name></name> <operator>=</operator> <call><name>opt6_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>mac</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>opt6_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>mac_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  
  <for>for <control>(<init><expr><name>opt</name> <operator>=</operator> <name>opts</name></expr>;</init> <condition><expr><name>opt</name></expr>;</condition> <incr><expr><name>opt</name> <operator>=</operator> <call><name>opt6_next</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></incr>)</control>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>opt6_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>opt6_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content> 
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
     
      <comment type="block">/* Don't copy MAC address into reply. */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>opt6_type</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OPTION6_CLIENT_MAC</name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>new_opt6</name><argument_list>(<argument><expr><call><name>opt6_type</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	  <if_stmt><if>if <condition>(<expr><call><name>opt6_type</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OPTION6_RELAY_MSG</name></expr>)</condition>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>align</name></decl>;</decl_stmt>
	      <comment type="block">/* the packet data is unaligned, copy to aligned storage */</comment>
	      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>align</name></expr></argument>, <argument><expr><name>inbuff</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	      <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>link_address</name></name> <operator>=</operator> <operator>&amp;</operator><name>align</name></expr>;</expr_stmt>
	      <comment type="block">/* zero is_unicast since that is now known to refer to the 
		 relayed packet, not the original sent by the client */</comment>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dhcp6_maybe_relay</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><call><name>opt6_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>opt6_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>client_addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	    </block_content>}</block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>put_opt6</name><argument_list>(<argument><expr><call><name>opt6_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>opt6_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	  <expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dhcp6_no_relay</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>msg_type</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>inbuff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_unicast</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>o</name></decl>, <decl><type ref="prev"/><name>o1</name></decl>, <decl><type ref="prev"/><name>start_opts</name></decl>, <decl><type ref="prev"/><name>start_msg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_opt</name></name> <modifier>*</modifier></type><name>opt_cfg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>tagif</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_config</name></name> <modifier>*</modifier></type><name>config</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid</name></name></type> <name>known_id</name></decl>, <decl><type ref="prev"/><name>iface_id</name></decl>, <decl><type ref="prev"/><name>v6_id</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>outmsgtype</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_vendor</name></name> <modifier>*</modifier></type><name>vendor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context_tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_mac</name></name> <modifier>*</modifier></type><name>mac_opt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ignore</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>packet_options</name></name> <operator>=</operator> <name>inbuff</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>inbuff</name> <operator>+</operator> <name>sz</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>clid</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>clid_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>lease_allocate</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>context_tags</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>domain</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>send_domain</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>hostname_auth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>hostname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>client_hostname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>fqdn_flags</name></name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt> <comment type="block">/* default to send if we receive no FQDN option */</comment>

  <comment type="block">/* set tag with name == interface */</comment>
  <expr_stmt><expr><name><name>iface_id</name><operator>.</operator><name>net</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>iface_name</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iface_id</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>tags</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>tags</name></name> <operator>=</operator> <operator>&amp;</operator><name>iface_id</name></expr>;</expr_stmt> 

  <comment type="block">/* set tag "dhcpv6" */</comment>
  <expr_stmt><expr><name><name>v6_id</name><operator>.</operator><name>net</name></name> <operator>=</operator> <literal type="string">"dhcpv6"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>v6_id</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>tags</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>tags</name></name> <operator>=</operator> <operator>&amp;</operator><name>v6_id</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>start_msg</name> <operator>=</operator> <call><name>save_counter</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* copy over transaction-id */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>put_opt6</name><argument_list>(<argument><expr><name>inbuff</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>start_opts</name> <operator>=</operator> <call><name>save_counter</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>xid</name></name> <operator>=</operator> <name><name>inbuff</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|</operator> <name><name>inbuff</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name><name>inbuff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
    
  <comment type="block">/* We're going to be linking tags from all context we use. 
     mark them as unused so we don't link one twice and break the list */</comment>
  <for>for <control>(<init><expr><name>context_tmp</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>context</name></name></expr>;</init> <condition><expr><name>context_tmp</name></expr>;</condition> <incr><expr><name>context_tmp</name> <operator>=</operator> <name><name>context_tmp</name><operator>-&gt;</operator><name>current</name></name></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name><name>context_tmp</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>next</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>context_tmp</name><operator>-&gt;</operator><name>netid</name></name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOG_OPTS</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	   <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>context_tmp</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	   <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>context_tmp</name><operator>-&gt;</operator><name>end6</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	   <if_stmt><if>if <condition>(<expr><name><name>context_tmp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>CONTEXT_STATIC</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	     <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%u available DHCPv6 subnet: %s/%d"</literal></expr></argument>)</argument_list></call></expr></argument>,
		       <argument><expr><name><name>state</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></argument>, <argument><expr><name><name>context_tmp</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	   <else>else<block type="pseudo"><block_content>
	     <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%u available DHCP range: %s -- %s"</literal></expr></argument>)</argument_list></call></expr></argument>, 
		       <argument><expr><name><name>state</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>opt6_find</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>packet_options</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name>OPTION6_CLIENT_ID</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>clid</name></name> <operator>=</operator> <call><name>opt6_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>clid_len</name></name> <operator>=</operator> <call><name>opt6_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>new_opt6</name><argument_list>(<argument><expr><name>OPTION6_CLIENT_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>put_opt6</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>clid</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>clid_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name>msg_type</name> <operator>!=</operator> <name>DHCP6IREQ</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <comment type="block">/* server-id must match except for SOLICIT, CONFIRM and REBIND messages */</comment>
  <if_stmt><if>if <condition>(<expr><name>msg_type</name> <operator>!=</operator> <name>DHCP6SOLICIT</name> <operator>&amp;&amp;</operator> <name>msg_type</name> <operator>!=</operator> <name>DHCP6CONFIRM</name> <operator>&amp;&amp;</operator> <name>msg_type</name> <operator>!=</operator> <name>DHCP6IREQ</name> <operator>&amp;&amp;</operator> <name>msg_type</name> <operator>!=</operator> <name>DHCP6REBIND</name> <operator>&amp;&amp;</operator>
      <operator>(</operator><operator>!</operator><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>opt6_find</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>packet_options</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name>OPTION6_SERVER_ID</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
       <call><name>opt6_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>duid_len</name></name> <operator>||</operator>
       <call><name>memcmp</name><argument_list>(<argument><expr><call><name>opt6_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>duid</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>duid_len</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>new_opt6</name><argument_list>(<argument><expr><name>OPTION6_SERVER_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>put_opt6</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>duid</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>duid_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>is_unicast</name> <operator>&amp;&amp;</operator>
      <operator>(</operator><name>msg_type</name> <operator>==</operator> <name>DHCP6REQUEST</name> <operator>||</operator> <name>msg_type</name> <operator>==</operator> <name>DHCP6RENEW</name> <operator>||</operator> <name>msg_type</name> <operator>==</operator> <name>DHCP6RELEASE</name> <operator>||</operator> <name>msg_type</name> <operator>==</operator> <name>DHCP6DECLINE</name><operator>)</operator></expr>)</condition>
    
    <block>{<block_content>  
      <expr_stmt><expr><name>outmsgtype</name> <operator>=</operator> <name>DHCP6REPLY</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>o1</name> <operator>=</operator> <call><name>new_opt6</name><argument_list>(<argument><expr><name>OPTION6_STATUS_CODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>put_opt6_short</name><argument_list>(<argument><expr><name>DHCP6USEMULTI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>put_opt6_string</name><argument_list>(<argument><expr><literal type="string">"Use multicast"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

  <comment type="block">/* match vendor and user class options */</comment>
  <for>for <control>(<init><expr><name>vendor</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_vendors</name></name></expr>;</init> <condition><expr><name>vendor</name></expr>;</condition> <incr><expr><name>vendor</name> <operator>=</operator> <name><name>vendor</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>mopt</name></decl>;</decl_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>vendor</name><operator>-&gt;</operator><name>match_type</name></name> <operator>==</operator> <name>MATCH_VENDOR</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>mopt</name> <operator>=</operator> <name>OPTION6_VENDOR_CLASS</name></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name><name>vendor</name><operator>-&gt;</operator><name>match_type</name></name> <operator>==</operator> <name>MATCH_USER</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>mopt</name> <operator>=</operator> <name>OPTION6_USER_CLASS</name></expr>;</expr_stmt></block_content></block></if> 
      <else>else<block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></else></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>opt6_find</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>packet_options</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name>mopt</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>enc_opt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>enc_end</name> <init>= <expr><call><name>opt6_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><call><name>opt6_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name>mopt</name> <operator>==</operator> <name>OPTION6_VENDOR_CLASS</name></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><call><name>opt6_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
		<continue>continue;</continue></block_content></block></if></if_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><name><name>vendor</name><operator>-&gt;</operator><name>enterprise</name></name> <operator>!=</operator> <call><name>opt6_uint</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<continue>continue;</continue></block_content></block></if></if_stmt>
	    
	      <expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
 
	  <comment type="block">/* Note that format if user/vendor classes is different to DHCP options - no option types. */</comment>
	  <for>for <control>(<init><expr><name>enc_opt</name> <operator>=</operator> <call><name>opt6_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>enc_opt</name></expr>;</condition> <incr><expr><name>enc_opt</name> <operator>=</operator> <call><name>opt6_user_vendor_next</name><argument_list>(<argument><expr><name>enc_opt</name></expr></argument>, <argument><expr><name>enc_end</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
	    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <operator>(</operator><call><name>opt6_user_vendor_len</name><argument_list>(<argument><expr><name>enc_opt</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>vendor</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	      <if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>vendor</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><call><name>opt6_user_vendor_ptr</name><argument_list>(<argument><expr><name>enc_opt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>vendor</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name><name>vendor</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>tags</name></name></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>tags</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>vendor</name><operator>-&gt;</operator><name>netid</name></name></expr>;</expr_stmt>
		  <break>break;</break>
		</block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></for>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOG_OPTS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>opt</name> <operator>=</operator> <call><name>opt6_find</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>packet_options</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name>OPTION6_VENDOR_CLASS</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%u vendor class: %u"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>, <argument><expr><call><name>opt6_uint</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <comment type="block">/* dhcp-match. If we have hex-and-wildcards, look for a left-anchored match.
     Otherwise assume the option is an array, and look for a matching element. 
     If no data given, existence of the option is enough. This code handles 
     V-I opts too. */</comment>
  <for>for <control>(<init><expr><name>opt_cfg</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_match6</name></name></expr>;</init> <condition><expr><name>opt_cfg</name></expr>;</condition> <incr><expr><name>opt_cfg</name> <operator>=</operator> <name><name>opt_cfg</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>match</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>opt_cfg</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DHOPT_RFC3925</name></expr>)</condition>
	<block>{<block_content>
	  <for>for <control>(<init><expr><name>opt</name> <operator>=</operator> <call><name>opt6_find</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>packet_options</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name>OPTION6_VENDOR_OPTS</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</init>
	       <condition><expr><name>opt</name></expr>;</condition>
	       <incr><expr><name>opt</name> <operator>=</operator> <call><name>opt6_find</name><argument_list>(<argument><expr><call><name>opt6_next</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name>OPTION6_VENDOR_OPTS</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></incr>)</control>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>vopt</name></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>vend</name> <init>= <expr><call><name>opt6_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><call><name>opt6_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	      
	      <for>for <control>(<init><expr><name>vopt</name> <operator>=</operator> <call><name>opt6_find</name><argument_list>(<argument><expr><call><name>opt6_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vend</name></expr></argument>, <argument><expr><name><name>opt_cfg</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</init>
		   <condition><expr><name>vopt</name></expr>;</condition>
		   <incr><expr><name>vopt</name> <operator>=</operator> <call><name>opt6_find</name><argument_list>(<argument><expr><call><name>opt6_next</name><argument_list>(<argument><expr><name>vopt</name></expr></argument>, <argument><expr><name>vend</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vend</name></expr></argument>, <argument><expr><name><name>opt_cfg</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>match</name> <operator>=</operator> <call><name>match_bytes</name><argument_list>(<argument><expr><name>opt_cfg</name></expr></argument>, <argument><expr><call><name>opt6_ptr</name><argument_list>(<argument><expr><name>vopt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>opt6_len</name><argument_list>(<argument><expr><name>vopt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		  <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	    </block_content>}</block></for>
	  <if_stmt><if>if <condition>(<expr><name>match</name></expr>)</condition><block type="pseudo"><block_content>
	    <break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>opt6_find</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>packet_options</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name><name>opt_cfg</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <continue>continue;</continue></block_content></block></if></if_stmt>
	  
	  <expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>match_bytes</name><argument_list>(<argument><expr><name>opt_cfg</name></expr></argument>, <argument><expr><call><name>opt6_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>opt6_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt> 
  
      <if_stmt><if>if <condition>(<expr><name>match</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name><name>opt_cfg</name><operator>-&gt;</operator><name>netid</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>tags</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>tags</name></name> <operator>=</operator> <name><name>opt_cfg</name><operator>-&gt;</operator><name>netid</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>mac_len</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOG_OPTS</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>print_mac</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>mac</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>mac_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%u client MAC address: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

      <for>for <control>(<init><expr><name>mac_opt</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_macs</name></name></expr>;</init> <condition><expr><name>mac_opt</name></expr>;</condition> <incr><expr><name>mac_opt</name> <operator>=</operator> <name><name>mac_opt</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>mac_opt</name><operator>-&gt;</operator><name>hwaddr_len</name></name> <operator>==</operator> <name><name>state</name><operator>-&gt;</operator><name>mac_len</name></name> <operator>&amp;&amp;</operator>
	    <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>mac_opt</name><operator>-&gt;</operator><name>hwaddr_type</name></name> <operator>==</operator> <name><name>state</name><operator>-&gt;</operator><name>mac_type</name></name> <operator>||</operator> <name><name>mac_opt</name><operator>-&gt;</operator><name>hwaddr_type</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
	    <call><name>memcmp_masked</name><argument_list>(<argument><expr><name><name>mac_opt</name><operator>-&gt;</operator><name>hwaddr</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>mac</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>mac_len</name></name></expr></argument>, <argument><expr><name><name>mac_opt</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name><name>mac_opt</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>tags</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>tags</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>mac_opt</name><operator>-&gt;</operator><name>netid</name></name></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt></block_content></block></for>
    </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>opt6_find</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>packet_options</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name>OPTION6_FQDN</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* RFC4704 refers */</comment>
       <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>opt6_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
       
       <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>fqdn_flags</name></name> <operator>=</operator> <call><name>opt6_uint</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       
       <comment type="block">/* Always force update, since the client has no way to do it itself. */</comment>
       <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_FQDN_UPDATE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>fqdn_flags</name></name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	 <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>fqdn_flags</name></name> <operator>|=</operator> <literal type="number">0x03</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
 
       <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>fqdn_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">0x04</literal></expr>;</expr_stmt>

       <if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">255</literal></expr>)</condition>
	 <block>{<block_content>
	   <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>opt6_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	   <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pq</name> <init>= <expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></init></decl>;</decl_stmt>
	   
	   <expr_stmt><expr><name>pp</name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
	   <while>while <condition>(<expr><operator>*</operator><name>op</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>op</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>op</name><operator>)</operator><operator>)</operator> <operator>-</operator> <name>pp</name><operator>)</operator> <operator>&lt;</operator> <name>len</name></expr>)</condition>
	     <block>{<block_content>
	       <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pq</name></expr></argument>, <argument><expr><name>op</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	       <expr_stmt><expr><name>pq</name> <operator>+=</operator> <operator>*</operator><name>op</name></expr>;</expr_stmt>
	       <expr_stmt><expr><name>op</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>op</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
	       <expr_stmt><expr><operator>*</operator><operator>(</operator><name>pq</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
	     </block_content>}</block></while>
	   
	   <if_stmt><if>if <condition>(<expr><name>pq</name> <operator>!=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr>)</condition><block type="pseudo"><block_content>
	     <expr_stmt><expr><name>pq</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	   <expr_stmt><expr><operator>*</operator><name>pq</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	   
	   <if_stmt><if>if <condition>(<expr><call><name>legal_hostname</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	     <block>{<block_content>
	       <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_match_name</name></name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
	       <decl_stmt><decl><type><name>size_t</name></type> <name>nl</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	       
	       <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>client_hostname</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr>;</expr_stmt>
	       
	       <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOG_OPTS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		 <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%u client provides name: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>client_hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	       
	       <for>for <control>(<init><expr><name>m</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_name_match</name></name></expr>;</init> <condition><expr><name>m</name></expr>;</condition> <incr><expr><name>m</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
		 <block>{<block_content>
		   <decl_stmt><decl><type><name>size_t</name></type> <name>ml</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		   <decl_stmt><decl><type><name>char</name></type> <name>save</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		   
		   <if_stmt><if>if <condition>(<expr><name>nl</name> <operator>&lt;</operator> <name>ml</name></expr>)</condition><block type="pseudo"><block_content>
		     <continue>continue;</continue></block_content></block></if></if_stmt>
		   <if_stmt><if>if <condition>(<expr><name>nl</name> <operator>&gt;</operator> <name>ml</name></expr>)</condition>
		     <block>{<block_content>
		       <expr_stmt><expr><name>save</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>client_hostname</name><index>[<expr><name>ml</name></expr>]</index></name></expr>;</expr_stmt>
		       <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>client_hostname</name><index>[<expr><name>ml</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		     </block_content>}</block></if></if_stmt>
		   
		   <if_stmt><if>if <condition>(<expr><call><name>hostname_isequal</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>client_hostname</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		       <operator>(</operator><name>save</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>m</name><operator>-&gt;</operator><name>wildcard</name></name><operator>)</operator></expr>)</condition>
		     <block>{<block_content>
		       <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>netid</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>tags</name></name></expr>;</expr_stmt>
		       <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>tags</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>netid</name></name></expr>;</expr_stmt>
		     </block_content>}</block></if></if_stmt>
		   
		   <if_stmt><if>if <condition>(<expr><name>save</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		     <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>client_hostname</name><index>[<expr><name>ml</name></expr>]</index></name> <operator>=</operator> <name>save</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		 </block_content>}</block></for>
	     </block_content>}</block></if></if_stmt>
	 </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>	 
  
  <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>clid</name></name> <operator>&amp;&amp;</operator>
      <operator>(</operator><name>config</name> <operator>=</operator> <call><name>find_config</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_conf</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>clid</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>clid_len</name></name></expr></argument>,
			    <argument><expr><name><name>state</name><operator>-&gt;</operator><name>mac</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>mac_len</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>mac_type</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>run_tag_if</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>tags</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
      <call><name>have_config</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>CONFIG_NAME</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>hostname</name></name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>hostname</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>domain</name></name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>domain</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>hostname_auth</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>client_hostname</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>domain</name></name> <operator>=</operator> <call><name>strip_hostname</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>client_hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>client_hostname</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>hostname</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>client_hostname</name></name></expr>;</expr_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>config</name></expr>)</condition>
	    <block>{<block_content>
	      <comment type="block">/* Search again now we have a hostname. 
		 Only accept configs without CLID here, (it won't match)
		 to avoid impersonation by name. */</comment>
	      <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_config</name></name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>find_config</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_conf</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><call><name>run_tag_if</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>tags</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	      <if_stmt><if>if <condition>(<expr><name>new</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>have_config</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><name>CONFIG_CLID</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>new</name><operator>-&gt;</operator><name>hwaddr</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>config</name> <operator>=</operator> <name>new</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>config</name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid_list</name></name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
      
      <for>for <control>(<init><expr><name>list</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>netid</name></name></expr>;</init> <condition><expr><name>list</name></expr>;</condition> <incr><expr><name>list</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
        <block>{<block_content>
          <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>list</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>tags</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>tags</name></name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>list</name></name></expr>;</expr_stmt>
        </block_content>}</block></for>

      <comment type="block">/* set "known" tag for known hosts */</comment>
      <expr_stmt><expr><name><name>known_id</name><operator>.</operator><name>net</name></name> <operator>=</operator> <literal type="string">"known"</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>known_id</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>tags</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>tags</name></name> <operator>=</operator> <operator>&amp;</operator><name>known_id</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>have_config</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>CONFIG_DISABLE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>ignore</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>clid</name></name> <operator>&amp;&amp;</operator>
	   <call><name>find_config</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_conf</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>clid</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>clid_len</name></name></expr></argument>,
		       <argument><expr><name><name>state</name><operator>-&gt;</operator><name>mac</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>mac_len</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>mac_type</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>run_tag_if</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>tags</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>known_id</name><operator>.</operator><name>net</name></name> <operator>=</operator> <literal type="string">"known-othernet"</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>known_id</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>tags</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>tags</name></name> <operator>=</operator> <operator>&amp;</operator><name>known_id</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><name>tagif</name> <operator>=</operator> <call><name>run_tag_if</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>tags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* if all the netids in the ignore list are present, ignore this client */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_ignore</name></name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid_list</name></name> <modifier>*</modifier></type><name>id_list</name></decl>;</decl_stmt>
     
      <for>for <control>(<init><expr><name>id_list</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_ignore</name></name></expr>;</init> <condition><expr><name>id_list</name></expr>;</condition> <incr><expr><name>id_list</name> <operator>=</operator> <name><name>id_list</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><call><name>match_netid</name><argument_list>(<argument><expr><name><name>id_list</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><name>tagif</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name>ignore</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
    </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* if all the netids in the ignore_name list are present, ignore client-supplied name */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>hostname_auth</name></name></expr>)</condition>
    <block>{<block_content>
       <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid_list</name></name> <modifier>*</modifier></type><name>id_list</name></decl>;</decl_stmt>
       
       <for>for <control>(<init><expr><name>id_list</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_ignore_names</name></name></expr>;</init> <condition><expr><name>id_list</name></expr>;</condition> <incr><expr><name>id_list</name> <operator>=</operator> <name><name>id_list</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	 <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>id_list</name><operator>-&gt;</operator><name>list</name></name><operator>)</operator> <operator>||</operator> <call><name>match_netid</name><argument_list>(<argument><expr><name><name>id_list</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><name>tagif</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	   <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
       <if_stmt><if>if <condition>(<expr><name>id_list</name></expr>)</condition><block type="pseudo"><block_content>
	 <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>hostname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  

  <switch>switch <condition>(<expr><name>msg_type</name></expr>)</condition>
    <block>{<block_content>
    <default>default:</default>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
      
      
    <case>case <expr><name>DHCP6SOLICIT</name></expr>:</case>
      <block>{<block_content>
      	<decl_stmt><decl><type><name>int</name></type> <name>address_assigned</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<comment type="block">/* tags without all prefix-class tags */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>solicit_tags</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><name>outmsgtype</name> <operator>=</operator> <name>DHCP6ADVERTISE</name></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>(<expr><call><name>opt6_find</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>packet_options</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name>OPTION6_RAPID_COMMIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name>outmsgtype</name> <operator>=</operator> <name>DHCP6REPLY</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>lease_allocate</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	    <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>new_opt6</name><argument_list>(<argument><expr><name>OPTION6_RAPID_COMMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt>
	
  	<expr_stmt><expr><call><name>log6_quiet</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"DHCPSOLICIT"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><ternary><condition><expr><name>ignore</name></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"ignored"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <label><name>request_no_address</name>:</label>
	<expr_stmt><expr><name>solicit_tags</name> <operator>=</operator> <name>tagif</name></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>(<expr><name>ignore</name></expr>)</condition><block type="pseudo"><block_content>
	  <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	
	<comment type="block">/* reset USED bits in leases */</comment>
	<expr_stmt><expr><call><name>lease6_reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Can use configured address max once per prefix */</comment>
	<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>context</name></name></expr>;</init> <condition><expr><name>c</name></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>current</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	  <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CONTEXT_CONF_USED</name></expr>;</expr_stmt></block_content></block></for>

	<for>for <control>(<init><expr><name>opt</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>packet_options</name></name></expr>;</init> <condition><expr><name>opt</name></expr>;</condition> <incr><expr><name>opt</name> <operator>=</operator> <call><name>opt6_next</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr></incr>)</control>
	  <block>{<block_content>   
	    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ia_option</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ia_end</name></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>min_time</name> <init>= <expr><literal type="number">0xffffffff</literal></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>int</name></type> <name>t1cntr</name></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>int</name></type> <name>ia_counter</name></decl>;</decl_stmt>
	    <comment type="block">/* set unless we're sending a particular prefix-class, when we
	       want only dhcp-ranges with the correct tags set and not those without any tags. */</comment>
	    <decl_stmt><decl><type><name>int</name></type> <name>plain_range</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>u32</name></type> <name>lease_time</name></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>ltmp</name></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>req_addr</name></decl>, <decl><type ref="prev"/><name>addr</name></decl>;</decl_stmt>
	    
	    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_ia</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ia_end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ia_option</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	      <continue>continue;</continue></block_content></block></if></if_stmt>
	    
	    <comment type="block">/* reset USED bits in contexts - one address per prefix per IAID */</comment>
	    <for>for <control>(<init><expr><name>c</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>context</name></name></expr>;</init> <condition><expr><name>c</name></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>current</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	      <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CONTEXT_USED</name></expr>;</expr_stmt></block_content></block></for>

	    <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>build_ia</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1cntr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><name>address_assigned</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>address_assigned</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	    <for>for <control>(<init><expr><name>ia_counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ia_option</name></expr>;</condition> <incr><expr><name>ia_counter</name><operator>++</operator></expr><operator>,</operator> <expr><name>ia_option</name> <operator>=</operator> <call><name>opt6_find</name><argument_list>(<argument><expr><call><name>opt6_next</name><argument_list>(<argument><expr><name>ia_option</name></expr></argument>, <argument><expr><name>ia_end</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ia_end</name></expr></argument>, <argument><expr><name>OPTION6_IAADDR</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr></incr>)</control>
	      <block>{<block_content>
		<comment type="block">/* worry about alignment here. */</comment>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_addr</name></expr></argument>, <argument><expr><call><name>opt6_ptr</name><argument_list>(<argument><expr><name>ia_option</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>address6_valid</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req_addr</name></expr></argument>, <argument><expr><name>solicit_tags</name></expr></argument>, <argument><expr><name>plain_range</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><name>lease_time</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>lease_time</name></name></expr>;</expr_stmt>
		    <comment type="block">/* If the client asks for an address on the same network as a configured address, 
		       offer the configured address instead, to make moving to newly-configured
		       addresses automatic. */</comment>
		    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_CONF_USED</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>config_valid</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>)</condition>
		      <block>{<block_content>
			<expr_stmt><expr><name>req_addr</name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>mark_config_used</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>have_config</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>CONFIG_TIME</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			  <expr_stmt><expr><name>lease_time</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>lease_time</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		      </block_content>}</block></if>
		    <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>c</name> <operator>=</operator> <call><name>address6_available</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req_addr</name></expr></argument>, <argument><expr><name>solicit_tags</name></expr></argument>, <argument><expr><name>plain_range</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		      <continue>continue;</continue></block_content></block></if> <comment type="block">/* not an address we're allowed */</comment>
		    <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>check_address</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req_addr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		      <continue>continue;</continue></block_content></block></if></if_stmt> <comment type="block">/* address leased elsewhere */</comment>
		    
		    <comment type="block">/* add address to output packet */</comment>
		    <expr_stmt><expr><call><name>add_address</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>lease_time</name></expr></argument>, <argument><expr><name>ia_option</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>min_time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req_addr</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>mark_context_used</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>get_context_tag</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><name>address_assigned</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		  </block_content>}</block></if></if_stmt>
	      </block_content>}</block></for>
	    
	    <comment type="block">/* Suggest configured address(es) */</comment>
	    <for>for <control>(<init><expr><name>c</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>context</name></name></expr>;</init> <condition><expr><name>c</name></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>current</name></name></expr></incr>)</control><block type="pseudo"><block_content> 
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_CONF_USED</name><operator>)</operator> <operator>&amp;&amp;</operator>
		  <call><name>match_netid</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>, <argument><expr><name>solicit_tags</name></expr></argument>, <argument><expr><name>plain_range</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		  <call><name>config_valid</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>mark_config_used</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><call><name>have_config</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>CONFIG_TIME</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name>lease_time</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>lease_time</name></name></expr>;</expr_stmt></block_content></block></if>
		  <else>else<block type="pseudo"><block_content>
		    <expr_stmt><expr><name>lease_time</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>lease_time</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		  <comment type="block">/* add address to output packet */</comment>
		  <expr_stmt><expr><call><name>add_address</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>lease_time</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>min_time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>mark_context_used</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>get_context_tag</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name>address_assigned</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt></block_content></block></for>
	    
	    <comment type="block">/* return addresses for existing leases */</comment>
	    <expr_stmt><expr><name>ltmp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	    <while>while <condition>(<expr><operator>(</operator><name>ltmp</name> <operator>=</operator> <call><name>lease6_find_by_client</name><argument_list>(<argument><expr><name>ltmp</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>ia_type</name></name> <operator>==</operator> <name>OPTION6_IA_NA</name></expr> ?</condition><then> <expr><name>LEASE_NA</name></expr> </then><else>: <expr><name>LEASE_TA</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>clid</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>clid_len</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>iaid</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name>req_addr</name> <operator>=</operator> <name><name>ltmp</name><operator>-&gt;</operator><name>addr6</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>address6_available</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req_addr</name></expr></argument>, <argument><expr><name>solicit_tags</name></expr></argument>, <argument><expr><name>plain_range</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><call><name>add_address</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>lease_time</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>min_time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req_addr</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>mark_context_used</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>get_context_tag</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><name>address_assigned</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		  </block_content>}</block></if></if_stmt>
	      </block_content>}</block></while>
		 	   
	    <comment type="block">/* Return addresses for all valid contexts which don't yet have one */</comment>
	    <while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>address6_allocate</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>clid</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>clid_len</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>ia_type</name></name> <operator>==</operator> <name>OPTION6_IA_TA</name></expr></argument>,
					  <argument><expr><name><name>state</name><operator>-&gt;</operator><name>iaid</name></name></expr></argument>, <argument><expr><name>ia_counter</name></expr></argument>, <argument><expr><name>solicit_tags</name></expr></argument>, <argument><expr><name>plain_range</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><call><name>add_address</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>lease_time</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>min_time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>mark_context_used</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>get_context_tag</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>address_assigned</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	      </block_content>}</block></while>
	    
	    <if_stmt><if>if <condition>(<expr><name>address_assigned</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
	      <block>{<block_content>
		<comment type="block">/* If the server will not assign any addresses to any IAs in a
		   subsequent Request from the client, the server MUST send an Advertise
		   message to the client that doesn't include any IA options. */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>lease_allocate</name></name></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><call><name>save_counter</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <continue>continue;</continue>
		  </block_content>}</block></if></if_stmt>
		
		<comment type="block">/* If the server cannot assign any addresses to an IA in the message
		   from the client, the server MUST include the IA in the Reply message
		   with no addresses in the IA and a Status Code option in the IA
		   containing status code NoAddrsAvail. */</comment>
		<expr_stmt><expr><name>o1</name> <operator>=</operator> <call><name>new_opt6</name><argument_list>(<argument><expr><name>OPTION6_STATUS_CODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>put_opt6_short</name><argument_list>(<argument><expr><name>DHCP6NOADDRS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>put_opt6_string</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"address unavailable"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      </block_content>}</block></if></if_stmt>
	    
	    <expr_stmt><expr><call><name>end_ia</name><argument_list>(<argument><expr><name>t1cntr</name></expr></argument>, <argument><expr><name>min_time</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
	  </block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>address_assigned</name></expr>)</condition> 
	  <block>{<block_content>
	    <expr_stmt><expr><name>o1</name> <operator>=</operator> <call><name>new_opt6</name><argument_list>(<argument><expr><name>OPTION6_STATUS_CODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>put_opt6_short</name><argument_list>(<argument><expr><name>DHCP6SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>put_opt6_string</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"success"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    
	    <comment type="block">/* If --dhcp-authoritative is set, we can tell client not to wait for
	       other possible servers */</comment>
	    <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>new_opt6</name><argument_list>(<argument><expr><name>OPTION6_PREFERENCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>put_opt6_char</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_AUTHORITATIVE</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">255</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>tagif</name> <operator>=</operator> <call><name>add_options</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></if>
	<else>else
	  <block>{<block_content> 
	    <comment type="block">/* no address, return error */</comment>
	    <expr_stmt><expr><name>o1</name> <operator>=</operator> <call><name>new_opt6</name><argument_list>(<argument><expr><name>OPTION6_STATUS_CODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>put_opt6_short</name><argument_list>(<argument><expr><name>DHCP6NOADDRS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>put_opt6_string</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"no addresses available"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <comment type="block">/* Some clients will ask repeatedly when we're not giving
	       out addresses because we're in stateless mode. Avoid spamming
	       the log in that case. */</comment>
	    <for>for <control>(<init><expr><name>c</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>context</name></name></expr>;</init> <condition><expr><name>c</name></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>current</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_RA_STATELESS</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>log6_packet</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>lease_allocate</name></name></expr> ?</condition><then> <expr><literal type="string">"DHCPREPLY"</literal></expr> </then><else>: <expr><literal type="string">"DHCPADVERTISE"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"no addresses available"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <break>break;</break>
		</block_content>}</block></if></if_stmt></block_content></block></for>
	  </block_content>}</block></else></if_stmt>

	<break>break;</break>
      </block_content>}</block>
      
    <case>case <expr><name>DHCP6REQUEST</name></expr>:</case>
      <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>address_assigned</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><call><name>save_counter</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* set reply message type */</comment>
	<expr_stmt><expr><name>outmsgtype</name> <operator>=</operator> <name>DHCP6REPLY</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>lease_allocate</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>log6_quiet</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"DHCPREQUEST"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><ternary><condition><expr><name>ignore</name></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"ignored"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>(<expr><name>ignore</name></expr>)</condition><block type="pseudo"><block_content>
	  <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	
	<for>for <control>(<init><expr><name>opt</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>packet_options</name></name></expr>;</init> <condition><expr><name>opt</name></expr>;</condition> <incr><expr><name>opt</name> <operator>=</operator> <call><name>opt6_next</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr></incr>)</control>
	  <block>{<block_content>   
	    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ia_option</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ia_end</name></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>min_time</name> <init>= <expr><literal type="number">0xffffffff</literal></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>int</name></type> <name>t1cntr</name></decl>;</decl_stmt>
	    
	     <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_ia</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ia_end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ia_option</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	       <continue>continue;</continue></block_content></block></if></if_stmt>

	     <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ia_option</name></expr>)</condition>
	       <block>{<block_content>
		 <comment type="block">/* If we get a request with an IA_*A without addresses, treat it exactly like
		    a SOLICT with rapid commit set. */</comment>
		 <expr_stmt><expr><call><name>save_counter</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 <goto>goto <name>request_no_address</name>;</goto> 
	       </block_content>}</block></if></if_stmt>

	    <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>build_ia</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1cntr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      
	    <for>for <control>(<init>;</init> <condition><expr><name>ia_option</name></expr>;</condition> <incr><expr><name>ia_option</name> <operator>=</operator> <call><name>opt6_find</name><argument_list>(<argument><expr><call><name>opt6_next</name><argument_list>(<argument><expr><name>ia_option</name></expr></argument>, <argument><expr><name>ia_end</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ia_end</name></expr></argument>, <argument><expr><name>OPTION6_IAADDR</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr></incr>)</control>
	      <block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>req_addr</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>dynamic</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>lease_time</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>config_ok</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		<comment type="block">/* align. */</comment>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_addr</name></expr></argument>, <argument><expr><call><name>opt6_ptr</name><argument_list>(<argument><expr><name>ia_option</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>address6_valid</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req_addr</name></expr></argument>, <argument><expr><name>tagif</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name>config_ok</name> <operator>=</operator> <operator>(</operator><call><name>config_implies</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req_addr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dynamic</name> <operator>=</operator> <call><name>address6_available</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req_addr</name></expr></argument>, <argument><expr><name>tagif</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <name>c</name></expr>)</condition>
		  <block>{<block_content>
		    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dynamic</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>config_ok</name></expr>)</condition>
		      <block>{<block_content>
			<comment type="block">/* Static range, not configured. */</comment>
			<expr_stmt><expr><name>o1</name> <operator>=</operator> <call><name>new_opt6</name><argument_list>(<argument><expr><name>OPTION6_STATUS_CODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>put_opt6_short</name><argument_list>(<argument><expr><name>DHCP6NOADDRS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>put_opt6_string</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"address unavailable"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      </block_content>}</block></if>
		    <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>check_address</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req_addr</name></expr></argument>)</argument_list></call></expr>)</condition>
		      <block>{<block_content>
			<comment type="block">/* Address leased to another DUID/IAID */</comment>
			<expr_stmt><expr><name>o1</name> <operator>=</operator> <call><name>new_opt6</name><argument_list>(<argument><expr><name>OPTION6_STATUS_CODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>put_opt6_short</name><argument_list>(<argument><expr><name>DHCP6UNSPEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>put_opt6_string</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"address in use"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      </block_content>}</block></if> 
		    <else>else 
		      <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dynamic</name></expr>)</condition><block type="pseudo"><block_content>
			  <expr_stmt><expr><name>dynamic</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>lease_time</name> <operator>=</operator> <name><name>dynamic</name><operator>-&gt;</operator><name>lease_time</name></name></expr>;</expr_stmt>
			
			<if_stmt><if>if <condition>(<expr><name>config_ok</name> <operator>&amp;&amp;</operator> <call><name>have_config</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>CONFIG_TIME</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			  <expr_stmt><expr><name>lease_time</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>lease_time</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>add_address</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>dynamic</name></expr></argument>, <argument><expr><name>lease_time</name></expr></argument>, <argument><expr><name>ia_option</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>min_time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req_addr</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>get_context_tag</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>dynamic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>address_assigned</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		      </block_content>}</block></else></if_stmt>
		  </block_content>}</block></if>
		<else>else 
		  <block>{<block_content>
		    <comment type="block">/* requested address not on the correct link */</comment>
		    <expr_stmt><expr><name>o1</name> <operator>=</operator> <call><name>new_opt6</name><argument_list>(<argument><expr><name>OPTION6_STATUS_CODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>put_opt6_short</name><argument_list>(<argument><expr><name>DHCP6NOTONLINK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>put_opt6_string</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"not on link"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  </block_content>}</block></else></if_stmt>
	      </block_content>}</block></for>
	 
	    <expr_stmt><expr><call><name>end_ia</name><argument_list>(<argument><expr><name>t1cntr</name></expr></argument>, <argument><expr><name>min_time</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
	  </block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>address_assigned</name></expr>)</condition> 
	  <block>{<block_content>
	    <expr_stmt><expr><name>o1</name> <operator>=</operator> <call><name>new_opt6</name><argument_list>(<argument><expr><name>OPTION6_STATUS_CODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>put_opt6_short</name><argument_list>(<argument><expr><name>DHCP6SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>put_opt6_string</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"success"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></if>
	<else>else
	  <block>{<block_content> 
	    <comment type="block">/* no address, return error */</comment>
	    <expr_stmt><expr><name>o1</name> <operator>=</operator> <call><name>new_opt6</name><argument_list>(<argument><expr><name>OPTION6_STATUS_CODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>put_opt6_short</name><argument_list>(<argument><expr><name>DHCP6NOADDRS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>put_opt6_string</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"no addresses available"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>log6_packet</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"DHCPREPLY"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"no addresses available"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>tagif</name> <operator>=</operator> <call><name>add_options</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
      </block_content>}</block>
      
  
    <case>case <expr><name>DHCP6RENEW</name></expr>:</case>
    <case>case <expr><name>DHCP6REBIND</name></expr>:</case>
      <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>address_assigned</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* set reply message type */</comment>
	<expr_stmt><expr><name>outmsgtype</name> <operator>=</operator> <name>DHCP6REPLY</name></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>log6_quiet</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><ternary><condition><expr><name>msg_type</name> <operator>==</operator> <name>DHCP6RENEW</name></expr> ?</condition><then> <expr><literal type="string">"DHCPRENEW"</literal></expr> </then><else>: <expr><literal type="string">"DHCPREBIND"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>opt</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>packet_options</name></name></expr>;</init> <condition><expr><name>opt</name></expr>;</condition> <incr><expr><name>opt</name> <operator>=</operator> <call><name>opt6_next</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr></incr>)</control>
	  <block>{<block_content>
	    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ia_option</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ia_end</name></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>min_time</name> <init>= <expr><literal type="number">0xffffffff</literal></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>int</name></type> <name>t1cntr</name></decl>, <decl><type ref="prev"/><name>iacntr</name></decl>;</decl_stmt>
	    
	    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_ia</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ia_end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ia_option</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	      <continue>continue;</continue></block_content></block></if></if_stmt>
	    
	    <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>build_ia</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1cntr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>iacntr</name> <operator>=</operator> <call><name>save_counter</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	    
	    <for>for <control>(<init>;</init> <condition><expr><name>ia_option</name></expr>;</condition> <incr><expr><name>ia_option</name> <operator>=</operator> <call><name>opt6_find</name><argument_list>(<argument><expr><call><name>opt6_next</name><argument_list>(<argument><expr><name>ia_option</name></expr></argument>, <argument><expr><name>ia_end</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ia_end</name></expr></argument>, <argument><expr><name>OPTION6_IAADDR</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr></incr>)</control>
	      <block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>req_addr</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>preferred_time</name> <init>=  <expr><call><name>opt6_uint</name><argument_list>(<argument><expr><name>ia_option</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>valid_time</name> <init>=  <expr><call><name>opt6_uint</name><argument_list>(<argument><expr><name>ia_option</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>message</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>this_context</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_addr</name></expr></argument>, <argument><expr><call><name>opt6_ptr</name><argument_list>(<argument><expr><name>ia_option</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
		
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>lease</name> <operator>=</operator> <call><name>lease6_find</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>clid</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>clid_len</name></name></expr></argument>,
					  <argument><expr><ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>ia_type</name></name> <operator>==</operator> <name>OPTION6_IA_NA</name></expr> ?</condition><then> <expr><name>LEASE_NA</name></expr> </then><else>: <expr><name>LEASE_TA</name></expr></else></ternary></expr></argument>, 
					  <argument><expr><name><name>state</name><operator>-&gt;</operator><name>iaid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req_addr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		  <block>{<block_content>
		    <if_stmt><if>if <condition>(<expr><name>msg_type</name> <operator>==</operator> <name>DHCP6REBIND</name></expr>)</condition>
		      <block>{<block_content>
			<comment type="block">/* When rebinding, we can create a lease if it doesn't exist. */</comment>
			<expr_stmt><expr><name>lease</name> <operator>=</operator> <call><name>lease6_allocate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_addr</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>ia_type</name></name> <operator>==</operator> <name>OPTION6_IA_NA</name></expr> ?</condition><then> <expr><name>LEASE_NA</name></expr> </then><else>: <expr><name>LEASE_TA</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>lease</name></expr>)</condition><block type="pseudo"><block_content>
			  <expr_stmt><expr><call><name>lease_set_iaid</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>iaid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
			  <break>break;</break></block_content></block></else></if_stmt>
		      </block_content>}</block></if>
		    <else>else
		      <block>{<block_content>
			<comment type="block">/* If the server cannot find a client entry for the IA the server
			   returns the IA containing no addresses with a Status Code option set
			   to NoBinding in the Reply message. */</comment>
			<expr_stmt><expr><call><name>save_counter</name><argument_list>(<argument><expr><name>iacntr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>t1cntr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			
			<expr_stmt><expr><call><name>log6_packet</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"DHCPREPLY"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>req_addr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"lease not found"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><name>o1</name> <operator>=</operator> <call><name>new_opt6</name><argument_list>(<argument><expr><name>OPTION6_STATUS_CODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>put_opt6_short</name><argument_list>(<argument><expr><name>DHCP6NOBINDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>put_opt6_string</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"no binding found"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><name>preferred_time</name> <operator>=</operator> <name>valid_time</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		      </block_content>}</block></else></if_stmt>
		  </block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>this_context</name> <operator>=</operator> <call><name>address6_available</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req_addr</name></expr></argument>, <argument><expr><name>tagif</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
		    <operator>(</operator><name>this_context</name> <operator>=</operator> <call><name>address6_valid</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req_addr</name></expr></argument>, <argument><expr><name>tagif</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		  <block>{<block_content>
		    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>lease_time</name></decl>;</decl_stmt>

		    <expr_stmt><expr><call><name>get_context_tag</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>this_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    
		    <if_stmt><if>if <condition>(<expr><call><name>config_implies</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>this_context</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req_addr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>have_config</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>CONFIG_TIME</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		      <expr_stmt><expr><name>lease_time</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>lease_time</name></name></expr>;</expr_stmt></block_content></block></if>
		    <else>else<block type="pseudo"><block_content> 
		      <expr_stmt><expr><name>lease_time</name> <operator>=</operator> <name><name>this_context</name><operator>-&gt;</operator><name>lease_time</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		    
		    <expr_stmt><expr><call><name>calculate_times</name><argument_list>(<argument><expr><name>this_context</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>min_time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>valid_time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>preferred_time</name></expr></argument>, <argument><expr><name>lease_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
		    
		    <expr_stmt><expr><call><name>lease_set_expires</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name>valid_time</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <comment type="block">/* Update MAC record in case it's new information. */</comment>
		    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>mac_len</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		      <expr_stmt><expr><call><name>lease_set_hwaddr</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>mac</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>clid</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>mac_len</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>mac_type</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>clid_len</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>ia_type</name></name> <operator>==</operator> <name>OPTION6_IA_NA</name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>hostname</name></name></expr>)</condition>
		      <block>{<block_content>
			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>addr_domain</name> <init>= <expr><call><name>get_domain6</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>send_domain</name></name></expr>)</condition><block type="pseudo"><block_content>
			  <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>send_domain</name></name> <operator>=</operator> <name>addr_domain</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>lease_set_hostname</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>hostname_auth</name></name></expr></argument>, <argument><expr><name>addr_domain</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
			<expr_stmt><expr><name>message</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>hostname</name></name></expr>;</expr_stmt>
		      </block_content>}</block></if></if_stmt>
		    
		    
		    <if_stmt><if>if <condition>(<expr><name>preferred_time</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		      <expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"deprecated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		    <expr_stmt><expr><name>address_assigned</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		  </block_content>}</block></if>
		<else>else
		  <block>{<block_content>
		    <expr_stmt><expr><name>preferred_time</name> <operator>=</operator> <name>valid_time</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		    <expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"address invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  </block_content>}</block></else></if_stmt> 

		<if_stmt><if>if <condition>(<expr><name>message</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>message</name> <operator>!=</operator> <name><name>state</name><operator>-&gt;</operator><name>hostname</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><call><name>log6_packet</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"DHCPREPLY"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>req_addr</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>	
		<else>else<block type="pseudo"><block_content>
		  <expr_stmt><expr><call><name>log6_quiet</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"DHCPREPLY"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>req_addr</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	
		<expr_stmt><expr><name>o1</name> <operator>=</operator>  <call><name>new_opt6</name><argument_list>(<argument><expr><name>OPTION6_IAADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>put_opt6</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>req_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>put_opt6_long</name><argument_list>(<argument><expr><name>preferred_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>put_opt6_long</name><argument_list>(<argument><expr><name>valid_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      </block_content>}</block></for>
	    
	    <expr_stmt><expr><call><name>end_ia</name><argument_list>(<argument><expr><name>t1cntr</name></expr></argument>, <argument><expr><name>min_time</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>address_assigned</name> <operator>&amp;&amp;</operator> <name>msg_type</name> <operator>==</operator> <name>DHCP6REBIND</name></expr>)</condition>
	  <block>{<block_content> 
	    <comment type="block">/* can't create lease for any address, return error */</comment>
	    <expr_stmt><expr><name>o1</name> <operator>=</operator> <call><name>new_opt6</name><argument_list>(<argument><expr><name>OPTION6_STATUS_CODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>put_opt6_short</name><argument_list>(<argument><expr><name>DHCP6NOADDRS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>put_opt6_string</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"no addresses available"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt>
	
	<expr_stmt><expr><name>tagif</name> <operator>=</operator> <call><name>add_options</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
      </block_content>}</block>
      
    <case>case <expr><name>DHCP6CONFIRM</name></expr>:</case>
      <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>good_addr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* set reply message type */</comment>
	<expr_stmt><expr><name>outmsgtype</name> <operator>=</operator> <name>DHCP6REPLY</name></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>log6_quiet</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"DHCPCONFIRM"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<for>for <control>(<init><expr><name>opt</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>packet_options</name></name></expr>;</init> <condition><expr><name>opt</name></expr>;</condition> <incr><expr><name>opt</name> <operator>=</operator> <call><name>opt6_next</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr></incr>)</control>
	  <block>{<block_content>
	    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ia_option</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ia_end</name></decl>;</decl_stmt>
	    
	    <for>for <control>(<init><expr><call><name>check_ia</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ia_end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ia_option</name></expr></argument>)</argument_list></call></expr>;</init>
		 <condition><expr><name>ia_option</name></expr>;</condition>
		 <incr><expr><name>ia_option</name> <operator>=</operator> <call><name>opt6_find</name><argument_list>(<argument><expr><call><name>opt6_next</name><argument_list>(<argument><expr><name>ia_option</name></expr></argument>, <argument><expr><name>ia_end</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ia_end</name></expr></argument>, <argument><expr><name>OPTION6_IAADDR</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr></incr>)</control>
	      <block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>req_addr</name></decl>;</decl_stmt>

		<comment type="block">/* alignment */</comment>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_addr</name></expr></argument>, <argument><expr><call><name>opt6_ptr</name><argument_list>(<argument><expr><name>ia_option</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>address6_valid</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req_addr</name></expr></argument>, <argument><expr><name>tagif</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><name>o1</name> <operator>=</operator> <call><name>new_opt6</name><argument_list>(<argument><expr><name>OPTION6_STATUS_CODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>put_opt6_short</name><argument_list>(<argument><expr><name>DHCP6NOTONLINK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>put_opt6_string</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"confirm failed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>log6_quiet</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"DHCPREPLY"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>req_addr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"confirm failed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <return>return <expr><literal type="number">1</literal></expr>;</return>
		  </block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>good_addr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>log6_quiet</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"DHCPREPLY"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>req_addr</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      </block_content>}</block></for>
	  </block_content>}</block></for>	 
	
	<comment type="block">/* No addresses, no reply: RFC 3315 18.2.2 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>good_addr</name></expr>)</condition><block type="pseudo"><block_content>
	  <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>o1</name> <operator>=</operator> <call><name>new_opt6</name><argument_list>(<argument><expr><name>OPTION6_STATUS_CODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>put_opt6_short</name><argument_list>(<argument><expr><name>DHCP6SUCCESS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>put_opt6_string</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"all addresses still on link"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
    </block_content>}</block>
      
    <case>case <expr><name>DHCP6IREQ</name></expr>:</case>
      <block>{<block_content>
	<comment type="block">/* We can't discriminate contexts based on address, as we don't know it.
	   If there is only one possible context, we can use its tags */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>context</name></name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>net</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>current</name></name></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>context_tags</name></name> <operator>=</operator>  <operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>netid</name></name></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt>

	<comment type="block">/* Similarly, we can't determine domain from address, but if the FQDN is
	   given in --dhcp-host, we can use that, and failing that we can use the 
	   unqualified configured domain, if any. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>hostname_auth</name></name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>send_domain</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>domain</name></name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
	  <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>send_domain</name></name> <operator>=</operator> <call><name>get_domain6</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>log6_quiet</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"DHCPINFORMATION-REQUEST"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><ternary><condition><expr><name>ignore</name></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"ignored"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>state</name><operator>-&gt;</operator><name>hostname</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ignore</name></expr>)</condition><block type="pseudo"><block_content>
	  <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>outmsgtype</name> <operator>=</operator> <name>DHCP6REPLY</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>tagif</name> <operator>=</operator> <call><name>add_options</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
      </block_content>}</block>
      
      
    <case>case <expr><name>DHCP6RELEASE</name></expr>:</case>
      <block>{<block_content>
	<comment type="block">/* set reply message type */</comment>
	<expr_stmt><expr><name>outmsgtype</name> <operator>=</operator> <name>DHCP6REPLY</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>log6_quiet</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"DHCPRELEASE"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>opt</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>packet_options</name></name></expr>;</init> <condition><expr><name>opt</name></expr>;</condition> <incr><expr><name>opt</name> <operator>=</operator> <call><name>opt6_next</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr></incr>)</control>
	  <block>{<block_content>
	    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ia_option</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ia_end</name></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>int</name></type> <name>made_ia</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	    	    
	    <for>for <control>(<init><expr><call><name>check_ia</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ia_end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ia_option</name></expr></argument>)</argument_list></call></expr>;</init>
		 <condition><expr><name>ia_option</name></expr>;</condition>
		 <incr><expr><name>ia_option</name> <operator>=</operator> <call><name>opt6_find</name><argument_list>(<argument><expr><call><name>opt6_next</name><argument_list>(<argument><expr><name>ia_option</name></expr></argument>, <argument><expr><name>ia_end</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ia_end</name></expr></argument>, <argument><expr><name>OPTION6_IAADDR</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr></incr>)</control> 
	      <block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>

		<comment type="block">/* align */</comment>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><call><name>opt6_ptr</name><argument_list>(<argument><expr><name>ia_option</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>lease</name> <operator>=</operator> <call><name>lease6_find</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>clid</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>clid_len</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>ia_type</name></name> <operator>==</operator> <name>OPTION6_IA_NA</name></expr> ?</condition><then> <expr><name>LEASE_NA</name></expr> </then><else>: <expr><name>LEASE_TA</name></expr></else></ternary></expr></argument>,
					 <argument><expr><name><name>state</name><operator>-&gt;</operator><name>iaid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><call><name>lease_prune</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else
		  <block>{<block_content>
		    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>made_ia</name></expr>)</condition>
		      <block>{<block_content>
			<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>new_opt6</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>ia_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>put_opt6_long</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>iaid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>ia_type</name></name> <operator>==</operator> <name>OPTION6_IA_NA</name></expr>)</condition>
			  <block>{<block_content>
			    <expr_stmt><expr><call><name>put_opt6_long</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			    <expr_stmt><expr><call><name>put_opt6_long</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
			  </block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>made_ia</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		      </block_content>}</block></if></if_stmt>
		    
		    <expr_stmt><expr><name>o1</name> <operator>=</operator> <call><name>new_opt6</name><argument_list>(<argument><expr><name>OPTION6_IAADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>put_opt6</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>put_opt6_long</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>put_opt6_long</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  </block_content>}</block></else></if_stmt>
	      </block_content>}</block></for>
	    
	    <if_stmt><if>if <condition>(<expr><name>made_ia</name></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name>o1</name> <operator>=</operator> <call><name>new_opt6</name><argument_list>(<argument><expr><name>OPTION6_STATUS_CODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>put_opt6_short</name><argument_list>(<argument><expr><name>DHCP6NOBINDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>put_opt6_string</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"no binding found"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      </block_content>}</block></if></if_stmt>
	  </block_content>}</block></for>
	
	<expr_stmt><expr><name>o1</name> <operator>=</operator> <call><name>new_opt6</name><argument_list>(<argument><expr><name>OPTION6_STATUS_CODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>put_opt6_short</name><argument_list>(<argument><expr><name>DHCP6SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>put_opt6_string</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"release received"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<break>break;</break>
      </block_content>}</block>

    <case>case <expr><name>DHCP6DECLINE</name></expr>:</case>
      <block>{<block_content>
	<comment type="block">/* set reply message type */</comment>
	<expr_stmt><expr><name>outmsgtype</name> <operator>=</operator> <name>DHCP6REPLY</name></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>log6_quiet</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"DHCPDECLINE"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>opt</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>packet_options</name></name></expr>;</init> <condition><expr><name>opt</name></expr>;</condition> <incr><expr><name>opt</name> <operator>=</operator> <call><name>opt6_next</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr></incr>)</control>
	  <block>{<block_content>
	    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ia_option</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ia_end</name></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>int</name></type> <name>made_ia</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	    	    
	    <for>for <control>(<init><expr><call><name>check_ia</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ia_end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ia_option</name></expr></argument>)</argument_list></call></expr>;</init>
		 <condition><expr><name>ia_option</name></expr>;</condition>
		 <incr><expr><name>ia_option</name> <operator>=</operator> <call><name>opt6_find</name><argument_list>(<argument><expr><call><name>opt6_next</name><argument_list>(<argument><expr><name>ia_option</name></expr></argument>, <argument><expr><name>ia_end</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ia_end</name></expr></argument>, <argument><expr><name>OPTION6_IAADDR</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr></incr>)</control> 
	      <block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>struct</name> <name>addrlist</name></name> <modifier>*</modifier></type><name>addr_list</name></decl>;</decl_stmt>
		
		<comment type="block">/* align */</comment>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><call><name>opt6_ptr</name><argument_list>(<argument><expr><name>ia_option</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>addr_list</name> <operator>=</operator> <call><name>config_implies</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><call><name>prettyprint_time</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff3</name></name></expr></argument>, <argument><expr><name>DECLINE_BACKOFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"disabling DHCP static address %s for %s"</literal></expr></argument>)</argument_list></call></expr></argument>, 
			      <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff3</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>addr_list</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ADDRLIST_DECLINED</name></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>addr_list</name><operator>-&gt;</operator><name>decline_time</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
		  </block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
		  <comment type="block">/* make sure this host gets a different address next time. */</comment>
		  <for>for <control>(<init><expr><name>context_tmp</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>context</name></name></expr>;</init> <condition><expr><name>context_tmp</name></expr>;</condition> <incr><expr><name>context_tmp</name> <operator>=</operator> <name><name>context_tmp</name><operator>-&gt;</operator><name>current</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		    <expr_stmt><expr><name><name>context_tmp</name><operator>-&gt;</operator><name>addr_epoch</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>lease</name> <operator>=</operator> <call><name>lease6_find</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>clid</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>clid_len</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>ia_type</name></name> <operator>==</operator> <name>OPTION6_IA_NA</name></expr> ?</condition><then> <expr><name>LEASE_NA</name></expr> </then><else>: <expr><name>LEASE_TA</name></expr></else></ternary></expr></argument>,
					 <argument><expr><name><name>state</name><operator>-&gt;</operator><name>iaid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><call><name>lease_prune</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else
		  <block>{<block_content>
		    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>made_ia</name></expr>)</condition>
		      <block>{<block_content>
			<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>new_opt6</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>ia_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>put_opt6_long</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>iaid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>ia_type</name></name> <operator>==</operator> <name>OPTION6_IA_NA</name></expr>)</condition>
			  <block>{<block_content>
			    <expr_stmt><expr><call><name>put_opt6_long</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			    <expr_stmt><expr><call><name>put_opt6_long</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
			  </block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>made_ia</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		      </block_content>}</block></if></if_stmt>
		    
		    <expr_stmt><expr><name>o1</name> <operator>=</operator> <call><name>new_opt6</name><argument_list>(<argument><expr><name>OPTION6_IAADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>put_opt6</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>put_opt6_long</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>put_opt6_long</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  </block_content>}</block></else></if_stmt>
	      </block_content>}</block></for>
	    
	    <if_stmt><if>if <condition>(<expr><name>made_ia</name></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name>o1</name> <operator>=</operator> <call><name>new_opt6</name><argument_list>(<argument><expr><name>OPTION6_STATUS_CODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>put_opt6_short</name><argument_list>(<argument><expr><name>DHCP6NOBINDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>put_opt6_string</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"no binding found"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      </block_content>}</block></if></if_stmt>
	    
	  </block_content>}</block></for>

	<comment type="block">/* We must answer with 'success' in global section anyway */</comment>
	<expr_stmt><expr><name>o1</name> <operator>=</operator> <call><name>new_opt6</name><argument_list>(<argument><expr><name>OPTION6_STATUS_CODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>put_opt6_short</name><argument_list>(<argument><expr><name>DHCP6SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>put_opt6_string</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"success"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
      </block_content>}</block>

    </block_content>}</block></switch>

  <comment type="block">/* Fill in the message type. Note that we store the offset,
     not a direct pointer, since the packet memory may have been 
     reallocated. */</comment>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>daemon</name><operator>-&gt;</operator><name>outpacket</name><operator>.</operator><name>iov_base</name></name><operator>)</operator><operator>)</operator><index>[<expr><name>start_msg</name></expr>]</index> <operator>=</operator> <name>outmsgtype</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>log_tags</name><argument_list>(<argument><expr><name>tagif</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>log6_opts</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>outpacket</name><operator>.</operator><name>iov_base</name></name> <operator>+</operator> <name>start_opts</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>outpacket</name><operator>.</operator><name>iov_base</name></name> <operator>+</operator> <call><name>save_counter</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>add_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>do_refresh</name></decl></parameter>)</parameter_list>  
<block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>oro</name></decl>;</decl_stmt>
  <comment type="block">/* filter options based on tags, those we want get DHOPT_TAGOK bit set */</comment>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>tagif</name> <init>= <expr><call><name>option_filter</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>tags</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>context_tags</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_opts6</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_opt</name></name> <modifier>*</modifier></type><name>opt_cfg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>done_dns</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>done_refresh</name> <init>= <expr><operator>!</operator><name>do_refresh</name></expr></init></decl>, <decl><type ref="prev"/><name>do_encap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>o</name></decl>, <decl><type ref="prev"/><name>o1</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>oro</name> <operator>=</operator> <call><name>opt6_find</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>packet_options</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name>OPTION6_ORO</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <for>for <control>(<init><expr><name>opt_cfg</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_opts6</name></name></expr>;</init> <condition><expr><name>opt_cfg</name></expr>;</condition> <incr><expr><name>opt_cfg</name> <operator>=</operator> <name><name>opt_cfg</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <comment type="block">/* netids match and not encapsulated? */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>opt_cfg</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DHOPT_TAGOK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>opt_cfg</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DHOPT_FORCE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>oro</name></expr>)</condition>
	<block>{<block_content>
	  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator>  <call><name>opt6_len</name><argument_list>(<argument><expr><name>oro</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><call><name>opt6_uint</name><argument_list>(<argument><expr><name>oro</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>opt_cfg</name><operator>-&gt;</operator><name>opt</name></name></expr>)</condition><block type="pseudo"><block_content>
	      <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	  
	  <comment type="block">/* option not requested */</comment>
	  <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator>  <call><name>opt6_len</name><argument_list>(<argument><expr><name>oro</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	    <continue>continue;</continue></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>opt_cfg</name><operator>-&gt;</operator><name>opt</name></name> <operator>==</operator> <name>OPTION6_REFRESH_TIME</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>done_refresh</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
       
      <if_stmt><if>if <condition>(<expr><name><name>opt_cfg</name><operator>-&gt;</operator><name>opt</name></name> <operator>==</operator> <name>OPTION6_DNS_SERVER</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>done_dns</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>opt_cfg</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DHOPT_ADDR6</name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
	  
	  <for>for <control>(<init><expr><name>a</name> <operator>=</operator> <operator>(</operator>struct <name>in6_addr</name> <operator>*</operator><operator>)</operator><name><name>opt_cfg</name><operator>-&gt;</operator><name>val</name></name></expr><operator>,</operator> <expr><name>len</name> <operator>=</operator> <name><name>opt_cfg</name><operator>-&gt;</operator><name>len</name></name></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> 
	       <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>opt_cfg</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <name>IN6ADDRSZ</name></expr><operator>,</operator> <expr><name>a</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>IN6_IS_ADDR_ULA_ZERO</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IN6_IS_ADDR_UNSPECIFIED</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>ula_addr</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
		<operator>(</operator><call><name>IN6_IS_ADDR_LINK_LOCAL_ZERO</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IN6_IS_ADDR_UNSPECIFIED</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>ll_addr</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>len</name> <operator>-=</operator> <name>IN6ADDRSZ</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
	  
	  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	    <block>{<block_content>
	      
	      <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>new_opt6</name><argument_list>(<argument><expr><name><name>opt_cfg</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      	  
	      <for>for <control>(<init><expr><name>a</name> <operator>=</operator> <operator>(</operator>struct <name>in6_addr</name> <operator>*</operator><operator>)</operator><name><name>opt_cfg</name><operator>-&gt;</operator><name>val</name></name></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>opt_cfg</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>j</name><operator>+=</operator><name>IN6ADDRSZ</name></expr><operator>,</operator> <expr><name>a</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
		  <decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

		  <if_stmt><if>if <condition>(<expr><call><name>IN6_IS_ADDR_UNSPECIFIED</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition>
		    <block>{<block_content>
		      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>add_local_addrs</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>fallback</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		    </block_content>}</block></if>
		  <if type="elseif">else if <condition>(<expr><call><name>IN6_IS_ADDR_ULA_ZERO</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition>
		    <block>{<block_content>
		      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IN6_IS_ADDR_UNSPECIFIED</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>ula_addr</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>ula_addr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		    </block_content>}</block></if>
		  <if type="elseif">else if <condition>(<expr><call><name>IN6_IS_ADDR_LINK_LOCAL_ZERO</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition>
		    <block>{<block_content>
		      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IN6_IS_ADDR_UNSPECIFIED</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>ll_addr</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>ll_addr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		    </block_content>}</block></if>
		  <else>else<block type="pseudo"><block_content>
		    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
		    <continue>continue;</continue></block_content></block></if>
		  <if type="elseif">else if <condition>(<expr><name><name>opt_cfg</name><operator>-&gt;</operator><name>opt</name></name> <operator>==</operator> <name>OPTION6_NTP_SERVER</name></expr>)</condition>
		    <block>{<block_content>
		      <if_stmt><if>if <condition>(<expr><call><name>IN6_IS_ADDR_MULTICAST</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>o1</name> <operator>=</operator> <call><name>new_opt6</name><argument_list>(<argument><expr><name>NTP_SUBOPTION_MC_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		      <else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>o1</name> <operator>=</operator> <call><name>new_opt6</name><argument_list>(<argument><expr><name>NTP_SUBOPTION_SRV_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		      <expr_stmt><expr><call><name>put_opt6</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    </block_content>}</block></if>
		  <else>else<block type="pseudo"><block_content>
		    <expr_stmt><expr><call><name>put_opt6</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></for>

	      <expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>new_opt6</name><argument_list>(<argument><expr><name><name>opt_cfg</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name><name>opt_cfg</name><operator>-&gt;</operator><name>val</name></name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>put_opt6</name><argument_list>(<argument><expr><name><name>opt_cfg</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><name><name>opt_cfg</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  <expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
  
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>port</name></name> <operator>==</operator> <name>NAMESERVER_PORT</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>done_dns</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>new_opt6</name><argument_list>(<argument><expr><name>OPTION6_DNS_SERVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>add_local_addrs</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>put_opt6</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>fallback</name></name></expr></argument>, <argument><expr><name>IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>context</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>done_refresh</name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>lease_time</name> <init>= <expr><literal type="number">0xffffffff</literal></expr></init></decl>;</decl_stmt>
      
      <comment type="block">/* Find the smallest lease tie of all contexts,
	 subject to the RFC-4242 stipulation that this must not 
	 be less than 600. */</comment>
      <for>for <control>(<init><expr><name>c</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>context</name></name></expr>;</init> <condition><expr><name>c</name></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>lease_time</name></name> <operator>&lt;</operator> <name>lease_time</name></expr>)</condition>
	  <block>{<block_content>
	    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>lease_time</name></name> <operator>&lt;</operator> <literal type="number">600</literal></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>lease_time</name> <operator>=</operator> <literal type="number">600</literal></expr>;</expr_stmt></block_content></block></if>
	    <else>else<block type="pseudo"><block_content>
	      <expr_stmt><expr><name>lease_time</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>lease_time</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	  </block_content>}</block></if></if_stmt></block_content></block></for>

      <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>new_opt6</name><argument_list>(<argument><expr><name>OPTION6_REFRESH_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>put_opt6_long</name><argument_list>(<argument><expr><name>lease_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    </block_content>}</block></if></if_stmt>
   
    <comment type="block">/* handle vendor-identifying vendor-encapsulated options,
       dhcp-option = vi-encap:13,17,....... */</comment>
  <for>for <control>(<init><expr><name>opt_cfg</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_opts6</name></name></expr>;</init> <condition><expr><name>opt_cfg</name></expr>;</condition> <incr><expr><name>opt_cfg</name> <operator>=</operator> <name><name>opt_cfg</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>opt_cfg</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DHOPT_ENCAP_DONE</name></expr>;</expr_stmt></block_content></block></for>
    
  <if_stmt><if>if <condition>(<expr><name>oro</name></expr>)</condition><block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator>  <call><name>opt6_len</name><argument_list>(<argument><expr><name>oro</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><call><name>opt6_uint</name><argument_list>(<argument><expr><name>oro</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OPTION6_VENDOR_OPTS</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>do_encap</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
  
  <for>for <control>(<init><expr><name>opt_cfg</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_opts6</name></name></expr>;</init> <condition><expr><name>opt_cfg</name></expr>;</condition> <incr><expr><name>opt_cfg</name> <operator>=</operator> <name><name>opt_cfg</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content> 
      <if_stmt><if>if <condition>(<expr><name><name>opt_cfg</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DHOPT_RFC3925</name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_opt</name></name> <modifier>*</modifier></type><name>oc</name></decl>;</decl_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name><name>opt_cfg</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DHOPT_ENCAP_DONE</name></expr>)</condition><block type="pseudo"><block_content>
	    <continue>continue;</continue></block_content></block></if></if_stmt>
	  
	  <for>for <control>(<init><expr><name>oc</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_opts6</name></name></expr>;</init> <condition><expr><name>oc</name></expr>;</condition> <incr><expr><name>oc</name> <operator>=</operator> <name><name>oc</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	    <block>{<block_content>
	      <expr_stmt><expr><name><name>oc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DHOPT_ENCAP_MATCH</name></expr>;</expr_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>oc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DHOPT_RFC3925</name><operator>)</operator> <operator>||</operator> <name><name>opt_cfg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>encap</name></name> <operator>!=</operator> <name><name>oc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>encap</name></name></expr>)</condition><block type="pseudo"><block_content>
		<continue>continue;</continue></block_content></block></if></if_stmt>
	      
	      <expr_stmt><expr><name><name>oc</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>DHOPT_ENCAP_DONE</name></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><call><name>match_netid</name><argument_list>(<argument><expr><name><name>oc</name><operator>-&gt;</operator><name>netid</name></name></expr></argument>, <argument><expr><name>tagif</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
		  <comment type="block">/* option requested/forced? */</comment>
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>oro</name> <operator>||</operator> <name>do_encap</name> <operator>||</operator> <operator>(</operator><name><name>oc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DHOPT_FORCE</name><operator>)</operator></expr>)</condition>
		    <block>{<block_content>
		      <expr_stmt><expr><name><name>oc</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>DHOPT_ENCAP_MATCH</name></expr>;</expr_stmt>
		      <expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		    </block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt> 
	    </block_content>}</block></for>
	  
	  <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
	    <block>{<block_content> 
	      <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>new_opt6</name><argument_list>(<argument><expr><name>OPTION6_VENDOR_OPTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	      
	      <expr_stmt><expr><call><name>put_opt6_long</name><argument_list>(<argument><expr><name><name>opt_cfg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>encap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
	     
	      <for>for <control>(<init><expr><name>oc</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_opts6</name></name></expr>;</init> <condition><expr><name>oc</name></expr>;</condition> <incr><expr><name>oc</name> <operator>=</operator> <name><name>oc</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><name><name>oc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DHOPT_ENCAP_MATCH</name></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><name>o1</name> <operator>=</operator> <call><name>new_opt6</name><argument_list>(<argument><expr><name><name>oc</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>put_opt6</name><argument_list>(<argument><expr><name><name>oc</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><name><name>oc</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  </block_content>}</block></if></if_stmt></block_content></block></for>
	      <expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></for>      


  <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>hostname</name></name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>send_domain</name></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>send_domain</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>new_opt6</name><argument_list>(<argument><expr><name>OPTION6_FQDN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>expand</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>fqdn_flags</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>do_rfc1035_name</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>send_domain</name></name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>do_rfc1035_name</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>send_domain</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>


  <comment type="block">/* logging */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOG_OPTS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>oro</name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator>  <call><name>opt6_len</name><argument_list>(<argument><expr><name>oro</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>option_string</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><call><name>opt6_uint</name><argument_list>(<argument><expr><name>oro</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	  <expr_stmt><expr><name>q</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>MAXDNAME</name> <operator>-</operator> <operator>(</operator><name>q</name> <operator>-</operator> <name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name><operator>)</operator></expr></argument>,
			<argument><expr><literal type="string">"%d%s%s%s"</literal></expr></argument>, 
			<argument><expr><call><name>opt6_uint</name><argument_list>(<argument><expr><name>oro</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><ternary><condition><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">":"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
			<argument><expr><name>s</name></expr></argument>, 
			<argument><expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&gt;</operator> <call><name>opt6_len</name><argument_list>(<argument><expr><name>oro</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">", "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>( <expr><name>i</name> <operator>&gt;</operator>  <call><name>opt6_len</name><argument_list>(<argument><expr><name>oro</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">3</literal> <operator>||</operator> <operator>(</operator><name>q</name> <operator>-</operator> <name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name><operator>)</operator> <operator>&gt;</operator> <literal type="number">40</literal></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%u requested options: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
    </block_content>}</block></if></if_stmt> 

  <return>return <expr><name>tagif</name></expr>;</return>
</block_content>}</block></function>
 
<function><type><specifier>static</specifier> <name>int</name></type> <name>add_local_addrs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  
  <for>for <control>(<init>;</init> <condition><expr><name>context</name></expr>;</condition> <incr><expr><name>context</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>current</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_USED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IN6_IS_ADDR_UNSPECIFIED</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>local6</name></name></expr></argument>)</argument_list></call></expr>)</condition>
      <block>{<block_content>
	<comment type="block">/* squash duplicates */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>current</name></name></expr>;</init> <condition><expr><name>c</name></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>current</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_USED</name><operator>)</operator> <operator>&amp;&amp;</operator>
	      <call><name>IN6_ARE_ADDR_EQUAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>local6</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>local6</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition>
	  <block>{<block_content> 
	    <expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>put_opt6</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>local6</name></name></expr></argument>, <argument><expr><name>IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt></block_content></block></for>

  <return>return <expr><name>done</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>get_context_tag</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* get tags from context if we've not used it before */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>next</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>netid</name></name> <operator>&amp;&amp;</operator> <name><name>context</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>net</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>context_tags</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>context_tags</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>netid</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>hostname_auth</name></name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid_list</name></name> <modifier>*</modifier></type><name>id_list</name></decl>;</decl_stmt>
	  
	  <for>for <control>(<init><expr><name>id_list</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_ignore_names</name></name></expr>;</init> <condition><expr><name>id_list</name></expr>;</condition> <incr><expr><name>id_list</name> <operator>=</operator> <name><name>id_list</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>id_list</name><operator>-&gt;</operator><name>list</name></name><operator>)</operator> <operator>||</operator> <call><name>match_netid</name><argument_list>(<argument><expr><name><name>id_list</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>netid</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	      <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	  <if_stmt><if>if <condition>(<expr><name>id_list</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>hostname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function> 

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_ia</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>endp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ia_option</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>ia_type</name></name> <operator>=</operator> <call><name>opt6_type</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ia_option</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>ia_type</name></name> <operator>!=</operator> <name>OPTION6_IA_NA</name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>ia_type</name></name> <operator>!=</operator> <name>OPTION6_IA_TA</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>ia_type</name></name> <operator>==</operator> <name>OPTION6_IA_NA</name> <operator>&amp;&amp;</operator> <call><name>opt6_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	    
  <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>ia_type</name></name> <operator>==</operator> <name>OPTION6_IA_TA</name> <operator>&amp;&amp;</operator> <call><name>opt6_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><operator>*</operator><name>endp</name> <operator>=</operator> <call><name>opt6_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><call><name>opt6_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>iaid</name></name> <operator>=</operator> <call><name>opt6_uint</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ia_option</name> <operator>=</operator> <call><name>opt6_find</name><argument_list>(<argument><expr><call><name>opt6_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>ia_type</name></name> <operator>==</operator> <name>OPTION6_IA_NA</name></expr> ?</condition><then> <expr><literal type="number">12</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>endp</name></expr></argument>, <argument><expr><name>OPTION6_IAADDR</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>build_ia</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>t1cntr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>  <name>o</name> <init>= <expr><call><name>new_opt6</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>ia_type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
  <expr_stmt><expr><call><name>put_opt6_long</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>iaid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>t1cntr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	    
  <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>ia_type</name></name> <operator>==</operator> <name>OPTION6_IA_NA</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* save pointer */</comment>
      <expr_stmt><expr><operator>*</operator><name>t1cntr</name> <operator>=</operator> <call><name>save_counter</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* so we can fill these in later */</comment>
      <expr_stmt><expr><call><name>put_opt6_long</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>put_opt6_long</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    </block_content>}</block></if></if_stmt>

  <return>return <expr><name>o</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>end_ia</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>t1cntr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>min_time</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>do_fuzz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>t1cntr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* go back and fill in fields in IA_NA option */</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>sav</name> <init>= <expr><call><name>save_counter</name><argument_list>(<argument><expr><name>t1cntr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>fuzz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>do_fuzz</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>fuzz</name> <operator>=</operator> <call><name>rand16</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      
	  <while>while <condition>(<expr><name>fuzz</name> <operator>&gt;</operator> <operator>(</operator><name>min_time</name><operator>/</operator><literal type="number">16</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>fuzz</name> <operator>=</operator> <name>fuzz</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></while>
	</block_content>}</block></if></if_stmt>
      
      <expr_stmt><expr><name>t1</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>min_time</name> <operator>==</operator> <literal type="number">0xffffffff</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0xffffffff</literal></expr> </then><else>: <expr><name>min_time</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name>fuzz</name></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name>t2</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>min_time</name> <operator>==</operator> <literal type="number">0xffffffff</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0xffffffff</literal></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><name>min_time</name><operator>/</operator><literal type="number">8</literal><operator>)</operator><operator>*</operator><literal type="number">7</literal><operator>)</operator> <operator>-</operator> <name>fuzz</name></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>put_opt6_long</name><argument_list>(<argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>put_opt6_long</name><argument_list>(<argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>save_counter</name><argument_list>(<argument><expr><name>sav</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>	
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_address</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>lease_time</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ia_option</name></decl></parameter>, 
			<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>min_time</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>valid_time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>preferred_time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><call><name>new_opt6</name><argument_list>(<argument><expr><name>OPTION6_IAADDR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name></decl>;</decl_stmt>

  <comment type="block">/* get client requested times */</comment>
  <if_stmt><if>if <condition>(<expr><name>ia_option</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>preferred_time</name> <operator>=</operator>  <call><name>opt6_uint</name><argument_list>(<argument><expr><name>ia_option</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>valid_time</name> <operator>=</operator>  <call><name>opt6_uint</name><argument_list>(<argument><expr><name>ia_option</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>calculate_times</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>min_time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>valid_time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>preferred_time</name></expr></argument>, <argument><expr><name>lease_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  
  <expr_stmt><expr><call><name>put_opt6</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>put_opt6_long</name><argument_list>(<argument><expr><name>preferred_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>put_opt6_long</name><argument_list>(<argument><expr><name>valid_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 		    
  <expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>lease_allocate</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>update_leases</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>valid_time</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>lease</name> <operator>=</operator> <call><name>lease6_find_by_addr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>LEASE_USED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="block">/* get tags from context if we've not used it before */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>next</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>netid</name></name> <operator>&amp;&amp;</operator> <name><name>context</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>net</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>context_tags</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>context_tags</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>netid</name></name></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>hostname_auth</name></name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid_list</name></name> <modifier>*</modifier></type><name>id_list</name></decl>;</decl_stmt>
	  
	  <for>for <control>(<init><expr><name>id_list</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_ignore_names</name></name></expr>;</init> <condition><expr><name>id_list</name></expr>;</condition> <incr><expr><name>id_list</name> <operator>=</operator> <name><name>id_list</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>id_list</name><operator>-&gt;</operator><name>list</name></name><operator>)</operator> <operator>||</operator> <call><name>match_netid</name><argument_list>(<argument><expr><name><name>id_list</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>netid</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	      <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	  <if_stmt><if>if <condition>(<expr><name>id_list</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>hostname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>log6_quiet</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>lease_allocate</name></name></expr> ?</condition><then> <expr><literal type="string">"DHCPREPLY"</literal></expr> </then><else>: <expr><literal type="string">"DHCPADVERTISE"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mark_context_used</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>

  <comment type="block">/* Mark that we have an address for this prefix. */</comment>
  <for>for <control>(<init><expr><name>context</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>context</name></name></expr>;</init> <condition><expr><name>context</name></expr>;</condition> <incr><expr><name>context</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>current</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><call><name>is_same_net6</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CONTEXT_USED</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mark_config_used</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <for>for <control>(<init>;</init> <condition><expr><name>context</name></expr>;</condition> <incr><expr><name>context</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>current</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><call><name>is_same_net6</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CONTEXT_CONF_USED</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>

<comment type="block">/* make sure address not leased to another CLID/IAID */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>check_address</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>lease</name> <operator>=</operator> <call><name>lease6_find_by_addr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>lease</name><operator>-&gt;</operator><name>clid_len</name></name> <operator>!=</operator> <name><name>state</name><operator>-&gt;</operator><name>clid_len</name></name> <operator>||</operator> 
      <call><name>memcmp</name><argument_list>(<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>clid</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>clid</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>clid_len</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
      <name><name>lease</name><operator>-&gt;</operator><name>iaid</name></name> <operator>!=</operator> <name><name>state</name><operator>-&gt;</operator><name>iaid</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* return true of *addr could have been generated from config. */</comment>
<function><type><specifier>static</specifier> <name><name>struct</name> <name>addrlist</name></name> <modifier>*</modifier></type><name>config_implies</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_config</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>prefix</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>wild_addr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>addrlist</name></name> <modifier>*</modifier></type><name>addr_list</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>config</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONFIG_ADDR6</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  
  <for>for <control>(<init><expr><name>addr_list</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>addr6</name></name></expr>;</init> <condition><expr><name>addr_list</name></expr>;</condition> <incr><expr><name>addr_list</name> <operator>=</operator> <name><name>addr_list</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name>prefix</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>addr_list</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ADDRLIST_PREFIX</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>addr_list</name><operator>-&gt;</operator><name>prefixlen</name></name></expr> </then><else>: <expr><literal type="number">128</literal></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name>wild_addr</name> <operator>=</operator> <name><name>addr_list</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr6</name></name></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>addr_list</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ADDRLIST_WILDCARD</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>context</name><operator>-&gt;</operator><name>prefix</name></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>wild_addr</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>start6</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>setaddr6part</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wild_addr</name></expr></argument>, <argument><expr><call><name>addr6part</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr_list</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr6</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>is_same_net6</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><call><name>is_same_net6</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wild_addr</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>addr_list</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
  
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_valid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_config</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>u64</name></type> <name>addrpart</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>addresses</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>addrlist</name></name> <modifier>*</modifier></type><name>addr_list</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>config</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONFIG_ADDR6</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <for>for <control>(<init><expr><name>addr_list</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>addr6</name></name></expr>;</init> <condition><expr><name>addr_list</name></expr>;</condition> <incr><expr><name>addr_list</name> <operator>=</operator> <name><name>addr_list</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>addr_list</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ADDRLIST_DECLINED</name><operator>)</operator> <operator>||</operator>
	<call><name>difftime</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>addr_list</name><operator>-&gt;</operator><name>decline_time</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>DECLINE_BACKOFF</name></expr>)</condition>
      <block>{<block_content>
	<expr_stmt><expr><name>addrpart</name> <operator>=</operator> <call><name>addr6part</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr_list</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr6</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>addresses</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>(<expr><name><name>addr_list</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ADDRLIST_PREFIX</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name>addresses</name> <operator>=</operator> <operator>(</operator><name>u64</name><operator>)</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><literal type="number">128</literal><operator>-</operator><name><name>addr_list</name><operator>-&gt;</operator><name>prefixlen</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>addr_list</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ADDRLIST_WILDCARD</name><operator>)</operator></expr>)</condition>
	  <block>{<block_content>
	    <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>prefix</name></name> <operator>!=</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>
	      <continue>continue;</continue></block_content></block></if></if_stmt>
	    
	    <expr_stmt><expr><operator>*</operator><name>addr</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>start6</name></name></expr>;</expr_stmt>
	  </block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>is_same_net6</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr_list</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr6</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><operator>*</operator><name>addr</name> <operator>=</operator> <name><name>addr_list</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr6</name></name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
	  <continue>continue;</continue></block_content></block></else></if_stmt>
	
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>addresses</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	  <block>{<block_content>
	    <expr_stmt><expr><call><name>setaddr6part</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrpart</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    
	    <if_stmt><if>if <condition>(<expr><call><name>check_address</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	      <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	  </block_content>}</block></for>
      </block_content>}</block></if></if_stmt></block_content></block></for>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Calculate valid and preferred times to send in leases/renewals. 

   Inputs are:

   *valid_timep, *preferred_timep - requested times from IAADDR options.
   context-&gt;valid, context-&gt;preferred - times associated with subnet address on local interface.
   context-&gt;flags | CONTEXT_DEPRECATE - "deprecated" flag in dhcp-range.
   lease_time - configured time for context for individual client.
   *min_time - smallest valid time sent so far.

   Outputs are :
   
   *valid_timep, *preferred_timep - times to be send in IAADDR option.
   *min_time - smallest valid time sent so far, to calculate T1 and T2.
   
   */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>calculate_times</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>min_time</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>valid_timep</name></decl></parameter>, 
			    <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>preferred_timep</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>lease_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>req_preferred</name> <init>= <expr><operator>*</operator><name>preferred_timep</name></expr></init></decl>, <decl><type ref="prev"/><name>req_valid</name> <init>= <expr><operator>*</operator><name>valid_timep</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>valid_time</name> <init>= <expr><name>lease_time</name></expr></init></decl>, <decl><type ref="prev"/><name>preferred_time</name> <init>= <expr><name>lease_time</name></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* RFC 3315: "A server ignores the lifetimes set
     by the client if the preferred lifetime is greater than the valid
     lifetime. */</comment>
  <if_stmt><if>if <condition>(<expr><name>req_preferred</name> <operator>&lt;=</operator> <name>req_valid</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>req_preferred</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
	  <comment type="block">/* 0 == "no preference from client" */</comment>
	  <if_stmt><if>if <condition>(<expr><name>req_preferred</name> <operator>&lt;</operator> <literal type="number">120u</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>req_preferred</name> <operator>=</operator> <literal type="number">120u</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block">/* sanity */</comment>
	  
	  <if_stmt><if>if <condition>(<expr><name>req_preferred</name> <operator>&lt;</operator> <name>preferred_time</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>preferred_time</name> <operator>=</operator> <name>req_preferred</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>req_valid</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<comment type="block">/* 0 == "no preference from client" */</comment>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name>req_valid</name> <operator>&lt;</operator> <literal type="number">120u</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>req_valid</name> <operator>=</operator> <literal type="number">120u</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block">/* sanity */</comment>
	  
	  <if_stmt><if>if <condition>(<expr><name>req_valid</name> <operator>&lt;</operator> <name>valid_time</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>valid_time</name> <operator>=</operator> <name>req_valid</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

  <comment type="block">/* deprecate (preferred == 0) which configured, or when local address 
     is deprecated */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_DEPRECATE</name><operator>)</operator> <operator>||</operator> <name><name>context</name><operator>-&gt;</operator><name>preferred</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>preferred_time</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>preferred_time</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>preferred_time</name> <operator>&lt;</operator> <operator>*</operator><name>min_time</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator><name>min_time</name> <operator>=</operator> <name>preferred_time</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>valid_time</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>valid_time</name> <operator>&lt;</operator> <operator>*</operator><name>min_time</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator><name>min_time</name> <operator>=</operator> <name>valid_time</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><operator>*</operator><name>valid_timep</name> <operator>=</operator> <name>valid_time</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>preferred_timep</name> <operator>=</operator> <name>preferred_time</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_leases</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>lease_time</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name> <init>= <expr><call><name>lease6_find_by_addr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SCRIPT</name></cpp:ifdef>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>tagif</name> <init>= <expr><call><name>run_tag_if</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>tags</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>context</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>lease</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>lease</name> <operator>=</operator> <call><name>lease6_allocate</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>ia_type</name></name> <operator>==</operator> <name>OPTION6_IA_NA</name></expr> ?</condition><then> <expr><name>LEASE_NA</name></expr> </then><else>: <expr><name>LEASE_TA</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>lease</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>lease_set_expires</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name>lease_time</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>lease_set_iaid</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>iaid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <expr_stmt><expr><call><name>lease_set_hwaddr</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>mac</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>clid</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>mac_len</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>mac_type</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>clid_len</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>lease_set_interface</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>hostname</name></name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>ia_type</name></name> <operator>==</operator> <name>OPTION6_IA_NA</name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>addr_domain</name> <init>= <expr><call><name>get_domain6</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>send_domain</name></name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>send_domain</name></name> <operator>=</operator> <name>addr_domain</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  <expr_stmt><expr><call><name>lease_set_hostname</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>hostname_auth</name></name></expr></argument>, <argument><expr><name>addr_domain</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
      
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SCRIPT</name></cpp:ifdef>
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>lease_change_command</name></name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>
	  
	  <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>LEASE_CHANGED</name></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>extradata_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>vendorclass_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
	  
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>opt6_find</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>packet_options</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name>OPTION6_VENDOR_CLASS</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>enc_opt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>enc_end</name> <init>= <expr><call><name>opt6_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><call><name>opt6_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	      <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>vendorclass_count</name></name><operator>++</operator></expr>;</expr_stmt>
	      <comment type="block">/* send enterprise number first  */</comment>
	      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><call><name>opt6_uint</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>lease_add_extradata</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><call><name>opt6_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content> 
		<for>for <control>(<init><expr><name>enc_opt</name> <operator>=</operator> <call><name>opt6_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>enc_opt</name></expr>;</condition> <incr><expr><name>enc_opt</name> <operator>=</operator> <call><name>opt6_next</name><argument_list>(<argument><expr><name>enc_opt</name></expr></argument>, <argument><expr><name>enc_end</name></expr></argument>)</argument_list></call></expr></incr>)</control>
		  <block>{<block_content>
		    <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>vendorclass_count</name></name><operator>++</operator></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>lease_add_extradata</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><call><name>opt6_ptr</name><argument_list>(<argument><expr><name>enc_opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>opt6_len</name><argument_list>(<argument><expr><name>enc_opt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  </block_content>}</block></for></block_content></block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
	  
	  <expr_stmt><expr><call><name>lease_add_extradata</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>client_hostname</name></name></expr></argument>, 
			      <argument><expr><ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>client_hostname</name></name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>client_hostname</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>				
	  
	  <comment type="block">/* DNSMASQ_REQUESTED_OPTIONS */</comment>
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>opt6_find</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>packet_options</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name>OPTION6_ORO</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name>opt6_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name>u16</name> <modifier>*</modifier></type><name>rop</name> <init>= <expr><call><name>opt6_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	      
	      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>lease_add_extradata</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>,
				    <argument><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>rop</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <name>len</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="char">','</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	    </block_content>}</block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>lease_add_extradata</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>opt6_find</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>packet_options</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name>OPTION6_MUD_URL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>lease_add_extradata</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><call><name>opt6_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>opt6_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>lease_add_extradata</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	  <comment type="block">/* space-concat tag set */</comment>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tagif</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>context</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>net</name></name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>lease_add_extradata</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	  <else>else
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>net</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>lease_add_extradata</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>context</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>net</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>net</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>tagif</name></expr> ?</condition><then> <expr><literal type="char">' '</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><name>tagif</name></expr>)</condition>
		<block>{<block_content>
		  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>
		  <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>tagif</name></expr>;</init> <condition><expr><name>n</name></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
		    <block>{<block_content>
		      <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>n1</name></decl>;</decl_stmt>
		      <comment type="block">/* kill dupes */</comment>
		      <for>for <control>(<init><expr><name>n1</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr>;</init> <condition><expr><name>n1</name></expr>;</condition> <incr><expr><name>n1</name> <operator>=</operator> <name><name>n1</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
			<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>net</name></name></expr></argument>, <argument><expr><name><name>n1</name><operator>-&gt;</operator><name>net</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			  <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
		      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>n1</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>lease_add_extradata</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>n</name><operator>-&gt;</operator><name>net</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>net</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr> ?</condition><then> <expr><literal type="char">' '</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
		    </block_content>}</block></for>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></else></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>link_address</name></name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>link_address</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  
	  <expr_stmt><expr><call><name>lease_add_extradata</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>link_address</name></name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>opt6_find</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>packet_options</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name>OPTION6_USER_CLASS</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>enc_opt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>enc_end</name> <init>= <expr><call><name>opt6_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><call><name>opt6_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	      <for>for <control>(<init><expr><name>enc_opt</name> <operator>=</operator> <call><name>opt6_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>enc_opt</name></expr>;</condition> <incr><expr><name>enc_opt</name> <operator>=</operator> <call><name>opt6_next</name><argument_list>(<argument><expr><name>enc_opt</name></expr></argument>, <argument><expr><name>enc_end</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>lease_add_extradata</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><call><name>opt6_ptr</name><argument_list>(<argument><expr><name>enc_opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>opt6_len</name><argument_list>(<argument><expr><name>enc_opt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>	
      
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
			  
			
	
<function><type><specifier>static</specifier> <name>void</name></type> <name>log6_opts</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nest</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>xid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>start_opts</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>end_opts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><ternary><condition><expr><name>nest</name></expr> ?</condition><then> <expr><literal type="string">"nest"</literal></expr> </then><else>: <expr><literal type="string">"sent"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOG_OPTS</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>start_opts</name> <operator>==</operator> <name>end_opts</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>
  
  <for>for <control>(<init><expr><name>opt</name> <operator>=</operator> <name>start_opts</name></expr>;</init> <condition><expr><name>opt</name></expr>;</condition> <incr><expr><name>opt</name> <operator>=</operator> <call><name>opt6_next</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>end_opts</name></expr></argument>)</argument_list></call></expr></incr>)</control>
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name>opt6_type</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ia_options</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>optname</name></decl>;</decl_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>OPTION6_IA_NA</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><literal type="string">"IAID=%u T1=%u T2=%u"</literal></expr></argument>,
		  <argument><expr><call><name>opt6_uint</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>opt6_uint</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>opt6_uint</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>optname</name> <operator>=</operator> <literal type="string">"ia-na"</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name>ia_options</name> <operator>=</operator> <call><name>opt6_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>OPTION6_IA_TA</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><literal type="string">"IAID=%u"</literal></expr></argument>, <argument><expr><call><name>opt6_uint</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>optname</name> <operator>=</operator> <literal type="string">"ia-ta"</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name>ia_options</name> <operator>=</operator> <call><name>opt6_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>OPTION6_IAADDR</name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>

	  <comment type="block">/* align */</comment>
	  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><call><name>opt6_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><literal type="string">"%s PL=%u VL=%u"</literal></expr></argument>, 
		  <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><call><name>opt6_uint</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>opt6_uint</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>optname</name> <operator>=</operator> <literal type="string">"iaaddr"</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name>ia_options</name> <operator>=</operator> <call><name>opt6_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>OPTION6_STATUS_CODE</name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><literal type="string">"%u "</literal></expr></argument>, <argument><expr><call><name>opt6_uint</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><call><name>opt6_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>opt6_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name><index>[<expr><name>len</name> <operator>+</operator> <call><name>opt6_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name>optname</name> <operator>=</operator> <literal type="string">"status"</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <comment type="block">/* account for flag byte on FQDN */</comment>
	  <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><ternary><condition><expr><name>type</name> <operator>==</operator> <name>OPTION6_FQDN</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
	  <expr_stmt><expr><name>optname</name> <operator>=</operator> <call><name>option_string</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><call><name>opt6_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>opt6_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>MAXDNAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
      
      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%u %s size:%3d option:%3d %s  %s"</literal></expr></argument>, 
		<argument><expr><name>xid</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><call><name>opt6_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>ia_options</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>log6_opts</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>xid</name></expr></argument>, <argument><expr><name>ia_options</name></expr></argument>, <argument><expr><call><name>opt6_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><call><name>opt6_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>		 
 
<function><type><specifier>static</specifier> <name>void</name></type> <name>log6_quiet</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOG_OPTS</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_QUIET_DHCP6</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>log6_packet</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>log6_packet</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>clid_len</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>clid_len</name></name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* avoid buffer overflow */</comment>
  <if_stmt><if>if <condition>(<expr><name>clid_len</name> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>clid_len</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><call><name>print_mac</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>clid</name></name></expr></argument>, <argument><expr><name>clid_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>addr</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>, <argument><expr><name>DHCP_BUFF_SZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <if_stmt><if>if<condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOG_OPTS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%u %s(%s) %s%s %s"</literal></expr></argument>,
	      <argument><expr><name><name>state</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>, 
	      <argument><expr><name>type</name></expr></argument>,
	      <argument><expr><name><name>state</name><operator>-&gt;</operator><name>iface_name</name></name></expr></argument>, 
	      <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>,
	      <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>,
	      <argument><expr><ternary><condition><expr><name>string</name></expr> ?</condition><then> <expr><name>string</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%s(%s) %s%s %s"</literal></expr></argument>,
	      <argument><expr><name>type</name></expr></argument>,
	      <argument><expr><name><name>state</name><operator>-&gt;</operator><name>iface_name</name></name></expr></argument>, 
	      <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>,
	      <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>,
	      <argument><expr><ternary><condition><expr><name>string</name></expr> ?</condition><then> <expr><name>string</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>opt6_find</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>search</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>minsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>u16</name></type> <name>opt</name></decl>, <decl><type ref="prev"/><name>opt_len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>opts</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>opts</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> 
	<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
      
      <expr_stmt><expr><name>start</name> <operator>=</operator> <name>opts</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>opt_len</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>opt_len</name> <operator>&gt;</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>opts</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>opt</name> <operator>==</operator> <name>search</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>opt_len</name> <operator>&gt;=</operator> <name>minsize</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>start</name></expr>;</return></block_content></block></if></if_stmt>
      
      <expr_stmt><expr><name>opts</name> <operator>+=</operator> <name>opt_len</name></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>opt6_next</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>u16</name></type> <name>opt_len</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>opts</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> 
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><name>opts</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>opt_len</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>opt_len</name> <operator>&gt;=</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>opts</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  
  <return>return <expr><name>opts</name> <operator>+</operator> <name>opt_len</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>opt6_uint</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* this worries about unaligned data and byte order */</comment>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>opt6_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>ret</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
  
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function> 

<function><type><name>int</name></type> <name>relay_upstream6</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iface_index</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>sz</name></decl></parameter>, 
		    <parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>peer_address</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>scope_id</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>inbuff</name> <init>= <expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_packet</name><operator>.</operator><name>iov_base</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>msg_type</name> <init>= <expr><operator>*</operator><name>inbuff</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>hopcount</name></decl>, <decl><type ref="prev"/><name>o</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>multicast</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>maclen</name></decl>, <decl><type ref="prev"/><name>mactype</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>mac</name><index>[<expr><name>DHCP_CHADDR_MAX</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_relay</name></name> <modifier>*</modifier></type><name>relay</name></decl>;</decl_stmt>
  
  <for>for <control>(<init><expr><name>relay</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>relay6</name></name></expr>;</init> <condition><expr><name>relay</name></expr>;</condition> <incr><expr><name>relay</name> <operator>=</operator> <name><name>relay</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>relay</name><operator>-&gt;</operator><name>iface_index</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>relay</name><operator>-&gt;</operator><name>iface_index</name></name> <operator>==</operator> <name>iface_index</name></expr>)</condition><block type="pseudo"><block_content>
      <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

  <comment type="block">/* No relay config. */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>relay</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>ALL_SERVERS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>multicast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>get_client_mac</name><argument_list>(<argument><expr><name>peer_address</name></expr></argument>, <argument><expr><name>scope_id</name></expr></argument>, <argument><expr><name>mac</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maclen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mactype</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Get hop count from nested relayed message */</comment> 
  <if_stmt><if>if <condition>(<expr><name>msg_type</name> <operator>==</operator> <name>DHCP6RELAYFORW</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>hopcount</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>inbuff</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>hopcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <expr_stmt><expr><call><name>reset_counter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* RFC 3315 HOP_COUNT_LIMIT */</comment>
  <if_stmt><if>if <condition>(<expr><name>hopcount</name> <operator>&gt;</operator> <literal type="number">32</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><name>header</name> <operator>=</operator> <call><name>put_opt6</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">34</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><name><name>header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>DHCP6RELAYFORW</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>hopcount</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></expr></argument>, <argument><expr><name>peer_address</name></expr></argument>, <argument><expr><name>IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* RFC-6939 */</comment>
  <if_stmt><if>if <condition>(<expr><name>maclen</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>new_opt6</name><argument_list>(<argument><expr><name>OPTION6_CLIENT_MAC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>put_opt6_short</name><argument_list>(<argument><expr><name>mactype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>put_opt6</name><argument_list>(<argument><expr><name>mac</name></expr></argument>, <argument><expr><name>maclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>new_opt6</name><argument_list>(<argument><expr><name>OPTION6_RELAY_MSG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>put_opt6</name><argument_list>(<argument><expr><name>inbuff</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>end_opt6</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <for>for <control>(<init>;</init> <condition><expr><name>relay</name></expr>;</condition> <incr><expr><name>relay</name> <operator>=</operator> <name><name>relay</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>relay</name><operator>-&gt;</operator><name>iface_index</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>relay</name><operator>-&gt;</operator><name>iface_index</name></name> <operator>==</operator> <name>iface_index</name></expr>)</condition>
      <block>{<block_content>
	<decl_stmt><decl><type><name><name>union</name> <name>mysockaddr</name></name></type> <name>to</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>relay</name><operator>-&gt;</operator><name>local</name><operator>.</operator><name>addr6</name></name></expr></argument>, <argument><expr><name>IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><name><name>to</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>to</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name> <operator>=</operator> <name><name>relay</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>addr6</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>to</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>relay</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>to</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_flowinfo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>to</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_scope_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>(<expr><call><name>IN6_ARE_ADDR_EQUAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>relay</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>addr6</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>multicast</name></expr></argument>)</argument_list></call></expr>)</condition>
	  <block>{<block_content>
	    <decl_stmt><decl><type><name>int</name></type> <name>multicast_iface</name></decl>;</decl_stmt>
	    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>relay</name><operator>-&gt;</operator><name>interface</name></name> <operator>||</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>relay</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call> <operator>||</operator>
		<operator>(</operator><name>multicast_iface</name> <operator>=</operator> <call><name>if_nametoindex</name><argument_list>(<argument><expr><name><name>relay</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
		<call><name>setsockopt</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp6fd</name></name></expr></argument>, <argument><expr><name>IPPROTO_IPV6</name></expr></argument>, <argument><expr><name>IPV6_MULTICAST_IF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>multicast_iface</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>multicast_iface</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Cannot multicast DHCP relay via interface %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>relay</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<continue>continue;</continue>
	      </block_content>}</block></if></if_stmt>
	  </block_content>}</block></if></if_stmt>
	
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DUMPFILE</name></cpp:ifdef>
	<expr_stmt><expr><call><name>dump_packet_udp</name><argument_list>(<argument><expr><name>DUMP_DHCPV6</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>outpacket</name><operator>.</operator><name>iov_base</name></name></expr></argument>, <argument><expr><call><name>save_counter</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>to</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp6fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<while>while <condition>(<expr><call><name>retry_send</name><argument_list>(<argument><expr><call><name>sendto</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp6fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>outpacket</name><operator>.</operator><name>iov_base</name></name></expr></argument>, <argument><expr><call><name>save_counter</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
				 <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>to</name></expr></argument>, <argument><expr><call><name>sa_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name>to</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
	
	<if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOG_OPTS</name></expr></argument>)</argument_list></call></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>relay</name><operator>-&gt;</operator><name>local</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><call><name>IN6_ARE_ADDR_EQUAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>relay</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>addr6</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>multicast</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>MAXDNAME</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"multicast via %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>relay</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	    <else>else<block type="pseudo"><block_content>
	      <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>relay</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"DHCP relay at %s -&gt; %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt>
	
      </block_content>}</block></if></if_stmt></block_content></block></for>
  
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>relay_reply6</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>peer</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arrival_interface</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_relay</name></name> <modifier>*</modifier></type><name>relay</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>link</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>inbuff</name> <init>= <expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_packet</name><operator>.</operator><name>iov_base</name></name></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* must have at least msg_type+hopcount+link_address+peer_address+minimal size option
     which is               1   +    1   +    16      +     16     + 2 + 2 = 38 */</comment>
  
  <if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&lt;</operator> <literal type="number">38</literal> <operator>||</operator> <operator>*</operator><name>inbuff</name> <operator>!=</operator> <name>DHCP6RELAYREPL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>link</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inbuff</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  
  <for>for <control>(<init><expr><name>relay</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>relay6</name></name></expr>;</init> <condition><expr><name>relay</name></expr>;</condition> <incr><expr><name>relay</name> <operator>=</operator> <name><name>relay</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><call><name>IN6_ARE_ADDR_EQUAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>link</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>relay</name><operator>-&gt;</operator><name>local</name><operator>.</operator><name>addr6</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	<operator>(</operator><operator>!</operator><name><name>relay</name><operator>-&gt;</operator><name>interface</name></name> <operator>||</operator> <call><name>wildcard_match</name><argument_list>(<argument><expr><name><name>relay</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>, <argument><expr><name>arrival_interface</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
      
  <expr_stmt><expr><call><name>reset_counter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>relay</name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>opt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>opts</name> <init>= <expr><name>inbuff</name> <operator>+</operator> <literal type="number">34</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>inbuff</name> <operator>+</operator> <name>sz</name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><expr><name>opt</name> <operator>=</operator> <name>opts</name></expr>;</init> <condition><expr><name>opt</name></expr>;</condition> <incr><expr><name>opt</name> <operator>=</operator> <call><name>opt6_next</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><call><name>opt6_type</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OPTION6_RELAY_MSG</name> <operator>&amp;&amp;</operator> <call><name>opt6_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	  <block>{<block_content>
	    <decl_stmt><decl><type><name>int</name></type> <name>encap_type</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>opt6_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
	    <expr_stmt><expr><call><name>put_opt6</name><argument_list>(<argument><expr><call><name>opt6_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>opt6_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>peer</name><operator>-&gt;</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inbuff</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></expr></argument>, <argument><expr><name>IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	    <expr_stmt><expr><name><name>peer</name><operator>-&gt;</operator><name>sin6_scope_id</name></name> <operator>=</operator> <name><name>relay</name><operator>-&gt;</operator><name>iface_index</name></name></expr>;</expr_stmt>

	    <if_stmt><if>if <condition>(<expr><name>encap_type</name> <operator>==</operator> <name>DHCP6RELAYREPL</name></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name><name>peer</name><operator>-&gt;</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name>DHCPV6_SERVER_PORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	      </block_content>}</block></if></if_stmt>

	    <expr_stmt><expr><name><name>peer</name><operator>-&gt;</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name>DHCPV6_CLIENT_PORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SCRIPT</name></cpp:ifdef>
	    <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>lease_change_command</name></name> <operator>&amp;&amp;</operator> <name>encap_type</name> <operator>==</operator> <name>DHCP6REPLY</name></expr>)</condition>
	      <block>{<block_content>
		<comment type="block">/* decapsulate relayed message */</comment>
		<expr_stmt><expr><name>opts</name> <operator>=</operator> <call><name>opt6_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>opt6_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><call><name>opt6_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>opt</name> <operator>=</operator> <name>opts</name></expr>;</init> <condition><expr><name>opt</name></expr>;</condition> <incr><expr><name>opt</name> <operator>=</operator> <call><name>opt6_next</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
		  <if_stmt><if>if <condition>(<expr><call><name>opt6_type</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OPTION6_IA_PD</name> <operator>&amp;&amp;</operator> <call><name>opt6_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">12</literal></expr>)</condition> 
		    <block>{<block_content>
		      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ia_opts</name> <init>= <expr><call><name>opt6_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ia_end</name> <init>= <expr><call><name>opt6_ptr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><call><name>opt6_len</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ia_opt</name></decl>;</decl_stmt>
		      
		      <for>for <control>(<init><expr><name>ia_opt</name> <operator>=</operator> <name>ia_opts</name></expr>;</init> <condition><expr><name>ia_opt</name></expr>;</condition> <incr><expr><name>ia_opt</name> <operator>=</operator> <call><name>opt6_next</name><argument_list>(<argument><expr><name>ia_opt</name></expr></argument>, <argument><expr><name>ia_end</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
			<comment type="block">/* valid lifetime must not be zero. */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>opt6_type</name><argument_list>(<argument><expr><name>ia_opt</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OPTION6_IAPREFIX</name> <operator>&amp;&amp;</operator> <call><name>opt6_len</name><argument_list>(<argument><expr><name>ia_opt</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">25</literal> <operator>&amp;&amp;</operator> <call><name>opt6_uint</name><argument_list>(<argument><expr><name>ia_opt</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
			  <block>{<block_content>
			    <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>free_snoops</name></name> <operator>||</operator>
				<operator>(</operator><name><name>daemon</name><operator>-&gt;</operator><name>free_snoops</name></name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>snoop_record</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
			      <block>{<block_content>
				<decl_stmt><decl><type><name><name>struct</name> <name>snoop_record</name></name> <modifier>*</modifier></type><name>snoop</name> <init>= <expr><name><name>daemon</name><operator>-&gt;</operator><name>free_snoops</name></name></expr></init></decl>;</decl_stmt>
				
				<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>free_snoops</name></name> <operator>=</operator> <name><name>snoop</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>snoop</name><operator>-&gt;</operator><name>client</name></name> <operator>=</operator> <name><name>peer</name><operator>-&gt;</operator><name>sin6_addr</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>snoop</name><operator>-&gt;</operator><name>prefix_len</name></name> <operator>=</operator> <call><name>opt6_uint</name><argument_list>(<argument><expr><name>ia_opt</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
				<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>snoop</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><call><name>opt6_ptr</name><argument_list>(<argument><expr><name>ia_opt</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
				<expr_stmt><expr><name><name>snoop</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>relay</name><operator>-&gt;</operator><name>snoop_records</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>relay</name><operator>-&gt;</operator><name>snoop_records</name></name> <operator>=</operator> <name>snoop</name></expr>;</expr_stmt>
			      </block_content>}</block></if></if_stmt>
			  </block_content>}</block></if></if_stmt></block_content></block></for>
		    </block_content>}</block></if></if_stmt></block_content></block></for>
	      </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>		
	    <return>return <expr><literal type="number">1</literal></expr>;</return>
	  </block_content>}</block></if></if_stmt></block_content></block></for>
      
    </block_content>}</block></if></if_stmt>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SCRIPT</name></cpp:ifdef>
<function><type><name>int</name></type> <name>do_snoop_script_run</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_relay</name></name> <modifier>*</modifier></type><name>relay</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>snoop_record</name></name> <modifier>*</modifier></type><name>snoop</name></decl>;</decl_stmt>
  
  <for>for <control>(<init><expr><name>relay</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>relay6</name></name></expr>;</init> <condition><expr><name>relay</name></expr>;</condition> <incr><expr><name>relay</name> <operator>=</operator> <name><name>relay</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>snoop</name> <operator>=</operator> <name><name>relay</name><operator>-&gt;</operator><name>snoop_records</name></name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
	<expr_stmt><expr><name><name>relay</name><operator>-&gt;</operator><name>snoop_records</name></name> <operator>=</operator> <name><name>snoop</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>snoop</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>free_snoops</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>free_snoops</name></name> <operator>=</operator> <name>snoop</name></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>queue_relay_snoop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>snoop</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name><name>relay</name><operator>-&gt;</operator><name>iface_index</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>snoop</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><name><name>snoop</name><operator>-&gt;</operator><name>prefix_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt></block_content></block></for>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
