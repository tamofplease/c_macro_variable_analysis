<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/dnsmasq/dnsmasq.c"><comment type="block">/* dnsmasq is Copyright (c) 2000-2022 Simon Kelley

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 dated June, 1991, or
   (at your option) version 3 dated 29 June, 2007.
 
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
     
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
*/</comment>

<comment type="block">/* Declare static char *compiler_opts  in config.h */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DNSMASQ_COMPILE_OPTS</name></cpp:macro></cpp:define>

<comment type="block">/* dnsmasq.h has to be included first as it sources config.h */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnsmasq.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_IDN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBIDN2</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LOCALEDIR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../dnsmasq_interface.h"</cpp:file></cpp:include>
<comment type="line">// killed</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../signals.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name><name>struct</name> <name>daemon</name></name> <modifier>*</modifier></type><name>daemon</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>pid_t</name></type> <name>pid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>pipewrite</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>terminate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>set_dns_listeners</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>check_dns_listeners</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>sig_handler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>async_event</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pipe</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>fatal_event</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_desc</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>read_event</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event_desc</name></name> <modifier>*</modifier></type><name>evp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>poll_resolv</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>do_reload</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>main_dnsmasq</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>time_t</name></type> <name>now</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>sigact</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iname</name></name> <modifier>*</modifier></type><name>if_tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>piperead</name></decl>, <decl><type ref="prev"/><name><name>pipefd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>err_pipe</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>passwd</name></name> <modifier>*</modifier></type><name>ent_pw</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SCRIPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>uid_t</name></type> <name>script_uid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gid_t</name></type> <name>script_gid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name><name>struct</name> <name>group</name></name> <modifier>*</modifier></type><name>gp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>max_fd</name> <init>= <expr><call><name>sysconf</name><argument_list>(<argument><expr><name>_SC_OPEN_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>baduser</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>log_err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>chown_warn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>cap_user_header_t</name></type> <name>hdr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>cap_user_data_t</name></type> <name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>need_cap_net_admin</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>need_cap_net_raw</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>need_cap_net_bind_service</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bound_device</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>did_bind</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>serv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>netlink_warn</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>int</name></type> <name>bind_fallback</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DHCP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DHCP6</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_relay</name></name> <modifier>*</modifier></type><name>relay</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_TFTP</name></cpp:ifdef>
  <decl_stmt><decl><type><name>int</name></type> <name>tftp_prefix_missing</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_IDN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBIDN2</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LOCALEDIR</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_ALL</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block" format="doxygen">/*** Pi-hole modification ***/</comment>
  <expr_stmt><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_NUMERIC</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block" format="doxygen">/****************************/</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCALEDIR</name></cpp:ifdef>
  <expr_stmt><expr><call><name>bindtextdomain</name><argument_list>(<argument><expr><literal type="string">"dnsmasq"</literal></expr></argument>, <argument><expr><name>LOCALEDIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  <expr_stmt><expr><call><name>textdomain</name><argument_list>(<argument><expr><literal type="string">"dnsmasq"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name><name>sigact</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>sig_handler</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sigact</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sigact</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGUSR1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sigact</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGUSR2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sigact</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sigact</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sigact</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sigact</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGCHLD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sigact</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sigact</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* ignore SIGPIPE */</comment>
  <expr_stmt><expr><name><name>sigact</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>SIG_IGN</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sigact</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>umask</name><argument_list>(<argument><expr><literal type="number">022</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* known umask, create leases and pid files as 0644 */</comment>

  <expr_stmt><expr><call><name>rand_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Must precede read_opts() */</comment>
  
  <expr_stmt><expr><call><name>read_opts</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>compile_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LINUX_NETWORK</name></cpp:ifdef>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>kernel_version</name></name> <operator>=</operator> <call><name>kernel_version</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>edns_pktsz</name></name> <operator>&lt;</operator> <name>PACKETSZ</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>edns_pktsz</name></name> <operator>=</operator> <name>PACKETSZ</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="block">/* Min buffer size: we check after adding each record, so there must be 
     memory for the largest packet, and the largest record so the
     min for DNS is PACKETSZ+MAXDNAME+RRFIXEDSZ which is &lt; 1000.
     This might be increased is EDNS packet size if greater than the minimum. */</comment> 
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>packet_buff_sz</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>edns_pktsz</name></name> <operator>+</operator> <name>MAXDNAME</name> <operator>+</operator> <name>RRFIXEDSZ</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name> <operator>=</operator> <call><name>safe_malloc</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>packet_buff_sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_EXTRALOG</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff2</name></name> <operator>=</operator> <call><name>safe_malloc</name><argument_list>(<argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DNSSEC_VALID</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Note that both /000 and '.' are allowed within labels. These get
	 represented in presentation format using NAME_ESCAPE as an escape
	 character when in DNSSEC mode. 
	 In theory, if all the characters in a name were /000 or
	 '.' or NAME_ESCAPE then all would have to be escaped, so the 
	 presentation format would be twice as long as the spec.

	 daemon-&gt;namebuff was previously allocated by the option-reading
	 code before we knew if we're in DNSSEC mode, so reallocate here. */</comment>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name> <operator>=</operator> <call><name>safe_malloc</name><argument_list>(<argument><expr><name>MAXDNAME</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>keyname</name></name> <operator>=</operator> <call><name>safe_malloc</name><argument_list>(<argument><expr><name>MAXDNAME</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>workspacename</name></name> <operator>=</operator> <call><name>safe_malloc</name><argument_list>(<argument><expr><name>MAXDNAME</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* one char flag per possible RR in answer section (may get extended). */</comment>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>rr_status_sz</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>rr_status</name></name> <operator>=</operator> <call><name>safe_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>daemon</name><operator>-&gt;</operator><name>rr_status</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>daemon</name><operator>-&gt;</operator><name>rr_status_sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONNTRACK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UBUS</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* CONNTRACK UBUS code uses this buffer, so if not allocated above,
     we need to allocate it here. */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CMARK_ALST_EN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>daemon</name><operator>-&gt;</operator><name>workspacename</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>workspacename</name></name> <operator>=</operator> <call><name>safe_malloc</name><argument_list>(<argument><expr><name>MAXDNAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>daemon</name><operator>-&gt;</operator><name>lease_file</name></name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp</name></name> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp6</name></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>lease_file</name></name> <operator>=</operator> <name>LEASEFILE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
  <comment type="block">/* Ensure that at least stdin, stdout and stderr (fd 0, 1, 2) exist,
     otherwise file descriptors we create can end up being 0, 1, or 2 
     and then get accidentally closed later when we make 0, 1, and 2 
     open to /dev/null. Normally we'll be started with 0, 1 and 2 open, 
     but it's not guaranteed. By opening /dev/null three times, we 
     ensure that we're not using those fds for real stuff. */</comment>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>open</name><argument_list>(<argument><expr><literal type="string">"/dev/null"</literal></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 
  
  <comment type="block">/* Close any file descriptors we inherited apart from std{in|out|err} */</comment>
  <expr_stmt><expr><call><name>close_fds</name><argument_list>(<argument><expr><name>max_fd</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_LINUX_NETWORK</name></cpp:ifndef>
<cpp:if>#  <cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>IP_RECVDSTADDR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>IP_RECVIF</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>IP_SENDSRCADDR</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NOWILD</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>bind_fallback</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>set_option_bool</name><argument_list>(<argument><expr><name>OPT_NOWILD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
  
  <comment type="block">/* -- bind-dynamic not supported on !Linux, fall back to --bind-interfaces */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CLEVERBIND</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>bind_fallback</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>set_option_bool</name><argument_list>(<argument><expr><name>OPT_NOWILD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>reset_option_bool</name><argument_list>(<argument><expr><name>OPT_CLEVERBIND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_INOTIFY</name></cpp:ifndef>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>dynamic_dirs</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"dhcp-hostsdir, dhcp-optsdir and hostsdir are not supported on this platform"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_BADCONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DNSSEC_VALID</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
      <decl_stmt><decl><type><name><name>struct</name> <name>ds_config</name></name> <modifier>*</modifier></type><name>ds</name></decl>;</decl_stmt>

      <comment type="block">/* Must have at least a root trust anchor, or the DNSSEC code
	 can loop forever. */</comment>
      <for>for <control>(<init><expr><name>ds</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>ds</name></name></expr>;</init> <condition><expr><name>ds</name></expr>;</condition> <incr><expr><name>ds</name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	  <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ds</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"no root trust anchor provided for DNSSEC"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_BADCONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>cachesize</name></name> <operator>&lt;</operator> <name>CACHESIZ</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot reduce cache size from default when DNSSEC enabled"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_BADCONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
      <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"DNSSEC not available: set HAVE_DNSSEC in src/config.h"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_BADCONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_TFTP</name></cpp:ifndef>
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_TFTP</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"TFTP server not available: set HAVE_TFTP in src/config.h"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_BADCONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONNTRACK</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CONNTRACK</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>query_port</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>osport</name></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>die</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot use --conntrack AND --query-port"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_BADCONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <expr_stmt><expr><name>need_cap_net_admin</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CONNTRACK</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"conntrack support not available: set HAVE_CONNTRACK in src/config.h"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_BADCONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SOLARIS_NETWORK</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>max_logs</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"asynchronous logging is not available under Solaris"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_BADCONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__ANDROID__</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>max_logs</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"asynchronous logging is not available under Android"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_BADCONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_AUTH</name></cpp:ifndef>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>auth_zones</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"authoritative DNS not available: set HAVE_AUTH in src/config.h"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_BADCONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_LOOP</name></cpp:ifndef>
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOOP_DETECT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"loop detection not available: set HAVE_LOOP in src/config.h"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_BADCONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_UBUS</name></cpp:ifndef>
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_UBUS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Ubus not available: set HAVE_UBUS in src/config.h"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_BADCONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
  <comment type="block">/* Handle only one of min_port/max_port being set. */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>min_port</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>max_port</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>max_port</name></name> <operator>=</operator> <name>MAX_PORT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>max_port</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>min_port</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>min_port</name></name> <operator>=</operator> <name>MIN_PORT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
   
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>max_port</name></name> <operator>&lt;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>min_port</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"max_port cannot be smaller than min_port"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_BADCONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>max_port</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
      <name><name>daemon</name><operator>-&gt;</operator><name>max_port</name></name> <operator>-</operator> <name><name>daemon</name><operator>-&gt;</operator><name>min_port</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>randport_limit</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"port_limit must not be larger than available port range"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_BADCONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>dnsmasq_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>auth_zones</name></name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>daemon</name><operator>-&gt;</operator><name>authserver</name></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"--auth-server required when an auth zone is defined."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_BADCONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <comment type="block">/* Create a serial at startup if not configured. */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_BROKEN_RTC</name></cpp:ifdef>
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>soa_sn</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"zone serial must be configured in --auth-soa"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_BADCONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>soa_sn</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>soa_sn</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp6</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>doing_ra</name></name> <operator>=</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_RA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <for>for <control>(<init><expr><name>context</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp6</name></name></expr>;</init> <condition><expr><name>context</name></expr>;</condition> <incr><expr><name>context</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_DHCP</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>doing_dhcp6</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_RA</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>doing_ra</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_NETWORK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BSD_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:if>
	  <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_TEMPLATE</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>die</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"dhcp-range constructor not available on this platform"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_BADCONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
	</block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP</name></cpp:ifdef>
  <comment type="block">/* Note that order matters here, we must call lease_init before
     creating any file descriptors which shouldn't be leaked
     to the lease-script init process. We need to call common_init
     before lease_init to allocate buffers it uses.
     The script subsystem relies on DHCP buffers, hence the last two
     conditions below. */</comment>  
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp</name></name> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>doing_dhcp6</name></name> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>relay4</name></name> <operator>||</operator> 
      <name><name>daemon</name><operator>-&gt;</operator><name>relay6</name></name> <operator>||</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_TFTP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_SCRIPT_ARP</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>dhcp_common_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp</name></name> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>doing_dhcp6</name></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>lease_init</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp</name></name> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>relay4</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>dhcp_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#   <cpp:directive>ifdef</cpp:directive> <name>HAVE_LINUX_NETWORK</name></cpp:ifdef>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NO_PING</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>need_cap_net_raw</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>need_cap_net_admin</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#   <cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>
  
<cpp:ifdef>#  <cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>doing_ra</name></name> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>doing_dhcp6</name></name> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>relay6</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>ra_init</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#   <cpp:directive>ifdef</cpp:directive> <name>HAVE_LINUX_NETWORK</name></cpp:ifdef>
      <expr_stmt><expr><name>need_cap_net_raw</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>need_cap_net_admin</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#   <cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>doing_dhcp6</name></name> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>relay6</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>dhcp6_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_IPSET</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>ipsets</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>ipset_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#  <cpp:directive>ifdef</cpp:directive> <name>HAVE_LINUX_NETWORK</name></cpp:ifdef>
      <expr_stmt><expr><name>need_cap_net_admin</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_NFTSET</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>nftsets</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>nftset_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#  <cpp:directive>ifdef</cpp:directive> <name>HAVE_LINUX_NETWORK</name></cpp:ifdef>
      <expr_stmt><expr><name>need_cap_net_admin</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive>  <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name>netlink_warn</name> <operator>=</operator> <call><name>netlink_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BSD_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><call><name>route_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NOWILD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CLEVERBIND</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot set --bind-interfaces and --bind-dynamic"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_BADCONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>enumerate_interfaces</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>enumerate_interfaces</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to find list of interfaces: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_MISC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NOWILD</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CLEVERBIND</name></expr></argument>)</argument_list></call></expr>)</condition> 
    <block>{<block_content>
      <expr_stmt><expr><call><name>create_bound_listeners</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CLEVERBIND</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<for>for <control>(<init><expr><name>if_tmp</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>if_names</name></name></expr>;</init> <condition><expr><name>if_tmp</name></expr>;</condition> <incr><expr><name>if_tmp</name> <operator>=</operator> <name><name>if_tmp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	  <if_stmt><if>if <condition>(<expr><name><name>if_tmp</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>if_tmp</name><operator>-&gt;</operator><name>used</name></name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unknown interface %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>if_tmp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>EC_BADNET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_NETWORK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DHCP</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <comment type="block">/* after enumerate_interfaces()  */</comment>
      <expr_stmt><expr><name>bound_device</name> <operator>=</operator> <call><name>whichdevice</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>did_bind</name> <operator>=</operator> <call><name>bind_dhcp_devices</name><argument_list>(<argument><expr><name>bound_device</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to set SO_BINDTODEVICE on DHCP socket: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_BADNET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>	
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content> 
    <expr_stmt><expr><call><name>create_wildcard_listeners</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
 
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
  <comment type="block">/* after enumerate_interfaces() */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>doing_dhcp6</name></name> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>relay6</name></name> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>doing_ra</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>join_multicast</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="block">/* After netlink_init() and before create_helper() */</comment>
  <expr_stmt><expr><call><name>lease_make_duid</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>port</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>cache_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>blockdata_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>hash_questions_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Scale random socket pool by ftabsize, but
	 limit it based on available fds. */</comment>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>numrrand</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>ftabsize</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>numrrand</name></name> <operator>&gt;</operator> <name>max_fd</name><operator>/</operator><literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>numrrand</name></name> <operator>=</operator> <name>max_fd</name><operator>/</operator><literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <comment type="block">/* safe_malloc returns zero'd memory */</comment>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>randomsocks</name></name> <operator>=</operator> <call><name>safe_malloc</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>numrrand</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>randfd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_INOTIFY</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>daemon</name><operator>-&gt;</operator><name>port</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp</name></name> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>doing_dhcp6</name></name><operator>)</operator>
      <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NO_RESOLV</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dynamic_dirs</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>inotify_dnsmasq_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>inotifyfd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>dump_file</name></name></expr>)</condition><block type="pseudo"><block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DUMPFILE</name></cpp:ifdef>
    <expr_stmt><expr><call><name>dump_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content> 
    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dumpfd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Packet dumps not available: set HAVE_DUMP in src/config.h"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_BADCONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DBUS</name></expr></argument>)</argument_list></call></expr>)</condition>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DBUS</name></cpp:ifdef>
    <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>dbus_init</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"DBus error: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>EC_MISC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"DBus not available: set HAVE_DBUS in src/config.h"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_BADCONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_UBUS</name></expr></argument>)</argument_list></call></expr>)</condition>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UBUS</name></cpp:ifdef>
    <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ubus_init</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"UBus error: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>EC_MISC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"UBus not available: set HAVE_UBUS in src/dnsmasq/config.h"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_BADCONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>port</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>pre_allocate_sfds</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SCRIPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* Note getpwnam returns static storage */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp</name></name> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp6</name></name><operator>)</operator> <operator>&amp;&amp;</operator> 
      <name><name>daemon</name><operator>-&gt;</operator><name>scriptuser</name></name> <operator>&amp;&amp;</operator> 
      <operator>(</operator><name><name>daemon</name><operator>-&gt;</operator><name>lease_change_command</name></name> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>luascript</name></name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>passwd</name></name> <modifier>*</modifier></type><name>scr_pw</name></decl>;</decl_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>scr_pw</name> <operator>=</operator> <call><name>getpwnam</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>scriptuser</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>script_uid</name> <operator>=</operator> <name><name>scr_pw</name><operator>-&gt;</operator><name>pw_uid</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>script_gid</name> <operator>=</operator> <name><name>scr_pw</name><operator>-&gt;</operator><name>pw_gid</name></name></expr>;</expr_stmt>
	 </block_content>}</block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><name>baduser</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>scriptuser</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>username</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>ent_pw</name> <operator>=</operator> <call><name>getpwnam</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>username</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>baduser</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>username</name></name></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>groupname</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>gp</name> <operator>=</operator> <call><name>getgrnam</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>groupname</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>baduser</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>groupname</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>baduser</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unknown user or group: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>baduser</name></expr></argument>, <argument><expr><name>EC_BADCONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="block">/* implement group defaults, "dip" if available, or group associated with uid */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>daemon</name><operator>-&gt;</operator><name>group_set</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>gp</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>gp</name> <operator>=</operator> <call><name>getgrnam</name><argument_list>(<argument><expr><name>CHGRP</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name>ent_pw</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>gp</name> <operator>=</operator> <call><name>getgrgid</name><argument_list>(<argument><expr><name><name>ent_pw</name><operator>-&gt;</operator><name>pw_gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <comment type="block">/* for error message */</comment>
      <if_stmt><if>if <condition>(<expr><name>gp</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>groupname</name></name> <operator>=</operator> <name><name>gp</name><operator>-&gt;</operator><name>gr_name</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
    </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* We keep CAP_NETADMIN (for ARP-injection) and
     CAP_NET_RAW (for icmp) if we're doing dhcp,
     if we have yet to bind ports because of DAD, 
     or we're doing it dynamically, we need CAP_NET_BIND_SERVICE. */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>is_dad_listeners</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CLEVERBIND</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
      <operator>(</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_TFTP</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name><name>daemon</name><operator>-&gt;</operator><name>port</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>port</name></name> <operator>&lt;=</operator> <literal type="number">1024</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>need_cap_net_bind_service</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="block">/* usptream servers which bind to an interface call SO_BINDTODEVICE
     for each TCP connection, so need CAP_NET_RAW */</comment>
  <for>for <control>(<init><expr><name>serv</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>servers</name></name></expr>;</init> <condition><expr><name>serv</name></expr>;</condition> <incr><expr><name>serv</name> <operator>=</operator> <name><name>serv</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>serv</name><operator>-&gt;</operator><name>interface</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>need_cap_net_raw</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

  <comment type="block">/* If we're doing Dbus or UBus, the above can be set dynamically,
     (as can ports) so always (potentially) needed. */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DBUS</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DBUS</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>need_cap_net_bind_service</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>need_cap_net_raw</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UBUS</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_UBUS</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>need_cap_net_bind_service</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>need_cap_net_raw</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
  <comment type="block">/* determine capability API version here, while we can still
     call safe_malloc */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>capsize</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* for header version 1 */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fail</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  
  <expr_stmt><expr><name>hdr</name> <operator>=</operator> <call><name>safe_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* find version supported by kernel */</comment>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>capget</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>version</name></name> <operator>!=</operator> <name>LINUX_CAPABILITY_VERSION_1</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* if unknown version, use largest supported version (3) */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>version</name></name> <operator>!=</operator> <name>LINUX_CAPABILITY_VERSION_2</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>LINUX_CAPABILITY_VERSION_3</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>capsize</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>safe_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>capsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>capget</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Get current values, for verification */</comment>

  <if_stmt><if>if <condition>(<expr><name>need_cap_net_admin</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>permitted</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>CAP_NET_ADMIN</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>fail</name> <operator>=</operator> <literal type="string">"NET_ADMIN"</literal></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>need_cap_net_raw</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>permitted</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>CAP_NET_RAW</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>fail</name> <operator>=</operator> <literal type="string">"NET_RAW"</literal></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>need_cap_net_bind_service</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>permitted</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>CAP_NET_BIND_SERVICE</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>fail</name> <operator>=</operator> <literal type="string">"NET_BIND_SERVICE"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>fail</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"process is missing required capability %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fail</name></expr></argument>, <argument><expr><name>EC_MISC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="block">/* Now set bitmaps to set caps after daemonising */</comment>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>capsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>need_cap_net_admin</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>effective</name></name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>CAP_NET_ADMIN</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>need_cap_net_raw</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>effective</name></name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>CAP_NET_RAW</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>need_cap_net_bind_service</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>effective</name></name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>CAP_NET_BIND_SERVICE</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>permitted</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>effective</name></name></expr>;</expr_stmt>  
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* Use a pipe to carry signals and other events back to the event loop 
     in a race-free manner and another to carry errors to daemon-invoking process */</comment>
  <expr_stmt><expr><call><name>safe_pipe</name><argument_list>(<argument><expr><name>pipefd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><name>piperead</name> <operator>=</operator> <name><name>pipefd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>pipewrite</name> <operator>=</operator> <name><name>pipefd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <comment type="block">/* prime the pipe to load stuff first time. */</comment>
  <expr_stmt><expr><call><name>send_event</name><argument_list>(<argument><expr><name>pipewrite</name></expr></argument>, <argument><expr><name>EVENT_INIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

  <expr_stmt><expr><name><name>err_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DEBUG</name></expr></argument>)</argument_list></call></expr>)</condition>   
    <block>{<block_content>
      <comment type="block">/* The following code "daemonizes" the process. 
	 See Stevens section 12.4 */</comment>
      
      <if_stmt><if>if <condition>(<expr><call><name>chdir</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot chdir to filesystem root: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_MISC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NO_FORK</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
	  
	  <comment type="block">/* pipe to carry errors back to original process.
	     When startup is complete we close this and the process terminates. */</comment>
	  <expr_stmt><expr><call><name>safe_pipe</name><argument_list>(<argument><expr><name>err_pipe</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pid</name> <operator>=</operator> <call><name>fork</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	    <comment type="block">/* fd == -1 since we've not forked, never returns. */</comment>
	    <expr_stmt><expr><call><name>send_event</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>EVENT_FORK_ERR</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	   
	  <if_stmt><if>if <condition>(<expr><name>pid</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name><name>struct</name> <name>event_desc</name></name></type> <name>ev</name></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

	      <comment type="block">/* close our copy of write-end */</comment>
	      <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>err_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      
	      <comment type="block">/* check for errors after the fork */</comment>
	      <if_stmt><if>if <condition>(<expr><call><name>read_event</name><argument_list>(<argument><expr><name><name>err_pipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fatal_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      
	      <expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><name>EC_GOOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt> 
	  
	  <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>err_pipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <comment type="block">/* NO calls to die() from here on. */</comment>
	  
	  <expr_stmt><expr><call><name>setsid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	 
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pid</name> <operator>=</operator> <call><name>fork</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>send_event</name><argument_list>(<argument><expr><name><name>err_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>EVENT_FORK_ERR</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	 
	  <if_stmt><if>if <condition>(<expr><name>pid</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
            
      <comment type="block">/* write pidfile _after_ forking ! */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>runfile</name></name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>, <decl><type ref="prev"/><name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <comment type="block">/* Explanation: Some installations of dnsmasq (eg Debian/Ubuntu) locate the pid-file
	     in a directory which is writable by the non-privileged user that dnsmasq runs as. This
	     allows the daemon to delete the file as part of its shutdown. This is a security hole to the 
	     extent that an attacker running as the unprivileged  user could replace the pidfile with a 
	     symlink, and have the target of that symlink overwritten as root next time dnsmasq starts. 

	     The following code first deletes any existing file, and then opens it with the O_EXCL flag,
	     ensuring that the open() fails should there be any existing file (because the unlink() failed, 
	     or an attacker exploited the race between unlink() and open()). This ensures that no symlink
	     attack can succeed. 

	     Any compromise of the non-privileged user still theoretically allows the pid-file to be
	     replaced whilst dnsmasq is running. The worst that could allow is that the usual 
	     "shutdown dnsmasq" shell command could be tricked into stopping any other process.

	     Note that if dnsmasq is started as non-root (eg for testing) it silently ignores 
	     failure to write the pid-file.
	  */</comment>

	  <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>runfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	  
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>runfile</name></name></expr></argument>, <argument><expr><name>O_WRONLY</name><operator>|</operator><name>O_CREAT</name><operator>|</operator><name>O_TRUNC</name><operator>|</operator><name>O_EXCL</name></expr></argument>, <argument><expr><name>S_IWUSR</name><operator>|</operator><name>S_IRUSR</name><operator>|</operator><name>S_IRGRP</name><operator>|</operator><name>S_IROTH</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	    <block>{<block_content>
	      <comment type="block">/* only complain if started as root */</comment>
	      <if_stmt><if>if <condition>(<expr><call><name>getuid</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></if>
	  <else>else
	    <block>{<block_content>
	      <comment type="block">/* We're still running as root here. Change the ownership of the PID file
		 to the user we will be running as. Note that this is not to allow
		 us to delete the file, since that depends on the permissions 
		 of the directory containing the file. That directory will
		 need to by owned by the dnsmasq user, and the ownership of the
		 file has to match, to keep systemd &gt;273 happy. */</comment>
	      <if_stmt><if>if <condition>(<expr><call><name>getuid</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ent_pw</name> <operator>&amp;&amp;</operator> <name><name>ent_pw</name><operator>-&gt;</operator><name>pw_uid</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>fchown</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>ent_pw</name><operator>-&gt;</operator><name>pw_uid</name></name></expr></argument>, <argument><expr><name><name>ent_pw</name><operator>-&gt;</operator><name>pw_gid</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>chown_warn</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
	      <else>else
		<block>{<block_content>
		  <if_stmt><if>if <condition>(<expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	    </block_content>}</block></else></if_stmt>

	  <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>send_event</name><argument_list>(<argument><expr><name><name>err_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>EVENT_PIDFILE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>runfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FTL_fork_and_bind_sockets</name><argument_list>(<argument><expr><name>ent_pw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
   <expr_stmt><expr><name>log_err</name> <operator>=</operator> <call><name>log_start</name><argument_list>(<argument><expr><name>ent_pw</name></expr></argument>, <argument><expr><name><name>err_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DEBUG</name></expr></argument>)</argument_list></call></expr>)</condition> 
     <block>{<block_content>       
       <comment type="block">/* open  stdout etc to /dev/null */</comment>
       <decl_stmt><decl><type><name>int</name></type> <name>nullfd</name> <init>= <expr><call><name>open</name><argument_list>(<argument><expr><literal type="string">"/dev/null"</literal></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><name>nullfd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	 <block>{<block_content>
	   <expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name>nullfd</name></expr></argument>, <argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	   <expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name>nullfd</name></expr></argument>, <argument><expr><name>STDERR_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	   <expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name>nullfd</name></expr></argument>, <argument><expr><name>STDIN_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	   <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>nullfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 </block_content>}</block></if></if_stmt>
     </block_content>}</block></if></if_stmt>
   
   <comment type="block">/* if we are to run scripts, we need to fork a helper before dropping root. */</comment>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>helperfd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SCRIPT</name></cpp:ifdef> 
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp</name></name> <operator>||</operator>
       <name><name>daemon</name><operator>-&gt;</operator><name>dhcp6</name></name> <operator>||</operator>
       <name><name>daemon</name><operator>-&gt;</operator><name>relay6</name></name> <operator>||</operator>
       <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_TFTP</name></expr></argument>)</argument_list></call> <operator>||</operator>
       <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_SCRIPT_ARP</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> 
      <operator>(</operator><name><name>daemon</name><operator>-&gt;</operator><name>lease_change_command</name></name> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>luascript</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>helperfd</name></name> <operator>=</operator> <call><name>create_helper</name><argument_list>(<argument><expr><name>pipewrite</name></expr></argument>, <argument><expr><name><name>err_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>script_uid</name></expr></argument>, <argument><expr><name>script_gid</name></expr></argument>, <argument><expr><name>max_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DEBUG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>getuid</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>   
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>bad_capabilities</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>gid_t</name></type> <name>dummy</name></decl>;</decl_stmt>
      
      <comment type="block">/* remove all supplementary groups */</comment>
      <if_stmt><if>if <condition>(<expr><name>gp</name> <operator>&amp;&amp;</operator> 
	  <operator>(</operator><call><name>setgroups</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
	   <call><name>setgid</name><argument_list>(<argument><expr><name><name>gp</name><operator>-&gt;</operator><name>gr_gid</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>send_event</name><argument_list>(<argument><expr><name><name>err_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>EVENT_GROUP_ERR</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>groupname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
  
      <if_stmt><if>if <condition>(<expr><name>ent_pw</name> <operator>&amp;&amp;</operator> <name><name>ent_pw</name><operator>-&gt;</operator><name>pw_uid</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>     
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:if>	  
	  <comment type="block">/* Need to be able to drop root. */</comment>
	  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>effective</name></name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>CAP_SETUID</name><operator>)</operator></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>permitted</name></name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>CAP_SETUID</name><operator>)</operator></expr>;</expr_stmt>
	  <comment type="block">/* Tell kernel to not clear capabilities when dropping root */</comment>
	  <if_stmt><if>if <condition>(<expr><call><name>capset</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <call><name>prctl</name><argument_list>(<argument><expr><name>PR_SET_KEEPCAPS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>bad_capabilities</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			  
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SOLARIS_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	  <comment type="block">/* http://developers.sun.com/solaris/articles/program_privileges.html */</comment>
	  <decl_stmt><decl><type><name>priv_set_t</name> <modifier>*</modifier></type><name>priv_set</name></decl>;</decl_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>priv_set</name> <operator>=</operator> <call><name>priv_str_to_set</name><argument_list>(<argument><expr><literal type="string">"basic"</literal></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
	      <call><name>priv_addset</name><argument_list>(<argument><expr><name>priv_set</name></expr></argument>, <argument><expr><name>PRIV_NET_ICMPACCESS</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
	      <call><name>priv_addset</name><argument_list>(<argument><expr><name>priv_set</name></expr></argument>, <argument><expr><name>PRIV_SYS_NET_CONFIG</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>bad_capabilities</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	  <if_stmt><if>if <condition>(<expr><name>priv_set</name> <operator>&amp;&amp;</operator> <name>bad_capabilities</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>priv_inverse</name><argument_list>(<argument><expr><name>priv_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
	      <if_stmt><if>if <condition>(<expr><call><name>setppriv</name><argument_list>(<argument><expr><name>PRIV_OFF</name></expr></argument>, <argument><expr><name>PRIV_LIMIT</name></expr></argument>, <argument><expr><name>priv_set</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>bad_capabilities</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>

	  <if_stmt><if>if <condition>(<expr><name>priv_set</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>priv_freeset</name><argument_list>(<argument><expr><name>priv_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>    

	  <if_stmt><if>if <condition>(<expr><name>bad_capabilities</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>send_event</name><argument_list>(<argument><expr><name><name>err_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>EVENT_CAP_ERR</name></expr></argument>, <argument><expr><name>bad_capabilities</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	  
	  <comment type="block">/* finally drop root */</comment>
	  <if_stmt><if>if <condition>(<expr><call><name>setuid</name><argument_list>(<argument><expr><name><name>ent_pw</name><operator>-&gt;</operator><name>pw_uid</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>send_event</name><argument_list>(<argument><expr><name><name>err_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>EVENT_USER_ERR</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>     

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LINUX_NETWORK</name></cpp:ifdef>
	  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>effective</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>CAP_SETUID</name><operator>)</operator></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>permitted</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>CAP_SETUID</name><operator>)</operator></expr>;</expr_stmt>
	  
	  <comment type="block">/* lose the setuid capability */</comment>
	  <if_stmt><if>if <condition>(<expr><call><name>capset</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>send_event</name><argument_list>(<argument><expr><name><name>err_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>EVENT_CAP_ERR</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	  
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LINUX_NETWORK</name></cpp:ifdef>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DEBUG</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
    <expr_stmt><expr><call><name>prctl</name><argument_list>(<argument><expr><name>PR_SET_DUMPABLE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_TFTP</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_TFTP</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>struct</name> <name>tftp_prefix</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>tftp_prefix</name></name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>dir</name> <operator>=</operator> <call><name>opendir</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>tftp_prefix</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>tftp_prefix_missing</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_TFTP_NO_FAIL</name></expr></argument>)</argument_list></call></expr>)</condition>
	        <block>{<block_content>
	          <expr_stmt><expr><call><name>send_event</name><argument_list>(<argument><expr><name><name>err_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>EVENT_TFTP_ERR</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>tftp_prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	          <expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        </block_content>}</block></if></if_stmt>
	    </block_content>}</block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>closedir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

      <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>if_prefix</name></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
	  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>missing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>dir</name> <operator>=</operator> <call><name>opendir</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>missing</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_TFTP_NO_FAIL</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>send_event</name><argument_list>(<argument><expr><name><name>err_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>EVENT_TFTP_ERR</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>closedir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>port</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"started, version %s DNS disabled"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else 
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>cachesize</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"started, version %s cachesize %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>VERSION</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>cachesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>cachesize</name></name> <operator>&gt;</operator> <literal type="number">10000</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cache size greater than 10000 may cause performance issues, and is unlikely to be useful."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"started, version %s cache disabled"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LOCAL_SERVICE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"DNS service limited to local subnets"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  
  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"compile time options: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>compile_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>chown_warn</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"chown of PID file %s failed: %s"</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>runfile</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>chown_warn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DBUS</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DBUS</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>dbus</name></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"DBus support enabled: connected to system bus"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"DBus support enabled: bus connection pending"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UBUS</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_UBUS</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>ubus</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"UBus support enabled: connected to system bus"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"UBus support enabled: bus connection pending"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DNSSEC_VALID</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>struct</name> <name>ds_config</name></name> <modifier>*</modifier></type><name>ds</name></decl>;</decl_stmt>
      
      <comment type="block">/* Delay creating the timestamp file until here, after we've changed user, so that
	 it has the correct owner to allow updating the mtime later. 
	 This means we have to report fatal errors via the pipe. */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>setup_timestamp</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>send_event</name><argument_list>(<argument><expr><name><name>err_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>EVENT_TIME_ERR</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>timestamp_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DNSSEC_IGN_NS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"DNSSEC validation enabled but all unsigned answers are trusted"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"DNSSEC validation enabled"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
      
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dnssec_no_time_check</name></name> <operator>=</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DNSSEC_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DNSSEC_TIME</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>daemon</name><operator>-&gt;</operator><name>back_to_the_future</name></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"DNSSEC signature timestamps not checked until receipt of SIGINT"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"DNSSEC signature timestamps not checked until system time valid"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <for>for <control>(<init><expr><name>ds</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>ds</name></name></expr>;</init> <condition><expr><name>ds</name></expr>;</condition> <incr><expr><name>ds</name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"configured with trust anchor for %s keytag %u"</literal></expr></argument>)</argument_list></call></expr></argument>,
		  <argument><expr><ternary><condition><expr><name><name>ds</name><operator>-&gt;</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"&lt;root&gt;"</literal></expr> </then><else>: <expr><name><name>ds</name><operator>-&gt;</operator><name>name</name></name></expr></else></ternary></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>keytag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if <condition>(<expr><name>log_err</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"warning: failed to change owner of %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, 
	      <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>log_file</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>log_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_LINUX_NETWORK</name></cpp:ifndef>
  <if_stmt><if>if <condition>(<expr><name>bind_fallback</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"setting --bind-interfaces option because of OS limitations"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NOWILD</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>warn_bound_listeners</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CLEVERBIND</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>warn_wild_labels</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>warn_int_names</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NOWILD</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
    <for>for <control>(<init><expr><name>if_tmp</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>if_names</name></name></expr>;</init> <condition><expr><name>if_tmp</name></expr>;</condition> <incr><expr><name>if_tmp</name> <operator>=</operator> <name><name>if_tmp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><name><name>if_tmp</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>if_tmp</name><operator>-&gt;</operator><name>used</name></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"warning: interface %s does not currently exist"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>if_tmp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
   
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>port</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NO_RESOLV</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>resolv_files</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>daemon</name><operator>-&gt;</operator><name>resolv_files</name><operator>-&gt;</operator><name>is_default</name></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"warning: ignoring resolv-file flag because no-resolv is set"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>resolv_files</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>daemon</name><operator>-&gt;</operator><name>servers</name></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"warning: no upstream servers configured"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt> 

  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>max_logs</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"asynchronous logging enabled, queue limit is %d messages"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>max_logs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP</name></cpp:ifdef>
  <for>for <control>(<init><expr><name>context</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp</name></name></expr>;</init> <condition><expr><name>context</name></expr>;</condition> <incr><expr><name>context</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>log_context</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

  <for>for <control>(<init><expr><name>relay</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>relay4</name></name></expr>;</init> <condition><expr><name>relay</name></expr>;</condition> <incr><expr><name>relay</name> <operator>=</operator> <name><name>relay</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>log_relay</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>relay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<cpp:ifdef>#  <cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
  <for>for <control>(<init><expr><name>context</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp6</name></name></expr>;</init> <condition><expr><name>context</name></expr>;</condition> <incr><expr><name>context</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>log_context</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

  <for>for <control>(<init><expr><name>relay</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>relay6</name></name></expr>;</init> <condition><expr><name>relay</name></expr>;</condition> <incr><expr><name>relay</name> <operator>=</operator> <name><name>relay</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>log_relay</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>relay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>doing_dhcp6</name></name> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>doing_ra</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>dhcp_construct_contexts</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_RA</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"IPv6 router advertisement enabled"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#  <cpp:directive>ifdef</cpp:directive> <name>HAVE_LINUX_NETWORK</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name>did_bind</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"DHCP, sockets bound exclusively to interface %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bound_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>netlink_warn</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><name>netlink_warn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* after dhcp_construct_contexts */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp</name></name> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>doing_dhcp6</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>lease_find_interfaces</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_TFTP</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_TFTP</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>tftp_prefix</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_TFTP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"TFTP %s%s %s %s"</literal></expr></argument>, 
		<argument><expr><ternary><condition><expr><name><name>daemon</name><operator>-&gt;</operator><name>tftp_prefix</name></name></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"root is "</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"enabled"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
		<argument><expr><ternary><condition><expr><name><name>daemon</name><operator>-&gt;</operator><name>tftp_prefix</name></name></expr> ?</condition><then> <expr><name><name>daemon</name><operator>-&gt;</operator><name>tftp_prefix</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
		<argument><expr><ternary><condition><expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_TFTP_SECURE</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"secure mode"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
		<argument><expr><ternary><condition><expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_SINGLE_PORT</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"single port mode"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>tftp_prefix_missing</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_TFTP</name> <operator>|</operator> <name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"warning: %s inaccessible"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>tftp_prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>if_prefix</name></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>missing</name></name></expr>)</condition><block type="pseudo"><block_content>
	   <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_TFTP</name> <operator>|</operator> <name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"warning: TFTP directory %s inaccessible"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

      <comment type="block">/* This is a guess, it assumes that for small limits, 
	 disjoint files might be served, but for large limits, 
	 a single file will be sent to may clients (the file only needs
	 one fd). */</comment>

      <expr_stmt><expr><name>max_fd</name> <operator>-=</operator> <literal type="number">30</literal> <operator>+</operator> <name><name>daemon</name><operator>-&gt;</operator><name>numrrand</name></name></expr>;</expr_stmt> <comment type="block">/* use other than TFTP */</comment>
      
      <if_stmt><if>if <condition>(<expr><name>max_fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>max_fd</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name>max_fd</name> <operator>&lt;</operator> <literal type="number">100</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_SINGLE_PORT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>max_fd</name> <operator>=</operator> <name>max_fd</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><name>max_fd</name> <operator>=</operator> <name>max_fd</name> <operator>-</operator> <literal type="number">20</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
      
      <comment type="block">/* if we have to use a limited range of ports, 
	 that will limit the number of transfers */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>start_tftp_port</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
	  <name><name>daemon</name><operator>-&gt;</operator><name>end_tftp_port</name></name> <operator>-</operator> <name><name>daemon</name><operator>-&gt;</operator><name>start_tftp_port</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>max_fd</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>max_fd</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>end_tftp_port</name></name> <operator>-</operator> <name><name>daemon</name><operator>-&gt;</operator><name>start_tftp_port</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>tftp_max</name></name> <operator>&gt;</operator> <name>max_fd</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>tftp_max</name></name> <operator>=</operator> <name>max_fd</name></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_TFTP</name> <operator>|</operator> <name>LOG_WARNING</name></expr></argument>, 
		    <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"restricting maximum simultaneous TFTP transfers to %d"</literal></expr></argument>)</argument_list></call></expr></argument>, 
		    <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>tftp_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* finished start-up - release original process */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>err_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>err_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>port</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>check_servers</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>pipe_to_parent</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PROCS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>tcp_pipes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_INOTIFY</name></cpp:ifdef>
  <comment type="block">/* Using inotify, have to select a resolv file at startup */</comment>
  <expr_stmt><expr><call><name>poll_resolv</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block" format="doxygen">/*** Pi-hole modification ***/</comment>
  <expr_stmt><expr><name>terminate</name> <operator>=</operator> <name>killed</name></expr>;</expr_stmt>
  <comment type="block" format="doxygen">/****************************/</comment>
  
  <while>while <condition>(<expr><operator>!</operator><name>terminate</name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>timeout</name> <init>= <expr><call><name>fast_retry</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      
      <expr_stmt><expr><call><name>poll_reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* Whilst polling for the dbus, or doing a tftp transfer, wake every quarter second */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>daemon</name><operator>-&gt;</operator><name>tftp_trans</name></name> <operator>||</operator> <operator>(</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DBUS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>daemon</name><operator>-&gt;</operator><name>dbus</name></name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
	  <operator>(</operator><name>timeout</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>timeout</name> <operator>&gt;</operator> <literal type="number">250</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>timeout</name> <operator>=</operator> <literal type="number">250</literal></expr>;</expr_stmt></block_content></block></if>
      
      <comment type="block">/* Wake every second whilst waiting for DAD to complete */</comment>
      <if type="elseif">else if <condition>(<expr><call><name>is_dad_listeners</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
	       <operator>(</operator><name>timeout</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>timeout</name> <operator>&gt;</operator> <literal type="number">1000</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>timeout</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <expr_stmt><expr><call><name>set_dns_listeners</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DBUS</name></cpp:ifdef>
      <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DBUS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>set_dbus_listeners</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UBUS</name></cpp:ifdef>
      <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_UBUS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>set_ubus_listeners</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP</name></cpp:ifdef>
<cpp:if>#  <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <if_stmt><if>if <condition>(<expr><call><name>bind_dhcp_devices</name><argument_list>(<argument><expr><name>bound_device</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>warned</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>warned</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"error binding DHCP socket to device %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bound_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name>warned</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp</name></name> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>relay4</name></name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>poll_listen</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcpfd</name></name></expr></argument>, <argument><expr><name>POLLIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>pxefd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>poll_listen</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>pxefd</name></name></expr></argument>, <argument><expr><name>POLLIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>doing_dhcp6</name></name> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>relay6</name></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>poll_listen</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp6fd</name></name></expr></argument>, <argument><expr><name>POLLIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>doing_ra</name></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>poll_listen</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>icmp6fd</name></name></expr></argument>, <argument><expr><name>POLLIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_INOTIFY</name></cpp:ifdef>
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>inotifyfd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>poll_listen</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>inotifyfd</name></name></expr></argument>, <argument><expr><name>POLLIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <expr_stmt><expr><call><name>poll_listen</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>netlinkfd</name></name></expr></argument>, <argument><expr><name>POLLIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BSD_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:elif>
      <expr_stmt><expr><call><name>poll_listen</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>routefd</name></name></expr></argument>, <argument><expr><name>POLLIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      
      <expr_stmt><expr><call><name>poll_listen</name><argument_list>(<argument><expr><name>piperead</name></expr></argument>, <argument><expr><name>POLLIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SCRIPT</name></cpp:ifdef>
<cpp:ifdef>#    <cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP</name></cpp:ifdef>
      <while>while <condition>(<expr><call><name>helper_buf_empty</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>do_script_run</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while> 
<cpp:endif>#    <cpp:directive>endif</cpp:directive></cpp:endif>

      <comment type="block">/* Refresh cache */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_SCRIPT_ARP</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>find_mac</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <while>while <condition>(<expr><call><name>helper_buf_empty</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>do_arp_script_run</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>

<cpp:ifdef>#    <cpp:directive>ifdef</cpp:directive> <name>HAVE_TFTP</name></cpp:ifdef>
      <while>while <condition>(<expr><call><name>helper_buf_empty</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>do_tftp_script_run</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
<cpp:endif>#    <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#    <cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
      <while>while <condition>(<expr><call><name>helper_buf_empty</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>do_snoop_script_run</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
<cpp:endif>#    <cpp:directive>endif</cpp:directive></cpp:endif>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>helper_buf_empty</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>poll_listen</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>helperfd</name></name></expr></argument>, <argument><expr><name>POLLOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <comment type="block">/* need this for other side-effects */</comment>
<cpp:ifdef>#    <cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP</name></cpp:ifdef>
      <while>while <condition>(<expr><call><name>do_script_run</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
<cpp:endif>#    <cpp:directive>endif</cpp:directive></cpp:endif>

      <while>while <condition>(<expr><call><name>do_arp_script_run</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>

<cpp:ifdef>#    <cpp:directive>ifdef</cpp:directive> <name>HAVE_TFTP</name></cpp:ifdef> 
      <while>while <condition>(<expr><call><name>do_tftp_script_run</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
<cpp:endif>#    <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

   
      <comment type="block">/* must do this just before do_poll(), when we know no
	 more calls to my_syslog() can occur */</comment>
      <expr_stmt><expr><call><name>set_log_writer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><call><name>do_poll</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if></if_stmt>
      
      <expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>dnsmasq_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>check_log_writer</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* prime. */</comment>
      <expr_stmt><expr><call><name>enumerate_interfaces</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Check the interfaces to see if any have exited DAD state
	 and if so, bind the address. */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>is_dad_listeners</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>enumerate_interfaces</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <comment type="block">/* NB, is_dad_listeners() == 1 --&gt; we're binding interfaces */</comment>
	  <expr_stmt><expr><call><name>create_bound_listeners</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>warn_bound_listeners</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <if_stmt><if>if <condition>(<expr><call><name>poll_check</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>netlinkfd</name></name></expr></argument>, <argument><expr><name>POLLIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>netlink_multicast</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BSD_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:elif>
      <if_stmt><if>if <condition>(<expr><call><name>poll_check</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>routefd</name></name></expr></argument>, <argument><expr><name>POLLIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>route_sock</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_INOTIFY</name></cpp:ifdef>
      <if_stmt><if>if  <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>inotifyfd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>poll_check</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>inotifyfd</name></name></expr></argument>, <argument><expr><name>POLLIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>inotify_check</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>port</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NO_POLL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>poll_resolv</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt> 	  
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <comment type="block">/* Check for changes to resolv files once per second max. */</comment>
      <comment type="block">/* Don't go silent for long periods if the clock goes backwards. */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>last_resolv</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> 
	  <call><name>difftime</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>last_resolv</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1.0</literal> <operator>||</operator> 
	  <call><name>difftime</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>last_resolv</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <operator>-</operator><literal type="number">1.0</literal></expr>)</condition>
	<block>{<block_content>
	  <comment type="block">/* poll_resolv doesn't need to reload first time through, since 
	     that's queued anyway. */</comment>

	  <expr_stmt><expr><call><name>poll_resolv</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>last_resolv</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 	  
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>last_resolv</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

      <if_stmt><if>if <condition>(<expr><call><name>poll_check</name><argument_list>(<argument><expr><name>piperead</name></expr></argument>, <argument><expr><name>POLLIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>async_event</name><argument_list>(<argument><expr><name>piperead</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DBUS</name></cpp:ifdef>
      <comment type="block">/* if we didn't create a DBus connection, retry now. */</comment> 
      <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DBUS</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>daemon</name><operator>-&gt;</operator><name>dbus</name></name></expr>)</condition>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name>  <init>= <expr><call><name>dbus_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>dbus</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"connected to system DBus"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	      <if type="elseif">else if <condition>(<expr><name>err</name></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"DBus error: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>reset_option_bool</name><argument_list>(<argument><expr><name>OPT_DBUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* fatal error, stop trying. */</comment>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
	  
	  <expr_stmt><expr><call><name>check_dbus_listeners</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UBUS</name></cpp:ifdef>
      <comment type="block">/* if we didn't create a UBus connection, retry now. */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_UBUS</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>daemon</name><operator>-&gt;</operator><name>ubus</name></name></expr>)</condition>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name> <init>= <expr><call><name>ubus_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>ubus</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"connected to system UBus"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	      <if type="elseif">else if <condition>(<expr><name>err</name></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"UBus error: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>reset_option_bool</name><argument_list>(<argument><expr><name>OPT_UBUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* fatal error, stop trying. */</comment>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
	  
	  <expr_stmt><expr><call><name>check_ubus_listeners</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

      <expr_stmt><expr><call><name>check_dns_listeners</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_TFTP</name></cpp:ifdef>
      <expr_stmt><expr><call><name>check_tftp_listeners</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>      

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP</name></cpp:ifdef>
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp</name></name> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>relay4</name></name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><call><name>poll_check</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcpfd</name></name></expr></argument>, <argument><expr><name>POLLIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>dhcp_packet</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>pxefd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>poll_check</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>pxefd</name></name></expr></argument>, <argument><expr><name>POLLIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>dhcp_packet</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>daemon</name><operator>-&gt;</operator><name>doing_dhcp6</name></name> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>relay6</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>poll_check</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp6fd</name></name></expr></argument>, <argument><expr><name>POLLIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>dhcp6_packet</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>doing_ra</name></name> <operator>&amp;&amp;</operator> <call><name>poll_check</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>icmp6fd</name></name></expr></argument>, <argument><expr><name>POLLIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>icmp6_packet</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#  <cpp:directive>ifdef</cpp:directive> <name>HAVE_SCRIPT</name></cpp:ifdef>
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>helperfd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>poll_check</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>helperfd</name></name></expr></argument>, <argument><expr><name>POLLOUT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>helper_write</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    </block_content>}</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sig_handler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* ignore anything other than TERM during startup
	 and in helper proc. (helper ignore TERM too) */</comment>
      <if_stmt><if>if <condition>(<expr><name>sig</name> <operator>==</operator> <name>SIGTERM</name> <operator>||</operator> <name>sig</name> <operator>==</operator> <name>SIGINT</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EC_MISC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name>pid</name> <operator>!=</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* alarm is used to kill TCP children after a fixed time. */</comment>
      <if_stmt><if>if <condition>(<expr><name>sig</name> <operator>==</operator> <name>SIGALRM</name></expr>)</condition>
        <block>{<block_content>
	  <comment type="block" format="doxygen">/*** Pi-hole modification ***/</comment>
	  <comment type="line">// TCP workers ignore all signals except SIGALRM</comment>
	  <expr_stmt><expr><call><name>FTL_TCP_worker_terminating</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <comment type="block" format="doxygen">/*** Pi-hole modification ***/</comment>
	  <expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
  <else>else
    <block>{<block_content>
      <comment type="block">/* master process */</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>event</name></decl>, <decl><type ref="prev"/><name>errsave</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>sig</name> <operator>==</operator> <name>SIGHUP</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>event</name> <operator>=</operator> <name>EVENT_RELOAD</name></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name>sig</name> <operator>==</operator> <name>SIGCHLD</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>event</name> <operator>=</operator> <name>EVENT_CHILD</name></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name>sig</name> <operator>==</operator> <name>SIGALRM</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>event</name> <operator>=</operator> <name>EVENT_ALARM</name></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name>sig</name> <operator>==</operator> <name>SIGTERM</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>event</name> <operator>=</operator> <name>EVENT_TERM</name></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name>sig</name> <operator>==</operator> <name>SIGUSR1</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>event</name> <operator>=</operator> <name>EVENT_DUMP</name></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name>sig</name> <operator>==</operator> <name>SIGUSR2</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>event</name> <operator>=</operator> <name>EVENT_REOPEN</name></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name>sig</name> <operator>==</operator> <name>SIGINT</name></expr>)</condition>
	<block>{<block_content>
	  <comment type="block">/* Handle SIGINT normally in debug mode, so
	     ctrl-c continues to operate. */</comment>
	  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DEBUG</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EC_MISC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><name>event</name> <operator>=</operator> <name>EVENT_TIME</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
      <else>else<block type="pseudo"><block_content>
	<return>return;</return></block_content></block></else></if_stmt>

      <expr_stmt><expr><call><name>send_event</name><argument_list>(<argument><expr><name>pipewrite</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>errsave</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* now == 0 -&gt; queue immediate callback */</comment>
<function><type><name>void</name></type> <name>send_alarm</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>now</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>event</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* alarm(0) or alarm(-ve) doesn't do what we want.... */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>now</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>difftime</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0.0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>send_event</name><argument_list>(<argument><expr><name>pipewrite</name></expr></argument>, <argument><expr><name>EVENT_ALARM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content> 
	<expr_stmt><expr><call><name>alarm</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>difftime</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>queue_event</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>send_event</name><argument_list>(<argument><expr><name>pipewrite</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>send_event</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>event_desc</name></name></type> <name>ev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name><name>iov</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>ev</name><operator>.</operator><name>event</name></name> <operator>=</operator> <name>event</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ev</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ev</name><operator>.</operator><name>msg_sz</name></name> <operator>=</operator> <ternary><condition><expr><name>msg</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  
  <expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <operator>&amp;</operator><name>ev</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <name><name>ev</name><operator>.</operator><name>msg_sz</name></name></expr>;</expr_stmt>
  
  <comment type="block">/* error pipe, debug mode. */</comment>
  <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>fatal_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <comment type="block">/* pipe is non-blocking and struct event_desc is smaller than
       PIPE_BUF, so this either fails or writes everything */</comment>
    <while>while <condition>(<expr><call><name>writev</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>iov</name></expr></argument>, <argument><expr><ternary><condition><expr><name>msg</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* NOTE: the memory used to return msg is leaked: use msgs in events only
   to describe fatal errors. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>read_event</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>event_desc</name></name> <modifier>*</modifier></type><name>evp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>evp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>event_desc</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><operator>*</operator><name>msg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>evp</name><operator>-&gt;</operator><name>msg_sz</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> 
      <operator>(</operator><name>buf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>evp</name><operator>-&gt;</operator><name>msg_sz</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
      <call><name>read_write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name><name>evp</name><operator>-&gt;</operator><name>msg_sz</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>buf</name><index>[<expr><name><name>evp</name><operator>-&gt;</operator><name>msg_sz</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>msg</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
    
<function><type><specifier>static</specifier> <name>void</name></type> <name>fatal_event</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_desc</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name>errno</name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
  
  <switch>switch <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>event</name></name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>EVENT_DIE</name></expr>:</case>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <case>case <expr><name>EVENT_FORK_ERR</name></expr>:</case>
      <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot fork into background: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_MISC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* fall through */</comment>
    <case>case <expr><name>EVENT_PIPE_ERR</name></expr>:</case>
      <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to create helper: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_MISC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* fall through */</comment>
    <case>case <expr><name>EVENT_CAP_ERR</name></expr>:</case>
      <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"setting capabilities failed: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_MISC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* fall through */</comment>
    <case>case <expr><name>EVENT_USER_ERR</name></expr>:</case>
      <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to change user-id to %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>EC_MISC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* fall through */</comment>
    <case>case <expr><name>EVENT_GROUP_ERR</name></expr>:</case>
      <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to change group-id to %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>EC_MISC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* fall through */</comment>
    <case>case <expr><name>EVENT_PIDFILE</name></expr>:</case>
      <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to open pidfile %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>EC_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* fall through */</comment>
    <case>case <expr><name>EVENT_LOG_ERR</name></expr>:</case>
      <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot open log %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>EC_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* fall through */</comment>
    <case>case <expr><name>EVENT_LUA_ERR</name></expr>:</case>
      <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to load Lua script: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>EC_MISC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* fall through */</comment>
    <case>case <expr><name>EVENT_TFTP_ERR</name></expr>:</case>
      <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"TFTP directory %s inaccessible: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>EC_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* fall through */</comment>
    <case>case <expr><name>EVENT_TIME_ERR</name></expr>:</case>
      <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot create timestamp file %s: %s"</literal></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>EC_BADCONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
</block_content>}</block></function>	
      
<function><type><specifier>static</specifier> <name>void</name></type> <name>async_event</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pipe</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>pid_t</name></type> <name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>event_desc</name></name></type> <name>ev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>check</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>
  
  <comment type="block">/* NOTE: the memory used to return msg is leaked: use msgs in events only
     to describe fatal errors. */</comment>
  
  <if_stmt><if>if <condition>(<expr><call><name>read_event</name><argument_list>(<argument><expr><name>pipe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <switch>switch <condition>(<expr><name><name>ev</name><operator>.</operator><name>event</name></name></expr>)</condition>
      <block>{<block_content>
      <case>case <expr><name>EVENT_RELOAD</name></expr>:</case>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>soa_sn</name></name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Bump zone serial, as it may have changed. */</comment>
	
	<comment type="block">/* fall through */</comment>
	
      <case>case <expr><name>EVENT_INIT</name></expr>:</case>
	<expr_stmt><expr><call><name>clear_cache_and_reload</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>port</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	  <block>{<block_content>
	    <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>resolv_files</name></name> <operator>&amp;&amp;</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NO_POLL</name></expr></argument>)</argument_list></call></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><call><name>reload_servers</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>resolv_files</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>check</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	      </block_content>}</block></if></if_stmt>

	    <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>servers_file</name></name></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><call><name>read_servers_file</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>check</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	      </block_content>}</block></if></if_stmt>

	    <if_stmt><if>if <condition>(<expr><name>check</name></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><call><name>check_servers</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP</name></cpp:ifdef>
	<expr_stmt><expr><call><name>rerun_scripts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<break>break;</break>
	
      <case>case <expr><name>EVENT_DUMP</name></expr>:</case>
	<if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>port</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>dump_cache</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<break>break;</break>
	
      <case>case <expr><name>EVENT_ALARM</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp</name></name> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>doing_dhcp6</name></name></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><call><name>lease_prune</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>lease_update_file</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
	<if type="elseif">else if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>doing_ra</name></name></expr>)</condition><block type="pseudo"><block_content>
	  <comment type="block">/* Not doing DHCP, so no lease system, manage alarms for ra only */</comment>
	    <expr_stmt><expr><call><name>send_alarm</name><argument_list>(<argument><expr><call><name>periodic_ra</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<break>break;</break>
		
      <case>case <expr><name>EVENT_CHILD</name></expr>:</case>
	<comment type="block">/* See Stevens 5.10 */</comment>
	<while>while <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>waitpid</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>WNOHANG</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
		<break>break;</break></block_content></block></if></if_stmt>
	    </block_content>}</block></if>      
	  <else>else<block type="pseudo"><block_content> 
	    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PROCS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>tcp_pids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>p</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>tcp_pids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></else></if_stmt></block_content></block></while>
	<break>break;</break>
	
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SCRIPT</name></expr></argument>)</argument_list></call></expr></cpp:if>	
      <case>case <expr><name>EVENT_KILLED</name></expr>:</case>
	<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"script process killed by signal %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ev</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>

      <case>case <expr><name>EVENT_EXITED</name></expr>:</case>
	<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"script process exited with status %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ev</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>

      <case>case <expr><name>EVENT_EXEC_ERR</name></expr>:</case>
	<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to execute %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, 
		  <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>lease_change_command</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name><name>ev</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>

      <case>case <expr><name>EVENT_SCRIPT_LOG</name></expr>:</case>
	<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_SCRIPT</name> <operator>|</operator> <name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>msg</name></expr> ?</condition><then> <expr><name>msg</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>msg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<break>break;</break>

	<comment type="block">/* necessary for fatal errors in helper */</comment>
      <case>case <expr><name>EVENT_USER_ERR</name></expr>:</case>
      <case>case <expr><name>EVENT_DIE</name></expr>:</case>
      <case>case <expr><name>EVENT_LUA_ERR</name></expr>:</case>
	<expr_stmt><expr><call><name>fatal_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

      <case>case <expr><name>EVENT_REOPEN</name></expr>:</case>
	<comment type="block">/* Note: this may leave TCP-handling processes with the old file still open.
	   Since any such process will die in CHILD_LIFETIME or probably much sooner,
	   we leave them logging to the old file. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>log_file</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>log_reopen</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>log_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<break>break;</break>

      <case>case <expr><name>EVENT_NEWADDR</name></expr>:</case>
	<expr_stmt><expr><call><name>newaddress</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>

      <case>case <expr><name>EVENT_NEWROUTE</name></expr>:</case>
	<expr_stmt><expr><call><name>resend_query</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Force re-reading resolv file right now, for luck. */</comment>
	<expr_stmt><expr><call><name>poll_resolv</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>

      <case>case <expr><name>EVENT_TIME</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>dnssec_no_time_check</name></name> <operator>&amp;&amp;</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DNSSEC_VALID</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DNSSEC_TIME</name></expr></argument>)</argument_list></call></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"now checking DNSSEC signature timestamps"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>dnssec_no_time_check</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>clear_cache_and_reload</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<break>break;</break>
	
      <case>case <expr><name>EVENT_TERM</name></expr>:</case>
	<comment type="block">/* Knock all our children on the head. */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PROCS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>tcp_pids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>tcp_pids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>SIGALRM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
	
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SCRIPT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DHCP</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<comment type="block">/* handle pending lease transitions */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>helperfd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	  <block>{<block_content>
	    <comment type="block">/* block in writes until all done */</comment>
	    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>helperfd</name></name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	      <while>while<condition>(<expr><call><name>retry_send</name><argument_list>(<argument><expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>helperfd</name></name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>i</name> <operator>&amp;</operator> <operator>~</operator><name>O_NONBLOCK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while></block_content></block></if></if_stmt>
	    <do>do <block>{<block_content>
	      <expr_stmt><expr><call><name>helper_write</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block> while <condition>(<expr><operator>!</operator><call><name>helper_buf_empty</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>do_script_run</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
	    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>helperfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	
	<if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>lease_stream</name></name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>lease_stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
	<comment type="block">/* update timestamp file on TERM if time is considered valid */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>back_to_the_future</name></name></expr>)</condition>
	  <block>{<block_content>
	     <if_stmt><if>if <condition>(<expr><call><name>utimes</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>timestamp_file</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to update mtime on %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>timestamp_file</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>runfile</name></name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>runfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DUMPFILE</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>dumpfd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dumpfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	
	<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"exiting on receipt of SIGTERM"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>flush_log</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<comment type="block" format="doxygen">/*** Pi-hole modification ***/</comment>
<comment type="line">//	exit(EC_GOOD);</comment>
	<expr_stmt><expr><name>terminate</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<comment type="block" format="doxygen">/*** Pi-hole modification ***/</comment>
      </block_content>}</block></switch></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>poll_resolv</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>do_reload</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>resolvc</name></name> <modifier>*</modifier></type><name>res</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>latest</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>statbuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>time_t</name></type> <name>last_change</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <comment type="block">/* There may be more than one possible file. 
     Go through and find the one which changed _last_.
     Warn of any which can't be read. */</comment>

  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>port</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NO_POLL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>
  
  <for>for <control>(<init><expr><name>latest</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator> <expr><name>res</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>resolv_files</name></name></expr>;</init> <condition><expr><name>res</name></expr>;</condition> <incr><expr><name>res</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
      <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>force</name></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
	    <continue>continue;</continue>
	  </block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>res</name><operator>-&gt;</operator><name>logged</name></name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to access %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>logged</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>mtime</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	  <block>{<block_content> 
	    <comment type="block">/* existing file evaporated, force selection of the latest
	       file even if its mtime hasn't changed since we last looked */</comment>
	    <expr_stmt><expr><call><name>poll_resolv</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>do_reload</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <return>return;</return>
	  </block_content>}</block></if></if_stmt>
      </block_content>}</block></if>
    <else>else
      <block>{<block_content>
	<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>logged</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>force</name> <operator>||</operator> <operator>(</operator><name><name>statbuf</name><operator>.</operator><name>st_mtime</name></name> <operator>!=</operator> <name><name>res</name><operator>-&gt;</operator><name>mtime</name></name> <operator>||</operator> <name><name>statbuf</name><operator>.</operator><name>st_ino</name></name> <operator>!=</operator> <name><name>res</name><operator>-&gt;</operator><name>ino</name></name><operator>)</operator></expr>)</condition>
          <block>{<block_content>
            <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <name><name>statbuf</name><operator>.</operator><name>st_mtime</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>ino</name></name> <operator>=</operator> <name><name>statbuf</name><operator>.</operator><name>st_ino</name></name></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><call><name>difftime</name><argument_list>(<argument><expr><name><name>statbuf</name><operator>.</operator><name>st_mtime</name></name></expr></argument>, <argument><expr><name>last_change</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0.0</literal></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name>last_change</name> <operator>=</operator> <name><name>statbuf</name><operator>.</operator><name>st_mtime</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>latest</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>
	      </block_content>}</block></if></if_stmt>
	  </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt></block_content></block></for>
  
  <if_stmt><if>if <condition>(<expr><name>latest</name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>warned</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>reload_servers</name><argument_list>(<argument><expr><name><name>latest</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"reading %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>latest</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>warned</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>check_servers</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_RELOAD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>do_reload</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>clear_cache_and_reload</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
      <else>else 
	<block>{<block_content>
	  <comment type="block">/* If we're delaying things, we don't call check_servers(), but 
	     reload_servers() may have deleted some servers, rendering the server_array
	     invalid, so just rebuild that here. Once reload_servers() succeeds,
	     we call check_servers() above, which calls build_server_array itself. */</comment>
	  <expr_stmt><expr><call><name>build_server_array</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>latest</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>warned</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"no servers found in %s, will retry"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>latest</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name>warned</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>       

<function><type><name>void</name></type> <name>clear_cache_and_reload</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>now</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>FTL_dnsmasq_reload</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>port</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>cache_reload</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp</name></name> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>doing_dhcp6</name></name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_ETHERS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>dhcp_read_ethers</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>reread_dhcp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>dhcp_update_configs</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_conf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>lease_update_from_configs</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
      <expr_stmt><expr><call><name>lease_update_file</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <expr_stmt><expr><call><name>lease_update_dns</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
  <if type="elseif">else if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>doing_ra</name></name></expr>)</condition><block type="pseudo"><block_content>
    <comment type="block">/* Not doing DHCP, so no lease system, manage 
       alarms for ra only */</comment>
    <expr_stmt><expr><call><name>send_alarm</name><argument_list>(<argument><expr><call><name>periodic_ra</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_dns_listeners</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>serverfd</name></name> <modifier>*</modifier></type><name>serverfdp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>listener</name></name> <modifier>*</modifier></type><name>listener</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>randfd_list</name></name> <modifier>*</modifier></type><name>rfl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_TFTP</name></cpp:ifdef>
  <decl_stmt><decl><type><name>int</name></type>  <name>tftp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>tftp_transfer</name></name> <modifier>*</modifier></type><name>transfer</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_SINGLE_PORT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>transfer</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>tftp_trans</name></name></expr>;</init> <condition><expr><name>transfer</name></expr>;</condition> <incr><expr><name>transfer</name> <operator>=</operator> <name><name>transfer</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
      <block>{<block_content>
	<expr_stmt><expr><name>tftp</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>poll_listen</name><argument_list>(<argument><expr><name><name>transfer</name><operator>-&gt;</operator><name>sockfd</name></name></expr></argument>, <argument><expr><name>POLLIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
  <for>for <control>(<init><expr><name>serverfdp</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>sfds</name></name></expr>;</init> <condition><expr><name>serverfdp</name></expr>;</condition> <incr><expr><name>serverfdp</name> <operator>=</operator> <name><name>serverfdp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>poll_listen</name><argument_list>(<argument><expr><name><name>serverfdp</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>POLLIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>numrrand</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>randomsocks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>refcount</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>poll_listen</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>randomsocks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><name>POLLIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

  <comment type="block">/* Check overflow random sockets too. */</comment>
  <for>for <control>(<init><expr><name>rfl</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>rfl_poll</name></name></expr>;</init> <condition><expr><name>rfl</name></expr>;</condition> <incr><expr><name>rfl</name> <operator>=</operator> <name><name>rfl</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>poll_listen</name><argument_list>(<argument><expr><name><name>rfl</name><operator>-&gt;</operator><name>rfd</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>POLLIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  
  <comment type="block">/* check to see if we have free tcp process slots. */</comment>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>MAX_PROCS</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>tcp_pids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>tcp_pipes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
      <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

  <for>for <control>(<init><expr><name>listener</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>listeners</name></name></expr>;</init> <condition><expr><name>listener</name></expr>;</condition> <incr><expr><name>listener</name> <operator>=</operator> <name><name>listener</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>listener</name><operator>-&gt;</operator><name>fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>poll_listen</name><argument_list>(<argument><expr><name><name>listener</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>POLLIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <comment type="block">/* Only listen for TCP connections when a process slot
	 is available. Death of a child goes through the select loop, so
	 we don't need to explicitly arrange to wake up here,
	 we'll be called again when a slot becomes available. */</comment>
      <if_stmt><if>if  <condition>(<expr><name><name>listener</name><operator>-&gt;</operator><name>tcpfd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>poll_listen</name><argument_list>(<argument><expr><name><name>listener</name><operator>-&gt;</operator><name>tcpfd</name></name></expr></argument>, <argument><expr><name>POLLIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_TFTP</name></cpp:ifdef>
      <comment type="block">/* tftp == 0 in single-port mode. */</comment>
      <if_stmt><if>if <condition>(<expr><name>tftp</name> <operator>&lt;=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>tftp_max</name></name> <operator>&amp;&amp;</operator> <name><name>listener</name><operator>-&gt;</operator><name>tftpfd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>poll_listen</name><argument_list>(<argument><expr><name><name>listener</name><operator>-&gt;</operator><name>tftpfd</name></name></expr></argument>, <argument><expr><name>POLLIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></for>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DEBUG</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PROCS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>tcp_pipes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>poll_listen</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>tcp_pipes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>POLLIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_dns_listeners</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>serverfd</name></name> <modifier>*</modifier></type><name>serverfdp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>listener</name></name> <modifier>*</modifier></type><name>listener</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>randfd_list</name></name> <modifier>*</modifier></type><name>rfl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name><name>pipefd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
  
  <for>for <control>(<init><expr><name>serverfdp</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>sfds</name></name></expr>;</init> <condition><expr><name>serverfdp</name></expr>;</condition> <incr><expr><name>serverfdp</name> <operator>=</operator> <name><name>serverfdp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><call><name>poll_check</name><argument_list>(<argument><expr><name><name>serverfdp</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>POLLIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>reply_query</name><argument_list>(<argument><expr><name><name>serverfdp</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
  
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>numrrand</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>randomsocks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>refcount</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> 
	<call><name>poll_check</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>randomsocks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><name>POLLIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>reply_query</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>randomsocks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

  <comment type="block">/* Check overflow random sockets too. */</comment>
  <for>for <control>(<init><expr><name>rfl</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>rfl_poll</name></name></expr>;</init> <condition><expr><name>rfl</name></expr>;</condition> <incr><expr><name>rfl</name> <operator>=</operator> <name><name>rfl</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><call><name>poll_check</name><argument_list>(<argument><expr><name><name>rfl</name><operator>-&gt;</operator><name>rfd</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>POLLIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>reply_query</name><argument_list>(<argument><expr><name><name>rfl</name><operator>-&gt;</operator><name>rfd</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

  <comment type="block">/* Races. The child process can die before we read all of the data from the
     pipe, or vice versa. Therefore send tcp_pids to zero when we wait() the 
     process, and tcp_pipes to -1 and close the FD when we read the last
     of the data - indicated by cache_recv_insert returning zero.
     The order of these events is indeterminate, and both are needed
     to free the process slot. Once the child process has gone, poll()
     returns POLLHUP, not POLLIN, so have to check for both here. */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DEBUG</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PROCS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>tcp_pipes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
	  <call><name>poll_check</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>tcp_pipes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>POLLIN</name> <operator>|</operator> <name>POLLHUP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	  <operator>!</operator><call><name>cache_recv_insert</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>tcp_pipes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>tcp_pipes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>tcp_pipes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>	
	</block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
	
  <for>for <control>(<init><expr><name>listener</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>listeners</name></name></expr>;</init> <condition><expr><name>listener</name></expr>;</condition> <incr><expr><name>listener</name> <operator>=</operator> <name><name>listener</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>

      <if_stmt><if>if <condition>(<expr><name><name>listener</name><operator>-&gt;</operator><name>fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>poll_check</name><argument_list>(<argument><expr><name><name>listener</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>POLLIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>receive_query</name><argument_list>(<argument><expr><name>listener</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
      
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_TFTP</name></cpp:ifdef>     
      <if_stmt><if>if <condition>(<expr><name><name>listener</name><operator>-&gt;</operator><name>tftpfd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>poll_check</name><argument_list>(<argument><expr><name><name>listener</name><operator>-&gt;</operator><name>tftpfd</name></name></expr></argument>, <argument><expr><name>POLLIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>tftp_request</name><argument_list>(<argument><expr><name>listener</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

      <comment type="block">/* check to see if we have a free tcp process slot.
	 Note that we can't assume that because we had
	 at least one a poll() time, that we still do.
	 There may be more waiting connections after
	 poll() returns then free process slots. */</comment>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>MAX_PROCS</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>tcp_pids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>tcp_pipes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	  <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

      <if_stmt><if>if <condition>(<expr><name><name>listener</name><operator>-&gt;</operator><name>tcpfd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>poll_check</name><argument_list>(<argument><expr><name><name>listener</name><operator>-&gt;</operator><name>tcpfd</name></name></expr></argument>, <argument><expr><name>POLLIN</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>int</name></type> <name>confd</name></decl>, <decl><type ref="prev"/><name>client_ok</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name><name>struct</name> <name>irec</name></name> <modifier>*</modifier></type><name>iface</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>pid_t</name></type> <name>p</name></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name><name>union</name> <name>mysockaddr</name></name></type> <name>tcp_addr</name></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>socklen_t</name></type> <name>tcp_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr>union <name>mysockaddr</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

	  <while>while <condition>(<expr><operator>(</operator><name>confd</name> <operator>=</operator> <call><name>accept</name><argument_list>(<argument><expr><name><name>listener</name><operator>-&gt;</operator><name>tcpfd</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
	  
	  <if_stmt><if>if <condition>(<expr><name>confd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	    <continue>continue;</continue></block_content></block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><call><name>getsockname</name><argument_list>(<argument><expr><name>confd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>tcp_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tcp_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>confd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <continue>continue;</continue>
	    </block_content>}</block></if></if_stmt>
	  
	  <comment type="block">/* Make sure that the interface list is up-to-date.
	     
	     We do this here as we may need the results below, and
	     the DNS code needs them for --interface-name stuff.

	     Multiple calls to enumerate_interfaces() per select loop are
	     inhibited, so calls to it in the child process (which doesn't select())
	     have no effect. This avoids two processes reading from the same
	     netlink fd and screwing the pooch entirely.
	  */</comment>
 
	  <expr_stmt><expr><call><name>enumerate_interfaces</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NOWILD</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>iface</name> <operator>=</operator> <name><name>listener</name><operator>-&gt;</operator><name>iface</name></name></expr>;</expr_stmt></block_content></block></if> <comment type="block">/* May be NULL */</comment>
	  <else>else 
	    <block>{<block_content>
	      <decl_stmt><decl><type><name>int</name></type> <name>if_index</name></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name>char</name></type> <name><name>intr_name</name><index>[<expr><name>IF_NAMESIZE</name></expr>]</index></name></decl>;</decl_stmt>
	      
	      <comment type="block">/* if we can find the arrival interface, check it's one that's allowed */</comment>
	      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>if_index</name> <operator>=</operator> <call><name>tcp_interface</name><argument_list>(<argument><expr><name>confd</name></expr></argument>, <argument><expr><name><name>tcp_addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
		  <call><name>indextoname</name><argument_list>(<argument><expr><name><name>listener</name><operator>-&gt;</operator><name>tcpfd</name></name></expr></argument>, <argument><expr><name>if_index</name></expr></argument>, <argument><expr><name>intr_name</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
		  <decl_stmt><decl><type><name><name>union</name> <name>all_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>
		  
		  <if_stmt><if>if <condition>(<expr><name><name>tcp_addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>addr6</name></name> <operator>=</operator> <name><name>tcp_addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr>;</expr_stmt></block_content></block></if>
		  <else>else<block type="pseudo"><block_content>
		    <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>addr4</name></name> <operator>=</operator> <name><name>tcp_addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		  
		  <for>for <control>(<init><expr><name>iface</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>interfaces</name></name></expr>;</init> <condition><expr><name>iface</name></expr>;</condition> <incr><expr><name>iface</name> <operator>=</operator> <name><name>iface</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		    <if_stmt><if>if <condition>(<expr><name><name>iface</name><operator>-&gt;</operator><name>index</name></name> <operator>==</operator> <name>if_index</name> <operator>&amp;&amp;</operator>
		        <name><name>iface</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name><name>tcp_addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name></expr>)</condition><block type="pseudo"><block_content>
		      <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
		  
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>iface</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>loopback_exception</name><argument_list>(<argument><expr><name><name>listener</name><operator>-&gt;</operator><name>tcpfd</name></name></expr></argument>, <argument><expr><name><name>tcp_addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>intr_name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name>client_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CLEVERBIND</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>iface</name> <operator>=</operator> <name><name>listener</name><operator>-&gt;</operator><name>iface</name></name></expr>;</expr_stmt></block_content></block></if> <comment type="block">/* May be NULL */</comment>
	      <else>else
		<block>{<block_content>
		  <comment type="block">/* Check for allowed interfaces when binding the wildcard address:
		     we do this by looking for an interface with the same address as 
		     the local address of the TCP connection, then looking to see if that's
		     an allowed interface. As a side effect, we get the netmask of the
		     interface too, for localisation. */</comment>
		  
		  <for>for <control>(<init><expr><name>iface</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>interfaces</name></name></expr>;</init> <condition><expr><name>iface</name></expr>;</condition> <incr><expr><name>iface</name> <operator>=</operator> <name><name>iface</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		    <if_stmt><if>if <condition>(<expr><call><name>sockaddr_isequal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iface</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tcp_addr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		      <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
		  
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>iface</name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name>client_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	    </block_content>}</block></else></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>client_ok</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>shutdown</name><argument_list>(<argument><expr><name>confd</name></expr></argument>, <argument><expr><name>SHUT_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>confd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if>
	  <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DEBUG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>pipe</name><argument_list>(<argument><expr><name>pipefd</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>p</name> <operator>=</operator> <call><name>fork</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pipefd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* parent needs read pipe end. */</comment>
	      <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pipefd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	      <else>else
		<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LINUX_NETWORK</name></cpp:ifdef>
		  <comment type="block">/* The child process inherits the netlink socket, 
		     which it never uses, but when the parent (us) 
		     uses it in the future, the answer may go to the 
		     child, resulting in the parent blocking
		     forever awaiting the result. To avoid this
		     the child closes the netlink socket, but there's
		     a nasty race, since the parent may use netlink
		     before the child has done the close.
		     
		     To avoid this, the parent blocks here until a 
		     single byte comes back up the pipe, which
		     is sent by the child after it has closed the
		     netlink socket. */</comment>
		  
		  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>a</name></decl>;</decl_stmt>
		  <expr_stmt><expr><call><name>read_write</name><argument_list>(<argument><expr><name><name>pipefd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		  <comment type="block">/* i holds index of free slot */</comment>
		  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>tcp_pids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>tcp_pipes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pipefd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	      <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>confd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	      <comment type="block">/* The child can use up to TCP_MAX_QUERIES ids, so skip that many. */</comment>
	      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>log_id</name></name> <operator>+=</operator> <name>TCP_MAX_QUERIES</name></expr>;</expr_stmt>
	    </block_content>}</block></if>
	  <else>else
	    <block>{<block_content>
	      <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buff</name></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt> 
	      <decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>netmask</name></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name>int</name></type> <name>auth_dns</name></decl>;</decl_stmt>
	   
	      <if_stmt><if>if <condition>(<expr><name>iface</name></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name>netmask</name> <operator>=</operator> <name><name>iface</name><operator>-&gt;</operator><name>netmask</name></name></expr>;</expr_stmt>
		  <expr_stmt><expr><name>auth_dns</name> <operator>=</operator> <name><name>iface</name><operator>-&gt;</operator><name>dns_auth</name></name></expr>;</expr_stmt>
		</block_content>}</block></if>
	      <else>else
		<block>{<block_content>
		  <expr_stmt><expr><name><name>netmask</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		  <expr_stmt><expr><name>auth_dns</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

	      <comment type="block">/* Arrange for SIGALRM after CHILD_LIFETIME seconds to
		 terminate the process. */</comment>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DEBUG</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LINUX_NETWORK</name></cpp:ifdef>
		  <comment type="block">/* See comment above re: netlink socket. */</comment>
		  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		  <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>netlinkfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>read_write</name><argument_list>(<argument><expr><name><name>pipefd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>		  
		  <expr_stmt><expr><call><name>alarm</name><argument_list>(<argument><expr><name>CHILD_LIFETIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pipefd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* close read end in child. */</comment>
		  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>pipe_to_parent</name></name> <operator>=</operator> <name><name>pipefd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

	      <comment type="block">/* start with no upstream connections. */</comment>
	      <for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>servers</name></name></expr>;</init> <condition><expr><name>s</name></expr>;</condition> <incr><expr><name>s</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		 <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tcpfd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for> 
	      
	      <comment type="block">/* The connected socket inherits non-blocking
		 attribute from the listening socket. 
		 Reset that here. */</comment>
	      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><name>confd</name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<while>while<condition>(<expr><call><name>retry_send</name><argument_list>(<argument><expr><call><name>fcntl</name><argument_list>(<argument><expr><name>confd</name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>O_NONBLOCK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while></block_content></block></if></if_stmt>
	      
	      <comment type="block" format="doxygen">/************ Pi-hole modification ************/</comment>
	      <expr_stmt><expr><call><name>FTL_TCP_worker_created</name><argument_list>(<argument><expr><name>confd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <comment type="line">// Store interface this fork is handling exclusively</comment>
	      <expr_stmt><expr><call><name>FTL_iface</name><argument_list>(<argument><expr><name>iface</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <comment type="block" format="doxygen">/**********************************************/</comment>

	      <expr_stmt><expr><name>buff</name> <operator>=</operator> <call><name>tcp_request</name><argument_list>(<argument><expr><name>confd</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tcp_addr</name></expr></argument>, <argument><expr><name>netmask</name></expr></argument>, <argument><expr><name>auth_dns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	       
	      <comment type="block" format="doxygen">/************ Pi-hole modification ************/</comment>
	      <expr_stmt><expr><call><name>FTL_TCP_worker_terminating</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <comment type="block" format="doxygen">/**********************************************/</comment>

	      <if_stmt><if>if <condition>(<expr><name>buff</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      
	      <for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>servers</name></name></expr>;</init> <condition><expr><name>s</name></expr>;</condition> <incr><expr><name>s</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>tcpfd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><call><name>shutdown</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tcpfd</name></name></expr></argument>, <argument><expr><name>SHUT_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tcpfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  </block_content>}</block></if></if_stmt></block_content></block></for>
	      
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DEBUG</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>pipe_to_parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>flush_log</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP</name></cpp:ifdef>
<function><type><name>int</name></type> <name>make_icmp_sock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>zeroopt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>socket</name> <argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>SOCK_RAW</name></expr></argument>, <argument><expr><name>IPPROTO_ICMP</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fix_fd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>||</operator>
	  <call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_DONTROUTE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zeroopt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zeroopt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

  <return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>icmp_ping</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Try and get an ICMP echo from a machine. */</comment>

  <decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>saddr</name></decl>;</decl_stmt>
  <struct>struct <block>{ 
    <decl_stmt><decl><type><name><name>struct</name> <name>ip</name></name></type> <name>ip</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>icmp</name></name></type> <name>icmp</name></decl>;</decl_stmt>
  }</block> <decl><name>packet</name></decl>;</struct>
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>id</name> <init>= <expr><call><name>rand16</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>gotreply</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_NETWORK</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>HAVE_SOLARIS_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>make_icmp_sock</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>int</name></type> <name>opt</name> <init>= <expr><literal type="number">2000</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>fd</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_icmp_fd</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_RCVBUF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name><name>saddr</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>saddr</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>saddr</name><operator>.</operator><name>sin_addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SOCKADDR_SA_LEN</name></cpp:ifdef>
  <expr_stmt><expr><name><name>saddr</name><operator>.</operator><name>sin_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>packet</name><operator>.</operator><name>icmp</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>packet</name><operator>.</operator><name>icmp</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>packet</name><operator>.</operator><name>icmp</name><operator>.</operator><name>icmp_type</name></name> <operator>=</operator> <name>ICMP_ECHO</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>packet</name><operator>.</operator><name>icmp</name><operator>.</operator><name>icmp_id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>icmp</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>j</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>u16</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>packet</name><operator>.</operator><name>icmp</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt></block_content></block></for>
  <while>while <condition>(<expr><name>j</name><operator>&gt;&gt;</operator><literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>j</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></while>  
  <expr_stmt><expr><name><name>packet</name><operator>.</operator><name>icmp</name><operator>.</operator><name>icmp_cksum</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>j</name> <operator>==</operator> <literal type="number">0xffff</literal><operator>)</operator></expr> ?</condition><then> <expr><name>j</name></expr> </then><else>: <expr><operator>~</operator><name>j</name></expr></else></ternary></expr>;</expr_stmt>
  
  <while>while <condition>(<expr><call><name>retry_send</name><argument_list>(<argument><expr><call><name>sendto</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>packet</name><operator>.</operator><name>icmp</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>icmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, 
			   <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>saddr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>saddr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
  
  <expr_stmt><expr><name>gotreply</name> <operator>=</operator> <call><name>delay_dhcp</name><argument_list>(<argument><expr><call><name>dnsmasq_time</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PING_WAIT</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_NETWORK</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SOLARIS_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name>opt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_RCVBUF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><name>gotreply</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>delay_dhcp</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Delay processing DHCP packets for "sec" seconds counting from "start".
     If "fd" is not -1 it will stop waiting if an ICMP echo reply is received
     from "addr" with ICMP ID "id" and return 1 */</comment>

  <comment type="block">/* Note that whilst waiting, we check for
     (and service) events on the DNS and TFTP  sockets, (so doing that
     better not use any resources our caller has in use...)
     but we remain deaf to signals or further DHCP packets. */</comment>

  <comment type="block">/* There can be a problem using dnsmasq_time() to end the loop, since
     it's not monotonic, and can go backwards if the system clock is
     tweaked, leading to the code getting stuck in this loop and
     ignoring DHCP requests. To fix this, we check to see if select returned
     as a result of a timeout rather than a socket becoming available. We
     only allow this to happen as many times as it takes to get to the wait time
     in quarter-second chunks. This provides a fallback way to end loop. */</comment>

  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>, <decl><type ref="prev"/><name>timeout_count</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>time_t</name></type> <name>now</name></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>now</name> <operator>=</operator> <call><name>dnsmasq_time</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><name>timeout_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>
       <condition><expr><operator>(</operator><call><name>difftime</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>sec</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>timeout_count</name> <operator>&lt;</operator> <name>sec</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr>;</condition><incr/>)</control>
    <block>{<block_content>
      <expr_stmt><expr><call><name>poll_reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>poll_listen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>POLLIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>set_dns_listeners</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>set_log_writer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>doing_ra</name></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>poll_listen</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>icmp6fd</name></name></expr></argument>, <argument><expr><name>POLLIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>do_poll</name><argument_list>(<argument><expr><literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>timeout_count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>dnsmasq_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      
      <expr_stmt><expr><call><name>check_log_writer</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>check_dns_listeners</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>doing_ra</name></name> <operator>&amp;&amp;</operator> <call><name>poll_check</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>icmp6fd</name></name></expr></argument>, <argument><expr><name>POLLIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>icmp6_packet</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_TFTP</name></cpp:ifdef>
      <expr_stmt><expr><call><name>check_tftp_listeners</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

      <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>
          <struct>struct <block>{
            <decl_stmt><decl><type><name><name>struct</name> <name>ip</name></name></type> <name>ip</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>struct</name> <name>icmp</name></name></type> <name>icmp</name></decl>;</decl_stmt>
          }</block> <decl><name>packet</name></decl>;</struct>
          <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>faddr</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>socklen_t</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>faddr</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	  
          <if_stmt><if>if <condition>(<expr><call><name>poll_check</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>POLLIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	      <call><name>recvfrom</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>faddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator>
	      <name>addr</name> <operator>==</operator> <name><name>faddr</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>&amp;&amp;</operator>
	      <name><name>packet</name><operator>.</operator><name>icmp</name><operator>.</operator><name>icmp_type</name></name> <operator>==</operator> <name>ICMP_ECHOREPLY</name> <operator>&amp;&amp;</operator>
	      <name><name>packet</name><operator>.</operator><name>icmp</name><operator>.</operator><name>icmp_seq</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
	      <name><name>packet</name><operator>.</operator><name>icmp</name><operator>.</operator><name>icmp_id</name></name> <operator>==</operator> <name>id</name></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_DHCP */</comment>

<comment type="block" format="doxygen">/******************************** Pi-hole modification ********************************/</comment>
<function><type><name>void</name></type> <name>print_dnsmasq_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"****************************** dnsmasq ******************************\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Version:         %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Compile options: %s\n\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>compile_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block" format="doxygen">/**************************************************************************************/</comment>
</unit>
