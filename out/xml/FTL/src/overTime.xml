<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/overTime.c"><comment type="block">/* Pi-hole: A black hole for Internet advertisements
*  (c) 2017 Pi-hole, LLC (https://pi-hole.net)
*  Network-wide ad blocking via your own hardware.
*
*  FTL Engine
*  MessagePack serialization
*
*  This file is copyright under the latest version of the EUPL.
*  Please see LICENSE file for your rights under this license. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FTL.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"overTime.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>
<comment type="line">// data getter functions</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"datastructure.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>overTimeData</name> <modifier>*</modifier></type><name>overTime</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * Initialize the overTime slot
 *
 * @param index The overTime slot index
 * @param timestamp The timestamp of the slot
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>initSlot</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>time_t</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Possible debug printing</comment>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_OVERTIME</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type> <name><name>timestr</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>strftime</name><argument_list>(<argument><expr><name>timestr</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"%Y-%m-%d %H:%M:%S"</literal></expr></argument>, <argument><expr><call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timestamp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"initSlot(%u, %llu): Zeroing overTime slot at %s"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>timestamp</name></expr></argument>, <argument><expr><name>timestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Initialize overTime entry</comment>
	<expr_stmt><expr><name><name>overTime</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>magic</name> <operator>=</operator> <name>MAGICBYTE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>overTime</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>timestamp</name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>overTime</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>total</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>overTime</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>blocked</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>overTime</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>cached</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>overTime</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>forwarded</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="line">// Zero overTime counter for all known clients</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>clientID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>clientID</name> <operator>&lt;</operator> <name><name>counters</name><operator>-&gt;</operator><name>clients</name></name></expr>;</condition> <incr><expr><name>clientID</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="line">// Get client pointer</comment>
		<decl_stmt><decl><type><name>clientsData</name><modifier>*</modifier></type> <name>client</name> <init>= <expr><call><name>getClient</name><argument_list>(<argument><expr><name>clientID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>client</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Set overTime data to zero</comment>
			<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>overTime</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="line">// Zero overTime counter for all known upstream destinations</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>upstreamID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>upstreamID</name> <operator>&lt;</operator> <name><name>counters</name><operator>-&gt;</operator><name>upstreams</name></name></expr>;</condition> <incr><expr><name>upstreamID</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="line">// Get client pointer</comment>
		<decl_stmt><decl><type><name>upstreamsData</name><modifier>*</modifier></type> <name>upstream</name> <init>= <expr><call><name>getUpstream</name><argument_list>(<argument><expr><name>upstreamID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>upstream</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Set overTime data to zero</comment>
			<expr_stmt><expr><name><name>upstream</name><operator>-&gt;</operator><name>overTime</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>initOverTime</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Get current timestamp</comment>
	<decl_stmt><decl><type><name>time_t</name></type> <name>now</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Get the centered timestamp of the end of the next garbage collection interval</comment>
	<comment type="line">// This is necessary to construct all slots until the point where we are moving</comment>
	<comment type="line">// the entire overTime structure into the future (i.e., generate "new" slots)</comment>
	<comment type="line">//                    Get beginning of       Advance to   Center this interval at</comment>
	<comment type="line">//                    previous GC interval   next GC int. 5 minutes less than full</comment>
	<comment type="line">//                    vvvvvvvvvvvvvvvvvvvvvv vvvvvvvvvvvv vvvvvvvvvvvvvvvvvvvvvvvvv</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>time_t</name></type> <name>newest</name> <init>= <expr><name>now</name> <operator>-</operator> <name>now</name> <operator>%</operator> <name>GCinterval</name> <operator>+</operator> <name>GCinterval</name> <operator>-</operator> <operator>(</operator><name>OVERTIME_INTERVAL</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
	<comment type="line">// Oldest timestamp is (OVERTIME_SLOTS-1) times the OVERTIME_INTERVAL in the past</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>time_t</name></type> <name>oldest</name> <init>= <expr><name>newest</name> <operator>-</operator> <operator>(</operator><name>OVERTIME_SLOTS</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>OVERTIME_INTERVAL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_OVERTIME</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type> <name><name>first</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>last</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>strftime</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"%Y-%m-%d %H:%M:%S"</literal></expr></argument>, <argument><expr><call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oldest</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>strftime</name><argument_list>(<argument><expr><name>last</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"%Y-%m-%d %H:%M:%S"</literal></expr></argument>, <argument><expr><call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newest</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"initOverTime(): Initializing %i slots from %s (%llu) to %s (%llu)"</literal></expr></argument>,
		     <argument><expr><name>OVERTIME_SLOTS</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>oldest</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>newest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Iterate over overTime</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>OVERTIME_SLOTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>time_t</name></type> <name>this_slot_ts</name> <init>= <expr><name>oldest</name> <operator>+</operator> <name>OVERTIME_INTERVAL</name> <operator>*</operator> <name>i</name></expr></init></decl>;</decl_stmt>
		<comment type="line">// Initialize overTime slot</comment>
		<expr_stmt><expr><call><name>initSlot</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>this_slot_ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<decl_stmt><decl><type><name>bool</name></type> <name>warned_about_hwclock</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<function><type><name>unsigned</name> <name>int</name></type> <name>_getOverTimeID</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Center timestamp in OVERTIME_INTERVAL</comment>
	<expr_stmt><expr><name>timestamp</name> <operator>-=</operator> <name>timestamp</name> <operator>%</operator> <name>OVERTIME_INTERVAL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>timestamp</name> <operator>+=</operator> <name>OVERTIME_INTERVAL</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

	<comment type="line">// Get timestamp of first interval</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>time_t</name></type> <name>firstTimestamp</name> <init>= <expr><name><name>overTime</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>timestamp</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// Compute overTime ID</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>id</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>timestamp</name> <operator>-</operator> <name>firstTimestamp</name><operator>)</operator> <operator>/</operator> <name>OVERTIME_INTERVAL</name><operator>)</operator></expr></init></decl>;</decl_stmt>

	<comment type="line">// Check bounds manually</comment>
	<if_stmt><if>if<condition>(<expr><name>id</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Return first timestamp in case negative timestamp was determined</comment>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><name>id</name> <operator>==</operator> <name>OVERTIME_SLOTS</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Possible race-collision (moving of the timeslots is just about to</comment>
		<comment type="line">// happen), silently add to the last bin because this is the correct</comment>
		<comment type="line">// thing to do</comment>
		<return>return <expr><name>OVERTIME_SLOTS</name><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><name>id</name> <operator>&gt;</operator> <name>OVERTIME_SLOTS</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// This is definitely wrong. We warn about this (but only once)</comment>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name>warned_about_hwclock</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name></type> <name><name>timestampStr</name><index>[<expr><literal type="number">84</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>get_timestr</name><argument_list>(<argument><expr><name>timestampStr</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><specifier>const</specifier> <name>time_t</name></type> <name>lastTimestamp</name> <init>= <expr><name><name>overTime</name><index>[<expr><name>OVERTIME_SLOTS</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>timestamp</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name></type> <name><name>lastTimestampStr</name><index>[<expr><literal type="number">84</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>get_timestr</name><argument_list>(<argument><expr><name>lastTimestampStr</name></expr></argument>, <argument><expr><name>lastTimestamp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"WARN: Found database entries in the future (%s (%llu), last timestamp for importing: %s (%llu)). "</literal>
			     <literal type="string">"Your over-time statistics may be incorrect (found in %s:%d)"</literal></expr></argument>,
			     <argument><expr><name>timestampStr</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>timestamp</name></expr></argument>,
			     <argument><expr><name>lastTimestampStr</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>lastTimestamp</name></expr></argument>,
			     <argument><expr><call><name>short_path</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>warned_about_hwclock</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="line">// Return last timestamp in case a too large timestamp was determined</comment>
		<return>return <expr><name>OVERTIME_SLOTS</name><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_OVERTIME</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Debug output</comment>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"getOverTimeID(%llu): %i"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>timestamp</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>id</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// This routine is called by garbage collection to rearrange the overTime structure for the next hour</comment>
<function><type><name>void</name></type> <name>moveOverTimeMemory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>time_t</name></type> <name>mintime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>time_t</name></type> <name>oldestOverTimeIS</name> <init>= <expr><name><name>overTime</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>timestamp</name></expr></init></decl>;</decl_stmt>
	<comment type="line">// Shift SHOULD timestamp into the future by the amount GC is running earlier</comment>
	<decl_stmt><decl><type><name>time_t</name></type> <name>oldestOverTimeSHOULD</name> <init>= <expr><name>mintime</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// Center in interval</comment>
	<expr_stmt><expr><name>oldestOverTimeSHOULD</name> <operator>-=</operator> <name>oldestOverTimeSHOULD</name> <operator>%</operator> <name>OVERTIME_INTERVAL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldestOverTimeSHOULD</name> <operator>+=</operator> <name>OVERTIME_INTERVAL</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

	<comment type="line">// Calculate the number of slots to be garbage collected, which is also the</comment>
	<comment type="line">// ID of the slot to move to the zero position</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>moveOverTime</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>oldestOverTimeSHOULD</name> <operator>-</operator> <name>oldestOverTimeIS</name><operator>)</operator> <operator>/</operator> <name>OVERTIME_INTERVAL</name><operator>)</operator></expr></init></decl>;</decl_stmt>

	<comment type="line">// The number of slots which will be moved (not garbage collected)</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>remainingSlots</name> <init>= <expr><name>OVERTIME_SLOTS</name> <operator>-</operator> <name>moveOverTime</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_OVERTIME</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"moveOverTimeMemory(): IS: %llu, SHOULD: %llu, MOVING: %u"</literal></expr></argument>,
		     <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>oldestOverTimeIS</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>oldestOverTimeSHOULD</name></expr></argument>, <argument><expr><name>moveOverTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Check if the move over amount is valid. This prevents errors if the</comment>
	<comment type="line">// function is called before GC is necessary.</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>moveOverTime</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>moveOverTime</name> <operator>&lt;</operator> <name>OVERTIME_SLOTS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// Move overTime memory</comment>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_OVERTIME</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"moveOverTimeMemory(): Moving overTime %u - %u to 0 - %u"</literal></expr></argument>,
			<argument><expr><name>moveOverTime</name></expr></argument>, <argument><expr><name>moveOverTime</name><operator>+</operator><name>remainingSlots</name></expr></argument>, <argument><expr><name>remainingSlots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Move overTime memory forward to update data structure</comment>
	<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>overTime</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name><name>overTime</name><index>[<expr><name>moveOverTime</name></expr>]</index></name></expr></argument>,
		<argument><expr><name>remainingSlots</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>overTime</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Correct time indices of queries. This is necessary because we just moved the slot this index points to</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>queryID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>queryID</name> <operator>&lt;</operator> <name><name>counters</name><operator>-&gt;</operator><name>queries</name></name></expr>;</condition> <incr><expr><name>queryID</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="line">// Get query pointer</comment>
		<decl_stmt><decl><type><name>queriesData</name><modifier>*</modifier></type> <name>query</name> <init>= <expr><call><name>getQuery</name><argument_list>(<argument><expr><name>queryID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>query</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="line">// Move client-specific overTime memory</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>clientID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>clientID</name> <operator>&lt;</operator> <name><name>counters</name><operator>-&gt;</operator><name>clients</name></name></expr>;</condition> <incr><expr><name>clientID</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>clientsData</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><call><name>getClient</name><argument_list>(<argument><expr><name>clientID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name>client</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>client</name><operator>-&gt;</operator><name>overTime</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>,
		        <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>client</name><operator>-&gt;</operator><name>overTime</name><index>[<expr><name>moveOverTime</name></expr>]</index></name><operator>)</operator></expr></argument>,
		        <argument><expr><name>remainingSlots</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>client</name><operator>-&gt;</operator><name>overTime</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">// Process upstream data</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>upstreamID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>upstreamID</name> <operator>&lt;</operator> <name><name>counters</name><operator>-&gt;</operator><name>upstreams</name></name></expr>;</condition> <incr><expr><name>upstreamID</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>upstreamsData</name> <modifier>*</modifier></type><name>upstream</name> <init>= <expr><call><name>getUpstream</name><argument_list>(<argument><expr><name>upstreamID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name>upstream</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// Move upstream-specific overTime memory</comment>
		<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>upstream</name><operator>-&gt;</operator><name>overTime</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>,
		        <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>upstream</name><operator>-&gt;</operator><name>overTime</name><index>[<expr><name>moveOverTime</name></expr>]</index></name><operator>)</operator></expr></argument>,
		        <argument><expr><name>remainingSlots</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>upstream</name><operator>-&gt;</operator><name>overTime</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">// Iterate over new overTime region and initialize it</comment>
	<for>for<control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>timeidx</name> <init>= <expr><name>remainingSlots</name></expr></init></decl>;</init> <condition><expr><name>timeidx</name> <operator>&lt;</operator> <name>OVERTIME_SLOTS</name></expr> ;</condition> <incr><expr><name>timeidx</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="line">// This slot is OVERTIME_INTERVAL seconds after the previous slot</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>time_t</name></type> <name>timestamp</name> <init>= <expr><name><name>overTime</name><index>[<expr><name>timeidx</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>timestamp</name> <operator>+</operator> <name>OVERTIME_INTERVAL</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>initSlot</name><argument_list>(<argument><expr><name>timeidx</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>
</unit>
