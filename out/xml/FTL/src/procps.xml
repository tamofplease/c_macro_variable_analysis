<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/procps.c"><comment type="block">/* Pi-hole: A black hole for Internet advertisements
*  (c) 2021 Pi-hole, LLC (https://pi-hole.net)
*  Network-wide ad blocking via your own hardware.
*
*  FTL Engine
*  /proc system subroutines
*
*  This file is copyright under the latest version of the EUPL.
*  Please see LICENSE file for your rights under this license. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FTL.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"procps.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dirent.h&gt;</cpp:file></cpp:include>
<comment type="line">// getpid()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROCESS_NAME</name></cpp:macro>   <cpp:value>"pihole-FTL"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>get_process_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pid_t</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>pid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"init"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Try to open comm file</comment>
	<decl_stmt><decl><type><name>char</name></type> <name><name>filename</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"/proc/%u/task/%u/comm"</literal></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">3</literal> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"/proc/%d/comm"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>f</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// Read name from opened file</comment>
	<if_stmt><if>if<condition>(<expr><call><name>fscanf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%15s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>get_process_ppid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pid_t</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>pid_t</name> <modifier>*</modifier></type><name>ppid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Try to open status file</comment>
	<decl_stmt><decl><type><name>char</name></type> <name><name>filename</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"/proc/%u/task/%u/status"</literal></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">3</literal> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"/proc/%d/status"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>f</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// Read comm from opened file</comment>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
	<while>while<condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"PPid: %d\n"</literal></expr></argument>, <argument><expr><name>ppid</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>get_process_creation_time</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pid_t</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name><name>timestr</name><index>[<expr><literal type="number">84</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Try to open comm file</comment>
	<decl_stmt><decl><type><name>char</name></type> <name><name>filename</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"/proc/%u/task/%u/comm"</literal></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">3</literal> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"/proc/%d/comm"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>get_timestr</name><argument_list>(<argument><expr><name>timestr</name></expr></argument>, <argument><expr><name><name>st</name><operator>.</operator><name>st_ctim</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>check_running_FTL</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dirPos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>pid_t</name></type> <name>ourselves</name> <init>= <expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>process_running</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// Open /proc</comment>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dirPos</name> <operator>=</operator> <call><name>opendir</name><argument_list>(<argument><expr><literal type="string">"/proc"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Failed to access /proc: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Loop over entries in /proc</comment>
	<comment type="line">// This is much more efficient than iterating over all possible PIDs</comment>
	<decl_stmt><decl><type><name>pid_t</name></type> <name>last_pid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>last_len</name> <init>= <expr><literal type="number">0u</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>readdir</name><argument_list>(<argument><expr><name>dirPos</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// We are only interested in subdirectories of /proc</comment>
		<if_stmt><if>if<condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>d_type</name></name> <operator>!=</operator> <name>DT_DIR</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<comment type="line">// We are only interested in PID subdirectories</comment>
		<if_stmt><if>if<condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>d_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="char">'0'</literal> <operator>||</operator> <name><name>entry</name><operator>-&gt;</operator><name>d_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// Extract PID</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>pid_t</name></type> <name>pid</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Skip our own process</comment>
		<if_stmt><if>if<condition>(<expr><name>pid</name> <operator>==</operator> <name>ourselves</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// Get process name</comment>
		<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>get_process_name</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// Only process this is this is our own process</comment>
		<if_stmt><if>if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>PROCESS_NAME</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// Get parent process ID (PPID)</comment>
		<decl_stmt><decl><type><name>pid_t</name></type> <name>ppid</name></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>get_process_ppid</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ppid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<decl_stmt><decl><type><name>char</name></type> <name><name>ppid_name</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>get_process_name</name><argument_list>(<argument><expr><name>ppid</name></expr></argument>, <argument><expr><name>ppid_name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<decl_stmt><decl><type><name>char</name></type> <name><name>timestr</name><index>[<expr><literal type="number">84</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>get_process_creation_time</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><name>timestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// If this is the first process we log, add a header</comment>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name>process_running</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>process_running</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"HINT: %s is already running!"</literal></expr></argument>, <argument><expr><name>PROCESS_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><name>last_pid</name> <operator>!=</operator> <name>ppid</name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Independent process, may be child of init/systemd</comment>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"%s (%d) ââ&gt; %s (PID %d, started %s)"</literal></expr></argument>,
			     <argument><expr><name>ppid_name</name></expr></argument>, <argument><expr><name>ppid</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>timestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>last_pid</name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>last_len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s (%d) ââ&gt; "</literal></expr></argument>, <argument><expr><name>ppid_name</name></expr></argument>, <argument><expr><name>ppid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="line">// Process parented by the one we analyzed before,</comment>
			<comment type="line">// highlight their relationship</comment>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"%*s ââ&gt; %s (PID %d, started %s)"</literal></expr></argument>,
			     <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>last_len</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>timestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>closedir</name><argument_list>(<argument><expr><name>dirPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>process_running</name></expr>;</return>
</block_content>}</block></function>
</unit>
