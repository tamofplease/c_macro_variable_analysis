<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/events.c"><comment type="block">/* Pi-hole: A black hole for Internet advertisements
*  (c) 2020 Pi-hole, LLC (https://pi-hole.net)
*  Network-wide ad blocking via your own hardware.
*
*  FTL Engine
*  Event queue processing routines
*
*  This file is copyright under the latest version of the EUPL.
*  Please see LICENSE file for your rights under this license. */</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FTL.h"</cpp:file></cpp:include>
<comment type="line">// public prototypes</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"events.h"</cpp:file></cpp:include>
<comment type="line">// atomic_flag_test_and_set()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>
<comment type="line">// struct config</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<comment type="line">// logg()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>

<comment type="line">// Private prototypes</comment>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>eventtext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>events</name></name></type> <name>event</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// Queue containing all possible events</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>atomic_flag</name></type> <name><name>eventqueue</name><index>[<expr><name>EVENTS_MAX</name></expr>]</index></name> <init>= <expr><block>{ <expr><name>ATOMIC_FLAG_INIT</name></expr> }</block></expr></init></decl>;</decl_stmt>

<comment type="line">// Set/Request event</comment>
<comment type="line">// We set the events atomically to ensure no race collisions can happen. If an</comment>
<comment type="line">// event has already been requested, this has no consequences as event cannot be</comment>
<comment type="line">// added multiple times</comment>
<function><type><name>void</name></type> <name>_set_event</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>events</name></name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>function</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>is_set</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<comment type="line">// Set eventqueue bit</comment>
	<if_stmt><if>if<condition>(<expr><call><name>atomic_flag_test_and_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eventqueue</name><index>[<expr><name>event</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>is_set</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Possible debug logging</comment>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_EVENTS</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Event %s -&gt; %s    called from %s() (%s:%i)"</literal></expr></argument>,
		     <argument><expr><call><name>eventtext</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></argument>,
		     <argument><expr><ternary><condition><expr><name>is_set</name></expr> ?</condition><then> <expr><literal type="string">"was ALREADY SET"</literal></expr> </then><else>: <expr><literal type="string">"now SET"</literal></expr></else></ternary></expr></argument>,
		     <argument><expr><name>function</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// Get and clear event</comment>
<comment type="line">// Unfortunately, we cannot read the value of an atomic_flag without setting it</comment>
<comment type="line">// either to true or false. This is by design. Hence, we implement testing by</comment>
<comment type="line">// first trying to set the the flag to true. If this "fails", we know the flag</comment>
<comment type="line">// has already been set.</comment>
<comment type="line">// On x86_64 and i686 CPUs, these atomic instrictions are implemented using the</comment>
<comment type="line">// XCHG asm instruction, which simply exchanges the content of two registers or,</comment>
<comment type="line">// in this case, a register and a memory location (the respective eventqueue</comment>
<comment type="line">// pointer). This is guaranteed to happen atomically by automatically</comment>
<comment type="line">// implementing the processor's locking protocol during the operation.</comment>
<comment type="line">// On other architecture, similar instructions are used to reassemble the same</comment>
<comment type="line">// effect (but typically with a few more instructions). ARM64, for instance,</comment>
<comment type="line">// uses LDAXRB (Load-aquire exclusive register byte) and STAXRB (Store-release</comment>
<comment type="line">// exclusive register byte) to implement the same thing with a few more</comment>
<comment type="line">// instructions.</comment>
<function><type><name>bool</name></type> <name>_get_and_clear_event</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>events</name></name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>function</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>is_set</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>atomic_flag_test_and_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eventqueue</name><index>[<expr><name>event</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>is_set</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Possible debug logging only for SET status, to avoid log file flooding with NOT SET messages</comment>
	<if_stmt><if>if<condition>(<expr><name>is_set</name> <operator>&amp;&amp;</operator> <name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_EVENTS</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Event %s -&gt; was SET, now CLEARED    called from %s() (%s:%i)"</literal></expr></argument>,
		     <argument><expr><call><name>eventtext</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>function</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Clear eventqueue bit (we set it above) ...</comment>
	<expr_stmt><expr><call><name>atomic_flag_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eventqueue</name><index>[<expr><name>event</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// ... and return status</comment>
	<return>return <expr><name>is_set</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Output human-readable version event text representation</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>eventtext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>events</name></name></type> <name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch<condition>(<expr><name>event</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>RELOAD_GRAVITY</name></expr>:</case>
			<return>return <expr><literal type="string">"RELOAD_GRAVITY"</literal></expr>;</return>
		<case>case <expr><name>RELOAD_PRIVACY_LEVEL</name></expr>:</case>
			<return>return <expr><literal type="string">"RELOAD_PRIVACY_LEVEL"</literal></expr>;</return>
		<case>case <expr><name>RERESOLVE_HOSTNAMES</name></expr>:</case>
			<return>return <expr><literal type="string">"RERESOLVE_HOSTNAMES"</literal></expr>;</return>
		<case>case <expr><name>RERESOLVE_HOSTNAMES_FORCE</name></expr>:</case>
			<return>return <expr><literal type="string">"RERESOLVE_HOSTNAMES_FORCE"</literal></expr>;</return>
		<case>case <expr><name>REIMPORT_ALIASCLIENTS</name></expr>:</case>
			<return>return <expr><literal type="string">"REIMPORT_ALIASCLIENTS"</literal></expr>;</return>
		<case>case <expr><name>PARSE_NEIGHBOR_CACHE</name></expr>:</case>
			<return>return <expr><literal type="string">"PARSE_NEIGHBOR_CACHE"</literal></expr>;</return>
		<case>case <expr><name>RESOLVE_NEW_HOSTNAMES</name></expr>:</case>
			<return>return <expr><literal type="string">"RESOLVE_NEW_HOSTNAMES"</literal></expr>;</return>
		<case>case <expr><name>RELOAD_BLOCKINGSTATUS</name></expr>:</case>
			<return>return <expr><literal type="string">"RELOAD_BLOCKINGSTATUS"</literal></expr>;</return>
		<case>case <expr><name>EVENTS_MAX</name></expr>:</case> <comment type="line">// fall through</comment>
		<default>default:</default>
			<return>return <expr><literal type="string">"UNKNOWN"</literal></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
