<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/gc.c"><comment type="block">/* Pi-hole: A black hole for Internet advertisements
*  (c) 2017 Pi-hole, LLC (https://pi-hole.net)
*  Network-wide ad blocking via your own hardware.
*
*  FTL Engine
*  Garbage collection routines
*
*  This file is copyright under the latest version of the EUPL.
*  Please see LICENSE file for your rights under this license. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FTL.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"timers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"overTime.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"database/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>
<comment type="line">// global variable killed</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"signals.h"</cpp:file></cpp:include>
<comment type="line">// data getter functions</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"datastructure.h"</cpp:file></cpp:include>
<comment type="line">// logg_rate_limit_message()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"database/message-table.h"</cpp:file></cpp:include>
<comment type="line">// get_nprocs()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysinfo.h&gt;</cpp:file></cpp:include>
<comment type="line">// get_filepath_usage()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"files.h"</cpp:file></cpp:include>

<comment type="line">// Resource checking interval</comment>
<comment type="line">// default: 300 seconds</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RCinterval</name></cpp:macro> <cpp:value>300</cpp:value></cpp:define>

<decl_stmt><decl><type><name>bool</name></type> <name>doGC</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<comment type="line">// Subtract rate-limitation count from individual client counters</comment>
<comment type="line">// As long as client-&gt;rate_limit is still larger than the allowed</comment>
<comment type="line">// maximum count, the rate-limitation will just continue</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>reset_rate_limiting</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>clientID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>clientID</name> <operator>&lt;</operator> <name><name>counters</name><operator>-&gt;</operator><name>clients</name></name></expr>;</condition> <incr><expr><name>clientID</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>clientsData</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><call><name>getClient</name><argument_list>(<argument><expr><name>clientID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name>client</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// Check if we are currently rate-limiting this client</comment>
		<if_stmt><if>if<condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>rate_limited</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>clientIP</name> <init>= <expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>ippos</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="line">// Check if we want to continue rate limiting</comment>
			<if_stmt><if>if<condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>rate_limit</name></name> <operator>&gt;</operator> <name><name>config</name><operator>.</operator><name>rate_limit</name><operator>.</operator><name>count</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Still rate-limiting %s as it made additional %d queries"</literal></expr></argument>, <argument><expr><name>clientIP</name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>rate_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<comment type="line">// or if rate-limiting ends for this client now</comment>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Ending rate-limitation of %s"</literal></expr></argument>, <argument><expr><name>clientIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>rate_limited</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Reset counter</comment>
		<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>rate_limit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>time_t</name></type> <name>lastRateLimitCleaner</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<comment type="line">// Returns how many more seconds until the current rate-limiting interval is over</comment>
<function><type><name>time_t</name></type> <name>get_rate_limit_turnaround</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>rate_limit_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>how_often</name> <init>= <expr><name>rate_limit_count</name><operator>/</operator><name><name>config</name><operator>.</operator><name>rate_limit</name><operator>.</operator><name>count</name></name></expr></init></decl>;</decl_stmt>
	<return>return <expr><operator>(</operator><name>time_t</name><operator>)</operator><name><name>config</name><operator>.</operator><name>rate_limit</name><operator>.</operator><name>interval</name></name><operator>*</operator><name>how_often</name> <operator>-</operator> <operator>(</operator><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>lastRateLimitCleaner</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_space</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>LastUsage</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>check</name><operator>.</operator><name>disk</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>perc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<comment type="line">// Warn if space usage at the device holding the corresponding file</comment>
	<comment type="line">// exceeds the configured threshold and current usage is higher than</comment>
	<comment type="line">// usage in the last run (to prevent log spam)</comment>
	<expr_stmt><expr><name>perc</name> <operator>=</operator> <call><name>get_filepath_usage</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>perc</name> <operator>&gt;</operator> <name><name>config</name><operator>.</operator><name>check</name><operator>.</operator><name>disk</name></name> <operator>&amp;&amp;</operator> <name>perc</name> <operator>&gt;</operator> <name>LastUsage</name></expr> )</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>log_resource_shortage</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>perc</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<return>return <expr><name>perc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_load</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>config</name><operator>.</operator><name>check</name><operator>.</operator><name>load</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// Get CPU load averages</comment>
	<decl_stmt><decl><type><name>double</name></type> <name><name>load</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>getloadavg</name><argument_list>(<argument><expr><name>load</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// Get number of CPU cores</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nprocs</name> <init>= <expr><call><name>get_nprocs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Warn if 15 minute average of load exceeds number of available</comment>
	<comment type="line">// processors</comment>
	<if_stmt><if>if<condition>(<expr><name><name>load</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;</operator> <name>nprocs</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>log_resource_shortage</name><argument_list>(<argument><expr><name><name>load</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>nprocs</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>GC_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Set thread name</comment>
	<expr_stmt><expr><name><name>thread_names</name><index>[<expr><name>GC</name></expr>]</index></name> <operator>=</operator> <literal type="string">"housekeeper"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>prctl</name><argument_list>(<argument><expr><name>PR_SET_NAME</name></expr></argument>, <argument><expr><name><name>thread_names</name><index>[<expr><name>GC</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Remember when we last ran the actions</comment>
	<decl_stmt><decl><type><name>time_t</name></type> <name>lastGCrun</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>%</operator><name>GCinterval</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>lastRateLimitCleaner</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>time_t</name></type> <name>lastResourceCheck</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">// Remember disk usage</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>LastLogStorageUsage</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>LastDBStorageUsage</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">// Run as long as this thread is not canceled</comment>
	<while>while<condition>(<expr><operator>!</operator><name>killed</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>time_t</name></type> <name>now</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>now</name> <operator>-</operator> <name>lastRateLimitCleaner</name><operator>)</operator> <operator>&gt;=</operator> <name><name>config</name><operator>.</operator><name>rate_limit</name><operator>.</operator><name>interval</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>lastRateLimitCleaner</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>lock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>reset_rate_limiting</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>unlock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Intermediate cancellation-point</comment>
		<if_stmt><if>if<condition>(<expr><name>killed</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<comment type="line">// Check available resources</comment>
		<if_stmt><if>if<condition>(<expr><name>now</name> <operator>-</operator> <name>lastResourceCheck</name> <operator>&gt;=</operator> <name>RCinterval</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>check_load</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>LastDBStorageUsage</name> <operator>=</operator> <call><name>check_space</name><argument_list>(<argument><expr><name><name>FTLfiles</name><operator>.</operator><name>FTL_db</name></name></expr></argument>, <argument><expr><name>LastDBStorageUsage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>LastLogStorageUsage</name> <operator>=</operator> <call><name>check_space</name><argument_list>(<argument><expr><name><name>FTLfiles</name><operator>.</operator><name>log</name></name></expr></argument>, <argument><expr><name>LastLogStorageUsage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>lastResourceCheck</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><name>now</name> <operator>-</operator> <name>GCdelay</name> <operator>-</operator> <name>lastGCrun</name> <operator>&gt;=</operator> <name>GCinterval</name> <operator>||</operator> <name>doGC</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>doGC</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<comment type="line">// Update lastGCrun timer</comment>
			<expr_stmt><expr><name>lastGCrun</name> <operator>=</operator> <name>now</name> <operator>-</operator> <name>GCdelay</name> <operator>-</operator> <operator>(</operator><name>now</name> <operator>-</operator> <name>GCdelay</name><operator>)</operator><operator>%</operator><name>GCinterval</name></expr>;</expr_stmt>

			<comment type="line">// Lock FTL's data structure, since it is likely that it will be changed here</comment>
			<comment type="line">// Requests should not be processed/answered when data is about to change</comment>
			<expr_stmt><expr><call><name>lock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// Get minimum timestamp to keep (this can be set with MAXLOGAGE)</comment>
			<decl_stmt><decl><type><name>time_t</name></type> <name>mintime</name> <init>= <expr><operator>(</operator><name>now</name> <operator>-</operator> <name>GCdelay</name><operator>)</operator> <operator>-</operator> <name><name>config</name><operator>.</operator><name>maxlogage</name></name></expr></init></decl>;</decl_stmt>

			<comment type="line">// Align the start time of this GC run to the GCinterval. This will also align with the</comment>
			<comment type="line">// oldest overTime interval after GC is done.</comment>
			<expr_stmt><expr><name>mintime</name> <operator>-=</operator> <name>mintime</name> <operator>%</operator> <name>GCinterval</name></expr>;</expr_stmt>

			<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_GC</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>timer_start</name><argument_list>(<argument><expr><name>GC_TIMER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>char</name></type> <name><name>timestring</name><index>[<expr><literal type="number">84</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>get_timestr</name><argument_list>(<argument><expr><name>timestring</name></expr></argument>, <argument><expr><name>mintime</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"GC starting, mintime: %s (%llu)"</literal></expr></argument>, <argument><expr><name>timestring</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>mintime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="line">// Process all queries</comment>
			<decl_stmt><decl><type><name>int</name></type> <name>removed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>long</name> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>counters</name><operator>-&gt;</operator><name>queries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<decl_stmt><decl><type><name>queriesData</name><modifier>*</modifier></type> <name>query</name> <init>= <expr><call><name>getQuery</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if<condition>(<expr><name>query</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
					<continue>continue;</continue></block_content></block></if></if_stmt>

				<comment type="line">// Test if this query is too new</comment>
				<if_stmt><if>if<condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>&gt;</operator> <name>mintime</name></expr>)</condition><block type="pseudo"><block_content>
					<break>break;</break></block_content></block></if></if_stmt>

				<comment type="line">// Adjust client counter (total and overTime)</comment>
				<decl_stmt><decl><type><name>clientsData</name><modifier>*</modifier></type> <name>client</name> <init>= <expr><call><name>getClient</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>clientID</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>timeidx</name> <init>= <expr><call><name>getOverTimeID</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>overTime</name><index>[<expr><name>timeidx</name></expr>]</index></name><operator>.</operator><name>total</name><operator>--</operator></expr>;</expr_stmt>
				<if_stmt><if>if<condition>(<expr><name>client</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>change_clientcount</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>timeidx</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<comment type="line">// Adjust domain counter (no overTime information)</comment>
				<decl_stmt><decl><type><name>domainsData</name><modifier>*</modifier></type> <name>domain</name> <init>= <expr><call><name>getDomain</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>domainID</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if<condition>(<expr><name>domain</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>domain</name><operator>-&gt;</operator><name>count</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<comment type="line">// Get upstream pointer</comment>

				<comment type="line">// Change other counters according to status of this query</comment>
				<switch>switch<condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><name>QUERY_UNKNOWN</name></expr>:</case>
						<comment type="line">// Unknown (?)</comment>
						<break>break;</break>
					<case>case <expr><name>QUERY_FORWARDED</name></expr>:</case> <comment type="line">// (fall through)</comment>
					<case>case <expr><name>QUERY_RETRIED</name></expr>:</case> <comment type="line">// (fall through)</comment>
					<case>case <expr><name>QUERY_RETRIED_DNSSEC</name></expr>:</case>
						<comment type="line">// Forwarded to an upstream DNS server</comment>
						<comment type="line">// Adjusting counters is done below in moveOverTimeMemory()</comment>
						<break>break;</break>
					<case>case <expr><name>QUERY_CACHE</name></expr>:</case>
					<case>case <expr><name>QUERY_CACHE_STALE</name></expr>:</case>
						<comment type="line">// Answered from local cache _or_ local config</comment>
						<break>break;</break>
					<case>case <expr><name>QUERY_GRAVITY</name></expr>:</case> <comment type="line">// Blocked by Pi-hole's blocking lists (fall through)</comment>
					<case>case <expr><name>QUERY_BLACKLIST</name></expr>:</case> <comment type="line">// Exact blocked (fall through)</comment>
					<case>case <expr><name>QUERY_REGEX</name></expr>:</case> <comment type="line">// Regex blocked (fall through)</comment>
					<case>case <expr><name>QUERY_EXTERNAL_BLOCKED_IP</name></expr>:</case> <comment type="line">// Blocked by upstream provider (fall through)</comment>
					<case>case <expr><name>QUERY_EXTERNAL_BLOCKED_NXRA</name></expr>:</case> <comment type="line">// Blocked by upstream provider (fall through)</comment>
					<case>case <expr><name>QUERY_EXTERNAL_BLOCKED_NULL</name></expr>:</case> <comment type="line">// Blocked by upstream provider (fall through)</comment>
					<case>case <expr><name>QUERY_GRAVITY_CNAME</name></expr>:</case> <comment type="line">// Gravity domain in CNAME chain (fall through)</comment>
					<case>case <expr><name>QUERY_REGEX_CNAME</name></expr>:</case> <comment type="line">// Regex blacklisted domain in CNAME chain (fall through)</comment>
					<case>case <expr><name>QUERY_BLACKLIST_CNAME</name></expr>:</case> <comment type="line">// Exactly blacklisted domain in CNAME chain (fall through)</comment>
					<case>case <expr><name>QUERY_DBBUSY</name></expr>:</case> <comment type="line">// Blocked because gravity database was busy</comment>
					<case>case <expr><name>QUERY_SPECIAL_DOMAIN</name></expr>:</case> <comment type="line">// Blocked by special domain handling</comment>
						<if_stmt><if>if<condition>(<expr><name>domain</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name><name>domain</name><operator>-&gt;</operator><name>blockedcount</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
						<if_stmt><if>if<condition>(<expr><name>client</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>change_clientcount</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
						<break>break;</break>
					<case>case <expr><name>QUERY_IN_PROGRESS</name></expr>:</case> <comment type="line">// Don't have to do anything here</comment>
					<case>case <expr><name>QUERY_STATUS_MAX</name></expr>:</case> <comment type="line">// fall through</comment>
					<default>default:</default>
						<comment type="block">/* That cannot happen */</comment>
						<break>break;</break>
				</block_content>}</block></switch>

				<comment type="line">// Update reply counters</comment>
				<expr_stmt><expr><name><name>counters</name><operator>-&gt;</operator><name>reply</name><index>[<expr><name><name>query</name><operator>-&gt;</operator><name>reply</name></name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>

				<comment type="line">// Update type counters</comment>
				<if_stmt><if>if<condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>type</name></name> <operator>&gt;=</operator> <name>TYPE_A</name> <operator>&amp;&amp;</operator> <name><name>query</name><operator>-&gt;</operator><name>type</name></name> <operator>&lt;</operator> <name>TYPE_MAX</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>counters</name><operator>-&gt;</operator><name>querytype</name><index>[<expr><name><name>query</name><operator>-&gt;</operator><name>type</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<comment type="line">// Set query again to UNKNOWN to reset the counters</comment>
				<expr_stmt><expr><call><name>query_set_status</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>QUERY_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="line">// Finally, remove the last trace of this query</comment>
				<expr_stmt><expr><name><name>counters</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>QUERY_UNKNOWN</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>

				<comment type="line">// Count removed queries</comment>
				<expr_stmt><expr><name>removed</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></for>

			<comment type="line">// Only perform memory operations when we actually removed queries</comment>
			<if_stmt><if>if<condition>(<expr><name>removed</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="line">// Move memory forward to keep only what we want</comment>
				<comment type="line">// Note: for overlapping memory blocks, memmove() is a safer approach than memcpy()</comment>
				<comment type="line">// Example: (I = now invalid, X = still valid queries, F = free space)</comment>
				<comment type="line">//   Before: IIIIIIXXXXFF</comment>
				<comment type="line">//   After:  XXXXFFFFFFFF</comment>
				<decl_stmt><decl><type><name>queriesData</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><call><name>getQuery</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>queriesData</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>getQuery</name><argument_list>(<argument><expr><name>removed</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if<condition>(<expr><name>dest</name> <operator>&amp;&amp;</operator> <name>src</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><operator>(</operator><name><name>counters</name><operator>-&gt;</operator><name>queries</name></name> <operator>-</operator> <name>removed</name><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>queriesData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<comment type="line">// Update queries counter</comment>
				<expr_stmt><expr><name><name>counters</name><operator>-&gt;</operator><name>queries</name></name> <operator>-=</operator> <name>removed</name></expr>;</expr_stmt>
				<comment type="line">// Update DB index as total number of queries reduced</comment>
				<expr_stmt><expr><name>lastdbindex</name> <operator>-=</operator> <name>removed</name></expr>;</expr_stmt>

				<comment type="line">// ensure remaining memory is zeroed out (marked as "F" in the above example)</comment>
				<decl_stmt><decl><type><name>queriesData</name> <modifier>*</modifier></type><name>tail</name> <init>= <expr><call><name>getQuery</name><argument_list>(<argument><expr><name><name>counters</name><operator>-&gt;</operator><name>queries</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if<condition>(<expr><name>tail</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tail</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>counters</name><operator>-&gt;</operator><name>queries_MAX</name></name> <operator>-</operator> <name><name>counters</name><operator>-&gt;</operator><name>queries</name></name><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>queriesData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="line">// Determine if overTime memory needs to get moved</comment>
			<expr_stmt><expr><call><name>moveOverTimeMemory</name><argument_list>(<argument><expr><name>mintime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_GC</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Notice: GC removed %i queries (took %.2f ms)"</literal></expr></argument>, <argument><expr><name>removed</name></expr></argument>, <argument><expr><call><name>timer_elapsed_msec</name><argument_list>(<argument><expr><name>GC_TIMER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="line">// Release thread lock</comment>
			<expr_stmt><expr><call><name>unlock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// After storing data in the database for the next time,</comment>
			<comment type="line">// we should scan for old entries, which will then be deleted</comment>
			<comment type="line">// to free up pages in the database and prevent it from growing</comment>
			<comment type="line">// ever larger and larger</comment>
			<expr_stmt><expr><name>DBdeleteoldqueries</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>thread_sleepms</name><argument_list>(<argument><expr><name>GC</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Terminating GC thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
