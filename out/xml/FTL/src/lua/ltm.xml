<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/lua/ltm.c"><comment type="block">/*
** $Id: ltm.c $
** Tag methods
** See Copyright Notice in lua.h
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ltm_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lprefix.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ldebug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ldo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lgc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lstate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ltable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ltm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lvm.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>udatatypename</name><index>[]</index></name> <init>= <expr><literal type="string">"userdata"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LUAI_DDEF</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>luaT_typenames_</name><index>[<expr><name>LUA_TOTALTYPES</name></expr>]</index></name> <init>= <expr><block>{
  <expr><literal type="string">"no value"</literal></expr>,
  <expr><literal type="string">"nil"</literal></expr>, <expr><literal type="string">"boolean"</literal></expr>, <expr><name>udatatypename</name></expr>, <expr><literal type="string">"number"</literal></expr>,
  <expr><literal type="string">"string"</literal></expr>, <expr><literal type="string">"table"</literal></expr>, <expr><literal type="string">"function"</literal></expr>, <expr><name>udatatypename</name></expr>, <expr><literal type="string">"thread"</literal></expr>,
  <expr><literal type="string">"upvalue"</literal></expr>, <expr><literal type="string">"proto"</literal></expr> <comment type="block">/* these last cases are used for tests only */</comment>
}</block></expr></init></decl>;</decl_stmt>


<function><type><name>void</name></type> <name>luaT_init</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>luaT_eventname</name><index>[]</index></name> <init>= <expr><block>{  <comment type="block">/* ORDER TM */</comment>
    <expr><literal type="string">"__index"</literal></expr>, <expr><literal type="string">"__newindex"</literal></expr>,
    <expr><literal type="string">"__gc"</literal></expr>, <expr><literal type="string">"__mode"</literal></expr>, <expr><literal type="string">"__len"</literal></expr>, <expr><literal type="string">"__eq"</literal></expr>,
    <expr><literal type="string">"__add"</literal></expr>, <expr><literal type="string">"__sub"</literal></expr>, <expr><literal type="string">"__mul"</literal></expr>, <expr><literal type="string">"__mod"</literal></expr>, <expr><literal type="string">"__pow"</literal></expr>,
    <expr><literal type="string">"__div"</literal></expr>, <expr><literal type="string">"__idiv"</literal></expr>,
    <expr><literal type="string">"__band"</literal></expr>, <expr><literal type="string">"__bor"</literal></expr>, <expr><literal type="string">"__bxor"</literal></expr>, <expr><literal type="string">"__shl"</literal></expr>, <expr><literal type="string">"__shr"</literal></expr>,
    <expr><literal type="string">"__unm"</literal></expr>, <expr><literal type="string">"__bnot"</literal></expr>, <expr><literal type="string">"__lt"</literal></expr>, <expr><literal type="string">"__le"</literal></expr>,
    <expr><literal type="string">"__concat"</literal></expr>, <expr><literal type="string">"__call"</literal></expr>, <expr><literal type="string">"__close"</literal></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>TM_N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>tmname</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>luaS_new</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>luaT_eventname</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaC_fix</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>obj2gco</name><argument_list>(<argument><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>tmname</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* never collect these names */</comment>
  </block_content>}</block></for>
</block_content>}</block></function>


<comment type="block">/*
** function to be used with macro "fasttm": optimized for absence of
** tag methods
*/</comment>
<function><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>luaT_gettm</name> <parameter_list>(<parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>events</name></decl></parameter>, <parameter><decl><type><name>TMS</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>TString</name> <modifier>*</modifier></type><name>ename</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>tm</name> <init>= <expr><call><name>luaH_getshortstr</name><argument_list>(<argument><expr><name>events</name></expr></argument>, <argument><expr><name>ename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>event</name> <operator>&lt;=</operator> <name>TM_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>notm</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* no tag method? */</comment>
    <expr_stmt><expr><name><name>events</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <call><name>cast_byte</name><argument_list>(<argument><expr><literal type="number">1u</literal><operator>&lt;&lt;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* cache this fact */</comment>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content> <return>return <expr><name>tm</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>luaT_gettmbyobj</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>TMS</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>mt</name></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><call><name>ttype</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>LUA_TTABLE</name></expr>:</case>
      <expr_stmt><expr><name>mt</name> <operator>=</operator> <call><name>hvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>metatable</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>LUA_TUSERDATA</name></expr>:</case>
      <expr_stmt><expr><name>mt</name> <operator>=</operator> <call><name>uvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>metatable</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><name>mt</name> <operator>=</operator> <call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>mt</name><index>[<expr><call><name>ttype</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></switch>
  <return>return <expr><operator>(</operator><ternary><condition><expr><name>mt</name></expr> ?</condition><then> <expr><call><name>luaH_getshortstr</name><argument_list>(<argument><expr><name>mt</name></expr></argument>, <argument><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>tmname</name><index>[<expr><name>event</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>&amp;</operator><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>nilvalue</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Return the name of the type of an object. For tables and userdata
** with metatable, use their '__name' metafield, if present.
*/</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>luaT_objtypename</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>mt</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>ttistable</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>mt</name> <operator>=</operator> <call><name>hvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>metatable</name><operator>)</operator> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>||</operator>
      <operator>(</operator><call><name>ttisfulluserdata</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>mt</name> <operator>=</operator> <call><name>uvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>metatable</name><operator>)</operator> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>luaH_getshortstr</name><argument_list>(<argument><expr><name>mt</name></expr></argument>, <argument><expr><call><name>luaS_new</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"__name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>ttisstring</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* is '__name' a string? */</comment>
      <return>return <expr><call><name>getstr</name><argument_list>(<argument><expr><call><name>tsvalue</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* use it as type name */</comment>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>ttypename</name><argument_list>(<argument><expr><call><name>ttype</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>  <comment type="block">/* else use standard type name */</comment>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaT_callTM</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>,
                  <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>p3</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>StkId</name></type> <name>func</name> <init>= <expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>setobj2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* push function (assume EXTRA_STACK) */</comment>
  <expr_stmt><expr><call><name>setobj2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>func</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 1st argument */</comment>
  <expr_stmt><expr><call><name>setobj2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>func</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 2nd argument */</comment>
  <expr_stmt><expr><call><name>setobj2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>func</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>p3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 3rd argument */</comment>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name>func</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
  <comment type="block">/* metamethod may yield only when called from Lua code */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>isLuacode</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>ci</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaD_call</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaD_callnoyield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaT_callTMres</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>,
                     <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>, <parameter><decl><type><name>StkId</name></type> <name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>result</name> <init>= <expr><call><name>savestack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>StkId</name></type> <name>func</name> <init>= <expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>setobj2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* push function (assume EXTRA_STACK) */</comment>
  <expr_stmt><expr><call><name>setobj2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>func</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 1st argument */</comment>
  <expr_stmt><expr><call><name>setobj2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>func</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 2nd argument */</comment>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
  <comment type="block">/* metamethod may yield only when called from Lua code */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>isLuacode</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>ci</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaD_call</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaD_callnoyield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>restorestack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setobjs2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><operator>--</operator><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* move result to its place */</comment>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>callbinTM</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>,
                      <parameter><decl><type><name>StkId</name></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>TMS</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>tm</name> <init>= <expr><call><name>luaT_gettmbyobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* try first operand */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>notm</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>luaT_gettmbyobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* try second operand */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>notm</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>luaT_callTMres</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaT_trybinTM</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>,
                    <parameter><decl><type><name>StkId</name></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>TMS</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>callbinTM</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <switch>switch <condition>(<expr><name>event</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>TM_BAND</name></expr>:</case> <case>case <expr><name>TM_BOR</name></expr>:</case> <case>case <expr><name>TM_BXOR</name></expr>:</case>
      <case>case <expr><name>TM_SHL</name></expr>:</case> <case>case <expr><name>TM_SHR</name></expr>:</case> <case>case <expr><name>TM_BNOT</name></expr>:</case> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>ttisnumber</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>ttisnumber</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>luaG_tointerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>luaG_opinterror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><literal type="string">"perform bitwise operation on"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
      </block_content>}</block>
      <comment type="block">/* calls never return, but to avoid warnings: */</comment><comment type="block">/* FALLTHROUGH */</comment>
      <default>default:</default>
        <expr_stmt><expr><call><name>luaG_opinterror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><literal type="string">"perform arithmetic on"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaT_tryconcatTM</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>StkId</name></type> <name>top</name> <init>= <expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>callbinTM</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name>top</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name>top</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>top</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>TM_CONCAT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaG_concaterror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name>top</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name>top</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaT_trybinassocTM</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>,
                                       <parameter><decl><type><name>int</name></type> <name>flip</name></decl></parameter>, <parameter><decl><type><name>StkId</name></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>TMS</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>flip</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaT_trybinTM</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaT_trybinTM</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaT_trybiniTM</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><name>lua_Integer</name></type> <name>i2</name></decl></parameter>,
                                   <parameter><decl><type><name>int</name></type> <name>flip</name></decl></parameter>, <parameter><decl><type><name>StkId</name></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>TMS</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TValue</name></type> <name>aux</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>setivalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aux</name></expr></argument>, <argument><expr><name>i2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaT_trybinassocTM</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aux</name></expr></argument>, <argument><expr><name>flip</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Calls an order tag method.
** For lessequal, LUA_COMPAT_LT_LE keeps compatibility with old
** behavior: if there is no '__le', try '__lt', based on l &lt;= r iff
** !(r &lt; l) (assuming a total order). If the metamethod yields during
** this substitution, the continuation has to know about it (to negate
** the result of r&lt;l); bit CIST_LEQ in the call status keeps that
** information.
*/</comment>
<function><type><name>int</name></type> <name>luaT_callorderTM</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>,
                      <parameter><decl><type><name>TMS</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>callbinTM</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* try original event */</comment>
    <return>return <expr><operator>!</operator><call><name>l_isfalse</name><argument_list>(<argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LUA_COMPAT_LT_LE</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if type="elseif">else if <condition>(<expr><name>event</name> <operator>==</operator> <name>TM_LE</name></expr>)</condition> <block>{<block_content>
      <comment type="block">/* try '!(p2 &lt; p1)' for '(p1 &lt;= p2)' */</comment>
      <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>ci</name><operator>-&gt;</operator><name>callstatus</name></name> <operator>|=</operator> <name>CIST_LEQ</name></expr>;</expr_stmt>  <comment type="block">/* mark it is doing 'lt' for 'le' */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>callbinTM</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><name>TM_LT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>ci</name><operator>-&gt;</operator><name>callstatus</name></name> <operator>^=</operator> <name>CIST_LEQ</name></expr>;</expr_stmt>  <comment type="block">/* clear mark */</comment>
        <return>return <expr><call><name>l_isfalse</name><argument_list>(<argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <comment type="block">/* else error will remove this 'ci'; no need to clear mark */</comment>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>luaG_ordererror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* no metamethod found */</comment>
  <return>return <expr><literal type="number">0</literal></expr>;</return>  <comment type="block">/* to avoid warnings */</comment>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>luaT_callorderiTM</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v2</name></decl></parameter>,
                       <parameter><decl><type><name>int</name></type> <name>flip</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>isfloat</name></decl></parameter>, <parameter><decl><type><name>TMS</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TValue</name></type> <name>aux</name></decl>;</decl_stmt> <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>p2</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>isfloat</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setfltvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aux</name></expr></argument>, <argument><expr><call><name>cast_num</name><argument_list>(<argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>setivalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aux</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>flip</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* arguments were exchanged? */</comment>
    <expr_stmt><expr><name>p2</name> <operator>=</operator> <name>p1</name></expr>;</expr_stmt> <expr_stmt><expr><name>p1</name> <operator>=</operator> <operator>&amp;</operator><name>aux</name></expr>;</expr_stmt>  <comment type="block">/* correct them */</comment>
  </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>p2</name> <operator>=</operator> <operator>&amp;</operator><name>aux</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <return>return <expr><call><name>luaT_callorderTM</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaT_adjustvarargs</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nfixparams</name></decl></parameter>, <parameter><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name></decl></parameter>,
                         <parameter><decl><type><specifier>const</specifier> <name>Proto</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>actual</name> <init>= <expr><call><name>cast_int</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <name><name>ci</name><operator>-&gt;</operator><name>func</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* number of arguments */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nextra</name> <init>= <expr><name>actual</name> <operator>-</operator> <name>nfixparams</name></expr></init></decl>;</decl_stmt>  <comment type="block">/* number of extra arguments */</comment>
  <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>l</name><operator>.</operator><name>nextraargs</name></name> <operator>=</operator> <name>nextra</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaD_checkstack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>maxstacksize</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* copy function to the top of the stack */</comment>
  <expr_stmt><expr><call><name>setobjs2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>++</operator></expr></argument>, <argument><expr><name><name>ci</name><operator>-&gt;</operator><name>func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* move fixed parameters to the top of the stack */</comment>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>nfixparams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>setobjs2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>++</operator></expr></argument>, <argument><expr><name><name>ci</name><operator>-&gt;</operator><name>func</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setnilvalue</name><argument_list>(<argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>func</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* erase original parameter (for GC) */</comment>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>func</name></name> <operator>+=</operator> <name>actual</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>top</name></name> <operator>+=</operator> <name>actual</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>&lt;=</operator> <name><name>ci</name><operator>-&gt;</operator><name>top</name></name> <operator>&amp;&amp;</operator> <name><name>ci</name><operator>-&gt;</operator><name>top</name></name> <operator>&lt;=</operator> <name><name>L</name><operator>-&gt;</operator><name>stack_last</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaT_getvarargs</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name></decl></parameter>, <parameter><decl><type><name>StkId</name></type> <name>where</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wanted</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nextra</name> <init>= <expr><name><name>ci</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>l</name><operator>.</operator><name>nextraargs</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>wanted</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>wanted</name> <operator>=</operator> <name>nextra</name></expr>;</expr_stmt>  <comment type="block">/* get all extra arguments available */</comment>
    <expr_stmt><expr><call><name>checkstackGCp</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>nextra</name></expr></argument>, <argument><expr><name>where</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* ensure stack space */</comment>
    <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name>where</name> <operator>+</operator> <name>nextra</name></expr>;</expr_stmt>  <comment type="block">/* next instruction will need top */</comment>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>wanted</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>nextra</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>setobjs2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>where</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>ci</name><operator>-&gt;</operator><name>func</name></name> <operator>-</operator> <name>nextra</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>wanted</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>   <comment type="block">/* complete required results with nil */</comment>
    <expr_stmt><expr><call><name>setnilvalue</name><argument_list>(<argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name>where</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

</unit>
