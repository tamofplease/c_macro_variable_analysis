<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/lua/linit.c"><comment type="block">/*
** $Id: linit.c $
** Initialization of libraries for lua.c and other clients
** See Copyright Notice in lua.h
*/</comment>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>linit_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_LIB</name></cpp:macro></cpp:define>

<comment type="block">/*
** If you embed Lua in your program and need to open the standard
** libraries, call luaL_openlibs in your program. If you need a
** different set of libraries, copy this file to your project and edit
** it to suit your needs.
**
** You can also *preload* libraries, so that a later 'require' can
** open the library, which is already linked to the application.
** For that, do the following code:
**
**  luaL_getsubtable(L, LUA_REGISTRYINDEX, LUA_PRELOAD_TABLE);
**  lua_pushcfunction(L, luaopen_modname);
**  lua_setfield(L, -2, modname);
**  lua_pop(L, 1);  // remove PRELOAD table
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lprefix.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lualib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lauxlib.h"</cpp:file></cpp:include>


<comment type="block">/*
** these libs are loaded by lua.c and are readily available to any Lua
** program
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>luaL_Reg</name></type> <name><name>loadedlibs</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{<expr><name>LUA_GNAME</name></expr>, <expr><name>luaopen_base</name></expr>}</block></expr>,
  <expr><block>{<expr><name>LUA_LOADLIBNAME</name></expr>, <expr><name>luaopen_package</name></expr>}</block></expr>,
  <expr><block>{<expr><name>LUA_COLIBNAME</name></expr>, <expr><name>luaopen_coroutine</name></expr>}</block></expr>,
  <expr><block>{<expr><name>LUA_TABLIBNAME</name></expr>, <expr><name>luaopen_table</name></expr>}</block></expr>,
  <expr><block>{<expr><name>LUA_IOLIBNAME</name></expr>, <expr><name>luaopen_io</name></expr>}</block></expr>,
  <expr><block>{<expr><name>LUA_OSLIBNAME</name></expr>, <expr><name>luaopen_os</name></expr>}</block></expr>,
  <expr><block>{<expr><name>LUA_STRLIBNAME</name></expr>, <expr><name>luaopen_string</name></expr>}</block></expr>,
  <expr><block>{<expr><name>LUA_MATHLIBNAME</name></expr>, <expr><name>luaopen_math</name></expr>}</block></expr>,
  <expr><block>{<expr><name>LUA_UTF8LIBNAME</name></expr>, <expr><name>luaopen_utf8</name></expr>}</block></expr>,
  <expr><block>{<expr><name>LUA_DBLIBNAME</name></expr>, <expr><name>luaopen_debug</name></expr>}</block></expr>,
  <comment type="block" format="doxygen">/************** Pi-hole modification ***************/</comment>
  <expr><block>{<expr><name>LUA_PIHOLELIBNAME</name></expr>, <expr><name>luaopen_pihole</name></expr>}</block></expr>,
  <comment type="block" format="doxygen">/***************************************************/</comment>
  <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<function><type><name>LUALIB_API</name> <name>void</name></type> <name>luaL_openlibs</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>luaL_Reg</name> <modifier>*</modifier></type><name>lib</name></decl>;</decl_stmt>
  <comment type="block">/* "require" functions from 'loadedlibs' and set results to global table */</comment>
  <for>for <control>(<init><expr><name>lib</name> <operator>=</operator> <name>loadedlibs</name></expr>;</init> <condition><expr><name><name>lib</name><operator>-&gt;</operator><name>func</name></name></expr>;</condition> <incr><expr><name>lib</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>luaL_requiref</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>lib</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>lib</name><operator>-&gt;</operator><name>func</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* remove lib */</comment>
  </block_content>}</block></for>
</block_content>}</block></function>

</unit>
