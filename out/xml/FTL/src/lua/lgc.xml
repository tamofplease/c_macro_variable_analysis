<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/lua/lgc.c"><comment type="block">/*
** $Id: lgc.c $
** Garbage Collector
** See Copyright Notice in lua.h
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lgc_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lprefix.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ldebug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ldo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lfunc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lgc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lstate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ltable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ltm.h"</cpp:file></cpp:include>


<comment type="block">/*
** Maximum number of elements to sweep in each single step.
** (Large enough to dissipate fixed overheads but small enough
** to allow small steps for the collector.)
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GCSWEEPMAX</name></cpp:macro>	<cpp:value>100</cpp:value></cpp:define>

<comment type="block">/*
** Maximum number of finalizers to call in each single step.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GCFINMAX</name></cpp:macro>	<cpp:value>10</cpp:value></cpp:define>


<comment type="block">/*
** Cost of calling one finalizer.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GCFINALIZECOST</name></cpp:macro>	<cpp:value>50</cpp:value></cpp:define>


<comment type="block">/*
** The equivalent, in bytes, of one unit of "work" (visiting a slot,
** sweeping an object, etc.)
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WORK2MEM</name></cpp:macro>	<cpp:value>sizeof(TValue)</cpp:value></cpp:define>


<comment type="block">/*
** macro to adjust 'pause': 'pause' is actually used like
** 'pause / PAUSEADJ' (value chosen by tests)
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAUSEADJ</name></cpp:macro>		<cpp:value>100</cpp:value></cpp:define>


<comment type="block">/* mask with all color bits */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maskcolors</name></cpp:macro>	<cpp:value>(bitmask(BLACKBIT) | WHITEBITS)</cpp:value></cpp:define>

<comment type="block">/* mask with all GC bits */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maskgcbits</name></cpp:macro>      <cpp:value>(maskcolors | AGEBITS)</cpp:value></cpp:define>


<comment type="block">/* macro to erase all color bits then set only the current white bit */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>makewhite</name><parameter_list>(<parameter><type><name>g</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	\
  <cpp:value>(x-&gt;marked = cast_byte((x-&gt;marked &amp; ~maskcolors) | luaC_white(g)))</cpp:value></cpp:define>

<comment type="block">/* make an object gray (neither white nor black) */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set2gray</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>resetbits(x-&gt;marked, maskcolors)</cpp:value></cpp:define>


<comment type="block">/* make an object black (coming from any color) */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set2black</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>  \
  <cpp:value>(x-&gt;marked = cast_byte((x-&gt;marked &amp; ~WHITEBITS) | bitmask(BLACKBIT)))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>valiswhite</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>(iscollectable(x) &amp;&amp; iswhite(gcvalue(x)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>keyiswhite</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>(keyiscollectable(n) &amp;&amp; iswhite(gckey(n)))</cpp:value></cpp:define>


<comment type="block">/*
** Protected access to objects in values
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gcvalueN</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>(iscollectable(o) ? gcvalue(o) : NULL)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>markvalue</name><parameter_list>(<parameter><type><name>g</name></type></parameter>,<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ checkliveness(g-&gt;mainthread,o); \
  if (valiswhite(o)) reallymarkobject(g,gcvalue(o)); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>markkey</name><parameter_list>(<parameter><type><name>g</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>{ if keyiswhite(n) reallymarkobject(g,gckey(n)); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>markobject</name><parameter_list>(<parameter><type><name>g</name></type></parameter>,<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>{ if (iswhite(t)) reallymarkobject(g, obj2gco(t)); }</cpp:value></cpp:define>

<comment type="block">/*
** mark an object that can be NULL (either because it is really optional,
** or it was stripped as debug info, or inside an uncompleted structure)
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>markobjectN</name><parameter_list>(<parameter><type><name>g</name></type></parameter>,<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>{ if (t) markobject(g,t); }</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>reallymarkobject</name> <parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>lu_mem</name></type> <name>atomic</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>entersweep</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
** {======================================================
** Generic functions
** =======================================================
*/</comment>


<comment type="block">/*
** one after last element in a hash array
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gnodelast</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>gnode(h, cast_sizet(sizenode(h)))</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>GCObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>getgclist</name> <parameter_list>(<parameter><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>tt</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>LUA_VTABLE</name></expr>:</case> <return>return <expr><operator>&amp;</operator><call><name>gco2t</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>gclist</name></expr>;</return>
    <case>case <expr><name>LUA_VLCL</name></expr>:</case> <return>return <expr><operator>&amp;</operator><call><name>gco2lcl</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>gclist</name></expr>;</return>
    <case>case <expr><name>LUA_VCCL</name></expr>:</case> <return>return <expr><operator>&amp;</operator><call><name>gco2ccl</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>gclist</name></expr>;</return>
    <case>case <expr><name>LUA_VTHREAD</name></expr>:</case> <return>return <expr><operator>&amp;</operator><call><name>gco2th</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>gclist</name></expr>;</return>
    <case>case <expr><name>LUA_VPROTO</name></expr>:</case> <return>return <expr><operator>&amp;</operator><call><name>gco2p</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>gclist</name></expr>;</return>
    <case>case <expr><name>LUA_VUSERDATA</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>Udata</name> <modifier>*</modifier></type><name>u</name> <init>= <expr><call><name>gco2u</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>nuvalue</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>&amp;</operator><name><name>u</name><operator>-&gt;</operator><name>gclist</name></name></expr>;</return>
    </block_content>}</block>
    <default>default:</default> <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>


<comment type="block">/*
** Link a collectable object 'o' with a known type into the list 'p'.
** (Must be a macro to access the 'gclist' field in different types.)
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>linkgclist</name><parameter_list>(<parameter><type><name>o</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>linkgclist_(obj2gco(o), &amp;(o)-&gt;gclist, &amp;(p))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>linkgclist_</name> <parameter_list>(<parameter><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>GCObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>pnext</name></decl></parameter>, <parameter><decl><type><name>GCObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>isgray</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* cannot be in a gray list */</comment>
  <expr_stmt><expr><operator>*</operator><name>pnext</name> <operator>=</operator> <operator>*</operator><name>list</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>list</name> <operator>=</operator> <name>o</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>set2gray</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* now it is */</comment>
</block_content>}</block></function>


<comment type="block">/*
** Link a generic collectable object 'o' into the list 'p'.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>linkobjgclist</name><parameter_list>(<parameter><type><name>o</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>linkgclist_(obj2gco(o), getgclist(o), &amp;(p))</cpp:value></cpp:define>



<comment type="block">/*
** Clear keys for empty entries in tables. If entry is empty
** and its key is not marked, mark its entry as dead. This allows the
** collection of the key, but keeps its entry in the table (its removal
** could break a chain). The main feature of a dead key is that it must
** be different from any other value, to do not disturb searches.
** Other places never manipulate dead keys, because its associated empty
** value is enough to signal that the entry is logically empty.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>clearkey</name> <parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>isempty</name><argument_list>(<argument><expr><call><name>gval</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>keyiswhite</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>setdeadkey</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* unused and unmarked key; remove it */</comment>
</block_content>}</block></function>


<comment type="block">/*
** tells whether a key or value can be cleared from a weak
** table. Non-collectable objects are never removed from weak
** tables. Strings behave as 'values', so are never removed too. for
** other objects: if really collected, cannot keep them; for objects
** being finalized, keep them in keys, but not in values
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>iscleared</name> <parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GCObject</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>  <comment type="block">/* non-collectable value */</comment>
  <if type="elseif">else if <condition>(<expr><call><name>novariant</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>tt</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LUA_TSTRING</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>markobject</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* strings are 'values', so are never weak */</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content> <return>return <expr><call><name>iswhite</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Barrier that moves collector forward, that is, marks the white object
** 'v' being pointed by the black object 'o'.  In the generational
** mode, 'v' must also become old, if 'o' is old; however, it cannot
** be changed directly to OLD, because it may still point to non-old
** objects. So, it is marked as OLD0. In the next cycle it will become
** OLD1, and in the next it will finally become OLD (regular old). By
** then, any object it points to will also be old.  If called in the
** incremental sweep phase, it clears the black object to white (sweep
** it) to avoid other barrier calls for this same object. (That cannot
** be done is generational mode, as its sweep does not distinguish
** whites from deads.)
*/</comment>
<function><type><name>void</name></type> <name>luaC_barrier_</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>isblack</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>iswhite</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isdead</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isdead</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>keepinvariant</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* must keep invariant? */</comment>
    <expr_stmt><expr><call><name>reallymarkobject</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* restore invariant */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isold</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>isold</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* white object could not be old */</comment>
      <expr_stmt><expr><call><name>setage</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>G_OLD0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* restore generational invariant */</comment>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if>
  <else>else <block>{<block_content>  <comment type="block">/* sweep phase */</comment>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>issweepphase</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>gckind</name></name> <operator>==</operator> <name>KGC_INC</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* incremental mode? */</comment>
      <expr_stmt><expr><call><name>makewhite</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* mark 'o' as white to avoid other barriers */</comment>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** barrier that moves collector backward, that is, mark the black object
** pointing to a white object as gray again.
*/</comment>
<function><type><name>void</name></type> <name>luaC_barrierback_</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>isblack</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isdead</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>gckind</name></name> <operator>==</operator> <name>KGC_GEN</name><operator>)</operator> <operator>==</operator> <operator>(</operator><call><name>isold</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>getage</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>G_TOUCHED1</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>getage</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>G_TOUCHED2</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* already in gray list? */</comment>
    <expr_stmt><expr><call><name>set2gray</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* make it gray to become touched1 */</comment>
  <else>else<block type="pseudo"><block_content>  <comment type="block">/* link it in 'grayagain' and paint it gray */</comment>
    <expr_stmt><expr><call><name>linkobjgclist</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>grayagain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>isold</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* generational mode? */</comment>
    <expr_stmt><expr><call><name>setage</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>G_TOUCHED1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* touched in current cycle */</comment>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaC_fix</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>allgc</name></name> <operator>==</operator> <name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* object must be 1st in 'allgc' list! */</comment>
  <expr_stmt><expr><call><name>set2gray</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* they will be gray forever */</comment>
  <expr_stmt><expr><call><name>setage</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>G_OLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* and old forever */</comment>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>allgc</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>  <comment type="block">/* remove object from 'allgc' list */</comment>
  <expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>fixedgc</name></name></expr>;</expr_stmt>  <comment type="block">/* link it to 'fixedgc' list */</comment>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>fixedgc</name></name> <operator>=</operator> <name>o</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** create a new collectable object (with given type and size) and link
** it to 'allgc' list.
*/</comment>
<function><type><name>GCObject</name> <modifier>*</modifier></type><name>luaC_newobj</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tt</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>cast</name><argument_list>(<argument><expr><name>GCObject</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>luaM_newobject</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>novariant</name><argument_list>(<argument><expr><name>tt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>marked</name></name> <operator>=</operator> <call><name>luaC_white</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>tt</name></name> <operator>=</operator> <name>tt</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>allgc</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>allgc</name></name> <operator>=</operator> <name>o</name></expr>;</expr_stmt>
  <return>return <expr><name>o</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* }====================================================== */</comment>



<comment type="block">/*
** {======================================================
** Mark functions
** =======================================================
*/</comment>


<comment type="block">/*
** Mark an object.  Userdata with no user values, strings, and closed
** upvalues are visited and turned black here.  Open upvalues are
** already indirectly linked through their respective threads in the
** 'twups' list, so they don't go to the gray list; nevertheless, they
** are kept gray to avoid barriers, as their values will be revisited
** by the thread or by 'remarkupvals'.  Other objects are added to the
** gray list to be visited (and turned black) later.  Both userdata and
** upvalues can call this function recursively, but this recursion goes
** for at most two levels: An upvalue cannot refer to another upvalue
** (only closures can), and a userdata's metatable must be a table.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>reallymarkobject</name> <parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>tt</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>LUA_VSHRSTR</name></expr>:</case>
    <case>case <expr><name>LUA_VLNGSTR</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>set2black</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* nothing to visit */</comment>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>LUA_VUPVAL</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>UpVal</name> <modifier>*</modifier></type><name>uv</name> <init>= <expr><call><name>gco2upv</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>upisopen</name><argument_list>(<argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>set2gray</name><argument_list>(<argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* open upvalues are kept gray */</comment>
      <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>set2black</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>  <comment type="block">/* closed upvalues are visited here */</comment>
      <expr_stmt><expr><call><name>markvalue</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>uv</name><operator>-&gt;</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* mark its content */</comment>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>LUA_VUSERDATA</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>Udata</name> <modifier>*</modifier></type><name>u</name> <init>= <expr><call><name>gco2u</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>u</name><operator>-&gt;</operator><name>nuvalue</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* no user values? */</comment>
        <expr_stmt><expr><call><name>markobjectN</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>u</name><operator>-&gt;</operator><name>metatable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* mark its metatable */</comment>
        <expr_stmt><expr><call><name>set2black</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* nothing else to mark */</comment>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <comment type="block">/* else... */</comment>
    </block_content>}</block>  <comment type="block">/* FALLTHROUGH */</comment>
    <case>case <expr><name>LUA_VLCL</name></expr>:</case> <case>case <expr><name>LUA_VCCL</name></expr>:</case> <case>case <expr><name>LUA_VTABLE</name></expr>:</case>
    <case>case <expr><name>LUA_VTHREAD</name></expr>:</case> <case>case <expr><name>LUA_VPROTO</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>linkobjgclist</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>gray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* to be visited later */</comment>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default> <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
  </block_content>}</block></switch>
</block_content>}</block></function>


<comment type="block">/*
** mark metamethods for basic types
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>markmt</name> <parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LUA_NUMTAGS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>markobjectN</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>mt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>


<comment type="block">/*
** mark all objects in list of being-finalized
*/</comment>
<function><type><specifier>static</specifier> <name>lu_mem</name></type> <name>markbeingfnz</name> <parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lu_mem</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>o</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>tobefnz</name></name></expr>;</init> <condition><expr><name>o</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>o</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>markobject</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** For each non-marked thread, simulates a barrier between each open
** upvalue and its value. (If the thread is collected, the value will be
** assigned to the upvalue, but then it can be too late for the barrier
** to act. The "barrier" does not need to check colors: A non-marked
** thread must be young; upvalues cannot be older than their threads; so
** any visited upvalue must be young too.) Also removes the thread from
** the list, as it was already visited. Removes also threads with no
** upvalues, as they have nothing to be checked. (If the thread gets an
** upvalue later, it will be linked in the list again.)
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>remarkupvals</name> <parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>thread</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>twups</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>work</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* estimate of how much work was done here */</comment>
  <while>while <condition>(<expr><operator>(</operator><name>thread</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>work</name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>iswhite</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>thread</name><operator>-&gt;</operator><name>openupval</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>twups</name></name></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* keep marked thread with upvalues in the list */</comment>
    <else>else <block>{<block_content>  <comment type="block">/* thread is not marked or without upvalues */</comment>
      <decl_stmt><decl><type><name>UpVal</name> <modifier>*</modifier></type><name>uv</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>isold</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>thread</name><operator>-&gt;</operator><name>openupval</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><name>thread</name><operator>-&gt;</operator><name>twups</name></name></expr>;</expr_stmt>  <comment type="block">/* remove thread from the list */</comment>
      <expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>twups</name></name> <operator>=</operator> <name>thread</name></expr>;</expr_stmt>  <comment type="block">/* mark that it is out of list */</comment>
      <for>for <control>(<init><expr><name>uv</name> <operator>=</operator> <name><name>thread</name><operator>-&gt;</operator><name>openupval</name></name></expr>;</init> <condition><expr><name>uv</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>uv</name> <operator>=</operator> <name><name>uv</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>open</name><operator>.</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>getage</name><argument_list>(<argument><expr><name>uv</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <call><name>getage</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>work</name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>iswhite</name><argument_list>(<argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* upvalue already visited? */</comment>
          <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>upisopen</name><argument_list>(<argument><expr><name>uv</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isgray</name><argument_list>(<argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>markvalue</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>uv</name><operator>-&gt;</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* mark its value */</comment>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>work</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>cleargraylists</name> <parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gray</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>grayagain</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>weak</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>allweak</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>ephemeron</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** mark root set and reset all gray lists, to start a new collection
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>restartcollection</name> <parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>cleargraylists</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>markobject</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>mainthread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>markvalue</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>l_registry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>markmt</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>markbeingfnz</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* mark any finalizing object left from previous cycle */</comment>
</block_content>}</block></function>

<comment type="block">/* }====================================================== */</comment>


<comment type="block">/*
** {======================================================
** Traverse functions
** =======================================================
*/</comment>


<comment type="block">/*
** Check whether object 'o' should be kept in the 'grayagain' list for
** post-processing by 'correctgraylist'. (It could put all old objects
** in the list and leave all the work to 'correctgraylist', but it is
** more efficient to avoid adding elements that will be removed.) Only
** TOUCHED1 objects need to be in the list. TOUCHED2 doesn't need to go
** back to a gray list, but then it must become OLD. (That is what
** 'correctgraylist' does when it finds a TOUCHED2 object.)
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>genlink</name> <parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>isblack</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>getage</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>G_TOUCHED1</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* touched in this cycle? */</comment>
    <expr_stmt><expr><call><name>linkobjgclist</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>grayagain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* link it back in 'grayagain' */</comment>
  </block_content>}</block></if>  <comment type="block">/* everything else do not need to be linked back */</comment>
  <if type="elseif">else if <condition>(<expr><call><name>getage</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>G_TOUCHED2</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>changeage</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>G_TOUCHED2</name></expr></argument>, <argument><expr><name>G_OLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* advance age */</comment>
</block_content>}</block></function>


<comment type="block">/*
** Traverse a table with weak values and link it to proper list. During
** propagate phase, keep it in 'grayagain' list, to be revisited in the
** atomic phase. In the atomic phase, if table has any white value,
** put it in 'weak' list, to be cleared.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>traverseweakvalue</name> <parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>limit</name> <init>= <expr><call><name>gnodelast</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="block">/* if there is array part, assume it may have white values (it is not
     worth traversing it now just to check) */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>hasclears</name> <init>= <expr><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>alimit</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <call><name>gnode</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>limit</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>  <comment type="block">/* traverse hash part */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isempty</name><argument_list>(<argument><expr><call><name>gval</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* entry is empty? */</comment>
      <expr_stmt><expr><call><name>clearkey</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* clear its key */</comment>
    <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>keyisnil</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>markkey</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasclears</name> <operator>&amp;&amp;</operator> <call><name>iscleared</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><call><name>gcvalueN</name><argument_list>(<argument><expr><call><name>gval</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* a white value? */</comment>
        <expr_stmt><expr><name>hasclears</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* table will have to be cleared */</comment>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>gcstate</name></name> <operator>==</operator> <name>GCSatomic</name> <operator>&amp;&amp;</operator> <name>hasclears</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>linkgclist</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>weak</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* has to be cleared later */</comment>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>linkgclist</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>grayagain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>  <comment type="block">/* must retraverse it in atomic phase */</comment>
</block_content>}</block></function>


<comment type="block">/*
** Traverse an ephemeron table and link it to proper list. Returns true
** iff any object was marked during this traversal (which implies that
** convergence has to continue). During propagation phase, keep table
** in 'grayagain' list, to be visited again in the atomic phase. In
** the atomic phase, if table has any white-&gt;white entry, it has to
** be revisited during ephemeron convergence (as that key may turn
** black). Otherwise, if it has any white key, table has to be cleared
** (in the atomic phase). In generational mode, some tables
** must be kept in some gray list for post-processing; this is done
** by 'genlink'.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>traverseephemeron</name> <parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>marked</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* true if an object is marked in this traversal */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>hasclears</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* true if table has white keys */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>hasww</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* true if table has entry "white-key -&gt; white-value" */</comment>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>asize</name> <init>= <expr><call><name>luaH_realasize</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nsize</name> <init>= <expr><call><name>sizenode</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="block">/* traverse array part */</comment>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>asize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>valiswhite</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>marked</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>reallymarkobject</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><call><name>gcvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <comment type="block">/* traverse hash part; if 'inv', traverse descending
     (see 'convergeephemerons') */</comment>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nsize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><ternary><condition><expr><name>inv</name></expr> ?</condition><then> <expr><call><name>gnode</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>nsize</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>gnode</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isempty</name><argument_list>(<argument><expr><call><name>gval</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* entry is empty? */</comment>
      <expr_stmt><expr><call><name>clearkey</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* clear its key */</comment>
    <if type="elseif">else if <condition>(<expr><call><name>iscleared</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><call><name>gckeyN</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* key is not marked (yet)? */</comment>
      <expr_stmt><expr><name>hasclears</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>  <comment type="block">/* table must be cleared */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>valiswhite</name><argument_list>(<argument><expr><call><name>gval</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* value not marked yet? */</comment>
        <expr_stmt><expr><name>hasww</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* white-white entry */</comment>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>valiswhite</name><argument_list>(<argument><expr><call><name>gval</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* value not marked yet? */</comment>
      <expr_stmt><expr><name>marked</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>reallymarkobject</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><call><name>gcvalue</name><argument_list>(<argument><expr><call><name>gval</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* mark it now */</comment>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <comment type="block">/* link table into proper list */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>gcstate</name></name> <operator>==</operator> <name>GCSpropagate</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>linkgclist</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>grayagain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* must retraverse it in atomic phase */</comment>
  <if type="elseif">else if <condition>(<expr><name>hasww</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* table has white-&gt;white entries? */</comment>
    <expr_stmt><expr><call><name>linkgclist</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>ephemeron</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* have to propagate again */</comment>
  <if type="elseif">else if <condition>(<expr><name>hasclears</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* table has white keys? */</comment>
    <expr_stmt><expr><call><name>linkgclist</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>allweak</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* may have to clean white keys */</comment>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>genlink</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><call><name>obj2gco</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>  <comment type="block">/* check whether collector still needs to see it */</comment>
  <return>return <expr><name>marked</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>traversestrongtable</name> <parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>limit</name> <init>= <expr><call><name>gnodelast</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>asize</name> <init>= <expr><call><name>luaH_realasize</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>asize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>  <comment type="block">/* traverse array part */</comment>
    <expr_stmt><expr><call><name>markvalue</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <call><name>gnode</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>limit</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>  <comment type="block">/* traverse hash part */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isempty</name><argument_list>(<argument><expr><call><name>gval</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* entry is empty? */</comment>
      <expr_stmt><expr><call><name>clearkey</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* clear its key */</comment>
    <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>keyisnil</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>markkey</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>markvalue</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><call><name>gval</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>genlink</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><call><name>obj2gco</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>lu_mem</name></type> <name>traversetable</name> <parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>weakkey</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>weakvalue</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>mode</name> <init>= <expr><call><name>gfasttm</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>metatable</name></name></expr></argument>, <argument><expr><name>TM_MODE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>markobjectN</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>metatable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;&amp;</operator> <call><name>ttisstring</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>  <comment type="block">/* is there a weak mode? */</comment>
      <operator>(</operator><call><name>cast_void</name><argument_list>(<argument><expr><name>weakkey</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><call><name>svalue</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'k'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
       <call><name>cast_void</name><argument_list>(<argument><expr><name>weakvalue</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><call><name>svalue</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
       <operator>(</operator><name>weakkey</name> <operator>||</operator> <name>weakvalue</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>  <comment type="block">/* is really weak? */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>weakkey</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* strong keys? */</comment>
      <expr_stmt><expr><call><name>traverseweakvalue</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>!</operator><name>weakvalue</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* strong values? */</comment>
      <expr_stmt><expr><call><name>traverseephemeron</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>  <comment type="block">/* all weak */</comment>
      <expr_stmt><expr><call><name>linkgclist</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>allweak</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>  <comment type="block">/* nothing to traverse now */</comment>
  </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content>  <comment type="block">/* not weak */</comment>
    <expr_stmt><expr><call><name>traversestrongtable</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <return>return <expr><literal type="number">1</literal> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>alimit</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>allocsizenode</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>traverseudata</name> <parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>Udata</name> <modifier>*</modifier></type><name>u</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>markobjectN</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>u</name><operator>-&gt;</operator><name>metatable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* mark its metatable */</comment>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>u</name><operator>-&gt;</operator><name>nuvalue</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>markvalue</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>u</name><operator>-&gt;</operator><name>uv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>uv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  <expr_stmt><expr><call><name>genlink</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><call><name>obj2gco</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal> <operator>+</operator> <name><name>u</name><operator>-&gt;</operator><name>nuvalue</name></name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Traverse a prototype. (While a prototype is being build, its
** arrays can be larger than needed; the extra slots are filled with
** NULL, so the use of 'markobjectN')
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>traverseproto</name> <parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>Proto</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>markobjectN</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>sizek</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>  <comment type="block">/* mark literals */</comment>
    <expr_stmt><expr><call><name>markvalue</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>sizeupvalues</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>  <comment type="block">/* mark upvalue names */</comment>
    <expr_stmt><expr><call><name>markobjectN</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>upvalues</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>sizep</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>  <comment type="block">/* mark nested protos */</comment>
    <expr_stmt><expr><call><name>markobjectN</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>sizelocvars</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>  <comment type="block">/* mark local-variable names */</comment>
    <expr_stmt><expr><call><name>markobjectN</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>locvars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  <return>return <expr><literal type="number">1</literal> <operator>+</operator> <name><name>f</name><operator>-&gt;</operator><name>sizek</name></name> <operator>+</operator> <name><name>f</name><operator>-&gt;</operator><name>sizeupvalues</name></name> <operator>+</operator> <name><name>f</name><operator>-&gt;</operator><name>sizep</name></name> <operator>+</operator> <name><name>f</name><operator>-&gt;</operator><name>sizelocvars</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>traverseCclosure</name> <parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>CClosure</name> <modifier>*</modifier></type><name>cl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cl</name><operator>-&gt;</operator><name>nupvalues</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>  <comment type="block">/* mark its upvalues */</comment>
    <expr_stmt><expr><call><name>markvalue</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>upvalue</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  <return>return <expr><literal type="number">1</literal> <operator>+</operator> <name><name>cl</name><operator>-&gt;</operator><name>nupvalues</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Traverse a Lua closure, marking its prototype and its upvalues.
** (Both can be NULL while closure is being created.)
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>traverseLclosure</name> <parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>LClosure</name> <modifier>*</modifier></type><name>cl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>markobjectN</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>cl</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* mark its prototype */</comment>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cl</name><operator>-&gt;</operator><name>nupvalues</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>  <comment type="block">/* visit its upvalues */</comment>
    <decl_stmt><decl><type><name>UpVal</name> <modifier>*</modifier></type><name>uv</name> <init>= <expr><name><name>cl</name><operator>-&gt;</operator><name>upvals</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>markobjectN</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* mark upvalue */</comment>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">1</literal> <operator>+</operator> <name><name>cl</name><operator>-&gt;</operator><name>nupvalues</name></name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Traverse a thread, marking the elements in the stack up to its top
** and cleaning the rest of the stack in the final traversal. That
** ensures that the entire stack have valid (non-dead) objects.
** Threads have no barriers. In gen. mode, old threads must be visited
** at every cycle, because they might point to young objects.  In inc.
** mode, the thread can still be modified before the end of the cycle,
** and therefore it must be visited again in the atomic phase. To ensure
** these visits, threads must return to a gray list if they are not new
** (which can only happen in generational mode) or if the traverse is in
** the propagate phase (which can only happen in incremental mode).
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>traversethread</name> <parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>UpVal</name> <modifier>*</modifier></type><name>uv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>StkId</name></type> <name>o</name> <init>= <expr><name><name>th</name><operator>-&gt;</operator><name>stack</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>isold</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>g</name><operator>-&gt;</operator><name>gcstate</name></name> <operator>==</operator> <name>GCSpropagate</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>linkgclist</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>grayagain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* insert into 'grayagain' list */</comment>
  <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* stack not completely built yet */</comment>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>gcstate</name></name> <operator>==</operator> <name>GCSatomic</name> <operator>||</operator>
             <name><name>th</name><operator>-&gt;</operator><name>openupval</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>isintwups</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init>;</init> <condition><expr><name>o</name> <operator>&lt;</operator> <name><name>th</name><operator>-&gt;</operator><name>top</name></name></expr>;</condition> <incr><expr><name>o</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>  <comment type="block">/* mark live elements in the stack */</comment>
    <expr_stmt><expr><call><name>markvalue</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  <for>for <control>(<init><expr><name>uv</name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>openupval</name></name></expr>;</init> <condition><expr><name>uv</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>uv</name> <operator>=</operator> <name><name>uv</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>open</name><operator>.</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>markobject</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>  <comment type="block">/* open upvalues cannot be collected */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>gcstate</name></name> <operator>==</operator> <name>GCSatomic</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* final traversal? */</comment>
    <decl_stmt><decl><type><name>StkId</name></type> <name>lim</name> <init>= <expr><name><name>th</name><operator>-&gt;</operator><name>stack</name></name> <operator>+</operator> <name><name>th</name><operator>-&gt;</operator><name>stacksize</name></name></expr></init></decl>;</decl_stmt>  <comment type="block">/* real end of stack */</comment>
    <for>for <control>(<init>;</init> <condition><expr><name>o</name> <operator>&lt;</operator> <name>lim</name></expr>;</condition> <incr><expr><name>o</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>  <comment type="block">/* clear not-marked stack slice */</comment>
      <expr_stmt><expr><call><name>setnilvalue</name><argument_list>(<argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <comment type="block">/* 'remarkupvals' may have removed thread from 'twups' list */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isintwups</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>th</name><operator>-&gt;</operator><name>openupval</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>twups</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>twups</name></name></expr>;</expr_stmt>  <comment type="block">/* link it back to the list */</comment>
      <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>twups</name></name> <operator>=</operator> <name>th</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>g</name><operator>-&gt;</operator><name>gcemergency</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaD_shrinkstack</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block">/* do not change stack in emergency cycle */</comment>
  <return>return <expr><literal type="number">1</literal> <operator>+</operator> <name><name>th</name><operator>-&gt;</operator><name>stacksize</name></name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** traverse one gray object, turning it to black.
*/</comment>
<function><type><specifier>static</specifier> <name>lu_mem</name></type> <name>propagatemark</name> <parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>gray</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>nw2black</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gray</name></name> <operator>=</operator> <operator>*</operator><call><name>getgclist</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* remove from 'gray' list */</comment>
  <switch>switch <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>tt</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>LUA_VTABLE</name></expr>:</case> <return>return <expr><call><name>traversetable</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><call><name>gco2t</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>LUA_VUSERDATA</name></expr>:</case> <return>return <expr><call><name>traverseudata</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><call><name>gco2u</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>LUA_VLCL</name></expr>:</case> <return>return <expr><call><name>traverseLclosure</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><call><name>gco2lcl</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>LUA_VCCL</name></expr>:</case> <return>return <expr><call><name>traverseCclosure</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><call><name>gco2ccl</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>LUA_VPROTO</name></expr>:</case> <return>return <expr><call><name>traverseproto</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><call><name>gco2p</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>LUA_VTHREAD</name></expr>:</case> <return>return <expr><call><name>traversethread</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><call><name>gco2th</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default> <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>lu_mem</name></type> <name>propagateall</name> <parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lu_mem</name></type> <name>tot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>gray</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>tot</name> <operator>+=</operator> <call><name>propagatemark</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
  <return>return <expr><name>tot</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Traverse all ephemeron tables propagating marks from keys to values.
** Repeat until it converges, that is, nothing new is marked. 'dir'
** inverts the direction of the traversals, trying to speed up
** convergence on chains in the same table.
**
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>convergeephemerons</name> <parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>changed</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>dir</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <do>do <block>{<block_content>
    <decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>w</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>ephemeron</name></name></expr></init></decl>;</decl_stmt>  <comment type="block">/* get ephemeron list */</comment>
    <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>ephemeron</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>  <comment type="block">/* tables may return to this list when traversed */</comment>
    <expr_stmt><expr><name>changed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>(</operator><name>w</name> <operator>=</operator> <name>next</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* for each ephemeron table */</comment>
      <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><call><name>gco2t</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>gclist</name></name></expr>;</expr_stmt>  <comment type="block">/* list is rebuilt during loop */</comment>
      <expr_stmt><expr><call><name>nw2black</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* out of the list (for now) */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>traverseephemeron</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* marked some value? */</comment>
        <expr_stmt><expr><call><name>propagateall</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* propagate changes */</comment>
        <expr_stmt><expr><name>changed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>  <comment type="block">/* will have to revisit all ephemeron tables */</comment>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><name>dir</name> <operator>=</operator> <operator>!</operator><name>dir</name></expr>;</expr_stmt>  <comment type="block">/* invert direction next time */</comment>
  </block_content>}</block> while <condition>(<expr><name>changed</name></expr>)</condition>;</do>  <comment type="block">/* repeat until no more changes */</comment>
</block_content>}</block></function>

<comment type="block">/* }====================================================== */</comment>


<comment type="block">/*
** {======================================================
** Sweep Functions
** =======================================================
*/</comment>


<comment type="block">/*
** clear entries with unmarked keys from all weaktables in list 'l'
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>clearbykeys</name> <parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <call><name>gco2t</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>gclist</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><call><name>gco2t</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>limit</name> <init>= <expr><call><name>gnodelast</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <call><name>gnode</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>limit</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>iscleared</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><call><name>gckeyN</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* unmarked key? */</comment>
        <expr_stmt><expr><call><name>setempty</name><argument_list>(<argument><expr><call><name>gval</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* remove entry */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>isempty</name><argument_list>(<argument><expr><call><name>gval</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* is entry empty? */</comment>
        <expr_stmt><expr><call><name>clearkey</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* clear its key */</comment>
    </block_content>}</block></for>
  </block_content>}</block></for>
</block_content>}</block></function>


<comment type="block">/*
** clear entries with unmarked values from all weaktables in list 'l' up
** to element 'f'
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>clearbyvalues</name> <parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init>;</init> <condition><expr><name>l</name> <operator>!=</operator> <name>f</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <call><name>gco2t</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>gclist</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><call><name>gco2t</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>limit</name> <init>= <expr><call><name>gnodelast</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>asize</name> <init>= <expr><call><name>luaH_realasize</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>asize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>iscleared</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><call><name>gcvalueN</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* value was collected? */</comment>
        <expr_stmt><expr><call><name>setempty</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* remove entry */</comment>
    </block_content>}</block></for>
    <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <call><name>gnode</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>limit</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>iscleared</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><call><name>gcvalueN</name><argument_list>(<argument><expr><call><name>gval</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* unmarked value? */</comment>
        <expr_stmt><expr><call><name>setempty</name><argument_list>(<argument><expr><call><name>gval</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* remove entry */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>isempty</name><argument_list>(<argument><expr><call><name>gval</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* is entry empty? */</comment>
        <expr_stmt><expr><call><name>clearkey</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* clear its key */</comment>
    </block_content>}</block></for>
  </block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>freeupval</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>UpVal</name> <modifier>*</modifier></type><name>uv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>upisopen</name><argument_list>(<argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaF_unlinkupval</name><argument_list>(<argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>luaM_free</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>freeobj</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>tt</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>LUA_VPROTO</name></expr>:</case>
      <expr_stmt><expr><call><name>luaF_freeproto</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>gco2p</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>LUA_VUPVAL</name></expr>:</case>
      <expr_stmt><expr><call><name>freeupval</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>gco2upv</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>LUA_VLCL</name></expr>:</case>
      <expr_stmt><expr><call><name>luaM_freemem</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><call><name>sizeLclosure</name><argument_list>(<argument><expr><call><name>gco2lcl</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>nupvalues</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>LUA_VCCL</name></expr>:</case>
      <expr_stmt><expr><call><name>luaM_freemem</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><call><name>sizeCclosure</name><argument_list>(<argument><expr><call><name>gco2ccl</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>nupvalues</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>LUA_VTABLE</name></expr>:</case>
      <expr_stmt><expr><call><name>luaH_free</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>gco2t</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>LUA_VTHREAD</name></expr>:</case>
      <expr_stmt><expr><call><name>luaE_freethread</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>gco2th</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>LUA_VUSERDATA</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>Udata</name> <modifier>*</modifier></type><name>u</name> <init>= <expr><call><name>gco2u</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>luaM_freemem</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><call><name>sizeudata</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>nuvalue</name></name></expr></argument>, <argument><expr><name><name>u</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>LUA_VSHRSTR</name></expr>:</case>
      <expr_stmt><expr><call><name>luaS_remove</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>gco2ts</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* remove it from hash table */</comment>
      <expr_stmt><expr><call><name>luaM_freemem</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><call><name>sizelstring</name><argument_list>(<argument><expr><call><name>gco2ts</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>shrlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>LUA_VLNGSTR</name></expr>:</case>
      <expr_stmt><expr><call><name>luaM_freemem</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><call><name>sizelstring</name><argument_list>(<argument><expr><call><name>gco2ts</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>lnglen</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default> <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>
</block_content>}</block></function>


<comment type="block">/*
** sweep at most 'countin' elements from a list of GCObjects erasing dead
** objects, where a dead object is one marked with the old (non current)
** white; change all non-dead objects back to white, preparing for next
** collection cycle. Return where to continue the traversal or NULL if
** list is finished. ('*countout' gets the number of elements traversed.)
*/</comment>
<function><type><specifier>static</specifier> <name>GCObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>sweeplist</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>GCObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>countin</name></decl></parameter>,
                             <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>countout</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ow</name> <init>= <expr><call><name>otherwhite</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>white</name> <init>= <expr><call><name>luaC_white</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* current white */</comment>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>countin</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>curr</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>marked</name> <init>= <expr><name><name>curr</name><operator>-&gt;</operator><name>marked</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isdeadm</name><argument_list>(<argument><expr><name>ow</name></expr></argument>, <argument><expr><name>marked</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* is 'curr' dead? */</comment>
      <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>  <comment type="block">/* remove 'curr' from list */</comment>
      <expr_stmt><expr><call><name>freeobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* erase 'curr' */</comment>
    </block_content>}</block></if>
    <else>else <block>{<block_content>  <comment type="block">/* change mark to 'white' */</comment>
      <expr_stmt><expr><name><name>curr</name><operator>-&gt;</operator><name>marked</name></name> <operator>=</operator> <call><name>cast_byte</name><argument_list>(<argument><expr><operator>(</operator><name>marked</name> <operator>&amp;</operator> <operator>~</operator><name>maskgcbits</name><operator>)</operator> <operator>|</operator> <name>white</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>  <comment type="block">/* go to next element */</comment>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><name>countout</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator><name>countout</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* number of elements traversed */</comment>
  <return>return <expr><ternary><condition><expr><operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** sweep a list until a live object (or end of list)
*/</comment>
<function><type><specifier>static</specifier> <name>GCObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>sweeptolive</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>GCObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>old</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>sweeplist</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><name>p</name> <operator>==</operator> <name>old</name></expr>)</condition>;</do>
  <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* }====================================================== */</comment>


<comment type="block">/*
** {======================================================
** Finalization
** =======================================================
*/</comment>

<comment type="block">/*
** If possible, shrink string table.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>checkSizes</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>g</name><operator>-&gt;</operator><name>gcemergency</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>strt</name><operator>.</operator><name>nuse</name></name> <operator>&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>strt</name><operator>.</operator><name>size</name></name> <operator>/</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* string table too big? */</comment>
      <decl_stmt><decl><type><name>l_mem</name></type> <name>olddebt</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>GCdebt</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>luaS_resize</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>strt</name><operator>.</operator><name>size</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>GCestimate</name></name> <operator>+=</operator> <name><name>g</name><operator>-&gt;</operator><name>GCdebt</name></name> <operator>-</operator> <name>olddebt</name></expr>;</expr_stmt>  <comment type="block">/* correct estimate */</comment>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Get the next udata to be finalized from the 'tobefnz' list, and
** link it back into the 'allgc' list.
*/</comment>
<function><type><specifier>static</specifier> <name>GCObject</name> <modifier>*</modifier></type><name>udata2finalize</name> <parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>tobefnz</name></name></expr></init></decl>;</decl_stmt>  <comment type="block">/* get first element */</comment>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>tofinalize</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>tobefnz</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>  <comment type="block">/* remove it from 'tobefnz' list */</comment>
  <expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>allgc</name></name></expr>;</expr_stmt>  <comment type="block">/* return it to 'allgc' list */</comment>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>allgc</name></name> <operator>=</operator> <name>o</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>resetbit</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>marked</name></name></expr></argument>, <argument><expr><name>FINALIZEDBIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* object is "normal" again */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>issweepphase</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>makewhite</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* "sweep" object */</comment>
  <if type="elseif">else if <condition>(<expr><call><name>getage</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>G_OLD1</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>firstold1</name></name> <operator>=</operator> <name>o</name></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* it is the first OLD1 object in the list */</comment>
  <return>return <expr><name>o</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>dothecall</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ud</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>ud</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaD_callnoyield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>GCTM</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>tm</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TValue</name></type> <name>v</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>g</name><operator>-&gt;</operator><name>gcemergency</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setgcovalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><call><name>udata2finalize</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>luaT_gettmbyobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>TM_GC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>notm</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* is there a finalizer? */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>lu_byte</name></type> <name>oldah</name> <init>= <expr><name><name>L</name><operator>-&gt;</operator><name>allowhook</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>running</name>  <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>gcrunning</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>allowhook</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="block">/* stop debug hooks during GC metamethod */</comment>
    <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gcrunning</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="block">/* avoid GC steps */</comment>
    <expr_stmt><expr><call><name>setobj2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>++</operator></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* push finalizer... */</comment>
    <expr_stmt><expr><call><name>setobj2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* ... and its argument */</comment>
    <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>ci</name><operator>-&gt;</operator><name>callstatus</name></name> <operator>|=</operator> <name>CIST_FIN</name></expr>;</expr_stmt>  <comment type="block">/* will run a finalizer */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>luaD_pcall</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>dothecall</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>savestack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>ci</name><operator>-&gt;</operator><name>callstatus</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CIST_FIN</name></expr>;</expr_stmt>  <comment type="block">/* not running a finalizer anymore */</comment>
    <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>allowhook</name></name> <operator>=</operator> <name>oldah</name></expr>;</expr_stmt>  <comment type="block">/* restore hooks */</comment>
    <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gcrunning</name></name> <operator>=</operator> <name>running</name></expr>;</expr_stmt>  <comment type="block">/* restore state */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>status</name> <operator>!=</operator> <name>LUA_OK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* error while running __gc? */</comment>
      <expr_stmt><expr><call><name>luaE_warnerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"__gc metamethod"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>--</operator></expr>;</expr_stmt>  <comment type="block">/* pops error object */</comment>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Call a few finalizers
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>runafewfinalizers</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>g</name><operator>-&gt;</operator><name>tobefnz</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>GCTM</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>  <comment type="block">/* call one finalizer */</comment>
  <return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** call all pending finalizers
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>callallpendingfinalizers</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>tobefnz</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>GCTM</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>


<comment type="block">/*
** find last 'next' field in list 'p' list (to add elements in its end)
*/</comment>
<function><type><specifier>static</specifier> <name>GCObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>findlast</name> <parameter_list>(<parameter><decl><type><name>GCObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
  <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Move all unreachable objects (or 'all' objects) that need
** finalization from list 'finobj' to list 'tobefnz' (to be finalized).
** (Note that objects after 'finobjold1' cannot be white, so they
** don't need to be traversed. In incremental mode, 'finobjold1' is NULL,
** so the whole list is traversed.)
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>separatetobefnz</name> <parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>all</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>finobj</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>lastnext</name> <init>= <expr><call><name>findlast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>tobefnz</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>curr</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>)</operator> <operator>!=</operator> <name><name>g</name><operator>-&gt;</operator><name>finobjold1</name></name></expr>)</condition> <block>{<block_content>  <comment type="block">/* traverse all finalizable objects */</comment>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>tofinalize</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>iswhite</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>all</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* not being collected? */</comment>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* don't bother with it */</comment>
    <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>curr</name> <operator>==</operator> <name><name>g</name><operator>-&gt;</operator><name>finobjsur</name></name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* removing 'finobjsur'? */</comment>
        <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>finobjsur</name></name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* correct it */</comment>
      <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>  <comment type="block">/* remove 'curr' from 'finobj' list */</comment>
      <expr_stmt><expr><name><name>curr</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>*</operator><name>lastnext</name></expr>;</expr_stmt>  <comment type="block">/* link at the end of 'tobefnz' list */</comment>
      <expr_stmt><expr><operator>*</operator><name>lastnext</name> <operator>=</operator> <name>curr</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>lastnext</name> <operator>=</operator> <operator>&amp;</operator><name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>


<comment type="block">/*
** If pointer 'p' points to 'o', move it to the next element.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>checkpointer</name> <parameter_list>(<parameter><decl><type><name>GCObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Correct pointers to objects inside 'allgc' list when
** object 'o' is being removed from the list.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>correctpointers</name> <parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>checkpointer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>survival</name></name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>checkpointer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>old1</name></name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>checkpointer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>reallyold</name></name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>checkpointer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>firstold1</name></name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** if object 'o' has a finalizer, remove it from 'allgc' list (must
** search the list to find it) and link it in 'finobj' list.
*/</comment>
<function><type><name>void</name></type> <name>luaC_checkfinalizer</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>mt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tofinalize</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>||</operator>                 <comment type="block">/* obj. is already marked... */</comment>
      <call><name>gfasttm</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>mt</name></expr></argument>, <argument><expr><name>TM_GC</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>   <comment type="block">/* or has no finalizer? */</comment>
    <return>return;</return></block_content></block></if>  <comment type="block">/* nothing to be done */</comment>
  <else>else <block>{<block_content>  <comment type="block">/* move 'o' to 'finobj' list */</comment>
    <decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>issweepphase</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>makewhite</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* "sweep" object 'o' */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>sweepgc</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* should not remove 'sweepgc' object */</comment>
        <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>sweepgc</name></name> <operator>=</operator> <call><name>sweeptolive</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>sweepgc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* change 'sweepgc' */</comment>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>correctpointers</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <comment type="block">/* search for pointer pointing to 'o' */</comment>
    <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>allgc</name></name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>o</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content> <comment type="block">/* empty */</comment> </block_content>}</block></for>
    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>  <comment type="block">/* remove 'o' from 'allgc' list */</comment>
    <expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>finobj</name></name></expr>;</expr_stmt>  <comment type="block">/* link it in 'finobj' list */</comment>
    <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>finobj</name></name> <operator>=</operator> <name>o</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>l_setbit</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>marked</name></name></expr></argument>, <argument><expr><name>FINALIZEDBIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* mark it as such */</comment>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* }====================================================== */</comment>


<comment type="block">/*
** {======================================================
** Generational Collector
** =======================================================
*/</comment>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>setpause</name> <parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
** Sweep a list of objects to enter generational mode.  Deletes dead
** objects and turns the non dead to old. All non-dead threads---which
** are now old---must be in a gray list. Everything else is not in a
** gray list. Open upvalues are also kept gray.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sweep2old</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>GCObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>curr</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>iswhite</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* is 'curr' dead? */</comment>
      <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>isdead</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>  <comment type="block">/* remove 'curr' from list */</comment>
      <expr_stmt><expr><call><name>freeobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* erase 'curr' */</comment>
    </block_content>}</block></if>
    <else>else <block>{<block_content>  <comment type="block">/* all surviving objects become old */</comment>
      <expr_stmt><expr><call><name>setage</name><argument_list>(<argument><expr><name>curr</name></expr></argument>, <argument><expr><name>G_OLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>tt</name></name> <operator>==</operator> <name>LUA_VTHREAD</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* threads must be watched */</comment>
        <decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>gco2th</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>linkgclist</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>grayagain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* insert into 'grayagain' list */</comment>
      </block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>tt</name></name> <operator>==</operator> <name>LUA_VUPVAL</name> <operator>&amp;&amp;</operator> <call><name>upisopen</name><argument_list>(<argument><expr><call><name>gco2upv</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>set2gray</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* open upvalues are always gray */</comment>
      <else>else<block type="pseudo"><block_content>  <comment type="block">/* everything else is black */</comment>
        <expr_stmt><expr><call><name>nw2black</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>  <comment type="block">/* go to next element */</comment>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>


<comment type="block">/*
** Sweep for generational mode. Delete dead objects. (Because the
** collection is not incremental, there are no "new white" objects
** during the sweep. So, any white object must be dead.) For
** non-dead objects, advance their ages and clear the color of
** new objects. (Old objects keep their colors.)
** The ages of G_TOUCHED1 and G_TOUCHED2 objects cannot be advanced
** here, because these old-generation objects are usually not swept
** here.  They will all be advanced in 'correctgraylist'. That function
** will also remove objects turned white here from any gray list.
*/</comment>
<function><type><specifier>static</specifier> <name>GCObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>sweepgen</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>GCObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>,
                            <parameter><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>limit</name></decl></parameter>, <parameter><decl><type><name>GCObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>pfirstold1</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>lu_byte</name></type> <name><name>nextage</name><index>[]</index></name> <init>= <expr><block>{
    <expr><name>G_SURVIVAL</name></expr>,  <comment type="block">/* from G_NEW */</comment>
    <expr><name>G_OLD1</name></expr>,      <comment type="block">/* from G_SURVIVAL */</comment>
    <expr><name>G_OLD1</name></expr>,      <comment type="block">/* from G_OLD0 */</comment>
    <expr><name>G_OLD</name></expr>,       <comment type="block">/* from G_OLD1 */</comment>
    <expr><name>G_OLD</name></expr>,       <comment type="block">/* from G_OLD (do not change) */</comment>
    <expr><name>G_TOUCHED1</name></expr>,  <comment type="block">/* from G_TOUCHED1 (do not change) */</comment>
    <expr><name>G_TOUCHED2</name></expr>   <comment type="block">/* from G_TOUCHED2 (do not change) */</comment>
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>white</name> <init>= <expr><call><name>luaC_white</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>curr</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>)</operator> <operator>!=</operator> <name>limit</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>iswhite</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* is 'curr' dead? */</comment>
      <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>isold</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isdead</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>  <comment type="block">/* remove 'curr' from list */</comment>
      <expr_stmt><expr><call><name>freeobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* erase 'curr' */</comment>
    </block_content>}</block></if>
    <else>else <block>{<block_content>  <comment type="block">/* correct mark and age */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>getage</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>G_NEW</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* new objects go back to white */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>marked</name> <init>= <expr><name><name>curr</name><operator>-&gt;</operator><name>marked</name></name> <operator>&amp;</operator> <operator>~</operator><name>maskgcbits</name></expr></init></decl>;</decl_stmt>  <comment type="block">/* erase GC bits */</comment>
        <expr_stmt><expr><name><name>curr</name><operator>-&gt;</operator><name>marked</name></name> <operator>=</operator> <call><name>cast_byte</name><argument_list>(<argument><expr><name>marked</name> <operator>|</operator> <name>G_SURVIVAL</name> <operator>|</operator> <name>white</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else <block>{<block_content>  <comment type="block">/* all other objects will be old, and so keep their color */</comment>
        <expr_stmt><expr><call><name>setage</name><argument_list>(<argument><expr><name>curr</name></expr></argument>, <argument><expr><name><name>nextage</name><index>[<expr><call><name>getage</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>getage</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>G_OLD1</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pfirstold1</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><operator>*</operator><name>pfirstold1</name> <operator>=</operator> <name>curr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* first OLD1 object in the list */</comment>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>  <comment type="block">/* go to next element */</comment>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Traverse a list making all its elements white and clearing their
** age. In incremental mode, all objects are 'new' all the time,
** except for fixed strings (which are always old).
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>whitelist</name> <parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>white</name> <init>= <expr><call><name>luaC_white</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>marked</name></name> <operator>=</operator> <call><name>cast_byte</name><argument_list>(<argument><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>marked</name></name> <operator>&amp;</operator> <operator>~</operator><name>maskgcbits</name><operator>)</operator> <operator>|</operator> <name>white</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>


<comment type="block">/*
** Correct a list of gray objects. Return pointer to where rest of the
** list should be linked.
** Because this correction is done after sweeping, young objects might
** be turned white and still be in the list. They are only removed.
** 'TOUCHED1' objects are advanced to 'TOUCHED2' and remain on the list;
** Non-white threads also remain on the list; 'TOUCHED2' objects become
** regular old; they and anything else are removed from the list.
*/</comment>
<function><type><specifier>static</specifier> <name>GCObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>correctgraylist</name> <parameter_list>(<parameter><decl><type><name>GCObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>curr</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>next</name> <init>= <expr><call><name>getgclist</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>iswhite</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <goto>goto <name>remove</name>;</goto></block_content></block></if>  <comment type="block">/* remove all white objects */</comment>
    <if type="elseif">else if <condition>(<expr><call><name>getage</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>G_TOUCHED1</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* touched in this cycle? */</comment>
      <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>isgray</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>nw2black</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* make it black, for next barrier */</comment>
      <expr_stmt><expr><call><name>changeage</name><argument_list>(<argument><expr><name>curr</name></expr></argument>, <argument><expr><name>G_TOUCHED1</name></expr></argument>, <argument><expr><name>G_TOUCHED2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>remain</name>;</goto>  <comment type="block">/* keep it in the list and go to next element */</comment>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>tt</name></name> <operator>==</operator> <name>LUA_VTHREAD</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>isgray</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>remain</name>;</goto>  <comment type="block">/* keep non-white threads on the list */</comment>
    </block_content>}</block></if>
    <else>else <block>{<block_content>  <comment type="block">/* everything else is removed */</comment>
      <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>isold</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* young objects should be white here */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>getage</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>G_TOUCHED2</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* advance from TOUCHED2... */</comment>
        <expr_stmt><expr><call><name>changeage</name><argument_list>(<argument><expr><name>curr</name></expr></argument>, <argument><expr><name>G_TOUCHED2</name></expr></argument>, <argument><expr><name>G_OLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* ... to OLD */</comment>
      <expr_stmt><expr><call><name>nw2black</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* make object black (to be removed) */</comment>
      <goto>goto <name>remove</name>;</goto>
    </block_content>}</block></else></if_stmt>
    <label><name>remove</name>:</label> <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>*</operator><name>next</name></expr>;</expr_stmt> <continue>continue;</continue>
    <label><name>remain</name>:</label> <expr_stmt><expr><name>p</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt> <continue>continue;</continue>
  </block_content>}</block></while>
  <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Correct all gray lists, coalescing them into 'grayagain'.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>correctgraylists</name> <parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>correctgraylist</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>grayagain</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>list</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>weak</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>weak</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>correctgraylist</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>list</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>allweak</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>allweak</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>correctgraylist</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>list</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>ephemeron</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>ephemeron</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>correctgraylist</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Mark black 'OLD1' objects when starting a new young collection.
** Gray objects are already in some gray list, and so will be visited
** in the atomic step.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>markold</name> <parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>from</name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>to</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>getage</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>G_OLD1</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>iswhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>changeage</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>G_OLD1</name></expr></argument>, <argument><expr><name>G_OLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* now they are old */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>isblack</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>reallymarkobject</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>


<comment type="block">/*
** Finish a young-generation collection.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>finishgencycle</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>correctgraylists</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>checkSizes</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gcstate</name></name> <operator>=</operator> <name>GCSpropagate</name></expr>;</expr_stmt>  <comment type="block">/* skip restart */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>g</name><operator>-&gt;</operator><name>gcemergency</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>callallpendingfinalizers</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Does a young collection. First, mark 'OLD1' objects. Then does the
** atomic step. Then, sweep all lists and advance pointers. Finally,
** finish the collection.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>youngcollection</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>psurvival</name></decl>;</decl_stmt>  <comment type="block">/* to point to first non-dead survival object */</comment>
  <decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>dummy</name></decl>;</decl_stmt>  <comment type="block">/* dummy out parameter to 'sweepgen' */</comment>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>gcstate</name></name> <operator>==</operator> <name>GCSpropagate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>firstold1</name></name></expr>)</condition> <block>{<block_content>  <comment type="block">/* are there regular OLD1 objects? */</comment>
    <expr_stmt><expr><call><name>markold</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>firstold1</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>reallyold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* mark them */</comment>
    <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>firstold1</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>  <comment type="block">/* no more OLD1 objects (for now) */</comment>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>markold</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>finobj</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>finobjrold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>markold</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>tobefnz</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>atomic</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* sweep nursery and get a pointer to its last live element */</comment>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gcstate</name></name> <operator>=</operator> <name>GCSswpallgc</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>psurvival</name> <operator>=</operator> <call><name>sweepgen</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>allgc</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>survival</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>firstold1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* sweep 'survival' */</comment>
  <expr_stmt><expr><call><name>sweepgen</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>psurvival</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>old1</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>firstold1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>reallyold</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>old1</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>old1</name></name> <operator>=</operator> <operator>*</operator><name>psurvival</name></expr>;</expr_stmt>  <comment type="block">/* 'survival' survivals are old now */</comment>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>survival</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>allgc</name></name></expr>;</expr_stmt>  <comment type="block">/* all news are survivals */</comment>

  <comment type="block">/* repeat for 'finobj' lists */</comment>
  <expr_stmt><expr><name>dummy</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>  <comment type="block">/* no 'firstold1' optimization for 'finobj' lists */</comment>
  <expr_stmt><expr><name>psurvival</name> <operator>=</operator> <call><name>sweepgen</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>finobj</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>finobjsur</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* sweep 'survival' */</comment>
  <expr_stmt><expr><call><name>sweepgen</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>psurvival</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>finobjold1</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>finobjrold</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>finobjold1</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>finobjold1</name></name> <operator>=</operator> <operator>*</operator><name>psurvival</name></expr>;</expr_stmt>  <comment type="block">/* 'survival' survivals are old now */</comment>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>finobjsur</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>finobj</name></name></expr>;</expr_stmt>  <comment type="block">/* all news are survivals */</comment>

  <expr_stmt><expr><call><name>sweepgen</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>tobefnz</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>finishgencycle</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Clears all gray lists, sweeps objects, and prepare sublists to enter
** generational mode. The sweeps remove dead objects and turn all
** surviving objects to old. Threads go back to 'grayagain'; everything
** else is turned black (not in any gray list).
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>atomic2gen</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>cleargraylists</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* sweep all elements making them old */</comment>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gcstate</name></name> <operator>=</operator> <name>GCSswpallgc</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sweep2old</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>allgc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* everything alive now is old */</comment>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>reallyold</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>old1</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>survival</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>allgc</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>firstold1</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>  <comment type="block">/* there are no OLD1 objects anywhere */</comment>

  <comment type="block">/* repeat for 'finobj' lists */</comment>
  <expr_stmt><expr><call><name>sweep2old</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>finobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>finobjrold</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>finobjold1</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>finobjsur</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>finobj</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sweep2old</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>tobefnz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gckind</name></name> <operator>=</operator> <name>KGC_GEN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>lastatomic</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>GCestimate</name></name> <operator>=</operator> <call><name>gettotalbytes</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* base for memory control */</comment>
  <expr_stmt><expr><call><name>finishgencycle</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Enter generational mode. Must go until the end of an atomic cycle
** to ensure that all objects are correctly marked and weak tables
** are cleared. Then, turn all objects into old and finishes the
** collection.
*/</comment>
<function><type><specifier>static</specifier> <name>lu_mem</name></type> <name>entergen</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lu_mem</name></type> <name>numobjs</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaC_runtilstate</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>bitmask</name><argument_list>(<argument><expr><name>GCSpause</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* prepare to start a new cycle */</comment>
  <expr_stmt><expr><call><name>luaC_runtilstate</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>bitmask</name><argument_list>(<argument><expr><name>GCSpropagate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* start new cycle */</comment>
  <expr_stmt><expr><name>numobjs</name> <operator>=</operator> <call><name>atomic</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* propagates all and then do the atomic stuff */</comment>
  <expr_stmt><expr><call><name>atomic2gen</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>numobjs</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Enter incremental mode. Turn all objects white, make all
** intermediate lists point to NULL (to avoid invalid pointers),
** and go to the pause state.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>enterinc</name> <parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>whitelist</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>allgc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>reallyold</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>old1</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>survival</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>whitelist</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>finobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>whitelist</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>tobefnz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>finobjrold</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>finobjold1</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>finobjsur</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gcstate</name></name> <operator>=</operator> <name>GCSpause</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gckind</name></name> <operator>=</operator> <name>KGC_INC</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>lastatomic</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Change collector mode to 'newmode'.
*/</comment>
<function><type><name>void</name></type> <name>luaC_changemode</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newmode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>newmode</name> <operator>!=</operator> <name><name>g</name><operator>-&gt;</operator><name>gckind</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>newmode</name> <operator>==</operator> <name>KGC_GEN</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* entering generational mode? */</comment>
      <expr_stmt><expr><call><name>entergen</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>enterinc</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>  <comment type="block">/* entering incremental mode */</comment>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>lastatomic</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Does a full collection in generational mode.
*/</comment>
<function><type><specifier>static</specifier> <name>lu_mem</name></type> <name>fullgen</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>enterinc</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>entergen</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Set debt for the next minor collection, which will happen when
** memory grows 'genminormul'%.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>setminordebt</name> <parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>luaE_setdebt</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><call><name>cast</name><argument_list>(<argument><expr><name>l_mem</name></expr></argument>, <argument><expr><operator>(</operator><call><name>gettotalbytes</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">100</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>g</name><operator>-&gt;</operator><name>genminormul</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Does a major collection after last collection was a "bad collection".
**
** When the program is building a big structure, it allocates lots of
** memory but generates very little garbage. In those scenarios,
** the generational mode just wastes time doing small collections, and
** major collections are frequently what we call a "bad collection", a
** collection that frees too few objects. To avoid the cost of switching
** between generational mode and the incremental mode needed for full
** (major) collections, the collector tries to stay in incremental mode
** after a bad collection, and to switch back to generational mode only
** after a "good" collection (one that traverses less than 9/8 objects
** of the previous one).
** The collector must choose whether to stay in incremental mode or to
** switch back to generational mode before sweeping. At this point, it
** does not know the real memory in use, so it cannot use memory to
** decide whether to return to generational mode. Instead, it uses the
** number of objects traversed (returned by 'atomic') as a proxy. The
** field 'g-&gt;lastatomic' keeps this count from the last collection.
** ('g-&gt;lastatomic != 0' also means that the last collection was bad.)
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>stepgenfull</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lu_mem</name></type> <name>newatomic</name></decl>;</decl_stmt>  <comment type="block">/* count of traversed objects */</comment>
  <decl_stmt><decl><type><name>lu_mem</name></type> <name>lastatomic</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>lastatomic</name></name></expr></init></decl>;</decl_stmt>  <comment type="block">/* count from last collection */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>gckind</name></name> <operator>==</operator> <name>KGC_GEN</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* still in generational mode? */</comment>
    <expr_stmt><expr><call><name>enterinc</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* enter incremental mode */</comment>
  <expr_stmt><expr><call><name>luaC_runtilstate</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>bitmask</name><argument_list>(<argument><expr><name>GCSpropagate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* start new cycle */</comment>
  <expr_stmt><expr><name>newatomic</name> <operator>=</operator> <call><name>atomic</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* mark everybody */</comment>
  <if_stmt><if>if <condition>(<expr><name>newatomic</name> <operator>&lt;</operator> <name>lastatomic</name> <operator>+</operator> <operator>(</operator><name>lastatomic</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition> <block>{<block_content>  <comment type="block">/* good collection? */</comment>
    <expr_stmt><expr><call><name>atomic2gen</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* return to generational mode */</comment>
    <expr_stmt><expr><call><name>setminordebt</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else <block>{<block_content>  <comment type="block">/* another bad collection; stay in incremental mode */</comment>
    <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>GCestimate</name></name> <operator>=</operator> <call><name>gettotalbytes</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* first estimate */</comment><empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>entersweep</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaC_runtilstate</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>bitmask</name><argument_list>(<argument><expr><name>GCSpause</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* finish collection */</comment>
    <expr_stmt><expr><call><name>setpause</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>lastatomic</name></name> <operator>=</operator> <name>newatomic</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Does a generational "step".
** Usually, this means doing a minor collection and setting the debt to
** make another collection when memory grows 'genminormul'% larger.
**
** However, there are exceptions.  If memory grows 'genmajormul'%
** larger than it was at the end of the last major collection (kept
** in 'g-&gt;GCestimate'), the function does a major collection. At the
** end, it checks whether the major collection was able to free a
** decent amount of memory (at least half the growth in memory since
** previous major collection). If so, the collector keeps its state,
** and the next collection will probably be minor again. Otherwise,
** we have what we call a "bad collection". In that case, set the field
** 'g-&gt;lastatomic' to signal that fact, so that the next collection will
** go to 'stepgenfull'.
**
** 'GCdebt &lt;= 0' means an explicit call to GC step with "size" zero;
** in that case, do a minor collection.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>genstep</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>lastatomic</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* last collection was a bad one? */</comment>
    <expr_stmt><expr><call><name>stepgenfull</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* do a full step */</comment>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>lu_mem</name></type> <name>majorbase</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>GCestimate</name></name></expr></init></decl>;</decl_stmt>  <comment type="block">/* memory after last major collection */</comment>
    <decl_stmt><decl><type><name>lu_mem</name></type> <name>majorinc</name> <init>= <expr><operator>(</operator><name>majorbase</name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator> <operator>*</operator> <call><name>getgcparam</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>genmajormul</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>GCdebt</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>gettotalbytes</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>majorbase</name> <operator>+</operator> <name>majorinc</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>lu_mem</name></type> <name>numobjs</name> <init>= <expr><call><name>fullgen</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* do a major collection */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>gettotalbytes</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>majorbase</name> <operator>+</operator> <operator>(</operator><name>majorinc</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <comment type="block">/* collected at least half of memory growth since last major
           collection; keep doing minor collections */</comment>
        <expr_stmt><expr><call><name>setminordebt</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else <block>{<block_content>  <comment type="block">/* bad collection */</comment>
        <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>lastatomic</name></name> <operator>=</operator> <name>numobjs</name></expr>;</expr_stmt>  <comment type="block">/* signal that last collection was bad */</comment>
        <expr_stmt><expr><call><name>setpause</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* do a long wait for next (major) collection */</comment>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content>  <comment type="block">/* regular case; do a minor collection */</comment>
      <expr_stmt><expr><call><name>youngcollection</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setminordebt</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>GCestimate</name></name> <operator>=</operator> <name>majorbase</name></expr>;</expr_stmt>  <comment type="block">/* preserve base value */</comment>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>isdecGCmodegen</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* }====================================================== */</comment>


<comment type="block">/*
** {======================================================
** GC control
** =======================================================
*/</comment>


<comment type="block">/*
** Set the "time" to wait before starting a new GC cycle; cycle will
** start when memory use hits the threshold of ('estimate' * pause /
** PAUSEADJ). (Division by 'estimate' should be OK: it cannot be zero,
** because Lua cannot even start with less than PAUSEADJ bytes).
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>setpause</name> <parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>l_mem</name></type> <name>threshold</name></decl>, <decl><type ref="prev"/><name>debt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>pause</name> <init>= <expr><call><name>getgcparam</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>gcpause</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>l_mem</name></type> <name>estimate</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>GCestimate</name></name> <operator>/</operator> <name>PAUSEADJ</name></expr></init></decl>;</decl_stmt>  <comment type="block">/* adjust 'estimate' */</comment>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>estimate</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>threshold</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>pause</name> <operator>&lt;</operator> <name>MAX_LMEM</name> <operator>/</operator> <name>estimate</name><operator>)</operator></expr>  <comment type="block">/* overflow? */</comment>
            ?</condition><then> <expr><name>estimate</name> <operator>*</operator> <name>pause</name></expr>  <comment type="block">/* no overflow */</comment>
            </then><else>: <expr><name>MAX_LMEM</name></expr></else></ternary></expr>;</expr_stmt>  <comment type="block">/* overflow; truncate to maximum */</comment>
  <expr_stmt><expr><name>debt</name> <operator>=</operator> <call><name>gettotalbytes</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>threshold</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>debt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>debt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>luaE_setdebt</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>debt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Enter first sweep phase.
** The call to 'sweeptolive' makes the pointer point to an object
** inside the list (instead of to the header), so that the real sweep do
** not need to skip objects created between "now" and the start of the
** real sweep.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>entersweep</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gcstate</name></name> <operator>=</operator> <name>GCSswpallgc</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>sweepgc</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>sweepgc</name></name> <operator>=</operator> <call><name>sweeptolive</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>allgc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Delete all objects in list 'p' until (but not including) object
** 'limit'.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>deletelist</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>limit</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><name>p</name> <operator>!=</operator> <name>limit</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>freeobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>


<comment type="block">/*
** Call all finalizers of the objects in the given Lua state, and
** then free all objects, except for the main thread.
*/</comment>
<function><type><name>void</name></type> <name>luaC_freeallobjects</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaC_changemode</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>KGC_INC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>separatetobefnz</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* separate all objects with finalizers */</comment>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>finobj</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>callallpendingfinalizers</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>deletelist</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>allgc</name></name></expr></argument>, <argument><expr><call><name>obj2gco</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>mainthread</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>deletelist</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>finobj</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>deletelist</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>fixedgc</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* collect fixed objects */</comment>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>strt</name><operator>.</operator><name>nuse</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>lu_mem</name></type> <name>atomic</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lu_mem</name></type> <name>work</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>origweak</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>origall</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>grayagain</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>grayagain</name></name></expr></init></decl>;</decl_stmt>  <comment type="block">/* save original list */</comment>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>grayagain</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>ephemeron</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>g</name><operator>-&gt;</operator><name>weak</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>iswhite</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>mainthread</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gcstate</name></name> <operator>=</operator> <name>GCSatomic</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>markobject</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* mark running thread */</comment>
  <comment type="block">/* registry and global metatables may be changed by API */</comment>
  <expr_stmt><expr><call><name>markvalue</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>l_registry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>markmt</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* mark global metatables */</comment>
  <expr_stmt><expr><name>work</name> <operator>+=</operator> <call><name>propagateall</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* empties 'gray' list */</comment>
  <comment type="block">/* remark occasional upvalues of (maybe) dead threads */</comment>
  <expr_stmt><expr><name>work</name> <operator>+=</operator> <call><name>remarkupvals</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>work</name> <operator>+=</operator> <call><name>propagateall</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* propagate changes */</comment>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gray</name></name> <operator>=</operator> <name>grayagain</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>work</name> <operator>+=</operator> <call><name>propagateall</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* traverse 'grayagain' list */</comment>
  <expr_stmt><expr><call><name>convergeephemerons</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* at this point, all strongly accessible objects are marked. */</comment>
  <comment type="block">/* Clear values from weak tables, before checking finalizers */</comment>
  <expr_stmt><expr><call><name>clearbyvalues</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>weak</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>clearbyvalues</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>allweak</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>origweak</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>weak</name></name></expr>;</expr_stmt> <expr_stmt><expr><name>origall</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>allweak</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>separatetobefnz</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* separate objects to be finalized */</comment>
  <expr_stmt><expr><name>work</name> <operator>+=</operator> <call><name>markbeingfnz</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* mark objects that will be finalized */</comment>
  <expr_stmt><expr><name>work</name> <operator>+=</operator> <call><name>propagateall</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* remark, to propagate 'resurrection' */</comment>
  <expr_stmt><expr><call><name>convergeephemerons</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* at this point, all resurrected objects are marked. */</comment>
  <comment type="block">/* remove dead objects from weak tables */</comment>
  <expr_stmt><expr><call><name>clearbykeys</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>ephemeron</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* clear keys from all ephemeron tables */</comment>
  <expr_stmt><expr><call><name>clearbykeys</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>allweak</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* clear keys from all 'allweak' tables */</comment>
  <comment type="block">/* clear values from resurrected weak tables */</comment>
  <expr_stmt><expr><call><name>clearbyvalues</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>weak</name></name></expr></argument>, <argument><expr><name>origweak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>clearbyvalues</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>allweak</name></name></expr></argument>, <argument><expr><name>origall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaS_clearcache</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>currentwhite</name></name> <operator>=</operator> <call><name>cast_byte</name><argument_list>(<argument><expr><call><name>otherwhite</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* flip current white */</comment>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>gray</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>work</name></expr>;</return>  <comment type="block">/* estimate of slots marked by 'atomic' */</comment>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>sweepstep</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>,
                      <parameter><decl><type><name>int</name></type> <name>nextstate</name></decl></parameter>, <parameter><decl><type><name>GCObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>nextlist</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>sweepgc</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>l_mem</name></type> <name>olddebt</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>GCdebt</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>sweepgc</name></name> <operator>=</operator> <call><name>sweeplist</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>sweepgc</name></name></expr></argument>, <argument><expr><name>GCSWEEPMAX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>GCestimate</name></name> <operator>+=</operator> <name><name>g</name><operator>-&gt;</operator><name>GCdebt</name></name> <operator>-</operator> <name>olddebt</name></expr>;</expr_stmt>  <comment type="block">/* update estimate */</comment>
    <return>return <expr><name>count</name></expr>;</return>
  </block_content>}</block></if>
  <else>else <block>{<block_content>  <comment type="block">/* enter next state */</comment>
    <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gcstate</name></name> <operator>=</operator> <name>nextstate</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>sweepgc</name></name> <operator>=</operator> <name>nextlist</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>  <comment type="block">/* no work done */</comment>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>lu_mem</name></type> <name>singlestep</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>gcstate</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>GCSpause</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>restartcollection</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gcstate</name></name> <operator>=</operator> <name>GCSpropagate</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>GCSpropagate</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>gray</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* no more gray objects? */</comment>
        <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gcstate</name></name> <operator>=</operator> <name>GCSenteratomic</name></expr>;</expr_stmt>  <comment type="block">/* finish propagate phase */</comment>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if>
      <else>else<block type="pseudo"><block_content>
        <return>return <expr><call><name>propagatemark</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>  <comment type="block">/* traverse one gray object */</comment>
    </block_content>}</block>
    <case>case <expr><name>GCSenteratomic</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>lu_mem</name></type> <name>work</name> <init>= <expr><call><name>atomic</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* work is what was traversed by 'atomic' */</comment>
      <expr_stmt><expr><call><name>entersweep</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>GCestimate</name></name> <operator>=</operator> <call><name>gettotalbytes</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* first estimate */</comment><empty_stmt>;</empty_stmt>
      <return>return <expr><name>work</name></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>GCSswpallgc</name></expr>:</case> <block>{<block_content>  <comment type="block">/* sweep "regular" objects */</comment>
      <return>return <expr><call><name>sweepstep</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>GCSswpfinobj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>finobj</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>GCSswpfinobj</name></expr>:</case> <block>{<block_content>  <comment type="block">/* sweep objects with finalizers */</comment>
      <return>return <expr><call><name>sweepstep</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>GCSswptobefnz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>tobefnz</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>GCSswptobefnz</name></expr>:</case> <block>{<block_content>  <comment type="block">/* sweep objects to be finalized */</comment>
      <return>return <expr><call><name>sweepstep</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>GCSswpend</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>GCSswpend</name></expr>:</case> <block>{<block_content>  <comment type="block">/* finish sweeps */</comment>
      <expr_stmt><expr><call><name>checkSizes</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gcstate</name></name> <operator>=</operator> <name>GCScallfin</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>GCScallfin</name></expr>:</case> <block>{<block_content>  <comment type="block">/* call remaining finalizers */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>tobefnz</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>g</name><operator>-&gt;</operator><name>gcemergency</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>runafewfinalizers</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>GCFINMAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>n</name> <operator>*</operator> <name>GCFINALIZECOST</name></expr>;</return>
      </block_content>}</block></if>
      <else>else <block>{<block_content>  <comment type="block">/* emergency mode or no more finalizers */</comment>
        <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gcstate</name></name> <operator>=</operator> <name>GCSpause</name></expr>;</expr_stmt>  <comment type="block">/* finish collection */</comment>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block>
    <default>default:</default> <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>


<comment type="block">/*
** advances the garbage collector until it reaches a state allowed
** by 'statemask'
*/</comment>
<function><type><name>void</name></type> <name>luaC_runtilstate</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>statesmask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>!</operator><call><name>testbit</name><argument_list>(<argument><expr><name>statesmask</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>gcstate</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>singlestep</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>


<comment type="block">/*
** Performs a basic incremental step. The debt and step size are
** converted from bytes to "units of work"; then the function loops
** running single steps until adding that many units of work or
** finishing a cycle (pause state). Finally, it sets the debt that
** controls when next step will be performed.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>incstep</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>stepmul</name> <init>= <expr><operator>(</operator><call><name>getgcparam</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>gcstepmul</name></name></expr></argument>)</argument_list></call> <operator>|</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>  <comment type="block">/* avoid division by 0 */</comment>
  <decl_stmt><decl><type><name>l_mem</name></type> <name>debt</name> <init>= <expr><operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>GCdebt</name></name> <operator>/</operator> <name>WORK2MEM</name><operator>)</operator> <operator>*</operator> <name>stepmul</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>l_mem</name></type> <name>stepsize</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>gcstepsize</name></name> <operator>&lt;=</operator> <call><name>log2maxs</name><argument_list>(<argument><expr><name>l_mem</name></expr></argument>)</argument_list></call><operator>)</operator></expr>
                 ?</condition><then> <expr><operator>(</operator><operator>(</operator><call><name>cast</name><argument_list>(<argument><expr><name>l_mem</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>gcstepsize</name></name><operator>)</operator> <operator>/</operator> <name>WORK2MEM</name><operator>)</operator> <operator>*</operator> <name>stepmul</name></expr>
                 </then><else>: <expr><name>MAX_LMEM</name></expr></else></ternary></expr></init></decl>;</decl_stmt>  <comment type="block">/* overflow; keep maximum value */</comment>
  <do>do <block>{<block_content>  <comment type="block">/* repeat until pause or enough "credit" (negative debt) */</comment>
    <decl_stmt><decl><type><name>lu_mem</name></type> <name>work</name> <init>= <expr><call><name>singlestep</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* perform one single step */</comment>
    <expr_stmt><expr><name>debt</name> <operator>-=</operator> <name>work</name></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><name>debt</name> <operator>&gt;</operator> <operator>-</operator><name>stepsize</name> <operator>&amp;&amp;</operator> <name><name>g</name><operator>-&gt;</operator><name>gcstate</name></name> <operator>!=</operator> <name>GCSpause</name></expr>)</condition>;</do>
  <if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>gcstate</name></name> <operator>==</operator> <name>GCSpause</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>setpause</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* pause until next cycle */</comment>
  <else>else <block>{<block_content>
    <expr_stmt><expr><name>debt</name> <operator>=</operator> <operator>(</operator><name>debt</name> <operator>/</operator> <name>stepmul</name><operator>)</operator> <operator>*</operator> <name>WORK2MEM</name></expr>;</expr_stmt>  <comment type="block">/* convert 'work units' to bytes */</comment>
    <expr_stmt><expr><call><name>luaE_setdebt</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>debt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** performs a basic GC step if collector is running
*/</comment>
<function><type><name>void</name></type> <name>luaC_step</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>g</name><operator>-&gt;</operator><name>gcemergency</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>gcrunning</name></name></expr>)</condition> <block>{<block_content>  <comment type="block">/* running? */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>isdecGCmodegen</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>genstep</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>incstep</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Perform a full collection in incremental mode.
** Before running the collection, check 'keepinvariant'; if it is true,
** there may be some objects marked as black, so the collector has
** to sweep all objects to turn them back to white (as white has not
** changed, nothing will be collected).
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fullinc</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>keepinvariant</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* black objects? */</comment>
    <expr_stmt><expr><call><name>entersweep</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block">/* sweep everything to turn them back to white */</comment>
  <comment type="block">/* finish any pending sweep phase to start a new cycle */</comment>
  <expr_stmt><expr><call><name>luaC_runtilstate</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>bitmask</name><argument_list>(<argument><expr><name>GCSpause</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaC_runtilstate</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>bitmask</name><argument_list>(<argument><expr><name>GCScallfin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* run up to finalizers */</comment>
  <comment type="block">/* estimate must be correct after a full GC cycle */</comment>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>GCestimate</name></name> <operator>==</operator> <call><name>gettotalbytes</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaC_runtilstate</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>bitmask</name><argument_list>(<argument><expr><name>GCSpause</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* finish collection */</comment>
  <expr_stmt><expr><call><name>setpause</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Performs a full GC cycle; if 'isemergency', set a flag to avoid
** some operations which could change the interpreter state in some
** unexpected ways (running finalizers and shrinking some structures).
*/</comment>
<function><type><name>void</name></type> <name>luaC_fullgc</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>isemergency</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>g</name><operator>-&gt;</operator><name>gcemergency</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gcemergency</name></name> <operator>=</operator> <name>isemergency</name></expr>;</expr_stmt>  <comment type="block">/* set flag */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>gckind</name></name> <operator>==</operator> <name>KGC_INC</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>fullinc</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>fullgen</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gcemergency</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* }====================================================== */</comment>


</unit>
