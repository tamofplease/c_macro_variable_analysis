<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/lua/lstring.c"><comment type="block">/*
** $Id: lstring.c $
** String table (keeps all strings handled by Lua)
** See Copyright Notice in lua.h
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lstring_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lprefix.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ldebug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ldo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lstate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lstring.h"</cpp:file></cpp:include>


<comment type="block">/*
** Lua will use at most ~(2^LUAI_HASHLIMIT) bytes from a long string to
** compute its hash
*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LUAI_HASHLIMIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUAI_HASHLIMIT</name></cpp:macro>		<cpp:value>5</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<comment type="block">/*
** Maximum size for string table.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXSTRTB</name></cpp:macro>	<cpp:value>cast_int(luaM_limitN(MAX_INT, TString*))</cpp:value></cpp:define>


<comment type="block">/*
** equality for long strings
*/</comment>
<function><type><name>int</name></type> <name>luaS_eqlngstr</name> <parameter_list>(<parameter><decl><type><name>TString</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>TString</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>lnglen</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>tt</name></name> <operator>==</operator> <name>LUA_VLNGSTR</name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>-&gt;</operator><name>tt</name></name> <operator>==</operator> <name>LUA_VLNGSTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>a</name> <operator>==</operator> <name>b</name><operator>)</operator> <operator>||</operator>  <comment type="block">/* same instance or... */</comment>
    <operator>(</operator><operator>(</operator><name>len</name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>lnglen</name></name><operator>)</operator> <operator>&amp;&amp;</operator>  <comment type="block">/* equal length and ... */</comment>
     <operator>(</operator><call><name>memcmp</name><argument_list>(<argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>;</return>  <comment type="block">/* equal contents */</comment>
</block_content>}</block></function>


<function><type><name>unsigned</name> <name>int</name></type> <name>luaS_hash</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>seed</name></decl></parameter>,
                        <parameter><decl><type><name>size_t</name></type> <name>step</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>h</name> <init>= <expr><name>seed</name> <operator>^</operator> <call><name>cast_uint</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init>;</init> <condition><expr><name>l</name> <operator>&gt;=</operator> <name>step</name></expr>;</condition> <incr><expr><name>l</name> <operator>-=</operator> <name>step</name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>h</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>h</name><operator>&lt;&lt;</operator><literal type="number">5</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>h</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator> <operator>+</operator> <call><name>cast_byte</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
  <return>return <expr><name>h</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>unsigned</name> <name>int</name></type> <name>luaS_hashlongstr</name> <parameter_list>(<parameter><decl><type><name>TString</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>tt</name></name> <operator>==</operator> <name>LUA_VLNGSTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>extra</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* no hash? */</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name><name>ts</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>lnglen</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>step</name> <init>= <expr><operator>(</operator><name>len</name> <operator>&gt;&gt;</operator> <name>LUAI_HASHLIMIT</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <call><name>luaS_hash</name><argument_list>(<argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>ts</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>extra</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>  <comment type="block">/* now it has its hash */</comment>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name><name>ts</name><operator>-&gt;</operator><name>hash</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>tablerehash</name> <parameter_list>(<parameter><decl><type><name>TString</name> <modifier>*</modifier><modifier>*</modifier></type><name>vect</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>osize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nsize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>osize</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nsize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>  <comment type="block">/* clear new elements */</comment>
    <expr_stmt><expr><name><name>vect</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>osize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>  <comment type="block">/* rehash old part of the array */</comment>
    <decl_stmt><decl><type><name>TString</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>vect</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>vect</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* for each string in the list */</comment>
      <decl_stmt><decl><type><name>TString</name> <modifier>*</modifier></type><name>hnext</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>hnext</name></name></expr></init></decl>;</decl_stmt>  <comment type="block">/* save next */</comment>
      <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>h</name> <init>= <expr><call><name>lmod</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name>nsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* new position */</comment>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>hnext</name></name> <operator>=</operator> <name><name>vect</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</expr_stmt>  <comment type="block">/* chain it into array */</comment>
      <expr_stmt><expr><name><name>vect</name><index>[<expr><name>h</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <name>hnext</name></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></for>
</block_content>}</block></function>


<comment type="block">/*
** Resize the string table. If allocation fails, keep the current size.
** (This can degrade performance, but any non-zero size should work
** correctly.)
*/</comment>
<function><type><name>void</name></type> <name>luaS_resize</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nsize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>stringtable</name> <modifier>*</modifier></type><name>tb</name> <init>= <expr><operator>&amp;</operator><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>strt</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>osize</name> <init>= <expr><name><name>tb</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TString</name> <modifier>*</modifier><modifier>*</modifier></type><name>newvect</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>nsize</name> <operator>&lt;</operator> <name>osize</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* shrinking table? */</comment>
    <expr_stmt><expr><call><name>tablerehash</name><argument_list>(<argument><expr><name><name>tb</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name>osize</name></expr></argument>, <argument><expr><name>nsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* depopulate shrinking part */</comment>
  <expr_stmt><expr><name>newvect</name> <operator>=</operator> <call><name>luaM_reallocvector</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>tb</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name>osize</name></expr></argument>, <argument><expr><name>nsize</name></expr></argument>, <argument><expr><name>TString</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>newvect</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* reallocation failed? */</comment>
    <if_stmt><if>if <condition>(<expr><name>nsize</name> <operator>&lt;</operator> <name>osize</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* was it shrinking table? */</comment>
      <expr_stmt><expr><call><name>tablerehash</name><argument_list>(<argument><expr><name><name>tb</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name>nsize</name></expr></argument>, <argument><expr><name>osize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* restore to original size */</comment>
    <comment type="block">/* leave table as it was */</comment>
  </block_content>}</block></if>
  <else>else <block>{<block_content>  <comment type="block">/* allocation succeeded */</comment>
    <expr_stmt><expr><name><name>tb</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <name>newvect</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tb</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>nsize</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nsize</name> <operator>&gt;</operator> <name>osize</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>tablerehash</name><argument_list>(<argument><expr><name>newvect</name></expr></argument>, <argument><expr><name>osize</name></expr></argument>, <argument><expr><name>nsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* rehash for new size */</comment>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Clear API string cache. (Entries cannot be empty, so fill them with
** a non-collectable string.)
*/</comment>
<function><type><name>void</name></type> <name>luaS_clearcache</name> <parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>STRCACHE_N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>STRCACHE_M</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>iswhite</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>strcache</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* will entry be collected? */</comment>
        <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>strcache</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>memerrmsg</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* replace it with something fixed */</comment>
    </block_content>}</block></for></block_content></block></for>
</block_content>}</block></function>


<comment type="block">/*
** Initialize the string table and the string cache
*/</comment>
<function><type><name>void</name></type> <name>luaS_init</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>stringtable</name> <modifier>*</modifier></type><name>tb</name> <init>= <expr><operator>&amp;</operator><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>strt</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>tb</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <call><name>luaM_newvector</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>MINSTRTABSIZE</name></expr></argument>, <argument><expr><name>TString</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tablerehash</name><argument_list>(<argument><expr><name><name>tb</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MINSTRTABSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* clear array */</comment>
  <expr_stmt><expr><name><name>tb</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>MINSTRTABSIZE</name></expr>;</expr_stmt>
  <comment type="block">/* pre-create memory-error message */</comment>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>memerrmsg</name></name> <operator>=</operator> <call><name>luaS_newliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>MEMERRMSG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaC_fix</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>obj2gco</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>memerrmsg</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* it should never be collected */</comment>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>STRCACHE_N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>  <comment type="block">/* fill cache with valid strings */</comment>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>STRCACHE_M</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>strcache</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>memerrmsg</name></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
</block_content>}</block></function>



<comment type="block">/*
** creates a new string object
*/</comment>
<function><type><specifier>static</specifier> <name>TString</name> <modifier>*</modifier></type><name>createstrobj</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TString</name> <modifier>*</modifier></type><name>ts</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>totalsize</name></decl>;</decl_stmt>  <comment type="block">/* total size of TString object */</comment>
  <expr_stmt><expr><name>totalsize</name> <operator>=</operator> <call><name>sizelstring</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>luaC_newobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>totalsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>gco2ts</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>extra</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>getstr</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call><index>[<expr><name>l</name></expr>]</index> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>  <comment type="block">/* ending 0 */</comment>
  <return>return <expr><name>ts</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>TString</name> <modifier>*</modifier></type><name>luaS_createlngstrobj</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TString</name> <modifier>*</modifier></type><name>ts</name> <init>= <expr><call><name>createstrobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>LUA_VLNGSTR</name></expr></argument>, <argument><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>seed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>lnglen</name></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
  <return>return <expr><name>ts</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaS_remove</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>TString</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>stringtable</name> <modifier>*</modifier></type><name>tb</name> <init>= <expr><operator>&amp;</operator><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>strt</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TString</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>tb</name><operator>-&gt;</operator><name>hash</name><index>[<expr><call><name>lmod</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name><name>tb</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>ts</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* find previous element */</comment>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>hnext</name></name></name></expr>;</expr_stmt></block_content></block></while>
  <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>hnext</name></name></name></expr>;</expr_stmt>  <comment type="block">/* remove element from its list */</comment>
  <expr_stmt><expr><name><name>tb</name><operator>-&gt;</operator><name>nuse</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>growstrtab</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>stringtable</name> <modifier>*</modifier></type><name>tb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>tb</name><operator>-&gt;</operator><name>nuse</name></name> <operator>==</operator> <name>MAX_INT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* too many strings? */</comment>
    <expr_stmt><expr><call><name>luaC_fullgc</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* try to free some... */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>tb</name><operator>-&gt;</operator><name>nuse</name></name> <operator>==</operator> <name>MAX_INT</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* still too many? */</comment>
      <expr_stmt><expr><call><name>luaM_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* cannot even create a message... */</comment>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>tb</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;=</operator> <name>MAXSTRTB</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* can grow string table? */</comment>
    <expr_stmt><expr><call><name>luaS_resize</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>tb</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Checks whether short string exists and reuses it or creates a new one.
*/</comment>
<function><type><specifier>static</specifier> <name>TString</name> <modifier>*</modifier></type><name>internshrstr</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TString</name> <modifier>*</modifier></type><name>ts</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>stringtable</name> <modifier>*</modifier></type><name>tb</name> <init>= <expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>strt</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>h</name> <init>= <expr><call><name>luaS_hash</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>seed</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TString</name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name> <init>= <expr><operator>&amp;</operator><name><name>tb</name><operator>-&gt;</operator><name>hash</name><index>[<expr><call><name>lmod</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>tb</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* otherwise 'memcmp'/'memcpy' are undefined */</comment>
  <for>for <control>(<init><expr><name>ts</name> <operator>=</operator> <operator>*</operator><name>list</name></expr>;</init> <condition><expr><name>ts</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ts</name> <operator>=</operator> <name><name>ts</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>hnext</name></name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name><name>ts</name><operator>-&gt;</operator><name>shrlen</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>l</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <comment type="block">/* found! */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>isdead</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* dead (but not collected yet)? */</comment>
        <expr_stmt><expr><call><name>changewhite</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* resurrect it */</comment>
      <return>return <expr><name>ts</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <comment type="block">/* else must create a new string */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>tb</name><operator>-&gt;</operator><name>nuse</name></name> <operator>&gt;=</operator> <name><name>tb</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>  <comment type="block">/* need to grow string table? */</comment>
    <expr_stmt><expr><call><name>growstrtab</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>list</name> <operator>=</operator> <operator>&amp;</operator><name><name>tb</name><operator>-&gt;</operator><name>hash</name><index>[<expr><call><name>lmod</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>tb</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>  <comment type="block">/* rehash with new size */</comment>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>createstrobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>LUA_VSHRSTR</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>l</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>shrlen</name></name> <operator>=</operator> <call><name>cast_byte</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>hnext</name></name> <operator>=</operator> <operator>*</operator><name>list</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>list</name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tb</name><operator>-&gt;</operator><name>nuse</name></name><operator>++</operator></expr>;</expr_stmt>
  <return>return <expr><name>ts</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** new string (with explicit length)
*/</comment>
<function><type><name>TString</name> <modifier>*</modifier></type><name>luaS_newlstr</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;=</operator> <name>LUAI_MAXSHORTLEN</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* short string? */</comment>
    <return>return <expr><call><name>internshrstr</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>TString</name> <modifier>*</modifier></type><name>ts</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>l</name> <operator>&gt;=</operator> <operator>(</operator><name>MAX_SIZE</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TString</name></expr></argument>)</argument_list></sizeof><operator>)</operator><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>luaM_toobig</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>luaS_createlngstrobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>l</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ts</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Create or reuse a zero-terminated string, first checking in the
** cache (using the string address as a key). The cache can contain
** only zero-terminated strings, so it is safe to use 'strcmp' to
** check hits.
*/</comment>
<function><type><name>TString</name> <modifier>*</modifier></type><name>luaS_new</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><call><name>point2uint</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>STRCACHE_N</name></expr></init></decl>;</decl_stmt>  <comment type="block">/* hash */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TString</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>strcache</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>STRCACHE_M</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* hit? */</comment>
      <return>return <expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* that is it */</comment>
  </block_content>}</block></for>
  <comment type="block">/* normal route */</comment>
  <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>STRCACHE_M</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>  <comment type="block">/* move out last element */</comment>
  <comment type="block">/* new element is first in the list */</comment>
  <expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>luaS_newlstr</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>Udata</name> <modifier>*</modifier></type><name>luaS_newudata</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nuvalue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Udata</name> <modifier>*</modifier></type><name>u</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>s</name> <operator>&gt;</operator> <name>MAX_SIZE</name> <operator>-</operator> <call><name>udatamemoffset</name><argument_list>(<argument><expr><name>nuvalue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaM_toobig</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>luaC_newobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_VUSERDATA</name></expr></argument>, <argument><expr><call><name>sizeudata</name><argument_list>(<argument><expr><name>nuvalue</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>gco2u</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>nuvalue</name></name> <operator>=</operator> <name>nuvalue</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>metatable</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nuvalue</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>setnilvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>u</name><operator>-&gt;</operator><name>uv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>uv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  <return>return <expr><name>u</name></expr>;</return>
</block_content>}</block></function>

</unit>
