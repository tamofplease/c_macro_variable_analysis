<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/lua/llex.c"><comment type="block">/*
** $Id: llex.c $
** Lexical Analyzer
** See Copyright Notice in lua.h
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>llex_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lprefix.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lctype.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ldebug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ldo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lgc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lparser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lstate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ltable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lzio.h"</cpp:file></cpp:include>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>next</name><parameter_list>(<parameter><type><name>ls</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(ls-&gt;current = zgetc(ls-&gt;z))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>currIsNewline</name><parameter_list>(<parameter><type><name>ls</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(ls-&gt;current == '\n' || ls-&gt;current == '\r')</cpp:value></cpp:define>


<comment type="block">/* ORDER RESERVED */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>luaX_tokens</name> <index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="string">"and"</literal></expr>, <expr><literal type="string">"break"</literal></expr>, <expr><literal type="string">"do"</literal></expr>, <expr><literal type="string">"else"</literal></expr>, <expr><literal type="string">"elseif"</literal></expr>,
    <expr><literal type="string">"end"</literal></expr>, <expr><literal type="string">"false"</literal></expr>, <expr><literal type="string">"for"</literal></expr>, <expr><literal type="string">"function"</literal></expr>, <expr><literal type="string">"goto"</literal></expr>, <expr><literal type="string">"if"</literal></expr>,
    <expr><literal type="string">"in"</literal></expr>, <expr><literal type="string">"local"</literal></expr>, <expr><literal type="string">"nil"</literal></expr>, <expr><literal type="string">"not"</literal></expr>, <expr><literal type="string">"or"</literal></expr>, <expr><literal type="string">"repeat"</literal></expr>,
    <expr><literal type="string">"return"</literal></expr>, <expr><literal type="string">"then"</literal></expr>, <expr><literal type="string">"true"</literal></expr>, <expr><literal type="string">"until"</literal></expr>, <expr><literal type="string">"while"</literal></expr>,
    <expr><literal type="string">"//"</literal></expr>, <expr><literal type="string">".."</literal></expr>, <expr><literal type="string">"..."</literal></expr>, <expr><literal type="string">"=="</literal></expr>, <expr><literal type="string">"&gt;="</literal></expr>, <expr><literal type="string">"&lt;="</literal></expr>, <expr><literal type="string">"~="</literal></expr>,
    <expr><literal type="string">"&lt;&lt;"</literal></expr>, <expr><literal type="string">"&gt;&gt;"</literal></expr>, <expr><literal type="string">"::"</literal></expr>, <expr><literal type="string">"&lt;eof&gt;"</literal></expr>,
    <expr><literal type="string">"&lt;number&gt;"</literal></expr>, <expr><literal type="string">"&lt;integer&gt;"</literal></expr>, <expr><literal type="string">"&lt;name&gt;"</literal></expr>, <expr><literal type="string">"&lt;string&gt;"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>save_and_next</name><parameter_list>(<parameter><type><name>ls</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(save(ls, ls-&gt;current), next(ls))</cpp:value></cpp:define>


<function_decl><type><specifier>static</specifier> <name>l_noret</name></type> <name>lexerror</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>token</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><specifier>static</specifier> <name>void</name></type> <name>save</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Mbuffer</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>ls</name><operator>-&gt;</operator><name>buff</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>luaZ_bufflen</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <call><name>luaZ_sizebuffer</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>newsize</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>luaZ_sizebuffer</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>MAX_SIZE</name><operator>/</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>lexerror</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><literal type="string">"lexical element too long"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>newsize</name> <operator>=</operator> <call><name>luaZ_sizebuffer</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaZ_resizebuffer</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><call><name>luaZ_bufflen</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>cast_char</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaX_init</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TString</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>luaS_newliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_ENV</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* create env name */</comment>
  <expr_stmt><expr><call><name>luaC_fix</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>obj2gco</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* never collect this name */</comment>
  <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>NUM_RESERVED</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>TString</name> <modifier>*</modifier></type><name>ts</name> <init>= <expr><call><name>luaS_new</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>luaX_tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>luaC_fix</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>obj2gco</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* reserved words are never collected */</comment>
    <expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>extra</name></name> <operator>=</operator> <call><name>cast_byte</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* reserved word */</comment>
  </block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>luaX_token2str</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>token</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>token</name> <operator>&lt;</operator> <name>FIRST_RESERVED</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* single-byte symbols? */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>lisprint</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><call><name>luaO_pushfstring</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><literal type="string">"'%c'"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>  <comment type="block">/* control character */</comment>
      <return>return <expr><call><name>luaO_pushfstring</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><literal type="string">"'&lt;\\%d&gt;'"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
  </block_content>}</block></if>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>luaX_tokens</name><index>[<expr><name>token</name> <operator>-</operator> <name>FIRST_RESERVED</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>token</name> <operator>&lt;</operator> <name>TK_EOS</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* fixed format (symbols and reserved words)? */</comment>
      <return>return <expr><call><name>luaO_pushfstring</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><literal type="string">"'%s'"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>  <comment type="block">/* names, strings, and numerals */</comment>
      <return>return <expr><name>s</name></expr>;</return></block_content></block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>txtToken</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>token</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>token</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TK_NAME</name></expr>:</case> <case>case <expr><name>TK_STRING</name></expr>:</case>
    <case>case <expr><name>TK_FLT</name></expr>:</case> <case>case <expr><name>TK_INT</name></expr>:</case>
      <expr_stmt><expr><call><name>save</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name>luaO_pushfstring</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><literal type="string">"'%s'"</literal></expr></argument>, <argument><expr><call><name>luaZ_buffer</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default>
      <return>return <expr><call><name>luaX_token2str</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>l_noret</name></type> <name>lexerror</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>token</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>luaG_addinfo</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>ls</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name><name>ls</name><operator>-&gt;</operator><name>linenumber</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>token</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaO_pushfstring</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><literal type="string">"%s near %s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>txtToken</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>luaD_throw</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>LUA_ERRSYNTAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>l_noret</name></type> <name>luaX_syntaxerror</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>lexerror</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>ls</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** creates a new string and anchors it in scanner's table so that
** it will not be collected until the end of the compilation
** (by that time it should be anchored somewhere)
*/</comment>
<function><type><name>TString</name> <modifier>*</modifier></type><name>luaX_newstring</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name> <init>= <expr><name><name>ls</name><operator>-&gt;</operator><name>L</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>  <comment type="block">/* entry for 'str' */</comment>
  <decl_stmt><decl><type><name>TString</name> <modifier>*</modifier></type><name>ts</name> <init>= <expr><call><name>luaS_newlstr</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* create new string */</comment>
  <expr_stmt><expr><call><name>setsvalue2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>++</operator></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* temporarily anchor it in stack */</comment>
  <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>luaH_set</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>ls</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>isempty</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* not in use yet? */</comment>
    <comment type="block">/* boolean value does not need GC barrier;
       table is not a metatable, so it does not need to invalidate cache */</comment>
    <expr_stmt><expr><call><name>setbtvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* t[string] = true */</comment>
    <expr_stmt><expr><call><name>luaC_checkGC</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else <block>{<block_content>  <comment type="block">/* string already present */</comment>
    <expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>keystrval</name><argument_list>(<argument><expr><call><name>nodefromval</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* re-use value previously stored */</comment>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>--</operator></expr>;</expr_stmt>  <comment type="block">/* remove string from stack */</comment>
  <return>return <expr><name>ts</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** increment line number and skips newline sequence (any of
** \n, \r, \n\r, or \r\n)
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>inclinenumber</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>old</name> <init>= <expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>currIsNewline</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* skip '\n' or '\r' */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>currIsNewline</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>ls</name><operator>-&gt;</operator><name>current</name></name> <operator>!=</operator> <name>old</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* skip '\n\r' or '\r\n' */</comment>
  <if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>ls</name><operator>-&gt;</operator><name>linenumber</name></name> <operator>&gt;=</operator> <name>MAX_INT</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>lexerror</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><literal type="string">"chunk has too many lines"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaX_setinput</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>, <parameter><decl><type><name>ZIO</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>TString</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
                    <parameter><decl><type><name>int</name></type> <name>firstchar</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>ls</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>token</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ls</name><operator>-&gt;</operator><name>L</name></name> <operator>=</operator> <name>L</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name>firstchar</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ls</name><operator>-&gt;</operator><name>lookahead</name><operator>.</operator><name>token</name></name> <operator>=</operator> <name>TK_EOS</name></expr>;</expr_stmt>  <comment type="block">/* no look-ahead token */</comment>
  <expr_stmt><expr><name><name>ls</name><operator>-&gt;</operator><name>z</name></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ls</name><operator>-&gt;</operator><name>fs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ls</name><operator>-&gt;</operator><name>linenumber</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ls</name><operator>-&gt;</operator><name>lastline</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ls</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ls</name><operator>-&gt;</operator><name>envn</name></name> <operator>=</operator> <call><name>luaS_newliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_ENV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* get env name */</comment>
  <expr_stmt><expr><call><name>luaZ_resizebuffer</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name><name>ls</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>, <argument><expr><name>LUA_MINBUFFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* initialize buffer */</comment>
</block_content>}</block></function>



<comment type="block">/*
** =======================================================
** LEXICAL ANALYZER
** =======================================================
*/</comment>


<function><type><specifier>static</specifier> <name>int</name></type> <name>check_next1</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name> <operator>==</operator> <name>c</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Check whether current char is in set 'set' (with two chars) and
** saves it
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>check_next2</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>set</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>set</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name> <operator>==</operator> <name><name>set</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name><name>ls</name><operator>-&gt;</operator><name>current</name></name> <operator>==</operator> <name><name>set</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>save_and_next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/* LUA_NUMBER */</comment>
<comment type="block">/*
** This function is quite liberal in what it accepts, as 'luaO_str2num'
** will reject ill-formed numerals. Roughly, it accepts the following
** pattern:
**
**   %d(%x|%.|([Ee][+-]?))* | 0[Xx](%x|%.|([Pp][+-]?))*
**
** The only tricky part is to accept [+-] only after a valid exponent
** mark, to avoid reading '3-4' or '0xe+1' as a single number.
**
** The caller might have already read an initial dot.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>read_numeral</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>, <parameter><decl><type><name>SemInfo</name> <modifier>*</modifier></type><name>seminfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TValue</name></type> <name>obj</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expo</name> <init>= <expr><literal type="string">"Ee"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>first</name> <init>= <expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>lisdigit</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>save_and_next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>first</name> <operator>==</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <call><name>check_next2</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><literal type="string">"xX"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* hexadecimal? */</comment>
    <expr_stmt><expr><name>expo</name> <operator>=</operator> <literal type="string">"Pp"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>check_next2</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><name>expo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* exponent mark? */</comment>
      <expr_stmt><expr><call><name>check_next2</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><literal type="string">"-+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* optional exponent sign */</comment>
    <if type="elseif">else if <condition>(<expr><call><name>lisxdigit</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>ls</name><operator>-&gt;</operator><name>current</name></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* '%x|%.' */</comment>
      <expr_stmt><expr><call><name>save_and_next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content> <break>break;</break></block_content></block></else></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><call><name>lislalpha</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* is numeral touching a letter? */</comment>
    <expr_stmt><expr><call><name>save_and_next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* force an error */</comment>
  <expr_stmt><expr><call><name>save</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>luaO_str2num</name><argument_list>(<argument><expr><call><name>luaZ_buffer</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* format error? */</comment>
    <expr_stmt><expr><call><name>lexerror</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><literal type="string">"malformed number"</literal></expr></argument>, <argument><expr><name>TK_FLT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>ttisinteger</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>seminfo</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <call><name>ivalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TK_INT</name></expr>;</return>
  </block_content>}</block></if>
  <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>ttisfloat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seminfo</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <call><name>fltvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TK_FLT</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** reads a sequence '[=*[' or ']=*]', leaving the last bracket.
** If sequence is well formed, return its number of '='s + 2; otherwise,
** return 1 if there is no '='s or 0 otherwise (an unfinished '[==...').
*/</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type> <name>skip_sep</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>s</name> <operator>==</operator> <literal type="char">'['</literal> <operator>||</operator> <name>s</name> <operator>==</operator> <literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>save_and_next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>save_and_next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>ls</name><operator>-&gt;</operator><name>current</name></name> <operator>==</operator> <name>s</name><operator>)</operator></expr> ?</condition><then> <expr><name>count</name> <operator>+</operator> <literal type="number">2</literal></expr>
         </then><else>: <expr><ternary><condition><expr><operator>(</operator><name>count</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr>
         </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>read_long_string</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>, <parameter><decl><type><name>SemInfo</name> <modifier>*</modifier></type><name>seminfo</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sep</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>line</name> <init>= <expr><name><name>ls</name><operator>-&gt;</operator><name>linenumber</name></name></expr></init></decl>;</decl_stmt>  <comment type="block">/* initial line (for error message) */</comment>
  <expr_stmt><expr><call><name>save_and_next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* skip 2nd '[' */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>currIsNewline</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* string starts with a newline? */</comment>
    <expr_stmt><expr><call><name>inclinenumber</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* skip it */</comment>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>EOZ</name></expr>:</case> <block>{<block_content>  <comment type="block">/* error */</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>what</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>seminfo</name></expr> ?</condition><then> <expr><literal type="string">"string"</literal></expr> </then><else>: <expr><literal type="string">"comment"</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>luaO_pushfstring</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>L</name></name></expr></argument>,
                     <argument><expr><literal type="string">"unfinished long %s (starting at line %d)"</literal></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>lexerror</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>TK_EOS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>  <comment type="block">/* to avoid warnings */</comment>
      </block_content>}</block>
      <case>case <expr><literal type="char">']'</literal></expr>:</case> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>skip_sep</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>sep</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>save_and_next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* skip 2nd ']' */</comment>
          <goto>goto <name>endloop</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><literal type="char">'\n'</literal></expr>:</case> <case>case <expr><literal type="char">'\r'</literal></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>save</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>inclinenumber</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>seminfo</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>luaZ_resetbuffer</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* avoid wasting space */</comment>
        <break>break;</break>
      </block_content>}</block>
      <default>default:</default> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>seminfo</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>save_and_next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
      </block_content>}</block>
    </block_content>}</block></switch>
  </block_content>}</block></for> <label><name>endloop</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>seminfo</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>seminfo</name><operator>-&gt;</operator><name>ts</name></name> <operator>=</operator> <call><name>luaX_newstring</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><call><name>luaZ_buffer</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>sep</name></expr></argument>,
                                     <argument><expr><call><name>luaZ_bufflen</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>sep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>esccheck</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name> <operator>!=</operator> <name>EOZ</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>save_and_next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* add current to buffer for error message */</comment>
    <expr_stmt><expr><call><name>lexerror</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>TK_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>gethexa</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>save_and_next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>esccheck</name> <argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><call><name>lisxdigit</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"hexadecimal digit expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>luaO_hexavalue</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>readhexaesc</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>gethexa</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>r</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <call><name>gethexa</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaZ_buffremove</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* remove saved chars from buffer */</comment>
  <return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>readutf8esc</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>r</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* chars to be removed: '\', 'u', '{', and first digit */</comment>
  <expr_stmt><expr><call><name>save_and_next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* skip 'u' */</comment>
  <expr_stmt><expr><call><name>esccheck</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name> <operator>==</operator> <literal type="char">'{'</literal></expr></argument>, <argument><expr><literal type="string">"missing '{'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>gethexa</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* must have at least one digit */</comment>
  <while>while <condition>(<expr><call><name>cast_void</name><argument_list>(<argument><expr><call><name>save_and_next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>lisxdigit</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>esccheck</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><name>r</name> <operator>&lt;=</operator> <operator>(</operator><literal type="number">0x7FFFFFFFu</literal> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"UTF-8 value too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>r</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <call><name>luaO_hexavalue</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>esccheck</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name> <operator>==</operator> <literal type="char">'}'</literal></expr></argument>, <argument><expr><literal type="string">"missing '}'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* skip '}' */</comment>
  <expr_stmt><expr><call><name>luaZ_buffremove</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* remove saved chars from buffer */</comment>
  <return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>utf8esc</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><name>UTF8BUFFSZ</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>luaO_utf8esc</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><call><name>readutf8esc</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>  <comment type="block">/* add 'buff' to string */</comment>
    <expr_stmt><expr><call><name>save</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><name><name>buff</name><index>[<expr><name>UTF8BUFFSZ</name> <operator>-</operator> <name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>readdecesc</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* result accumulator */</comment>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>lisdigit</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>  <comment type="block">/* read up to 3 digits */</comment>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">10</literal><operator>*</operator><name>r</name> <operator>+</operator> <name><name>ls</name><operator>-&gt;</operator><name>current</name></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>save_and_next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>esccheck</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><name>r</name> <operator>&lt;=</operator> <name>UCHAR_MAX</name></expr></argument>, <argument><expr><literal type="string">"decimal escape too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaZ_buffremove</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* remove read digits from buffer */</comment>
  <return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>read_string</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>del</name></decl></parameter>, <parameter><decl><type><name>SemInfo</name> <modifier>*</modifier></type><name>seminfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>save_and_next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* keep delimiter (for error messages) */</comment>
  <while>while <condition>(<expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name> <operator>!=</operator> <name>del</name></expr>)</condition> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>EOZ</name></expr>:</case>
        <expr_stmt><expr><call><name>lexerror</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><literal type="string">"unfinished string"</literal></expr></argument>, <argument><expr><name>TK_EOS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>  <comment type="block">/* to avoid warnings */</comment>
      <case>case <expr><literal type="char">'\n'</literal></expr>:</case>
      <case>case <expr><literal type="char">'\r'</literal></expr>:</case>
        <expr_stmt><expr><call><name>lexerror</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><literal type="string">"unfinished string"</literal></expr></argument>, <argument><expr><name>TK_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>  <comment type="block">/* to avoid warnings */</comment>
      <case>case <expr><literal type="char">'\\'</literal></expr>:</case> <block>{<block_content>  <comment type="block">/* escape sequences */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>  <comment type="block">/* final character to be saved */</comment>
        <expr_stmt><expr><call><name>save_and_next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* keep '\\' for error messages */</comment>
        <switch>switch <condition>(<expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr>)</condition> <block>{<block_content>
          <case>case <expr><literal type="char">'a'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\a'</literal></expr>;</expr_stmt> <goto>goto <name>read_save</name>;</goto>
          <case>case <expr><literal type="char">'b'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\b'</literal></expr>;</expr_stmt> <goto>goto <name>read_save</name>;</goto>
          <case>case <expr><literal type="char">'f'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\f'</literal></expr>;</expr_stmt> <goto>goto <name>read_save</name>;</goto>
          <case>case <expr><literal type="char">'n'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt> <goto>goto <name>read_save</name>;</goto>
          <case>case <expr><literal type="char">'r'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt> <goto>goto <name>read_save</name>;</goto>
          <case>case <expr><literal type="char">'t'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt> <goto>goto <name>read_save</name>;</goto>
          <case>case <expr><literal type="char">'v'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\v'</literal></expr>;</expr_stmt> <goto>goto <name>read_save</name>;</goto>
          <case>case <expr><literal type="char">'x'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>readhexaesc</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <goto>goto <name>read_save</name>;</goto>
          <case>case <expr><literal type="char">'u'</literal></expr>:</case> <expr_stmt><expr><call><name>utf8esc</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <goto>goto <name>no_save</name>;</goto>
          <case>case <expr><literal type="char">'\n'</literal></expr>:</case> <case>case <expr><literal type="char">'\r'</literal></expr>:</case>
            <expr_stmt><expr><call><name>inclinenumber</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt> <goto>goto <name>only_save</name>;</goto>
          <case>case <expr><literal type="char">'\\'</literal></expr>:</case> <case>case <expr><literal type="char">'\"'</literal></expr>:</case> <case>case <expr><literal type="char">'\''</literal></expr>:</case>
            <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr>;</expr_stmt> <goto>goto <name>read_save</name>;</goto>
          <case>case <expr><name>EOZ</name></expr>:</case> <goto>goto <name>no_save</name>;</goto>  <comment type="block">/* will raise an error next loop */</comment>
          <case>case <expr><literal type="char">'z'</literal></expr>:</case> <block>{<block_content>  <comment type="block">/* zap following span of spaces */</comment>
            <expr_stmt><expr><call><name>luaZ_buffremove</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* remove '\\' */</comment>
            <expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* skip the 'z' */</comment>
            <while>while <condition>(<expr><call><name>lisspace</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
              <if_stmt><if>if <condition>(<expr><call><name>currIsNewline</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>inclinenumber</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
              <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></while>
            <goto>goto <name>no_save</name>;</goto>
          </block_content>}</block>
          <default>default:</default> <block>{<block_content>
            <expr_stmt><expr><call><name>esccheck</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><call><name>lisdigit</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"invalid escape sequence"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>readdecesc</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* digital escape '\ddd' */</comment>
            <goto>goto <name>only_save</name>;</goto>
          </block_content>}</block>
        </block_content>}</block></switch>
       <label><name>read_save</name>:</label>
         <expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <comment type="block">/* go through */</comment>
       <label><name>only_save</name>:</label>
         <expr_stmt><expr><call><name>luaZ_buffremove</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* remove '\\' */</comment>
         <expr_stmt><expr><call><name>save</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <comment type="block">/* go through */</comment>
       <label><name>no_save</name>:</label> <break>break;</break>
      </block_content>}</block>
      <default>default:</default>
        <expr_stmt><expr><call><name>save_and_next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>save_and_next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* skip delimiter */</comment>
  <expr_stmt><expr><name><name>seminfo</name><operator>-&gt;</operator><name>ts</name></name> <operator>=</operator> <call><name>luaX_newstring</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><call><name>luaZ_buffer</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
                                   <argument><expr><call><name>luaZ_bufflen</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>llex</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>, <parameter><decl><type><name>SemInfo</name> <modifier>*</modifier></type><name>seminfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>luaZ_resetbuffer</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><literal type="char">'\n'</literal></expr>:</case> <case>case <expr><literal type="char">'\r'</literal></expr>:</case> <block>{<block_content>  <comment type="block">/* line breaks */</comment>
        <expr_stmt><expr><call><name>inclinenumber</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><literal type="char">' '</literal></expr>:</case> <case>case <expr><literal type="char">'\f'</literal></expr>:</case> <case>case <expr><literal type="char">'\t'</literal></expr>:</case> <case>case <expr><literal type="char">'\v'</literal></expr>:</case> <block>{<block_content>  <comment type="block">/* spaces */</comment>
        <expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><literal type="char">'-'</literal></expr>:</case> <block>{<block_content>  <comment type="block">/* '-' or '--' (comment) */</comment>
        <expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="char">'-'</literal></expr>;</return></block_content></block></if></if_stmt>
        <comment type="block">/* else is a comment */</comment>
        <expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* long comment? */</comment>
          <decl_stmt><decl><type><name>size_t</name></type> <name>sep</name> <init>= <expr><call><name>skip_sep</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>luaZ_resetbuffer</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 'skip_sep' may dirty the buffer */</comment>
          <if_stmt><if>if <condition>(<expr><name>sep</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read_long_string</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* skip long comment */</comment>
            <expr_stmt><expr><call><name>luaZ_resetbuffer</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* previous call may dirty the buff. */</comment>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* else short comment */</comment>
        <while>while <condition>(<expr><operator>!</operator><call><name>currIsNewline</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>ls</name><operator>-&gt;</operator><name>current</name></name> <operator>!=</operator> <name>EOZ</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>  <comment type="block">/* skip until end of line (or end of file) */</comment>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><literal type="char">'['</literal></expr>:</case> <block>{<block_content>  <comment type="block">/* long string or simply '[' */</comment>
        <decl_stmt><decl><type><name>size_t</name></type> <name>sep</name> <init>= <expr><call><name>skip_sep</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>sep</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>read_long_string</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><name>seminfo</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>TK_STRING</name></expr>;</return>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>sep</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* '[=...' missing second bracket? */</comment>
          <expr_stmt><expr><call><name>lexerror</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><literal type="string">"invalid long string delimiter"</literal></expr></argument>, <argument><expr><name>TK_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><literal type="char">'['</literal></expr>;</return>
      </block_content>}</block>
      <case>case <expr><literal type="char">'='</literal></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>check_next1</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TK_EQ</name></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content> <return>return <expr><literal type="char">'='</literal></expr>;</return></block_content></block></else></if_stmt>
      </block_content>}</block>
      <case>case <expr><literal type="char">'&lt;'</literal></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>check_next1</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TK_LE</name></expr>;</return></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>check_next1</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><literal type="char">'&lt;'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TK_SHL</name></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content> <return>return <expr><literal type="char">'&lt;'</literal></expr>;</return></block_content></block></else></if_stmt>
      </block_content>}</block>
      <case>case <expr><literal type="char">'&gt;'</literal></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>check_next1</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TK_GE</name></expr>;</return></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>check_next1</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TK_SHR</name></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content> <return>return <expr><literal type="char">'&gt;'</literal></expr>;</return></block_content></block></else></if_stmt>
      </block_content>}</block>
      <case>case <expr><literal type="char">'/'</literal></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>check_next1</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TK_IDIV</name></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content> <return>return <expr><literal type="char">'/'</literal></expr>;</return></block_content></block></else></if_stmt>
      </block_content>}</block>
      <case>case <expr><literal type="char">'~'</literal></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>check_next1</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TK_NE</name></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content> <return>return <expr><literal type="char">'~'</literal></expr>;</return></block_content></block></else></if_stmt>
      </block_content>}</block>
      <case>case <expr><literal type="char">':'</literal></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>check_next1</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TK_DBCOLON</name></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content> <return>return <expr><literal type="char">':'</literal></expr>;</return></block_content></block></else></if_stmt>
      </block_content>}</block>
      <case>case <expr><literal type="char">'"'</literal></expr>:</case> <case>case <expr><literal type="char">'\''</literal></expr>:</case> <block>{<block_content>  <comment type="block">/* short literal strings */</comment>
        <expr_stmt><expr><call><name>read_string</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr></argument>, <argument><expr><name>seminfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TK_STRING</name></expr>;</return>
      </block_content>}</block>
      <case>case <expr><literal type="char">'.'</literal></expr>:</case> <block>{<block_content>  <comment type="block">/* '.', '..', '...', or number */</comment>
        <expr_stmt><expr><call><name>save_and_next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>check_next1</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name>check_next1</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>TK_DOTS</name></expr>;</return></block_content></block></if>   <comment type="block">/* '...' */</comment>
          <else>else<block type="pseudo"><block_content> <return>return <expr><name>TK_CONCAT</name></expr>;</return></block_content></block></else></if_stmt>   <comment type="block">/* '..' */</comment>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>lisdigit</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="char">'.'</literal></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content> <return>return <expr><call><name>read_numeral</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><name>seminfo</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
      </block_content>}</block>
      <case>case <expr><literal type="char">'0'</literal></expr>:</case> <case>case <expr><literal type="char">'1'</literal></expr>:</case> <case>case <expr><literal type="char">'2'</literal></expr>:</case> <case>case <expr><literal type="char">'3'</literal></expr>:</case> <case>case <expr><literal type="char">'4'</literal></expr>:</case>
      <case>case <expr><literal type="char">'5'</literal></expr>:</case> <case>case <expr><literal type="char">'6'</literal></expr>:</case> <case>case <expr><literal type="char">'7'</literal></expr>:</case> <case>case <expr><literal type="char">'8'</literal></expr>:</case> <case>case <expr><literal type="char">'9'</literal></expr>:</case> <block>{<block_content>
        <return>return <expr><call><name>read_numeral</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><name>seminfo</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block>
      <case>case <expr><name>EOZ</name></expr>:</case> <block>{<block_content>
        <return>return <expr><name>TK_EOS</name></expr>;</return>
      </block_content>}</block>
      <default>default:</default> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>lislalpha</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* identifier or reserved word? */</comment>
          <decl_stmt><decl><type><name>TString</name> <modifier>*</modifier></type><name>ts</name></decl>;</decl_stmt>
          <do>do <block>{<block_content>
            <expr_stmt><expr><call><name>save_and_next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block> while <condition>(<expr><call><name>lislalnum</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
          <expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>luaX_newstring</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><call><name>luaZ_buffer</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><call><name>luaZ_bufflen</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>seminfo</name><operator>-&gt;</operator><name>ts</name></name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><call><name>isreserved</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* reserved word? */</comment>
            <return>return <expr><name><name>ts</name><operator>-&gt;</operator><name>extra</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>FIRST_RESERVED</name></expr>;</return></block_content></block></if>
          <else>else <block>{<block_content>
            <return>return <expr><name>TK_NAME</name></expr>;</return>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>  <comment type="block">/* single-char tokens (+ - / ...) */</comment>
          <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>c</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block>
    </block_content>}</block></switch>
  </block_content>}</block></for>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaX_next</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>ls</name><operator>-&gt;</operator><name>lastline</name></name> <operator>=</operator> <name><name>ls</name><operator>-&gt;</operator><name>linenumber</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ls</name><operator>-&gt;</operator><name>lookahead</name><operator>.</operator><name>token</name></name> <operator>!=</operator> <name>TK_EOS</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* is there a look-ahead token? */</comment>
    <expr_stmt><expr><name><name>ls</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name><name>ls</name><operator>-&gt;</operator><name>lookahead</name></name></expr>;</expr_stmt>  <comment type="block">/* use this one */</comment>
    <expr_stmt><expr><name><name>ls</name><operator>-&gt;</operator><name>lookahead</name><operator>.</operator><name>token</name></name> <operator>=</operator> <name>TK_EOS</name></expr>;</expr_stmt>  <comment type="block">/* and discharge it */</comment>
  </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>ls</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>token</name></name> <operator>=</operator> <call><name>llex</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ls</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>seminfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>  <comment type="block">/* read next token */</comment>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>luaX_lookahead</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>lookahead</name><operator>.</operator><name>token</name></name> <operator>==</operator> <name>TK_EOS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ls</name><operator>-&gt;</operator><name>lookahead</name><operator>.</operator><name>token</name></name> <operator>=</operator> <call><name>llex</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ls</name><operator>-&gt;</operator><name>lookahead</name><operator>.</operator><name>seminfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>ls</name><operator>-&gt;</operator><name>lookahead</name><operator>.</operator><name>token</name></name></expr>;</return>
</block_content>}</block></function>

</unit>
