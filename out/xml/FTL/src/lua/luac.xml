<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/lua/luac.c"><comment type="block">/*
** $Id: luac.c $
** Lua compiler (saves bytecodes to files; also lists bytecodes)
** See Copyright Notice in lua.h
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luac_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lprefix.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lauxlib.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ldebug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lopcodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lopnames.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lstate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lundump.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>PrintFunction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Proto</name><modifier>*</modifier></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>full</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaU_print</name></cpp:macro>	<cpp:value>PrintFunction</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROGNAME</name></cpp:macro>	<cpp:value>"luac"</cpp:value></cpp:define>		<comment type="block">/* default program name */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTPUT</name></cpp:macro>		<cpp:value>PROGNAME ".out"</cpp:value></cpp:define>	<comment type="block">/* default output file */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>listing</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>			<comment type="block">/* list bytecodes? */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>dumping</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>			<comment type="block">/* dump bytecodes? */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>stripping</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>			<comment type="block">/* strip debug information? */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>Output</name><index>[]</index></name><init>=<expr><block>{ <expr><name>OUTPUT</name></expr> }</block></expr></init></decl>;</decl_stmt>	<comment type="block">/* default output file name */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>output</name><init>=<expr><name>Output</name></expr></init></decl>;</decl_stmt>	<comment type="block">/* actual output file name */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>progname</name><init>=<expr><name>PROGNAME</name></expr></init></decl>;</decl_stmt>	<comment type="block">/* actual program name */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>TString</name> <modifier>*</modifier><modifier>*</modifier></type><name>tmname</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fatal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>,<argument><expr><name>progname</name></expr></argument>,<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cannot</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>what</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"%s: cannot %s %s: %s\n"</literal></expr></argument>,<argument><expr><name>progname</name></expr></argument>,<argument><expr><name>what</name></expr></argument>,<argument><expr><name>output</name></expr></argument>,<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <if_stmt><if>if <condition>(<expr><operator>*</operator><name>message</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"%s: unrecognized option '%s'\n"</literal></expr></argument>,<argument><expr><name>progname</name></expr></argument>,<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
 <else>else<block type="pseudo"><block_content>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>,<argument><expr><name>progname</name></expr></argument>,<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
 <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
  <argument><expr><literal type="string">"usage: %s [options] [filenames]\n"</literal>
  <literal type="string">"Available options are:\n"</literal>
  <literal type="string">"  -l       list (use -l -l for full listing)\n"</literal>
  <literal type="string">"  -o name  output to file 'name' (default is \"%s\")\n"</literal>
  <literal type="string">"  -p       parse only\n"</literal>
  <literal type="string">"  -s       strip debug information\n"</literal>
  <literal type="string">"  -v       show version information\n"</literal>
  <literal type="string">"  --       stop handling options\n"</literal>
  <literal type="string">"  -        stop handling options and process stdin\n"</literal></expr></argument>
  ,<argument><expr><name>progname</name></expr></argument>,<argument><expr><name>Output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(strcmp(argv[i],s)==0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>doargs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
 <decl_stmt><decl><type><name>int</name></type> <name>version</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
 <if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>!=</operator><name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>progname</name><operator>=</operator><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
 <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
 <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>			<comment type="block">/* end of options; keep it */</comment>
   <break>break;</break></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><call><name>IS</name><argument_list>(<argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call></expr>)</condition>			<comment type="block">/* end of options; skip it */</comment>
  <block>{<block_content>
   <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
   <if_stmt><if>if <condition>(<expr><name>version</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>version</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
   <break>break;</break>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><call><name>IS</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>			<comment type="block">/* end of options; use stdin */</comment>
   <break>break;</break></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><call><name>IS</name><argument_list>(<argument><expr><literal type="string">"-l"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>			<comment type="block">/* list */</comment>
   <expr_stmt><expr><operator>++</operator><name>listing</name></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><call><name>IS</name><argument_list>(<argument><expr><literal type="string">"-o"</literal></expr></argument>)</argument_list></call></expr>)</condition>			<comment type="block">/* output file */</comment>
  <block>{<block_content>
   <expr_stmt><expr><name>output</name><operator>=</operator><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
   <if_stmt><if>if <condition>(<expr><name>output</name><operator>==</operator><name>NULL</name> <operator>||</operator> <operator>*</operator><name>output</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <operator>(</operator><operator>*</operator><name>output</name><operator>==</operator><literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>output</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><literal type="string">"'-o' needs argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
   <if_stmt><if>if <condition>(<expr><call><name>IS</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>output</name><operator>=</operator><name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><call><name>IS</name><argument_list>(<argument><expr><literal type="string">"-p"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>			<comment type="block">/* parse only */</comment>
   <expr_stmt><expr><name>dumping</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><call><name>IS</name><argument_list>(<argument><expr><literal type="string">"-s"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>			<comment type="block">/* strip debug information */</comment>
   <expr_stmt><expr><name>stripping</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><call><name>IS</name><argument_list>(<argument><expr><literal type="string">"-v"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>			<comment type="block">/* show version */</comment>
   <expr_stmt><expr><operator>++</operator><name>version</name></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>					<comment type="block">/* unknown option */</comment>
   <expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
 </block_content>}</block></for>
 <if_stmt><if>if <condition>(<expr><name>i</name><operator>==</operator><name>argc</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>listing</name> <operator>||</operator> <operator>!</operator><name>dumping</name><operator>)</operator></expr>)</condition>
 <block>{<block_content>
  <expr_stmt><expr><name>dumping</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>argv</name><index>[<expr><operator>--</operator><name>i</name></expr>]</index></name><operator>=</operator><name>Output</name></expr>;</expr_stmt>
 </block_content>}</block></if></if_stmt>
 <if_stmt><if>if <condition>(<expr><name>version</name></expr>)</condition>
 <block>{<block_content>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>,<argument><expr><name>LUA_COPYRIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>version</name><operator>==</operator><name>argc</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
 </block_content>}</block></if></if_stmt>
 <return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCTION</name></cpp:macro> <cpp:value>"(function()end)();"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>reader</name><parameter_list>(<parameter><decl><type><name>lua_State</name><modifier>*</modifier></type> <name>L</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ud</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name>ud</name><operator>)</operator><operator>--</operator></expr>)</condition>
 <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>size</name><operator>=</operator><sizeof>sizeof<argument_list>(<argument><expr><name>FUNCTION</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><name>FUNCTION</name></expr>;</return>
 </block_content>}</block></if>
 <else>else
 <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>size</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
 </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>toproto</name><parameter_list>(<parameter><type><name>L</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>getproto(s2v(L-&gt;top+(i)))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>Proto</name><modifier>*</modifier></type> <name>combine</name><parameter_list>(<parameter><decl><type><name>lua_State</name><modifier>*</modifier></type> <name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <if_stmt><if>if <condition>(<expr><name>n</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
  <return>return <expr><call><name>toproto</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
 <else>else
 <block>{<block_content>
  <decl_stmt><decl><type><name>Proto</name><modifier>*</modifier></type> <name>f</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>lua_load</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i</name></expr></argument>,<argument><expr><literal type="string">"=("</literal> <name>PROGNAME</name> <literal type="string">")"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>!=</operator><name>LUA_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>f</name><operator>=</operator><call><name>toproto</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
   <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>toproto</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name>i</name><operator>-</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>sizeupvalues</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>upvalues</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>instack</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sizelineinfo</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>f</name></expr>;</return>
 </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>writer</name><parameter_list>(<parameter><decl><type><name>lua_State</name><modifier>*</modifier></type> <name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>u</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <return>return <expr><operator>(</operator><call><name>fwrite</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>size</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>FILE</name><operator>*</operator><operator>)</operator><name>u</name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>size</name><operator>!=</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pmain</name><parameter_list>(<parameter><decl><type><name>lua_State</name><modifier>*</modifier></type> <name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <decl_stmt><decl><type><name>int</name></type> <name>argc</name><init>=<expr><operator>(</operator><name>int</name><operator>)</operator><call><name>lua_tointeger</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 <decl_stmt><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name><init>=<expr><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>lua_touserdata</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 <decl_stmt><decl><type><specifier>const</specifier> <name>Proto</name><modifier>*</modifier></type> <name>f</name></decl>;</decl_stmt>
 <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
 <expr_stmt><expr><name>tmname</name><operator>=</operator><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>tmname</name></expr>;</expr_stmt>
 <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lua_checkstack</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"too many input files"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
 <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
 <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name><init>=<expr><ternary><condition><expr><call><name>IS</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>luaL_loadfile</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name>filename</name></expr></argument>)</argument_list></call><operator>!=</operator><name>LUA_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
 </block_content>}</block></for>
 <expr_stmt><expr><name>f</name><operator>=</operator><call><name>combine</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <if_stmt><if>if <condition>(<expr><name>listing</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>luaU_print</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>listing</name><operator>&gt;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
 <if_stmt><if>if <condition>(<expr><name>dumping</name></expr>)</condition>
 <block>{<block_content>
  <decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>D</name><init>= <expr><ternary><condition><expr><operator>(</operator><name>output</name><operator>==</operator><name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>stdout</name></expr> </then><else>: <expr><call><name>fopen</name><argument_list>(<argument><expr><name>output</name></expr></argument>,<argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>D</name><operator>==</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>cannot</name><argument_list>(<argument><expr><literal type="string">"open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaU_dump</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>writer</name></expr></argument>,<argument><expr><name>D</name></expr></argument>,<argument><expr><name>stripping</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>cannot</name><argument_list>(<argument><expr><literal type="string">"write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>fclose</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>cannot</name><argument_list>(<argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
 </block_content>}</block></if></if_stmt>
 <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>luac_main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <decl_stmt><decl><type><name>lua_State</name><modifier>*</modifier></type> <name>L</name></decl>;</decl_stmt>
 <decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><call><name>doargs</name><argument_list>(<argument><expr><name>argc</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 <expr_stmt><expr><name>argc</name><operator>-=</operator><name>i</name></expr>;</expr_stmt> <expr_stmt><expr><name>argv</name><operator>+=</operator><name>i</name></expr>;</expr_stmt>
 <if_stmt><if>if <condition>(<expr><name>argc</name><operator>&lt;=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><literal type="string">"no input files given"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
 <expr_stmt><expr><name>L</name><operator>=</operator><call><name>luaL_newstate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
 <if_stmt><if>if <condition>(<expr><name>L</name><operator>==</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"cannot create state: not enough memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
 <expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>pmain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>lua_pushlightuserdata</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <if_stmt><if>if <condition>(<expr><call><name>lua_pcall</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>!=</operator><name>LUA_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
 <expr_stmt><expr><call><name>lua_close</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <return>return <expr><name>EXIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** print bytecodes
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPVALNAME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((f-&gt;upvalues[x].name) ? getstr(f-&gt;upvalues[x].name) : "-")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VOID</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((const void*)(p))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eventname</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(getstr(tmname[i]))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PrintString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TString</name><modifier>*</modifier></type> <name>ts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s</name><init>=<expr><call><name>getstr</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>n</name><init>=<expr><call><name>tsslen</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
 <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>c</name><init>=<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name>c</name></expr>)</condition>
  <block>{<block_content>
   <case>case <expr><literal type="char">'"'</literal></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\\\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><literal type="char">'\\'</literal></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\\\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><literal type="char">'\a'</literal></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\\a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><literal type="char">'\b'</literal></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\\b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><literal type="char">'\f'</literal></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\\f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><literal type="char">'\n'</literal></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><literal type="char">'\r'</literal></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\\r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><literal type="char">'\t'</literal></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><literal type="char">'\v'</literal></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\\v"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <default>default:</default>
	<if_stmt><if>if <condition>(<expr><call><name>isprint</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\\%03d"</literal></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<break>break;</break>
  </block_content>}</block></switch>
 </block_content>}</block></for>
 <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PrintType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Proto</name><modifier>*</modifier></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name><modifier>*</modifier></type> <name>o</name><init>=<expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
 <switch>switch <condition>(<expr><call><name>ttypetag</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition>
 <block>{<block_content>
  <case>case <expr><name>LUA_VNIL</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"N"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
  <case>case <expr><name>LUA_VFALSE</name></expr>:</case>
  <case>case <expr><name>LUA_VTRUE</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"B"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
  <case>case <expr><name>LUA_VNUMFLT</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
  <case>case <expr><name>LUA_VNUMINT</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"I"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
  <case>case <expr><name>LUA_VSHRSTR</name></expr>:</case>
  <case>case <expr><name>LUA_VLNGSTR</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
  <default>default:</default>				<comment type="block">/* cannot happen */</comment>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"?%d"</literal></expr></argument>,<argument><expr><call><name>ttypetag</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
 </block_content>}</block></switch>
 <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PrintConstant</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Proto</name><modifier>*</modifier></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name><modifier>*</modifier></type> <name>o</name><init>=<expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
 <switch>switch <condition>(<expr><call><name>ttypetag</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition>
 <block>{<block_content>
  <case>case <expr><name>LUA_VNIL</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"nil"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
  <case>case <expr><name>LUA_VFALSE</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
  <case>case <expr><name>LUA_VTRUE</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
  <case>case <expr><name>LUA_VNUMFLT</name></expr>:</case>
	<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>,<argument><expr><name>LUA_NUMBER_FMT</name></expr></argument>,<argument><expr><call><name>fltvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>buff</name><index>[<expr><call><name>strspn</name><argument_list>(<argument><expr><name>buff</name></expr></argument>,<argument><expr><literal type="string">"-0123456789"</literal></expr></argument>)</argument_list></call></expr>]</index></name><operator>==</operator><literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">".0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<break>break;</break>
	</block_content>}</block>
  <case>case <expr><name>LUA_VNUMINT</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>LUA_INTEGER_FMT</name></expr></argument>,<argument><expr><call><name>ivalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
  <case>case <expr><name>LUA_VSHRSTR</name></expr>:</case>
  <case>case <expr><name>LUA_VLNGSTR</name></expr>:</case>
	<expr_stmt><expr><call><name>PrintString</name><argument_list>(<argument><expr><call><name>tsvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
  <default>default:</default>				<comment type="block">/* cannot happen */</comment>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"?%d"</literal></expr></argument>,<argument><expr><call><name>ttypetag</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
 </block_content>}</block></switch>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMENT</name></cpp:macro>		<cpp:value>"\t; "</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRAARG</name></cpp:macro>	<cpp:value>GETARG_Ax(code[pc+1])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRAARGC</name></cpp:macro>	<cpp:value>(EXTRAARG*(MAXARG_C+1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISK</name></cpp:macro>		<cpp:value>(isk ? "k" : "")</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PrintCode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Proto</name><modifier>*</modifier></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <decl_stmt><decl><type><specifier>const</specifier> <name>Instruction</name><modifier>*</modifier></type> <name>code</name><init>=<expr><name><name>f</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl>;</decl_stmt>
 <decl_stmt><decl><type><name>int</name></type> <name>pc</name></decl>,<decl><type ref="prev"/><name>n</name><init>=<expr><name><name>f</name><operator>-&gt;</operator><name>sizecode</name></name></expr></init></decl>;</decl_stmt>
 <for>for <control>(<init><expr><name>pc</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>pc</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>pc</name><operator>++</operator></expr></incr>)</control>
 <block>{<block_content>
  <decl_stmt><decl><type><name>Instruction</name></type> <name>i</name><init>=<expr><name><name>code</name><index>[<expr><name>pc</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>OpCode</name></type> <name>o</name><init>=<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>a</name><init>=<expr><call><name>GETARG_A</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>b</name><init>=<expr><call><name>GETARG_B</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>c</name><init>=<expr><call><name>GETARG_C</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ax</name><init>=<expr><call><name>GETARG_Ax</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bx</name><init>=<expr><call><name>GETARG_Bx</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>sb</name><init>=<expr><call><name>GETARG_sB</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>sc</name><init>=<expr><call><name>GETARG_sC</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>sbx</name><init>=<expr><call><name>GETARG_sBx</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>isk</name><init>=<expr><call><name>GETARG_k</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>line</name><init>=<expr><call><name>luaG_getfuncline</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t%d\t"</literal></expr></argument>,<argument><expr><name>pc</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>line</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[%d]\t"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[-]\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-9s\t"</literal></expr></argument>,<argument><expr><name><name>opnames</name><index>[<expr><name>o</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name>o</name></expr>)</condition>
  <block>{<block_content>
   <case>case <expr><name>OP_MOVE</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_LOADI</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>sbx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_LOADF</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>sbx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_LOADK</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>bx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PrintConstant</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>bx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_LOADKX</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PrintConstant</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>EXTRAARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_LOADFALSE</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_LFALSESKIP</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_LOADTRUE</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_LOADNIL</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>COMMENT</name> <literal type="string">"%d out"</literal></expr></argument>,<argument><expr><name>b</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_GETUPVAL</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>COMMENT</name> <literal type="string">"%s"</literal></expr></argument>,<argument><expr><call><name>UPVALNAME</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_SETUPVAL</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>COMMENT</name> <literal type="string">"%s"</literal></expr></argument>,<argument><expr><call><name>UPVALNAME</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_GETTABUP</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>COMMENT</name> <literal type="string">"%s"</literal></expr></argument>,<argument><expr><call><name>UPVALNAME</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PrintConstant</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_GETTABLE</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_GETI</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_GETFIELD</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PrintConstant</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_SETTABUP</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d%s"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>ISK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>COMMENT</name> <literal type="string">"%s"</literal></expr></argument>,<argument><expr><call><name>UPVALNAME</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PrintConstant</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>isk</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PrintConstant</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_SETTABLE</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d%s"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>ISK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>isk</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PrintConstant</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_SETI</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d%s"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>ISK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>isk</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PrintConstant</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_SETFIELD</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d%s"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>ISK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PrintConstant</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>isk</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PrintConstant</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_NEWTABLE</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>COMMENT</name> <literal type="string">"%d"</literal></expr></argument>,<argument><expr><name>c</name><operator>+</operator><name>EXTRAARGC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_SELF</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d%s"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>ISK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>isk</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PrintConstant</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_ADDI</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_ADDK</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PrintConstant</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_SUBK</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PrintConstant</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_MULK</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PrintConstant</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_MODK</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PrintConstant</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_POWK</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PrintConstant</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_DIVK</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PrintConstant</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_IDIVK</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PrintConstant</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_BANDK</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PrintConstant</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_BORK</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PrintConstant</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_BXORK</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PrintConstant</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_SHRI</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_SHLI</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_ADD</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_SUB</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_MUL</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_MOD</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_POW</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_DIV</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_IDIV</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_BAND</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_BOR</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_BXOR</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_SHL</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_SHR</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_MMBIN</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>COMMENT</name> <literal type="string">"%s"</literal></expr></argument>,<argument><expr><call><name>eventname</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_MMBINI</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>sb</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>isk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>COMMENT</name> <literal type="string">"%s"</literal></expr></argument>,<argument><expr><call><name>eventname</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>isk</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" flip"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_MMBINK</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>isk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>COMMENT</name> <literal type="string">"%s "</literal></expr></argument>,<argument><expr><call><name>eventname</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PrintConstant</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>isk</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" flip"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_UNM</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_BNOT</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_NOT</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_LEN</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_CONCAT</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_CLOSE</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_TBC</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_JMP</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><call><name>GETARG_sJ</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>COMMENT</name> <literal type="string">"to %d"</literal></expr></argument>,<argument><expr><call><name>GETARG_sJ</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>+</operator><name>pc</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_EQ</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>isk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_LT</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>isk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_LE</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>isk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_EQK</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>isk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PrintConstant</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_EQI</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>sb</name></expr></argument>,<argument><expr><name>isk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_LTI</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>sb</name></expr></argument>,<argument><expr><name>isk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_LEI</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>sb</name></expr></argument>,<argument><expr><name>isk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_GTI</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>sb</name></expr></argument>,<argument><expr><name>isk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_GEI</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>sb</name></expr></argument>,<argument><expr><name>isk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_TEST</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>isk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_TESTSET</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>isk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_CALL</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"all in "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d in "</literal></expr></argument>,<argument><expr><name>b</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>c</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"all out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d out"</literal></expr></argument>,<argument><expr><name>c</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_TAILCALL</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>COMMENT</name> <literal type="string">"%d in"</literal></expr></argument>,<argument><expr><name>b</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_RETURN</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"all out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d out"</literal></expr></argument>,<argument><expr><name>b</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_RETURN0</name></expr>:</case>
	<break>break;</break>
   <case>case <expr><name>OP_RETURN1</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_FORLOOP</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>bx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>COMMENT</name> <literal type="string">"to %d"</literal></expr></argument>,<argument><expr><name>pc</name><operator>-</operator><name>bx</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_FORPREP</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>bx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>COMMENT</name> <literal type="string">"to %d"</literal></expr></argument>,<argument><expr><name>pc</name><operator>+</operator><name>bx</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_TFORPREP</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>bx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>COMMENT</name> <literal type="string">"to %d"</literal></expr></argument>,<argument><expr><name>pc</name><operator>+</operator><name>bx</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_TFORCALL</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_TFORLOOP</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>bx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>COMMENT</name> <literal type="string">"to %d"</literal></expr></argument>,<argument><expr><name>pc</name><operator>-</operator><name>bx</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_SETLIST</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>isk</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>COMMENT</name> <literal type="string">"%d"</literal></expr></argument>,<argument><expr><name>c</name><operator>+</operator><name>EXTRAARGC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_CLOSURE</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>bx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>COMMENT</name> <literal type="string">"%p"</literal></expr></argument>,<argument><expr><call><name>VOID</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>bx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_VARARG</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>c</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"all out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d out"</literal></expr></argument>,<argument><expr><name>c</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_VARARGPREP</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>OP_EXTRAARG</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name>ax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
   default:
	printf("%d %d %d",a,b,c);
	printf(COMMENT "not handled");
	break;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></switch>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 </block_content>}</block></for>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>((x==1)?"":"s")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(int)(x),SS(x)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PrintHeader</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Proto</name><modifier>*</modifier></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s</name><init>=<expr><ternary><condition><expr><name><name>f</name><operator>-&gt;</operator><name>source</name></name></expr> ?</condition><then> <expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">"=?"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
 <if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name><operator>==</operator><literal type="char">'@'</literal> <operator>||</operator> <operator>*</operator><name>s</name><operator>==</operator><literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>
  <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
 <if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name><operator>==</operator><name><name>LUA_SIGNATURE</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
  <expr_stmt><expr><name>s</name><operator>=</operator><literal type="string">"(bstring)"</literal></expr>;</expr_stmt></block_content></block></if>
 <else>else<block type="pseudo"><block_content>
  <expr_stmt><expr><name>s</name><operator>=</operator><literal type="string">"(string)"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
 <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n%s &lt;%s:%d,%d&gt; (%d instruction%s at %p)\n"</literal></expr></argument>,
	<argument><expr><ternary><condition><expr><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>linedefined</name></name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"main"</literal></expr></then><else>:<expr><literal type="string">"function"</literal></expr></else></ternary></expr></argument>,<argument><expr><name>s</name></expr></argument>,
	<argument><expr><name><name>f</name><operator>-&gt;</operator><name>linedefined</name></name></expr></argument>,<argument><expr><name><name>f</name><operator>-&gt;</operator><name>lastlinedefined</name></name></expr></argument>,
	<argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>sizecode</name></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>VOID</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d%s param%s, %d slot%s, %d upvalue%s, "</literal></expr></argument>,
	<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>numparams</name></name><operator>)</operator></expr></argument>,<argument><expr><ternary><condition><expr><name><name>f</name><operator>-&gt;</operator><name>is_vararg</name></name></expr>?</condition><then><expr><literal type="string">"+"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,<argument><expr><call><name>SS</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>numparams</name></name></expr></argument>)</argument_list></call></expr></argument>,
	<argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>maxstacksize</name></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>sizeupvalues</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d local%s, %d constant%s, %d function%s\n"</literal></expr></argument>,
	<argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>sizelocvars</name></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>sizek</name></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>sizep</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PrintDebug</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Proto</name><modifier>*</modifier></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
 <expr_stmt><expr><name>n</name><operator>=</operator><name><name>f</name><operator>-&gt;</operator><name>sizek</name></name></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"constants (%d) for %p:\n"</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><call><name>VOID</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
 <block>{<block_content>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t%d\t"</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PrintType</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PrintConstant</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 </block_content>}</block></for>
 <expr_stmt><expr><name>n</name><operator>=</operator><name><name>f</name><operator>-&gt;</operator><name>sizelocvars</name></name></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"locals (%d) for %p:\n"</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><call><name>VOID</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
 <block>{<block_content>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t%d\t%s\t%d\t%d\n"</literal></expr></argument>,
  <argument><expr><name>i</name></expr></argument>,<argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>locvars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>varname</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name><name>f</name><operator>-&gt;</operator><name>locvars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>startpc</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>f</name><operator>-&gt;</operator><name>locvars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>endpc</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 </block_content>}</block></for>
 <expr_stmt><expr><name>n</name><operator>=</operator><name><name>f</name><operator>-&gt;</operator><name>sizeupvalues</name></name></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"upvalues (%d) for %p:\n"</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><call><name>VOID</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
 <block>{<block_content>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t%d\t%s\t%d\t%d\n"</literal></expr></argument>,
  <argument><expr><name>i</name></expr></argument>,<argument><expr><call><name>UPVALNAME</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name><name>f</name><operator>-&gt;</operator><name>upvalues</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>instack</name></expr></argument>,<argument><expr><name><name>f</name><operator>-&gt;</operator><name>upvalues</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PrintFunction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Proto</name><modifier>*</modifier></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>full</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>n</name><init>=<expr><name><name>f</name><operator>-&gt;</operator><name>sizep</name></name></expr></init></decl>;</decl_stmt>
 <expr_stmt><expr><call><name>PrintHeader</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>PrintCode</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <if_stmt><if>if <condition>(<expr><name>full</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>PrintDebug</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
 <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>PrintFunction</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>full</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>
</unit>
