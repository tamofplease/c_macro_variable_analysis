<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/lua/lapi.c"><comment type="block">/*
** $Id: lapi.c $
** Lua API
** See Copyright Notice in lua.h
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lapi_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lprefix.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ldebug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ldo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lfunc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lgc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lstate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ltable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ltm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lundump.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lvm.h"</cpp:file></cpp:include>



<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>lua_ident</name><index>[]</index></name> <init>=
  <expr><literal type="string">"$LuaVersion: "</literal> <name>LUA_COPYRIGHT</name> <literal type="string">" $"</literal>
  <literal type="string">"$LuaAuthors: "</literal> <name>LUA_AUTHORS</name> <literal type="string">" $"</literal></expr></init></decl>;</decl_stmt>



<comment type="block">/*
** Test for a valid index.
** '!ttisnil(o)' implies 'o != &amp;G(L)-&gt;nilvalue', so it is not needed.
** However, it covers the most common cases in a faster way.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isvalid</name><parameter_list>(<parameter><type><name>L</name></type></parameter>, <parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(!ttisnil(o) || o != &amp;G(L)-&gt;nilvalue)</cpp:value></cpp:define>


<comment type="block">/* test for pseudo index */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ispseudo</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>((i) &lt;= LUA_REGISTRYINDEX)</cpp:value></cpp:define>

<comment type="block">/* test for upvalue */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isupvalue</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>((i) &lt; LUA_REGISTRYINDEX)</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>TValue</name> <modifier>*</modifier></type><name>index2value</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name> <init>= <expr><name><name>L</name><operator>-&gt;</operator><name>ci</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>StkId</name></type> <name>o</name> <init>= <expr><name><name>ci</name><operator>-&gt;</operator><name>func</name></name> <operator>+</operator> <name>idx</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>api_check</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name> <operator>&lt;=</operator> <name><name>L</name><operator>-&gt;</operator><name>ci</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <operator>(</operator><name><name>ci</name><operator>-&gt;</operator><name>func</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"unacceptable index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>o</name> <operator>&gt;=</operator> <name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>&amp;</operator><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>nilvalue</name></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content> <return>return <expr><call><name>s2v</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ispseudo</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* negative index */</comment>
    <expr_stmt><expr><call><name>api_check</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>-</operator><name>idx</name> <operator>&lt;=</operator> <name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <operator>(</operator><name><name>ci</name><operator>-&gt;</operator><name>func</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"invalid index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>+</operator> <name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name>idx</name> <operator>==</operator> <name>LUA_REGISTRYINDEX</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>&amp;</operator><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>l_registry</name></expr>;</return></block_content></block></if>
  <else>else <block>{<block_content>  <comment type="block">/* upvalues */</comment>
    <expr_stmt><expr><name>idx</name> <operator>=</operator> <name>LUA_REGISTRYINDEX</name> <operator>-</operator> <name>idx</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>api_check</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name> <operator>&lt;=</operator> <name>MAXUPVAL</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"upvalue index too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>ttislcf</name><argument_list>(<argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>func</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* light C function? */</comment>
      <return>return <expr><operator>&amp;</operator><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>nilvalue</name></expr>;</return></block_content></block></if>  <comment type="block">/* it has no upvalues */</comment>
    <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>CClosure</name> <modifier>*</modifier></type><name>func</name> <init>= <expr><call><name>clCvalue</name><argument_list>(<argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>func</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><ternary><condition><expr><operator>(</operator><name>idx</name> <operator>&lt;=</operator> <name><name>func</name><operator>-&gt;</operator><name>nupvalues</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>func</name><operator>-&gt;</operator><name>upvalue</name><index>[<expr><name>idx</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><operator>&amp;</operator><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>nilvalue</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>StkId</name></type> <name>index2stack</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name> <init>= <expr><name><name>L</name><operator>-&gt;</operator><name>ci</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>StkId</name></type> <name>o</name> <init>= <expr><name><name>ci</name><operator>-&gt;</operator><name>func</name></name> <operator>+</operator> <name>idx</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>api_check</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>o</name> <operator>&lt;</operator> <name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><literal type="string">"unacceptable index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>o</name></expr>;</return>
  </block_content>}</block></if>
  <else>else <block>{<block_content>    <comment type="block">/* non-positive index */</comment>
    <expr_stmt><expr><call><name>api_check</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>-</operator><name>idx</name> <operator>&lt;=</operator> <name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <operator>(</operator><name><name>ci</name><operator>-&gt;</operator><name>func</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"invalid index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>api_check</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>!</operator><call><name>ispseudo</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"invalid index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>+</operator> <name>idx</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_checkstack</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ci</name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>ci</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>api_check</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"negative 'n'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>L</name><operator>-&gt;</operator><name>stack_last</name></name> <operator>-</operator> <name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>&gt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* stack large enough? */</comment>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* yes; check is OK */</comment>
  <else>else <block>{<block_content>  <comment type="block">/* no; need to grow stack */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>inuse</name> <init>= <expr><call><name>cast_int</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <name><name>L</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>EXTRA_STACK</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>inuse</name> <operator>&gt;</operator> <name>LUAI_MAXSTACK</name> <operator>-</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* can grow without overflow? */</comment>
      <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* no */</comment>
    <else>else<block type="pseudo"><block_content>  <comment type="block">/* try to grow stack */</comment>
      <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>luaD_growstack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>res</name> <operator>&amp;&amp;</operator> <name><name>ci</name><operator>-&gt;</operator><name>top</name></name> <operator>&lt;</operator> <name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>+</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>+</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* adjust frame top */</comment>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>void</name></type> <name>lua_xmove</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>from</name> <operator>==</operator> <name>to</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>api_checknelems</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>api_check</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><call><name>G</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>G</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"moving among independent states"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>api_check</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name><name>to</name><operator>-&gt;</operator><name>ci</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <name><name>to</name><operator>-&gt;</operator><name>top</name></name> <operator>&gt;=</operator> <name>n</name></expr></argument>, <argument><expr><literal type="string">"stack overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>from</name><operator>-&gt;</operator><name>top</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>setobjs2s</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name><name>to</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>top</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>top</name></name><operator>++</operator></expr>;</expr_stmt>  <comment type="block">/* stack already checked by previous 'api_check' */</comment>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>lua_CFunction</name></type> <name>lua_atpanic</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>lua_CFunction</name></type> <name>panicf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lua_CFunction</name></type> <name>old</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>old</name> <operator>=</operator> <call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>panic</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>panic</name> <operator>=</operator> <name>panicf</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>old</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>lua_Number</name></type> <name>lua_version</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>LUA_VERSION_NUM</name></expr>;</return>
</block_content>}</block></function>



<comment type="block">/*
** basic stack manipulation
*/</comment>


<comment type="block">/*
** convert an acceptable stack index into an absolute index
*/</comment>
<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_absindex</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><ternary><condition><expr><operator>(</operator><name>idx</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>ispseudo</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call><operator>)</operator></expr>
         ?</condition><then> <expr><name>idx</name></expr>
         </then><else>: <expr><call><name>cast_int</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <name><name>L</name><operator>-&gt;</operator><name>ci</name><operator>-&gt;</operator><name>func</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>idx</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_gettop</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>cast_int</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <operator>(</operator><name><name>L</name><operator>-&gt;</operator><name>ci</name><operator>-&gt;</operator><name>func</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>void</name></type> <name>lua_settop</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>StkId</name></type> <name>func</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>diff</name></decl>;</decl_stmt>  <comment type="block">/* difference for new top */</comment>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ci</name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>ci</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>func</name> <operator>=</operator> <name><name>ci</name><operator>-&gt;</operator><name>func</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>api_check</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name> <operator>&lt;=</operator> <name><name>ci</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <operator>(</operator><name>func</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"new top too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>func</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>idx</name><operator>)</operator> <operator>-</operator> <name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr>;</expr_stmt>
    <for>for <control>(<init>;</init> <condition><expr><name>diff</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>diff</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>setnilvalue</name><argument_list>(<argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>  <comment type="block">/* clear new slots */</comment>
  </block_content>}</block></if>
  <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>api_check</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>idx</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;=</operator> <operator>(</operator><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <operator>(</operator><name>func</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"invalid new top"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>diff</name> <operator>=</operator> <name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>  <comment type="block">/* will "subtract" index (as it is negative) */</comment>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>hastocloseCfunc</name><argument_list>(<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>nresults</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaF_close</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>+</operator> <name>diff</name></expr></argument>, <argument><expr><name>LUA_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>+=</operator> <name>diff</name></expr>;</expr_stmt>  <comment type="block">/* correct top only after closing any upvalue */</comment>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Reverse the stack segment from 'from' to 'to'
** (auxiliary to 'lua_rotate')
** Note that we move(copy) only the value inside the stack.
** (We do not move additional fields that may exist.)
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>reverse</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>StkId</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>StkId</name></type> <name>to</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init>;</init> <condition><expr><name>from</name> <operator>&lt;</operator> <name>to</name></expr>;</condition> <incr><expr><name>from</name><operator>++</operator></expr><operator>,</operator> <expr><name>to</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>TValue</name></type> <name>temp</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>setobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setobjs2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setobj2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>


<comment type="block">/*
** Let x = AB, where A is a prefix of length 'n'. Then,
** rotate x n == BA. But BA == (A^r . B^r)^r.
*/</comment>
<function><type><name>LUA_API</name> <name>void</name></type> <name>lua_rotate</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>StkId</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>  <comment type="block">/* end of stack segment being rotated */</comment>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>index2stack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* start of segment */</comment>
  <expr_stmt><expr><call><name>api_check</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>n</name></expr> </then><else>: <expr><operator>-</operator><name>n</name></expr></else></ternary><operator>)</operator> <operator>&lt;=</operator> <operator>(</operator><name>t</name> <operator>-</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"invalid 'n'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>t</name> <operator>-</operator> <name>n</name></expr> </then><else>: <expr><name>p</name> <operator>-</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>  <comment type="block">/* end of prefix */</comment>
  <expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* reverse the prefix with length 'n' */</comment>
  <expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>m</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* reverse the suffix */</comment>
  <expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* reverse the entire segment */</comment>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>void</name></type> <name>lua_copy</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fromidx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>toidx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>fr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>to</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>fr</name> <operator>=</operator> <call><name>index2value</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>fromidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>to</name> <operator>=</operator> <call><name>index2value</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>toidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>api_check</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>isvalid</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"invalid index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>fr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>isupvalue</name><argument_list>(<argument><expr><name>toidx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* function upvalue? */</comment>
    <expr_stmt><expr><call><name>luaC_barrier</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>clCvalue</name><argument_list>(<argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>ci</name><operator>-&gt;</operator><name>func</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <comment type="block">/* LUA_REGISTRYINDEX does not need gc barrier
     (collector revisits it before finishing collection) */</comment>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>void</name></type> <name>lua_pushvalue</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setobj2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><call><name>index2value</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>api_incr_top</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<comment type="block">/*
** access functions (stack -&gt; C)
*/</comment>


<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_type</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>index2value</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><ternary><condition><expr><call><name>isvalid</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>ttype</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>LUA_TNONE</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lua_typename</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>api_check</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_TNONE</name> <operator>&lt;=</operator> <name>t</name> <operator>&amp;&amp;</operator> <name>t</name> <operator>&lt;</operator> <name>LUA_NUMTYPES</name></expr></argument>, <argument><expr><literal type="string">"invalid type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>ttypename</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_iscfunction</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>index2value</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><call><name>ttislcf</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>ttisCclosure</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_isinteger</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>index2value</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>ttisinteger</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_isnumber</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lua_Number</name></type> <name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>index2value</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>tonumber</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_isstring</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>index2value</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><call><name>ttisstring</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>cvt2str</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_isuserdata</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>index2value</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><call><name>ttisfulluserdata</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>ttislightuserdata</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_rawequal</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>o1</name> <init>= <expr><call><name>index2value</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>index1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>o2</name> <init>= <expr><call><name>index2value</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>index2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><ternary><condition><expr><operator>(</operator><call><name>isvalid</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>o1</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isvalid</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><call><name>luaV_rawequalobj</name><argument_list>(<argument><expr><name>o1</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>void</name></type> <name>lua_arith</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>op</name> <operator>!=</operator> <name>LUA_OPUNM</name> <operator>&amp;&amp;</operator> <name>op</name> <operator>!=</operator> <name>LUA_OPBNOT</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>api_checknelems</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* all other operations expect two operands */</comment>
  <else>else <block>{<block_content>  <comment type="block">/* for unary operations, add fake 2nd operand */</comment>
    <expr_stmt><expr><call><name>api_checknelems</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setobjs2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>api_incr_top</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* first operand at top - 2, second at top - 1; result go to top - 2 */</comment>
  <expr_stmt><expr><call><name>luaO_arith</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>--</operator></expr>;</expr_stmt>  <comment type="block">/* remove second operand */</comment>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_compare</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>o1</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>o2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* may call tag method */</comment>
  <expr_stmt><expr><name>o1</name> <operator>=</operator> <call><name>index2value</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>index1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>o2</name> <operator>=</operator> <call><name>index2value</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>index2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>isvalid</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>o1</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isvalid</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>LUA_OPEQ</name></expr>:</case> <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>luaV_equalobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>o1</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
      <case>case <expr><name>LUA_OPLT</name></expr>:</case> <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>luaV_lessthan</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>o1</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
      <case>case <expr><name>LUA_OPLE</name></expr>:</case> <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>luaV_lessequal</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>o1</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
      <default>default:</default> <expr_stmt><expr><call><name>api_check</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"invalid option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>size_t</name></type> <name>lua_stringtonumber</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><call><name>luaO_str2num</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>sz</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>api_incr_top</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>sz</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>lua_Number</name></type> <name>lua_tonumberx</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pisnum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lua_Number</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>index2value</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>isnum</name> <init>= <expr><call><name>tonumber</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pisnum</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator><name>pisnum</name> <operator>=</operator> <name>isnum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>lua_Integer</name></type> <name>lua_tointegerx</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pisnum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lua_Integer</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>index2value</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>isnum</name> <init>= <expr><call><name>tointeger</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pisnum</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator><name>pisnum</name> <operator>=</operator> <name>isnum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_toboolean</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>index2value</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>!</operator><call><name>l_isfalse</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lua_tolstring</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>index2value</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ttisstring</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cvt2str</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* not convertible? */</comment>
      <if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>luaO_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaC_checkGC</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>index2value</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* previous call may reallocate the stack */</comment>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <call><name>vslen</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>svalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>lua_Unsigned</name></type> <name>lua_rawlen</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>index2value</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><call><name>ttypetag</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>LUA_VSHRSTR</name></expr>:</case> <return>return <expr><call><name>tsvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>shrlen</name></expr>;</return>
    <case>case <expr><name>LUA_VLNGSTR</name></expr>:</case> <return>return <expr><call><name>tsvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>lnglen</name></name></expr>;</return>
    <case>case <expr><name>LUA_VUSERDATA</name></expr>:</case> <return>return <expr><call><name>uvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>len</name></expr>;</return>
    <case>case <expr><name>LUA_VTABLE</name></expr>:</case> <return>return <expr><call><name>luaH_getn</name><argument_list>(<argument><expr><call><name>hvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default> <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>lua_CFunction</name></type> <name>lua_tocfunction</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>index2value</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>ttislcf</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>fvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><call><name>ttisCclosure</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>clCvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>f</name></expr>;</return></block_content></block></if>
  <else>else<block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>  <comment type="block">/* not a C function */</comment>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>touserdata</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><call><name>ttype</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>LUA_TUSERDATA</name></expr>:</case> <return>return <expr><call><name>getudatamem</name><argument_list>(<argument><expr><call><name>uvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>LUA_TLIGHTUSERDATA</name></expr>:</case> <return>return <expr><call><name>pvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default> <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>void</name> <modifier>*</modifier></type><name>lua_touserdata</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>index2value</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>touserdata</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>lua_State</name> <modifier>*</modifier></type><name>lua_tothread</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>index2value</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><ternary><condition><expr><operator>(</operator><operator>!</operator><call><name>ttisthread</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>thvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Returns a pointer to the internal representation of an object.
** Note that ANSI C does not allow the conversion of a pointer to
** function to a 'void*', so the conversion here goes through
** a 'size_t'. (As the returned pointer is only informative, this
** conversion should not be a problem.)
*/</comment>
<function><type><name>LUA_API</name> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>lua_topointer</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>index2value</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><call><name>ttypetag</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>LUA_VLCF</name></expr>:</case> <return>return <expr><call><name>cast_voidp</name><argument_list>(<argument><expr><call><name>cast_sizet</name><argument_list>(<argument><expr><call><name>fvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>LUA_VUSERDATA</name></expr>:</case> <case>case <expr><name>LUA_VLIGHTUSERDATA</name></expr>:</case>
      <return>return <expr><call><name>touserdata</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>iscollectable</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>gcvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block>
  </block_content>}</block></switch>
</block_content>}</block></function>



<comment type="block">/*
** push functions (C -&gt; stack)
*/</comment>


<function><type><name>LUA_API</name> <name>void</name></type> <name>lua_pushnil</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setnilvalue</name><argument_list>(<argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>api_incr_top</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>void</name></type> <name>lua_pushnumber</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>lua_Number</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setfltvalue</name><argument_list>(<argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>api_incr_top</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>void</name></type> <name>lua_pushinteger</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>lua_Integer</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setivalue</name><argument_list>(<argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>api_incr_top</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Pushes on the stack a string with given length. Avoid using 's' when
** 'len' == 0 (as 's' can be NULL in that case), due to later use of
** 'memcmp' and 'memcpy'.
*/</comment>
<function><type><name>LUA_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lua_pushlstring</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TString</name> <modifier>*</modifier></type><name>ts</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ts</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>len</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>luaS_new</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>luaS_newlstr</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setsvalue2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>api_incr_top</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaC_checkGC</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>getstr</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lua_pushstring</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>setnilvalue</name><argument_list>(<argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>TString</name> <modifier>*</modifier></type><name>ts</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>luaS_new</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setsvalue2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>getstr</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* internal copy's address */</comment>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>api_incr_top</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaC_checkGC</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lua_pushvfstring</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,
                                      <parameter><decl><type><name>va_list</name></type> <name>argp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>luaO_pushvfstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>argp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaC_checkGC</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lua_pushfstring</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>va_list</name></type> <name>argp</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>luaO_pushvfstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>argp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>argp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaC_checkGC</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>void</name></type> <name>lua_pushcclosure</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>lua_CFunction</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setfvalue</name><argument_list>(<argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>api_incr_top</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>CClosure</name> <modifier>*</modifier></type><name>cl</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>api_checknelems</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>api_check</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>n</name> <operator>&lt;=</operator> <name>MAXUPVAL</name></expr></argument>, <argument><expr><literal type="string">"upvalue index too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cl</name> <operator>=</operator> <call><name>luaF_newCclosure</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>n</name><operator>--</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setobj2n</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>upvalue</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* does not need barrier because closure is white */</comment>
      <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>iswhite</name><argument_list>(<argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>setclCvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>api_incr_top</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaC_checkGC</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>void</name></type> <name>lua_pushboolean</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>b</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>setbtvalue</name><argument_list>(<argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>setbfvalue</name><argument_list>(<argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <expr_stmt><expr><call><name>api_incr_top</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>void</name></type> <name>lua_pushlightuserdata</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setpvalue</name><argument_list>(<argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>api_incr_top</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_pushthread</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setthvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>api_incr_top</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>mainthread</name> <operator>==</operator> <name>L</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>



<comment type="block">/*
** get functions (Lua -&gt; stack)
*/</comment>


<function><type><specifier>static</specifier> <name>int</name></type> <name>auxgetstr</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TString</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>luaS_new</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>luaV_fastget</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>luaH_getstr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setobj2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>api_incr_top</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>setsvalue2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>api_incr_top</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaV_finishget</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>ttype</name><argument_list>(<argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_getglobal</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>reg</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>hvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>l_registry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>auxgetstr</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>luaH_getint</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>LUA_RIDX_GLOBALS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_gettable</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>index2value</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>luaV_fastget</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>luaH_get</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setobj2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaV_finishget</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>ttype</name><argument_list>(<argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_getfield</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>auxgetstr</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>index2value</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_geti</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>lua_Integer</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>index2value</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>luaV_fastgeti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setobj2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>TValue</name></type> <name>aux</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>setivalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aux</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaV_finishget</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aux</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>api_incr_top</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>ttype</name><argument_list>(<argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>finishrawget</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>isempty</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* avoid copying empty items to the stack */</comment>
    <expr_stmt><expr><call><name>setnilvalue</name><argument_list>(<argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>setobj2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <expr_stmt><expr><call><name>api_incr_top</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>ttype</name><argument_list>(<argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>Table</name> <modifier>*</modifier></type><name>gettable</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>index2value</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>api_check</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>ttistable</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"table expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>hvalue</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_rawget</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>api_checknelems</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>gettable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>luaH_get</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>--</operator></expr>;</expr_stmt>  <comment type="block">/* remove key */</comment>
  <return>return <expr><call><name>finishrawget</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_rawgeti</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>lua_Integer</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>gettable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>finishrawget</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>luaH_getint</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_rawgetp</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TValue</name></type> <name>k</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>gettable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setpvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>, <argument><expr><call><name>cast_voidp</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>finishrawget</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>luaH_get</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>void</name></type> <name>lua_createtable</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>narray</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nrec</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>luaH_new</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sethvalue2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>api_incr_top</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>narray</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>nrec</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaH_resize</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>narray</name></expr></argument>, <argument><expr><name>nrec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>luaC_checkGC</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_getmetatable</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>objindex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>mt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>index2value</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>objindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><call><name>ttype</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>LUA_TTABLE</name></expr>:</case>
      <expr_stmt><expr><name>mt</name> <operator>=</operator> <call><name>hvalue</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>metatable</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>LUA_TUSERDATA</name></expr>:</case>
      <expr_stmt><expr><name>mt</name> <operator>=</operator> <call><name>uvalue</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>metatable</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><name>mt</name> <operator>=</operator> <call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>mt</name><index>[<expr><call><name>ttype</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
  <if_stmt><if>if <condition>(<expr><name>mt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sethvalue2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><name>mt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>api_incr_top</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_getiuservalue</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>index2value</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>api_check</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>ttisfulluserdata</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"full userdata expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>n</name> <operator>&gt;</operator> <call><name>uvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>nuvalue</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setnilvalue</name><argument_list>(<argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <name>LUA_TNONE</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>setobj2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>uvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>uv</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>uv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>ttype</name><argument_list>(<argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>api_incr_top</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** set functions (stack -&gt; Lua)
*/</comment>

<comment type="block">/*
** t[k] = value at the top of the stack (where 'k' is a string)
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>auxsetstr</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TString</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>luaS_new</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>api_checknelems</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>luaV_fastget</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>luaH_getstr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>luaV_finishfastset</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>--</operator></expr>;</expr_stmt>  <comment type="block">/* pop value */</comment>
  </block_content>}</block></if>
  <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>setsvalue2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* push 'str' (to make it a TValue) */</comment>
    <expr_stmt><expr><call><name>api_incr_top</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaV_finishset</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>  <comment type="block">/* pop value and key */</comment>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* lock done by caller */</comment>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>void</name></type> <name>lua_setglobal</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>reg</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* unlock done in 'auxsetstr' */</comment>
  <expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>hvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>l_registry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>auxsetstr</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>luaH_getint</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>LUA_RIDX_GLOBALS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>void</name></type> <name>lua_settable</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>api_checknelems</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>index2value</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>luaV_fastget</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>luaH_get</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>luaV_finishfastset</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaV_finishset</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>  <comment type="block">/* pop index and value */</comment>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>void</name></type> <name>lua_setfield</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* unlock done in 'auxsetstr' */</comment>
  <expr_stmt><expr><call><name>auxsetstr</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>index2value</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>void</name></type> <name>lua_seti</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>lua_Integer</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>api_checknelems</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>index2value</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>luaV_fastgeti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>luaV_finishfastset</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>TValue</name></type> <name>aux</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>setivalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aux</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaV_finishset</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aux</name></expr></argument>, <argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>--</operator></expr>;</expr_stmt>  <comment type="block">/* pop value */</comment>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>aux_rawset</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>TValue</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>api_checknelems</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>gettable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>luaH_set</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setobj2t</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>invalidateTMcache</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaC_barrierback</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>obj2gco</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>void</name></type> <name>lua_rawset</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>aux_rawset</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>void</name></type> <name>lua_rawsetp</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TValue</name></type> <name>k</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>setpvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>, <argument><expr><call><name>cast_voidp</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>aux_rawset</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>void</name></type> <name>lua_rawseti</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>lua_Integer</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>api_checknelems</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>gettable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaH_setint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaC_barrierback</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>obj2gco</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>--</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_setmetatable</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>objindex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>mt</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>api_checknelems</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>index2value</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>objindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>ttisnil</name><argument_list>(<argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>mt</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
  <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>api_check</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>ttistable</name><argument_list>(<argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"table expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mt</name> <operator>=</operator> <call><name>hvalue</name><argument_list>(<argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <switch>switch <condition>(<expr><call><name>ttype</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>LUA_TTABLE</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>hvalue</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>metatable</name> <operator>=</operator> <name>mt</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>mt</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>luaC_objbarrier</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>gcvalue</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>luaC_checkfinalizer</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>gcvalue</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>LUA_TUSERDATA</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>uvalue</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>metatable</name> <operator>=</operator> <name>mt</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>mt</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>luaC_objbarrier</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>uvalue</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>luaC_checkfinalizer</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>gcvalue</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default> <block>{<block_content>
      <expr_stmt><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>mt</name><index>[<expr><call><name>ttype</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>mt</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>--</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_setiuservalue</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>api_checknelems</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>index2value</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>api_check</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>ttisfulluserdata</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"full userdata expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>cast_uint</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1u</literal> <operator>&lt;</operator> <call><name>cast_uint</name><argument_list>(<argument><expr><call><name>uvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>nuvalue</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* 'n' not in [1, uvalue(o)-&gt;nuvalue] */</comment>
  <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>setobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>uvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>uv</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>uv</name></expr></argument>, <argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaC_barrierback</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>gcvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>--</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** 'load' and 'call' functions (run Lua code)
*/</comment>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>checkresults</name><parameter_list>(<parameter><type><name>L</name></type></parameter>,<parameter><type><name>na</name></type></parameter>,<parameter><type><name>nr</name></type></parameter>)</parameter_list></cpp:macro> \
     <cpp:value>api_check(L, (nr) == LUA_MULTRET || (L-&gt;ci-&gt;top - L-&gt;top &gt;= (nr) - (na)), \
	"results from function overflow current stack size")</cpp:value></cpp:define>


<function><type><name>LUA_API</name> <name>void</name></type> <name>lua_callk</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nargs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nresults</name></decl></parameter>,
                        <parameter><decl><type><name>lua_KContext</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>lua_KFunction</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>StkId</name></type> <name>func</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>api_check</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>k</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>isLua</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>ci</name></name></expr></argument>)</argument_list></call></expr></argument>,
    <argument><expr><literal type="string">"cannot use continuations inside hooks"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>api_checknelems</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>nargs</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>api_check</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>LUA_OK</name></expr></argument>, <argument><expr><literal type="string">"cannot do calls on non-normal thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>checkresults</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>nargs</name></expr></argument>, <argument><expr><name>nresults</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>func</name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <operator>(</operator><name>nargs</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>k</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>yieldable</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* need to prepare continuation? */</comment>
    <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>ci</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>c</name><operator>.</operator><name>k</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>  <comment type="block">/* save continuation */</comment>
    <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>ci</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>c</name><operator>.</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>  <comment type="block">/* save context */</comment>
    <expr_stmt><expr><call><name>luaD_call</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>nresults</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* do the call */</comment>
  </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content>  <comment type="block">/* no continuation or no yieldable */</comment>
    <expr_stmt><expr><call><name>luaD_callnoyield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>nresults</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>  <comment type="block">/* just do the call */</comment>
  <expr_stmt><expr><call><name>adjustresults</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>nresults</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<comment type="block">/*
** Execute a protected call.
*/</comment>
<struct>struct <name>CallS</name> <block>{  <comment type="block">/* data to 'f_call' */</comment>
  <decl_stmt><decl><type><name>StkId</name></type> <name>func</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nresults</name></decl>;</decl_stmt>
}</block>;</struct>


<function><type><specifier>static</specifier> <name>void</name></type> <name>f_call</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ud</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>CallS</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>cast</name><argument_list>(<argument><expr>struct <name>CallS</name> <operator>*</operator></expr></argument>, <argument><expr><name>ud</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaD_callnoyield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>func</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>nresults</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_pcallk</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nargs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nresults</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>errfunc</name></decl></parameter>,
                        <parameter><decl><type><name>lua_KContext</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>lua_KFunction</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>CallS</name></name></type> <name>c</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>func</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>api_check</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>k</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>isLua</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>ci</name></name></expr></argument>)</argument_list></call></expr></argument>,
    <argument><expr><literal type="string">"cannot use continuations inside hooks"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>api_checknelems</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>nargs</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>api_check</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>LUA_OK</name></expr></argument>, <argument><expr><literal type="string">"cannot do calls on non-normal thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>checkresults</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>nargs</name></expr></argument>, <argument><expr><name>nresults</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>errfunc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>func</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>StkId</name></type> <name>o</name> <init>= <expr><call><name>index2stack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>errfunc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>api_check</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>ttisfunction</name><argument_list>(<argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"error handler must be a function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>func</name> <operator>=</operator> <call><name>savestack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>c</name><operator>.</operator><name>func</name></name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <operator>(</operator><name>nargs</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>  <comment type="block">/* function to be called */</comment>
  <if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>yieldable</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* no continuation or no yieldable? */</comment>
    <expr_stmt><expr><name><name>c</name><operator>.</operator><name>nresults</name></name> <operator>=</operator> <name>nresults</name></expr>;</expr_stmt>  <comment type="block">/* do a 'conventional' protected call */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>luaD_pcall</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>f_call</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><call><name>savestack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>c</name><operator>.</operator><name>func</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else <block>{<block_content>  <comment type="block">/* prepare continuation (call is already protected by 'resume') */</comment>
    <decl_stmt><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name> <init>= <expr><name><name>L</name><operator>-&gt;</operator><name>ci</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>c</name><operator>.</operator><name>k</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>  <comment type="block">/* save continuation */</comment>
    <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>c</name><operator>.</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>  <comment type="block">/* save context */</comment>
    <comment type="block">/* save information for error recovery */</comment>
    <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>u2</name><operator>.</operator><name>funcidx</name></name> <operator>=</operator> <call><name>cast_int</name><argument_list>(<argument><expr><call><name>savestack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>c</name><operator>.</operator><name>func</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>c</name><operator>.</operator><name>old_errfunc</name></name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>errfunc</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>errfunc</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setoah</name><argument_list>(<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>callstatus</name></name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>allowhook</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* save value of 'allowhook' */</comment>
    <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>callstatus</name></name> <operator>|=</operator> <name>CIST_YPCALL</name></expr>;</expr_stmt>  <comment type="block">/* function can do error recovery */</comment>
    <expr_stmt><expr><call><name>luaD_call</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>c</name><operator>.</operator><name>func</name></name></expr></argument>, <argument><expr><name>nresults</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* do the call */</comment>
    <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>callstatus</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CIST_YPCALL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>errfunc</name></name> <operator>=</operator> <name><name>ci</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>c</name><operator>.</operator><name>old_errfunc</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>LUA_OK</name></expr>;</expr_stmt>  <comment type="block">/* if it is here, there were no errors */</comment>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>adjustresults</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>nresults</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_load</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>lua_Reader</name></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>chunkname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>ZIO</name></type> <name>z</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>chunkname</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>chunkname</name> <operator>=</operator> <literal type="string">"?"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>luaZ_init</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>luaD_protectedparser</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>, <argument><expr><name>chunkname</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>LUA_OK</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* no errors? */</comment>
    <decl_stmt><decl><type><name>LClosure</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>clLvalue</name><argument_list>(<argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* get newly created function */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>nupvalues</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* does it have an upvalue? */</comment>
      <comment type="block">/* get global table from registry */</comment>
      <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>reg</name> <init>= <expr><call><name>hvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>l_registry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>gt</name> <init>= <expr><call><name>luaH_getint</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>LUA_RIDX_GLOBALS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <comment type="block">/* set global table as 1st upvalue of 'f' (may be LUA_ENV) */</comment>
      <expr_stmt><expr><call><name>setobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>upvals</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>v</name></expr></argument>, <argument><expr><name>gt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>luaC_barrier</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>upvals</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>gt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_dump</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>lua_Writer</name></type> <name>writer</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>strip</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>api_checknelems</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>isLfunction</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>luaU_dump</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>getproto</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>writer</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>strip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_status</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>L</name><operator>-&gt;</operator><name>status</name></name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Garbage-collection function
*/</comment>
<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_gc</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>argp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><name>what</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name>what</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>LUA_GCSTOP</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gcrunning</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>LUA_GCRESTART</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>luaE_setdebt</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gcrunning</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>LUA_GCCOLLECT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>luaC_fullgc</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>LUA_GCCOUNT</name></expr>:</case> <block>{<block_content>
      <comment type="block">/* GC values are expressed in Kbytes: #bytes/2^10 */</comment>
      <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>cast_int</name><argument_list>(<argument><expr><call><name>gettotalbytes</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>LUA_GCCOUNTB</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>cast_int</name><argument_list>(<argument><expr><call><name>gettotalbytes</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x3ff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>LUA_GCSTEP</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>data</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>l_mem</name></type> <name>debt</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* =1 to signal that it did an actual step */</comment>
      <decl_stmt><decl><type><name>lu_byte</name></type> <name>oldrunning</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>gcrunning</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gcrunning</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>  <comment type="block">/* allow GC to run */</comment>
      <if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>luaE_setdebt</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* do a basic step */</comment>
        <expr_stmt><expr><call><name>luaC_step</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else <block>{<block_content>  <comment type="block">/* add 'data' to total debt */</comment>
        <expr_stmt><expr><name>debt</name> <operator>=</operator> <call><name>cast</name><argument_list>(<argument><expr><name>l_mem</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1024</literal> <operator>+</operator> <name><name>g</name><operator>-&gt;</operator><name>GCdebt</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>luaE_setdebt</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>debt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>luaC_checkGC</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gcrunning</name></name> <operator>=</operator> <name>oldrunning</name></expr>;</expr_stmt>  <comment type="block">/* restore previous state */</comment>
      <if_stmt><if>if <condition>(<expr><name>debt</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>g</name><operator>-&gt;</operator><name>gcstate</name></name> <operator>==</operator> <name>GCSpause</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* end of cycle? */</comment>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* signal it */</comment>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>LUA_GCSETPAUSE</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>data</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>getgcparam</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>gcpause</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setgcparam</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>gcpause</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>LUA_GCSETSTEPMUL</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>data</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>getgcparam</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>gcstepmul</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setgcparam</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>gcstepmul</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>LUA_GCISRUNNING</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name>res</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>gcrunning</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>LUA_GCGEN</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>minormul</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>majormul</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>res</name> <operator>=</operator> <ternary><condition><expr><call><name>isdecGCmodegen</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>LUA_GCGEN</name></expr> </then><else>: <expr><name>LUA_GCINC</name></expr></else></ternary></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>minormul</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>genminormul</name></name> <operator>=</operator> <name>minormul</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>majormul</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>setgcparam</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>genmajormul</name></name></expr></argument>, <argument><expr><name>majormul</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>luaC_changemode</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>KGC_GEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>LUA_GCINC</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>pause</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>stepmul</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>stepsize</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>res</name> <operator>=</operator> <ternary><condition><expr><call><name>isdecGCmodegen</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>LUA_GCGEN</name></expr> </then><else>: <expr><name>LUA_GCINC</name></expr></else></ternary></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>pause</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>setgcparam</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>gcpause</name></name></expr></argument>, <argument><expr><name>pause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>stepmul</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>setgcparam</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>gcstepmul</name></name></expr></argument>, <argument><expr><name>stepmul</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>stepsize</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gcstepsize</name></name> <operator>=</operator> <name>stepsize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>luaC_changemode</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>KGC_INC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default> <expr_stmt><expr><name>res</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>  <comment type="block">/* invalid option */</comment>
  </block_content>}</block></switch>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>argp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>



<comment type="block">/*
** miscellaneous functions
*/</comment>


<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_error</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>errobj</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>errobj</name> <operator>=</operator> <call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>api_checknelems</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* error object is the memory error message? */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>ttisshrstring</name><argument_list>(<argument><expr><name>errobj</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>eqshrstr</name><argument_list>(<argument><expr><call><name>tsvalue</name><argument_list>(<argument><expr><name>errobj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>memerrmsg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaM_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* raise a memory error */</comment>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaG_errormsg</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>  <comment type="block">/* raise a regular error */</comment>
  <comment type="block">/* code unreachable; will unlock when control actually leaves the kernel */</comment>
  <return>return <expr><literal type="number">0</literal></expr>;</return>  <comment type="block">/* to avoid warnings */</comment>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_next</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>more</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>api_checknelems</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>gettable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>more</name> <operator>=</operator> <call><name>luaH_next</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>more</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>api_incr_top</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content>  <comment type="block">/* no more elements */</comment>
    <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>  <comment type="block">/* remove key */</comment>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>more</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>void</name></type> <name>lua_toclose</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nresults</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>StkId</name></type> <name>o</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>index2stack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>nresults</name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>ci</name><operator>-&gt;</operator><name>nresults</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>api_check</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>openupval</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>uplevel</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>openupval</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>o</name></expr></argument>,
               <argument><expr><literal type="string">"marked index below or equal new one"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaF_newtbcupval</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* create new to-be-closed upvalue */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hastocloseCfunc</name><argument_list>(<argument><expr><name>nresults</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* function not marked yet? */</comment>
    <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>ci</name><operator>-&gt;</operator><name>nresults</name></name> <operator>=</operator> <call><name>codeNresults</name><argument_list>(<argument><expr><name>nresults</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* mark it */</comment>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>hastocloseCfunc</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>ci</name><operator>-&gt;</operator><name>nresults</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>void</name></type> <name>lua_concat</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>api_checknelems</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaV_concat</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else <block>{<block_content>  <comment type="block">/* nothing to concatenate */</comment>
    <expr_stmt><expr><call><name>setsvalue2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><call><name>luaS_newlstr</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* push empty string */</comment>
    <expr_stmt><expr><call><name>api_incr_top</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>luaC_checkGC</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>void</name></type> <name>lua_len</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>index2value</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaV_objlen</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>api_incr_top</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>lua_Alloc</name></type> <name>lua_getallocf</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ud</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lua_Alloc</name></type> <name>f</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ud</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>ud</name> <operator>=</operator> <call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>ud</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>frealloc</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>void</name></type> <name>lua_setallocf</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>lua_Alloc</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ud</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>ud</name> <operator>=</operator> <name>ud</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>frealloc</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>lua_setwarnf</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>lua_WarnFunction</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ud</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>ud_warn</name> <operator>=</operator> <name>ud</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>warnf</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>lua_warning</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tocont</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaE_warning</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>tocont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>LUA_API</name> <name>void</name> <modifier>*</modifier></type><name>lua_newuserdatauv</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nuvalue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Udata</name> <modifier>*</modifier></type><name>u</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>api_check</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>nuvalue</name> <operator>&amp;&amp;</operator> <name>nuvalue</name> <operator>&lt;</operator> <name>USHRT_MAX</name></expr></argument>, <argument><expr><literal type="string">"invalid value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>luaS_newudata</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>nuvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setuvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>api_incr_top</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaC_checkGC</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>getudatamem</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>aux_upvalue</name> <parameter_list>(<parameter><decl><type><name>TValue</name> <modifier>*</modifier></type><name>fi</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>TValue</name> <modifier>*</modifier><modifier>*</modifier></type><name>val</name></decl></parameter>,
                                <parameter><decl><type><name>GCObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>owner</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><call><name>ttypetag</name><argument_list>(<argument><expr><name>fi</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>LUA_VCCL</name></expr>:</case> <block>{<block_content>  <comment type="block">/* C closure */</comment>
      <decl_stmt><decl><type><name>CClosure</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>clCvalue</name><argument_list>(<argument><expr><name>fi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>cast_uint</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1u</literal> <operator>&lt;</operator> <call><name>cast_uint</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>nupvalues</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* 'n' not in [1, f-&gt;nupvalues] */</comment>
      <expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>upvalue</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>owner</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>owner</name> <operator>=</operator> <call><name>obj2gco</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <return>return <expr><literal type="string">""</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>LUA_VLCL</name></expr>:</case> <block>{<block_content>  <comment type="block">/* Lua closure */</comment>
      <decl_stmt><decl><type><name>LClosure</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>clLvalue</name><argument_list>(<argument><expr><name>fi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TString</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Proto</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>cast_uint</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1u</literal>  <operator>&lt;</operator> <call><name>cast_uint</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>sizeupvalues</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* 'n' not in [1, p-&gt;sizeupvalues] */</comment>
      <expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>upvals</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>v</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>owner</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>owner</name> <operator>=</operator> <call><name>obj2gco</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>upvals</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>upvalues</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>name</name></expr>;</expr_stmt>
      <return>return <expr><ternary><condition><expr><operator>(</operator><name>name</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"(no name)"</literal></expr> </then><else>: <expr><call><name>getstr</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block>
    <default>default:</default> <return>return <expr><name>NULL</name></expr>;</return>  <comment type="block">/* not a closure */</comment>
  </block_content>}</block></switch>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lua_getupvalue</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>funcindex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>  <comment type="block">/* to avoid warnings */</comment>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>aux_upvalue</name><argument_list>(<argument><expr><call><name>index2value</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>funcindex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setobj2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>api_incr_top</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lua_setupvalue</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>funcindex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>  <comment type="block">/* to avoid warnings */</comment>
  <decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>owner</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>  <comment type="block">/* to avoid warnings */</comment>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>fi</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>fi</name> <operator>=</operator> <call><name>index2value</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>funcindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>api_checknelems</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>aux_upvalue</name><argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>owner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaC_barrier</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>owner</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>UpVal</name> <modifier>*</modifier><modifier>*</modifier></type><name>getupvalref</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fidx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>LClosure</name> <modifier>*</modifier><modifier>*</modifier></type><name>pf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>LClosure</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>fi</name> <init>= <expr><call><name>index2value</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>fidx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>api_check</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>ttisLclosure</name><argument_list>(<argument><expr><name>fi</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Lua function expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>clLvalue</name><argument_list>(<argument><expr><name>fi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>api_check</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;=</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>sizeupvalues</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"invalid upvalue index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pf</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pf</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>upvals</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>  <comment type="block">/* get its upvalue pointer */</comment>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>void</name> <modifier>*</modifier></type><name>lua_upvalueid</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fidx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>fi</name> <init>= <expr><call><name>index2value</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>fidx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><call><name>ttypetag</name><argument_list>(<argument><expr><name>fi</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>LUA_VLCL</name></expr>:</case> <block>{<block_content>  <comment type="block">/* lua closure */</comment>
      <return>return <expr><operator>*</operator><call><name>getupvalref</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>fidx</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>LUA_VCCL</name></expr>:</case> <block>{<block_content>  <comment type="block">/* C closure */</comment>
      <decl_stmt><decl><type><name>CClosure</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>clCvalue</name><argument_list>(<argument><expr><name>fi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>api_check</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;=</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>nupvalues</name></name></expr></argument>, <argument><expr><literal type="string">"invalid upvalue index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>upvalue</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>
    </block_content>}</block>
    <default>default:</default> <block>{<block_content>
      <expr_stmt><expr><call><name>api_check</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"closure expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block>
  </block_content>}</block></switch>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>void</name></type> <name>lua_upvaluejoin</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fidx1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n1</name></decl></parameter>,
                                            <parameter><decl><type><name>int</name></type> <name>fidx2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>LClosure</name> <modifier>*</modifier></type><name>f1</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>UpVal</name> <modifier>*</modifier><modifier>*</modifier></type><name>up1</name> <init>= <expr><call><name>getupvalref</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>fidx1</name></expr></argument>, <argument><expr><name>n1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>UpVal</name> <modifier>*</modifier><modifier>*</modifier></type><name>up2</name> <init>= <expr><call><name>getupvalref</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>fidx2</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>up1</name> <operator>=</operator> <operator>*</operator><name>up2</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaC_objbarrier</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>f1</name></expr></argument>, <argument><expr><operator>*</operator><name>up1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


</unit>
