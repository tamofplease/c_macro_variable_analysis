<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/lua/ldebug.c"><comment type="block">/*
** $Id: ldebug.c $
** Debug Interface
** See Copyright Notice in lua.h
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ldebug_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lprefix.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lcode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ldebug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ldo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lfunc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lopcodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lstate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ltable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ltm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lvm.h"</cpp:file></cpp:include>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>noLuaClosure</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>((f) == NULL || (f)-&gt;c.tt == LUA_VCCL)</cpp:value></cpp:define>

<comment type="block">/* inverse of 'pcRel' */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>invpcRel</name><parameter_list>(<parameter><type><name>pc</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>((p)-&gt;code + (pc) + 1)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>funcnamefromcode</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name></decl></parameter>,
                                    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><specifier>static</specifier> <name>int</name></type> <name>currentpc</name> <parameter_list>(<parameter><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>isLua</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>pcRel</name><argument_list>(<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>l</name><operator>.</operator><name>savedpc</name></name></expr></argument>, <argument><expr><call><name>ci_func</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Get a "base line" to find the line corresponding to an instruction.
** For that, search the array of absolute line info for the largest saved
** instruction smaller or equal to the wanted instruction. A special
** case is when there is no absolute info or the instruction is before
** the first absolute one.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>getbaseline</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Proto</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>basepc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>sizeabslineinfo</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>pc</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>abslineinfo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>basepc</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>  <comment type="block">/* start from the beginning */</comment>
    <return>return <expr><name><name>f</name><operator>-&gt;</operator><name>linedefined</name></name></expr>;</return>
  </block_content>}</block></if>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pc</name> <operator>&gt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>abslineinfo</name><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>sizeabslineinfo</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pc</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>sizeabslineinfo</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* instruction is after last saved one */</comment>
    <else>else <block>{<block_content>  <comment type="block">/* binary search */</comment>
      <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>sizeabslineinfo</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* pc &lt; anchorlines[j] */</comment>
      <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="block">/* abslineinfo[i] &lt;= pc */</comment>
      <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>j</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>pc</name> <operator>&gt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>abslineinfo</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>pc</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name>i</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
          <expr_stmt><expr><name>j</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
      </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>basepc</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>abslineinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pc</name></expr>;</expr_stmt>
    <return>return <expr><name><name>f</name><operator>-&gt;</operator><name>abslineinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>line</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Get the line corresponding to instruction 'pc' in function 'f';
** first gets a base line and from there does the increments until
** the desired instruction.
*/</comment>
<function><type><name>int</name></type> <name>luaG_getfuncline</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Proto</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>lineinfo</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* no debug information? */</comment>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>basepc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>baseline</name> <init>= <expr><call><name>getbaseline</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>basepc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>basepc</name><operator>++</operator> <operator>&lt;</operator> <name>pc</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* walk until given instruction */</comment>
      <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>lineinfo</name><index>[<expr><name>basepc</name></expr>]</index></name> <operator>!=</operator> <name>ABSLINEINFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>baseline</name> <operator>+=</operator> <name><name>f</name><operator>-&gt;</operator><name>lineinfo</name><index>[<expr><name>basepc</name></expr>]</index></name></expr>;</expr_stmt>  <comment type="block">/* correct line */</comment>
    </block_content>}</block></while>
    <return>return <expr><name>baseline</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>getcurrentline</name> <parameter_list>(<parameter><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>luaG_getfuncline</name><argument_list>(<argument><expr><call><name>ci_func</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p</name></expr></argument>, <argument><expr><call><name>currentpc</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Set 'trap' for all active Lua frames.
** This function can be called during a signal, under "reasonable"
** assumptions. A new 'ci' is completely linked in the list before it
** becomes part of the "active" list, and we assume that pointers are
** atomic; see comment in next function.
** (A compiler doing interprocedural optimizations could, theoretically,
** reorder memory writes in such a way that the list could be
** temporarily broken while inserting a new element. We simply assume it
** has no good reasons to do that.)
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>settraps</name> <parameter_list>(<parameter><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init>;</init> <condition><expr><name>ci</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ci</name> <operator>=</operator> <name><name>ci</name><operator>-&gt;</operator><name>previous</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><call><name>isLua</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>l</name><operator>.</operator><name>trap</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>


<comment type="block">/*
** This function can be called during a signal, under "reasonable"
** assumptions.
** Fields 'basehookcount' and 'hookcount' (set by 'resethookcount')
** are for debug only, and it is no problem if they get arbitrary
** values (causes at most one wrong hook call). 'hookmask' is an atomic
** value. We assume that pointers are atomic too (e.g., gcc ensures that
** for all platforms where it runs). Moreover, 'hook' is always checked
** before being called (see 'luaD_hook').
*/</comment>
<function><type><name>LUA_API</name> <name>void</name></type> <name>lua_sethook</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>lua_Hook</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>func</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>mask</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* turn off hooks? */</comment>
    <expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>func</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>hook</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>basehookcount</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>resethookcount</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>hookmask</name></name> <operator>=</operator> <call><name>cast_byte</name><argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>mask</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>settraps</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>ci</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* to trace inside 'luaV_execute' */</comment>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>lua_Hook</name></type> <name>lua_gethook</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>L</name><operator>-&gt;</operator><name>hook</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_gethookmask</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>L</name><operator>-&gt;</operator><name>hookmask</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_gethookcount</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>L</name><operator>-&gt;</operator><name>basehookcount</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_getstack</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>lua_Debug</name> <modifier>*</modifier></type><name>ar</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>level</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* invalid (negative) level */</comment>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>ci</name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>ci</name></name></expr>;</init> <condition><expr><name>level</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ci</name> <operator>!=</operator> <operator>&amp;</operator><name><name>L</name><operator>-&gt;</operator><name>base_ci</name></name></expr>;</condition> <incr><expr><name>ci</name> <operator>=</operator> <name><name>ci</name><operator>-&gt;</operator><name>previous</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>level</name><operator>--</operator></expr>;</expr_stmt></block_content></block></for>
  <if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ci</name> <operator>!=</operator> <operator>&amp;</operator><name><name>L</name><operator>-&gt;</operator><name>base_ci</name></name></expr>)</condition> <block>{<block_content>  <comment type="block">/* level found? */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>i_ci</name></name> <operator>=</operator> <name>ci</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>  <comment type="block">/* no such level */</comment>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>upvalname</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Proto</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>uv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TString</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>check_exp</name><argument_list>(<argument><expr><name>uv</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>sizeupvalues</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>upvalues</name><index>[<expr><name>uv</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"?"</literal></expr>;</return></block_content></block></if>
  <else>else<block type="pseudo"><block_content> <return>return <expr><call><name>getstr</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>findvararg</name> <parameter_list>(<parameter><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>StkId</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>clLvalue</name><argument_list>(<argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>func</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>p</name><operator>-&gt;</operator><name>is_vararg</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nextra</name> <init>= <expr><name><name>ci</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>l</name><operator>.</operator><name>nextraargs</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <operator>-</operator><name>nextra</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* 'n' is negative */</comment>
      <expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <name><name>ci</name><operator>-&gt;</operator><name>func</name></name> <operator>-</operator> <name>nextra</name> <operator>-</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
      <return>return <expr><literal type="string">"(vararg)"</literal></expr>;</return>  <comment type="block">/* generic name for any vararg */</comment>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>  <comment type="block">/* no such vararg */</comment>
</block_content>}</block></function>


<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>luaG_findlocal</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>StkId</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>StkId</name></type> <name>base</name> <init>= <expr><name><name>ci</name><operator>-&gt;</operator><name>func</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>isLua</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* access to vararg values? */</comment>
      <return>return <expr><call><name>findvararg</name><argument_list>(<argument><expr><name>ci</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>luaF_getlocalname</name><argument_list>(<argument><expr><call><name>ci_func</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><call><name>currentpc</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* no 'standard' name? */</comment>
    <decl_stmt><decl><type><name>StkId</name></type> <name>limit</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>ci</name> <operator>==</operator> <name><name>L</name><operator>-&gt;</operator><name>ci</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr> </then><else>: <expr><name><name>ci</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>func</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>limit</name> <operator>-</operator> <name>base</name> <operator>&gt;=</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* is 'n' inside 'ci' stack? */</comment>
      <comment type="block">/* generic name for any valid slot */</comment>
      <expr_stmt><expr><name>name</name> <operator>=</operator> <ternary><condition><expr><call><name>isLua</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"(temporary)"</literal></expr> </then><else>: <expr><literal type="string">"(C temporary)"</literal></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
      <return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>  <comment type="block">/* no name */</comment>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>pos</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <name>base</name> <operator>+</operator> <operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lua_getlocal</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lua_Debug</name> <modifier>*</modifier></type><name>ar</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ar</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* information about non-active function? */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isLfunction</name><argument_list>(<argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* not a Lua function? */</comment>
      <expr_stmt><expr><name>name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>  <comment type="block">/* consider live variables at function start (parameters) */</comment>
      <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>luaF_getlocalname</name><argument_list>(<argument><expr><call><name>clLvalue</name><argument_list>(<argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block></if>
  <else>else <block>{<block_content>  <comment type="block">/* active function; get information through 'ar' */</comment>
    <decl_stmt><decl><type><name>StkId</name></type> <name>pos</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>  <comment type="block">/* to avoid warnings */</comment>
    <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>luaG_findlocal</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>ar</name><operator>-&gt;</operator><name>i_ci</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setobjs2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>api_incr_top</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lua_setlocal</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lua_Debug</name> <modifier>*</modifier></type><name>ar</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>StkId</name></type> <name>pos</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>  <comment type="block">/* to avoid warnings */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>luaG_findlocal</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>ar</name><operator>-&gt;</operator><name>i_ci</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setobjs2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>--</operator></expr>;</expr_stmt>  <comment type="block">/* pop value */</comment>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>funcinfo</name> <parameter_list>(<parameter><decl><type><name>lua_Debug</name> <modifier>*</modifier></type><name>ar</name></decl></parameter>, <parameter><decl><type><name>Closure</name> <modifier>*</modifier></type><name>cl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>noLuaClosure</name><argument_list>(<argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <literal type="string">"=[C]"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>srclen</name></name> <operator>=</operator> <call><name>LL</name><argument_list>(<argument><expr><literal type="string">"=[C]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>linedefined</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>lastlinedefined</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>what</name></name> <operator>=</operator> <literal type="string">"C"</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>Proto</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>cl</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>p</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>source</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <call><name>getstr</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>srclen</name></name> <operator>=</operator> <call><name>tsslen</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <literal type="string">"=?"</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>srclen</name></name> <operator>=</operator> <call><name>LL</name><argument_list>(<argument><expr><literal type="string">"=?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>linedefined</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>linedefined</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>lastlinedefined</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>lastlinedefined</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>what</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>ar</name><operator>-&gt;</operator><name>linedefined</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"main"</literal></expr> </then><else>: <expr><literal type="string">"Lua"</literal></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>luaO_chunkid</name><argument_list>(<argument><expr><name><name>ar</name><operator>-&gt;</operator><name>short_src</name></name></expr></argument>, <argument><expr><name><name>ar</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name><name>ar</name><operator>-&gt;</operator><name>srclen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>nextline</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Proto</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>currentline</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>lineinfo</name><index>[<expr><name>pc</name></expr>]</index></name> <operator>!=</operator> <name>ABSLINEINFO</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>currentline</name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>lineinfo</name><index>[<expr><name>pc</name></expr>]</index></name></expr>;</return></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <return>return <expr><call><name>luaG_getfuncline</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>collectvalidlines</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>Closure</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>noLuaClosure</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setnilvalue</name><argument_list>(<argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>api_incr_top</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TValue</name></type> <name>v</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>Proto</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>p</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>currentline</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>linedefined</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>luaH_new</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* new table to store active lines */</comment>
    <expr_stmt><expr><call><name>sethvalue2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* push it on stack */</comment>
    <expr_stmt><expr><call><name>api_incr_top</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setbtvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* boolean 'true' to be the value of all indices */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>sizelineinfo</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>  <comment type="block">/* for all lines with code */</comment>
      <expr_stmt><expr><name>currentline</name> <operator>=</operator> <call><name>nextline</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>currentline</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>luaH_setint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>currentline</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* table[line] = true */</comment>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getfuncname</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>ci</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* no 'ci'? */</comment>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>  <comment type="block">/* no info */</comment>
  <if type="elseif">else if <condition>(<expr><name><name>ci</name><operator>-&gt;</operator><name>callstatus</name></name> <operator>&amp;</operator> <name>CIST_FIN</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* is this a finalizer? */</comment>
    <expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <literal type="string">"__gc"</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="string">"metamethod"</literal></expr>;</return>  <comment type="block">/* report it as such */</comment>
  </block_content>}</block></if>
  <comment type="block">/* calling function is a known Lua function? */</comment>
  <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ci</name><operator>-&gt;</operator><name>callstatus</name></name> <operator>&amp;</operator> <name>CIST_TAIL</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>isLua</name><argument_list>(<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>previous</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>funcnamefromcode</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>ci</name><operator>-&gt;</operator><name>previous</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
  <else>else<block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>  <comment type="block">/* no way to find a name */</comment>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>auxgetinfo</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>what</name></decl></parameter>, <parameter><decl><type><name>lua_Debug</name> <modifier>*</modifier></type><name>ar</name></decl></parameter>,
                       <parameter><decl><type><name>Closure</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>what</name></expr>;</condition> <incr><expr><name>what</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <switch>switch <condition>(<expr><operator>*</operator><name>what</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><literal type="char">'S'</literal></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>funcinfo</name><argument_list>(<argument><expr><name>ar</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><literal type="char">'l'</literal></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>currentline</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>ci</name> <operator>&amp;&amp;</operator> <call><name>isLua</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><call><name>getcurrentline</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><literal type="char">'u'</literal></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>nups</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>f</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>f</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>nupvalues</name></name></expr></else></ternary></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>noLuaClosure</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>isvararg</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>nparams</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
          <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>isvararg</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>p</name><operator>-&gt;</operator><name>is_vararg</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>nparams</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>p</name><operator>-&gt;</operator><name>numparams</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><literal type="char">'t'</literal></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>istailcall</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>ci</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>ci</name><operator>-&gt;</operator><name>callstatus</name></name> <operator>&amp;</operator> <name>CIST_TAIL</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><literal type="char">'n'</literal></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>namewhat</name></name> <operator>=</operator> <call><name>getfuncname</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ci</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ar</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ar</name><operator>-&gt;</operator><name>namewhat</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>namewhat</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>  <comment type="block">/* not found */</comment>
          <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><literal type="char">'r'</literal></expr>:</case> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>ci</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>ci</name><operator>-&gt;</operator><name>callstatus</name></name> <operator>&amp;</operator> <name>CIST_TRAN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>ftransfer</name></name> <operator>=</operator> <name><name>ar</name><operator>-&gt;</operator><name>ntransfer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
        <else>else <block>{<block_content>
          <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>ftransfer</name></name> <operator>=</operator> <name><name>ci</name><operator>-&gt;</operator><name>u2</name><operator>.</operator><name>transferinfo</name><operator>.</operator><name>ftransfer</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>ntransfer</name></name> <operator>=</operator> <name><name>ci</name><operator>-&gt;</operator><name>u2</name><operator>.</operator><name>transferinfo</name><operator>.</operator><name>ntransfer</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><literal type="char">'L'</literal></expr>:</case>
      <case>case <expr><literal type="char">'f'</literal></expr>:</case>  <comment type="block">/* handled by lua_getinfo */</comment>
        <break>break;</break>
      <default>default:</default> <expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="block">/* invalid option */</comment>
    </block_content>}</block></switch>
  </block_content>}</block></for>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_getinfo</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>what</name></decl></parameter>, <parameter><decl><type><name>lua_Debug</name> <modifier>*</modifier></type><name>ar</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Closure</name> <modifier>*</modifier></type><name>cl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>func</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>what</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ci</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>func</name> <operator>=</operator> <call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>api_check</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>ttisfunction</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"function expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>what</name><operator>++</operator></expr>;</expr_stmt>  <comment type="block">/* skip the '&gt;' */</comment>
    <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>--</operator></expr>;</expr_stmt>  <comment type="block">/* pop function */</comment>
  </block_content>}</block></if>
  <else>else <block>{<block_content>
    <expr_stmt><expr><name>ci</name> <operator>=</operator> <name><name>ar</name><operator>-&gt;</operator><name>i_ci</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>func</name> <operator>=</operator> <call><name>s2v</name><argument_list>(<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>ttisfunction</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>cl</name> <operator>=</operator> <ternary><condition><expr><call><name>ttisclosure</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>clvalue</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>auxgetinfo</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><name>ar</name></expr></argument>, <argument><expr><name>cl</name></expr></argument>, <argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>what</name></expr></argument>, <argument><expr><literal type="char">'f'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setobj2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>api_incr_top</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>what</name></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>collectvalidlines</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** {======================================================
** Symbolic Execution
** =======================================================
*/</comment>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getobjname</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Proto</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lastpc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reg</name></decl></parameter>,
                               <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
** Find a "name" for the constant 'c'.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>kname</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Proto</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>kvalue</name> <init>= <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>k</name><index>[<expr><name>c</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>ttisstring</name><argument_list>(<argument><expr><name>kvalue</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><call><name>svalue</name><argument_list>(<argument><expr><name>kvalue</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">"?"</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Find a "name" for the register 'c'.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rname</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Proto</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>what</name> <init>= <expr><call><name>getobjname</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* search for 'c' */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>what</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>what</name> <operator>==</operator> <literal type="char">'c'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* did not find a constant name? */</comment>
    <expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <literal type="string">"?"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Find a "name" for a 'C' value in an RK instruction.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rkname</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Proto</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>Instruction</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>GETARG_C</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* key index */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>GETARG_k</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* is 'c' a constant? */</comment>
    <expr_stmt><expr><call><name>kname</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>  <comment type="block">/* 'c' is a register */</comment>
    <expr_stmt><expr><call><name>rname</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>filterpc</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jmptarget</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pc</name> <operator>&lt;</operator> <name>jmptarget</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* is code conditional (inside a jump)? */</comment>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>  <comment type="block">/* cannot know who sets that register */</comment>
  <else>else<block type="pseudo"><block_content> <return>return <expr><name>pc</name></expr>;</return></block_content></block></else></if_stmt>  <comment type="block">/* current position sets that register */</comment>
</block_content>}</block></function>


<comment type="block">/*
** Try to find last instruction before 'lastpc' that modified register 'reg'.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>findsetreg</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Proto</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lastpc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>pc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>setreg</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* keep last instruction that changed 'reg' */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>jmptarget</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* any code before this address is conditional */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>testMMMode</name><argument_list>(<argument><expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>lastpc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>lastpc</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* previous instruction was not actually executed */</comment>
  <for>for <control>(<init><expr><name>pc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pc</name> <operator>&lt;</operator> <name>lastpc</name></expr>;</condition> <incr><expr><name>pc</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>Instruction</name></type> <name>i</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>pc</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>OpCode</name></type> <name>op</name> <init>= <expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><call><name>GETARG_A</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>change</name></decl>;</decl_stmt>  <comment type="block">/* true if current instruction changed 'reg' */</comment>
    <switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>OP_LOADNIL</name></expr>:</case> <block>{<block_content>  <comment type="block">/* set registers from 'a' to 'a+b' */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><call><name>GETARG_B</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>change</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>&lt;=</operator> <name>reg</name> <operator>&amp;&amp;</operator> <name>reg</name> <operator>&lt;=</operator> <name>a</name> <operator>+</operator> <name>b</name><operator>)</operator></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>OP_TFORCALL</name></expr>:</case> <block>{<block_content>  <comment type="block">/* affect all regs above its base */</comment>
        <expr_stmt><expr><name>change</name> <operator>=</operator> <operator>(</operator><name>reg</name> <operator>&gt;=</operator> <name>a</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>OP_CALL</name></expr>:</case>
      <case>case <expr><name>OP_TAILCALL</name></expr>:</case> <block>{<block_content>  <comment type="block">/* affect all registers above base */</comment>
        <expr_stmt><expr><name>change</name> <operator>=</operator> <operator>(</operator><name>reg</name> <operator>&gt;=</operator> <name>a</name><operator>)</operator></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>OP_JMP</name></expr>:</case> <block>{<block_content>  <comment type="block">/* doesn't change registers, but changes 'jmptarget' */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><call><name>GETARG_sJ</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>dest</name> <init>= <expr><name>pc</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>b</name></expr></init></decl>;</decl_stmt>
        <comment type="block">/* jump does not skip 'lastpc' and is larger than current one? */</comment>
        <if_stmt><if>if <condition>(<expr><name>dest</name> <operator>&lt;=</operator> <name>lastpc</name> <operator>&amp;&amp;</operator> <name>dest</name> <operator>&gt;</operator> <name>jmptarget</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name>jmptarget</name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* update 'jmptarget' */</comment>
        <expr_stmt><expr><name>change</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <default>default:</default>  <comment type="block">/* any instruction that sets A */</comment>
        <expr_stmt><expr><name>change</name> <operator>=</operator> <operator>(</operator><call><name>testAMode</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>reg</name> <operator>==</operator> <name>a</name><operator>)</operator></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
    <if_stmt><if>if <condition>(<expr><name>change</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>setreg</name> <operator>=</operator> <call><name>filterpc</name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><name>jmptarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>setreg</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Check whether table being indexed by instruction 'i' is the
** environment '_ENV'
*/</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gxf</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Proto</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>Instruction</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>isup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><call><name>GETARG_B</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* table index */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>  <comment type="block">/* name of indexed variable */</comment>
  <if_stmt><if>if <condition>(<expr><name>isup</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* is an upvalue? */</comment>
    <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>upvalname</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>getobjname</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <return>return <expr><ternary><condition><expr><operator>(</operator><name>name</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>LUA_ENV</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"global"</literal></expr> </then><else>: <expr><literal type="string">"field"</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getobjname</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Proto</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lastpc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reg</name></decl></parameter>,
                               <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>pc</name></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <call><name>luaF_getlocalname</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>reg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lastpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* is a local? */</comment>
    <return>return <expr><literal type="string">"local"</literal></expr>;</return></block_content></block></if></if_stmt>
  <comment type="block">/* else try symbolic execution */</comment>
  <expr_stmt><expr><name>pc</name> <operator>=</operator> <call><name>findsetreg</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>lastpc</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pc</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* could find instruction? */</comment>
    <decl_stmt><decl><type><name>Instruction</name></type> <name>i</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>pc</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>OpCode</name></type> <name>op</name> <init>= <expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>OP_MOVE</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><call><name>GETARG_B</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* move from 'b' to 'a' */</comment>
        <if_stmt><if>if <condition>(<expr><name>b</name> <operator>&lt;</operator> <call><name>GETARG_A</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><call><name>getobjname</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* get name for 'b' */</comment>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>OP_GETTABUP</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><call><name>GETARG_C</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* key index */</comment>
        <expr_stmt><expr><call><name>kname</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>gxf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block>
      <case>case <expr><name>OP_GETTABLE</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><call><name>GETARG_C</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* key index */</comment>
        <expr_stmt><expr><call><name>rname</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>gxf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block>
      <case>case <expr><name>OP_GETI</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <literal type="string">"integer index"</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="string">"field"</literal></expr>;</return>
      </block_content>}</block>
      <case>case <expr><name>OP_GETFIELD</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><call><name>GETARG_C</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* key index */</comment>
        <expr_stmt><expr><call><name>kname</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>gxf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block>
      <case>case <expr><name>OP_GETUPVAL</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <call><name>upvalname</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>GETARG_B</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="string">"upvalue"</literal></expr>;</return>
      </block_content>}</block>
      <case>case <expr><name>OP_LOADK</name></expr>:</case>
      <case>case <expr><name>OP_LOADKX</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>op</name> <operator>==</operator> <name>OP_LOADK</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>GETARG_Bx</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>
                                 </then><else>: <expr><call><name>GETARG_Ax</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>pc</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>ttisstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>k</name><index>[<expr><name>b</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <call><name>svalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>k</name><index>[<expr><name>b</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="string">"constant"</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>OP_SELF</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>rkname</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="string">"method"</literal></expr>;</return>
      </block_content>}</block>
      <default>default:</default> <break>break;</break>  <comment type="block">/* go through to return NULL */</comment>
    </block_content>}</block></switch>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>  <comment type="block">/* could not find reasonable name */</comment>
</block_content>}</block></function>


<comment type="block">/*
** Try to find a name for a function based on the code that called it.
** (Only works when function was called by a Lua function.)
** Returns what the name is (e.g., "for iterator", "method",
** "metamethod") and sets '*name' to point to the name.
*/</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>funcnamefromcode</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name></decl></parameter>,
                                     <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TMS</name></type> <name>tm</name> <init>= <expr><operator>(</operator><name>TMS</name><operator>)</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* (initial value avoids warnings) */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>Proto</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>ci_func</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p</name></expr></init></decl>;</decl_stmt>  <comment type="block">/* calling function */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>pc</name> <init>= <expr><call><name>currentpc</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* calling instruction index */</comment>
  <decl_stmt><decl><type><name>Instruction</name></type> <name>i</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>pc</name></expr>]</index></name></expr></init></decl>;</decl_stmt>  <comment type="block">/* calling instruction */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>ci</name><operator>-&gt;</operator><name>callstatus</name></name> <operator>&amp;</operator> <name>CIST_HOOKED</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* was it called inside a hook? */</comment>
    <expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <literal type="string">"?"</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="string">"hook"</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <switch>switch <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>OP_CALL</name></expr>:</case>
    <case>case <expr><name>OP_TAILCALL</name></expr>:</case>
      <return>return <expr><call><name>getobjname</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><call><name>GETARG_A</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>  <comment type="block">/* get function name */</comment>
    <case>case <expr><name>OP_TFORCALL</name></expr>:</case> <block>{<block_content>  <comment type="block">/* for iterator */</comment>
      <expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <literal type="string">"for iterator"</literal></expr>;</expr_stmt>
       <return>return <expr><literal type="string">"for iterator"</literal></expr>;</return>
    </block_content>}</block>
    <comment type="block">/* other instructions can do calls through metamethods */</comment>
    <case>case <expr><name>OP_SELF</name></expr>:</case> <case>case <expr><name>OP_GETTABUP</name></expr>:</case> <case>case <expr><name>OP_GETTABLE</name></expr>:</case>
    <case>case <expr><name>OP_GETI</name></expr>:</case> <case>case <expr><name>OP_GETFIELD</name></expr>:</case>
      <expr_stmt><expr><name>tm</name> <operator>=</operator> <name>TM_INDEX</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>OP_SETTABUP</name></expr>:</case> <case>case <expr><name>OP_SETTABLE</name></expr>:</case> <case>case <expr><name>OP_SETI</name></expr>:</case> <case>case <expr><name>OP_SETFIELD</name></expr>:</case>
      <expr_stmt><expr><name>tm</name> <operator>=</operator> <name>TM_NEWINDEX</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>OP_MMBIN</name></expr>:</case> <case>case <expr><name>OP_MMBINI</name></expr>:</case> <case>case <expr><name>OP_MMBINK</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>cast</name><argument_list>(<argument><expr><name>TMS</name></expr></argument>, <argument><expr><call><name>GETARG_C</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>OP_UNM</name></expr>:</case> <expr_stmt><expr><name>tm</name> <operator>=</operator> <name>TM_UNM</name></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>OP_BNOT</name></expr>:</case> <expr_stmt><expr><name>tm</name> <operator>=</operator> <name>TM_BNOT</name></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>OP_LEN</name></expr>:</case> <expr_stmt><expr><name>tm</name> <operator>=</operator> <name>TM_LEN</name></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>OP_CONCAT</name></expr>:</case> <expr_stmt><expr><name>tm</name> <operator>=</operator> <name>TM_CONCAT</name></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>OP_EQ</name></expr>:</case> <expr_stmt><expr><name>tm</name> <operator>=</operator> <name>TM_EQ</name></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>OP_LT</name></expr>:</case> <case>case <expr><name>OP_LE</name></expr>:</case> <case>case <expr><name>OP_LTI</name></expr>:</case> <case>case <expr><name>OP_LEI</name></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <literal type="string">"order"</literal></expr>;</expr_stmt>  <comment type="block">/* '&lt;=' can call '__lt', etc. */</comment>
      <return>return <expr><literal type="string">"metamethod"</literal></expr>;</return>
    <case>case <expr><name>OP_CLOSE</name></expr>:</case> <case>case <expr><name>OP_RETURN</name></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <literal type="string">"close"</literal></expr>;</expr_stmt>
      <return>return <expr><literal type="string">"metamethod"</literal></expr>;</return>
    <default>default:</default>
      <return>return <expr><name>NULL</name></expr>;</return>  <comment type="block">/* cannot find a reasonable name */</comment>
  </block_content>}</block></switch>
  <expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <call><name>getstr</name><argument_list>(<argument><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>tmname</name><index>[<expr><name>tm</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <return>return <expr><literal type="string">"metamethod"</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* }====================================================== */</comment>



<comment type="block">/*
** The subtraction of two potentially unrelated pointers is
** not ISO C, but it should not crash a program; the subsequent
** checks are ISO C and ensure a correct result.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>isinstack</name> <parameter_list>(<parameter><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>StkId</name></type> <name>base</name> <init>= <expr><name><name>ci</name><operator>-&gt;</operator><name>func</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>i</name> <init>= <expr><call><name>cast</name><argument_list>(<argument><expr><name>StkId</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>base</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><literal type="number">0</literal> <operator>&lt;=</operator> <name>i</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <operator>(</operator><name><name>ci</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <name>base</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>s2v</name><argument_list>(<argument><expr><name>base</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>o</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Checks whether value 'o' came from an upvalue. (That can only happen
** with instructions OP_GETTABUP/OP_SETTABUP, which operate directly on
** upvalues.)
*/</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getupvalname</name> <parameter_list>(<parameter><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>o</name></decl></parameter>,
                                 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>LClosure</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>ci_func</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>nupvalues</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>upvals</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>v</name> <operator>==</operator> <name>o</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <call><name>upvalname</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="string">"upvalue"</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>varinfo</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>  <comment type="block">/* to avoid warnings */</comment>
  <decl_stmt><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name> <init>= <expr><name><name>L</name><operator>-&gt;</operator><name>ci</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>kind</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>isLua</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>kind</name> <operator>=</operator> <call><name>getupvalname</name><argument_list>(<argument><expr><name>ci</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* check whether 'o' is an upvalue */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>kind</name> <operator>&amp;&amp;</operator> <call><name>isinstack</name><argument_list>(<argument><expr><name>ci</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* no? try a register */</comment>
      <expr_stmt><expr><name>kind</name> <operator>=</operator> <call><name>getobjname</name><argument_list>(<argument><expr><call><name>ci_func</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p</name></expr></argument>, <argument><expr><call><name>currentpc</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name>cast_int</name><argument_list>(<argument><expr><call><name>cast</name><argument_list>(<argument><expr><name>StkId</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name><name>ci</name><operator>-&gt;</operator><name>func</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><ternary><condition><expr><operator>(</operator><name>kind</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>luaO_pushfstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">" (%s '%s')"</literal></expr></argument>, <argument><expr><name>kind</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><name>l_noret</name></type> <name>luaG_typeerror</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>luaT_objtypename</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaG_runerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"attempt to %s a %s value%s"</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>varinfo</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>l_noret</name></type> <name>luaG_forerror</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>what</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>luaG_runerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"bad 'for' %s (number expected, got %s)"</literal></expr></argument>,
                   <argument><expr><name>what</name></expr></argument>, <argument><expr><call><name>luaT_objtypename</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>l_noret</name></type> <name>luaG_concaterror</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>ttisstring</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>cvt2str</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p1</name> <operator>=</operator> <name>p2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>luaG_typeerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><literal type="string">"concatenate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>l_noret</name></type> <name>luaG_opinterror</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>,
                         <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ttisnumber</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* first operand is wrong? */</comment>
    <expr_stmt><expr><name>p2</name> <operator>=</operator> <name>p1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* now second is wrong */</comment>
  <expr_stmt><expr><call><name>luaG_typeerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Error when both values are convertible to numbers, but not to integers
*/</comment>
<function><type><name>l_noret</name></type> <name>luaG_tointerror</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lua_Integer</name></type> <name>temp</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tointegerns</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>p2</name> <operator>=</operator> <name>p1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>luaG_runerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"number%s has no integer representation"</literal></expr></argument>, <argument><expr><call><name>varinfo</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>l_noret</name></type> <name>luaG_ordererror</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>t1</name> <init>= <expr><call><name>luaT_objtypename</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>t2</name> <init>= <expr><call><name>luaT_objtypename</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaG_runerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"attempt to compare two %s values"</literal></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaG_runerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"attempt to compare %s with %s"</literal></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/* add src:line information to 'msg' */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>luaG_addinfo</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>TString</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
                                        <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><name>LUA_IDSIZE</name></expr>]</index></name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>src</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaO_chunkid</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tsslen</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else <block>{<block_content>  <comment type="block">/* no source available; use "?" instead */</comment>
    <expr_stmt><expr><name><name>buff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>buff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><call><name>luaO_pushfstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"%s:%d: %s"</literal></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>l_noret</name></type> <name>luaG_errormsg</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>L</name><operator>-&gt;</operator><name>errfunc</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* is there an error handling function? */</comment>
    <decl_stmt><decl><type><name>StkId</name></type> <name>errfunc</name> <init>= <expr><call><name>restorestack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>errfunc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>ttisfunction</name><argument_list>(<argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name>errfunc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setobjs2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* move argument */</comment>
    <expr_stmt><expr><call><name>setobjs2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>errfunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* push function */</comment>
    <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>++</operator></expr>;</expr_stmt>  <comment type="block">/* assume EXTRA_STACK */</comment>
    <expr_stmt><expr><call><name>luaD_callnoyield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* call it */</comment>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>luaD_throw</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_ERRRUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>l_noret</name></type> <name>luaG_runerror</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name> <init>= <expr><name><name>L</name><operator>-&gt;</operator><name>ci</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>va_list</name></type> <name>argp</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaC_checkGC</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* error message uses memory */</comment>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>luaO_pushvfstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>argp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* format message */</comment>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>argp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>isLua</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* if Lua function, add source:line information */</comment>
    <expr_stmt><expr><call><name>luaG_addinfo</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>ci_func</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>p</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><call><name>getcurrentline</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>luaG_errormsg</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Check whether new instruction 'newpc' is in a different line from
** previous instruction 'oldpc'.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>changedline</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Proto</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oldpc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newpc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>lineinfo</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* no debug information? */</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <while>while <condition>(<expr><name>oldpc</name><operator>++</operator> <operator>&lt;</operator> <name>newpc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>lineinfo</name><index>[<expr><name>oldpc</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><operator>(</operator><call><name>luaG_getfuncline</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>oldpc</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>luaG_getfuncline</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>newpc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>  <comment type="block">/* no line changes between positions */</comment>
</block_content>}</block></function>


<comment type="block">/*
** Traces the execution of a Lua function. Called before the execution
** of each opcode, when debug is on. 'L-&gt;oldpc' stores the last
** instruction traced, to detect line changes. When entering a new
** function, 'npci' will be zero and will test as a new line without
** the need for 'oldpc'; so, 'oldpc' does not need to be initialized
** before. Some exceptional conditions may return to a function without
** updating 'oldpc'. In that case, 'oldpc' may be invalid; if so, it is
** reset to zero.  (A wrong but valid 'oldpc' at most causes an extra
** call to a line hook.)
*/</comment>
<function><type><name>int</name></type> <name>luaG_traceexec</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Instruction</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name> <init>= <expr><name><name>L</name><operator>-&gt;</operator><name>ci</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lu_byte</name></type> <name>mask</name> <init>= <expr><name><name>L</name><operator>-&gt;</operator><name>hookmask</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>Proto</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>ci_func</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>counthook</name></decl>;</decl_stmt>
  <comment type="block">/* 'L-&gt;oldpc' may be invalid; reset it in this case */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>oldpc</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>L</name><operator>-&gt;</operator><name>oldpc</name></name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>sizecode</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>L</name><operator>-&gt;</operator><name>oldpc</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mask</name> <operator>&amp;</operator> <operator>(</operator><name>LUA_MASKLINE</name> <operator>|</operator> <name>LUA_MASKCOUNT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>  <comment type="block">/* no hooks? */</comment>
    <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>l</name><operator>.</operator><name>trap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="block">/* don't need to stop again */</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>  <comment type="block">/* turn off 'trap' */</comment>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>pc</name><operator>++</operator></expr>;</expr_stmt>  <comment type="block">/* reference is always next instruction */</comment>
  <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>l</name><operator>.</operator><name>savedpc</name></name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt>  <comment type="block">/* save 'pc' */</comment>
  <expr_stmt><expr><name>counthook</name> <operator>=</operator> <operator>(</operator><operator>--</operator><name><name>L</name><operator>-&gt;</operator><name>hookcount</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>mask</name> <operator>&amp;</operator> <name>LUA_MASKCOUNT</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>counthook</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>resethookcount</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* reset count */</comment>
  <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>mask</name> <operator>&amp;</operator> <name>LUA_MASKLINE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* no line hook and count != 0; nothing to be done now */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>ci</name><operator>-&gt;</operator><name>callstatus</name></name> <operator>&amp;</operator> <name>CIST_HOOKYIELD</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* called hook last time? */</comment>
    <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>callstatus</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CIST_HOOKYIELD</name></expr>;</expr_stmt>  <comment type="block">/* erase mark */</comment>
    <return>return <expr><literal type="number">1</literal></expr>;</return>  <comment type="block">/* do not call hook again (VM yielded, so it did not move) */</comment>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isIT</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name><name>ci</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>l</name><operator>.</operator><name>savedpc</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name><name>ci</name><operator>-&gt;</operator><name>top</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* prepare top */</comment>
  <if_stmt><if>if <condition>(<expr><name>counthook</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaD_hook</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_HOOKCOUNT</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* call count hook */</comment>
  <if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>LUA_MASKLINE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>npci</name> <init>= <expr><call><name>pcRel</name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>npci</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>  <comment type="block">/* call linehook when enter a new function, */</comment>
        <name>pc</name> <operator>&lt;=</operator> <call><name>invpcRel</name><argument_list>(<argument><expr><name>oldpc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>||</operator>  <comment type="block">/* when jump back (loop), or when */</comment>
        <call><name>changedline</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>oldpc</name></expr></argument>, <argument><expr><name>npci</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* enter new line */</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>newline</name> <init>= <expr><call><name>luaG_getfuncline</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>npci</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>luaD_hook</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_HOOKLINE</name></expr></argument>, <argument><expr><name>newline</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* call line hook */</comment>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>oldpc</name></name> <operator>=</operator> <name>npci</name></expr>;</expr_stmt>  <comment type="block">/* 'pc' of last call to line hook */</comment>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>L</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>LUA_YIELD</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* did hook yield? */</comment>
    <if_stmt><if>if <condition>(<expr><name>counthook</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>hookcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* undo decrement to zero */</comment>
    <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>l</name><operator>.</operator><name>savedpc</name></name><operator>--</operator></expr>;</expr_stmt>  <comment type="block">/* undo increment (resume will increment it again) */</comment>
    <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>callstatus</name></name> <operator>|=</operator> <name>CIST_HOOKYIELD</name></expr>;</expr_stmt>  <comment type="block">/* mark that it yielded */</comment>
    <expr_stmt><expr><call><name>luaD_throw</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_YIELD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>  <comment type="block">/* keep 'trap' on */</comment>
</block_content>}</block></function>

</unit>
