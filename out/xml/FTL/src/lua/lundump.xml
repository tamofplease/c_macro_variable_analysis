<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/lua/lundump.c"><comment type="block">/*
** $Id: lundump.c $
** load precompiled Lua chunks
** See Copyright Notice in lua.h
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lundump_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lprefix.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ldebug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ldo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lfunc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lundump.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lzio.h"</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>luai_verifycode</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luai_verifycode</name><parameter_list>(<parameter><type><name>L</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>  <comment type="block">/* empty */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ZIO</name> <modifier>*</modifier></type><name>Z</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
}</block></struct></type> <name>LoadState</name>;</typedef>


<function><type><specifier>static</specifier> <name>l_noret</name></type> <name>error</name> <parameter_list>(<parameter><decl><type><name>LoadState</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>why</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>luaO_pushfstring</name><argument_list>(<argument><expr><name><name>S</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><literal type="string">"%s: bad binary format (%s)"</literal></expr></argument>, <argument><expr><name><name>S</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>why</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaD_throw</name><argument_list>(<argument><expr><name><name>S</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>LUA_ERRSYNTAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** All high-level loads go through loadVector; you can change it to
** adapt to the endianness of the input
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>loadVector</name><parameter_list>(<parameter><type><name>S</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>loadBlock(S,b,(n)*sizeof((b)[0]))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>loadBlock</name> <parameter_list>(<parameter><decl><type><name>LoadState</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>luaZ_read</name><argument_list>(<argument><expr><name><name>S</name><operator>-&gt;</operator><name>Z</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><literal type="string">"truncated chunk"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>loadVar</name><parameter_list>(<parameter><type><name>S</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>loadVector(S,&amp;x,1)</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>lu_byte</name></type> <name>loadByte</name> <parameter_list>(<parameter><decl><type><name>LoadState</name> <modifier>*</modifier></type><name>S</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><call><name>zgetc</name><argument_list>(<argument><expr><name><name>S</name><operator>-&gt;</operator><name>Z</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>EOZ</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><literal type="string">"truncated chunk"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><call><name>cast_byte</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>size_t</name></type> <name>loadUnsigned</name> <parameter_list>(<parameter><decl><type><name>LoadState</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>limit</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>limit</name> <operator>&gt;&gt;=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>loadByte</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <name>limit</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><literal type="string">"integer overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>;</do>
  <return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>size_t</name></type> <name>loadSize</name> <parameter_list>(<parameter><decl><type><name>LoadState</name> <modifier>*</modifier></type><name>S</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>loadUnsigned</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><operator>~</operator><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>loadInt</name> <parameter_list>(<parameter><decl><type><name>LoadState</name> <modifier>*</modifier></type><name>S</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>cast_int</name><argument_list>(<argument><expr><call><name>loadUnsigned</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>lua_Number</name></type> <name>loadNumber</name> <parameter_list>(<parameter><decl><type><name>LoadState</name> <modifier>*</modifier></type><name>S</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lua_Number</name></type> <name>x</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>loadVar</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>lua_Integer</name></type> <name>loadInteger</name> <parameter_list>(<parameter><decl><type><name>LoadState</name> <modifier>*</modifier></type><name>S</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lua_Integer</name></type> <name>x</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>loadVar</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Load a nullable string into prototype 'p'.
*/</comment>
<function><type><specifier>static</specifier> <name>TString</name> <modifier>*</modifier></type><name>loadStringN</name> <parameter_list>(<parameter><decl><type><name>LoadState</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>Proto</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name> <init>= <expr><name><name>S</name><operator>-&gt;</operator><name>L</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TString</name> <modifier>*</modifier></type><name>ts</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>loadSize</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* no string? */</comment>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><operator>--</operator><name>size</name> <operator>&lt;=</operator> <name>LUAI_MAXSHORTLEN</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* short string? */</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><name>LUAI_MAXSHORTLEN</name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>loadVector</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* load string into buffer */</comment>
    <expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>luaS_newlstr</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* create string */</comment>
  </block_content>}</block></if>
  <else>else <block>{<block_content>  <comment type="block">/* long string */</comment>
    <expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>luaS_createlngstrobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* create string */</comment>
    <expr_stmt><expr><call><name>setsvalue2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* anchor it ('loadVector' can GC) */</comment>
    <expr_stmt><expr><call><name>luaD_inctop</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>loadVector</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* load directly in final place */</comment>
    <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>--</operator></expr>;</expr_stmt>  <comment type="block">/* pop string */</comment>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>luaC_objbarrier</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ts</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Load a non-nullable string into prototype 'p'.
*/</comment>
<function><type><specifier>static</specifier> <name>TString</name> <modifier>*</modifier></type><name>loadString</name> <parameter_list>(<parameter><decl><type><name>LoadState</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>Proto</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TString</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><call><name>loadStringN</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>st</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><literal type="string">"bad format for constant string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>st</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>loadCode</name> <parameter_list>(<parameter><decl><type><name>LoadState</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>Proto</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>loadInt</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <call><name>luaM_newvectorchecked</name><argument_list>(<argument><expr><name><name>S</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>Instruction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sizecode</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>loadVector</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>loadFunction</name><parameter_list>(<parameter><decl><type><name>LoadState</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>Proto</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>TString</name> <modifier>*</modifier></type><name>psource</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><specifier>static</specifier> <name>void</name></type> <name>loadConstants</name> <parameter_list>(<parameter><decl><type><name>LoadState</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>Proto</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>loadInt</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <call><name>luaM_newvectorchecked</name><argument_list>(<argument><expr><name><name>S</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>TValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sizek</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>setnilvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><call><name>loadByte</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>LUA_VNIL</name></expr>:</case>
        <expr_stmt><expr><call><name>setnilvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>LUA_VFALSE</name></expr>:</case>
        <expr_stmt><expr><call><name>setbfvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>LUA_VTRUE</name></expr>:</case>
        <expr_stmt><expr><call><name>setbtvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>LUA_VNUMFLT</name></expr>:</case>
        <expr_stmt><expr><call><name>setfltvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><call><name>loadNumber</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>LUA_VNUMINT</name></expr>:</case>
        <expr_stmt><expr><call><name>setivalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><call><name>loadInteger</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>LUA_VSHRSTR</name></expr>:</case>
      <case>case <expr><name>LUA_VLNGSTR</name></expr>:</case>
        <expr_stmt><expr><call><name>setsvalue2n</name><argument_list>(<argument><expr><name><name>S</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><call><name>loadString</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default> <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
  </block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>loadProtos</name> <parameter_list>(<parameter><decl><type><name>LoadState</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>Proto</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>loadInt</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <call><name>luaM_newvectorchecked</name><argument_list>(<argument><expr><name><name>S</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>Proto</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sizep</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>luaF_newproto</name><argument_list>(<argument><expr><name><name>S</name><operator>-&gt;</operator><name>L</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaC_objbarrier</name><argument_list>(<argument><expr><name><name>S</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>loadFunction</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>


<comment type="block">/*
** Load the upvalues for a function. The names must be filled first,
** because the filling of the other fields can raise read errors and
** the creation of the error message can call an emergency collection;
** in that case all prototypes must be consistent for the GC.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>loadUpvalues</name> <parameter_list>(<parameter><decl><type><name>LoadState</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>Proto</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>loadInt</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>upvalues</name></name> <operator>=</operator> <call><name>luaM_newvectorchecked</name><argument_list>(<argument><expr><name><name>S</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>Upvaldesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sizeupvalues</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>  <comment type="block">/* make array valid for GC */</comment>
    <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>upvalues</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>  <comment type="block">/* following calls can raise errors */</comment>
    <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>upvalues</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>instack</name> <operator>=</operator> <call><name>loadByte</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>upvalues</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>idx</name> <operator>=</operator> <call><name>loadByte</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>upvalues</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>kind</name> <operator>=</operator> <call><name>loadByte</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>loadDebug</name> <parameter_list>(<parameter><decl><type><name>LoadState</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>Proto</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>loadInt</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>lineinfo</name></name> <operator>=</operator> <call><name>luaM_newvectorchecked</name><argument_list>(<argument><expr><name><name>S</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>ls_byte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sizelineinfo</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>loadVector</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>lineinfo</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>loadInt</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>abslineinfo</name></name> <operator>=</operator> <call><name>luaM_newvectorchecked</name><argument_list>(<argument><expr><name><name>S</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>AbsLineInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sizeabslineinfo</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>abslineinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pc</name> <operator>=</operator> <call><name>loadInt</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>abslineinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>line</name> <operator>=</operator> <call><name>loadInt</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>loadInt</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>locvars</name></name> <operator>=</operator> <call><name>luaM_newvectorchecked</name><argument_list>(<argument><expr><name><name>S</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>LocVar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sizelocvars</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>locvars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>varname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>locvars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>varname</name> <operator>=</operator> <call><name>loadStringN</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>locvars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>startpc</name> <operator>=</operator> <call><name>loadInt</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>locvars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>endpc</name> <operator>=</operator> <call><name>loadInt</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>loadInt</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>upvalues</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <call><name>loadStringN</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>loadFunction</name> <parameter_list>(<parameter><decl><type><name>LoadState</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>Proto</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>TString</name> <modifier>*</modifier></type><name>psource</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <call><name>loadStringN</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>source</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* no source in dump? */</comment>
    <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <name>psource</name></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* reuse parent's source */</comment>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>linedefined</name></name> <operator>=</operator> <call><name>loadInt</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>lastlinedefined</name></name> <operator>=</operator> <call><name>loadInt</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>numparams</name></name> <operator>=</operator> <call><name>loadByte</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>is_vararg</name></name> <operator>=</operator> <call><name>loadByte</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>maxstacksize</name></name> <operator>=</operator> <call><name>loadByte</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>loadCode</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>loadConstants</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>loadUpvalues</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>loadProtos</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>loadDebug</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>checkliteral</name> <parameter_list>(<parameter><decl><type><name>LoadState</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>LUA_SIGNATURE</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LUAC_DATA</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt> <comment type="block">/* larger than both */</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>loadVector</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>fchecksize</name> <parameter_list>(<parameter><decl><type><name>LoadState</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tname</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>loadByte</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><call><name>luaO_pushfstring</name><argument_list>(<argument><expr><name><name>S</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><literal type="string">"%s size mismatch"</literal></expr></argument>, <argument><expr><name>tname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>checksize</name><parameter_list>(<parameter><type><name>S</name></type></parameter>,<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>fchecksize(S,sizeof(t),#t)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>checkHeader</name> <parameter_list>(<parameter><decl><type><name>LoadState</name> <modifier>*</modifier></type><name>S</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="block">/* skip 1st char (already read and checked) */</comment>
  <expr_stmt><expr><call><name>checkliteral</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>LUA_SIGNATURE</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"not a binary chunk"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>loadByte</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LUAC_VERSION</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><literal type="string">"version mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>loadByte</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LUAC_FORMAT</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><literal type="string">"format mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>checkliteral</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>LUAC_DATA</name></expr></argument>, <argument><expr><literal type="string">"corrupted chunk"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>checksize</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>Instruction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>checksize</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>lua_Integer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>checksize</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>lua_Number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>loadInteger</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LUAC_INT</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><literal type="string">"integer format mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>loadNumber</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LUAC_NUM</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><literal type="string">"float format mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Load precompiled chunk.
*/</comment>
<function><type><name>LClosure</name> <modifier>*</modifier></type><name>luaU_undump</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>ZIO</name> <modifier>*</modifier></type><name>Z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>LoadState</name></type> <name>S</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>LClosure</name> <modifier>*</modifier></type><name>cl</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'@'</literal> <operator>||</operator> <operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>S</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <name><name>LUA_SIGNATURE</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>S</name><operator>.</operator><name>name</name></name> <operator>=</operator> <literal type="string">"binary string"</literal></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>S</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <expr_stmt><expr><name><name>S</name><operator>.</operator><name>L</name></name> <operator>=</operator> <name>L</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>S</name><operator>.</operator><name>Z</name></name> <operator>=</operator> <name>Z</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>checkHeader</name><argument_list>(<argument><expr><operator>&amp;</operator><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cl</name> <operator>=</operator> <call><name>luaF_newLclosure</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>loadByte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>S</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setclLvalue2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaD_inctop</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <call><name>luaF_newproto</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaC_objbarrier</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>cl</name></expr></argument>, <argument><expr><name><name>cl</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>loadFunction</name><argument_list>(<argument><expr><operator>&amp;</operator><name>S</name></expr></argument>, <argument><expr><name><name>cl</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>cl</name><operator>-&gt;</operator><name>nupvalues</name></name> <operator>==</operator> <name><name>cl</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>sizeupvalues</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luai_verifycode</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>cl</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>cl</name></expr>;</return>
</block_content>}</block></function>

</unit>
