<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/lua/lfunc.c"><comment type="block">/*
** $Id: lfunc.c $
** Auxiliary functions to manipulate prototypes and closures
** See Copyright Notice in lua.h
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lfunc_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lprefix.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ldebug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ldo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lfunc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lgc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lstate.h"</cpp:file></cpp:include>



<function><type><name>CClosure</name> <modifier>*</modifier></type><name>luaF_newCclosure</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nupvals</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>luaC_newobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_VCCL</name></expr></argument>, <argument><expr><call><name>sizeCclosure</name><argument_list>(<argument><expr><name>nupvals</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CClosure</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>gco2ccl</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>nupvalues</name></name> <operator>=</operator> <call><name>cast_byte</name><argument_list>(<argument><expr><name>nupvals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>LClosure</name> <modifier>*</modifier></type><name>luaF_newLclosure</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nupvals</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>luaC_newobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_VLCL</name></expr></argument>, <argument><expr><call><name>sizeLclosure</name><argument_list>(<argument><expr><name>nupvals</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>LClosure</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>gco2lcl</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>nupvalues</name></name> <operator>=</operator> <call><name>cast_byte</name><argument_list>(<argument><expr><name>nupvals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>nupvals</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>upvals</name><index>[<expr><name>nupvals</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></while>
  <return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** fill a closure with new closed upvalues
*/</comment>
<function><type><name>void</name></type> <name>luaF_initupvals</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>LClosure</name> <modifier>*</modifier></type><name>cl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cl</name><operator>-&gt;</operator><name>nupvalues</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>luaC_newobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_VUPVAL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>UpVal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>UpVal</name> <modifier>*</modifier></type><name>uv</name> <init>= <expr><call><name>gco2upv</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>uv</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>uv</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>  <comment type="block">/* make it closed */</comment>
    <expr_stmt><expr><call><name>setnilvalue</name><argument_list>(<argument><expr><name><name>uv</name><operator>-&gt;</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>upvals</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>uv</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaC_objbarrier</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>cl</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>


<comment type="block">/*
** Create a new upvalue at the given level, and link it to the list of
** open upvalues of 'L' after entry 'prev'.
**/</comment>
<function><type><specifier>static</specifier> <name>UpVal</name> <modifier>*</modifier></type><name>newupval</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tbc</name></decl></parameter>, <parameter><decl><type><name>StkId</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>UpVal</name> <modifier>*</modifier><modifier>*</modifier></type><name>prev</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>luaC_newobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_VUPVAL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>UpVal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>UpVal</name> <modifier>*</modifier></type><name>uv</name> <init>= <expr><call><name>gco2upv</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>UpVal</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><operator>*</operator><name>prev</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>uv</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <call><name>s2v</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* current value lives in the stack */</comment>
  <expr_stmt><expr><name><name>uv</name><operator>-&gt;</operator><name>tbc</name></name> <operator>=</operator> <name>tbc</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>uv</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>open</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>  <comment type="block">/* link it to list of open upvalues */</comment>
  <expr_stmt><expr><name><name>uv</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>open</name><operator>.</operator><name>previous</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>open</name><operator>.</operator><name>previous</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>uv</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>open</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>prev</name> <operator>=</operator> <name>uv</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isintwups</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* thread not in list of threads with upvalues? */</comment>
    <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>twups</name></name> <operator>=</operator> <call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>twups</name></expr>;</expr_stmt>  <comment type="block">/* link it to the list */</comment>
    <expr_stmt><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>twups</name> <operator>=</operator> <name>L</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>uv</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Find and reuse, or create if it does not exist, an upvalue
** at the given level.
*/</comment>
<function><type><name>UpVal</name> <modifier>*</modifier></type><name>luaF_findupval</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>StkId</name></type> <name>level</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>UpVal</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name> <init>= <expr><operator>&amp;</operator><name><name>L</name><operator>-&gt;</operator><name>openupval</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>UpVal</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>isintwups</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>L</name><operator>-&gt;</operator><name>openupval</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <operator>*</operator><name>pp</name><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>uplevel</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>level</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* search for it */</comment>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>isdead</name><argument_list>(<argument><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>uplevel</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>level</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* corresponding upvalue? */</comment>
      <return>return <expr><name>p</name></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* return it */</comment>
    <expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>open</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <comment type="block">/* not found: create a new upvalue after 'pp' */</comment>
  <return>return <expr><call><name>newupval</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>callclose</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ud</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>ud</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaD_callnoyield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Prepare closing method plus its arguments for object 'obj' with
** error message 'err'. (This function assumes EXTRA_STACK.)
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>prepclosingmethod</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>TValue</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>TValue</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>StkId</name></type> <name>top</name> <init>= <expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>tm</name> <init>= <expr><call><name>luaT_gettmbyobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>TM_CLOSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>ttisnil</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* no metamethod? */</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* nothing to call */</comment>
  <expr_stmt><expr><call><name>setobj2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* will call metamethod... */</comment>
  <expr_stmt><expr><call><name>setobj2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>top</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* with 'self' as the 1st argument */</comment>
  <expr_stmt><expr><call><name>setobj2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>top</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* and error msg. as 2nd argument */</comment>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name>top</name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>  <comment type="block">/* add function and arguments */</comment>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Raise an error with message 'msg', inserting the name of the
** local variable at position 'level' in the stack.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>varerror</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>StkId</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>cast_int</name><argument_list>(<argument><expr><name>level</name> <operator>-</operator> <name><name>L</name><operator>-&gt;</operator><name>ci</name><operator>-&gt;</operator><name>func</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vname</name> <init>= <expr><call><name>luaG_findlocal</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>ci</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>vname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>vname</name> <operator>=</operator> <literal type="string">"?"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>luaG_runerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>vname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Prepare and call a closing method. If status is OK, code is still
** inside the original protected call, and so any error will be handled
** there. Otherwise, a previous error already activated the original
** protected call, and so the call to the closing method must be
** protected here. (A status == CLOSEPROTECT behaves like a previous
** error, to also run the closing method in protected mode).
** If status is OK, the call to the closing method will be pushed
** at the top of the stack. Otherwise, values are pushed after
** the 'level' of the upvalue being closed, as everything after
** that won't be used again.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>callclosemth</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>StkId</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>uv</name> <init>= <expr><call><name>s2v</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* value being closed */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>status</name> <operator>==</operator> <name>LUA_OK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>prepclosingmethod</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>uv</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>nilvalue</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* something to call? */</comment>
      <expr_stmt><expr><call><name>callclose</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* call closing method */</comment>
    <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>l_isfalse</name><argument_list>(<argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* non-closable non-false value? */</comment>
      <expr_stmt><expr><call><name>varerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"attempt to close non-closable variable '%s'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if>
  <else>else <block>{<block_content>  <comment type="block">/* must close the object in protected mode */</comment>
    <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>oldtop</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>level</name><operator>++</operator></expr>;</expr_stmt>  <comment type="block">/* space for error message */</comment>
    <expr_stmt><expr><name>oldtop</name> <operator>=</operator> <call><name>savestack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* top will be after that */</comment>
    <expr_stmt><expr><call><name>luaD_seterrorobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* set error message */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>prepclosingmethod</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>uv</name></expr></argument>, <argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* something to call? */</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>newstatus</name> <init>= <expr><call><name>luaD_pcall</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>callclose</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>oldtop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>newstatus</name> <operator>!=</operator> <name>LUA_OK</name> <operator>&amp;&amp;</operator> <name>status</name> <operator>==</operator> <name>CLOSEPROTECT</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* first error? */</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <name>newstatus</name></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* this will be the new error */</comment>
      <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>newstatus</name> <operator>!=</operator> <name>LUA_OK</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* suppressed error? */</comment>
          <expr_stmt><expr><call><name>luaE_warnerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"__close metamethod"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <comment type="block">/* leave original error (or nil) on top */</comment>
        <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <call><name>restorestack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>oldtop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* else no metamethod; ignore this case and keep original error */</comment>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Try to create a to-be-closed upvalue
** (can raise a memory-allocation error)
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>trynewtbcupval</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ud</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>newupval</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>cast</name><argument_list>(<argument><expr><name>StkId</name></expr></argument>, <argument><expr><name>ud</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>L</name><operator>-&gt;</operator><name>openupval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Create a to-be-closed upvalue. If there is a memory error
** when creating the upvalue, the closing method must be called here,
** as there is no upvalue to call it later.
*/</comment>
<function><type><name>void</name></type> <name>luaF_newtbcupval</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>StkId</name></type> <name>level</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>s2v</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>openupval</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>uplevel</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>openupval</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>l_isfalse</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* false doesn't need to be closed */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>tm</name> <init>= <expr><call><name>luaT_gettmbyobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>TM_CLOSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>ttisnil</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* no metamethod? */</comment>
      <expr_stmt><expr><call><name>varerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"variable '%s' got a non-closable value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>luaD_rawrunprotected</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>trynewtbcupval</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>status</name> <operator>!=</operator> <name>LUA_OK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* memory error creating upvalue? */</comment>
      <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>status</name> <operator>==</operator> <name>LUA_ERRMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>luaD_seterrorobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_ERRMEM</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* save error message */</comment>
      <comment type="block">/* next call must succeed, as object is closable */</comment>
      <expr_stmt><expr><call><name>prepclosingmethod</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>callclose</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* call closing method */</comment>
      <expr_stmt><expr><call><name>luaD_throw</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_ERRMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* throw memory error */</comment>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaF_unlinkupval</name> <parameter_list>(<parameter><decl><type><name>UpVal</name> <modifier>*</modifier></type><name>uv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>upisopen</name><argument_list>(<argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name><name>uv</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>open</name><operator>.</operator><name>previous</name></name> <operator>=</operator> <name><name>uv</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>open</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>uv</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>open</name><operator>.</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>uv</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>open</name><operator>.</operator><name>next</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>open</name><operator>.</operator><name>previous</name></name> <operator>=</operator> <name><name>uv</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>open</name><operator>.</operator><name>previous</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>luaF_close</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>StkId</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>UpVal</name> <modifier>*</modifier></type><name>uv</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>uv</name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>openupval</name></name><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>uplevel</name><argument_list>(<argument><expr><name>uv</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>level</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><operator>&amp;</operator><name><name>uv</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>value</name></name></expr></init></decl>;</decl_stmt>  <comment type="block">/* new position for value */</comment>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>uplevel</name><argument_list>(<argument><expr><name>uv</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>uv</name><operator>-&gt;</operator><name>tbc</name></name> <operator>&amp;&amp;</operator> <name>status</name> <operator>!=</operator> <name>NOCLOSINGMETH</name></expr>)</condition> <block>{<block_content>
      <comment type="block">/* must run closing method, which may change the stack */</comment>
      <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>levelrel</name> <init>= <expr><call><name>savestack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>callclosemth</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>uplevel</name><argument_list>(<argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>restorestack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>levelrel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>luaF_unlinkupval</name><argument_list>(<argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name><name>uv</name><operator>-&gt;</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* move value to upvalue slot */</comment>
    <expr_stmt><expr><name><name>uv</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <name>slot</name></expr>;</expr_stmt>  <comment type="block">/* now current value lives here */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>iswhite</name><argument_list>(<argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* neither white nor dead? */</comment>
      <expr_stmt><expr><call><name>nw2black</name><argument_list>(<argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* closed upvalues cannot be gray */</comment>
      <expr_stmt><expr><call><name>luaC_barrier</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>uv</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>Proto</name> <modifier>*</modifier></type><name>luaF_newproto</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>luaC_newobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_VPROTO</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Proto</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Proto</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>gco2p</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sizek</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sizep</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sizecode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>lineinfo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sizelineinfo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>abslineinfo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sizeabslineinfo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>upvalues</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sizeupvalues</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>numparams</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>is_vararg</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>maxstacksize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>locvars</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sizelocvars</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>linedefined</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>lastlinedefined</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaF_freeproto</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>Proto</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>luaM_freearray</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>sizecode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaM_freearray</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>sizep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaM_freearray</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>k</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>sizek</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaM_freearray</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>lineinfo</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>sizelineinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaM_freearray</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>abslineinfo</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>sizeabslineinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaM_freearray</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>locvars</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>sizelocvars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaM_freearray</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>upvalues</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>sizeupvalues</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaM_free</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Look for n-th local variable at line 'line' in function 'func'.
** Returns NULL if not found.
*/</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>luaF_getlocalname</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Proto</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>local_number</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>f</name><operator>-&gt;</operator><name>sizelocvars</name></name> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>locvars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>startpc</name> <operator>&lt;=</operator> <name>pc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>pc</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>locvars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>endpc</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* is variable active? */</comment>
      <expr_stmt><expr><name>local_number</name><operator>--</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>local_number</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>locvars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>varname</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>NULL</name></expr>;</return>  <comment type="block">/* not found */</comment>
</block_content>}</block></function>

</unit>
