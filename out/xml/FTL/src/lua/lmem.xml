<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/lua/lmem.c"><comment type="block">/*
** $Id: lmem.c $
** Interface to Memory Manager
** See Copyright Notice in lua.h
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lmem_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lprefix.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ldebug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ldo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lgc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lstate.h"</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EMERGENCYGCTESTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
** First allocation will fail whenever not building initial state
** and not shrinking a block. (This fail will trigger 'tryagain' and
** a full GC cycle at every allocation.)
*/</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>firsttry</name> <parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>os</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ns</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>ttisnil</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>nilvalue</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>ns</name> <operator>&gt;</operator> <name>os</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>  <comment type="block">/* fail */</comment>
  <else>else<block type="pseudo"><block_content>  <comment type="block">/* normal allocation */</comment>
    <return>return <expr><call>(<modifier>*</modifier><name><name>g</name><operator>-&gt;</operator><name>frealloc</name></name>)<argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>os</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>firsttry</name><parameter_list>(<parameter><type><name>g</name></type></parameter>,<parameter><type><name>block</name></type></parameter>,<parameter><type><name>os</name></type></parameter>,<parameter><type><name>ns</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>((*g-&gt;frealloc)(g-&gt;ud, block, os, ns))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<comment type="block">/*
** About the realloc function:
** void *frealloc (void *ud, void *ptr, size_t osize, size_t nsize);
** ('osize' is the old size, 'nsize' is the new size)
**
** - frealloc(ud, p, x, 0) frees the block 'p' and returns NULL.
** Particularly, frealloc(ud, NULL, 0, 0) does nothing,
** which is equivalent to free(NULL) in ISO C.
**
** - frealloc(ud, NULL, x, s) creates a new block of size 's'
** (no matter 'x'). Returns NULL if it cannot create the new block.
**
** - otherwise, frealloc(ud, b, x, y) reallocates the block 'b' from
** size 'x' to size 'y'. Returns NULL if it cannot reallocate the
** block to the new size.
*/</comment>




<comment type="block">/*
** {==================================================================
** Functions to allocate/deallocate arrays for the Parser
** ===================================================================
*/</comment>

<comment type="block">/*
** Minimum size for arrays during parsing, to avoid overhead of
** reallocating to size 1, then 2, and then 4. All these arrays
** will be reallocated to exact sizes or erased when parsing ends.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINSIZEARRAY</name></cpp:macro>	<cpp:value>4</cpp:value></cpp:define>


<function><type><name>void</name> <modifier>*</modifier></type><name>luaM_growaux_</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nelems</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>psize</name></decl></parameter>,
                     <parameter><decl><type><name>int</name></type> <name>size_elems</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>what</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>newblock</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><operator>*</operator><name>psize</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>nelems</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* does one extra element still fit? */</comment>
    <return>return <expr><name>block</name></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* nothing to be done */</comment>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <name>limit</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* cannot double it? */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;=</operator> <name>limit</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* cannot grow even a little? */</comment>
      <expr_stmt><expr><call><name>luaG_runerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"too many %s (limit is %d)"</literal></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>size</name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>  <comment type="block">/* still have at least one free place */</comment>
  </block_content>}</block></if>
  <else>else <block>{<block_content>
    <expr_stmt><expr><name>size</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name>MINSIZEARRAY</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>size</name> <operator>=</operator> <name>MINSIZEARRAY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* minimum size */</comment>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>nelems</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name>size</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>&lt;=</operator> <name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* 'limit' ensures that multiplication will not overflow */</comment>
  <expr_stmt><expr><name>newblock</name> <operator>=</operator> <call><name>luaM_saferealloc_</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><call><name>cast_sizet</name><argument_list>(<argument><expr><operator>*</operator><name>psize</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>size_elems</name></expr></argument>,
                                         <argument><expr><call><name>cast_sizet</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>size_elems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>psize</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>  <comment type="block">/* update only when everything else is OK */</comment>
  <return>return <expr><name>newblock</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** In prototypes, the size of the array is also its number of
** elements (to save memory). So, if it cannot shrink an array
** to its number of elements, the only option is to raise an
** error.
*/</comment>
<function><type><name>void</name> <modifier>*</modifier></type><name>luaM_shrinkvector_</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>,
                          <parameter><decl><type><name>int</name></type> <name>final_n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size_elem</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>newblock</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>oldsize</name> <init>= <expr><call><name>cast_sizet</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>size</name><operator>)</operator> <operator>*</operator> <name>size_elem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>newsize</name> <init>= <expr><call><name>cast_sizet</name><argument_list>(<argument><expr><name>final_n</name> <operator>*</operator> <name>size_elem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>newsize</name> <operator>&lt;=</operator> <name>oldsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>newblock</name> <operator>=</operator> <call><name>luaM_saferealloc_</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>oldsize</name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name>final_n</name></expr>;</expr_stmt>
  <return>return <expr><name>newblock</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* }================================================================== */</comment>


<function><type><name>l_noret</name></type> <name>luaM_toobig</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>luaG_runerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"memory allocation error: block too big"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Free memory
*/</comment>
<function><type><name>void</name></type> <name>luaM_free_</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>osize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><operator>(</operator><name>osize</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><name>block</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call>(<modifier>*</modifier><name><name>g</name><operator>-&gt;</operator><name>frealloc</name></name>)<argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>osize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>GCdebt</name></name> <operator>-=</operator> <name>osize</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** In case of allocation fail, this function will call the GC to try
** to free some memory and then try the allocation again.
** (It should not be called when shrinking a block, because then the
** interpreter may be in the middle of a collection step.)
*/</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>tryagain</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>block</name></decl></parameter>,
                       <parameter><decl><type><name>size_t</name></type> <name>osize</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nsize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>ttisnil</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>nilvalue</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* is state fully build? */</comment>
    <expr_stmt><expr><call><name>luaC_fullgc</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* try to free some memory... */</comment>
    <return>return <expr><call>(<modifier>*</modifier><name><name>g</name><operator>-&gt;</operator><name>frealloc</name></name>)<argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>osize</name></expr></argument>, <argument><expr><name>nsize</name></expr></argument>)</argument_list></call></expr>;</return>  <comment type="block">/* try again */</comment>
  </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>  <comment type="block">/* cannot free any memory without a full state */</comment>
</block_content>}</block></function>


<comment type="block">/*
** Generic allocation routine.
** If allocation fails while shrinking a block, do not try again; the
** GC shrinks some blocks and it is not reentrant.
*/</comment>
<function><type><name>void</name> <modifier>*</modifier></type><name>luaM_realloc_</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>osize</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nsize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>newblock</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><operator>(</operator><name>osize</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><name>block</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>newblock</name> <operator>=</operator> <call><name>firsttry</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>osize</name></expr></argument>, <argument><expr><name>nsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>newblock</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>nsize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>nsize</name> <operator>&gt;</operator> <name>osize</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* not shrinking a block? */</comment>
      <expr_stmt><expr><name>newblock</name> <operator>=</operator> <call><name>tryagain</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>osize</name></expr></argument>, <argument><expr><name>nsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>newblock</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* still no memory? */</comment>
      <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* do not update 'GCdebt' */</comment>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><operator>(</operator><name>nsize</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><name>newblock</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>GCdebt</name></name> <operator>=</operator> <operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>GCdebt</name></name> <operator>+</operator> <name>nsize</name><operator>)</operator> <operator>-</operator> <name>osize</name></expr>;</expr_stmt>
  <return>return <expr><name>newblock</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name> <modifier>*</modifier></type><name>luaM_saferealloc_</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>osize</name></decl></parameter>,
                                                    <parameter><decl><type><name>size_t</name></type> <name>nsize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>newblock</name> <init>= <expr><call><name>luaM_realloc_</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>osize</name></expr></argument>, <argument><expr><name>nsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>newblock</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>nsize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* allocation failed? */</comment>
    <expr_stmt><expr><call><name>luaM_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>newblock</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name> <modifier>*</modifier></type><name>luaM_malloc_</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tag</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>  <comment type="block">/* that's all */</comment>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>newblock</name> <init>= <expr><call><name>firsttry</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>newblock</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>newblock</name> <operator>=</operator> <call><name>tryagain</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>newblock</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>luaM_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>GCdebt</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
    <return>return <expr><name>newblock</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
