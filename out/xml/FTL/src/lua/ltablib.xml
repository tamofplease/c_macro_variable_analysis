<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/lua/ltablib.c"><comment type="block">/*
** $Id: ltablib.c $
** Library for Table Manipulation
** See Copyright Notice in lua.h
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ltablib_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_LIB</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lprefix.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lauxlib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lualib.h"</cpp:file></cpp:include>


<comment type="block">/*
** Operations that an object must define to mimic a table
** (some functions only need some of them)
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAB_R</name></cpp:macro>	<cpp:value>1</cpp:value></cpp:define>			<comment type="block">/* read */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAB_W</name></cpp:macro>	<cpp:value>2</cpp:value></cpp:define>			<comment type="block">/* write */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAB_L</name></cpp:macro>	<cpp:value>4</cpp:value></cpp:define>			<comment type="block">/* length */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAB_RW</name></cpp:macro>	<cpp:value>(TAB_R | TAB_W)</cpp:value></cpp:define>		<comment type="block">/* read/write */</comment>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>aux_getn</name><parameter_list>(<parameter><type><name>L</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(checktab(L, n, (w) | TAB_L), luaL_len(L, n))</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>int</name></type> <name>checkfield</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><call><name>lua_rawget</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><name>n</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LUA_TNIL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Check that 'arg' either is a table or can behave like one (that is,
** has a metatable with the required metamethods)
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>checktab</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>what</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>lua_type</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LUA_TTABLE</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* is it not a table? */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* number of elements to pop */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>lua_getmetatable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>  <comment type="block">/* must have metatable */</comment>
        <operator>(</operator><operator>!</operator><operator>(</operator><name>what</name> <operator>&amp;</operator> <name>TAB_R</name><operator>)</operator> <operator>||</operator> <call><name>checkfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"__index"</literal></expr></argument>, <argument><expr><operator>++</operator><name>n</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
        <operator>(</operator><operator>!</operator><operator>(</operator><name>what</name> <operator>&amp;</operator> <name>TAB_W</name><operator>)</operator> <operator>||</operator> <call><name>checkfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"__newindex"</literal></expr></argument>, <argument><expr><operator>++</operator><name>n</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
        <operator>(</operator><operator>!</operator><operator>(</operator><name>what</name> <operator>&amp;</operator> <name>TAB_L</name><operator>)</operator> <operator>||</operator> <call><name>checkfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"__len"</literal></expr></argument>, <argument><expr><operator>++</operator><name>n</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* pop metatable and tested metamethods */</comment>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>LUA_TTABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>  <comment type="block">/* force an error */</comment>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>tinsert</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lua_Integer</name></type> <name>e</name> <init>= <expr><call><name>aux_getn</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TAB_RW</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* first empty element */</comment>
  <decl_stmt><decl><type><name>lua_Integer</name></type> <name>pos</name></decl>;</decl_stmt>  <comment type="block">/* where to insert new element */</comment>
  <switch>switch <condition>(<expr><call><name>lua_gettop</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">2</literal></expr>:</case> <block>{<block_content>  <comment type="block">/* called with only 2 arguments */</comment>
      <expr_stmt><expr><name>pos</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>  <comment type="block">/* insert new element at the end */</comment>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><literal type="number">3</literal></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>lua_Integer</name></type> <name>i</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>luaL_checkinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 2nd argument is the position */</comment>
      <comment type="block">/* check whether 'pos' is in [1, e] */</comment>
      <expr_stmt><expr><call><name>luaL_argcheck</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>(</operator><name>lua_Unsigned</name><operator>)</operator><name>pos</name> <operator>-</operator> <literal type="number">1u</literal> <operator>&lt;</operator> <operator>(</operator><name>lua_Unsigned</name><operator>)</operator><name>e</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
                       <argument><expr><literal type="string">"position out of bounds"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>e</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name>pos</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>  <comment type="block">/* move up elements */</comment>
        <expr_stmt><expr><call><name>lua_geti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_seti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* t[i] = t[i - 1] */</comment>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default> <block>{<block_content>
      <return>return <expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"wrong number of arguments to 'insert'"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block>
  </block_content>}</block></switch>
  <expr_stmt><expr><call><name>lua_seti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* t[pos] = v */</comment>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>tremove</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lua_Integer</name></type> <name>size</name> <init>= <expr><call><name>aux_getn</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TAB_RW</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lua_Integer</name></type> <name>pos</name> <init>= <expr><call><name>luaL_optinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>!=</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* validate 'pos' if given */</comment>
    <comment type="block">/* check whether 'pos' is in [1, size + 1] */</comment>
    <expr_stmt><expr><call><name>luaL_argcheck</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>(</operator><name>lua_Unsigned</name><operator>)</operator><name>pos</name> <operator>-</operator> <literal type="number">1u</literal> <operator>&lt;=</operator> <operator>(</operator><name>lua_Unsigned</name><operator>)</operator><name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
                     <argument><expr><literal type="string">"position out of bounds"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>lua_geti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* result = t[pos] */</comment>
  <for>for <control>( <init>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>pos</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>lua_geti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_seti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* t[pos] = t[pos + 1] */</comment>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>lua_pushnil</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_seti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* remove entry t[pos] */</comment>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Copy elements (1[f], ..., 1[e]) into (tt[t], tt[t+1], ...). Whenever
** possible, copy in increasing order, which is better for rehashing.
** "possible" means destination after original range, or smaller
** than origin, or copying to another table.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tmove</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lua_Integer</name></type> <name>f</name> <init>= <expr><call><name>luaL_checkinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lua_Integer</name></type> <name>e</name> <init>= <expr><call><name>luaL_checkinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lua_Integer</name></type> <name>t</name> <init>= <expr><call><name>luaL_checkinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>tt</name> <init>= <expr><ternary><condition><expr><operator>!</operator><call><name>lua_isnoneornil</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">5</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>  <comment type="block">/* destination table */</comment>
  <expr_stmt><expr><call><name>checktab</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TAB_R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>checktab</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>tt</name></expr></argument>, <argument><expr><name>TAB_W</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>e</name> <operator>&gt;=</operator> <name>f</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* otherwise, nothing to move */</comment>
    <decl_stmt><decl><type><name>lua_Integer</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>luaL_argcheck</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>f</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>e</name> <operator>&lt;</operator> <name>LUA_MAXINTEGER</name> <operator>+</operator> <name>f</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>,
                  <argument><expr><literal type="string">"too many elements to move"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name>e</name> <operator>-</operator> <name>f</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>  <comment type="block">/* number of elements to move */</comment>
    <expr_stmt><expr><call><name>luaL_argcheck</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name> <operator>&lt;=</operator> <name>LUA_MAXINTEGER</name> <operator>-</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,
                  <argument><expr><literal type="string">"destination wrap around"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;</operator> <name>e</name> <operator>||</operator> <name>t</name> <operator>&lt;=</operator> <name>f</name> <operator>||</operator> <operator>(</operator><name>tt</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>lua_compare</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tt</name></expr></argument>, <argument><expr><name>LUA_OPEQ</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>lua_geti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>f</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_seti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>tt</name></expr></argument>, <argument><expr><name>t</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>lua_geti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>f</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_seti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>tt</name></expr></argument>, <argument><expr><name>t</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>tt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* return destination table */</comment>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>addfield</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>luaL_Buffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>lua_Integer</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>lua_geti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lua_isstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"invalid value (%s) at index %d in table for 'concat'"</literal></expr></argument>,
                  <argument><expr><call><name>luaL_typename</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>luaL_addvalue</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>tconcat</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>luaL_Buffer</name></type> <name>b</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lua_Integer</name></type> <name>last</name> <init>= <expr><call><name>aux_getn</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TAB_R</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>lsep</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sep</name> <init>= <expr><call><name>luaL_optlstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>lsep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lua_Integer</name></type> <name>i</name> <init>= <expr><call><name>luaL_optinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>last</name> <operator>=</operator> <call><name>luaL_optinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaL_buffinit</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>last</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>addfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_addlstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><name>lsep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>last</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* add last value (if interval was not empty) */</comment>
    <expr_stmt><expr><call><name>addfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>luaL_pushresult</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** {======================================================
** Pack/unpack
** =======================================================
*/</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tpack</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>lua_gettop</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* number of elements to pack */</comment>
  <expr_stmt><expr><call><name>lua_createtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* create result table */</comment>
  <expr_stmt><expr><call><name>lua_insert</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* put it at index 1 */</comment>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>n</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>  <comment type="block">/* assign elements */</comment>
    <expr_stmt><expr><call><name>lua_seti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* t.n = number of elements */</comment>
  <return>return <expr><literal type="number">1</literal></expr>;</return>  <comment type="block">/* return table */</comment>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>tunpack</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lua_Unsigned</name></type> <name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lua_Integer</name></type> <name>i</name> <init>= <expr><call><name>luaL_optinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lua_Integer</name></type> <name>e</name> <init>= <expr><call><name>luaL_opt</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>luaL_checkinteger</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>luaL_len</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>e</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* empty range */</comment>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>lua_Unsigned</name><operator>)</operator><name>e</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>  <comment type="block">/* number of elements minus 1 (avoid overflows) */</comment>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>INT_MAX</name>  <operator>||</operator> <operator>!</operator><call><name>lua_checkstack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>++</operator><name>n</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"too many results to unpack"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>e</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>  <comment type="block">/* push arg[i..e - 1] (to avoid overflows) */</comment>
    <expr_stmt><expr><call><name>lua_geti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>lua_geti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* push last element */</comment>
  <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>n</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* }====================================================== */</comment>



<comment type="block">/*
** {======================================================
** Quicksort
** (based on 'Algorithms in MODULA-3', Robert Sedgewick;
**  Addison-Wesley, 1993.)
** =======================================================
*/</comment>


<comment type="block">/* type for array indices */</comment>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>IdxT</name>;</typedef>


<comment type="block">/*
** Produce a "random" 'unsigned int' to randomize pivot choice. This
** macro is used only when 'sort' detects a big imbalance in the result
** of a partition. (If you don't want/need this "randomness", ~0 is a
** good choice.)
*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>l_randomizePivot</name></expr></argument>)</argument_list></call></expr></cpp:if>		<comment type="block">/* { */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<comment type="block">/* size of 'e' measured in number of 'unsigned int's */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sof</name><parameter_list>(<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>(sizeof(e) / sizeof(unsigned int))</cpp:value></cpp:define>

<comment type="block">/*
** Use 'time' and 'clock' as sources of "randomness". Because we don't
** know the types 'clock_t' and 'time_t', we cannot cast them to
** anything without risking overflows. A safe way to use their values
** is to copy them to an array of a known type and use the array values.
*/</comment>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>l_randomizePivot</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>clock_t</name></type> <name>c</name> <init>= <expr><call><name>clock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>time_t</name></type> <name>t</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>buff</name><index>[<expr><call><name>sof</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>sof</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>rnd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><call><name>sof</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>*</operator> sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buff</name> <operator>+</operator> <call><name>sof</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><call><name>sof</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> <operator>*</operator> sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>sof</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>rnd</name> <operator>+=</operator> <name><name>buff</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
  <return>return <expr><name>rnd</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>					<comment type="block">/* } */</comment>


<comment type="block">/* arrays larger than 'RANLIMIT' may use randomized pivots */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RANLIMIT</name></cpp:macro>	<cpp:value>100u</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>void</name></type> <name>set2</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>IdxT</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>IdxT</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>lua_seti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_seti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Return true iff value at stack index 'a' is less than the value at
** index 'b' (according to the order of the sort).
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sort_comp</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>lua_isnil</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* no function? */</comment>
    <return>return <expr><call><name>lua_compare</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>LUA_OPLT</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>  <comment type="block">/* a &lt; b */</comment>
  <else>else <block>{<block_content>  <comment type="block">/* function */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block">/* push function */</comment>
    <expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* -1 to compensate function */</comment>
    <expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>b</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* -2 to compensate function and 'a' */</comment>
    <expr_stmt><expr><call><name>lua_call</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="block">/* call function */</comment>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>lua_toboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* get result */</comment>
    <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>          <comment type="block">/* pop result */</comment>
    <return>return <expr><name>res</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Does the partition: Pivot P is at the top of the stack.
** precondition: a[lo] &lt;= P == a[up-1] &lt;= a[up],
** so it only needs to do the partition from lo + 1 to up - 2.
** Pos-condition: a[lo .. i - 1] &lt;= a[i] == P &lt;= a[i + 1 .. up]
** returns 'i'.
*/</comment>
<function><type><specifier>static</specifier> <name>IdxT</name></type> <name>partition</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>IdxT</name></type> <name>lo</name></decl></parameter>, <parameter><decl><type><name>IdxT</name></type> <name>up</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IdxT</name></type> <name>i</name> <init>= <expr><name>lo</name></expr></init></decl>;</decl_stmt>  <comment type="block">/* will be incremented before first use */</comment>
  <decl_stmt><decl><type><name>IdxT</name></type> <name>j</name> <init>= <expr><name>up</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* will be decremented before first use */</comment>
  <comment type="block">/* loop invariant: a[lo .. i] &lt;= P &lt;= a[j .. up] */</comment>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <comment type="block">/* next loop: repeat ++i while a[i] &lt; P */</comment>
    <while>while <condition>(<expr><operator>(</operator><name>void</name><operator>)</operator><call><name>lua_geti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>++</operator><name>i</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>sort_comp</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>up</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* a[i] &lt; P  but a[up - 1] == P  ?? */</comment>
        <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"invalid order function for sorting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* remove a[i] */</comment>
    </block_content>}</block></while>
    <comment type="block">/* after the loop, a[i] &gt;= P and a[lo .. i - 1] &lt; P */</comment>
    <comment type="block">/* next loop: repeat --j while P &lt; a[j] */</comment>
    <while>while <condition>(<expr><operator>(</operator><name>void</name><operator>)</operator><call><name>lua_geti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>--</operator><name>j</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>sort_comp</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* j &lt; i  but  a[j] &gt; P ?? */</comment>
        <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"invalid order function for sorting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* remove a[j] */</comment>
    </block_content>}</block></while>
    <comment type="block">/* after the loop, a[j] &lt;= P and a[j + 1 .. up] &gt;= P */</comment>
    <if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* no elements out of place? */</comment>
      <comment type="block">/* a[lo .. i - 1] &lt;= P &lt;= a[j + 1 .. i .. up] */</comment>
      <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* pop a[j] */</comment>
      <comment type="block">/* swap pivot (a[up - 1]) with a[i] to satisfy pos-condition */</comment>
      <expr_stmt><expr><call><name>set2</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>up</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>i</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* otherwise, swap a[i] - a[j] to restore invariant and repeat */</comment>
    <expr_stmt><expr><call><name>set2</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>


<comment type="block">/*
** Choose an element in the middle (2nd-3th quarters) of [lo,up]
** "randomized" by 'rnd'
*/</comment>
<function><type><specifier>static</specifier> <name>IdxT</name></type> <name>choosePivot</name> <parameter_list>(<parameter><decl><type><name>IdxT</name></type> <name>lo</name></decl></parameter>, <parameter><decl><type><name>IdxT</name></type> <name>up</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>rnd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IdxT</name></type> <name>r4</name> <init>= <expr><operator>(</operator><name>up</name> <operator>-</operator> <name>lo</name><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* range/4 */</comment>
  <decl_stmt><decl><type><name>IdxT</name></type> <name>p</name> <init>= <expr><name>rnd</name> <operator>%</operator> <operator>(</operator><name>r4</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>lo</name> <operator>+</operator> <name>r4</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>lo</name> <operator>+</operator> <name>r4</name> <operator>&lt;=</operator> <name>p</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;=</operator> <name>up</name> <operator>-</operator> <name>r4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Quicksort algorithm (recursive function)
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>auxsort</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>IdxT</name></type> <name>lo</name></decl></parameter>, <parameter><decl><type><name>IdxT</name></type> <name>up</name></decl></parameter>,
                                   <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>rnd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><name>lo</name> <operator>&lt;</operator> <name>up</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* loop for tail recursion */</comment>
    <decl_stmt><decl><type><name>IdxT</name></type> <name>p</name></decl>;</decl_stmt>  <comment type="block">/* Pivot index */</comment>
    <decl_stmt><decl><type><name>IdxT</name></type> <name>n</name></decl>;</decl_stmt>  <comment type="block">/* to be used later */</comment>
    <comment type="block">/* sort elements 'lo', 'p', and 'up' */</comment>
    <expr_stmt><expr><call><name>lua_geti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>lo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_geti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>up</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>sort_comp</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* a[up] &lt; a[lo]? */</comment>
      <expr_stmt><expr><call><name>set2</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>lo</name></expr></argument>, <argument><expr><name>up</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* swap a[lo] - a[up] */</comment>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>  <comment type="block">/* remove both values */</comment>
    <if_stmt><if>if <condition>(<expr><name>up</name> <operator>-</operator> <name>lo</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* only 2 elements? */</comment>
      <return>return;</return></block_content></block></if></if_stmt>  <comment type="block">/* already sorted */</comment>
    <if_stmt><if>if <condition>(<expr><name>up</name> <operator>-</operator> <name>lo</name> <operator>&lt;</operator> <name>RANLIMIT</name> <operator>||</operator> <name>rnd</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* small interval or no randomize? */</comment>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>lo</name> <operator>+</operator> <name>up</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* middle element is a good pivot */</comment>
    <else>else<block type="pseudo"><block_content>  <comment type="block">/* for larger intervals, it is worth a random pivot */</comment>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>choosePivot</name><argument_list>(<argument><expr><name>lo</name></expr></argument>, <argument><expr><name>up</name></expr></argument>, <argument><expr><name>rnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><call><name>lua_geti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_geti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>lo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>sort_comp</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* a[p] &lt; a[lo]? */</comment>
      <expr_stmt><expr><call><name>set2</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>lo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* swap a[p] - a[lo] */</comment>
    <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* remove a[lo] */</comment>
      <expr_stmt><expr><call><name>lua_geti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>up</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>sort_comp</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* a[up] &lt; a[p]? */</comment>
        <expr_stmt><expr><call><name>set2</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>up</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* swap a[up] - a[p] */</comment>
      <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>up</name> <operator>-</operator> <name>lo</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* only 3 elements? */</comment>
      <return>return;</return></block_content></block></if></if_stmt>  <comment type="block">/* already sorted */</comment>
    <expr_stmt><expr><call><name>lua_geti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* get middle element (Pivot) */</comment>
    <expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* push Pivot */</comment>
    <expr_stmt><expr><call><name>lua_geti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>up</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* push a[up - 1] */</comment>
    <expr_stmt><expr><call><name>set2</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>up</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* swap Pivot (a[p]) with a[up - 1] */</comment>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>partition</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>lo</name></expr></argument>, <argument><expr><name>up</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* a[lo .. p - 1] &lt;= a[p] == P &lt;= a[p + 1 .. up] */</comment>
    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>-</operator> <name>lo</name> <operator>&lt;</operator> <name>up</name> <operator>-</operator> <name>p</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* lower interval is smaller? */</comment>
      <expr_stmt><expr><call><name>auxsort</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>lo</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>rnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* call recursively for lower interval */</comment>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>lo</name></expr>;</expr_stmt>  <comment type="block">/* size of smaller interval */</comment>
      <expr_stmt><expr><name>lo</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>  <comment type="block">/* tail call for [p + 1 .. up] (upper interval) */</comment>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>auxsort</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>up</name></expr></argument>, <argument><expr><name>rnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* call recursively for upper interval */</comment>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <name>up</name> <operator>-</operator> <name>p</name></expr>;</expr_stmt>  <comment type="block">/* size of smaller interval */</comment>
      <expr_stmt><expr><name>up</name> <operator>=</operator> <name>p</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>  <comment type="block">/* tail call for [lo .. p - 1]  (lower interval) */</comment>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>up</name> <operator>-</operator> <name>lo</name><operator>)</operator> <operator>/</operator> <literal type="number">128</literal> <operator>&gt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* partition too imbalanced? */</comment>
      <expr_stmt><expr><name>rnd</name> <operator>=</operator> <call><name>l_randomizePivot</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* try a new randomization */</comment>
  </block_content>}</block></while>  <comment type="block">/* tail call auxsort(L, lo, up, rnd) */</comment>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>sort</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lua_Integer</name></type> <name>n</name> <init>= <expr><call><name>aux_getn</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TAB_RW</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* non-trivial interval? */</comment>
    <expr_stmt><expr><call><name>luaL_argcheck</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>n</name> <operator>&lt;</operator> <name>INT_MAX</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"array too big"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lua_isnoneornil</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* is there a 2nd argument? */</comment>
      <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>LUA_TFUNCTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* must be a function */</comment>
    <expr_stmt><expr><call><name>lua_settop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* make sure there are two arguments */</comment>
    <expr_stmt><expr><call><name>auxsort</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>IdxT</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* }====================================================== */</comment>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>luaL_Reg</name></type> <name><name>tab_funcs</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{<expr><literal type="string">"concat"</literal></expr>, <expr><name>tconcat</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"insert"</literal></expr>, <expr><name>tinsert</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"pack"</literal></expr>, <expr><name>tpack</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"unpack"</literal></expr>, <expr><name>tunpack</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"remove"</literal></expr>, <expr><name>tremove</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"move"</literal></expr>, <expr><name>tmove</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"sort"</literal></expr>, <expr><name>sort</name></expr>}</block></expr>,
  <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<function><type><name>LUAMOD_API</name> <name>int</name></type> <name>luaopen_table</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>luaL_newlib</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>tab_funcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

</unit>
