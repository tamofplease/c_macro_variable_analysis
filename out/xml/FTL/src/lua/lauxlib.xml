<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/lua/lauxlib.c"><comment type="block">/*
** $Id: lauxlib.c $
** Auxiliary functions for building Lua libraries
** See Copyright Notice in lua.h
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lauxlib_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_LIB</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lprefix.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>


<comment type="block">/*
** This file uses only the official API of Lua.
** Any function declared here could be written as an application function.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lauxlib.h"</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAX_SIZET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* maximum value for size_t */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SIZET</name></cpp:macro>	<cpp:value>((size_t)(~(size_t)0))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
** {======================================================
** Traceback
** =======================================================
*/</comment>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEVELS1</name></cpp:macro>	<cpp:value>10</cpp:value></cpp:define>	<comment type="block">/* size of the first part of the stack */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEVELS2</name></cpp:macro>	<cpp:value>11</cpp:value></cpp:define>	<comment type="block">/* size of the second part of the stack */</comment>



<comment type="block">/*
** Search for 'objidx' in table at index -1. ('objidx' must be an
** absolute index.) Return 1 + string at top if it found a good name.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>findfield</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>objidx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><call><name>lua_istable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* not found */</comment>
  <expr_stmt><expr><call><name>lua_pushnil</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* start 'next' loop */</comment>
  <while>while <condition>(<expr><call><name>lua_next</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* for each pair in table */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>lua_type</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>LUA_TSTRING</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* ignore non-string keys */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>lua_rawequal</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>objidx</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* found object? */</comment>
        <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* remove value (but keep name) */</comment>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><call><name>findfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>objidx</name></expr></argument>, <argument><expr><name>level</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* try recursively */</comment>
        <comment type="block">/* stack: lib_name, lib_table, field_name (top) */</comment>
        <expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* place '.' between the two names */</comment>
        <expr_stmt><expr><call><name>lua_replace</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* (in the slot occupied by table) */</comment>
        <expr_stmt><expr><call><name>lua_concat</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* lib_name.field_name */</comment>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* remove value */</comment>
  </block_content>}</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>  <comment type="block">/* not found */</comment>
</block_content>}</block></function>


<comment type="block">/*
** Search for a name for a function in all loaded modules
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>pushglobalfuncname</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>lua_Debug</name> <modifier>*</modifier></type><name>ar</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>top</name> <init>= <expr><call><name>lua_gettop</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_getinfo</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"f"</literal></expr></argument>, <argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* push function */</comment>
  <expr_stmt><expr><call><name>lua_getfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_REGISTRYINDEX</name></expr></argument>, <argument><expr><name>LUA_LOADED_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>findfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>top</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>LUA_GNAME</name> <literal type="string">"."</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* name start with '_G.'? */</comment>
      <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>name</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* push name without prefix */</comment>
      <expr_stmt><expr><call><name>lua_remove</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* remove original name */</comment>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>lua_copy</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>top</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* copy name to proper place */</comment>
    <expr_stmt><expr><call><name>lua_settop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>top</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* remove table "loaded" and name copy */</comment>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if>
  <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>lua_settop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* remove function and global table */</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>pushfuncname</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>lua_Debug</name> <modifier>*</modifier></type><name>ar</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>pushglobalfuncname</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* try first a global name */</comment>
    <expr_stmt><expr><call><name>lua_pushfstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"function '%s'"</literal></expr></argument>, <argument><expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_remove</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* remove name */</comment>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>*</operator><name><name>ar</name><operator>-&gt;</operator><name>namewhat</name></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* is there a name from code? */</comment>
    <expr_stmt><expr><call><name>lua_pushfstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"%s '%s'"</literal></expr></argument>, <argument><expr><name><name>ar</name><operator>-&gt;</operator><name>namewhat</name></name></expr></argument>, <argument><expr><name><name>ar</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* use it */</comment>
  <if type="elseif">else if <condition>(<expr><operator>*</operator><name><name>ar</name><operator>-&gt;</operator><name>what</name></name> <operator>==</operator> <literal type="char">'m'</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* main? */</comment>
      <expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"main chunk"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><operator>*</operator><name><name>ar</name><operator>-&gt;</operator><name>what</name></name> <operator>!=</operator> <literal type="char">'C'</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* for Lua functions, use &lt;file:line&gt; */</comment>
    <expr_stmt><expr><call><name>lua_pushfstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"function &lt;%s:%d&gt;"</literal></expr></argument>, <argument><expr><name><name>ar</name><operator>-&gt;</operator><name>short_src</name></name></expr></argument>, <argument><expr><name><name>ar</name><operator>-&gt;</operator><name>linedefined</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>  <comment type="block">/* nothing left... */</comment>
    <expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>lastlevel</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lua_Debug</name></type> <name>ar</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>li</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>le</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <comment type="block">/* find an upper bound */</comment>
  <while>while <condition>(<expr><call><name>lua_getstack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>le</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ar</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>li</name> <operator>=</operator> <name>le</name></expr>;</expr_stmt> <expr_stmt><expr><name>le</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt> </block_content>}</block></while>
  <comment type="block">/* do a binary search */</comment>
  <while>while <condition>(<expr><name>li</name> <operator>&lt;</operator> <name>le</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>li</name> <operator>+</operator> <name>le</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>lua_getstack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ar</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>li</name> <operator>=</operator> <name>m</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>le</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>le</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUALIB_API</name> <name>void</name></type> <name>luaL_traceback</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L1</name></decl></parameter>,
                                <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>luaL_Buffer</name></type> <name>b</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lua_Debug</name></type> <name>ar</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>last</name> <init>= <expr><call><name>lastlevel</name><argument_list>(<argument><expr><name>L1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>limit2show</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>last</name> <operator>-</operator> <name>level</name> <operator>&gt;</operator> <name>LEVELS1</name> <operator>+</operator> <name>LEVELS2</name><operator>)</operator></expr> ?</condition><then> <expr><name>LEVELS1</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaL_buffinit</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>luaL_addstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_addchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>luaL_addstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="string">"stack traceback:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><call><name>lua_getstack</name><argument_list>(<argument><expr><name>L1</name></expr></argument>, <argument><expr><name>level</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>ar</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>limit2show</name><operator>--</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* too many levels? */</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name>last</name> <operator>-</operator> <name>level</name> <operator>-</operator> <name>LEVELS2</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* number of levels to skip */</comment>
      <expr_stmt><expr><call><name>lua_pushfstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"\n\t...\t(skipping %d levels)"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>luaL_addvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* add warning about skip */</comment>
      <expr_stmt><expr><name>level</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>  <comment type="block">/* and skip to last levels */</comment>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>lua_getinfo</name><argument_list>(<argument><expr><name>L1</name></expr></argument>, <argument><expr><literal type="string">"Slnt"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>ar</name><operator>.</operator><name>currentline</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>lua_pushfstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"\n\t%s: in "</literal></expr></argument>, <argument><expr><name><name>ar</name><operator>.</operator><name>short_src</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>lua_pushfstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"\n\t%s:%d: in "</literal></expr></argument>, <argument><expr><name><name>ar</name><operator>.</operator><name>short_src</name></name></expr></argument>, <argument><expr><name><name>ar</name><operator>.</operator><name>currentline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
      <expr_stmt><expr><call><name>luaL_addvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>pushfuncname</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>luaL_addvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>ar</name><operator>.</operator><name>istailcall</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>luaL_addstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="string">"\n\t(...tail calls...)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>luaL_pushresult</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* }====================================================== */</comment>


<comment type="block">/*
** {======================================================
** Error-report functions
** =======================================================
*/</comment>

<function><type><name>LUALIB_API</name> <name>int</name></type> <name>luaL_argerror</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>extramsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lua_Debug</name></type> <name>ar</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lua_getstack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ar</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* no stack frame? */</comment>
    <return>return <expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"bad argument #%d (%s)"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>extramsg</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>lua_getinfo</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ar</name><operator>.</operator><name>namewhat</name></name></expr></argument>, <argument><expr><literal type="string">"method"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>arg</name><operator>--</operator></expr>;</expr_stmt>  <comment type="block">/* do not count 'self' */</comment>
    <if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* error is in the self argument itself? */</comment>
      <return>return <expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"calling '%s' on bad self (%s)"</literal></expr></argument>,
                           <argument><expr><name><name>ar</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>extramsg</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ar</name><operator>.</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>ar</name><operator>.</operator><name>name</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>pushglobalfuncname</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ar</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">"?"</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"bad argument #%d to '%s' (%s)"</literal></expr></argument>,
                        <argument><expr><name>arg</name></expr></argument>, <argument><expr><name><name>ar</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>extramsg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>luaL_typeerror</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tname</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>typearg</name></decl>;</decl_stmt>  <comment type="block">/* name for the type of the actual argument */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>luaL_getmetafield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"__name"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>LUA_TSTRING</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>typearg</name> <operator>=</operator> <call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* use the given type name */</comment>
  <if type="elseif">else if <condition>(<expr><call><name>lua_type</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LUA_TLIGHTUSERDATA</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>typearg</name> <operator>=</operator> <literal type="string">"light userdata"</literal></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* special name for messages */</comment>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>typearg</name> <operator>=</operator> <call><name>luaL_typename</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>  <comment type="block">/* standard name */</comment>
  <expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>lua_pushfstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"%s expected, got %s"</literal></expr></argument>, <argument><expr><name>tname</name></expr></argument>, <argument><expr><name>typearg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>luaL_argerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>tag_error</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tag</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>luaL_typeerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><call><name>lua_typename</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** The use of 'lua_pushfstring' ensures this function does not
** need reserved stack space when called.
*/</comment>
<function><type><name>LUALIB_API</name> <name>void</name></type> <name>luaL_where</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lua_Debug</name></type> <name>ar</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>lua_getstack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ar</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* check function at level */</comment>
    <expr_stmt><expr><call><name>lua_getinfo</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"Sl"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* get info about it */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>ar</name><operator>.</operator><name>currentline</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* is there info? */</comment>
      <expr_stmt><expr><call><name>lua_pushfstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"%s:%d: "</literal></expr></argument>, <argument><expr><name><name>ar</name><operator>.</operator><name>short_src</name></name></expr></argument>, <argument><expr><name><name>ar</name><operator>.</operator><name>currentline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>lua_pushfstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* else, no information available... */</comment>
</block_content>}</block></function>


<comment type="block">/*
** Again, the use of 'lua_pushvfstring' ensures this function does
** not need reserved stack space when called. (At worst, it generates
** an error with "stack overflow" instead of the given message.)
*/</comment>
<function><type><name>LUALIB_API</name> <name>int</name></type> <name>luaL_error</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>argp</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaL_where</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_pushvfstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>argp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>argp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_concat</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>lua_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUALIB_API</name> <name>int</name></type> <name>luaL_fileresult</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>en</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>  <comment type="block">/* calls to Lua API may change this value */</comment>
  <if_stmt><if>if <condition>(<expr><name>stat</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if>
  <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>luaL_pushfail</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>fname</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>lua_pushfstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>en</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>en</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>en</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">3</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>l_inspectstat</name></expr></argument>)</argument_list></call></expr></cpp:if>	<comment type="block">/* { */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LUA_USE_POSIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>

<comment type="block">/*
** use appropriate macros to interpret 'pclose' return status
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>l_inspectstat</name><parameter_list>(<parameter><type><name>stat</name></type></parameter>,<parameter><type><name>what</name></type></parameter>)</parameter_list></cpp:macro>  \
   <cpp:value>if (WIFEXITED(stat)) { stat = WEXITSTATUS(stat); } \
   else if (WIFSIGNALED(stat)) { stat = WTERMSIG(stat); what = "signal"; }</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>l_inspectstat</name><parameter_list>(<parameter><type><name>stat</name></type></parameter>,<parameter><type><name>what</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>  <comment type="block">/* no op */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>				<comment type="block">/* } */</comment>


<function><type><name>LUALIB_API</name> <name>int</name></type> <name>luaL_execresult</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stat</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>what</name> <init>= <expr><literal type="string">"exit"</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* type of termination */</comment>
  <if_stmt><if>if <condition>(<expr><name>stat</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* error with an 'errno'? */</comment>
    <return>return <expr><call><name>luaL_fileresult</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
  <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>l_inspectstat</name><argument_list>(<argument><expr><name>stat</name></expr></argument>, <argument><expr><name>what</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* interpret result */</comment>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>what</name> <operator>==</operator> <literal type="char">'e'</literal> <operator>&amp;&amp;</operator> <name>stat</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* successful termination? */</comment>
      <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>luaL_pushfail</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>what</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">3</literal></expr>;</return>  <comment type="block">/* return true/fail,what,code */</comment>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* }====================================================== */</comment>



<comment type="block">/*
** {======================================================
** Userdata's metatable manipulation
** =======================================================
*/</comment>

<function><type><name>LUALIB_API</name> <name>int</name></type> <name>luaL_newmetatable</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tname</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>luaL_getmetatable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>tname</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LUA_TNIL</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* name already in use? */</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* leave previous value on top, but return 0 */</comment>
  <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_createtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* create metatable */</comment>
  <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>tname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"__name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* metatable.__name = tname */</comment>
  <expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_REGISTRYINDEX</name></expr></argument>, <argument><expr><name>tname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* registry.name = metatable */</comment>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUALIB_API</name> <name>void</name></type> <name>luaL_setmetatable</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tname</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>luaL_getmetatable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>tname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_setmetatable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>LUALIB_API</name> <name>void</name> <modifier>*</modifier></type><name>luaL_testudata</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ud</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tname</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>lua_touserdata</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ud</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* value is a userdata? */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>lua_getmetatable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ud</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* does it have a metatable? */</comment>
      <expr_stmt><expr><call><name>luaL_getmetatable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>tname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* get correct metatable */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lua_rawequal</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* not the same? */</comment>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* value is a userdata with wrong metatable */</comment>
      <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* remove both metatables */</comment>
      <return>return <expr><name>p</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>  <comment type="block">/* value is not a userdata with a metatable */</comment>
</block_content>}</block></function>


<function><type><name>LUALIB_API</name> <name>void</name> <modifier>*</modifier></type><name>luaL_checkudata</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ud</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tname</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>luaL_testudata</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ud</name></expr></argument>, <argument><expr><name>tname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaL_argexpected</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><name>ud</name></expr></argument>, <argument><expr><name>tname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* }====================================================== */</comment>


<comment type="block">/*
** {======================================================
** Argument check functions
** =======================================================
*/</comment>

<function><type><name>LUALIB_API</name> <name>int</name></type> <name>luaL_checkoption</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>def</name></decl></parameter>,
                                 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>lst</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>def</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>luaL_optstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr> </then><else>:
                             <expr><call><name>luaL_checkstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>lst</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>lst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
  <return>return <expr><call><name>luaL_argerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>,
                       <argument><expr><call><name>lua_pushfstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"invalid option '%s'"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Ensures the stack has at least 'space' extra slots, raising an error
** if it cannot fulfill the request. (The error handling needs a few
** extra slots to format the error message. In case of an error without
** this extra space, Lua will generate the same 'stack overflow' error,
** but without 'msg'.)
*/</comment>
<function><type><name>LUALIB_API</name> <name>void</name></type> <name>luaL_checkstack</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>space</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lua_checkstack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>space</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"stack overflow (%s)"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"stack overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>LUALIB_API</name> <name>void</name></type> <name>luaL_checktype</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>lua_type</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>t</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>tag_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>LUALIB_API</name> <name>void</name></type> <name>luaL_checkany</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>lua_type</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LUA_TNONE</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaL_argerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"value expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>LUALIB_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>luaL_checklstring</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>lua_tolstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tag_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>LUA_TSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUALIB_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>luaL_optlstring</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arg</name></decl></parameter>,
                                        <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>def</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>lua_isnoneornil</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>def</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>def</name></expr>;</return>
  </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content> <return>return <expr><call><name>luaL_checklstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>LUALIB_API</name> <name>lua_Number</name></type> <name>luaL_checknumber</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>isnum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lua_Number</name></type> <name>d</name> <init>= <expr><call><name>lua_tonumberx</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isnum</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>tag_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>LUA_TNUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>d</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUALIB_API</name> <name>lua_Number</name></type> <name>luaL_optnumber</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>lua_Number</name></type> <name>def</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>luaL_opt</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>luaL_checknumber</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>interror</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>lua_isnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaL_argerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"number has no integer representation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>tag_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>LUA_TNUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>LUALIB_API</name> <name>lua_Integer</name></type> <name>luaL_checkinteger</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>isnum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lua_Integer</name></type> <name>d</name> <init>= <expr><call><name>lua_tointegerx</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isnum</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>interror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>d</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUALIB_API</name> <name>lua_Integer</name></type> <name>luaL_optinteger</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arg</name></decl></parameter>,
                                                      <parameter><decl><type><name>lua_Integer</name></type> <name>def</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>luaL_opt</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>luaL_checkinteger</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* }====================================================== */</comment>


<comment type="block">/*
** {======================================================
** Generic Buffer manipulation
** =======================================================
*/</comment>

<comment type="block">/* userdata to box arbitrary data */</comment>
<typedef>typedef <type><struct>struct <name>UBox</name> <block>{
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>box</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>bsize</name></decl>;</decl_stmt>
}</block></struct></type> <name>UBox</name>;</typedef>


<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>resizebox</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>newsize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ud</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lua_Alloc</name></type> <name>allocf</name> <init>= <expr><call><name>lua_getallocf</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ud</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>UBox</name> <modifier>*</modifier></type><name>box</name> <init>= <expr><operator>(</operator><name>UBox</name> <operator>*</operator><operator>)</operator><call><name>lua_touserdata</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><call><name>allocf</name><argument_list>(<argument><expr><name>ud</name></expr></argument>, <argument><expr><name><name>box</name><operator>-&gt;</operator><name>box</name></name></expr></argument>, <argument><expr><name><name>box</name><operator>-&gt;</operator><name>bsize</name></name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>temp</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>newsize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* allocation error? */</comment>
    <expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"not enough memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* raise a memory error */</comment>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>box</name><operator>-&gt;</operator><name>box</name></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>box</name><operator>-&gt;</operator><name>bsize</name></name> <operator>=</operator> <name>newsize</name></expr>;</expr_stmt>
  <return>return <expr><name>temp</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>boxgc</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>resizebox</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>luaL_Reg</name></type> <name><name>boxmt</name><index>[]</index></name> <init>= <expr><block>{  <comment type="block">/* box metamethods */</comment>
  <expr><block>{<expr><literal type="string">"__gc"</literal></expr>, <expr><name>boxgc</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"__close"</literal></expr>, <expr><name>boxgc</name></expr>}</block></expr>,
  <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>void</name></type> <name>newbox</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>UBox</name> <modifier>*</modifier></type><name>box</name> <init>= <expr><operator>(</operator><name>UBox</name> <operator>*</operator><operator>)</operator><call><name>lua_newuserdatauv</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>UBox</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>box</name><operator>-&gt;</operator><name>box</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>box</name><operator>-&gt;</operator><name>bsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>luaL_newmetatable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"_UBOX*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* creating metatable? */</comment>
    <expr_stmt><expr><call><name>luaL_setfuncs</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>boxmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* set its metamethods */</comment>
  <expr_stmt><expr><call><name>lua_setmetatable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** check whether buffer is using a userdata on the stack as a temporary
** buffer
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>buffonstack</name><parameter_list>(<parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>((B)-&gt;b != (B)-&gt;init.b)</cpp:value></cpp:define>


<comment type="block">/*
** Compute new size for buffer 'B', enough to accommodate extra 'sz'
** bytes.
*/</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type> <name>newbuffsize</name> <parameter_list>(<parameter><decl><type><name>luaL_Buffer</name> <modifier>*</modifier></type><name>B</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>newsize</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* double buffer size */</comment>
  <if_stmt><if>if <condition>(<expr><name>MAX_SIZET</name> <operator>-</operator> <name>sz</name> <operator>&lt;</operator> <name><name>B</name><operator>-&gt;</operator><name>n</name></name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* overflow in (B-&gt;n + sz)? */</comment>
    <return>return <expr><call><name>luaL_error</name><argument_list>(<argument><expr><name><name>B</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><literal type="string">"buffer too large"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>newsize</name> <operator>&lt;</operator> <name><name>B</name><operator>-&gt;</operator><name>n</name></name> <operator>+</operator> <name>sz</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* double is not big enough? */</comment>
    <expr_stmt><expr><name>newsize</name> <operator>=</operator> <name><name>B</name><operator>-&gt;</operator><name>n</name></name> <operator>+</operator> <name>sz</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>newsize</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Returns a pointer to a free area with at least 'sz' bytes in buffer
** 'B'. 'boxidx' is the relative position in the stack where the
** buffer's box is or should be.
*/</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>prepbuffsize</name> <parameter_list>(<parameter><decl><type><name>luaL_Buffer</name> <modifier>*</modifier></type><name>B</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>boxidx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>B</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>B</name><operator>-&gt;</operator><name>n</name></name> <operator>&gt;=</operator> <name>sz</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* enough space? */</comment>
    <return>return <expr><name><name>B</name><operator>-&gt;</operator><name>b</name></name> <operator>+</operator> <name><name>B</name><operator>-&gt;</operator><name>n</name></name></expr>;</return></block_content></block></if>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>L</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newbuff</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>newsize</name> <init>= <expr><call><name>newbuffsize</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="block">/* create larger buffer */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>buffonstack</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* buffer already has a box? */</comment>
      <expr_stmt><expr><name>newbuff</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>resizebox</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>boxidx</name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* resize it */</comment>
    <else>else <block>{<block_content>  <comment type="block">/* no box yet */</comment>
      <expr_stmt><expr><call><name>lua_pushnil</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* reserve slot for final result */</comment>
      <expr_stmt><expr><call><name>newbox</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* create a new box */</comment>
      <comment type="block">/* move box (and slot) to its intended position */</comment>
      <expr_stmt><expr><call><name>lua_rotate</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>boxidx</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>lua_toclose</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>boxidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>newbuff</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>resizebox</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>boxidx</name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>newbuff</name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>n</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* copy original content */</comment>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>B</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <name>newbuff</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>B</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>newsize</name></expr>;</expr_stmt>
    <return>return <expr><name>newbuff</name> <operator>+</operator> <name><name>B</name><operator>-&gt;</operator><name>n</name></name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** returns a pointer to a free area with at least 'sz' bytes
*/</comment>
<function><type><name>LUALIB_API</name> <name>char</name> <modifier>*</modifier></type><name>luaL_prepbuffsize</name> <parameter_list>(<parameter><decl><type><name>luaL_Buffer</name> <modifier>*</modifier></type><name>B</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>prepbuffsize</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUALIB_API</name> <name>void</name></type> <name>luaL_addlstring</name> <parameter_list>(<parameter><decl><type><name>luaL_Buffer</name> <modifier>*</modifier></type><name>B</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* avoid 'memcpy' when 's' can be NULL */</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>prepbuffsize</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>l</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_addsize</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>LUALIB_API</name> <name>void</name></type> <name>luaL_addstring</name> <parameter_list>(<parameter><decl><type><name>luaL_Buffer</name> <modifier>*</modifier></type><name>B</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>luaL_addlstring</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>LUALIB_API</name> <name>void</name></type> <name>luaL_pushresult</name> <parameter_list>(<parameter><decl><type><name>luaL_Buffer</name> <modifier>*</modifier></type><name>B</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>L</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_pushlstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>buffonstack</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>lua_copy</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* move string to reserved slot */</comment>
    <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* pop string and box (closing the box) */</comment>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>LUALIB_API</name> <name>void</name></type> <name>luaL_pushresultsize</name> <parameter_list>(<parameter><decl><type><name>luaL_Buffer</name> <modifier>*</modifier></type><name>B</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>luaL_addsize</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaL_pushresult</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** 'luaL_addvalue' is the only function in the Buffer system where the
** box (if existent) is not on the top of the stack. So, instead of
** calling 'luaL_addlstring', it replicates the code using -2 as the
** last argument to 'prepbuffsize', signaling that the box is (or will
** be) bellow the string being added to the buffer. (Box creation can
** trigger an emergency GC, so we should not remove the string from the
** stack before we have the space guaranteed.)
*/</comment>
<function><type><name>LUALIB_API</name> <name>void</name></type> <name>luaL_addvalue</name> <parameter_list>(<parameter><decl><type><name>luaL_Buffer</name> <modifier>*</modifier></type><name>B</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>L</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>lua_tolstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>prepbuffsize</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaL_addsize</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* pop string */</comment>
</block_content>}</block></function>


<function><type><name>LUALIB_API</name> <name>void</name></type> <name>luaL_buffinit</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>luaL_Buffer</name> <modifier>*</modifier></type><name>B</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>B</name><operator>-&gt;</operator><name>L</name></name> <operator>=</operator> <name>L</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>B</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <name><name>B</name><operator>-&gt;</operator><name>init</name><operator>.</operator><name>b</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>B</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>B</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>LUAL_BUFFERSIZE</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>LUALIB_API</name> <name>char</name> <modifier>*</modifier></type><name>luaL_buffinitsize</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>luaL_Buffer</name> <modifier>*</modifier></type><name>B</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>luaL_buffinit</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>prepbuffsize</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* }====================================================== */</comment>


<comment type="block">/*
** {======================================================
** Reference system
** =======================================================
*/</comment>

<comment type="block">/* index of free-list header */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>freelist</name></cpp:macro>	<cpp:value>0</cpp:value></cpp:define>


<function><type><name>LUALIB_API</name> <name>int</name></type> <name>luaL_ref</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ref</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>lua_isnil</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* remove from stack */</comment>
    <return>return <expr><name>LUA_REFNIL</name></expr>;</return>  <comment type="block">/* 'nil' has a unique fixed reference */</comment>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>lua_absindex</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_rawgeti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>freelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* get first free element */</comment>
  <expr_stmt><expr><name>ref</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>lua_tointeger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* ref = t[freelist] */</comment>
  <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* remove it from stack */</comment>
  <if_stmt><if>if <condition>(<expr><name>ref</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* any free element? */</comment>
    <expr_stmt><expr><call><name>lua_rawgeti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* remove it from list */</comment>
    <expr_stmt><expr><call><name>lua_rawseti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>freelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* (t[freelist] = t[ref]) */</comment>
  </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content>  <comment type="block">/* no free elements */</comment>
    <expr_stmt><expr><name>ref</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>lua_rawlen</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>  <comment type="block">/* get a new reference */</comment>
  <expr_stmt><expr><call><name>lua_rawseti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ref</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUALIB_API</name> <name>void</name></type> <name>luaL_unref</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ref</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>ref</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>lua_absindex</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_rawgeti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>freelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_rawseti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* t[ref] = t[freelist] */</comment>
    <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_rawseti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>freelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* t[freelist] = ref */</comment>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* }====================================================== */</comment>


<comment type="block">/*
** {======================================================
** Load functions
** =======================================================
*/</comment>

<typedef>typedef <type><struct>struct <name>LoadF</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>  <comment type="block">/* number of pre-read characters */</comment>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>  <comment type="block">/* file being read */</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><name>BUFSIZ</name></expr>]</index></name></decl>;</decl_stmt>  <comment type="block">/* area for reading file */</comment>
}</block></struct></type> <name>LoadF</name>;</typedef>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getF</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ud</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>LoadF</name> <modifier>*</modifier></type><name>lf</name> <init>= <expr><operator>(</operator><name>LoadF</name> <operator>*</operator><operator>)</operator><name>ud</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>L</name></expr>;</expr_stmt>  <comment type="block">/* not used */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>lf</name><operator>-&gt;</operator><name>n</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* are there pre-read characters to be read? */</comment>
    <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name><name>lf</name><operator>-&gt;</operator><name>n</name></name></expr>;</expr_stmt>  <comment type="block">/* return them (chars already in buffer) */</comment>
    <expr_stmt><expr><name><name>lf</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="block">/* no more pre-read characters */</comment>
  </block_content>}</block></if>
  <else>else <block>{<block_content>  <comment type="block">/* read a block from file */</comment>
    <comment type="block">/* 'fread' can return &gt; 0 *and* set the EOF flag. If next call to
       'getF' called 'fread', it might still wait for user input.
       The next check avoids this problem. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>feof</name><argument_list>(<argument><expr><name><name>lf</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name><name>lf</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>lf</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>lf</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* read block */</comment>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name><name>lf</name><operator>-&gt;</operator><name>buff</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>errfile</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>what</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fnameindex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>serr</name> <init>= <expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>fnameindex</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_pushfstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"cannot %s %s: %s"</literal></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>serr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_remove</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>fnameindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>LUA_ERRFILE</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>skipBOM</name> <parameter_list>(<parameter><decl><type><name>LoadF</name> <modifier>*</modifier></type><name>lf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><literal type="string">"\xEF\xBB\xBF"</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* UTF-8 BOM mark */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>lf</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getc</name><argument_list>(<argument><expr><name><name>lf</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name> <operator>||</operator> <name>c</name> <operator>!=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>p</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>c</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>lf</name><operator>-&gt;</operator><name>buff</name><index>[<expr><name><name>lf</name><operator>-&gt;</operator><name>n</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>  <comment type="block">/* to be read by the parser */</comment>
  </block_content>}</block> while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>;</do>
  <expr_stmt><expr><name><name>lf</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="block">/* prefix matched; discard it */</comment>
  <return>return <expr><call><name>getc</name><argument_list>(<argument><expr><name><name>lf</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</return>  <comment type="block">/* return next character */</comment>
</block_content>}</block></function>


<comment type="block">/*
** reads the first character of file 'f' and skips an optional BOM mark
** in its beginning plus its first line if it starts with '#'. Returns
** true if it skipped the first line.  In any case, '*cp' has the
** first "valid" character of the file (after the optional BOM and
** a first-line comment).
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>skipcomment</name> <parameter_list>(<parameter><decl><type><name>LoadF</name> <modifier>*</modifier></type><name>lf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>cp</name> <operator>=</operator> <call><name>skipBOM</name><argument_list>(<argument><expr><name>lf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* first line is a comment (Unix exec. file)? */</comment>
    <do>do <block>{<block_content>  <comment type="block">/* skip first line */</comment>
      <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getc</name><argument_list>(<argument><expr><name><name>lf</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><name>c</name> <operator>!=</operator> <name>EOF</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition>;</do>
    <expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <call><name>getc</name><argument_list>(<argument><expr><name><name>lf</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* skip end-of-line, if present */</comment>
    <return>return <expr><literal type="number">1</literal></expr>;</return>  <comment type="block">/* there was a comment */</comment>
  </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>  <comment type="block">/* no comment */</comment>
</block_content>}</block></function>


<function><type><name>LUALIB_API</name> <name>int</name></type> <name>luaL_loadfilex</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,
                                             <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>LoadF</name></type> <name>lf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>, <decl><type ref="prev"/><name>readstatus</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>fnameindex</name> <init>= <expr><call><name>lua_gettop</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* index of filename on the stack */</comment>
  <if_stmt><if>if <condition>(<expr><name>filename</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"=stdin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lf</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>stdin</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>lua_pushfstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"@%s"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lf</name><operator>.</operator><name>f</name></name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>lf</name><operator>.</operator><name>f</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>errfile</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"open"</literal></expr></argument>, <argument><expr><name>fnameindex</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>skipcomment</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* read initial portion */</comment>
    <expr_stmt><expr><name><name>lf</name><operator>.</operator><name>buff</name><index>[<expr><name><name>lf</name><operator>.</operator><name>n</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* add line to correct line numbers */</comment>
  <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name><name>LUA_SIGNATURE</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>filename</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* binary file? */</comment>
    <expr_stmt><expr><name><name>lf</name><operator>.</operator><name>f</name></name> <operator>=</operator> <call><name>freopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>, <argument><expr><name><name>lf</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* reopen in binary mode */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>lf</name><operator>.</operator><name>f</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>errfile</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"reopen"</literal></expr></argument>, <argument><expr><name>fnameindex</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>skipcomment</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* re-read initial portion */</comment>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>lf</name><operator>.</operator><name>buff</name><index>[<expr><name><name>lf</name><operator>.</operator><name>n</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* 'c' is the first character of the stream */</comment>
  <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>lua_load</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>getF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lf</name></expr></argument>, <argument><expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>readstatus</name> <operator>=</operator> <call><name>ferror</name><argument_list>(<argument><expr><name><name>lf</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>filename</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>lf</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* close file (even in case of errors) */</comment>
  <if_stmt><if>if <condition>(<expr><name>readstatus</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>lua_settop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>fnameindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* ignore results from 'lua_load' */</comment>
    <return>return <expr><call><name>errfile</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"read"</literal></expr></argument>, <argument><expr><name>fnameindex</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>lua_remove</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>fnameindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>


<typedef>typedef <type><struct>struct <name>LoadS</name> <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
}</block></struct></type> <name>LoadS</name>;</typedef>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getS</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ud</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>LoadS</name> <modifier>*</modifier></type><name>ls</name> <init>= <expr><operator>(</operator><name>LoadS</name> <operator>*</operator><operator>)</operator><name>ud</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>L</name></expr>;</expr_stmt>  <comment type="block">/* not used */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>ls</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name><name>ls</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ls</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name><name>ls</name><operator>-&gt;</operator><name>s</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUALIB_API</name> <name>int</name></type> <name>luaL_loadbufferx</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
                                 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>LoadS</name></type> <name>ls</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ls</name><operator>.</operator><name>s</name></name> <operator>=</operator> <name>buff</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ls</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
  <return>return <expr><call><name>lua_load</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>getS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ls</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUALIB_API</name> <name>int</name></type> <name>luaL_loadstring</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>luaL_loadbuffer</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* }====================================================== */</comment>



<function><type><name>LUALIB_API</name> <name>int</name></type> <name>luaL_getmetafield</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lua_getmetatable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* no metatable? */</comment>
    <return>return <expr><name>LUA_TNIL</name></expr>;</return></block_content></block></if>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>tt</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tt</name> <operator>=</operator> <call><name>lua_rawget</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>tt</name> <operator>==</operator> <name>LUA_TNIL</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* is metafield nil? */</comment>
      <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* remove metatable and metafield */</comment>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>lua_remove</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>  <comment type="block">/* remove only metatable */</comment>
    <return>return <expr><name>tt</name></expr>;</return>  <comment type="block">/* return metafield type */</comment>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>LUALIB_API</name> <name>int</name></type> <name>luaL_callmeta</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>lua_absindex</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>luaL_getmetafield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LUA_TNIL</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* no metafield? */</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_call</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUALIB_API</name> <name>lua_Integer</name></type> <name>luaL_len</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lua_Integer</name></type> <name>l</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>isnum</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_len</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>lua_tointegerx</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isnum</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"object length is not an integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* remove object */</comment>
  <return>return <expr><name>l</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUALIB_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>luaL_tolstring</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>luaL_callmeta</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"__tostring"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* metafield? */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lua_isstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"'__tostring' must return a string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if>
  <else>else <block>{<block_content>
    <switch>switch <condition>(<expr><call><name>lua_type</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>LUA_TNUMBER</name></expr>:</case> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>lua_isinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>lua_pushfstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"%I"</literal></expr></argument>, <argument><expr><operator>(</operator><name>LUAI_UACINT</name><operator>)</operator><call><name>lua_tointeger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>lua_pushfstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><operator>(</operator><name>LUAI_UACNUMBER</name><operator>)</operator><call><name>lua_tonumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>LUA_TSTRING</name></expr>:</case>
        <expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>LUA_TBOOLEAN</name></expr>:</case>
        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><call><name>lua_toboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>LUA_TNIL</name></expr>:</case>
        <expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"nil"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>tt</name> <init>= <expr><call><name>luaL_getmetafield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"__name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* try name */</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>kind</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>tt</name> <operator>==</operator> <name>LUA_TSTRING</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>:
                                                 <expr><call><name>luaL_typename</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>lua_pushfstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"%s: %p"</literal></expr></argument>, <argument><expr><name>kind</name></expr></argument>, <argument><expr><call><name>lua_topointer</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>tt</name> <operator>!=</operator> <name>LUA_TNIL</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>lua_remove</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* remove '__name' */</comment>
        <break>break;</break>
      </block_content>}</block>
    </block_content>}</block></switch>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><call><name>lua_tolstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** set functions from list 'l' into table at top - 'nup'; each
** function gets the 'nup' elements at the top as upvalues.
** Returns with only the table at the stack.
*/</comment>
<function><type><name>LUALIB_API</name> <name>void</name></type> <name>luaL_setfuncs</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>luaL_Reg</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>luaL_checkstack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>nup</name></expr></argument>, <argument><expr><literal type="string">"too many upvalues"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init>;</init> <condition><expr><name><name>l</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>  <comment type="block">/* fill the table with given functions */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>func</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* place holder? */</comment>
      <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nup</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>  <comment type="block">/* copy upvalues to the top */</comment>
        <expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><name>nup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
      <expr_stmt><expr><call><name>lua_pushcclosure</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>func</name></name></expr></argument>, <argument><expr><name>nup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* closure with those upvalues */</comment>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>nup</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>nup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* remove upvalues */</comment>
</block_content>}</block></function>


<comment type="block">/*
** ensure that stack[idx][fname] has a table and push that table
** into the stack
*/</comment>
<function><type><name>LUALIB_API</name> <name>int</name></type> <name>luaL_getsubtable</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>lua_getfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LUA_TTABLE</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>  <comment type="block">/* table already there */</comment>
  <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* remove previous result */</comment>
    <expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>lua_absindex</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* copy to be left at top */</comment>
    <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* assign new table to field */</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>  <comment type="block">/* false, because did not find table there */</comment>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Stripped-down 'require': After checking "loaded" table, calls 'openf'
** to open a module, registers the result in 'package.loaded' table and,
** if 'glb' is true, also registers the result in the global table.
** Leaves resulting module on the top.
*/</comment>
<function><type><name>LUALIB_API</name> <name>void</name></type> <name>luaL_requiref</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>modname</name></decl></parameter>,
                               <parameter><decl><type><name>lua_CFunction</name></type> <name>openf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>glb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>luaL_getsubtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_REGISTRYINDEX</name></expr></argument>, <argument><expr><name>LUA_LOADED_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_getfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>modname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* LOADED[modname] */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lua_toboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* package not already loaded? */</comment>
    <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* remove field */</comment>
    <expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>openf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>modname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* argument to open function */</comment>
    <expr_stmt><expr><call><name>lua_call</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* call 'openf' to open module */</comment>
    <expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* make copy of module (call result) */</comment>
    <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>modname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* LOADED[modname] = module */</comment>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>lua_remove</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* remove LOADED table */</comment>
  <if_stmt><if>if <condition>(<expr><name>glb</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* copy of module */</comment>
    <expr_stmt><expr><call><name>lua_setglobal</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>modname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* _G[modname] = module */</comment>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>LUALIB_API</name> <name>void</name></type> <name>luaL_addgsub</name> <parameter_list>(<parameter><decl><type><name>luaL_Buffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
                                     <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>wild</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>l</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>wild</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>luaL_addlstring</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>wild</name> <operator>-</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* push prefix */</comment>
    <expr_stmt><expr><call><name>luaL_addstring</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* push replacement in place of pattern */</comment>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <name>wild</name> <operator>+</operator> <name>l</name></expr>;</expr_stmt>  <comment type="block">/* continue after 'p' */</comment>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>luaL_addstring</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* push last suffix */</comment>
</block_content>}</block></function>


<function><type><name>LUALIB_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>luaL_gsub</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
                                  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>luaL_Buffer</name></type> <name>b</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaL_buffinit</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaL_addgsub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaL_pushresult</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>l_alloc</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ud</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>osize</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nsize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ud</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>osize</name></expr>;</expr_stmt>  <comment type="block">/* not used */</comment>
  <if_stmt><if>if <condition>(<expr><name>nsize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content>
    <return>return <expr><call><name>realloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>nsize</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>panic</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>msg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>msg</name> <operator>=</operator> <literal type="string">"error object is not a string"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>lua_writestringerror</name><argument_list>(<argument><expr><literal type="string">"PANIC: unprotected error in call to Lua API (%s)\n"</literal></expr></argument>,
                        <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>  <comment type="block">/* return to Lua to abort */</comment>
</block_content>}</block></function>


<comment type="block">/*
** Emit a warning. '*warnstate' means:
** 0 - warning system is off;
** 1 - ready to start a new message;
** 2 - previous message is to be continued.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>warnf</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ud</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tocont</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>warnstate</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>ud</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>warnstate</name> <operator>!=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>tocont</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>message</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* control message? */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><literal type="string">"@off"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><operator>*</operator><name>warnstate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><literal type="string">"@on"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><operator>*</operator><name>warnstate</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return;</return>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>*</operator><name>warnstate</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* warnings off? */</comment>
    <return>return;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>warnstate</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* previous message was the last? */</comment>
    <expr_stmt><expr><call><name>lua_writestringerror</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"Lua warning: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* start a new warning */</comment>
  <expr_stmt><expr><call><name>lua_writestringerror</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* write message */</comment>
  <if_stmt><if>if <condition>(<expr><name>tocont</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* not the last part? */</comment>
    <expr_stmt><expr><operator>*</operator><name>warnstate</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* to be continued */</comment>
  <else>else <block>{<block_content>  <comment type="block">/* last part */</comment>
    <expr_stmt><expr><call><name>lua_writestringerror</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* finish message with end-of-line */</comment>
    <expr_stmt><expr><operator>*</operator><name>warnstate</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>  <comment type="block">/* ready to start a new message */</comment>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>LUALIB_API</name> <name>lua_State</name> <modifier>*</modifier></type><name>luaL_newstate</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name> <init>= <expr><call><name>lua_newstate</name><argument_list>(<argument><expr><name>l_alloc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>L</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>warnstate</name></decl>;</decl_stmt>  <comment type="block">/* space for warning state */</comment>
    <expr_stmt><expr><call><name>lua_atpanic</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>panic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>warnstate</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>lua_newuserdatauv</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_ref</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_REGISTRYINDEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* make sure it won't be collected */</comment>
    <expr_stmt><expr><operator>*</operator><name>warnstate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="block">/* default is warnings off */</comment>
    <expr_stmt><expr><call><name>lua_setwarnf</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>warnf</name></expr></argument>, <argument><expr><name>warnstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>L</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUALIB_API</name> <name>void</name></type> <name>luaL_checkversion_</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>lua_Number</name></type> <name>ver</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lua_Number</name></type> <name>v</name> <init>= <expr><call><name>lua_version</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>sz</name> <operator>!=</operator> <name>LUAL_NUMSIZES</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* check numeric types */</comment>
    <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"core and library have incompatible numeric types"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>v</name> <operator>!=</operator> <name>ver</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"version mismatch: app. needs %f, Lua core provides %f"</literal></expr></argument>,
                  <argument><expr><operator>(</operator><name>LUAI_UACNUMBER</name><operator>)</operator><name>ver</name></expr></argument>, <argument><expr><operator>(</operator><name>LUAI_UACNUMBER</name><operator>)</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

</unit>
