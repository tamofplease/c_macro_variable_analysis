<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/lua/lutf8lib.c"><comment type="block">/*
** $Id: lutf8lib.c $
** Standard library for UTF-8 manipulation
** See Copyright Notice in lua.h
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lutf8lib_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_LIB</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lprefix.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lauxlib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lualib.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXUNICODE</name></cpp:macro>	<cpp:value>0x10FFFFu</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXUTF</name></cpp:macro>		<cpp:value>0x7FFFFFFFu</cpp:value></cpp:define>

<comment type="block">/*
** Integer type for decoded UTF-8 values; MAXUTF needs 31 bits.
*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>UINT_MAX</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator> <operator>&gt;=</operator> <literal type="number">1</literal></expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>utfint</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>utfint</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iscont</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>((*(p) &amp; 0xC0) == 0x80)</cpp:value></cpp:define>


<comment type="block">/* from strlib */</comment>
<comment type="block">/* translate a relative string position: negative means back from end */</comment>
<function><type><specifier>static</specifier> <name>lua_Integer</name></type> <name>u_posrelat</name> <parameter_list>(<parameter><decl><type><name>lua_Integer</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>pos</name></expr>;</return></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><literal type="number">0u</literal> <operator>-</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>pos</name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
  <else>else<block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>lua_Integer</name><operator>)</operator><name>len</name> <operator>+</operator> <name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Decode one UTF-8 sequence, returning NULL if byte sequence is
** invalid.  The array 'limits' stores the minimum value for each
** sequence length, to check for overlong representations. Its first
** entry forces an error for non-ascii bytes with no continuation
** bytes (count == 0).
*/</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>utf8_decode</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>utfint</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>strict</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>utfint</name></type> <name><name>limits</name><index>[]</index></name> <init>=
        <expr><block>{<expr><operator>~</operator><operator>(</operator><name>utfint</name><operator>)</operator><literal type="number">0</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x800</literal></expr>, <expr><literal type="number">0x10000u</literal></expr>, <expr><literal type="number">0x200000u</literal></expr>, <expr><literal type="number">0x4000000u</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>utfint</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* final result */</comment>
  <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* ascii? */</comment>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* to count number of continuation bytes */</comment>
    <for>for <control>(<init>;</init> <condition><expr><name>c</name> <operator>&amp;</operator> <literal type="number">0x40</literal></expr>;</condition> <incr><expr><name>c</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>  <comment type="block">/* while it needs continuation bytes... */</comment>
      <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cc</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>s</name><index>[<expr><operator>++</operator><name>count</name></expr>]</index></name></expr></init></decl>;</decl_stmt>  <comment type="block">/* read next byte */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cc</name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* not a continuation byte? */</comment>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* invalid byte sequence */</comment>
      <expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>res</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>cc</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>  <comment type="block">/* add lower 6 bits from cont. byte */</comment>
    </block_content>}</block></for>
    <expr_stmt><expr><name>res</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>utfint</name><operator>)</operator><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x7F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>count</name> <operator>*</operator> <literal type="number">5</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>  <comment type="block">/* add first byte */</comment>
    <if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">5</literal> <operator>||</operator> <name>res</name> <operator>&gt;</operator> <name>MAXUTF</name> <operator>||</operator> <name>res</name> <operator>&lt;</operator> <name><name>limits</name><index>[<expr><name>count</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* invalid byte sequence */</comment>
    <expr_stmt><expr><name>s</name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>  <comment type="block">/* skip continuation bytes read */</comment>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>strict</name></expr>)</condition> <block>{<block_content>
    <comment type="block">/* check for invalid code points; too large or surrogates */</comment>
    <if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;</operator> <name>MAXUNICODE</name> <operator>||</operator> <operator>(</operator><literal type="number">0xD800u</literal> <operator>&lt;=</operator> <name>res</name> <operator>&amp;&amp;</operator> <name>res</name> <operator>&lt;=</operator> <literal type="number">0xDFFFu</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>  <comment type="block">/* +1 to include first byte */</comment>
</block_content>}</block></function>


<comment type="block">/*
** utf8len(s [, i [, j [, lax]]]) --&gt; number of characters that
** start in the range [i,j], or nil + current position if 's' is not
** well formed in that interval
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>utflen</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lua_Integer</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* counter for the number of characters */</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>  <comment type="block">/* string length in bytes */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>luaL_checklstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lua_Integer</name></type> <name>posi</name> <init>= <expr><call><name>u_posrelat</name><argument_list>(<argument><expr><call><name>luaL_optinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lua_Integer</name></type> <name>posj</name> <init>= <expr><call><name>u_posrelat</name><argument_list>(<argument><expr><call><name>luaL_optinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>lax</name> <init>= <expr><call><name>lua_toboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaL_argcheck</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;=</operator> <name>posi</name> <operator>&amp;&amp;</operator> <operator>--</operator><name>posi</name> <operator>&lt;=</operator> <operator>(</operator><name>lua_Integer</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
                   <argument><expr><literal type="string">"initial position out of bounds"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaL_argcheck</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>--</operator><name>posj</name> <operator>&lt;</operator> <operator>(</operator><name>lua_Integer</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>,
                   <argument><expr><literal type="string">"final position out of bounds"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>posi</name> <operator>&lt;=</operator> <name>posj</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name> <init>= <expr><call><name>utf8_decode</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>posi</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>!</operator><name>lax</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>s1</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* conversion error? */</comment>
      <expr_stmt><expr><call><name>luaL_pushfail</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* return fail ... */</comment>
      <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>posi</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* ... and current position */</comment>
      <return>return <expr><literal type="number">2</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>posi</name> <operator>=</operator> <name>s1</name> <operator>-</operator> <name>s</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** codepoint(s, [i, [j [, lax]]]) -&gt; returns codepoints for all
** characters that start in the range [i,j]
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>codepoint</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>luaL_checklstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lua_Integer</name></type> <name>posi</name> <init>= <expr><call><name>u_posrelat</name><argument_list>(<argument><expr><call><name>luaL_optinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lua_Integer</name></type> <name>pose</name> <init>= <expr><call><name>u_posrelat</name><argument_list>(<argument><expr><call><name>luaL_optinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>posi</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>lax</name> <init>= <expr><call><name>lua_toboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>se</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaL_argcheck</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>posi</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"out of bounds"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaL_argcheck</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>pose</name> <operator>&lt;=</operator> <operator>(</operator><name>lua_Integer</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"out of bounds"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>posi</name> <operator>&gt;</operator> <name>pose</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* empty interval; return no values */</comment>
  <if_stmt><if>if <condition>(<expr><name>pose</name> <operator>-</operator> <name>posi</name> <operator>&gt;=</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* (lua_Integer -&gt; int) overflow? */</comment>
    <return>return <expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"string slice too long"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>pose</name> <operator>-</operator>  <name>posi</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>  <comment type="block">/* upper bound for number of returns */</comment>
  <expr_stmt><expr><call><name>luaL_checkstack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"string slice too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="block">/* count the number of returns */</comment>
  <expr_stmt><expr><name>se</name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>pose</name></expr>;</expr_stmt>  <comment type="block">/* string end */</comment>
  <for>for <control>(<init><expr><name>s</name> <operator>+=</operator> <name>posi</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <name>se</name></expr>;</condition><incr/>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>utfint</name></type> <name>code</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>utf8_decode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>code</name></expr></argument>, <argument><expr><operator>!</operator><name>lax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"invalid UTF-8 code"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>pushutfchar</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lua_Unsigned</name></type> <name>code</name> <init>= <expr><operator>(</operator><name>lua_Unsigned</name><operator>)</operator><call><name>luaL_checkinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaL_argcheck</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>code</name> <operator>&lt;=</operator> <name>MAXUTF</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"value out of range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_pushfstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"%U"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** utfchar(n1, n2, ...)  -&gt; char(n1)..char(n2)...
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>utfchar</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>lua_gettop</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* number of arguments */</comment>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* optimize common case of single char */</comment>
    <expr_stmt><expr><call><name>pushutfchar</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>luaL_Buffer</name></type> <name>b</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>luaL_buffinit</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>pushutfchar</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>luaL_addvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>luaL_pushresult</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** offset(s, n, [i])  -&gt; index where n-th character counting from
**   position 'i' starts; 0 means character at 'i'.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>byteoffset</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>luaL_checklstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lua_Integer</name></type> <name>n</name>  <init>= <expr><call><name>luaL_checkinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lua_Integer</name></type> <name>posi</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>posi</name> <operator>=</operator> <call><name>u_posrelat</name><argument_list>(<argument><expr><call><name>luaL_optinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>posi</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaL_argcheck</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;=</operator> <name>posi</name> <operator>&amp;&amp;</operator> <operator>--</operator><name>posi</name> <operator>&lt;=</operator> <operator>(</operator><name>lua_Integer</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>,
                   <argument><expr><literal type="string">"position out of bounds"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="block">/* find beginning of current byte sequence */</comment>
    <while>while <condition>(<expr><name>posi</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>iscont</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>posi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>posi</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
  </block_content>}</block></if>
  <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>iscont</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>posi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"initial position is a continuation byte"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
       <while>while <condition>(<expr><name><name>n</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>posi</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* move back */</comment>
         <do>do <block>{<block_content>  <comment type="block">/* find beginning of previous character */</comment>
           <expr_stmt><expr><name>posi</name><operator>--</operator></expr>;</expr_stmt>
         </block_content>}</block> while <condition>(<expr><name>posi</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>iscont</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>posi</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
         <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
       </block_content>}</block></while>
     </block_content>}</block></if>
     <else>else <block>{<block_content>
       <expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>  <comment type="block">/* do not move for 1st character */</comment>
       <while>while <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>posi</name> <operator>&lt;</operator> <operator>(</operator><name>lua_Integer</name><operator>)</operator><name>len</name></expr>)</condition> <block>{<block_content>
         <do>do <block>{<block_content>  <comment type="block">/* find beginning of next character */</comment>
           <expr_stmt><expr><name>posi</name><operator>++</operator></expr>;</expr_stmt>
         </block_content>}</block> while <condition>(<expr><call><name>iscont</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>posi</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>  <comment type="block">/* (cannot pass final '\0') */</comment>
         <expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>
       </block_content>}</block></while>
     </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* did it find given character? */</comment>
    <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>posi</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>  <comment type="block">/* no such character */</comment>
    <expr_stmt><expr><call><name>luaL_pushfail</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>iter_aux</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>strict</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>luaL_checklstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lua_Integer</name></type> <name>n</name> <init>= <expr><call><name>lua_tointeger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* first iteration? */</comment>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* start from here */</comment>
  <if type="elseif">else if <condition>(<expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><name>lua_Integer</name><operator>)</operator><name>len</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>  <comment type="block">/* skip current byte */</comment>
    <while>while <condition>(<expr><call><name>iscont</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>  <comment type="block">/* and its continuations */</comment>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <operator>(</operator><name>lua_Integer</name><operator>)</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>  <comment type="block">/* no more codepoints */</comment>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>utfint</name></type> <name>code</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><call><name>utf8_decode</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>code</name></expr></argument>, <argument><expr><name>strict</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>next</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"invalid UTF-8 code"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">2</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>iter_auxstrict</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>iter_aux</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>iter_auxlax</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>iter_aux</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>iter_codes</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>lax</name> <init>= <expr><call><name>lua_toboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaL_checkstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><ternary><condition><expr><name>lax</name></expr> ?</condition><then> <expr><name>iter_auxlax</name></expr> </then><else>: <expr><name>iter_auxstrict</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">3</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* pattern to match a single UTF-8 character */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTF8PATT</name></cpp:macro>	<cpp:value>"[\0-\x7F\xC2-\xFD][\x80-\xBF]*"</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>luaL_Reg</name></type> <name><name>funcs</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{<expr><literal type="string">"offset"</literal></expr>, <expr><name>byteoffset</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"codepoint"</literal></expr>, <expr><name>codepoint</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"char"</literal></expr>, <expr><name>utfchar</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"len"</literal></expr>, <expr><name>utflen</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"codes"</literal></expr>, <expr><name>iter_codes</name></expr>}</block></expr>,
  <comment type="block">/* placeholders */</comment>
  <expr><block>{<expr><literal type="string">"charpattern"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
  <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<function><type><name>LUAMOD_API</name> <name>int</name></type> <name>luaopen_utf8</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>luaL_newlib</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>funcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_pushlstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>UTF8PATT</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>UTF8PATT</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"charpattern"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

</unit>
