<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/lua/ldump.c"><comment type="block">/*
** $Id: ldump.c $
** save precompiled Lua chunks
** See Copyright Notice in lua.h
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ldump_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lprefix.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lstate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lundump.h"</cpp:file></cpp:include>


<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lua_Writer</name></type> <name>writer</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>strip</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
}</block></struct></type> <name>DumpState</name>;</typedef>


<comment type="block">/*
** All high-level dumps go through dumpVector; you can change it to
** change the endianness of the result
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dumpVector</name><parameter_list>(<parameter><type><name>D</name></type></parameter>,<parameter><type><name>v</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>dumpBlock(D,v,(n)*sizeof((v)[0]))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dumpLiteral</name><parameter_list>(<parameter><type><name>D</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>dumpBlock(D,s,sizeof(s) - sizeof(char))</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>void</name></type> <name>dumpBlock</name> <parameter_list>(<parameter><decl><type><name>DumpState</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>D</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name><name>D</name><operator>-&gt;</operator><name>L</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>D</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>D</name><operator>-&gt;</operator><name>writer</name></name>)<argument_list>(<argument><expr><name><name>D</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>D</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name><name>D</name><operator>-&gt;</operator><name>L</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dumpVar</name><parameter_list>(<parameter><type><name>D</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>dumpVector(D,&amp;x,1)</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>void</name></type> <name>dumpByte</name> <parameter_list>(<parameter><decl><type><name>DumpState</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lu_byte</name></type> <name>x</name> <init>= <expr><operator>(</operator><name>lu_byte</name><operator>)</operator><name>y</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>dumpVar</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* dumpInt Buff Size */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIBS</name></cpp:macro>    <cpp:value>((sizeof(size_t) * 8 / 7) + 1)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dumpSize</name> <parameter_list>(<parameter><decl><type><name>DumpState</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lu_byte</name></type> <name><name>buff</name><index>[<expr><name>DIBS</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><name><name>buff</name><index>[<expr><name>DIBS</name> <operator>-</operator> <operator>(</operator><operator>++</operator><name>n</name><operator>)</operator></expr>]</index></name> <operator>=</operator> <name>x</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>  <comment type="block">/* fill buffer in reverse order */</comment>
    <expr_stmt><expr><name>x</name> <operator>&gt;&gt;=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><name>x</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>
  <expr_stmt><expr><name><name>buff</name><index>[<expr><name>DIBS</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>  <comment type="block">/* mark last byte */</comment>
  <expr_stmt><expr><call><name>dumpVector</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>buff</name> <operator>+</operator> <name>DIBS</name> <operator>-</operator> <name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>dumpInt</name> <parameter_list>(<parameter><decl><type><name>DumpState</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>dumpSize</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>dumpNumber</name> <parameter_list>(<parameter><decl><type><name>DumpState</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><name>lua_Number</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>dumpVar</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>dumpInteger</name> <parameter_list>(<parameter><decl><type><name>DumpState</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><name>lua_Integer</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>dumpVar</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>dumpString</name> <parameter_list>(<parameter><decl><type><name>DumpState</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TString</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>dumpSize</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>tsslen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>getstr</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>dumpSize</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dumpVector</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>dumpCode</name> <parameter_list>(<parameter><decl><type><name>DumpState</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Proto</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>dumpInt</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>sizecode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dumpVector</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>sizecode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dumpFunction</name><parameter_list>(<parameter><decl><type><name>DumpState</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Proto</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>TString</name> <modifier>*</modifier></type><name>psource</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dumpConstants</name> <parameter_list>(<parameter><decl><type><name>DumpState</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Proto</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>sizek</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>dumpInt</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>tt</name> <init>= <expr><call><name>ttypetag</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>dumpByte</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>tt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name>tt</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>LUA_VNUMFLT</name></expr>:</case>
        <expr_stmt><expr><call><name>dumpNumber</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><call><name>fltvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>LUA_VNUMINT</name></expr>:</case>
        <expr_stmt><expr><call><name>dumpInteger</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><call><name>ivalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>LUA_VSHRSTR</name></expr>:</case>
      <case>case <expr><name>LUA_VLNGSTR</name></expr>:</case>
        <expr_stmt><expr><call><name>dumpString</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><call><name>tsvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>tt</name> <operator>==</operator> <name>LUA_VNIL</name> <operator>||</operator> <name>tt</name> <operator>==</operator> <name>LUA_VFALSE</name> <operator>||</operator> <name>tt</name> <operator>==</operator> <name>LUA_VTRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
  </block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>dumpProtos</name> <parameter_list>(<parameter><decl><type><name>DumpState</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Proto</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>sizep</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>dumpInt</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>dumpFunction</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>dumpUpvalues</name> <parameter_list>(<parameter><decl><type><name>DumpState</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Proto</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>sizeupvalues</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>dumpInt</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>dumpByte</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>upvalues</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>instack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dumpByte</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>upvalues</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dumpByte</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>upvalues</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>dumpDebug</name> <parameter_list>(<parameter><decl><type><name>DumpState</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Proto</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>D</name><operator>-&gt;</operator><name>strip</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>f</name><operator>-&gt;</operator><name>sizelineinfo</name></name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dumpInt</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dumpVector</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>lineinfo</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>D</name><operator>-&gt;</operator><name>strip</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>f</name><operator>-&gt;</operator><name>sizeabslineinfo</name></name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dumpInt</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>dumpInt</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>abslineinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dumpInt</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>abslineinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>D</name><operator>-&gt;</operator><name>strip</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>f</name><operator>-&gt;</operator><name>sizelocvars</name></name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dumpInt</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>dumpString</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>locvars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dumpInt</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>locvars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>startpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dumpInt</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>locvars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>endpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>D</name><operator>-&gt;</operator><name>strip</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>f</name><operator>-&gt;</operator><name>sizeupvalues</name></name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dumpInt</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>dumpString</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>upvalues</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>dumpFunction</name> <parameter_list>(<parameter><decl><type><name>DumpState</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Proto</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>TString</name> <modifier>*</modifier></type><name>psource</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>D</name><operator>-&gt;</operator><name>strip</name></name> <operator>||</operator> <name><name>f</name><operator>-&gt;</operator><name>source</name></name> <operator>==</operator> <name>psource</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>dumpString</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* no debug info or same source as its parent */</comment>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>dumpString</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <expr_stmt><expr><call><name>dumpInt</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>linedefined</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dumpInt</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>lastlinedefined</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dumpByte</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>numparams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dumpByte</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>is_vararg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dumpByte</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>maxstacksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dumpCode</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dumpConstants</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dumpUpvalues</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dumpProtos</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dumpDebug</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>dumpHeader</name> <parameter_list>(<parameter><decl><type><name>DumpState</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>dumpLiteral</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>LUA_SIGNATURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dumpByte</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>LUAC_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dumpByte</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>LUAC_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dumpLiteral</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>LUAC_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dumpByte</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Instruction</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dumpByte</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lua_Integer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dumpByte</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lua_Number</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dumpInteger</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>LUAC_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dumpNumber</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>LUAC_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** dump Lua function as precompiled chunk
*/</comment>
<function><type><name>int</name></type> <name>luaU_dump</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Proto</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>lua_Writer</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
              <parameter><decl><type><name>int</name></type> <name>strip</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>DumpState</name></type> <name>D</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>D</name><operator>.</operator><name>L</name></name> <operator>=</operator> <name>L</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>D</name><operator>.</operator><name>writer</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>D</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>D</name><operator>.</operator><name>strip</name></name> <operator>=</operator> <name>strip</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>D</name><operator>.</operator><name>status</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dumpHeader</name><argument_list>(<argument><expr><operator>&amp;</operator><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dumpByte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>D</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>sizeupvalues</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dumpFunction</name><argument_list>(<argument><expr><operator>&amp;</operator><name>D</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>D</name><operator>.</operator><name>status</name></name></expr>;</return>
</block_content>}</block></function>

</unit>
