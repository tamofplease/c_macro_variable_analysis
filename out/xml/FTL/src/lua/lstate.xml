<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/lua/lstate.c"><comment type="block">/*
** $Id: lstate.c $
** Global State
** See Copyright Notice in lua.h
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lstate_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lprefix.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ldebug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ldo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lfunc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lgc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lstate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ltable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ltm.h"</cpp:file></cpp:include>



<comment type="block">/*
** thread state + extra space
*/</comment>
<typedef>typedef <type><struct>struct <name>LX</name> <block>{
  <decl_stmt><decl><type><name>lu_byte</name></type> <name><name>extra_</name><index>[<expr><name>LUA_EXTRASPACE</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lua_State</name></type> <name>l</name></decl>;</decl_stmt>
}</block></struct></type> <name>LX</name>;</typedef>


<comment type="block">/*
** Main thread combines a thread state and the global state
*/</comment>
<typedef>typedef <type><struct>struct <name>LG</name> <block>{
  <decl_stmt><decl><type><name>LX</name></type> <name>l</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>global_State</name></type> <name>g</name></decl>;</decl_stmt>
}</block></struct></type> <name>LG</name>;</typedef>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fromstate</name><parameter_list>(<parameter><type><name>L</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(cast(LX *, cast(lu_byte *, (L)) - offsetof(LX, l)))</cpp:value></cpp:define>


<comment type="block">/*
** A macro to create a "random" seed when a state is created;
** the seed is used to randomize string hashes.
*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>luai_makeseed</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<comment type="block">/*
** Compute an initial seed with some level of randomness.
** Rely on Address Space Layout Randomization (if present) and
** current time.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>addbuff</name><parameter_list>(<parameter><type><name>b</name></type></parameter>,<parameter><type><name>p</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>{ size_t t = cast_sizet(e); \
    memcpy(b + p, &amp;t, sizeof(t)); p += sizeof(t); }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>luai_makeseed</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>h</name> <init>= <expr><call><name>cast_uint</name><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>addbuff</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* heap variable */</comment>
  <expr_stmt><expr><call><name>addbuff</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* local variable */</comment>
  <expr_stmt><expr><call><name>addbuff</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lua_newstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* public function */</comment>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>p</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>luaS_hash</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
** set GCdebt to a new value keeping the value (totalbytes + GCdebt)
** invariant (and avoiding underflows in 'totalbytes')
*/</comment>
<function><type><name>void</name></type> <name>luaE_setdebt</name> <parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>l_mem</name></type> <name>debt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>l_mem</name></type> <name>tb</name> <init>= <expr><call><name>gettotalbytes</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>tb</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>debt</name> <operator>&lt;</operator> <name>tb</name> <operator>-</operator> <name>MAX_LMEM</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>debt</name> <operator>=</operator> <name>tb</name> <operator>-</operator> <name>MAX_LMEM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* will make 'totalbytes == MAX_LMEM' */</comment>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>totalbytes</name></name> <operator>=</operator> <name>tb</name> <operator>-</operator> <name>debt</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>GCdebt</name></name> <operator>=</operator> <name>debt</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_setcstacklimit</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>limit</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ccalls</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaE_freeCI</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* release unused CIs */</comment>
  <expr_stmt><expr><name>ccalls</name> <operator>=</operator> <call><name>getCcalls</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>limit</name> <operator>&gt;=</operator> <literal type="number">40000</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* out of bounds */</comment>
  <expr_stmt><expr><name>limit</name> <operator>+=</operator> <name>CSTACKERR</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>L</name> <operator>!=</operator> <name><name>g</name><operator>-&gt;</operator> <name>mainthread</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>  <comment type="block">/* only main thread can change the C stack */</comment>
  <if type="elseif">else if <condition>(<expr><name>ccalls</name> <operator>&lt;=</operator> <name>CSTACKERR</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>  <comment type="block">/* handling overflow */</comment>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><name>limit</name> <operator>-</operator> <name><name>g</name><operator>-&gt;</operator><name>Cstacklimit</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ccalls</name> <operator>+</operator> <name>diff</name> <operator>&lt;=</operator> <name>CSTACKERR</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* new limit would cause an overflow */</comment>
    <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>Cstacklimit</name></name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>  <comment type="block">/* set new limit */</comment>
    <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>nCcalls</name></name> <operator>+=</operator> <name>diff</name></expr>;</expr_stmt>  <comment type="block">/* correct 'nCcalls' */</comment>
    <return>return <expr><name>limit</name> <operator>-</operator> <name>diff</name> <operator>-</operator> <name>CSTACKERR</name></expr>;</return>  <comment type="block">/* success; return previous limit */</comment>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Decrement count of "C calls" and check for overflows. In case of
** a stack overflow, check appropriate error ("regular" overflow or
** overflow while handling stack overflow).  If 'nCcalls' is smaller
** than CSTACKERR but larger than CSTACKMARK, it means it has just
** entered the "overflow zone", so the function raises an overflow
** error.  If 'nCcalls' is smaller than CSTACKMARK (which means it is
** already handling an overflow) but larger than CSTACKERRMARK, does
** not report an error (to allow message handling to work). Otherwise,
** report a stack overflow while handling a stack overflow (probably
** caused by a repeating error in the message handling function).
*/</comment>

<function><type><name>void</name></type> <name>luaE_enterCcall</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ncalls</name> <init>= <expr><call><name>getCcalls</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>nCcalls</name></name><operator>--</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ncalls</name> <operator>&lt;=</operator> <name>CSTACKERR</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* possible overflow? */</comment>
    <expr_stmt><expr><call><name>luaE_freeCI</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* release unused CIs */</comment>
    <expr_stmt><expr><name>ncalls</name> <operator>=</operator> <call><name>getCcalls</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* update call count */</comment>
    <if_stmt><if>if <condition>(<expr><name>ncalls</name> <operator>&lt;=</operator> <name>CSTACKERR</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* still overflow? */</comment>
      <if_stmt><if>if <condition>(<expr><name>ncalls</name> <operator>&lt;=</operator> <name>CSTACKERRMARK</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* below error-handling zone? */</comment>
        <expr_stmt><expr><call><name>luaD_throw</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_ERRERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* error while handling stack error */</comment>
      <if type="elseif">else if <condition>(<expr><name>ncalls</name> <operator>&gt;=</operator> <name>CSTACKMARK</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* not in error-handling zone; raise the error now */</comment>
        <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>nCcalls</name></name> <operator>=</operator> <operator>(</operator><name>CSTACKMARK</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>  <comment type="block">/* enter error-handling zone */</comment>
        <expr_stmt><expr><call><name>luaG_runerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"C stack overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <comment type="block">/* else stack is in the error-handling zone;
         allow message handler to work */</comment>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>CallInfo</name> <modifier>*</modifier></type><name>luaE_extendCI</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>ci</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaE_enterCcall</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ci</name> <operator>=</operator> <call><name>luaM_new</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>CallInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>ci</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>ci</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>ci</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>previous</name></name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>ci</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>l</name><operator>.</operator><name>trap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>nci</name></name><operator>++</operator></expr>;</expr_stmt>
  <return>return <expr><name>ci</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** free all CallInfo structures not in use by a thread
*/</comment>
<function><type><name>void</name></type> <name>luaE_freeCI</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name> <init>= <expr><name><name>L</name><operator>-&gt;</operator><name>ci</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>ci</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>nCcalls</name></name> <operator>+=</operator> <name><name>L</name><operator>-&gt;</operator><name>nci</name></name></expr>;</expr_stmt>  <comment type="block">/* add removed elements back to 'nCcalls' */</comment>
  <while>while <condition>(<expr><operator>(</operator><name>ci</name> <operator>=</operator> <name>next</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>ci</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaM_free</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>nci</name></name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>nCcalls</name></name> <operator>-=</operator> <name><name>L</name><operator>-&gt;</operator><name>nci</name></name></expr>;</expr_stmt>  <comment type="block">/* adjust result */</comment>
</block_content>}</block></function>


<comment type="block">/*
** free half of the CallInfo structures not in use by a thread,
** keeping the first one.
*/</comment>
<function><type><name>void</name></type> <name>luaE_shrinkCI</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name> <init>= <expr><name><name>L</name><operator>-&gt;</operator><name>ci</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>  <comment type="block">/* first free CallInfo */</comment>
  <decl_stmt><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ci</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>  <comment type="block">/* no extra elements */</comment>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>nCcalls</name></name> <operator>+=</operator> <name><name>L</name><operator>-&gt;</operator><name>nci</name></name></expr>;</expr_stmt>  <comment type="block">/* add removed elements back to 'nCcalls' */</comment>
  <while>while <condition>(<expr><operator>(</operator><name>next</name> <operator>=</operator> <name><name>ci</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* two extra elements? */</comment>
    <decl_stmt><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>next2</name> <init>= <expr><name><name>next</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>  <comment type="block">/* next's next */</comment>
    <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>next2</name></expr>;</expr_stmt>  <comment type="block">/* remove next from the list */</comment>
    <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>nci</name></name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaM_free</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* free next */</comment>
    <if_stmt><if>if <condition>(<expr><name>next2</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
      <break>break;</break></block_content></block></if>  <comment type="block">/* no more elements */</comment>
    <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>next2</name><operator>-&gt;</operator><name>previous</name></name> <operator>=</operator> <name>ci</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>ci</name> <operator>=</operator> <name>next2</name></expr>;</expr_stmt>  <comment type="block">/* continue */</comment>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>nCcalls</name></name> <operator>-=</operator> <name><name>L</name><operator>-&gt;</operator><name>nci</name></name></expr>;</expr_stmt>  <comment type="block">/* adjust result */</comment>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>stack_init</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L1</name></decl></parameter>, <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name></decl>;</decl_stmt>
  <comment type="block">/* initialize stack array */</comment>
  <expr_stmt><expr><name><name>L1</name><operator>-&gt;</operator><name>stack</name></name> <operator>=</operator> <call><name>luaM_newvector</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>BASIC_STACK_SIZE</name></expr></argument>, <argument><expr><name>StackValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L1</name><operator>-&gt;</operator><name>stacksize</name></name> <operator>=</operator> <name>BASIC_STACK_SIZE</name></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BASIC_STACK_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>setnilvalue</name><argument_list>(<argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L1</name><operator>-&gt;</operator><name>stack</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>  <comment type="block">/* erase new stack */</comment>
  <expr_stmt><expr><name><name>L1</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name><name>L1</name><operator>-&gt;</operator><name>stack</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L1</name><operator>-&gt;</operator><name>stack_last</name></name> <operator>=</operator> <name><name>L1</name><operator>-&gt;</operator><name>stack</name></name> <operator>+</operator> <name><name>L1</name><operator>-&gt;</operator><name>stacksize</name></name> <operator>-</operator> <name>EXTRA_STACK</name></expr>;</expr_stmt>
  <comment type="block">/* initialize first ci */</comment>
  <expr_stmt><expr><name>ci</name> <operator>=</operator> <operator>&amp;</operator><name><name>L1</name><operator>-&gt;</operator><name>base_ci</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>ci</name><operator>-&gt;</operator><name>previous</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>callstatus</name></name> <operator>=</operator> <name>CIST_C</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name><name>L1</name><operator>-&gt;</operator><name>top</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>c</name><operator>.</operator><name>k</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>nresults</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setnilvalue</name><argument_list>(<argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L1</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 'function' entry for this 'ci' */</comment>
  <expr_stmt><expr><name><name>L1</name><operator>-&gt;</operator><name>top</name></name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name><name>L1</name><operator>-&gt;</operator><name>top</name></name> <operator>+</operator> <name>LUA_MINSTACK</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L1</name><operator>-&gt;</operator><name>ci</name></name> <operator>=</operator> <name>ci</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>freestack</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>L</name><operator>-&gt;</operator><name>stack</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>  <comment type="block">/* stack not completely built yet */</comment>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>ci</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>L</name><operator>-&gt;</operator><name>base_ci</name></name></expr>;</expr_stmt>  <comment type="block">/* free the entire 'ci' list */</comment>
  <expr_stmt><expr><call><name>luaE_freeCI</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>nci</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaM_freearray</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>stacksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* free stack array */</comment>
</block_content>}</block></function>


<comment type="block">/*
** Create registry table and its predefined values
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>init_registry</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TValue</name></type> <name>temp</name></decl>;</decl_stmt>
  <comment type="block">/* create registry */</comment>
  <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>registry</name> <init>= <expr><call><name>luaH_new</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sethvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>l_registry</name></name></expr></argument>, <argument><expr><name>registry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaH_resize</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>registry</name></expr></argument>, <argument><expr><name>LUA_RIDX_LAST</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* registry[LUA_RIDX_MAINTHREAD] = L */</comment>
  <expr_stmt><expr><call><name>setthvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* temp = L */</comment>
  <expr_stmt><expr><call><name>luaH_setint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>registry</name></expr></argument>, <argument><expr><name>LUA_RIDX_MAINTHREAD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* registry[LUA_RIDX_GLOBALS] = table of globals */</comment>
  <expr_stmt><expr><call><name>sethvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><call><name>luaH_new</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* temp = new table (global table) */</comment>
  <expr_stmt><expr><call><name>luaH_setint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>registry</name></expr></argument>, <argument><expr><name>LUA_RIDX_GLOBALS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** open parts of the state that may cause memory-allocation errors.
** ('g-&gt;nilvalue' being a nil value flags that the state was completely
** build.)
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>f_luaopen</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ud</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>ud</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>stack_init</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* init stack */</comment>
  <expr_stmt><expr><call><name>init_registry</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaS_init</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaT_init</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaX_init</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gcrunning</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>  <comment type="block">/* allow gc */</comment>
  <expr_stmt><expr><call><name>setnilvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>nilvalue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luai_userstateopen</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** preinitialize a thread with consistent values without allocating
** any memory (to avoid errors)
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>preinit_thread</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>stack</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>ci</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>nci</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>stacksize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>twups</name></name> <operator>=</operator> <name>L</name></expr>;</expr_stmt>  <comment type="block">/* thread has no upvalues */</comment>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>errorJmp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>hook</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>hookmask</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>basehookcount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>allowhook</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>resethookcount</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>openupval</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>LUA_OK</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>errfunc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>oldpc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>close_state</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaF_close</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>CLOSEPROTECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* close all upvalues */</comment>
  <expr_stmt><expr><call><name>luaC_freeallobjects</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* collect all objects */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>ttisnil</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>nilvalue</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* closing a fully built state? */</comment>
    <expr_stmt><expr><call><name>luai_userstateclose</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>luaM_freearray</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>strt</name><operator>.</operator><name>hash</name></name></expr></argument>, <argument><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>strt</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>freestack</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>gettotalbytes</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LG</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call>(<modifier>*</modifier><name><name>g</name><operator>-&gt;</operator><name>frealloc</name></name>)<argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>, <argument><expr><call><name>fromstate</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LG</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* free main block */</comment>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>lua_State</name> <modifier>*</modifier></type><name>lua_newthread</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L1</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaC_checkGC</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* create new thread */</comment>
  <expr_stmt><expr><name>L1</name> <operator>=</operator> <operator>&amp;</operator><call><name>cast</name><argument_list>(<argument><expr><name>LX</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>luaM_newobject</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_TTHREAD</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LX</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>l</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L1</name><operator>-&gt;</operator><name>marked</name></name> <operator>=</operator> <call><name>luaC_white</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L1</name><operator>-&gt;</operator><name>tt</name></name> <operator>=</operator> <name>LUA_VTHREAD</name></expr>;</expr_stmt>
  <comment type="block">/* link it on list 'allgc' */</comment>
  <expr_stmt><expr><name><name>L1</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>allgc</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>allgc</name></name> <operator>=</operator> <call><name>obj2gco</name><argument_list>(<argument><expr><name>L1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* anchor it on L stack */</comment>
  <expr_stmt><expr><call><name>setthvalue2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><name>L1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>api_incr_top</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>preinit_thread</name><argument_list>(<argument><expr><name>L1</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L1</name><operator>-&gt;</operator><name>nCcalls</name></name> <operator>=</operator> <call><name>getCcalls</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L1</name><operator>-&gt;</operator><name>hookmask</name></name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>hookmask</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L1</name><operator>-&gt;</operator><name>basehookcount</name></name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>basehookcount</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L1</name><operator>-&gt;</operator><name>hook</name></name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>hook</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>resethookcount</name><argument_list>(<argument><expr><name>L1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* initialize L1 extra space */</comment>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>lua_getextraspace</name><argument_list>(<argument><expr><name>L1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>lua_getextraspace</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>mainthread</name></name></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><name>LUA_EXTRASPACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luai_userstatethread</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>L1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>stack_init</name><argument_list>(<argument><expr><name>L1</name></expr></argument>, <argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* init stack */</comment>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>L1</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaE_freethread</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L1</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>LX</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>fromstate</name><argument_list>(<argument><expr><name>L1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaF_close</name><argument_list>(<argument><expr><name>L1</name></expr></argument>, <argument><expr><name><name>L1</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>NOCLOSINGMETH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* close all upvalues */</comment>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>L1</name><operator>-&gt;</operator><name>openupval</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luai_userstatefree</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>L1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>freestack</name><argument_list>(<argument><expr><name>L1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaM_free</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>lua_resetthread</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>ci</name></name> <operator>=</operator> <name>ci</name> <operator>=</operator> <operator>&amp;</operator><name><name>L</name><operator>-&gt;</operator><name>base_ci</name></name></expr>;</expr_stmt>  <comment type="block">/* unwind CallInfo list */</comment>
  <expr_stmt><expr><call><name>setnilvalue</name><argument_list>(<argument><expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 'function' entry for basic 'ci' */</comment>
  <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>stack</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>callstatus</name></name> <operator>=</operator> <name>CIST_C</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>luaF_close</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>CLOSEPROTECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>CLOSEPROTECT</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* real errors? */</comment>
    <expr_stmt><expr><call><name>luaD_seterrorobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>stack</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else <block>{<block_content>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>LUA_OK</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>stack</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>+</operator> <name>LUA_MINSTACK</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>lua_State</name> <modifier>*</modifier></type><name>lua_newstate</name> <parameter_list>(<parameter><decl><type><name>lua_Alloc</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ud</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>LG</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>cast</name><argument_list>(<argument><expr><name>LG</name> <operator>*</operator></expr></argument>, <argument><expr><call>(<modifier>*</modifier><name>f</name>)<argument_list>(<argument><expr><name>ud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>LUA_TTHREAD</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LG</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>L</name> <operator>=</operator> <operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>l</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>g</name> <operator>=</operator> <operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>g</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>tt</name></name> <operator>=</operator> <name>LUA_VTHREAD</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>currentwhite</name></name> <operator>=</operator> <call><name>bitmask</name><argument_list>(<argument><expr><name>WHITE0BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>marked</name></name> <operator>=</operator> <call><name>luaC_white</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>preinit_thread</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>allgc</name></name> <operator>=</operator> <call><name>obj2gco</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* by now, only object is the main thread */</comment>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>Cstacklimit</name></name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>nCcalls</name></name> <operator>=</operator> <name>LUAI_MAXCSTACK</name> <operator>+</operator> <name>CSTACKERR</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>incnny</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* main thread is always non yieldable */</comment>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>frealloc</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>ud</name></name> <operator>=</operator> <name>ud</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>warnf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>ud_warn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>mainthread</name></name> <operator>=</operator> <name>L</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>seed</name></name> <operator>=</operator> <call><name>luai_makeseed</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gcrunning</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="block">/* no GC while building state */</comment>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>strt</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>strt</name><operator>.</operator><name>nuse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>strt</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setnilvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>l_registry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>panic</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gcstate</name></name> <operator>=</operator> <name>GCSpause</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gckind</name></name> <operator>=</operator> <name>KGC_INC</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gcemergency</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>finobj</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>tobefnz</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>fixedgc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>firstold1</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>survival</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>old1</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>reallyold</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>finobjsur</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>finobjold1</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>finobjrold</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>sweepgc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gray</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>grayagain</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>weak</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>ephemeron</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>allweak</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>twups</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>totalbytes</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LG</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>GCdebt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>lastatomic</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setivalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>nilvalue</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* to signal that state is not yet built */</comment>
  <expr_stmt><expr><call><name>setgcparam</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>gcpause</name></name></expr></argument>, <argument><expr><name>LUAI_GCPAUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setgcparam</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>gcstepmul</name></name></expr></argument>, <argument><expr><name>LUAI_GCMUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gcstepsize</name></name> <operator>=</operator> <name>LUAI_GCSTEPSIZE</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setgcparam</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>genmajormul</name></name></expr></argument>, <argument><expr><name>LUAI_GENMAJORMUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>genminormul</name></name> <operator>=</operator> <name>LUAI_GENMINORMUL</name></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LUA_NUMTAGS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>mt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>
  <if_stmt><if>if <condition>(<expr><call><name>luaD_rawrunprotected</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>f_luaopen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LUA_OK</name></expr>)</condition> <block>{<block_content>
    <comment type="block">/* memory allocation error: free partial state */</comment>
    <expr_stmt><expr><call><name>close_state</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>L</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>L</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>void</name></type> <name>lua_close</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>L</name> <operator>=</operator> <call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>mainthread</name></expr>;</expr_stmt>  <comment type="block">/* only the main thread can be closed */</comment>
  <expr_stmt><expr><call><name>close_state</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaE_warning</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tocont</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lua_WarnFunction</name></type> <name>wf</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>warnf</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>wf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>wf</name><argument_list>(<argument><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>ud_warn</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>tocont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Generate a warning from an error message
*/</comment>
<function><type><name>void</name></type> <name>luaE_warnerror</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>where</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>errobj</name> <init>= <expr><call><name>s2v</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* error object */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><ternary><condition><expr><operator>(</operator><call><name>ttisstring</name><argument_list>(<argument><expr><name>errobj</name></expr></argument>)</argument_list></call><operator>)</operator></expr>
                  ?</condition><then> <expr><call><name>svalue</name><argument_list>(<argument><expr><name>errobj</name></expr></argument>)</argument_list></call></expr>
                  </then><else>: <expr><literal type="string">"error object is not a string"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <comment type="block">/* produce warning "error in %s (%s)" (where, msg) */</comment>
  <expr_stmt><expr><call><name>luaE_warning</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"error in "</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaE_warning</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>where</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaE_warning</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">" ("</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaE_warning</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaE_warning</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
