<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/lua/lstrlib.c"><comment type="block">/*
** $Id: lstrlib.c $
** Standard library for string operations and pattern-matching
** See Copyright Notice in lua.h
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lstrlib_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_LIB</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lprefix.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lauxlib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lualib.h"</cpp:file></cpp:include>


<comment type="block">/*
** maximum number of captures that a pattern can do during
** pattern-matching. This limit is arbitrary, but must fit in
** an unsigned char.
*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LUA_MAXCAPTURES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_MAXCAPTURES</name></cpp:macro>		<cpp:value>32</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/* macro to 'unsign' a character */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>uchar</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>((unsigned char)(c))</cpp:value></cpp:define>


<comment type="block">/*
** Some sizes are better limited to fit in 'int', but must also fit in
** 'size_t'. (We assume that 'lua_Integer' cannot be smaller than 'int'.)
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SIZET</name></cpp:macro>	<cpp:value>((size_t)(~(size_t)0))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXSIZE</name></cpp:macro>  \
	<cpp:value>(sizeof(size_t) &lt; sizeof(int) ? MAX_SIZET : (size_t)(INT_MAX))</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>int</name></type> <name>str_len</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaL_checklstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>(</operator><name>lua_Integer</name><operator>)</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** translate a relative initial string position
** (negative means back from end): clip result to [1, inf).
** The length of any string in Lua must fit in a lua_Integer,
** so there are no overflows in the casts.
** The inverted comparison avoids a possible overflow
** computing '-pos'.
*/</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type> <name>posrelatI</name> <parameter_list>(<parameter><decl><type><name>lua_Integer</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator><name>pos</name></expr>;</return></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>pos</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <operator>-</operator><operator>(</operator><name>lua_Integer</name><operator>)</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* inverted comparison */</comment>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>  <comment type="block">/* clip to 1 */</comment>
  <else>else<block type="pseudo"><block_content> <return>return <expr><name>len</name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Gets an optional ending string position from argument 'arg',
** with default value 'def'.
** Negative means back from end: clip result to [0, len]
*/</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type> <name>getendpos</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>lua_Integer</name></type> <name>def</name></decl></parameter>,
                         <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lua_Integer</name></type> <name>pos</name> <init>= <expr><call><name>luaL_optinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;</operator> <operator>(</operator><name>lua_Integer</name><operator>)</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>len</name></expr>;</return></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator><name>pos</name></expr>;</return></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <operator>-</operator><operator>(</operator><name>lua_Integer</name><operator>)</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
  <else>else<block type="pseudo"><block_content> <return>return <expr><name>len</name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>str_sub</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>luaL_checklstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>start</name> <init>= <expr><call><name>posrelatI</name><argument_list>(<argument><expr><call><name>luaL_checkinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>end</name> <init>= <expr><call><name>getendpos</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>lua_pushlstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <name>start</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>end</name> <operator>-</operator> <name>start</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>str_reverse</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>luaL_Buffer</name></type> <name>b</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>luaL_checklstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>luaL_buffinitsize</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>l</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
  <expr_stmt><expr><call><name>luaL_pushresultsize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>str_lower</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>luaL_Buffer</name></type> <name>b</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>luaL_checklstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>luaL_buffinitsize</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>tolower</name><argument_list>(<argument><expr><call><name>uchar</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  <expr_stmt><expr><call><name>luaL_pushresultsize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>str_upper</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>luaL_Buffer</name></type> <name>b</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>luaL_checklstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>luaL_buffinitsize</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>toupper</name><argument_list>(<argument><expr><call><name>uchar</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  <expr_stmt><expr><call><name>luaL_pushresultsize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>str_rep</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>lsep</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>luaL_checklstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lua_Integer</name></type> <name>n</name> <init>= <expr><call><name>luaL_checkinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sep</name> <init>= <expr><call><name>luaL_optlstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>lsep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>l</name> <operator>+</operator> <name><name>lsep</name> <argument_list type="generic">&lt; <argument><expr><name>l</name> <operator>||</operator> <name>l</name> <operator>+</operator> <name>lsep</name></expr></argument> &gt;</argument_list></name> <name>MAXSIZE</name> <operator>/</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* may overflow? */</comment>
    <return>return <expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"resulting string too large"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>totallen</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><name>n</name> <operator>*</operator> <name>l</name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>lsep</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>luaL_Buffer</name></type> <name>b</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>luaL_buffinitsize</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>totallen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>n</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* first n-1 copies (followed by separator) */</comment>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>l</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lsep</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* empty 'memcpy' is not that cheap */</comment>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><name>lsep</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>lsep</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>l</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* last copy (not followed by separator) */</comment>
    <expr_stmt><expr><call><name>luaL_pushresultsize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>totallen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>str_byte</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>luaL_checklstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lua_Integer</name></type> <name>pi</name> <init>= <expr><call><name>luaL_optinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>posi</name> <init>= <expr><call><name>posrelatI</name><argument_list>(<argument><expr><name>pi</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>pose</name> <init>= <expr><call><name>getendpos</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>pi</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>posi</name> <operator>&gt;</operator> <name>pose</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* empty interval; return no values */</comment>
  <if_stmt><if>if <condition>(<expr><name>pose</name> <operator>-</operator> <name>posi</name> <operator>&gt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* arithmetic overflow? */</comment>
    <return>return <expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"string slice too long"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>pose</name> <operator>-</operator>  <name>posi</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaL_checkstack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"string slice too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>uchar</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>posi</name><operator>+</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>str_char</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>lua_gettop</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* number of arguments */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>luaL_Buffer</name></type> <name>b</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>luaL_buffinitsize</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>lua_Unsigned</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>lua_Unsigned</name><operator>)</operator><call><name>luaL_checkinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>luaL_argcheck</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>c</name> <operator>&lt;=</operator> <operator>(</operator><name>lua_Unsigned</name><operator>)</operator><name>UCHAR_MAX</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="string">"value out of range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>uchar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>luaL_pushresultsize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Buffer to store the result of 'string.dump'. It must be initialized
** after the call to 'lua_dump', to ensure that the function is on the
** top of the stack when 'lua_dump' is called. ('luaL_buffinit' might
** push stuff.)
*/</comment>
<struct>struct <name>str_Writer</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>init</name></decl>;</decl_stmt>  <comment type="block">/* true iff buffer has been initialized */</comment>
  <decl_stmt><decl><type><name>luaL_Buffer</name></type> <name>B</name></decl>;</decl_stmt>
}</block>;</struct>


<function><type><specifier>static</specifier> <name>int</name></type> <name>writer</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ud</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>str_Writer</name></name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>(</operator>struct <name>str_Writer</name> <operator>*</operator><operator>)</operator><name>ud</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>init</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>init</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_buffinit</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>B</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>luaL_addlstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>B</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>b</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>str_dump</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>str_Writer</name></name></type> <name>state</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>strip</name> <init>= <expr><call><name>lua_toboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>LUA_TFUNCTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_settop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* ensure function is on the top of the stack */</comment>
  <expr_stmt><expr><name><name>state</name><operator>.</operator><name>init</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>lua_dump</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>writer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>strip</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"unable to dump given function"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>luaL_pushresult</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>.</operator><name>B</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>



<comment type="block">/*
** {======================================================
** METAMETHODS
** =======================================================
*/</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LUA_NOCVTS2N</name></expr></argument>)</argument_list></call></expr></cpp:if>	<comment type="block">/* { */</comment>

<comment type="block">/* no coercion from strings to numbers */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>luaL_Reg</name></type> <name><name>stringmetamethods</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{<expr><literal type="string">"__index"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,  <comment type="block">/* placeholder */</comment>
  <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>		<comment type="block">/* }{ */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tonum</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>lua_type</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LUA_TNUMBER</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* already a number? */</comment>
    <expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if>
  <else>else <block>{<block_content>  <comment type="block">/* check whether it is a numerical string */</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>lua_tolstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>(</operator><name>s</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>lua_stringtonumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>trymt</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mtname</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>lua_settop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* back to the original arguments */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>lua_type</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>LUA_TSTRING</name> <operator>||</operator> <operator>!</operator><call><name>luaL_getmetafield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>mtname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"attempt to %s a '%s' with a '%s'"</literal></expr></argument>, <argument><expr><name>mtname</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>,
                  <argument><expr><call><name>luaL_typename</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>luaL_typename</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>lua_insert</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* put metamethod before arguments */</comment>
  <expr_stmt><expr><call><name>lua_call</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* call metamethod */</comment>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>arith</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mtname</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>tonum</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>tonum</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>lua_arith</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* result will be on the top */</comment>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>trymt</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>mtname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>arith_add</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>arith</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_OPADD</name></expr></argument>, <argument><expr><literal type="string">"__add"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>arith_sub</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>arith</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_OPSUB</name></expr></argument>, <argument><expr><literal type="string">"__sub"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>arith_mul</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>arith</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_OPMUL</name></expr></argument>, <argument><expr><literal type="string">"__mul"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>arith_mod</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>arith</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_OPMOD</name></expr></argument>, <argument><expr><literal type="string">"__mod"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>arith_pow</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>arith</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_OPPOW</name></expr></argument>, <argument><expr><literal type="string">"__pow"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>arith_div</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>arith</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_OPDIV</name></expr></argument>, <argument><expr><literal type="string">"__div"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>arith_idiv</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>arith</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_OPIDIV</name></expr></argument>, <argument><expr><literal type="string">"__idiv"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>arith_unm</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>arith</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_OPUNM</name></expr></argument>, <argument><expr><literal type="string">"__unm"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>luaL_Reg</name></type> <name><name>stringmetamethods</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{<expr><literal type="string">"__add"</literal></expr>, <expr><name>arith_add</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"__sub"</literal></expr>, <expr><name>arith_sub</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"__mul"</literal></expr>, <expr><name>arith_mul</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"__mod"</literal></expr>, <expr><name>arith_mod</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"__pow"</literal></expr>, <expr><name>arith_pow</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"__div"</literal></expr>, <expr><name>arith_div</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"__idiv"</literal></expr>, <expr><name>arith_idiv</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"__unm"</literal></expr>, <expr><name>arith_unm</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"__index"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,  <comment type="block">/* placeholder */</comment>
  <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>		<comment type="block">/* } */</comment>

<comment type="block">/* }====================================================== */</comment>

<comment type="block">/*
** {======================================================
** PATTERN MATCHING
** =======================================================
*/</comment>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAP_UNFINISHED</name></cpp:macro>	<cpp:value>(-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAP_POSITION</name></cpp:macro>	<cpp:value>(-2)</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct <name>MatchState</name> <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src_init</name></decl>;</decl_stmt>  <comment type="block">/* init of source string */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src_end</name></decl>;</decl_stmt>  <comment type="block">/* end ('\0') of source string */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p_end</name></decl>;</decl_stmt>  <comment type="block">/* end ('\0') of pattern */</comment>
  <decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>matchdepth</name></decl>;</decl_stmt>  <comment type="block">/* control for recursive depth (to avoid C stack overflow) */</comment>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>level</name></decl>;</decl_stmt>  <comment type="block">/* total number of captures (finished or unfinished) */</comment>
  <struct>struct <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>init</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>len</name></decl>;</decl_stmt>
  }</block> <decl><name><name>capture</name><index>[<expr><name>LUA_MAXCAPTURES</name></expr>]</index></name></decl>;</struct>
}</block></struct></type> <name>MatchState</name>;</typedef>


<comment type="block">/* recursive function */</comment>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>match</name> <parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/* maximum recursion depth for 'match' */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAXCCALLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXCCALLS</name></cpp:macro>	<cpp:value>200</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L_ESC</name></cpp:macro>		<cpp:value>'%'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPECIALS</name></cpp:macro>	<cpp:value>"^$*+?.([%-"</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>int</name></type> <name>check_capture</name> <parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>l</name> <operator>-=</operator> <literal type="char">'1'</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>l</name> <operator>&gt;=</operator> <name><name>ms</name><operator>-&gt;</operator><name>level</name></name> <operator>||</operator> <name><name>ms</name><operator>-&gt;</operator><name>capture</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>==</operator> <name>CAP_UNFINISHED</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>luaL_error</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><literal type="string">"invalid capture index %%%d"</literal></expr></argument>, <argument><expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><name>l</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>capture_to_close</name> <parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><name><name>ms</name><operator>-&gt;</operator><name>level</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>level</name><operator>--</operator></expr>;</init> <condition><expr><name>level</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>level</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>capture</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>==</operator> <name>CAP_UNFINISHED</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>level</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
  <return>return <expr><call><name>luaL_error</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><literal type="string">"invalid pattern capture"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>classend</name> <parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>L_ESC</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name><name>ms</name><operator>-&gt;</operator><name>p_end</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><literal type="string">"malformed pattern (ends with '%%')"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <return>return <expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><literal type="char">'['</literal></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <do>do <block>{<block_content>  <comment type="block">/* look for a ']' */</comment>
        <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name><name>ms</name><operator>-&gt;</operator><name>p_end</name></name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><literal type="string">"malformed pattern (missing ']')"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>==</operator> <name>L_ESC</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;</operator> <name><name>ms</name><operator>-&gt;</operator><name>p_end</name></name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* skip escapes (e.g. '%]') */</comment>
      </block_content>}</block> while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition>;</do>
      <return>return <expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
    <default>default:</default> <block>{<block_content>
      <return>return <expr><name>p</name></expr>;</return>
    </block_content>}</block>
  </block_content>}</block></switch>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>match_class</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><call><name>tolower</name><argument_list>(<argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="char">'a'</literal></expr> :</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>isalpha</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'c'</literal></expr> :</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>iscntrl</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'d'</literal></expr> :</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'g'</literal></expr> :</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>isgraph</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'l'</literal></expr> :</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>islower</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'p'</literal></expr> :</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ispunct</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'s'</literal></expr> :</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>isspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'u'</literal></expr> :</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>isupper</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'w'</literal></expr> :</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>isalnum</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'x'</literal></expr> :</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>isxdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'z'</literal></expr> :</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt> <break>break;</break>  <comment type="block">/* deprecated option */</comment>
    <default>default:</default> <return>return <expr><operator>(</operator><name>cl</name> <operator>==</operator> <name>c</name><operator>)</operator></expr>;</return>
  </block_content>}</block></switch>
  <return>return <expr><operator>(</operator><ternary><condition><expr><call><name>islower</name><argument_list>(<argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>res</name></expr> </then><else>: <expr><operator>!</operator><name>res</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>matchbracketclass</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>sig</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>sig</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>  <comment type="block">/* skip the '^' */</comment>
  </block_content>}</block></if></if_stmt>
  <while>while <condition>(<expr><operator>++</operator><name>p</name> <operator>&lt;</operator> <name>ec</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>L_ESC</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>match_class</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>sig</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>p</name><operator>+</operator><literal type="number">2</literal> <operator>&lt;</operator> <name>ec</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>p</name><operator>-</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>sig</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>sig</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><operator>!</operator><name>sig</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>singlematch</name> <parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
                        <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;=</operator> <name><name>ms</name><operator>-&gt;</operator><name>src_end</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><literal type="char">'.'</literal></expr>:</case> <return>return <expr><literal type="number">1</literal></expr>;</return>  <comment type="block">/* matches any char */</comment>
      <case>case <expr><name>L_ESC</name></expr>:</case> <return>return <expr><call><name>match_class</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      <case>case <expr><literal type="char">'['</literal></expr>:</case> <return>return <expr><call><name>matchbracketclass</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ep</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
      <default>default:</default>  <return>return <expr><operator>(</operator><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>c</name><operator>)</operator></expr>;</return>
    </block_content>}</block></switch>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>matchbalance</name> <parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
                                   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name><name>ms</name><operator>-&gt;</operator><name>p_end</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><literal type="string">"malformed pattern (missing arguments to '%%b')"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cont</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>++</operator><name>s</name> <operator>&lt;</operator> <name><name>ms</name><operator>-&gt;</operator><name>src_end</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>e</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>--</operator><name>cont</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      </block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cont</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>  <comment type="block">/* string ends out of balance */</comment>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>max_expand</name> <parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
                                 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* counts maximum expand for item */</comment>
  <while>while <condition>(<expr><call><name>singlematch</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
  <comment type="block">/* keeps trying to match with the maximum repetitions */</comment>
  <while>while <condition>(<expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>match</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><operator>(</operator><name>s</name><operator>+</operator><name>i</name><operator>)</operator></expr></argument>, <argument><expr><name>ep</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>  <comment type="block">/* else didn't match; reduce 1 repetition to try again */</comment>
  </block_content>}</block></while>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>min_expand</name> <parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
                                 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>match</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>ep</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>res</name></expr>;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>singlematch</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* try with one more repetition */</comment>
    <else>else<block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start_capture</name> <parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
                                    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>what</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><name><name>ms</name><operator>-&gt;</operator><name>level</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;=</operator> <name>LUA_MAXCAPTURES</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><literal type="string">"too many captures"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>capture</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>init</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>capture</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>what</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name>level</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name><operator>=</operator><call><name>match</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* match failed? */</comment>
    <expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>level</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* undo capture */</comment>
  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end_capture</name> <parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
                                  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><call><name>capture_to_close</name><argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>capture</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>s</name> <operator>-</operator> <name><name>ms</name><operator>-&gt;</operator><name>capture</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>init</name></expr>;</expr_stmt>  <comment type="block">/* close capture */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>match</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* match failed? */</comment>
    <expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>capture</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>CAP_UNFINISHED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* undo capture */</comment>
  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>match_capture</name> <parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>check_capture</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>capture</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>src_end</name></name><operator>-</operator><name>s</name><operator>)</operator> <operator>&gt;=</operator> <name>len</name> <operator>&amp;&amp;</operator>
      <call><name>memcmp</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>capture</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>init</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>s</name><operator>+</operator><name>len</name></expr>;</return></block_content></block></if>
  <else>else<block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>match</name> <parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>matchdepth</name></name><operator>--</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><literal type="string">"pattern too complex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <label><name>init</name>:</label> <comment type="block">/* using goto's to optimize tail recursion */</comment>
  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name><name>ms</name><operator>-&gt;</operator><name>p_end</name></name></expr>)</condition> <block>{<block_content>  <comment type="block">/* end of pattern? */</comment>
    <switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><literal type="char">'('</literal></expr>:</case> <block>{<block_content>  <comment type="block">/* start capture */</comment>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* position capture? */</comment>
          <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>start_capture</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>CAP_POSITION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
          <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>start_capture</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>CAP_UNFINISHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><literal type="char">')'</literal></expr>:</case> <block>{<block_content>  <comment type="block">/* end capture */</comment>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>end_capture</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><literal type="char">'$'</literal></expr>:</case> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <name><name>ms</name><operator>-&gt;</operator><name>p_end</name></name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* is the '$' the last char in pattern? */</comment>
          <goto>goto <name>dflt</name>;</goto></block_content></block></if></if_stmt>  <comment type="block">/* no; go to default */</comment>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>s</name> <operator>==</operator> <name><name>ms</name><operator>-&gt;</operator><name>src_end</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>s</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>  <comment type="block">/* check end of string */</comment>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>L_ESC</name></expr>:</case> <block>{<block_content>  <comment type="block">/* escaped sequences not in the format class[*+?-]? */</comment>
        <switch>switch <condition>(<expr><operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
          <case>case <expr><literal type="char">'b'</literal></expr>:</case> <block>{<block_content>  <comment type="block">/* balanced string? */</comment>
            <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>matchbalance</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <goto>goto <name>init</name>;</goto>  <comment type="block">/* return match(ms, s, p + 4); */</comment>
            </block_content>}</block></if></if_stmt>  <comment type="block">/* else fail (s == NULL) */</comment>
            <break>break;</break>
          </block_content>}</block>
          <case>case <expr><literal type="char">'f'</literal></expr>:</case> <block>{<block_content>  <comment type="block">/* frontier? */</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name>previous</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'['</literal></expr>)</condition><block type="pseudo"><block_content>
              <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><literal type="string">"missing '[' after '%%f' in pattern"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>ep</name> <operator>=</operator> <call><name>classend</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* points to what is next */</comment>
            <expr_stmt><expr><name>previous</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>s</name> <operator>==</operator> <name><name>ms</name><operator>-&gt;</operator><name>src_init</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'\0'</literal></expr> </then><else>: <expr><operator>*</operator><operator>(</operator><name>s</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>matchbracketclass</name><argument_list>(<argument><expr><call><name>uchar</name><argument_list>(<argument><expr><name>previous</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ep</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
               <call><name>matchbracketclass</name><argument_list>(<argument><expr><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ep</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>p</name> <operator>=</operator> <name>ep</name></expr>;</expr_stmt> <goto>goto <name>init</name>;</goto>  <comment type="block">/* return match(ms, s, ep); */</comment>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>  <comment type="block">/* match failed */</comment>
            <break>break;</break>
          </block_content>}</block>
          <case>case <expr><literal type="char">'0'</literal></expr>:</case> <case>case <expr><literal type="char">'1'</literal></expr>:</case> <case>case <expr><literal type="char">'2'</literal></expr>:</case> <case>case <expr><literal type="char">'3'</literal></expr>:</case>
          <case>case <expr><literal type="char">'4'</literal></expr>:</case> <case>case <expr><literal type="char">'5'</literal></expr>:</case> <case>case <expr><literal type="char">'6'</literal></expr>:</case> <case>case <expr><literal type="char">'7'</literal></expr>:</case>
          <case>case <expr><literal type="char">'8'</literal></expr>:</case> <case>case <expr><literal type="char">'9'</literal></expr>:</case> <block>{<block_content>  <comment type="block">/* capture results (%0-%9)? */</comment>
            <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>match_capture</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <goto>goto <name>init</name>;</goto>  <comment type="block">/* return match(ms, s, p + 2) */</comment>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
          </block_content>}</block>
          <default>default:</default> <goto>goto <name>dflt</name>;</goto>
        </block_content>}</block></switch>
        <break>break;</break>
      </block_content>}</block>
      <default>default:</default> <label><name>dflt</name>:</label> <block>{<block_content>  <comment type="block">/* pattern class plus optional suffix */</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><call><name>classend</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* points to optional suffix */</comment>
        <comment type="block">/* does not match at least once? */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>singlematch</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ep</name> <operator>==</operator> <literal type="char">'*'</literal> <operator>||</operator> <operator>*</operator><name>ep</name> <operator>==</operator> <literal type="char">'?'</literal> <operator>||</operator> <operator>*</operator><name>ep</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* accept empty? */</comment>
            <expr_stmt><expr><name>p</name> <operator>=</operator> <name>ep</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> <goto>goto <name>init</name>;</goto>  <comment type="block">/* return match(ms, s, ep + 1); */</comment>
          </block_content>}</block></if>
          <else>else<block type="pseudo"><block_content>  <comment type="block">/* '+' or no suffix */</comment>
            <expr_stmt><expr><name>s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>  <comment type="block">/* fail */</comment>
        </block_content>}</block></if>
        <else>else <block>{<block_content>  <comment type="block">/* matched once */</comment>
          <switch>switch <condition>(<expr><operator>*</operator><name>ep</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* handle optional suffix */</comment>
            <case>case <expr><literal type="char">'?'</literal></expr>:</case> <block>{<block_content>  <comment type="block">/* optional */</comment>
              <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
              <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>match</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ep</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>s</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt></block_content></block></if>
              <else>else <block>{<block_content>
                <expr_stmt><expr><name>p</name> <operator>=</operator> <name>ep</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> <goto>goto <name>init</name>;</goto>  <comment type="block">/* else return match(ms, s, ep + 1); */</comment>
              </block_content>}</block></else></if_stmt>
              <break>break;</break>
            </block_content>}</block>
            <case>case <expr><literal type="char">'+'</literal></expr>:</case>  <comment type="block">/* 1 or more repetitions */</comment>
              <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>  <comment type="block">/* 1 match already done */</comment>
              <comment type="block">/* FALLTHROUGH */</comment>
            <case>case <expr><literal type="char">'*'</literal></expr>:</case>  <comment type="block">/* 0 or more repetitions */</comment>
              <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>max_expand</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            <case>case <expr><literal type="char">'-'</literal></expr>:</case>  <comment type="block">/* 0 or more repetitions (minimum) */</comment>
              <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>min_expand</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            <default>default:</default>  <comment type="block">/* no suffix */</comment>
              <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>p</name> <operator>=</operator> <name>ep</name></expr>;</expr_stmt> <goto>goto <name>init</name>;</goto>  <comment type="block">/* return match(ms, s + 1, ep); */</comment>
          </block_content>}</block></switch>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
      </block_content>}</block>
    </block_content>}</block></switch>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>matchdepth</name></name><operator>++</operator></expr>;</expr_stmt>
  <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lmemfind</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>l1</name></decl></parameter>,
                               <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>l2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>l2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>s1</name></expr>;</return></block_content></block></if>  <comment type="block">/* empty strings are everywhere */</comment>
  <if type="elseif">else if <condition>(<expr><name>l2</name> <operator>&gt;</operator> <name>l1</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>  <comment type="block">/* avoids a negative 'l1' */</comment>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>init</name></decl>;</decl_stmt>  <comment type="block">/* to search for a '*s2' inside 's1' */</comment>
    <expr_stmt><expr><name>l2</name><operator>--</operator></expr>;</expr_stmt>  <comment type="block">/* 1st char will be checked by 'memchr' */</comment>
    <expr_stmt><expr><name>l1</name> <operator>=</operator> <name>l1</name><operator>-</operator><name>l2</name></expr>;</expr_stmt>  <comment type="block">/* 's2' cannot be found after that */</comment>
    <while>while <condition>(<expr><name>l1</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>init</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>memchr</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><operator>*</operator><name>s2</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>init</name><operator>++</operator></expr>;</expr_stmt>   <comment type="block">/* 1st char is already checked */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>init</name></expr></argument>, <argument><expr><name>s2</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>l2</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>init</name><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
      <else>else <block>{<block_content>  <comment type="block">/* correct 'l1' and 's1' to try again */</comment>
        <expr_stmt><expr><name>l1</name> <operator>-=</operator> <name>init</name><operator>-</operator><name>s1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>s1</name> <operator>=</operator> <name>init</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>NULL</name></expr>;</return>  <comment type="block">/* not found */</comment>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** get information about the i-th capture. If there are no captures
** and 'i==0', return information about the whole match, which
** is the range 's'..'e'. If the capture is a string, return
** its length and put its address in '*cap'. If it is an integer
** (a position), push it on the stack and return CAP_POSITION.
*/</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type> <name>get_onecapture</name> <parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>ms</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><literal type="string">"invalid capture index %%%d"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>cap</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
    <return>return <expr><name>e</name> <operator>-</operator> <name>s</name></expr>;</return>
  </block_content>}</block></if>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>capl</name> <init>= <expr><name><name>ms</name><operator>-&gt;</operator><name>capture</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>cap</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>capture</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>init</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>capl</name> <operator>==</operator> <name>CAP_UNFINISHED</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><literal type="string">"unfinished capture"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>capl</name> <operator>==</operator> <name>CAP_POSITION</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>capture</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>init</name> <operator>-</operator> <name><name>ms</name><operator>-&gt;</operator><name>src_init</name></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>capl</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Push the i-th capture on the stack.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>push_onecapture</name> <parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
                                                    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cap</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>l</name> <init>= <expr><call><name>get_onecapture</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>l</name> <operator>!=</operator> <name>CAP_POSITION</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>lua_pushlstring</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>cap</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <comment type="block">/* else position was already pushed */</comment>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>push_captures</name> <parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nlevels</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>s</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name><name>ms</name><operator>-&gt;</operator><name>level</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaL_checkstack</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>nlevels</name></expr></argument>, <argument><expr><literal type="string">"too many captures"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nlevels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>push_onecapture</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  <return>return <expr><name>nlevels</name></expr>;</return>  <comment type="block">/* number of strings pushed */</comment>
</block_content>}</block></function>


<comment type="block">/* check whether pattern has no special characters */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>nospecials</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>upto</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <do>do <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strpbrk</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>upto</name></expr></argument>, <argument><expr><name>SPECIALS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* pattern has a special character */</comment>
    <expr_stmt><expr><name>upto</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>upto</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>  <comment type="block">/* may have more after \0 */</comment>
  </block_content>}</block> while <condition>(<expr><name>upto</name> <operator>&lt;=</operator> <name>l</name></expr>)</condition>;</do>
  <return>return <expr><literal type="number">1</literal></expr>;</return>  <comment type="block">/* no special chars found */</comment>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>prepstate</name> <parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ls</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>lp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name> <operator>=</operator> <name>L</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>matchdepth</name></name> <operator>=</operator> <name>MAXCCALLS</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>src_init</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>src_end</name></name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>ls</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>p_end</name></name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>lp</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>reprepstate</name> <parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>matchdepth</name></name> <operator>==</operator> <name>MAXCCALLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>str_find_aux</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>find</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>ls</name></decl>, <decl><type ref="prev"/><name>lp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>luaL_checklstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ls</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>luaL_checklstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>lp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>init</name> <init>= <expr><call><name>posrelatI</name><argument_list>(<argument><expr><call><name>luaL_optinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ls</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>init</name> <operator>&gt;</operator> <name>ls</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* start after string's end? */</comment>
    <expr_stmt><expr><call><name>luaL_pushfail</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* cannot find anything */</comment>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* explicit request or no special characters? */</comment>
  <if_stmt><if>if <condition>(<expr><name>find</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>lua_toboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>nospecials</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>lp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <comment type="block">/* do a plain search */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name> <init>= <expr><call><name>lmemfind</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>init</name></expr></argument>, <argument><expr><name>ls</name> <operator>-</operator> <name>init</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>s2</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>(</operator><name>s2</name> <operator>-</operator> <name>s</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>(</operator><name>s2</name> <operator>-</operator> <name>s</name><operator>)</operator> <operator>+</operator> <name>lp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">2</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>MatchState</name></type> <name>ms</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name> <init>= <expr><name>s</name> <operator>+</operator> <name>init</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>anchor</name> <init>= <expr><operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'^'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>anchor</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>lp</name><operator>--</operator></expr>;</expr_stmt>  <comment type="block">/* skip anchor character */</comment>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>prepstate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>ls</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <do>do <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>reprepstate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name><operator>=</operator><call><name>match</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>find</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>(</operator><name>s1</name> <operator>-</operator> <name>s</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* start */</comment>
          <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>res</name> <operator>-</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* end */</comment>
          <return>return <expr><call><name>push_captures</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</return>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
          <return>return <expr><call><name>push_captures</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block> while <condition>(<expr><name>s1</name><operator>++</operator> <operator>&lt;</operator> <name><name>ms</name><operator>.</operator><name>src_end</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>anchor</name></expr>)</condition>;</do>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>luaL_pushfail</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* not found */</comment>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>str_find</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>str_find_aux</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>str_match</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>str_find_aux</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* state for 'gmatch' */</comment>
<typedef>typedef <type><struct>struct <name>GMatchState</name> <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>  <comment type="block">/* current position */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>  <comment type="block">/* pattern */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lastmatch</name></decl>;</decl_stmt>  <comment type="block">/* end of last match */</comment>
  <decl_stmt><decl><type><name>MatchState</name></type> <name>ms</name></decl>;</decl_stmt>  <comment type="block">/* match state */</comment>
}</block></struct></type> <name>GMatchState</name>;</typedef>


<function><type><specifier>static</specifier> <name>int</name></type> <name>gmatch_aux</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>GMatchState</name> <modifier>*</modifier></type><name>gm</name> <init>= <expr><operator>(</operator><name>GMatchState</name> <operator>*</operator><operator>)</operator><call><name>lua_touserdata</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>lua_upvalueindex</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>gm</name><operator>-&gt;</operator><name>ms</name><operator>.</operator><name>L</name></name> <operator>=</operator> <name>L</name></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>src</name> <operator>=</operator> <name><name>gm</name><operator>-&gt;</operator><name>src</name></name></expr>;</init> <condition><expr><name>src</name> <operator>&lt;=</operator> <name><name>gm</name><operator>-&gt;</operator><name>ms</name><operator>.</operator><name>src_end</name></name></expr>;</condition> <incr><expr><name>src</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>reprepstate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gm</name><operator>-&gt;</operator><name>ms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name>match</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gm</name><operator>-&gt;</operator><name>ms</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>gm</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>e</name> <operator>!=</operator> <name><name>gm</name><operator>-&gt;</operator><name>lastmatch</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>gm</name><operator>-&gt;</operator><name>src</name></name> <operator>=</operator> <name><name>gm</name><operator>-&gt;</operator><name>lastmatch</name></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
      <return>return <expr><call><name>push_captures</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gm</name><operator>-&gt;</operator><name>ms</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>  <comment type="block">/* not found */</comment>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>gmatch</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>ls</name></decl>, <decl><type ref="prev"/><name>lp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>luaL_checklstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ls</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>luaL_checklstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>lp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>init</name> <init>= <expr><call><name>posrelatI</name><argument_list>(<argument><expr><call><name>luaL_optinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ls</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GMatchState</name> <modifier>*</modifier></type><name>gm</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_settop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* keep strings on closure to avoid being collected */</comment>
  <expr_stmt><expr><name>gm</name> <operator>=</operator> <operator>(</operator><name>GMatchState</name> <operator>*</operator><operator>)</operator><call><name>lua_newuserdatauv</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GMatchState</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>init</name> <operator>&gt;</operator> <name>ls</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* start after string's end? */</comment>
    <expr_stmt><expr><name>init</name> <operator>=</operator> <name>ls</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* avoid overflows in 's + init' */</comment>
  <expr_stmt><expr><call><name>prepstate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gm</name><operator>-&gt;</operator><name>ms</name></name></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>ls</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>gm</name><operator>-&gt;</operator><name>src</name></name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>init</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>gm</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>gm</name><operator>-&gt;</operator><name>lastmatch</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_pushcclosure</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>gmatch_aux</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>add_s</name> <parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name>luaL_Buffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
                                                   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name> <init>= <expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>news</name> <init>= <expr><call><name>lua_tolstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>memchr</name><argument_list>(<argument><expr><name>news</name></expr></argument>, <argument><expr><name>L_ESC</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>luaL_addlstring</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>news</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>news</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>  <comment type="block">/* skip ESC */</comment>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>L_ESC</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* '%%' */</comment>
      <expr_stmt><expr><call><name>luaL_addchar</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* '%0' */</comment>
        <expr_stmt><expr><call><name>luaL_addlstring</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name> <operator>-</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* '%n' */</comment>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cap</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>resl</name> <init>= <expr><call><name>get_onecapture</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name> <operator>-</operator> <literal type="char">'1'</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>resl</name> <operator>==</operator> <name>CAP_POSITION</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>luaL_addvalue</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* add position to accumulated result */</comment>
      <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>luaL_addlstring</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>cap</name></expr></argument>, <argument><expr><name>resl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"invalid use of '%c' in replacement string"</literal></expr></argument>, <argument><expr><name>L_ESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><name>l</name> <operator>-=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>news</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>news</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>luaL_addlstring</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>news</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Add the replacement value to the string buffer 'b'.
** Return true if the original string was changed. (Function calls and
** table indexing resulting in nil or false do not change the subject.)
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>add_value</name> <parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name>luaL_Buffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
                                      <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name> <init>= <expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name>tr</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>LUA_TFUNCTION</name></expr>:</case> <block>{<block_content>  <comment type="block">/* call the function */</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* push the function */</comment>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>push_captures</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* all captures as arguments */</comment>
      <expr_stmt><expr><call><name>lua_call</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* call it */</comment>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>LUA_TTABLE</name></expr>:</case> <block>{<block_content>  <comment type="block">/* index the table */</comment>
      <expr_stmt><expr><call><name>push_onecapture</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* first capture is the index */</comment>
      <expr_stmt><expr><call><name>lua_gettable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default> <block>{<block_content>  <comment type="block">/* LUA_TNUMBER or LUA_TSTRING */</comment>
      <expr_stmt><expr><call><name>add_s</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* add value to the buffer */</comment>
      <return>return <expr><literal type="number">1</literal></expr>;</return>  <comment type="block">/* something changed */</comment>
    </block_content>}</block>
  </block_content>}</block></switch>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lua_toboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* nil or false? */</comment>
    <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* remove value */</comment>
    <expr_stmt><expr><call><name>luaL_addlstring</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name> <operator>-</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* keep original text */</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>  <comment type="block">/* no changes */</comment>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>lua_isstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"invalid replacement value (a %s)"</literal></expr></argument>,
                         <argument><expr><call><name>luaL_typename</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
  <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>luaL_addvalue</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* add result to accumulator */</comment>
    <return>return <expr><literal type="number">1</literal></expr>;</return>  <comment type="block">/* something changed */</comment>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>str_gsub</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>srcl</name></decl>, <decl><type ref="prev"/><name>lp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>luaL_checklstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>srcl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* subject */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>luaL_checklstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>lp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* pattern */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lastmatch</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>  <comment type="block">/* end of last match */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>tr</name> <init>= <expr><call><name>lua_type</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* replacement type */</comment>
  <decl_stmt><decl><type><name>lua_Integer</name></type> <name>max_s</name> <init>= <expr><call><name>luaL_optinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>srcl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* max replacements */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>anchor</name> <init>= <expr><operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'^'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lua_Integer</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* replacement count */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>changed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* change flag */</comment>
  <decl_stmt><decl><type><name>MatchState</name></type> <name>ms</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>luaL_Buffer</name></type> <name>b</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaL_argexpected</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>tr</name> <operator>==</operator> <name>LUA_TNUMBER</name> <operator>||</operator> <name>tr</name> <operator>==</operator> <name>LUA_TSTRING</name> <operator>||</operator>
                   <name>tr</name> <operator>==</operator> <name>LUA_TFUNCTION</name> <operator>||</operator> <name>tr</name> <operator>==</operator> <name>LUA_TTABLE</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>,
                      <argument><expr><literal type="string">"string/function/table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaL_buffinit</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>anchor</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>lp</name><operator>--</operator></expr>;</expr_stmt>  <comment type="block">/* skip anchor character */</comment>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>prepstate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcl</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>max_s</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>reprepstate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* (re)prepare state for new match */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name>match</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>e</name> <operator>!=</operator> <name>lastmatch</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* match? */</comment>
      <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>changed</name> <operator>=</operator> <call><name>add_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>changed</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>src</name> <operator>=</operator> <name>lastmatch</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>src</name> <operator>&lt;</operator> <name><name>ms</name><operator>.</operator><name>src_end</name></name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* otherwise, skip one character */</comment>
      <expr_stmt><expr><call><name>luaL_addchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>*</operator><name>src</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content> <break>break;</break></block_content></block></else></if_stmt>  <comment type="block">/* end of subject */</comment>
    <if_stmt><if>if <condition>(<expr><name>anchor</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>changed</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* no changes? */</comment>
    <expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* return original string */</comment>
  <else>else <block>{<block_content>  <comment type="block">/* something changed */</comment>
    <expr_stmt><expr><call><name>luaL_addlstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>ms</name><operator>.</operator><name>src_end</name></name><operator>-</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_pushresult</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* create and return new string */</comment>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* number of substitutions */</comment>
  <return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* }====================================================== */</comment>



<comment type="block">/*
** {======================================================
** STRING FORMAT
** =======================================================
*/</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lua_number2strx</name></expr></argument>)</argument_list></call></expr></cpp:if>	<comment type="block">/* { */</comment>

<comment type="block">/*
** Hexadecimal floating-point formatter
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZELENMOD</name></cpp:macro>	<cpp:value>(sizeof(LUA_NUMBER_FRMLEN)/sizeof(char))</cpp:value></cpp:define>


<comment type="block">/*
** Number of bits that goes into the first digit. It can be any value
** between 1 and 4; the following definition tries to align the number
** to nibble boundaries by making what is left after that first digit a
** multiple of 4.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L_NBFD</name></cpp:macro>		<cpp:value>((l_floatatt(MANT_DIG) - 1)%4 + 1)</cpp:value></cpp:define>


<comment type="block">/*
** Add integer part of 'x' to buffer and return new 'x'
*/</comment>
<function><type><specifier>static</specifier> <name>lua_Number</name></type> <name>adddigit</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>lua_Number</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lua_Number</name></type> <name>dd</name> <init>= <expr><call><call><name>l_mathop</name><argument_list>(<argument><expr><name>floor</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* get integer part from 'x' */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name>dd</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>buff</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>d</name> <operator>&lt;</operator> <literal type="number">10</literal></expr> ?</condition><then> <expr><name>d</name> <operator>+</operator> <literal type="char">'0'</literal></expr> </then><else>: <expr><name>d</name> <operator>-</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="char">'a'</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>  <comment type="block">/* add to buffer */</comment>
  <return>return <expr><name>x</name> <operator>-</operator> <name>dd</name></expr>;</return>  <comment type="block">/* return what is left */</comment>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>num2straux</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>lua_Number</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="block">/* if 'inf' or 'NaN', format it like '%g' */</comment>
  <if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <name>x</name> <operator>||</operator> <name>x</name> <operator>==</operator> <operator>(</operator><name>lua_Number</name><operator>)</operator><name>HUGE_VAL</name> <operator>||</operator> <name>x</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>lua_Number</name><operator>)</operator><name>HUGE_VAL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>l_sprintf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>LUA_NUMBER_FMT</name></expr></argument>, <argument><expr><operator>(</operator><name>LUAI_UACNUMBER</name><operator>)</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* can be -0... */</comment>
    <comment type="block">/* create "0" or "-0" followed by exponent */</comment>
    <return>return <expr><call><name>l_sprintf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>LUA_NUMBER_FMT</name> <literal type="string">"x0p+0"</literal></expr></argument>, <argument><expr><operator>(</operator><name>LUAI_UACNUMBER</name><operator>)</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>lua_Number</name></type> <name>m</name> <init>= <expr><call><call><name>l_mathop</name><argument_list>(<argument><expr><name>frexp</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* 'x' fraction and exponent */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* character count */</comment>
    <if_stmt><if>if <condition>(<expr><name>m</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* is number negative? */</comment>
      <expr_stmt><expr><name><name>buff</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>  <comment type="block">/* add sign */</comment>
      <expr_stmt><expr><name>m</name> <operator>=</operator> <operator>-</operator><name>m</name></expr>;</expr_stmt>  <comment type="block">/* make it positive */</comment>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>buff</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>buff</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'x'</literal></expr>;</expr_stmt>  <comment type="block">/* add "0x" */</comment>
    <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>adddigit</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>n</name><operator>++</operator></expr></argument>, <argument><expr><name>m</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>L_NBFD</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* add first digit */</comment>
    <expr_stmt><expr><name>e</name> <operator>-=</operator> <name>L_NBFD</name></expr>;</expr_stmt>  <comment type="block">/* this digit goes before the radix point */</comment>
    <if_stmt><if>if <condition>(<expr><name>m</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* more digits? */</comment>
      <expr_stmt><expr><name><name>buff</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>lua_getlocaledecpoint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* add radix point */</comment>
      <do>do <block>{<block_content>  <comment type="block">/* add as many digits as needed */</comment>
        <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>adddigit</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>n</name><operator>++</operator></expr></argument>, <argument><expr><name>m</name> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> while <condition>(<expr><name>m</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>l_sprintf</name><argument_list>(<argument><expr><name>buff</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>n</name></expr></argument>, <argument><expr><literal type="string">"p%+d"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* add exponent */</comment>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>n</name> <operator>&lt;</operator> <name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>n</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_number2strx</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>lua_Number</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>num2straux</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>fmt</name><index>[<expr><name>SIZELENMOD</name></expr>]</index></name> <operator>==</operator> <literal type="char">'A'</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>buff</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>toupper</name><argument_list>(<argument><expr><call><name>uchar</name><argument_list>(<argument><expr><name><name>buff</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>fmt</name><index>[<expr><name>SIZELENMOD</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'a'</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"modifiers for format '%%a'/'%%A' not implemented"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>				<comment type="block">/* } */</comment>


<comment type="block">/*
** Maximum size for items formatted with '%f'. This size is produced
** by format('%.99f', -maxfloat), and is equal to 99 + 3 ('-', '.',
** and '\0') + number of decimal digits to represent maxfloat (which
** is maximum exponent + 1). (99+3+1, adding some extra, 110)
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ITEMF</name></cpp:macro>	<cpp:value>(110 + l_floatatt(MAX_10_EXP))</cpp:value></cpp:define>


<comment type="block">/*
** All formats except '%f' do not need that large limit.  The other
** float formats use exponents, so that they fit in the 99 limit for
** significant digits; 's' for large strings and 'q' add items directly
** to the buffer; all integer formats also fit in the 99 limit.  The
** worst case are floats: they may need 99 significant digits, plus
** '0x', '-', '.', 'e+XXXX', and '\0'. Adding some extra, 120.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ITEM</name></cpp:macro>	<cpp:value>120</cpp:value></cpp:define>


<comment type="block">/* valid flags in a format specification */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>L_FMTFLAGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L_FMTFLAGS</name></cpp:macro>	<cpp:value>"-+ #0"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
** maximum size of each format specification (such as "%-099.99d")
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_FORMAT</name></cpp:macro>	<cpp:value>32</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>void</name></type> <name>addquoted</name> <parameter_list>(<parameter><decl><type><name>luaL_Buffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>luaL_addchar</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>len</name><operator>--</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>luaL_addchar</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>luaL_addchar</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>iscntrl</name><argument_list>(<argument><expr><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>s</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>l_sprintf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"\\%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>l_sprintf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"\\%03d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
      <expr_stmt><expr><call><name>luaL_addstring</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>luaL_addchar</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>luaL_addchar</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Serialize a floating-point number in such a way that it can be
** scanned back by Lua. Use hexadecimal format for "common" numbers
** (to preserve precision); inf, -inf, and NaN are handled separately.
** (NaN cannot be expressed as a numeral, so we write '(0/0)' for it.)
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>quotefloat</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>lua_Number</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>  <comment type="block">/* for the fixed representations */</comment>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <operator>(</operator><name>lua_Number</name><operator>)</operator><name>HUGE_VAL</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* inf? */</comment>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"1e9999"</literal></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>n</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>lua_Number</name><operator>)</operator><name>HUGE_VAL</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* -inf? */</comment>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"-1e9999"</literal></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>n</name> <operator>!=</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* NaN? */</comment>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"(0/0)"</literal></expr>;</expr_stmt></block_content></block></if>
  <else>else <block>{<block_content>  <comment type="block">/* format number as hexadecimal */</comment>
    <decl_stmt><decl><type><name>int</name></type>  <name>nb</name> <init>= <expr><call><name>lua_number2strx</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>MAX_ITEM</name></expr></argument>,
                                 <argument><expr><literal type="string">"%"</literal> <name>LUA_NUMBER_FRMLEN</name> <literal type="string">"a"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="block">/* ensures that 'buff' string uses a dot as the radix character */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>memchr</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>, <argument><expr><name>nb</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* no dot? */</comment>
      <decl_stmt><decl><type><name>char</name></type> <name>point</name> <init>= <expr><call><name>lua_getlocaledecpoint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* try locale point */</comment>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ppoint</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>memchr</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>point</name></expr></argument>, <argument><expr><name>nb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>ppoint</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>ppoint</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* change it to a dot */</comment>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>nb</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* for the fixed representations */</comment>
  <return>return <expr><call><name>l_sprintf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>MAX_ITEM</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>addliteral</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>luaL_Buffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><call><name>lua_type</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>LUA_TSTRING</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>lua_tolstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>addquoted</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>LUA_TNUMBER</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buff</name> <init>= <expr><call><name>luaL_prepbuffsize</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>MAX_ITEM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>nb</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lua_isinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* float? */</comment>
        <expr_stmt><expr><name>nb</name> <operator>=</operator> <call><name>quotefloat</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><call><name>lua_tonumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else <block>{<block_content>  <comment type="block">/* integers */</comment>
        <decl_stmt><decl><type><name>lua_Integer</name></type> <name>n</name> <init>= <expr><call><name>lua_tointeger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>n</name> <operator>==</operator> <name>LUA_MININTEGER</name><operator>)</operator></expr>  <comment type="block">/* corner case? */</comment>
                           ?</condition><then> <expr><literal type="string">"0x%"</literal> <name>LUA_INTEGER_FRMLEN</name> <literal type="string">"x"</literal></expr>  <comment type="block">/* use hex */</comment>
                           </then><else>: <expr><name>LUA_INTEGER_FMT</name></expr></else></ternary></expr></init></decl>;</decl_stmt>  <comment type="block">/* else use default format */</comment>
        <expr_stmt><expr><name>nb</name> <operator>=</operator> <call><name>l_sprintf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>MAX_ITEM</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><operator>(</operator><name>LUAI_UACINT</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>luaL_addsize</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>nb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>LUA_TNIL</name></expr>:</case> <case>case <expr><name>LUA_TBOOLEAN</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>luaL_tolstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>luaL_addvalue</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default> <block>{<block_content>
      <expr_stmt><expr><call><name>luaL_argerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"value has no literal form"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
  </block_content>}</block></switch>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>scanformat</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>strfrmt</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>form</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>strfrmt</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>L_FMTFLAGS</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>  <comment type="block">/* skip flags */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>strfrmt</name><operator>)</operator> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>L_FMTFLAGS</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"invalid format (repeated flags)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* skip width */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* (2 digits at most) */</comment>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* skip precision */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* (2 digits at most) */</comment>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"invalid format (width or precision too long)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>form</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'%'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>form</name></expr></argument>, <argument><expr><name>strfrmt</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>strfrmt</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>form</name> <operator>+=</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>strfrmt</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>form</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** add length modifier into formats
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>addlenmod</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>form</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lenmod</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>l</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>lm</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>lenmod</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name>spec</name> <init>= <expr><name><name>form</name><index>[<expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>form</name> <operator>+</operator> <name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lenmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>form</name><index>[<expr><name>l</name> <operator>+</operator> <name>lm</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>spec</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>form</name><index>[<expr><name>l</name> <operator>+</operator> <name>lm</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>str_format</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>top</name> <init>= <expr><call><name>lua_gettop</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>arg</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sfl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>strfrmt</name> <init>= <expr><call><name>luaL_checklstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sfl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>strfrmt_end</name> <init>= <expr><name>strfrmt</name><operator>+</operator><name>sfl</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>luaL_Buffer</name></type> <name>b</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaL_buffinit</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>strfrmt</name> <operator>&lt;</operator> <name>strfrmt_end</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>strfrmt</name> <operator>!=</operator> <name>L_ESC</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>luaL_addchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>*</operator><name>strfrmt</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>*</operator><operator>++</operator><name>strfrmt</name> <operator>==</operator> <name>L_ESC</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>luaL_addchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>*</operator><name>strfrmt</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* %% */</comment>
    <else>else <block>{<block_content> <comment type="block">/* format item */</comment>
      <decl_stmt><decl><type><name>char</name></type> <name><name>form</name><index>[<expr><name>MAX_FORMAT</name></expr>]</index></name></decl>;</decl_stmt>  <comment type="block">/* to store the format ('%...') */</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>maxitem</name> <init>= <expr><name>MAX_ITEM</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buff</name> <init>= <expr><call><name>luaL_prepbuffsize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>maxitem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* to put formatted item */</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>nb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* number of bytes in added item */</comment>
      <if_stmt><if>if <condition>(<expr><operator>++</operator><name>arg</name> <operator>&gt;</operator> <name>top</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>luaL_argerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"no value"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>strfrmt</name> <operator>=</operator> <call><name>scanformat</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>strfrmt</name></expr></argument>, <argument><expr><name>form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <switch>switch <condition>(<expr><operator>*</operator><name>strfrmt</name><operator>++</operator></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="char">'c'</literal></expr>:</case> <block>{<block_content>
          <expr_stmt><expr><name>nb</name> <operator>=</operator> <call><name>l_sprintf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>maxitem</name></expr></argument>, <argument><expr><name>form</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>luaL_checkinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
        <case>case <expr><literal type="char">'d'</literal></expr>:</case> <case>case <expr><literal type="char">'i'</literal></expr>:</case>
        <case>case <expr><literal type="char">'o'</literal></expr>:</case> <case>case <expr><literal type="char">'u'</literal></expr>:</case> <case>case <expr><literal type="char">'x'</literal></expr>:</case> <case>case <expr><literal type="char">'X'</literal></expr>:</case> <block>{<block_content>
          <decl_stmt><decl><type><name>lua_Integer</name></type> <name>n</name> <init>= <expr><call><name>luaL_checkinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>addlenmod</name><argument_list>(<argument><expr><name>form</name></expr></argument>, <argument><expr><name>LUA_INTEGER_FRMLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>nb</name> <operator>=</operator> <call><name>l_sprintf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>maxitem</name></expr></argument>, <argument><expr><name>form</name></expr></argument>, <argument><expr><operator>(</operator><name>LUAI_UACINT</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
        <case>case <expr><literal type="char">'a'</literal></expr>:</case> <case>case <expr><literal type="char">'A'</literal></expr>:</case>
          <expr_stmt><expr><call><name>addlenmod</name><argument_list>(<argument><expr><name>form</name></expr></argument>, <argument><expr><name>LUA_NUMBER_FRMLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>nb</name> <operator>=</operator> <call><name>lua_number2strx</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>maxitem</name></expr></argument>, <argument><expr><name>form</name></expr></argument>,
                                  <argument><expr><call><name>luaL_checknumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="char">'f'</literal></expr>:</case>
          <expr_stmt><expr><name>maxitem</name> <operator>=</operator> <name>MAX_ITEMF</name></expr>;</expr_stmt>  <comment type="block">/* extra space for '%f' */</comment>
          <expr_stmt><expr><name>buff</name> <operator>=</operator> <call><name>luaL_prepbuffsize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>maxitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <comment type="block">/* FALLTHROUGH */</comment>
        <case>case <expr><literal type="char">'e'</literal></expr>:</case> <case>case <expr><literal type="char">'E'</literal></expr>:</case> <case>case <expr><literal type="char">'g'</literal></expr>:</case> <case>case <expr><literal type="char">'G'</literal></expr>:</case> <block>{<block_content>
          <decl_stmt><decl><type><name>lua_Number</name></type> <name>n</name> <init>= <expr><call><name>luaL_checknumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>addlenmod</name><argument_list>(<argument><expr><name>form</name></expr></argument>, <argument><expr><name>LUA_NUMBER_FRMLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>nb</name> <operator>=</operator> <call><name>l_sprintf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>maxitem</name></expr></argument>, <argument><expr><name>form</name></expr></argument>, <argument><expr><operator>(</operator><name>LUAI_UACNUMBER</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
        <case>case <expr><literal type="char">'p'</literal></expr>:</case> <block>{<block_content>
          <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>lua_topointer</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* avoid calling 'printf' with argument NULL */</comment>
            <expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"(null)"</literal></expr>;</expr_stmt>  <comment type="block">/* result */</comment>
            <expr_stmt><expr><name><name>form</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'s'</literal></expr>;</expr_stmt>  <comment type="block">/* format it as a string */</comment>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name>nb</name> <operator>=</operator> <call><name>l_sprintf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>maxitem</name></expr></argument>, <argument><expr><name>form</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
        <case>case <expr><literal type="char">'q'</literal></expr>:</case> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name><name>form</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* modifiers? */</comment>
            <return>return <expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"specifier '%%q' cannot have modifiers"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
          <expr_stmt><expr><call><name>addliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
        <case>case <expr><literal type="char">'s'</literal></expr>:</case> <block>{<block_content>
          <decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>luaL_tolstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>form</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* no modifiers? */</comment>
            <expr_stmt><expr><call><name>luaL_addvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* keep entire string */</comment>
          <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>luaL_argcheck</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>l</name> <operator>==</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"string contains zeros"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strchr</name><argument_list>(<argument><expr><name>form</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>l</name> <operator>&gt;=</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>
              <comment type="block">/* no precision and string is too long to be formatted */</comment>
              <expr_stmt><expr><call><name>luaL_addvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* keep entire string */</comment>
            </block_content>}</block></if>
            <else>else <block>{<block_content>  <comment type="block">/* format the string into 'buff' */</comment>
              <expr_stmt><expr><name>nb</name> <operator>=</operator> <call><name>l_sprintf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>maxitem</name></expr></argument>, <argument><expr><name>form</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* remove result from 'luaL_tolstring' */</comment>
            </block_content>}</block></else></if_stmt>
          </block_content>}</block></else></if_stmt>
          <break>break;</break>
        </block_content>}</block>
        <default>default:</default> <block>{<block_content>  <comment type="block">/* also treat cases 'pnLlh' */</comment>
          <return>return <expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"invalid conversion '%s' to 'format'"</literal></expr></argument>, <argument><expr><name>form</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
      </block_content>}</block></switch>
      <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>nb</name> <operator>&lt;</operator> <name>maxitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>luaL_addsize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>nb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>luaL_pushresult</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* }====================================================== */</comment>


<comment type="block">/*
** {======================================================
** PACK/UNPACK
** =======================================================
*/</comment>


<comment type="block">/* value used for padding */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LUAL_PACKPADBYTE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUAL_PACKPADBYTE</name></cpp:macro>		<cpp:value>0x00</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* maximum size for the binary representation of an integer */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXINTSIZE</name></cpp:macro>	<cpp:value>16</cpp:value></cpp:define>

<comment type="block">/* number of bits in a character */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NB</name></cpp:macro>	<cpp:value>CHAR_BIT</cpp:value></cpp:define>

<comment type="block">/* mask for one character (NB 1's) */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MC</name></cpp:macro>	<cpp:value>((1 &lt;&lt; NB) - 1)</cpp:value></cpp:define>

<comment type="block">/* size of a lua_Integer */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SZINT</name></cpp:macro>	<cpp:value>((int)sizeof(lua_Integer))</cpp:value></cpp:define>


<comment type="block">/* dummy union to get native endianness */</comment>
<union><specifier>static</specifier> <specifier>const</specifier> union <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>dummy</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name>little</name></decl>;</decl_stmt>  <comment type="block">/* true iff machine is little endian */</comment>
}</block> <decl><name>nativeendian</name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</union>


<comment type="block">/* dummy structure to get native alignment requirements */</comment>
<struct>struct <name>cD</name> <block>{
  <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
  <union>union <block>{ <decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>lua_Integer</name></type> <name>i</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>lua_Number</name></type> <name>n</name></decl>;</decl_stmt> }</block> <decl><name>u</name></decl>;</union>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXALIGN</name></cpp:macro>	<cpp:value>(offsetof(struct cD, u))</cpp:value></cpp:define>


<comment type="block">/*
** Union for serializing floats
*/</comment>
<typedef>typedef <type><union>union <name>Ftypes</name> <block>{
  <decl_stmt><decl><type><name>float</name></type> <name>f</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lua_Number</name></type> <name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><literal type="number">5</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lua_Number</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>  <comment type="block">/* enough for any float type */</comment>
}</block></union></type> <name>Ftypes</name>;</typedef>


<comment type="block">/*
** information to pack/unpack stuff
*/</comment>
<typedef>typedef <type><struct>struct <name>Header</name> <block>{
  <decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>islittle</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>maxalign</name></decl>;</decl_stmt>
}</block></struct></type> <name>Header</name>;</typedef>


<comment type="block">/*
** options for pack/unpack
*/</comment>
<typedef>typedef <type><enum>enum <name>KOption</name> <block>{
  <decl><name>Kint</name></decl>,		<comment type="block">/* signed integers */</comment>
  <decl><name>Kuint</name></decl>,	<comment type="block">/* unsigned integers */</comment>
  <decl><name>Kfloat</name></decl>,	<comment type="block">/* floating-point numbers */</comment>
  <decl><name>Kchar</name></decl>,	<comment type="block">/* fixed-length strings */</comment>
  <decl><name>Kstring</name></decl>,	<comment type="block">/* strings with prefixed length */</comment>
  <decl><name>Kzstr</name></decl>,	<comment type="block">/* zero-terminated strings */</comment>
  <decl><name>Kpadding</name></decl>,	<comment type="block">/* padding */</comment>
  <decl><name>Kpaddalign</name></decl>,	<comment type="block">/* padding for alignment */</comment>
  <decl><name>Knop</name></decl>		<comment type="block">/* no-op (configuration or spaces) */</comment>
}</block></enum></type> <name>KOption</name>;</typedef>


<comment type="block">/*
** Read an integer numeral from string 'fmt' or return 'df' if
** there is no numeral
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>digit</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="char">'0'</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>getnum</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>df</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>digit</name><argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* no number? */</comment>
    <return>return <expr><name>df</name></expr>;</return></block_content></block></if>  <comment type="block">/* return default value */</comment>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <do>do <block>{<block_content>
      <expr_stmt><expr><name>a</name> <operator>=</operator> <name>a</name><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>fmt</name><operator>)</operator><operator>++</operator><operator>)</operator> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><call><name>digit</name><argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>fmt</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>a</name> <operator>&lt;=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>MAXSIZE</name> <operator>-</operator> <literal type="number">9</literal><operator>)</operator><operator>/</operator><literal type="number">10</literal></expr>)</condition>;</do>
    <return>return <expr><name>a</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Read an integer numeral and raises an error if it is larger
** than the maximum size for integers.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>getnumlimit</name> <parameter_list>(<parameter><decl><type><name>Header</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>df</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><call><name>getnum</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>df</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&gt;</operator> <name>MAXINTSIZE</name> <operator>||</operator> <name>sz</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>luaL_error</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><literal type="string">"integral size (%d) out of limits [1,%d]"</literal></expr></argument>,
                            <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>MAXINTSIZE</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><name>sz</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Initialize Header
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>initheader</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>Header</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>L</name></name> <operator>=</operator> <name>L</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>islittle</name></name> <operator>=</operator> <name><name>nativeendian</name><operator>.</operator><name>little</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>maxalign</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Read and classify next option. 'size' is filled with option's size.
*/</comment>
<function><type><specifier>static</specifier> <name>KOption</name></type> <name>getoption</name> <parameter_list>(<parameter><decl><type><name>Header</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>opt</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>fmt</name><operator>)</operator><operator>++</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="block">/* default */</comment>
  <switch>switch <condition>(<expr><name>opt</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="char">'b'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt> <return>return <expr><name>Kint</name></expr>;</return>
    <case>case <expr><literal type="char">'B'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt> <return>return <expr><name>Kuint</name></expr>;</return>
    <case>case <expr><literal type="char">'h'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt> <return>return <expr><name>Kint</name></expr>;</return>
    <case>case <expr><literal type="char">'H'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt> <return>return <expr><name>Kuint</name></expr>;</return>
    <case>case <expr><literal type="char">'l'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt> <return>return <expr><name>Kint</name></expr>;</return>
    <case>case <expr><literal type="char">'L'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt> <return>return <expr><name>Kuint</name></expr>;</return>
    <case>case <expr><literal type="char">'j'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lua_Integer</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt> <return>return <expr><name>Kint</name></expr>;</return>
    <case>case <expr><literal type="char">'J'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lua_Integer</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt> <return>return <expr><name>Kuint</name></expr>;</return>
    <case>case <expr><literal type="char">'T'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt> <return>return <expr><name>Kuint</name></expr>;</return>
    <case>case <expr><literal type="char">'f'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt> <return>return <expr><name>Kfloat</name></expr>;</return>
    <case>case <expr><literal type="char">'d'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt> <return>return <expr><name>Kfloat</name></expr>;</return>
    <case>case <expr><literal type="char">'n'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lua_Number</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt> <return>return <expr><name>Kfloat</name></expr>;</return>
    <case>case <expr><literal type="char">'i'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <call><name>getnumlimit</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>Kint</name></expr>;</return>
    <case>case <expr><literal type="char">'I'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <call><name>getnumlimit</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>Kuint</name></expr>;</return>
    <case>case <expr><literal type="char">'s'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <call><name>getnumlimit</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>Kstring</name></expr>;</return>
    <case>case <expr><literal type="char">'c'</literal></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <call><name>getnum</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>size</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><literal type="string">"missing size for format option 'c'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <return>return <expr><name>Kchar</name></expr>;</return>
    <case>case <expr><literal type="char">'z'</literal></expr>:</case> <return>return <expr><name>Kzstr</name></expr>;</return>
    <case>case <expr><literal type="char">'x'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <return>return <expr><name>Kpadding</name></expr>;</return>
    <case>case <expr><literal type="char">'X'</literal></expr>:</case> <return>return <expr><name>Kpaddalign</name></expr>;</return>
    <case>case <expr><literal type="char">' '</literal></expr>:</case> <break>break;</break>
    <case>case <expr><literal type="char">'&lt;'</literal></expr>:</case> <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>islittle</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'&gt;'</literal></expr>:</case> <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>islittle</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'='</literal></expr>:</case> <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>islittle</name></name> <operator>=</operator> <name><name>nativeendian</name><operator>.</operator><name>little</name></name></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'!'</literal></expr>:</case> <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>maxalign</name></name> <operator>=</operator> <call><name>getnumlimit</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>MAXALIGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <default>default:</default> <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><literal type="string">"invalid format option '%c'"</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>
  <return>return <expr><name>Knop</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Read, classify, and fill other details about the next option.
** 'psize' is filled with option's size, 'notoalign' with its
** alignment requirements.
** Local variable 'size' gets the size to be aligned. (Kpadal option
** always gets its full alignment, other options are limited by
** the maximum alignment ('maxalign'). Kchar option needs no alignment
** despite its size.
*/</comment>
<function><type><specifier>static</specifier> <name>KOption</name></type> <name>getdetails</name> <parameter_list>(<parameter><decl><type><name>Header</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>totalsize</name></decl></parameter>,
                           <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>psize</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ntoalign</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>KOption</name></type> <name>opt</name> <init>= <expr><call><name>getoption</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>psize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>align</name> <init>= <expr><operator>*</operator><name>psize</name></expr></init></decl>;</decl_stmt>  <comment type="block">/* usually, alignment follows size */</comment>
  <if_stmt><if>if <condition>(<expr><name>opt</name> <operator>==</operator> <name>Kpaddalign</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* 'X' gets alignment from following option */</comment>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>fmt</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <call><name>getoption</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>align</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>Kchar</name> <operator>||</operator> <name>align</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>luaL_argerror</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"invalid next option for option 'X'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>align</name> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>||</operator> <name>opt</name> <operator>==</operator> <name>Kchar</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* need no alignment? */</comment>
    <expr_stmt><expr><operator>*</operator><name>ntoalign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
  <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>align</name> <operator>&gt;</operator> <name><name>h</name><operator>-&gt;</operator><name>maxalign</name></name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* enforce maximum alignment */</comment>
      <expr_stmt><expr><name>align</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>maxalign</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>align</name> <operator>&amp;</operator> <operator>(</operator><name>align</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* is 'align' not a power of 2? */</comment>
      <expr_stmt><expr><call><name>luaL_argerror</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"format asks for alignment not power of 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>ntoalign</name> <operator>=</operator> <operator>(</operator><name>align</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>totalsize</name> <operator>&amp;</operator> <operator>(</operator><name>align</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>align</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>opt</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Pack integer 'n' with 'size' bytes and 'islittle' endianness.
** The final 'if' handles the case when 'size' is larger than
** the size of a Lua integer, correcting the extra sign-extension
** bytes if necessary (by default they would be zeros).
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>packint</name> <parameter_list>(<parameter><decl><type><name>luaL_Buffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>lua_Unsigned</name></type> <name>n</name></decl></parameter>,
                     <parameter><decl><type><name>int</name></type> <name>islittle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>neg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buff</name> <init>= <expr><call><name>luaL_prepbuffsize</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>buff</name><index>[<expr><ternary><condition><expr><name>islittle</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <name>MC</name><operator>)</operator></expr>;</expr_stmt>  <comment type="block">/* first byte */</comment>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>&gt;&gt;=</operator> <name>NB</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>buff</name><index>[<expr><ternary><condition><expr><name>islittle</name></expr> ?</condition><then> <expr><name>i</name></expr> </then><else>: <expr><name>size</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr></else></ternary></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <name>MC</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><name>neg</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>&gt;</operator> <name>SZINT</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* negative number need sign extension? */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>SZINT</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>  <comment type="block">/* correct extra bytes */</comment>
      <expr_stmt><expr><name><name>buff</name><index>[<expr><ternary><condition><expr><name>islittle</name></expr> ?</condition><then> <expr><name>i</name></expr> </then><else>: <expr><name>size</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr></else></ternary></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>MC</name></expr>;</expr_stmt></block_content></block></for>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>luaL_addsize</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* add result to buffer */</comment>
</block_content>}</block></function>


<comment type="block">/*
** Copy 'size' bytes from 'src' to 'dest', correcting endianness if
** given 'islittle' is different from native endianness.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>copywithendian</name> <parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>volatile</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
                            <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>islittle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>islittle</name> <operator>==</operator> <name><name>nativeendian</name><operator>.</operator><name>little</name></name></expr>)</condition> <block>{<block_content>
    <while>while <condition>(<expr><name>size</name><operator>--</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>dest</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>src</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></while>
  </block_content>}</block></if>
  <else>else <block>{<block_content>
    <expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>size</name><operator>--</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>dest</name><operator>--</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>src</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></while>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>str_pack</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>luaL_Buffer</name></type> <name>b</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Header</name></type> <name>h</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* format string */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>arg</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* current argument to pack */</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>totalsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* accumulate total size of result */</comment>
  <expr_stmt><expr><call><name>initheader</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_pushnil</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* mark to separate arguments from string buffer */</comment>
  <expr_stmt><expr><call><name>luaL_buffinit</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><operator>*</operator><name>fmt</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>ntoalign</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>KOption</name></type> <name>opt</name> <init>= <expr><call><name>getdetails</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><name>totalsize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ntoalign</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>totalsize</name> <operator>+=</operator> <name>ntoalign</name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>ntoalign</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
     <expr_stmt><expr><call><name>luaL_addchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>LUAL_PACKPADBYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>  <comment type="block">/* fill alignment */</comment>
    <expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name>opt</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>Kint</name></expr>:</case> <block>{<block_content>  <comment type="block">/* signed integers */</comment>
        <decl_stmt><decl><type><name>lua_Integer</name></type> <name>n</name> <init>= <expr><call><name>luaL_checkinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name>SZINT</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* need overflow check? */</comment>
          <decl_stmt><decl><type><name>lua_Integer</name></type> <name>lim</name> <init>= <expr><operator>(</operator><name>lua_Integer</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><name>size</name> <operator>*</operator> <name>NB</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>luaL_argcheck</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><name>lim</name> <operator>&lt;=</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;</operator> <name>lim</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"integer overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>packint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>lua_Unsigned</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><name><name>h</name><operator>.</operator><name>islittle</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>(</operator><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>Kuint</name></expr>:</case> <block>{<block_content>  <comment type="block">/* unsigned integers */</comment>
        <decl_stmt><decl><type><name>lua_Integer</name></type> <name>n</name> <init>= <expr><call><name>luaL_checkinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name>SZINT</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* need overflow check? */</comment>
          <expr_stmt><expr><call><name>luaL_argcheck</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>(</operator><name>lua_Unsigned</name><operator>)</operator><name>n</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>lua_Unsigned</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>size</name> <operator>*</operator> <name>NB</name><operator>)</operator><operator>)</operator></expr></argument>,
                           <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"unsigned overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>packint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>lua_Unsigned</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><name><name>h</name><operator>.</operator><name>islittle</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>Kfloat</name></expr>:</case> <block>{<block_content>  <comment type="block">/* floating-point options */</comment>
        <decl_stmt><decl><type><specifier>volatile</specifier> <name>Ftypes</name></type> <name>u</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buff</name> <init>= <expr><call><name>luaL_prepbuffsize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>lua_Number</name></type> <name>n</name> <init>= <expr><call><name>luaL_checknumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* get argument */</comment>
        <if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>u</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>u</name><operator>.</operator><name>f</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>n</name></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* copy it into 'u' */</comment>
        <if type="elseif">else if <condition>(<expr><name>size</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>u</name><operator>.</operator><name>d</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>u</name><operator>.</operator><name>d</name></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>n</name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>u</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <comment type="block">/* move 'u' to final result, correcting endianness if needed */</comment>
        <expr_stmt><expr><call><name>copywithendian</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name><name>u</name><operator>.</operator><name>buff</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>h</name><operator>.</operator><name>islittle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>luaL_addsize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>Kchar</name></expr>:</case> <block>{<block_content>  <comment type="block">/* fixed-size string */</comment>
        <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>luaL_checklstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>luaL_argcheck</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>len</name> <operator>&lt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>size</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>,
                         <argument><expr><literal type="string">"string longer than given size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>luaL_addlstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* add string */</comment>
        <while>while <condition>(<expr><name>len</name><operator>++</operator> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>size</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* pad extra space */</comment>
          <expr_stmt><expr><call><name>luaL_addchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>LUAL_PACKPADBYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>Kstring</name></expr>:</case> <block>{<block_content>  <comment type="block">/* strings with length count */</comment>
        <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>luaL_checklstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>luaL_argcheck</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>size</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof> <operator>||</operator>
                         <name>len</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>size</name> <operator>*</operator> <name>NB</name><operator>)</operator><operator>)</operator></expr></argument>,
                         <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"string length does not fit in given size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>packint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>lua_Unsigned</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name><name>h</name><operator>.</operator><name>islittle</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* pack length */</comment>
        <expr_stmt><expr><call><name>luaL_addlstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>totalsize</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>Kzstr</name></expr>:</case> <block>{<block_content>  <comment type="block">/* zero-terminated string */</comment>
        <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>luaL_checklstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>luaL_argcheck</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>len</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"string contains zeros"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>luaL_addlstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>luaL_addchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* add zero at the end */</comment>
        <expr_stmt><expr><name>totalsize</name> <operator>+=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>Kpadding</name></expr>:</case> <expr_stmt><expr><call><name>luaL_addchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>LUAL_PACKPADBYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* FALLTHROUGH */</comment>
      <case>case <expr><name>Kpaddalign</name></expr>:</case> <case>case <expr><name>Knop</name></expr>:</case>
        <expr_stmt><expr><name>arg</name><operator>--</operator></expr>;</expr_stmt>  <comment type="block">/* undo increment */</comment>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>luaL_pushresult</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>str_packsize</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Header</name></type> <name>h</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* format string */</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>totalsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* accumulate total size of result */</comment>
  <expr_stmt><expr><call><name>initheader</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><operator>*</operator><name>fmt</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>ntoalign</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>KOption</name></type> <name>opt</name> <init>= <expr><call><name>getdetails</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><name>totalsize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ntoalign</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>luaL_argcheck</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>opt</name> <operator>!=</operator> <name>Kstring</name> <operator>&amp;&amp;</operator> <name>opt</name> <operator>!=</operator> <name>Kzstr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
                     <argument><expr><literal type="string">"variable-length format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>size</name> <operator>+=</operator> <name>ntoalign</name></expr>;</expr_stmt>  <comment type="block">/* total space used by option */</comment>
    <expr_stmt><expr><call><name>luaL_argcheck</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>totalsize</name> <operator>&lt;=</operator> <name>MAXSIZE</name> <operator>-</operator> <name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
                     <argument><expr><literal type="string">"format result too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>totalsize</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>(</operator><name>lua_Integer</name><operator>)</operator><name>totalsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Unpack an integer with 'size' bytes and 'islittle' endianness.
** If size is smaller than the size of a Lua integer and integer
** is signed, must do sign extension (propagating the sign to the
** higher bits); if size is larger than the size of a Lua integer,
** it must check the unread bytes to see whether they do not cause an
** overflow.
*/</comment>
<function><type><specifier>static</specifier> <name>lua_Integer</name></type> <name>unpackint</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,
                              <parameter><decl><type><name>int</name></type> <name>islittle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>issigned</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lua_Unsigned</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>limit</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>size</name>  <operator>&lt;=</operator> <name>SZINT</name><operator>)</operator></expr> ?</condition><then> <expr><name>size</name></expr> </then><else>: <expr><name>SZINT</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>limit</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>res</name> <operator>&lt;&lt;=</operator> <name>NB</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name> <operator>|=</operator> <operator>(</operator><name>lua_Unsigned</name><operator>)</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>str</name><index>[<expr><ternary><condition><expr><name>islittle</name></expr> ?</condition><then> <expr><name>i</name></expr> </then><else>: <expr><name>size</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr></else></ternary></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name>SZINT</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* real size smaller than lua_Integer? */</comment>
    <if_stmt><if>if <condition>(<expr><name>issigned</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* needs sign extension? */</comment>
      <decl_stmt><decl><type><name>lua_Unsigned</name></type> <name>mask</name> <init>= <expr><operator>(</operator><name>lua_Unsigned</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>size</name><operator>*</operator><name>NB</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>res</name> <operator>^</operator> <name>mask</name><operator>)</operator> <operator>-</operator> <name>mask</name><operator>)</operator></expr>;</expr_stmt>  <comment type="block">/* do sign extension */</comment>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>SZINT</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* must check unread bytes */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><ternary><condition><expr><operator>(</operator><operator>!</operator><name>issigned</name> <operator>||</operator> <operator>(</operator><name>lua_Integer</name><operator>)</operator><name>res</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>MC</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>limit</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>str</name><index>[<expr><ternary><condition><expr><name>islittle</name></expr> ?</condition><then> <expr><name>i</name></expr> </then><else>: <expr><name>size</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr></else></ternary></expr>]</index></name> <operator>!=</operator> <name>mask</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"%d-byte integer does not fit into Lua Integer"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>(</operator><name>lua_Integer</name><operator>)</operator><name>res</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>str_unpack</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Header</name></type> <name>h</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>ld</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>luaL_checklstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ld</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><call><name>posrelatI</name><argument_list>(<argument><expr><call><name>luaL_optinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ld</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* number of results */</comment>
  <expr_stmt><expr><call><name>luaL_argcheck</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>pos</name> <operator>&lt;=</operator> <name>ld</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"initial position out of string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>initheader</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><operator>*</operator><name>fmt</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>ntoalign</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>KOption</name></type> <name>opt</name> <init>= <expr><call><name>getdetails</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ntoalign</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>luaL_argcheck</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>ntoalign</name> <operator>+</operator> <name>size</name> <operator>&lt;=</operator> <name>ld</name> <operator>-</operator> <name>pos</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
                    <argument><expr><literal type="string">"data string too short"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>ntoalign</name></expr>;</expr_stmt>  <comment type="block">/* skip alignment */</comment>
    <comment type="block">/* stack space for item + next position */</comment>
    <expr_stmt><expr><call><name>luaL_checkstack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"too many results"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name>opt</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>Kint</name></expr>:</case>
      <case>case <expr><name>Kuint</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>lua_Integer</name></type> <name>res</name> <init>= <expr><call><name>unpackint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name><name>h</name><operator>.</operator><name>islittle</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>,
                                       <argument><expr><operator>(</operator><name>opt</name> <operator>==</operator> <name>Kint</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>Kfloat</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><specifier>volatile</specifier> <name>Ftypes</name></type> <name>u</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>lua_Number</name></type> <name>num</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>copywithendian</name><argument_list>(<argument><expr><name><name>u</name><operator>.</operator><name>buff</name></name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>h</name><operator>.</operator><name>islittle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>u</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>num</name> <operator>=</operator> <operator>(</operator><name>lua_Number</name><operator>)</operator><name><name>u</name><operator>.</operator><name>f</name></name></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>size</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>u</name><operator>.</operator><name>d</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>num</name> <operator>=</operator> <operator>(</operator><name>lua_Number</name><operator>)</operator><name><name>u</name><operator>.</operator><name>d</name></name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>u</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>Kchar</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>lua_pushlstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>Kstring</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>unpackint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name><name>h</name><operator>.</operator><name>islittle</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>luaL_argcheck</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>len</name> <operator>&lt;=</operator> <name>ld</name> <operator>-</operator> <name>pos</name> <operator>-</operator> <name>size</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"data string too short"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushlstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>pos</name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>  <comment type="block">/* skip string */</comment>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>Kzstr</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>luaL_argcheck</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>pos</name> <operator>+</operator> <name>len</name> <operator>&lt;</operator> <name>ld</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
                         <argument><expr><literal type="string">"unfinished string for format 'z'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushlstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>  <comment type="block">/* skip string plus final '\0' */</comment>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>Kpaddalign</name></expr>:</case> <case>case <expr><name>Kpadding</name></expr>:</case> <case>case <expr><name>Knop</name></expr>:</case>
        <expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>  <comment type="block">/* undo increment */</comment>
        <break>break;</break>
    </block_content>}</block></switch>
    <expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* next position */</comment>
  <return>return <expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* }====================================================== */</comment>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>luaL_Reg</name></type> <name><name>strlib</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{<expr><literal type="string">"byte"</literal></expr>, <expr><name>str_byte</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"char"</literal></expr>, <expr><name>str_char</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"dump"</literal></expr>, <expr><name>str_dump</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"find"</literal></expr>, <expr><name>str_find</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"format"</literal></expr>, <expr><name>str_format</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"gmatch"</literal></expr>, <expr><name>gmatch</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"gsub"</literal></expr>, <expr><name>str_gsub</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"len"</literal></expr>, <expr><name>str_len</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"lower"</literal></expr>, <expr><name>str_lower</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"match"</literal></expr>, <expr><name>str_match</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"rep"</literal></expr>, <expr><name>str_rep</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"reverse"</literal></expr>, <expr><name>str_reverse</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"sub"</literal></expr>, <expr><name>str_sub</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"upper"</literal></expr>, <expr><name>str_upper</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"pack"</literal></expr>, <expr><name>str_pack</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"packsize"</literal></expr>, <expr><name>str_packsize</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"unpack"</literal></expr>, <expr><name>str_unpack</name></expr>}</block></expr>,
  <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>void</name></type> <name>createmetatable</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="block">/* table to be metatable for strings */</comment>
  <expr_stmt><expr><call><name>luaL_newlibtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>stringmetamethods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaL_setfuncs</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>stringmetamethods</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* dummy string */</comment>
  <expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* copy table */</comment>
  <expr_stmt><expr><call><name>lua_setmetatable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* set table as metatable for strings */</comment>
  <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* pop dummy string */</comment>
  <expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* get string library */</comment>
  <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"__index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* metatable.__index = string */</comment>
  <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* pop metatable */</comment>
</block_content>}</block></function>


<comment type="block">/*
** Open string library
*/</comment>
<function><type><name>LUAMOD_API</name> <name>int</name></type> <name>luaopen_string</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>luaL_newlib</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>strlib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>createmetatable</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

</unit>
