<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/syscalls/vfprintf.c"><comment type="block">/* Pi-hole: A black hole for Internet advertisements
*  (c) 2020 Pi-hole, LLC (https://pi-hole.net)
*  Network-wide ad blocking via your own hardware.
*
*  FTL Engine
*  Pi-hole syscall implementation for vfprintf
*
*  This file is copyright under the latest version of the EUPL.
*  Please see LICENSE file for your rights under this license. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../FTL.h"</cpp:file></cpp:include>
<comment type="line">//#include "syscalls.h" is implicitly done in FTL.h</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../log.h"</cpp:file></cpp:include>

<comment type="line">// itoa implementation using only static memory</comment>
<comment type="line">// taken from Kernighan and Ritchie's "The C Programming Language"</comment>
<comment type="line">// see https://clc-wiki.net/wiki/K&amp;R2_solutions:Chapter_3:Exercise_4</comment>
<comment type="line">// This implementation has its drawbacks, however, we only use it for</comment>
<comment type="line">// automated conversion of code line numbers to strings so we're not</comment>
<comment type="line">// interested in its performance outside the range of [1, 10'000]</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>itoa</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name><name>s</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sign</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// Make n positive if negative</comment>
	<if_stmt><if>if <condition>(<expr><name>sign</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Generate digits in reverse order</comment>
	<do>do
	<block>{<block_content>
		<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>n</name> <operator>%</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>   <comment type="block">/* get next digit */</comment>
	</block_content>}</block> while <condition>(<expr><operator>(</operator><name>n</name> <operator>/=</operator> <literal type="number">10</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>     <comment type="block">/* delete it */</comment>

	<comment type="line">// Add sign (if needed)</comment>
	<if_stmt><if>if <condition>(<expr><name>sign</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Rero-terminate string</comment>
	<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<comment type="line">// Reverse string s in place</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <name>len</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>j</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// Variant of fputs that prints newline characters as "\n"</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fputs_convert_newline</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name><name>string</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>string</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\\'</literal></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><name><name>string</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>pos</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Special error reporting for our own vfprintf()</comment>
<comment type="line">// Since we cannot rely on (heap) being available (allocation may have failed</comment>
<comment type="line">// earlier), we do the reporting entirely manually, writing one string at a time</comment>
<function><type><name>void</name></type> <name>syscalls_report_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>_errno</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>linestr</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>itoa</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>linestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"WARN: "</literal></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">": "</literal></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>_errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\n      Not processing string \""</literal></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fputs_convert_newline</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\" in "</literal></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"() ["</literal></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>linestr</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"]\n"</literal></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// The actual vfprintf() routine</comment>
<function><type><name>int</name></type> <name>FTLvfprintf</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Print into dynamically allocated memory</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>_errno</name></decl>, <decl><type ref="prev"/><name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<do>do
	<block>{<block_content>
		<comment type="line">// The va_copy() macro copies the (previously initialized) variable</comment>
		<comment type="line">// argument list args to the local _args. The behavior is as if</comment>
		<comment type="line">// va_start() were applied to _args with the same last argument,</comment>
		<comment type="line">// followed by the same number of va_arg() invocations that was used to</comment>
		<comment type="line">// reach the current state of args. We do this to be able to reuse the</comment>
		<comment type="line">// arguments in args when we need to redo the string preparation</comment>
		<comment type="line">// procedure</comment>
		<decl_stmt><decl><type><name>va_list</name></type> <name>_args</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Reset errno before trying to get the string</comment>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<comment type="line">// Do the actual string transformation</comment>
		<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>vasprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Copy errno into buffer before calling va_end()</comment>
		<expr_stmt><expr><name>_errno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<comment type="line">// Try again to allocate memory if this failed due to an interruption by</comment>
	<comment type="line">// an incoming signal</comment>
	while<condition>(<expr><name>length</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>_errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition>;</do>

	<comment type="line">// Handle other errors than EINTR</comment>
	<if_stmt><if>if<condition>(<expr><name>length</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>syscalls_report_error</name><argument_list>(<argument><expr><literal type="string">"vfprintf() failed to allocate memory"</literal></expr></argument>,
		                      <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>_errno</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Free the buffer in case anything got allocated</comment>
		<if_stmt><if>if<condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="line">// Restore errno value</comment>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>_errno</name></expr>;</expr_stmt>

		<comment type="line">// Return early, there isn't anything we can do here</comment>
		<return>return <expr><name>length</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Actually write into the requested stream now</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_buffer</name> <init>= <expr><name>buffer</name></expr></init></decl>;</decl_stmt>
	<do>do
	<block>{<block_content>
		<comment type="line">// Reset errno before trying to write</comment>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<comment type="line">// Print buffer into stream and advance working pointer by number of</comment>
		<comment type="line">// written bytes</comment>
		<expr_stmt><expr><name>_buffer</name> <operator>+=</operator> <call><name>fputs</name><argument_list>(<argument><expr><name>_buffer</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<comment type="line">// Try to write the remaining content into the stream if this failed due</comment>
	<comment type="line">// to an interruption by an incoming signal</comment>
	while<condition>(<expr><name>_buffer</name> <operator>&lt;</operator> <name>buffer</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition>;</do>

	<comment type="line">// Backup errno value</comment>
	<expr_stmt><expr><name>_errno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>

	<comment type="line">// Final error checking (may have failed for some other reason then an</comment>
	<comment type="line">// EINTR = interrupted system call)</comment>
	<if_stmt><if>if<condition>(<expr><name>_buffer</name> <operator>&lt;</operator> <name>buffer</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>syscalls_report_error</name><argument_list>(<argument><expr><literal type="string">"vfprintf() did not print all characters"</literal></expr></argument>,
		                      <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Free allocated memory</comment>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Restore errno value</comment>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>_errno</name></expr>;</expr_stmt>

	<comment type="line">// Return number of written bytes</comment>
	<return>return <expr><name>length</name></expr>;</return>
</block_content>}</block></function>
</unit>
