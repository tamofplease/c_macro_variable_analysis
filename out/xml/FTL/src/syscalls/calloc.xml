<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/syscalls/calloc.c"><comment type="block">/* Pi-hole: A black hole for Internet advertisements
*  (c) 2020 Pi-hole, LLC (https://pi-hole.net)
*  Network-wide ad blocking via your own hardware.
*
*  FTL Engine
*  Pi-hole syscall implementation for calloc
*
*  This file is copyright under the latest version of the EUPL.
*  Please see LICENSE file for your rights under this license. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../FTL.h"</cpp:file></cpp:include>
<comment type="line">//#include "syscalls.h" is implicitly done in FTL.h</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../log.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>calloc</name></cpp:undef>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>malloc</name><operator>)</operator></expr></argument>)</argument_list> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>alloc_size</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name>FTLcalloc</name><argument_list>(<argument><expr><specifier>const</specifier> <name>size_t</name> <name>nmemb</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>size_t</name> <name>size</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>file</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>func</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>int</name> <name>line</name></expr></argument>)</argument_list>
<block>{<block_content>
	<comment type="line">// The FTLcalloc() func allocates memory for an array of nmemb elements</comment>
	<comment type="line">// of size bytes each and returns a pointer to the allocated memory. The</comment>
	<comment type="line">// memory is set to zero. If nmemb or size is 0, then calloc() returns</comment>
	<comment type="line">// either NULL, or a unique pointer value that can later be successfully</comment>
	<comment type="line">// passed to free().</comment>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<do>do
	<block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>nmemb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<comment type="line">// Try again to allocate memory if this failed due to an interruption by</comment>
	<comment type="line">// an incoming signal</comment>
	while<condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition>;</do>

	<comment type="line">// Backup errno value</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// Handle other errors than EINTR</comment>
	<if_stmt><if>if<condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"FATAL: Memory allocation (%zu x %zu) failed in %s() (%s:%i)"</literal></expr></argument>,
		     <argument><expr><name>nmemb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Restore errno value</comment>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>_errno</name></expr>;</expr_stmt>

	<comment type="line">// Return memory pointer</comment>
	<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</unit>
