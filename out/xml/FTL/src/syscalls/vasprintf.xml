<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/syscalls/vasprintf.c"><comment type="block">/* Pi-hole: A black hole for Internet advertisements
*  (c) 2020 Pi-hole, LLC (https://pi-hole.net)
*  Network-wide ad blocking via your own hardware.
*
*  FTL Engine
*  Pi-hole syscall implementation for vasprintf
*
*  This file is copyright under the latest version of the EUPL.
*  Please see LICENSE file for your rights under this license. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../FTL.h"</cpp:file></cpp:include>
<comment type="line">//#include "syscalls.h" is implicitly done in FTL.h</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../log.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vasprintf</name></cpp:undef>
<function><type><name>int</name></type> <name>FTLvasprintf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Sanity check</comment>
	<if_stmt><if>if<condition>(<expr><name>buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>syscalls_report_error</name><argument_list>(<argument><expr><literal type="string">"vasprintf() called with NULL buffer"</literal></expr></argument>,
		                      <argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="line">// Print into dynamically allocated memory</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>_errno</name></decl>, <decl><type ref="prev"/><name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<do>do
	<block>{<block_content>
		<comment type="line">// The va_copy() macro copies the (previously initialized) variable</comment>
		<comment type="line">// argument list args to the local _args. The behavior is as if</comment>
		<comment type="line">// va_start() were applied to _args with the same last argument,</comment>
		<comment type="line">// followed by the same number of va_arg() invocations that was used to</comment>
		<comment type="line">// reach the current state of args. We do this to be able to reuse the</comment>
		<comment type="line">// arguments in args when we need to redo the string preparation</comment>
		<comment type="line">// procedure</comment>
		<decl_stmt><decl><type><name>va_list</name></type> <name>_args</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Reset errno before trying to get the string</comment>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<comment type="line">// Do the actual string transformation</comment>
		<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>vasprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Copy errno into buffer before calling va_end()</comment>
		<expr_stmt><expr><name>_errno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<comment type="line">// Try again to allocate memory if this failed due to an interruption by</comment>
	<comment type="line">// an incoming signal</comment>
	while<condition>(<expr><name>length</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>_errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition>;</do>

	<comment type="line">// Handle other errors than EINTR</comment>
	<if_stmt><if>if<condition>(<expr><name>length</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>syscalls_report_error</name><argument_list>(<argument><expr><literal type="string">"vasprintf() failed to print into buffer"</literal></expr></argument>,
		                      <argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>_errno</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Restore errno value</comment>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>_errno</name></expr>;</expr_stmt>

	<comment type="line">// Return number of written bytes</comment>
	<return>return <expr><name>length</name></expr>;</return>
</block_content>}</block></function>
</unit>
