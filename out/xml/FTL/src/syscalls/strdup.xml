<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/syscalls/strdup.c"><comment type="block">/* Pi-hole: A black hole for Internet advertisements
*  (c) 2020 Pi-hole, LLC (https://pi-hole.net)
*  Network-wide ad blocking via your own hardware.
*
*  FTL Engine
*  Pi-hole syscall implementation for strdup
*
*  This file is copyright under the latest version of the EUPL.
*  Please see LICENSE file for your rights under this license. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../FTL.h"</cpp:file></cpp:include>
<comment type="line">//#include "syscalls.h" is implicitly done in FTL.h</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../log.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>malloc</name><operator>)</operator></expr></argument>)</argument_list> <name>FTLstrdup</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>src</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>file</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>func</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>int</name> <name>line</name></expr></argument>)</argument_list>
<block>{<block_content>
	<comment type="line">// The FTLstrdup() function returns a pointer to a new string which is a</comment>
	<comment type="line">// duplicate of the string s. Memory for the new string is obtained with</comment>
	<comment type="line">// calloc(3), and can be freed with free(3).</comment>
	<if_stmt><if>if<condition>(<expr><name>src</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"WARN: Trying to copy a NULL string in %s() (%s:%i)"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><call><name>FTLcalloc</name><argument_list>(<argument><expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Return early in case of an unrecoverable error, error reporting has</comment>
	<comment type="line">// already been done in FTLcalloc()</comment>
	<if_stmt><if>if<condition>(<expr><name>dest</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// Use memcpy as memory areas cannot overlap</comment>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dest</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<return>return <expr><name>dest</name></expr>;</return>
</block_content>}</block></decl></decl_stmt></unit>
