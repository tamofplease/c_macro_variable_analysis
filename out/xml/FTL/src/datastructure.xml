<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/datastructure.c"><comment type="block">/* Pi-hole: A black hole for Internet advertisements
*  (c) 2017 Pi-hole, LLC (https://pi-hole.net)
*  Network-wide ad blocking via your own hardware.
*
*  FTL Engine
*  Query processing routines
*
*  This file is copyright under the latest version of the EUPL.
*  Please see LICENSE file for your rights under this license. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FTL.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"datastructure.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>
<comment type="line">// enum REGEX</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regex_r.h"</cpp:file></cpp:include>
<comment type="line">// reload_per_client_regex()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"database/gravity-db.h"</cpp:file></cpp:include>
<comment type="line">// bool startup</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"main.h"</cpp:file></cpp:include>
<comment type="line">// reset_aliasclient()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"database/aliasclients.h"</cpp:file></cpp:include>
<comment type="line">// config struct</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<comment type="line">// set_event(RESOLVE_NEW_HOSTNAMES)</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"events.h"</cpp:file></cpp:include>
<comment type="line">// overTime array</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"overTime.h"</cpp:file></cpp:include>
<comment type="line">// short_path()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"files.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>querytypes</name><index>[<expr><name>TYPE_MAX</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"UNKNOWN"</literal></expr>, <expr><literal type="string">"A"</literal></expr>, <expr><literal type="string">"AAAA"</literal></expr>, <expr><literal type="string">"ANY"</literal></expr>, <expr><literal type="string">"SRV"</literal></expr>, <expr><literal type="string">"SOA"</literal></expr>, <expr><literal type="string">"PTR"</literal></expr>, <expr><literal type="string">"TXT"</literal></expr>,
                                    <expr><literal type="string">"NAPTR"</literal></expr>, <expr><literal type="string">"MX"</literal></expr>, <expr><literal type="string">"DS"</literal></expr>, <expr><literal type="string">"RRSIG"</literal></expr>, <expr><literal type="string">"DNSKEY"</literal></expr>, <expr><literal type="string">"NS"</literal></expr>, <expr><literal type="string">"OTHER"</literal></expr>, <expr><literal type="string">"SVCB"</literal></expr>,
                                    <expr><literal type="string">"HTTPS"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<comment type="line">// converts upper to lower case, and leaves other characters unchanged</comment>
<function><type><name>void</name></type> <name>strtolower</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block>{<block_content> <expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>tolower</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></while>
</block_content>}</block></function>

<comment type="line">// creates a simple hash of a string that fits into a uint32_t</comment>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>hashStr</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>s</name></expr></argument>)</argument_list>
<block>{<block_content>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>hash</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">// Jenkins' One-at-a-Time hash (http://www.burtleburtle.net/bob/hash/doobs.html)</comment>
        <for>for<control>(<init>;</init> <condition><expr><operator>*</operator><name>s</name></expr>;</condition> <incr><expr><operator>++</operator><name>s</name></expr></incr>)</control>
        <block>{<block_content>
                <expr_stmt><expr><name>hash</name> <operator>+=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>hash</name> <operator>+=</operator> <name>hash</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>hash</name> <operator>^=</operator> <name>hash</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><name>hash</name> <operator>+=</operator> <name>hash</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>hash</name> <operator>^=</operator> <name>hash</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>hash</name> <operator>+=</operator> <name>hash</name> <operator>&lt;&lt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
        <return>return <expr><name>hash</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>int</name></type> <name>findQueryID</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Loop over all queries - we loop in reverse order (start from the most recent query and</comment>
	<comment type="line">// continuously walk older queries while trying to find a match. Ideally, we should always</comment>
	<comment type="line">// find the correct query with zero iterations, but it may happen that queries are processed</comment>
	<comment type="line">// asynchronously, e.g. for slow upstream relies to a huge amount of requests.</comment>
	<comment type="line">// We iterate from the most recent query down to at most MAXITER queries in the past to avoid</comment>
	<comment type="line">// iterating through the entire array of queries</comment>
	<comment type="line">// MAX(0, a) is used to return 0 in case a is negative (negative array indices are harmful)</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>until</name> <init>= <expr><call><name>MAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>counters</name><operator>-&gt;</operator><name>queries</name></name><operator>-</operator><name>MAXITER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>start</name> <init>= <expr><call><name>MAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>counters</name><operator>-&gt;</operator><name>queries</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Check UUIDs of queries</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>until</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>queriesData</name><modifier>*</modifier></type> <name>query</name> <init>= <expr><call><name>getQuery</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Check if the returned pointer is valid before trying to access it</comment>
		<if_stmt><if>if<condition>(<expr><name>query</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>id</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="line">// If not found</comment>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>findUpstreamID</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>upstreamString</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>in_port_t</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Go through already knows upstream servers and see if we used one of those</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>upstreamID</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>upstreamID</name> <operator>&lt;</operator> <name><name>counters</name><operator>-&gt;</operator><name>upstreams</name></name></expr>;</condition> <incr><expr><name>upstreamID</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="line">// Get upstream pointer</comment>
		<decl_stmt><decl><type><name>upstreamsData</name><modifier>*</modifier></type> <name>upstream</name> <init>= <expr><call><name>getUpstream</name><argument_list>(<argument><expr><name>upstreamID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Check if the returned pointer is valid before trying to access it</comment>
		<if_stmt><if>if<condition>(<expr><name>upstream</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>upstream</name><operator>-&gt;</operator><name>ippos</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>upstreamString</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>upstream</name><operator>-&gt;</operator><name>port</name></name> <operator>==</operator> <name>port</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>upstreamID</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<comment type="line">// This upstream server is not known</comment>
	<comment type="line">// Store ID</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>upstreamID</name> <init>= <expr><name><name>counters</name><operator>-&gt;</operator><name>upstreams</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"New upstream server: %s:%u (%i/%u)"</literal></expr></argument>, <argument><expr><name>upstreamString</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>upstreamID</name></expr></argument>, <argument><expr><name><name>counters</name><operator>-&gt;</operator><name>upstreams_MAX</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Get upstream pointer</comment>
	<decl_stmt><decl><type><name>upstreamsData</name><modifier>*</modifier></type> <name>upstream</name> <init>= <expr><call><name>getUpstream</name><argument_list>(<argument><expr><name>upstreamID</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>upstream</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"ERROR: Encountered serious memory error in findupstreamID()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Set magic byte</comment>
	<expr_stmt><expr><name><name>upstream</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>MAGICBYTE</name></expr>;</expr_stmt>
	<comment type="line">// Save upstream destination IP address</comment>
	<expr_stmt><expr><name><name>upstream</name><operator>-&gt;</operator><name>ippos</name></name> <operator>=</operator> <call><name>addstr</name><argument_list>(<argument><expr><name>upstreamString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>upstream</name><operator>-&gt;</operator><name>failed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="line">// Initialize upstream hostname</comment>
	<comment type="line">// Due to the nature of us being the resolver,</comment>
	<comment type="line">// the actual resolving of the host name has</comment>
	<comment type="line">// to be done separately to be non-blocking</comment>
	<expr_stmt><expr><name><name>upstream</name><operator>-&gt;</operator><name>new</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>upstream</name><operator>-&gt;</operator><name>namepos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="line">// 0 -&gt; string with length zero</comment>
	<expr_stmt><expr><call><name>set_event</name><argument_list>(<argument><expr><name>RESOLVE_NEW_HOSTNAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// This is a new upstream server</comment>
	<expr_stmt><expr><name><name>upstream</name><operator>-&gt;</operator><name>lastQuery</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// Store port</comment>
	<expr_stmt><expr><name><name>upstream</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
	<comment type="line">// Increase counter by one</comment>
	<expr_stmt><expr><name><name>counters</name><operator>-&gt;</operator><name>upstreams</name></name><operator>++</operator></expr>;</expr_stmt>

	<return>return <expr><name>upstreamID</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>findDomainID</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>domainString</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>domainHash</name> <init>= <expr><call><name>hashStr</name><argument_list>(<argument><expr><name>domainString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>domainID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>domainID</name> <operator>&lt;</operator> <name><name>counters</name><operator>-&gt;</operator><name>domains</name></name></expr>;</condition> <incr><expr><name>domainID</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="line">// Get domain pointer</comment>
		<decl_stmt><decl><type><name>domainsData</name><modifier>*</modifier></type> <name>domain</name> <init>= <expr><call><name>getDomain</name><argument_list>(<argument><expr><name>domainID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Check if the returned pointer is valid before trying to access it</comment>
		<if_stmt><if>if<condition>(<expr><name>domain</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// Quicker test: Does the domain match the pre-computed hash?</comment>
		<if_stmt><if>if<condition>(<expr><name><name>domain</name><operator>-&gt;</operator><name>domainhash</name></name> <operator>!=</operator> <name>domainHash</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// If so, compare the full domain using strcmp</comment>
		<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>domain</name><operator>-&gt;</operator><name>domainpos</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>domainString</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name>count</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>domain</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<return>return <expr><name>domainID</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="line">// If we did not return until here, then this domain is not known</comment>
	<comment type="line">// Store ID</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>domainID</name> <init>= <expr><name><name>counters</name><operator>-&gt;</operator><name>domains</name></name></expr></init></decl>;</decl_stmt>

	<comment type="line">// Get domain pointer</comment>
	<decl_stmt><decl><type><name>domainsData</name><modifier>*</modifier></type> <name>domain</name> <init>= <expr><call><name>getDomain</name><argument_list>(<argument><expr><name>domainID</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>domain</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"ERROR: Encountered serious memory error in findDomainID()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Set magic byte</comment>
	<expr_stmt><expr><name><name>domain</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>MAGICBYTE</name></expr>;</expr_stmt>
	<comment type="line">// Set its counter to 1 only if this domain is to be counted</comment>
	<comment type="line">// Domains only encountered during CNAME inspection are NOT counted here</comment>
	<expr_stmt><expr><name><name>domain</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <ternary><condition><expr><name>count</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
	<comment type="line">// Set blocked counter to zero</comment>
	<expr_stmt><expr><name><name>domain</name><operator>-&gt;</operator><name>blockedcount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="line">// Store domain name - no need to check for NULL here as it doesn't harm</comment>
	<expr_stmt><expr><name><name>domain</name><operator>-&gt;</operator><name>domainpos</name></name> <operator>=</operator> <call><name>addstr</name><argument_list>(<argument><expr><name>domainString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// Store pre-computed hash of domain for faster lookups later on</comment>
	<expr_stmt><expr><name><name>domain</name><operator>-&gt;</operator><name>domainhash</name></name> <operator>=</operator> <call><name>hashStr</name><argument_list>(<argument><expr><name>domainString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// Increase counter by one</comment>
	<expr_stmt><expr><name><name>counters</name><operator>-&gt;</operator><name>domains</name></name><operator>++</operator></expr>;</expr_stmt>

	<return>return <expr><name>domainID</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>findClientID</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>clientIP</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>aliasclient</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Compare content of client against known client IP addresses</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>clientID</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>clientID</name> <operator>&lt;</operator> <name><name>counters</name><operator>-&gt;</operator><name>clients</name></name></expr>;</condition> <incr><expr><name>clientID</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="line">// Get client pointer</comment>
		<decl_stmt><decl><type><name>clientsData</name><modifier>*</modifier></type> <name>client</name> <init>= <expr><call><name>getClient</name><argument_list>(<argument><expr><name>clientID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Check if the returned pointer is valid before trying to access it</comment>
		<if_stmt><if>if<condition>(<expr><name>client</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// Quick test: Does the clients IP start with the same character?</comment>
		<if_stmt><if>if<condition>(<expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>ippos</name></name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>!=</operator> <name><name>clientIP</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// If so, compare the full IP using strcmp</comment>
		<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>ippos</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>clientIP</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Add one if count == true (do not add one, e.g., during ARP table processing)</comment>
			<if_stmt><if>if<condition>(<expr><name>count</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>aliasclient</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>change_clientcount</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<return>return <expr><name>clientID</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="line">// Return -1 (= not found) if count is false because we do not want to create a new client here</comment>
	<comment type="line">// Proceed if we are looking for a alias-client because we want to create a new record</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>count</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>aliasclient</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// If we did not return until here, then this client is definitely new</comment>
	<comment type="line">// Store ID</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>clientID</name> <init>= <expr><name><name>counters</name><operator>-&gt;</operator><name>clients</name></name></expr></init></decl>;</decl_stmt>

	<comment type="line">// Get client pointer</comment>
	<decl_stmt><decl><type><name>clientsData</name><modifier>*</modifier></type> <name>client</name> <init>= <expr><call><name>getClient</name><argument_list>(<argument><expr><name>clientID</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>client</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"ERROR: Encountered serious memory error in findClientID()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Set magic byte</comment>
	<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>MAGICBYTE</name></expr>;</expr_stmt>
	<comment type="line">// Set its counter to 1</comment>
	<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>count</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>aliasclient</name><operator>)</operator></expr>?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
	<comment type="line">// Initialize blocked count to zero</comment>
	<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>blockedcount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="line">// Store client IP - no need to check for NULL here as it doesn't harm</comment>
	<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>ippos</name></name> <operator>=</operator> <call><name>addstr</name><argument_list>(<argument><expr><name>clientIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// Initialize client hostname</comment>
	<comment type="line">// Due to the nature of us being the resolver,</comment>
	<comment type="line">// the actual resolving of the host name has</comment>
	<comment type="line">// to be done separately to be non-blocking</comment>
	<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>new</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>namepos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_event</name><argument_list>(<argument><expr><name>RESOLVE_NEW_HOSTNAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// No query seen so far</comment>
	<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>lastQuery</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>numQueriesARP</name></name> <operator>=</operator> <name><name>client</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>
	<comment type="line">// Configured groups are yet unknown</comment>
	<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>found_group</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>groupspos</name></name> <operator>=</operator> <literal type="number">0u</literal></expr>;</expr_stmt>
	<comment type="line">// Store time this client was added, we re-read group settings</comment>
	<comment type="line">// some time after adding a client to ensure we pick up possible</comment>
	<comment type="line">// group configuration though hostname, MAC address or interface</comment>
	<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>reread_groups</name></name> <operator>=</operator> <literal type="number">0u</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>firstSeen</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// Interface is not yet known</comment>
	<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>ifacepos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="line">// Set all MAC address bytes to zero</comment>
	<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>hwlen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>hwaddr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>hwaddr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// This may be a alias-client, the ID is set elsewhere</comment>
	<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>aliasclient</name></name> <operator>=</operator> <name>aliasclient</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>aliasclient_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="line">// Initialize client-specific overTime data</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>overTime</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>overTime</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Store client ID</comment>
	<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>clientID</name></expr>;</expr_stmt>

	<comment type="line">// Increase counter by one</comment>
	<expr_stmt><expr><name><name>counters</name><operator>-&gt;</operator><name>clients</name></name><operator>++</operator></expr>;</expr_stmt>

	<comment type="line">// Get groups for this client and set enabled regex filters</comment>
	<comment type="line">// Note 1: We do this only after increasing the clients counter to</comment>
	<comment type="line">//         ensure sufficient shared memory is available in the</comment>
	<comment type="line">//         pre_client_regex object.</comment>
	<comment type="line">// Note 2: We don't do this before starting up is done as the gravity</comment>
	<comment type="line">//         database may not be available. All clients initialized</comment>
	<comment type="line">//         during history reading get their enabled regexs reloaded</comment>
	<comment type="line">//         in the initial call to FTL_reload_all_domainlists()</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>startup</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>aliasclient</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>reload_per_client_regex</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Check if this client is managed by a alias-client</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>aliasclient</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>reset_aliasclient</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>clientID</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>change_clientcount</name><parameter_list>(<parameter><decl><type><name>clientsData</name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>total</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blocked</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>overTimeIdx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>overTimeMod</name></decl></parameter>)</parameter_list>
<block>{<block_content>
		<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <name>total</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>blockedcount</name></name> <operator>+=</operator> <name>blocked</name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>overTimeIdx</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>overTimeIdx</name> <operator>&lt;</operator> <name>OVERTIME_SLOTS</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>overTime</name><index>[<expr><name>overTimeIdx</name></expr>]</index></name> <operator>+=</operator> <name>overTimeMod</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="line">// Also add counts to the connected alias-client (if any)</comment>
		<if_stmt><if>if<condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>aliasclient</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"WARN: Should not add to alias-client directly (client \"%s\" (%s))!"</literal></expr></argument>,
			     <argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>namepos</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>ippos</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>aliasclient_id</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>clientsData</name> <modifier>*</modifier></type><name>aliasclient</name> <init>= <expr><call><name>getClient</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>aliasclient_id</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>aliasclient</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <name>total</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>aliasclient</name><operator>-&gt;</operator><name>blockedcount</name></name> <operator>+=</operator> <name>blocked</name></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>overTimeIdx</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>overTimeIdx</name> <operator>&lt;</operator> <name>OVERTIME_SLOTS</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>aliasclient</name><operator>-&gt;</operator><name>overTime</name><index>[<expr><name>overTimeIdx</name></expr>]</index></name> <operator>+=</operator> <name>overTimeMod</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_findCacheID</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>domainID</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>clientID</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>query_types</name></name></type> <name>query_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>create_new</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Compare content of client against known client IP addresses</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>cacheID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>cacheID</name> <operator>&lt;</operator> <name><name>counters</name><operator>-&gt;</operator><name>dns_cache_size</name></name></expr>;</condition> <incr><expr><name>cacheID</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="line">// Get cache pointer</comment>
		<decl_stmt><decl><type><name>DNSCacheData</name><modifier>*</modifier></type> <name>dns_cache</name> <init>= <expr><call><name>_getDNSCache</name><argument_list>(<argument><expr><name>cacheID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Check if the returned pointer is valid before trying to access it</comment>
		<if_stmt><if>if<condition>(<expr><name>dns_cache</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><name><name>dns_cache</name><operator>-&gt;</operator><name>domainID</name></name> <operator>==</operator> <name>domainID</name> <operator>&amp;&amp;</operator>
		   <name><name>dns_cache</name><operator>-&gt;</operator><name>clientID</name></name> <operator>==</operator> <name>clientID</name> <operator>&amp;&amp;</operator>
		   <name><name>dns_cache</name><operator>-&gt;</operator><name>query_type</name></name> <operator>==</operator> <name>query_type</name></expr>)</condition>
		<block>{<block_content>
			<return>return <expr><name>cacheID</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>create_new</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// Get ID of new cache entry</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cacheID</name> <init>= <expr><name><name>counters</name><operator>-&gt;</operator><name>dns_cache_size</name></name></expr></init></decl>;</decl_stmt>

	<comment type="line">// Get client pointer</comment>
	<decl_stmt><decl><type><name>DNSCacheData</name><modifier>*</modifier></type> <name>dns_cache</name> <init>= <expr><call><name>_getDNSCache</name><argument_list>(<argument><expr><name>cacheID</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>dns_cache</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"ERROR: Encountered serious memory error in findCacheID()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Initialize cache entry</comment>
	<expr_stmt><expr><name><name>dns_cache</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>MAGICBYTE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dns_cache</name><operator>-&gt;</operator><name>blocking_status</name></name> <operator>=</operator> <name>UNKNOWN_BLOCKED</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dns_cache</name><operator>-&gt;</operator><name>domainID</name></name> <operator>=</operator> <name>domainID</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dns_cache</name><operator>-&gt;</operator><name>clientID</name></name> <operator>=</operator> <name>clientID</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dns_cache</name><operator>-&gt;</operator><name>query_type</name></name> <operator>=</operator> <name>query_type</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dns_cache</name><operator>-&gt;</operator><name>force_reply</name></name> <operator>=</operator> <literal type="number">0u</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dns_cache</name><operator>-&gt;</operator><name>domainlist_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <comment type="line">// -1 = not set</comment>

	<comment type="line">// Increase counter by one</comment>
	<expr_stmt><expr><name><name>counters</name><operator>-&gt;</operator><name>dns_cache_size</name></name><operator>++</operator></expr>;</expr_stmt>

	<return>return <expr><name>cacheID</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>isValidIPv4</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>sa</name></decl>;</decl_stmt>
	<return>return <expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>sa</name><operator>.</operator><name>sin_addr</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>isValidIPv6</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name></type> <name>sa</name></decl>;</decl_stmt>
	<return>return <expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>sa</name><operator>.</operator><name>sin6_addr</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Privacy-level sensitive subroutine that returns the domain name</comment>
<comment type="line">// only when appropriate for the requested query</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getDomainString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>queriesData</name><modifier>*</modifier></type> <name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Check if the returned pointer is valid before trying to access it</comment>
	<if_stmt><if>if<condition>(<expr><name>query</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>query</name><operator>-&gt;</operator><name>domainID</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="string">""</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>privacylevel</name></name> <operator>&lt;</operator> <name>PRIVACY_HIDE_DOMAINS</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Get domain pointer</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>domainsData</name><modifier>*</modifier></type> <name>domain</name> <init>= <expr><call><name>getDomain</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>domainID</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Check if the returned pointer is valid before trying to access it</comment>
		<if_stmt><if>if<condition>(<expr><name>domain</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="string">""</literal></expr>;</return></block_content></block></if></if_stmt>

		<comment type="line">// Return string</comment>
		<return>return <expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>domain</name><operator>-&gt;</operator><name>domainpos</name></name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>HIDDEN_DOMAIN</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">// Privacy-level sensitive subroutine that returns the domain name</comment>
<comment type="line">// only when appropriate for the requested query</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getCNAMEDomainString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>queriesData</name><modifier>*</modifier></type> <name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Check if the returned pointer is valid before trying to access it</comment>
	<if_stmt><if>if<condition>(<expr><name>query</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>query</name><operator>-&gt;</operator><name>CNAME_domainID</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="string">""</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>privacylevel</name></name> <operator>&lt;</operator> <name>PRIVACY_HIDE_DOMAINS</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Get domain pointer</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>domainsData</name><modifier>*</modifier></type> <name>domain</name> <init>= <expr><call><name>getDomain</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>CNAME_domainID</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Check if the returned pointer is valid before trying to access it</comment>
		<if_stmt><if>if<condition>(<expr><name>domain</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="string">""</literal></expr>;</return></block_content></block></if></if_stmt>

		<comment type="line">// Return string</comment>
		<return>return <expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>domain</name><operator>-&gt;</operator><name>domainpos</name></name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>HIDDEN_DOMAIN</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">// Privacy-level sensitive subroutine that returns the client IP</comment>
<comment type="line">// only when appropriate for the requested query</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getClientIPString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>queriesData</name><modifier>*</modifier></type> <name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Check if the returned pointer is valid before trying to access it</comment>
	<if_stmt><if>if<condition>(<expr><name>query</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>query</name><operator>-&gt;</operator><name>clientID</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="string">""</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>privacylevel</name></name> <operator>&lt;</operator> <name>PRIVACY_HIDE_DOMAINS_CLIENTS</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Get client pointer</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>clientsData</name><modifier>*</modifier></type> <name>client</name> <init>= <expr><call><name>getClient</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>clientID</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Check if the returned pointer is valid before trying to access it</comment>
		<if_stmt><if>if<condition>(<expr><name>client</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="string">""</literal></expr>;</return></block_content></block></if></if_stmt>

		<comment type="line">// Return string</comment>
		<return>return <expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>ippos</name></name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>HIDDEN_CLIENT</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">// Privacy-level sensitive subroutine that returns the client host name</comment>
<comment type="line">// only when appropriate for the requested query</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getClientNameString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>queriesData</name><modifier>*</modifier></type> <name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Check if the returned pointer is valid before trying to access it</comment>
	<if_stmt><if>if<condition>(<expr><name>query</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>query</name><operator>-&gt;</operator><name>clientID</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="string">""</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>privacylevel</name></name> <operator>&lt;</operator> <name>PRIVACY_HIDE_DOMAINS_CLIENTS</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Get client pointer</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>clientsData</name><modifier>*</modifier></type> <name>client</name> <init>= <expr><call><name>getClient</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>clientID</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Check if the returned pointer is valid before trying to access it</comment>
		<if_stmt><if>if<condition>(<expr><name>client</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="string">""</literal></expr>;</return></block_content></block></if></if_stmt>

		<comment type="line">// Return string</comment>
		<return>return <expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>namepos</name></name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>HIDDEN_CLIENT</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>FTL_reset_per_client_domain_data</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Resetting per-client DNS cache, size is %i"</literal></expr></argument>, <argument><expr><name><name>counters</name><operator>-&gt;</operator><name>dns_cache_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>cacheID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>cacheID</name> <operator>&lt;</operator> <name><name>counters</name><operator>-&gt;</operator><name>dns_cache_size</name></name></expr>;</condition> <incr><expr><name>cacheID</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="line">// Reset all blocking yes/no fields for all domains and clients</comment>
		<comment type="line">// This forces a reprocessing of all available filters for any</comment>
		<comment type="line">// given domain and client the next time they are seen</comment>
		<decl_stmt><decl><type><name>DNSCacheData</name> <modifier>*</modifier></type><name>dns_cache</name> <init>= <expr><call><name>getDNSCache</name><argument_list>(<argument><expr><name>cacheID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>dns_cache</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>dns_cache</name><operator>-&gt;</operator><name>blocking_status</name></name> <operator>=</operator> <name>UNKNOWN_BLOCKED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// Reloads all domainlists and performs a few extra tasks such as cleaning the</comment>
<comment type="line">// message table</comment>
<comment type="line">// May only be called from the database thread</comment>
<function><type><name>void</name></type> <name>FTL_reload_all_domainlists</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>lock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// (Re-)open gravity database connection</comment>
	<expr_stmt><expr><call><name>gravityDB_reopen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Reset number of blocked domains</comment>
	<expr_stmt><expr><name><name>counters</name><operator>-&gt;</operator><name>gravity</name></name> <operator>=</operator> <call><name>gravityDB_count</name><argument_list>(<argument><expr><name>GRAVITY_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Read and compile possible regex filters</comment>
	<comment type="line">// only after having called gravityDB_open()</comment>
	<expr_stmt><expr><call><name>read_regex_from_database</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Check for inaccessible adlist URLs</comment>
	<expr_stmt><expr><call><name>check_inaccessible_adlists</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Reset FTL's internal DNS cache storing whether a specific domain</comment>
	<comment type="line">// has already been validated for a specific user</comment>
	<expr_stmt><expr><call><name>FTL_reset_per_client_domain_data</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>unlock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>bool</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>is_blocked</name><argument_list>(<argument><expr><specifier>const</specifier> enum <name>query_status</name> <name>status</name></expr></argument>)</argument_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>status</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>QUERY_UNKNOWN</name></expr>:</case>
		<case>case <expr><name>QUERY_FORWARDED</name></expr>:</case>
		<case>case <expr><name>QUERY_CACHE</name></expr>:</case>
		<case>case <expr><name>QUERY_RETRIED</name></expr>:</case>
		<case>case <expr><name>QUERY_RETRIED_DNSSEC</name></expr>:</case>
		<case>case <expr><name>QUERY_IN_PROGRESS</name></expr>:</case>
		<case>case <expr><name>QUERY_CACHE_STALE</name></expr>:</case>
		<case>case <expr><name>QUERY_STATUS_MAX</name></expr>:</case>
		<default>default:</default>
			<return>return <expr><name>false</name></expr>;</return>

		<case>case <expr><name>QUERY_GRAVITY</name></expr>:</case>
		<case>case <expr><name>QUERY_REGEX</name></expr>:</case>
		<case>case <expr><name>QUERY_BLACKLIST</name></expr>:</case>
		<case>case <expr><name>QUERY_EXTERNAL_BLOCKED_IP</name></expr>:</case>
		<case>case <expr><name>QUERY_EXTERNAL_BLOCKED_NULL</name></expr>:</case>
		<case>case <expr><name>QUERY_EXTERNAL_BLOCKED_NXRA</name></expr>:</case>
		<case>case <expr><name>QUERY_GRAVITY_CNAME</name></expr>:</case>
		<case>case <expr><name>QUERY_REGEX_CNAME</name></expr>:</case>
		<case>case <expr><name>QUERY_BLACKLIST_CNAME</name></expr>:</case>
		<case>case <expr><name>QUERY_DBBUSY</name></expr>:</case>
		<case>case <expr><name>QUERY_SPECIAL_DOMAIN</name></expr>:</case>
			<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>query_status_str</name><argument_list>(<argument><expr><specifier>const</specifier> enum <name>query_status</name> <name>status</name></expr></argument>)</argument_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>status</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>QUERY_UNKNOWN</name></expr>:</case>
			<return>return <expr><literal type="string">"UNKNOWN"</literal></expr>;</return>
		<case>case <expr><name>QUERY_GRAVITY</name></expr>:</case>
			<return>return <expr><literal type="string">"GRAVITY"</literal></expr>;</return>
		<case>case <expr><name>QUERY_FORWARDED</name></expr>:</case>
			<return>return <expr><literal type="string">"FORWARDED"</literal></expr>;</return>
		<case>case <expr><name>QUERY_CACHE</name></expr>:</case>
			<return>return <expr><literal type="string">"CACHE"</literal></expr>;</return>
		<case>case <expr><name>QUERY_REGEX</name></expr>:</case>
			<return>return <expr><literal type="string">"REGEX"</literal></expr>;</return>
		<case>case <expr><name>QUERY_BLACKLIST</name></expr>:</case>
			<return>return <expr><literal type="string">"BLACKLIST"</literal></expr>;</return>
		<case>case <expr><name>QUERY_EXTERNAL_BLOCKED_IP</name></expr>:</case>
			<return>return <expr><literal type="string">"EXTERNAL_BLOCKED_IP"</literal></expr>;</return>
		<case>case <expr><name>QUERY_EXTERNAL_BLOCKED_NULL</name></expr>:</case>
			<return>return <expr><literal type="string">"EXTERNAL_BLOCKED_NULL"</literal></expr>;</return>
		<case>case <expr><name>QUERY_EXTERNAL_BLOCKED_NXRA</name></expr>:</case>
			<return>return <expr><literal type="string">"EXTERNAL_BLOCKED_NXRA"</literal></expr>;</return>
		<case>case <expr><name>QUERY_GRAVITY_CNAME</name></expr>:</case>
			<return>return <expr><literal type="string">"GRAVITY_CNAME"</literal></expr>;</return>
		<case>case <expr><name>QUERY_REGEX_CNAME</name></expr>:</case>
			<return>return <expr><literal type="string">"REGEX_CNAME"</literal></expr>;</return>
		<case>case <expr><name>QUERY_BLACKLIST_CNAME</name></expr>:</case>
			<return>return <expr><literal type="string">"BLACKLIST_CNAME"</literal></expr>;</return>
		<case>case <expr><name>QUERY_RETRIED</name></expr>:</case>
			<return>return <expr><literal type="string">"RETRIED"</literal></expr>;</return>
		<case>case <expr><name>QUERY_RETRIED_DNSSEC</name></expr>:</case>
			<return>return <expr><literal type="string">"RETRIED_DNSSEC"</literal></expr>;</return>
		<case>case <expr><name>QUERY_IN_PROGRESS</name></expr>:</case>
			<return>return <expr><literal type="string">"IN_PROGRESS"</literal></expr>;</return>
		<case>case <expr><name>QUERY_DBBUSY</name></expr>:</case>
			<return>return <expr><literal type="string">"DBBUSY"</literal></expr>;</return>
		<case>case <expr><name>QUERY_SPECIAL_DOMAIN</name></expr>:</case>
			<return>return <expr><literal type="string">"SPECIAL_DOMAIN"</literal></expr>;</return>
		<case>case <expr><name>QUERY_CACHE_STALE</name></expr>:</case>
			<return>return <expr><literal type="string">"CACHE_STALE"</literal></expr>;</return>
		<case>case <expr><name>QUERY_STATUS_MAX</name></expr>:</case>
			<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></switch>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>_query_set_status</name><parameter_list>(<parameter><decl><type><name>queriesData</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>query_status</name></name></type> <name>new_status</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Debug logging</comment>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_STATUS</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oldstr</name> <init>= <expr><ternary><condition><expr><name><name>query</name><operator>-&gt;</operator><name>status</name></name> <operator>&lt;</operator> <name>QUERY_STATUS_MAX</name></expr> ?</condition><then> <expr><call><name>query_status_str</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">"INVALID"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>new_status</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Query %i: status unchanged: %s (%d) in %s() (%s:%i)"</literal></expr></argument>,
			     <argument><expr><name><name>query</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>oldstr</name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><call><name>short_path</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newstr</name> <init>= <expr><ternary><condition><expr><name>new_status</name> <operator>&lt;</operator> <name>QUERY_STATUS_MAX</name></expr> ?</condition><then> <expr><call><name>query_status_str</name><argument_list>(<argument><expr><name>new_status</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">"INVALID"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Query %i: status changed: %s (%d) -&gt; %s (%d) in %s() (%s:%i)"</literal></expr></argument>,
			     <argument><expr><name><name>query</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>oldstr</name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name>newstr</name></expr></argument>, <argument><expr><name>new_status</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><call><name>short_path</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Sanity check</comment>
	<if_stmt><if>if<condition>(<expr><name>new_status</name> <operator>&gt;=</operator> <name>QUERY_STATUS_MAX</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// Update counters</comment>
	<if_stmt><if>if<condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>new_status</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>counters</name><operator>-&gt;</operator><name>status</name><index>[<expr><name><name>query</name><operator>-&gt;</operator><name>status</name></name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>counters</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>new_status</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

		<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>timeidx</name> <init>= <expr><call><name>getOverTimeID</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><call><name>is_blocked</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>overTime</name><index>[<expr><name>timeidx</name></expr>]</index></name><operator>.</operator><name>blocked</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if<condition>(<expr><call><name>is_blocked</name><argument_list>(<argument><expr><name>new_status</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>overTime</name><index>[<expr><name>timeidx</name></expr>]</index></name><operator>.</operator><name>blocked</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>QUERY_CACHE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>overTime</name><index>[<expr><name>timeidx</name></expr>]</index></name><operator>.</operator><name>cached</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if<condition>(<expr><name>new_status</name> <operator>==</operator> <name>QUERY_CACHE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>overTime</name><index>[<expr><name>timeidx</name></expr>]</index></name><operator>.</operator><name>cached</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>QUERY_FORWARDED</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>overTime</name><index>[<expr><name>timeidx</name></expr>]</index></name><operator>.</operator><name>forwarded</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if<condition>(<expr><name>new_status</name> <operator>==</operator> <name>QUERY_FORWARDED</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>overTime</name><index>[<expr><name>timeidx</name></expr>]</index></name><operator>.</operator><name>forwarded</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Update status</comment>
	<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>new_status</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>get_query_reply_str</name><argument_list>(<argument><expr><specifier>const</specifier> enum <name>reply_type</name> <name>reply</name></expr></argument>)</argument_list>
<block>{<block_content>
	<switch>switch<condition>(<expr><name>reply</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>REPLY_UNKNOWN</name></expr>:</case>
			<return>return <expr><literal type="string">"UNKNOWN"</literal></expr>;</return>
		<case>case <expr><name>REPLY_NODATA</name></expr>:</case>
			<return>return <expr><literal type="string">"NODATA"</literal></expr>;</return>
		<case>case <expr><name>REPLY_NXDOMAIN</name></expr>:</case>
			<return>return <expr><literal type="string">"NXDOMAIN"</literal></expr>;</return>
		<case>case <expr><name>REPLY_CNAME</name></expr>:</case>
			<return>return <expr><literal type="string">"CNAME"</literal></expr>;</return>
		<case>case <expr><name>REPLY_IP</name></expr>:</case>
			<return>return <expr><literal type="string">"IP"</literal></expr>;</return>
		<case>case <expr><name>REPLY_DOMAIN</name></expr>:</case>
			<return>return <expr><literal type="string">"DOMAIN"</literal></expr>;</return>
		<case>case <expr><name>REPLY_RRNAME</name></expr>:</case>
			<return>return <expr><literal type="string">"RRNAME"</literal></expr>;</return>
		<case>case <expr><name>REPLY_SERVFAIL</name></expr>:</case>
			<return>return <expr><literal type="string">"SERVFAIL"</literal></expr>;</return>
		<case>case <expr><name>REPLY_REFUSED</name></expr>:</case>
			<return>return <expr><literal type="string">"REFUSED"</literal></expr>;</return>
		<case>case <expr><name>REPLY_NOTIMP</name></expr>:</case>
			<return>return <expr><literal type="string">"NOTIMP"</literal></expr>;</return>
		<case>case <expr><name>REPLY_OTHER</name></expr>:</case>
			<return>return <expr><literal type="string">"OTHER"</literal></expr>;</return>
		<case>case <expr><name>REPLY_DNSSEC</name></expr>:</case>
			<return>return <expr><literal type="string">"DNSSEC"</literal></expr>;</return>
		<case>case <expr><name>REPLY_NONE</name></expr>:</case>
			<return>return <expr><literal type="string">"NONE"</literal></expr>;</return>
		<case>case <expr><name>REPLY_BLOB</name></expr>:</case>
			<return>return <expr><literal type="string">"BLOB"</literal></expr>;</return>
		<default>default:</default>
		<case>case <expr><name>QUERY_REPLY_MAX</name></expr>:</case>
			<return>return <expr><literal type="string">"INVALID"</literal></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></decl></decl_stmt>
</unit>
