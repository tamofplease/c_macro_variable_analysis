<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/config.c"><comment type="block">/* Pi-hole: A black hole for Internet advertisements
*  (c) 2017 Pi-hole, LLC (https://pi-hole.net)
*  Network-wide ad blocking via your own hardware.
*
*  FTL Engine
*  Config routines
*
*  This file is copyright under the latest version of the EUPL.
*  Please see LICENSE file for your rights under this license. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FTL.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"setupVars.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>
<comment type="line">// nice()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<comment type="line">// argv_dnsmasq</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"args.h"</cpp:file></cpp:include>

<comment type="line">// INT_MAX</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>ConfigStruct</name></type> <name>config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FTLFileNamesStruct</name></type> <name>FTLfiles</name> <init>= <expr><block>{
	<comment type="line">// Default path for config file (regular installations)</comment>
	<expr><literal type="string">"/etc/pihole/pihole-FTL.conf"</literal></expr>,
	<comment type="line">// Alternative path for config file (snap installations)</comment>
	<expr><literal type="string">"/var/snap/pihole/common/etc/pihole/pihole-FTL.conf"</literal></expr>,
	<expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<comment type="line">// Private global variables</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>conflinebuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="line">// Private prototypes</comment>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>parse_FTLconf</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>getpath</name><parameter_list>(<parameter><decl><type><name>FILE</name><modifier>*</modifier></type> <name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>defaultloc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pointer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>set_nice</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fallback</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>read_bool</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>fallback</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>init_config_mutex</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Initialize the lock attributes</comment>
	<decl_stmt><decl><type><name>pthread_mutexattr_t</name></type> <name>lock_attr</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>pthread_mutexattr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Initialize the lock</comment>
	<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lock_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Destroy the lock attributes since we're done with it</comment>
	<expr_stmt><expr><call><name>pthread_mutexattr_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>getLogFilePath</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>buffer</name></decl>;</decl_stmt>

	<comment type="line">// Try to open default config file. Use fallback if not found</comment>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>FTLfiles</name><operator>.</operator><name>conf</name></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator>
	    <operator>(</operator><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>FTLfiles</name><operator>.</operator><name>snapConf</name></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator>
	    <operator>(</operator><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"pihole-FTL.conf"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Notice: Found no readable FTL config file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Read LOGFILE value if available</comment>
	<comment type="line">// defaults to: "/var/log/pihole/FTL.log"</comment>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"LOGFILE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="line">// Use sscanf() to obtain filename from config file parameter only if buffer != NULL</comment>
	<if_stmt><if>if<condition>(<expr><name>buffer</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%127ms"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>FTLfiles</name><operator>.</operator><name>log</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Use standard path if no custom path was obtained from the config file</comment>
		<expr_stmt><expr><name><name>FTLfiles</name><operator>.</operator><name>log</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"/var/log/pihole/FTL.log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Test if memory allocation was successful</comment>
	<if_stmt><if>if<condition>(<expr><name><name>FTLfiles</name><operator>.</operator><name>log</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"FATAL: Allocating memory for FTLfiles.log failed (%s, %i). Exiting."</literal></expr></argument>,
		       <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>FTLfiles</name><operator>.</operator><name>log</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Fatal: Log file location cannot be empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Using log file %s"</literal></expr></argument>, <argument><expr><name><name>FTLfiles</name><operator>.</operator><name>log</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>read_FTLconf</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>buffer</name></decl>;</decl_stmt>

	<comment type="line">// Try to open default config file. Use fallback if not found</comment>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>FTLfiles</name><operator>.</operator><name>conf</name></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator>
	    <operator>(</operator><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>FTLfiles</name><operator>.</operator><name>snapConf</name></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator>
	    <operator>(</operator><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"pihole-FTL.conf"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Notice: Found no readable FTL config file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"        Using default settings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Parse lines in the config file</comment>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Starting config file parsing (%s)"</literal></expr></argument>, <argument><expr><name><name>FTLfiles</name><operator>.</operator><name>conf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// SOCKET_LISTENING</comment>
	<comment type="line">// defaults to: listen only local</comment>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>socket_listenlocal</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"SOCKET_LISTENING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>config</name><operator>.</operator><name>socket_listenlocal</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>socket_listenlocal</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   SOCKET_LISTENING: only local"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   SOCKET_LISTENING: all destinations"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="line">// AAAA_QUERY_ANALYSIS</comment>
	<comment type="line">// defaults to: Yes</comment>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"AAAA_QUERY_ANALYSIS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>analyze_AAAA</name></name> <operator>=</operator> <call><name>read_bool</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>analyze_AAAA</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   AAAA_QUERY_ANALYSIS: Show AAAA queries"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   AAAA_QUERY_ANALYSIS: Hide AAAA queries"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="line">// MAXDBDAYS</comment>
	<comment type="line">// defaults to: 365 days</comment>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>maxDBdays</name></name> <operator>=</operator> <literal type="number">365</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"MAXDBDAYS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxdbdays_max</name> <init>= <expr><name>INT_MAX</name> <operator>/</operator> <literal type="number">24</literal> <operator>/</operator> <literal type="number">60</literal> <operator>/</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%i"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Prevent possible overflow</comment>
		<if_stmt><if>if<condition>(<expr><name>value</name> <operator>&gt;</operator> <name>maxdbdays_max</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>value</name> <operator>=</operator> <name>maxdbdays_max</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="line">// Only use valid values</comment>
		<if_stmt><if>if<condition>(<expr><name>value</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>value</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>config</name><operator>.</operator><name>maxDBdays</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>maxDBdays</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   MAXDBDAYS: --- (DB disabled)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if<condition>(<expr><name><name>config</name><operator>.</operator><name>maxDBdays</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   MAXDBDAYS: --- (cleaning disabled)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   MAXDBDAYS: max age for stored queries is %i days"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>maxDBdays</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="line">// RESOLVE_IPV6</comment>
	<comment type="line">// defaults to: Yes</comment>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"RESOLVE_IPV6"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>resolveIPv6</name></name> <operator>=</operator> <call><name>read_bool</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>resolveIPv6</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   RESOLVE_IPV6: Resolve IPv6 addresses"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   RESOLVE_IPV6: Don\'t resolve IPv6 addresses"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="line">// RESOLVE_IPV4</comment>
	<comment type="line">// defaults to: Yes</comment>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"RESOLVE_IPV4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>resolveIPv4</name></name> <operator>=</operator> <call><name>read_bool</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>resolveIPv4</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   RESOLVE_IPV4: Resolve IPv4 addresses"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   RESOLVE_IPV4: Don\'t resolve IPv4 addresses"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="line">// DBINTERVAL</comment>
	<comment type="line">// How often do we store queries in FTL's database [minutes]?</comment>
	<comment type="line">// this value can be a floating point number, e.g. "DBINTERVAL=0.5"</comment>
	<comment type="line">// defaults to: once per minute</comment>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>DBinterval</name></name> <operator>=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"DBINTERVAL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>float</name></type> <name>fvalue</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fvalue</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<comment type="line">// check if the read value is</comment>
		<comment type="line">// - larger than 0.1min (6sec), and</comment>
		<comment type="line">// - smaller than 1440.0min (once a day)</comment>
		<if_stmt><if>if<condition>(<expr><name>fvalue</name> <operator>&gt;=</operator> <literal type="number">0.1f</literal> <operator>&amp;&amp;</operator> <name>fvalue</name> <operator>&lt;=</operator> <literal type="number">1440.0f</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>config</name><operator>.</operator><name>DBinterval</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>fvalue</name> <operator>*</operator> <literal type="number">60</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>DBinterval</name></name> <operator>==</operator> <literal type="number">60</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   DBINTERVAL: saving to DB file every minute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   DBINTERVAL: saving to DB file every %lli seconds"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name><name>config</name><operator>.</operator><name>DBinterval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="line">// DBFILE</comment>
	<comment type="line">// defaults to: "/etc/pihole/pihole-FTL.db"</comment>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"DBFILE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Use sscanf() to obtain filename from config file parameter only if buffer != NULL</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>buffer</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%127ms"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>FTLfiles</name><operator>.</operator><name>FTL_db</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Use standard path if no custom path was obtained from the config file</comment>
		<expr_stmt><expr><name><name>FTLfiles</name><operator>.</operator><name>FTL_db</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"/etc/pihole/pihole-FTL.db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>FTLfiles</name><operator>.</operator><name>FTL_db</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>FTLfiles</name><operator>.</operator><name>FTL_db</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   DBFILE: Using %s"</literal></expr></argument>, <argument><expr><name><name>FTLfiles</name><operator>.</operator><name>FTL_db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<comment type="line">// Use standard path if path was set to zero but override</comment>
		<comment type="line">// MAXDBDAYS=0 to ensure no queries are stored in the database</comment>
		<expr_stmt><expr><name><name>FTLfiles</name><operator>.</operator><name>FTL_db</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"/etc/pihole/pihole-FTL.db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>config</name><operator>.</operator><name>maxDBdays</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   DBFILE: Using %s (not storing queries)"</literal></expr></argument>, <argument><expr><name><name>FTLfiles</name><operator>.</operator><name>FTL_db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="line">// FTLPORT</comment>
	<comment type="line">// On which port should FTL be listening?</comment>
	<comment type="line">// defaults to: 4711</comment>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>port</name></name> <operator>=</operator> <literal type="number">4711</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"FTLPORT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%i"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<if_stmt><if>if<condition>(<expr><name>value</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>&lt;=</operator> <literal type="number">65535</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>config</name><operator>.</operator><name>port</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

	<comment type="line">// MAXLOGAGE</comment>
	<comment type="line">// Up to how many hours in the past should queries be imported from the database?</comment>
	<comment type="line">// defaults to: 24.0 via MAXLOGAGE defined in FTL.h</comment>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>maxlogage</name></name> <operator>=</operator> <name>MAXLOGAGE</name><operator>*</operator><literal type="number">3600</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"MAXLOGAGE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>fvalue</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hint</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fvalue</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name>fvalue</name> <operator>&gt;=</operator> <literal type="number">0.0f</literal> <operator>&amp;&amp;</operator> <name>fvalue</name> <operator>&lt;=</operator> <literal type="number">1.0f</literal><operator>*</operator><name>MAXLOGAGE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>config</name><operator>.</operator><name>maxlogage</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>fvalue</name> <operator>*</operator> <literal type="number">3600</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if<condition>(<expr><name>fvalue</name> <operator>&gt;</operator> <literal type="number">1.0f</literal><operator>*</operator><name>MAXLOGAGE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>hint</name> <operator>=</operator> <literal type="string">" (value has been clipped to "</literal> <call><name>str</name><argument_list>(<argument><expr><name>MAXLOGAGE</name></expr></argument>)</argument_list></call> <literal type="string">" hours)"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   MAXLOGAGE: Importing up to %.1f hours of log data%s"</literal></expr></argument>,
	     <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>config</name><operator>.</operator><name>maxlogage</name></name><operator>/</operator><literal type="number">3600.0f</literal></expr></argument>, <argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// PRIVACYLEVEL</comment>
	<comment type="line">// Specify if we want to anonymize the DNS queries somehow, available options are:</comment>
	<comment type="line">// PRIVACY_SHOW_ALL (0) = don't hide anything</comment>
	<comment type="line">// PRIVACY_HIDE_DOMAINS (1) = show and store all domains as "hidden", return nothing for Top Domains + Top Ads</comment>
	<comment type="line">// PRIVACY_HIDE_DOMAINS_CLIENTS (2) = as above, show all domains as "hidden" and all clients as "127.0.0.1"</comment>
	<comment type="line">//                                    (or "::1"), return nothing for any Top Lists</comment>
	<comment type="line">// PRIVACY_MAXIMUM (3) = Disabled basically everything except the anonymous statistics, there will be no entries</comment>
	<comment type="line">//                       added to the database, no entries visible in the query log and no Top Item Lists</comment>
	<comment type="line">// PRIVACY_NOSTATS (4) = Disable any analysis on queries. No counters are available in this mode.</comment>
	<comment type="line">// defaults to: PRIVACY_SHOW_ALL</comment>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>privacylevel</name></name> <operator>=</operator> <name>PRIVACY_SHOW_ALL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>get_privacy_level</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   PRIVACYLEVEL: Set to %i"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>privacylevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// IGNORE_LOCALHOST</comment>
	<comment type="line">// defaults to: false</comment>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"IGNORE_LOCALHOST"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>ignore_localhost</name></name> <operator>=</operator> <call><name>read_bool</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"yes"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>config</name><operator>.</operator><name>ignore_localhost</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>ignore_localhost</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   IGNORE_LOCALHOST: Hide queries from localhost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   IGNORE_LOCALHOST: Show queries from localhost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="line">// BLOCKINGMODE</comment>
	<comment type="line">// defaults to: MODE_IP</comment>
	<expr_stmt><expr><call><name>get_blocking_mode</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch>switch<condition>(<expr><name><name>config</name><operator>.</operator><name>blockingmode</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>MODE_NX</name></expr>:</case>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   BLOCKINGMODE: NXDOMAIN for blocked domains"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>MODE_NULL</name></expr>:</case>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   BLOCKINGMODE: Null IPs for blocked domains"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>MODE_IP_NODATA_AAAA</name></expr>:</case>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   BLOCKINGMODE: Pi-hole's IP + NODATA-IPv6 for blocked domains"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>MODE_NODATA</name></expr>:</case>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   BLOCKINGMODE: Using NODATA for blocked domains"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>MODE_IP</name></expr>:</case>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   BLOCKINGMODE: Pi-hole's IPs for blocked domains"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<comment type="line">// ANALYZE_ONLY_A_AND_AAAA</comment>
	<comment type="line">// defaults to: false</comment>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"ANALYZE_ONLY_A_AND_AAAA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>analyze_only_A_AAAA</name></name> <operator>=</operator> <call><name>read_bool</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>config</name><operator>.</operator><name>analyze_only_A_AAAA</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>analyze_only_A_AAAA</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   ANALYZE_ONLY_A_AND_AAAA: Enabled. Analyzing only A and AAAA queries"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   ANALYZE_ONLY_A_AND_AAAA: Disabled. Analyzing all queries"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="line">// DBIMPORT</comment>
	<comment type="line">// defaults to: Yes</comment>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"DBIMPORT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>DBimport</name></name> <operator>=</operator> <call><name>read_bool</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>DBimport</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   DBIMPORT: Importing history from database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>maxDBdays</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"      Hint: Exporting queries has been disabled (MAXDBDAYS=0)!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   DBIMPORT: Not importing history from database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="line">// PIDFILE</comment>
	<expr_stmt><expr><call><name>getpath</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"PIDFILE"</literal></expr></argument>, <argument><expr><literal type="string">"/run/pihole-FTL.pid"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>FTLfiles</name><operator>.</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// SOCKETFILE</comment>
	<expr_stmt><expr><call><name>getpath</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"SOCKETFILE"</literal></expr></argument>, <argument><expr><literal type="string">"/run/pihole/FTL.sock"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>FTLfiles</name><operator>.</operator><name>socketfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// SETUPVARSFILE</comment>
	<expr_stmt><expr><call><name>getpath</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"SETUPVARSFILE"</literal></expr></argument>, <argument><expr><literal type="string">"/etc/pihole/setupVars.conf"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>FTLfiles</name><operator>.</operator><name>setupVars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// MACVENDORDB</comment>
	<expr_stmt><expr><call><name>getpath</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"MACVENDORDB"</literal></expr></argument>, <argument><expr><literal type="string">"/etc/pihole/macvendor.db"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>FTLfiles</name><operator>.</operator><name>macvendor_db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// GRAVITYDB</comment>
	<expr_stmt><expr><call><name>getpath</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"GRAVITYDB"</literal></expr></argument>, <argument><expr><literal type="string">"/etc/pihole/gravity.db"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>FTLfiles</name><operator>.</operator><name>gravity_db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// PARSE_ARP_CACHE</comment>
	<comment type="line">// defaults to: true</comment>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"PARSE_ARP_CACHE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>parse_arp_cache</name></name> <operator>=</operator> <call><name>read_bool</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>parse_arp_cache</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   PARSE_ARP_CACHE: Active"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   PARSE_ARP_CACHE: Inactive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="line">// CNAME_DEEP_INSPECT</comment>
	<comment type="line">// defaults to: true</comment>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"CNAME_DEEP_INSPECT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>cname_inspection</name></name> <operator>=</operator> <call><name>read_bool</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>cname_inspection</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   CNAME_DEEP_INSPECT: Active"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   CNAME_DEEP_INSPECT: Inactive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="line">// DELAY_STARTUP</comment>
	<comment type="line">// defaults to: zero (seconds)</comment>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"DELAY_STARTUP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>delay_startup</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>config</name><operator>.</operator><name>delay_startup</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	   <operator>(</operator><name><name>config</name><operator>.</operator><name>delay_startup</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>config</name><operator>.</operator><name>delay_startup</name></name> <operator>&lt;=</operator> <literal type="number">300</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   DELAY_STARTUP: Requested to wait %u seconds during startup."</literal></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>delay_startup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   DELAY_STARTUP: No delay requested."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="line">// BLOCK_ESNI</comment>
	<comment type="line">// defaults to: true</comment>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"BLOCK_ESNI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>block_esni</name></name> <operator>=</operator> <call><name>read_bool</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>block_esni</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   BLOCK_ESNI: Enabled, blocking _esni.{blocked domain}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   BLOCK_ESNI: Disabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="line">// NICE</comment>
	<comment type="line">// Shall we change the nice of the current process?</comment>
	<comment type="line">// defaults to: -10 (can be disabled by setting value to -999)</comment>
	<comment type="line">//</comment>
	<comment type="line">// The nice value is an attribute that can be used to influence the CPU</comment>
	<comment type="line">// scheduler to favor or disfavor a process in scheduling decisions.</comment>
	<comment type="line">//</comment>
	<comment type="line">// The range of the nice value varies across UNIX systems. On modern Linux,</comment>
	<comment type="line">// the range is -20 (high priority) to +19 (low priority). On some other</comment>
	<comment type="line">// systems, the range is -20..20. Very early Linux kernels (Before Linux</comment>
	<comment type="line">// 2.0) had the range -infinity..15.</comment>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"NICE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_nice</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// MAXNETAGE</comment>
	<comment type="line">// IP addresses (and associated host names) older than the specified number</comment>
	<comment type="line">// of days are removed to avoid dead entries in the network overview table</comment>
	<comment type="line">// defaults to: the same value as MAXDBDAYS</comment>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>network_expire</name></name> <operator>=</operator> <name><name>config</name><operator>.</operator><name>maxDBdays</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"MAXNETAGE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>ivalue</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
	    <call><name>sscanf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%i"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ivalue</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	    <name>ivalue</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ivalue</name> <operator>&lt;=</operator> <literal type="number">8760</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// 8760 days = 24 years</comment>
			<expr_stmt><expr><name><name>config</name><operator>.</operator><name>network_expire</name></name> <operator>=</operator> <name>ivalue</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>network_expire</name></name> <operator>&gt;</operator> <literal type="number">0u</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   MAXNETAGE: Removing IP addresses and host names from network table after %u days"</literal></expr></argument>,
		     <argument><expr><name><name>config</name><operator>.</operator><name>network_expire</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   MAXNETAGE: No automated removal of IP addresses and host names from the network table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="line">// NAMES_FROM_NETDB</comment>
	<comment type="line">// Should we use the fallback option to try to obtain client names from</comment>
	<comment type="line">// checking the network table? Assume this is an IPv6 client without a</comment>
	<comment type="line">// host names itself but the network table tells us that this is the same</comment>
	<comment type="line">// device where we have a host names for its IPv4 address. In this case,</comment>
	<comment type="line">// we use the host name associated to the other address as this is the same</comment>
	<comment type="line">// device. This behavior can be disabled using NAMES_FROM_NETDB=false</comment>
	<comment type="line">// defaults to: true</comment>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"NAMES_FROM_NETDB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>names_from_netdb</name></name> <operator>=</operator> <call><name>read_bool</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>names_from_netdb</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   NAMES_FROM_NETDB: Enabled, trying to get names from network database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   NAMES_FROM_NETDB: Disabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="line">// EDNS0_ECS</comment>
	<comment type="line">// Should we overwrite the query source when client information is</comment>
	<comment type="line">// provided through EDNS0 client subnet (ECS) information?</comment>
	<comment type="line">// defaults to: true</comment>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"EDNS0_ECS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>edns0_ecs</name></name> <operator>=</operator> <call><name>read_bool</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>edns0_ecs</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   EDNS0_ECS: Overwrite client from ECS information"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   EDNS0_ECS: Don't use ECS information"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="line">// REFRESH_HOSTNAMES</comment>
	<comment type="line">// defaults to: IPV4</comment>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"REFRESH_HOSTNAMES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"ALL"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>config</name><operator>.</operator><name>refresh_hostnames</name></name> <operator>=</operator> <name>REFRESH_ALL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   REFRESH_HOSTNAMES: Periodically refreshing all names"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>config</name><operator>.</operator><name>refresh_hostnames</name></name> <operator>=</operator> <name>REFRESH_NONE</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   REFRESH_HOSTNAMES: Not periodically refreshing names"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"UNKNOWN"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>config</name><operator>.</operator><name>refresh_hostnames</name></name> <operator>=</operator> <name>REFRESH_UNKNOWN</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   REFRESH_HOSTNAMES: Only refreshing recently active clients with unknown hostnames"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>config</name><operator>.</operator><name>refresh_hostnames</name></name> <operator>=</operator> <name>REFRESH_IPV4_ONLY</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   REFRESH_HOSTNAMES: Periodically refreshing IPv4 names"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="line">// RATE_LIMIT</comment>
	<comment type="line">// defaults to: 1000 queries / 60 seconds</comment>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>rate_limit</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>rate_limit</name><operator>.</operator><name>interval</name></name> <operator>=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"RATE_LIMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>interval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%u/%u"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>interval</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>config</name><operator>.</operator><name>rate_limit</name><operator>.</operator><name>count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>config</name><operator>.</operator><name>rate_limit</name><operator>.</operator><name>interval</name></name> <operator>=</operator> <name>interval</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>rate_limit</name><operator>.</operator><name>count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   RATE_LIMIT: Rate-limiting client making more than %u queries in %u second%s"</literal></expr></argument>,
		     <argument><expr><name><name>config</name><operator>.</operator><name>rate_limit</name><operator>.</operator><name>count</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>rate_limit</name><operator>.</operator><name>interval</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>config</name><operator>.</operator><name>rate_limit</name><operator>.</operator><name>interval</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"s"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   RATE_LIMIT: Disabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="line">// LOCAL_IPV4</comment>
	<comment type="line">// Use a specific IP address instead of automatically detecting the</comment>
	<comment type="line">// IPv4 interface address a query arrived on for A hostname queries</comment>
	<comment type="line">// defaults to: not set</comment>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>reply_addr</name><operator>.</operator><name>own_host</name><operator>.</operator><name>overwrite_v4</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>reply_addr</name><operator>.</operator><name>own_host</name><operator>.</operator><name>v4</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"LOCAL_IPV4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>config</name><operator>.</operator><name>reply_addr</name><operator>.</operator><name>own_host</name><operator>.</operator><name>v4</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>config</name><operator>.</operator><name>reply_addr</name><operator>.</operator><name>own_host</name><operator>.</operator><name>overwrite_v4</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>reply_addr</name><operator>.</operator><name>own_host</name><operator>.</operator><name>overwrite_v4</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type> <name><name>addr</name><index>[<expr><name>INET_ADDRSTRLEN</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>config</name><operator>.</operator><name>reply_addr</name><operator>.</operator><name>own_host</name><operator>.</operator><name>v4</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>INET_ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   LOCAL_IPV4: Using IPv4 address %s for pi.hole and hostname"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   LOCAL_IPV4: Automatic interface-dependent detection of address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="line">// LOCAL_IPV6</comment>
	<comment type="line">// Use a specific IP address instead of automatically detecting the</comment>
	<comment type="line">// IPv6 interface address a query arrived on for AAAA hostname queries</comment>
	<comment type="line">// defaults to: not set</comment>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>reply_addr</name><operator>.</operator><name>own_host</name><operator>.</operator><name>overwrite_v6</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>.</operator><name>reply_addr</name><operator>.</operator><name>own_host</name><operator>.</operator><name>v6</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>reply_addr</name><operator>.</operator><name>own_host</name><operator>.</operator><name>v6</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"LOCAL_IPV6"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>config</name><operator>.</operator><name>reply_addr</name><operator>.</operator><name>own_host</name><operator>.</operator><name>v6</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>config</name><operator>.</operator><name>reply_addr</name><operator>.</operator><name>own_host</name><operator>.</operator><name>overwrite_v6</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>reply_addr</name><operator>.</operator><name>own_host</name><operator>.</operator><name>overwrite_v6</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type> <name><name>addr</name><index>[<expr><name>INET6_ADDRSTRLEN</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>config</name><operator>.</operator><name>reply_addr</name><operator>.</operator><name>own_host</name><operator>.</operator><name>v6</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>INET6_ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   LOCAL_IPV6: Using IPv6 address %s for pi.hole and hostname"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   LOCAL_IPV6: Automatic interface-dependent detection of address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="line">// BLOCK_IPV4</comment>
	<comment type="line">// Use a specific IPv4 address for IP blocking mode replies</comment>
	<comment type="line">// defaults to: REPLY_ADDR4 setting</comment>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>reply_addr</name><operator>.</operator><name>ip_blocking</name><operator>.</operator><name>overwrite_v4</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>reply_addr</name><operator>.</operator><name>ip_blocking</name><operator>.</operator><name>v4</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"BLOCK_IPV4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>config</name><operator>.</operator><name>reply_addr</name><operator>.</operator><name>ip_blocking</name><operator>.</operator><name>v4</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>config</name><operator>.</operator><name>reply_addr</name><operator>.</operator><name>ip_blocking</name><operator>.</operator><name>overwrite_v4</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>reply_addr</name><operator>.</operator><name>ip_blocking</name><operator>.</operator><name>overwrite_v4</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type> <name><name>addr</name><index>[<expr><name>INET_ADDRSTRLEN</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>config</name><operator>.</operator><name>reply_addr</name><operator>.</operator><name>ip_blocking</name><operator>.</operator><name>v4</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>INET_ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   BLOCK_IPV4: Using IPv4 address %s in IP blocking mode"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   BLOCK_IPV4: Automatic interface-dependent detection of address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="line">// BLOCK_IPV6</comment>
	<comment type="line">// Use a specific IPv6 address for IP blocking mode replies</comment>
	<comment type="line">// defaults to: REPLY_ADDR6 setting</comment>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>reply_addr</name><operator>.</operator><name>ip_blocking</name><operator>.</operator><name>overwrite_v6</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>.</operator><name>reply_addr</name><operator>.</operator><name>ip_blocking</name><operator>.</operator><name>v6</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>reply_addr</name><operator>.</operator><name>own_host</name><operator>.</operator><name>v6</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"BLOCK_IPV6"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>config</name><operator>.</operator><name>reply_addr</name><operator>.</operator><name>ip_blocking</name><operator>.</operator><name>v6</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>config</name><operator>.</operator><name>reply_addr</name><operator>.</operator><name>ip_blocking</name><operator>.</operator><name>overwrite_v6</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>reply_addr</name><operator>.</operator><name>ip_blocking</name><operator>.</operator><name>overwrite_v6</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type> <name><name>addr</name><index>[<expr><name>INET6_ADDRSTRLEN</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>config</name><operator>.</operator><name>reply_addr</name><operator>.</operator><name>ip_blocking</name><operator>.</operator><name>v6</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>INET6_ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   BLOCK_IPV6: Using IPv6 address %s in IP blocking mode"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   BLOCK_IPV6: Automatic interface-dependent detection of address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="line">// REPLY_ADDR4 (deprecated setting)</comment>
	<comment type="line">// Use a specific IP address instead of automatically detecting the</comment>
	<comment type="line">// IPv4 interface address a query arrived on A hostname and IP blocked queries</comment>
	<comment type="line">// defaults to: not set</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>reply_addr4</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"REPLY_ADDR4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reply_addr4</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>reply_addr</name><operator>.</operator><name>own_host</name><operator>.</operator><name>overwrite_v4</name></name> <operator>||</operator> <name><name>config</name><operator>.</operator><name>reply_addr</name><operator>.</operator><name>ip_blocking</name><operator>.</operator><name>overwrite_v4</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   WARNING: Ignoring REPLY_ADDR4 as LOCAL_IPV4 or BLOCK_IPV4 has been specified."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name><name>config</name><operator>.</operator><name>reply_addr</name><operator>.</operator><name>own_host</name><operator>.</operator><name>overwrite_v4</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>.</operator><name>reply_addr</name><operator>.</operator><name>own_host</name><operator>.</operator><name>v4</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reply_addr4</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>reply_addr4</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>config</name><operator>.</operator><name>reply_addr</name><operator>.</operator><name>ip_blocking</name><operator>.</operator><name>overwrite_v4</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>.</operator><name>reply_addr</name><operator>.</operator><name>ip_blocking</name><operator>.</operator><name>v4</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reply_addr4</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>reply_addr4</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>char</name></type> <name><name>addr</name><index>[<expr><name>INET_ADDRSTRLEN</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reply_addr4</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>INET_ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   REPLY_ADDR4: Using IPv4 address %s instead of automatically determined IP address"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// REPLY_ADDR6 (deprecated setting)</comment>
	<comment type="line">// Use a specific IP address instead of automatically detecting the</comment>
	<comment type="line">// IPv4 interface address a query arrived on A hostname and IP blocked queries</comment>
	<comment type="line">// defaults to: not set</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>reply_addr6</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"REPLY_ADDR6"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reply_addr6</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>reply_addr</name><operator>.</operator><name>own_host</name><operator>.</operator><name>overwrite_v6</name></name> <operator>||</operator> <name><name>config</name><operator>.</operator><name>reply_addr</name><operator>.</operator><name>ip_blocking</name><operator>.</operator><name>overwrite_v6</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   WARNING: Ignoring REPLY_ADDR6 as LOCAL_IPV6 or BLOCK_IPV6 has been specified."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name><name>config</name><operator>.</operator><name>reply_addr</name><operator>.</operator><name>own_host</name><operator>.</operator><name>overwrite_v6</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>.</operator><name>reply_addr</name><operator>.</operator><name>own_host</name><operator>.</operator><name>v6</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reply_addr6</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>reply_addr6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>config</name><operator>.</operator><name>reply_addr</name><operator>.</operator><name>ip_blocking</name><operator>.</operator><name>overwrite_v6</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>.</operator><name>reply_addr</name><operator>.</operator><name>ip_blocking</name><operator>.</operator><name>v6</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reply_addr6</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>reply_addr6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>char</name></type> <name><name>addr</name><index>[<expr><name>INET6_ADDRSTRLEN</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reply_addr6</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>INET6_ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   REPLY_ADDR6: Using IPv6 address %s instead of automatically determined IP address"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// SHOW_DNSSEC</comment>
	<comment type="line">// Should FTL analyze and include automatically generated DNSSEC queries in the Query Log?</comment>
	<comment type="line">// defaults to: true</comment>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"SHOW_DNSSEC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>show_dnssec</name></name> <operator>=</operator> <call><name>read_bool</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>show_dnssec</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   SHOW_DNSSEC: Enabled, showing automatically generated DNSSEC queries"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   SHOW_DNSSEC: Disabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="line">// MOZILLA_CANARY</comment>
	<comment type="line">// Should FTL handle use-application-dns.net specifically and always return NXDOMAIN?</comment>
	<comment type="line">// defaults to: true</comment>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"MOZILLA_CANARY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>special_domains</name><operator>.</operator><name>mozilla_canary</name></name> <operator>=</operator> <call><name>read_bool</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>special_domains</name><operator>.</operator><name>mozilla_canary</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   MOZILLA_CANARY: Enabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   MOZILLA_CANARY: Disabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="line">// PIHOLE_PTR</comment>
	<comment type="line">// Should FTL return "pi.hole" as name for PTR requests to local IP addresses?</comment>
	<comment type="line">// defaults to: PI.HOLE</comment>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"PIHOLE_PTR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
	                      <call><name>strcasecmp</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>config</name><operator>.</operator><name>pihole_ptr</name></name> <operator>=</operator> <name>PTR_NONE</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   PIHOLE_PTR: internal PTR generation disabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"hostname"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>config</name><operator>.</operator><name>pihole_ptr</name></name> <operator>=</operator> <name>PTR_HOSTNAME</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   PIHOLE_PTR: internal PTR generation enabled (hostname)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"hostnamefqdn"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>config</name><operator>.</operator><name>pihole_ptr</name></name> <operator>=</operator> <name>PTR_HOSTNAMEFQDN</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   PIHOLE_PTR: internal PTR generation enabled (fully-qualified hostname)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>config</name><operator>.</operator><name>pihole_ptr</name></name> <operator>=</operator> <name>PTR_PIHOLE</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   PIHOLE_PTR: internal PTR generation enabled (pi.hole)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="line">// ADDR2LINE</comment>
	<comment type="line">// Should FTL try to call addr2line when generating backtraces?</comment>
	<comment type="line">// defaults to: true</comment>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"ADDR2LINE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>addr2line</name></name> <operator>=</operator> <call><name>read_bool</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>addr2line</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   ADDR2LINE: Enabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   ADDR2LINE: Disabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="line">// REPLY_WHEN_BUSY</comment>
	<comment type="line">// How should FTL handle queries when the gravity database is not available?</comment>
	<comment type="line">// defaults to: DROP</comment>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"REPLY_WHEN_BUSY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"ALLOW"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>config</name><operator>.</operator><name>reply_when_busy</name></name> <operator>=</operator> <name>BUSY_ALLOW</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   REPLY_WHEN_BUSY: Permit queries when the database is busy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"REFUSE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>config</name><operator>.</operator><name>reply_when_busy</name></name> <operator>=</operator> <name>BUSY_REFUSE</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   REPLY_WHEN_BUSY: Refuse queries when the database is busy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"BLOCK"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>config</name><operator>.</operator><name>reply_when_busy</name></name> <operator>=</operator> <name>BUSY_BLOCK</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   REPLY_WHEN_BUSY: Block queries when the database is busy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>config</name><operator>.</operator><name>reply_when_busy</name></name> <operator>=</operator> <name>BUSY_DROP</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   REPLY_WHEN_BUSY: Drop queries when the database is busy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="line">// BLOCK_TTL</comment>
	<comment type="line">// defaults to: 2 seconds</comment>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>block_ttl</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"BLOCK_TTL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>uval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>uval</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>config</name><operator>.</operator><name>block_ttl</name></name> <operator>=</operator> <name>uval</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>block_ttl</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   BLOCK_TTL: 1 second"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   BLOCK_TTL: %u seconds"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>block_ttl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="line">// BLOCK_ICLOUD_PR</comment>
	<comment type="line">// Should FTL handle the iCloud privacy relay domains specifically and</comment>
	<comment type="line">// always return NXDOMAIN?</comment>
	<comment type="line">// defaults to: true</comment>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"BLOCK_ICLOUD_PR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>special_domains</name><operator>.</operator><name>icloud_private_relay</name></name> <operator>=</operator> <call><name>read_bool</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>special_domains</name><operator>.</operator><name>icloud_private_relay</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   BLOCK_ICLOUD_PR: Enabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   BLOCK_ICLOUD_PR: Disabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="line">// CHECK_LOAD</comment>
	<comment type="line">// Should FTL check the 15 min average of CPU load and complain if the</comment>
	<comment type="line">// load is larger than the number of available CPU cores?</comment>
	<comment type="line">// defaults to: true</comment>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"CHECK_LOAD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>check</name><operator>.</operator><name>load</name></name> <operator>=</operator> <call><name>read_bool</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>check</name><operator>.</operator><name>load</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   CHECK_LOAD: Enabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   CHECK_LOAD: Disabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="line">// CHECK_SHMEM</comment>
	<comment type="line">// Limit above which FTL should complain about a shared-memory shortage</comment>
	<comment type="line">// defaults to: 90%</comment>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>check</name><operator>.</operator><name>shmem</name></name> <operator>=</operator> <literal type="number">90</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"CHECK_SHMEM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
	    <call><name>sscanf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%i"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ivalue</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	    <name>ivalue</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ivalue</name> <operator>&lt;=</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>config</name><operator>.</operator><name>check</name><operator>.</operator><name>shmem</name></name> <operator>=</operator> <name>ivalue</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   CHECK_SHMEM: Warning if shared-memory usage exceeds %d%%"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>check</name><operator>.</operator><name>shmem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// CHECK_DISK</comment>
	<comment type="line">// Limit above which FTL should complain about disk shortage for checked files</comment>
	<comment type="line">// defaults to: 90%</comment>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>check</name><operator>.</operator><name>disk</name></name> <operator>=</operator> <literal type="number">90</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"CHECK_DISK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
	    <call><name>sscanf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%i"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ivalue</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	    <name>ivalue</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ivalue</name> <operator>&lt;=</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>config</name><operator>.</operator><name>check</name><operator>.</operator><name>disk</name></name> <operator>=</operator> <name>ivalue</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   CHECK_DISK: Warning if certain disk usage exceeds %d%%"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>check</name><operator>.</operator><name>disk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Read DEBUG_... setting from pihole-FTL.conf</comment>
	<expr_stmt><expr><call><name>read_debuging_settings</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Finished config file parsing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>fp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>getpath</name><parameter_list>(<parameter><decl><type><name>FILE</name><modifier>*</modifier></type> <name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>defaultloc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pointer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// This subroutine is used to read paths from pihole-FTL.conf</comment>
	<comment type="line">// fp:         File pointer to opened and readable config file</comment>
	<comment type="line">// option:     Option string ("key") to try to read</comment>
	<comment type="line">// defaultloc: Value used if key is not found in file</comment>
	<comment type="line">// pointer:    Location where read (or default) parameter is stored</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="line">// Use sscanf() to obtain filename from config file parameter only if buffer != NULL</comment>
	<if_stmt><if>if<condition>(<expr><name>buffer</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%127ms"</literal></expr></argument>, <argument><expr><name>pointer</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Use standard path if no custom path was obtained from the config file</comment>
		<expr_stmt><expr><operator>*</operator><name>pointer</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>defaultloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Test if memory allocation was successful</comment>
	<if_stmt><if>if<condition>(<expr><operator>*</operator><name>pointer</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"FATAL: Allocating memory for %s failed (%s, %i). Exiting."</literal></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>pointer</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   %s: Empty file name is not possible!"</literal></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   %s: Using %s"</literal></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><operator>*</operator><name>pointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>parse_FTLconf</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Return NULL if fp is an invalid file pointer</comment>
	<if_stmt><if>if<condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>keystr</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>keystr</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"WARN: parse_FTLconf failed: could not allocate memory for keystr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>, <argument><expr><literal type="string">"%s="</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Lock mutex</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>lret</name> <init>= <expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_LOCKS</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Obtained config lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>lret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Error when obtaining config lock: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>lret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Go to beginning of file</comment>
	<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_EXTRA</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"initial: conflinebuffer = %p, keystr = %p, size = %zu"</literal></expr></argument>, <argument><expr><name>conflinebuffer</name></expr></argument>, <argument><expr><name>keystr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Set size to zero if conflinebuffer is not available here</comment>
	<comment type="line">// This causes getline() to allocate memory for the buffer itself</comment>
	<if_stmt><if>if<condition>(<expr><name>conflinebuffer</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<while>while<condition>(<expr><call><name>getline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conflinebuffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_EXTRA</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"conflinebuffer = %p, keystr = %p, size = %zu"</literal></expr></argument>, <argument><expr><name>conflinebuffer</name></expr></argument>, <argument><expr><name>keystr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"  while reading line \"%s\" looking for \"%s\""</literal></expr></argument>, <argument><expr><name>conflinebuffer</name></expr></argument>, <argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="line">// Check if memory allocation failed</comment>
		<if_stmt><if>if<condition>(<expr><name>conflinebuffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<comment type="line">// Skip comment lines</comment>
		<if_stmt><if>if<condition>(<expr><name><name>conflinebuffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal> <operator>||</operator> <name><name>conflinebuffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// Skip lines with other keys</comment>
		<if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>strstr</name><argument_list>(<argument><expr><name>conflinebuffer</name></expr></argument>, <argument><expr><name>keystr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// *** MATCH ****</comment>

		<comment type="line">// Note: value is still a pointer into the conflinebuffer,</comment>
		<comment type="line">// no need to duplicate memory here</comment>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>find_equals</name><argument_list>(<argument><expr><name>conflinebuffer</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

		<comment type="line">// Trim whitespace at beginning and end, this function modifies</comment>
		<comment type="line">// the string inplace</comment>
		<expr_stmt><expr><call><name>trim_whitespace</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>uret</name> <init>= <expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_LOCKS</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Released config lock (match)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if<condition>(<expr><name>uret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Error when releasing config lock (match): %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>uret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="line">// Free keystr memory</comment>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>value</name></expr>;</return>
	</block_content>}</block></while>

	<if_stmt><if>if<condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"WARN: parse_FTLconf failed: could not allocate memory for getline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>uret</name> <init>= <expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_LOCKS</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Released config lock (no match)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>uret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Error when releasing config lock (no match): %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>uret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Key not found or memory error -&gt; return NULL</comment>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>get_privacy_level</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// See if we got a file handle, if not we have to open</comment>
	<comment type="line">// the config file ourselves</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>opened</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>FTLfiles</name><operator>.</operator><name>conf</name></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<comment type="line">// Return silently if there is no config file available</comment>
			<return>return;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>opened</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"PRIVACYLEVEL"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%i"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Check for change and validity of privacy level (set in FTL.h)</comment>
		<if_stmt><if>if<condition>(<expr><name>value</name> <operator>&gt;=</operator> <name>PRIVACY_SHOW_ALL</name> <operator>&amp;&amp;</operator>
		   <name>value</name> <operator>&lt;=</operator> <name>PRIVACY_MAXIMUM</name> <operator>&amp;&amp;</operator>
		   <name>value</name> <operator>&gt;</operator> <name><name>config</name><operator>.</operator><name>privacylevel</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Notice: Increasing privacy level from %i to %i"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>privacylevel</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>config</name><operator>.</operator><name>privacylevel</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Have to close the config file if we opened it</comment>
	<if_stmt><if>if<condition>(<expr><name>opened</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>get_blocking_mode</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Set default value</comment>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>blockingmode</name></name> <operator>=</operator> <name>MODE_NULL</name></expr>;</expr_stmt>

	<comment type="line">// See if we got a file handle, if not we have to open</comment>
	<comment type="line">// the config file ourselves</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>opened</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>FTLfiles</name><operator>.</operator><name>conf</name></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<comment type="line">// Return silently if there is no config file available</comment>
			<return>return;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>opened</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Get config string (if present)</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"BLOCKINGMODE"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"NXDOMAIN"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>config</name><operator>.</operator><name>blockingmode</name></name> <operator>=</operator> <name>MODE_NX</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>config</name><operator>.</operator><name>blockingmode</name></name> <operator>=</operator> <name>MODE_NULL</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"IP-NODATA-AAAA"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>config</name><operator>.</operator><name>blockingmode</name></name> <operator>=</operator> <name>MODE_IP_NODATA_AAAA</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"IP"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>config</name><operator>.</operator><name>blockingmode</name></name> <operator>=</operator> <name>MODE_IP</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"NODATA"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>config</name><operator>.</operator><name>blockingmode</name></name> <operator>=</operator> <name>MODE_NODATA</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Ignoring unknown blocking mode, fallback is NULL blocking"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Have to close the config file if we opened it</comment>
	<if_stmt><if>if<condition>(<expr><name>opened</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// Routine for setting the debug flags in the config struct</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>setDebugOption</name><parameter_list>(<parameter><decl><type><name>FILE</name><modifier>*</modifier></type> <name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>option</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>debug_flags</name></name></type> <name>bitmask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>buffer</name> <init>= <expr><call><name>parse_FTLconf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Return early if the key has not been found in FTL's config file</comment>
	<if_stmt><if>if<condition>(<expr><name>buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// Set bit if value equals "true", clear bit otherwise</comment>
	<if_stmt><if>if<condition>(<expr><call><name>read_bool</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>|=</operator> <name>bitmask</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;=</operator> <operator>~</operator><name>bitmask</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>read_debuging_settings</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Set default (no debug instructions set)</comment>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="line">// See if we got a file handle, if not we have to open</comment>
	<comment type="line">// the config file ourselves</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>opened</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>FTLfiles</name><operator>.</operator><name>conf</name></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<comment type="line">// Return silently if there is no config file available</comment>
			<return>return;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>opened</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// DEBUG_ALL</comment>
	<comment type="line">// defaults to: false</comment>
	<comment type="line">// ~0 is a shortcut for "all bits set"</comment>
	<expr_stmt><expr><call><name>setDebugOption</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"DEBUG_ALL"</literal></expr></argument>, <argument><expr><operator>~</operator><operator>(</operator><name>int16_t</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// DEBUG_DATABASE</comment>
	<comment type="line">// defaults to: false</comment>
	<expr_stmt><expr><call><name>setDebugOption</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"DEBUG_DATABASE"</literal></expr></argument>, <argument><expr><name>DEBUG_DATABASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// DEBUG_NETWORKING</comment>
	<comment type="line">// defaults to: false</comment>
	<expr_stmt><expr><call><name>setDebugOption</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"DEBUG_NETWORKING"</literal></expr></argument>, <argument><expr><name>DEBUG_NETWORKING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// DEBUG_LOCKS</comment>
	<comment type="line">// defaults to: false</comment>
	<expr_stmt><expr><call><name>setDebugOption</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"DEBUG_LOCKS"</literal></expr></argument>, <argument><expr><name>DEBUG_LOCKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// DEBUG_QUERIES</comment>
	<comment type="line">// defaults to: false</comment>
	<expr_stmt><expr><call><name>setDebugOption</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"DEBUG_QUERIES"</literal></expr></argument>, <argument><expr><name>DEBUG_QUERIES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// DEBUG_FLAGS</comment>
	<comment type="line">// defaults to: false</comment>
	<expr_stmt><expr><call><name>setDebugOption</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"DEBUG_FLAGS"</literal></expr></argument>, <argument><expr><name>DEBUG_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// DEBUG_SHMEM</comment>
	<comment type="line">// defaults to: false</comment>
	<expr_stmt><expr><call><name>setDebugOption</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"DEBUG_SHMEM"</literal></expr></argument>, <argument><expr><name>DEBUG_SHMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// DEBUG_GC</comment>
	<comment type="line">// defaults to: false</comment>
	<expr_stmt><expr><call><name>setDebugOption</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"DEBUG_GC"</literal></expr></argument>, <argument><expr><name>DEBUG_GC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// DEBUG_ARP</comment>
	<comment type="line">// defaults to: false</comment>
	<expr_stmt><expr><call><name>setDebugOption</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"DEBUG_ARP"</literal></expr></argument>, <argument><expr><name>DEBUG_ARP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// DEBUG_REGEX or REGEX_DEBUGMODE (legacy config option)</comment>
	<comment type="line">// defaults to: false</comment>
	<expr_stmt><expr><call><name>setDebugOption</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"REGEX_DEBUGMODE"</literal></expr></argument>, <argument><expr><name>DEBUG_REGEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>setDebugOption</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"DEBUG_REGEX"</literal></expr></argument>, <argument><expr><name>DEBUG_REGEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// DEBUG_API</comment>
	<comment type="line">// defaults to: false</comment>
	<expr_stmt><expr><call><name>setDebugOption</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"DEBUG_API"</literal></expr></argument>, <argument><expr><name>DEBUG_API</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// DEBUG_OVERTIME</comment>
	<comment type="line">// defaults to: false</comment>
	<expr_stmt><expr><call><name>setDebugOption</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"DEBUG_OVERTIME"</literal></expr></argument>, <argument><expr><name>DEBUG_OVERTIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// DEBUG_EXTBLOCKED (deprecated, now included in DEBUG_QUERIES)</comment>

	<comment type="line">// DEBUG_STATUS</comment>
	<comment type="line">// defaults to: false</comment>
	<expr_stmt><expr><call><name>setDebugOption</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"DEBUG_STATUS"</literal></expr></argument>, <argument><expr><name>DEBUG_STATUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// DEBUG_CAPS</comment>
	<comment type="line">// defaults to: false</comment>
	<expr_stmt><expr><call><name>setDebugOption</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"DEBUG_CAPS"</literal></expr></argument>, <argument><expr><name>DEBUG_CAPS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// DEBUG_DNSSEC</comment>
	<comment type="line">// defaults to: false</comment>
	<expr_stmt><expr><call><name>setDebugOption</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"DEBUG_DNSSEC"</literal></expr></argument>, <argument><expr><name>DEBUG_DNSSEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// DEBUG_VECTORS</comment>
	<comment type="line">// defaults to: false</comment>
	<expr_stmt><expr><call><name>setDebugOption</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"DEBUG_VECTORS"</literal></expr></argument>, <argument><expr><name>DEBUG_VECTORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// DEBUG_RESOLVER</comment>
	<comment type="line">// defaults to: false</comment>
	<expr_stmt><expr><call><name>setDebugOption</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"DEBUG_RESOLVER"</literal></expr></argument>, <argument><expr><name>DEBUG_RESOLVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// DEBUG_EDNS0</comment>
	<comment type="line">// defaults to: false</comment>
	<expr_stmt><expr><call><name>setDebugOption</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"DEBUG_EDNS0"</literal></expr></argument>, <argument><expr><name>DEBUG_EDNS0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// DEBUG_CLIENTS</comment>
	<comment type="line">// defaults to: false</comment>
	<expr_stmt><expr><call><name>setDebugOption</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"DEBUG_CLIENTS"</literal></expr></argument>, <argument><expr><name>DEBUG_CLIENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// DEBUG_ALIASCLIENTS</comment>
	<comment type="line">// defaults to: false</comment>
	<expr_stmt><expr><call><name>setDebugOption</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"DEBUG_ALIASCLIENTS"</literal></expr></argument>, <argument><expr><name>DEBUG_ALIASCLIENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// DEBUG_EVENTS</comment>
	<comment type="line">// defaults to: false</comment>
	<expr_stmt><expr><call><name>setDebugOption</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"DEBUG_EVENTS"</literal></expr></argument>, <argument><expr><name>DEBUG_EVENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// DEBUG_HELPER</comment>
	<comment type="line">// defaults to: false</comment>
	<expr_stmt><expr><call><name>setDebugOption</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"DEBUG_HELPER"</literal></expr></argument>, <argument><expr><name>DEBUG_HELPER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// DEBUG_EXTRA</comment>
	<comment type="line">// defaults to: false</comment>
	<expr_stmt><expr><call><name>setDebugOption</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"DEBUG_EXTRA"</literal></expr></argument>, <argument><expr><name>DEBUG_EXTRA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"*****************************"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"* Debugging enabled         *"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"* DEBUG_DATABASE        %s *"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"YES"</literal></expr></then><else>:<expr><literal type="string">"NO "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"* DEBUG_NETWORKING      %s *"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_NETWORKING</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"YES"</literal></expr></then><else>:<expr><literal type="string">"NO "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"* DEBUG_LOCKS           %s *"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_LOCKS</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"YES"</literal></expr></then><else>:<expr><literal type="string">"NO "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"* DEBUG_QUERIES         %s *"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_QUERIES</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"YES"</literal></expr></then><else>:<expr><literal type="string">"NO "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"* DEBUG_FLAGS           %s *"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_FLAGS</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"YES"</literal></expr></then><else>:<expr><literal type="string">"NO "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"* DEBUG_SHMEM           %s *"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_SHMEM</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"YES"</literal></expr></then><else>:<expr><literal type="string">"NO "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"* DEBUG_GC              %s *"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_GC</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"YES"</literal></expr></then><else>:<expr><literal type="string">"NO "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"* DEBUG_ARP             %s *"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_ARP</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"YES"</literal></expr></then><else>:<expr><literal type="string">"NO "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"* DEBUG_REGEX           %s *"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_REGEX</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"YES"</literal></expr></then><else>:<expr><literal type="string">"NO "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"* DEBUG_API             %s *"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_API</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"YES"</literal></expr></then><else>:<expr><literal type="string">"NO "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"* DEBUG_OVERTIME        %s *"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_OVERTIME</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"YES"</literal></expr></then><else>:<expr><literal type="string">"NO "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"* DEBUG_STATUS          %s *"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_STATUS</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"YES"</literal></expr></then><else>:<expr><literal type="string">"NO "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"* DEBUG_CAPS            %s *"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_CAPS</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"YES"</literal></expr></then><else>:<expr><literal type="string">"NO "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"* DEBUG_VECTORS         %s *"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_VECTORS</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"YES"</literal></expr></then><else>:<expr><literal type="string">"NO "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"* DEBUG_RESOLVER        %s *"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_RESOLVER</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"YES"</literal></expr></then><else>:<expr><literal type="string">"NO "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"* DEBUG_EDNS0           %s *"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_EDNS0</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"YES"</literal></expr></then><else>:<expr><literal type="string">"NO "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"* DEBUG_CLIENTS         %s *"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_CLIENTS</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"YES"</literal></expr></then><else>:<expr><literal type="string">"NO "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"* DEBUG_ALIASCLIENTS    %s *"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_ALIASCLIENTS</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"YES"</literal></expr></then><else>:<expr><literal type="string">"NO "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"* DEBUG_EVENTS          %s *"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_EVENTS</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"YES"</literal></expr></then><else>:<expr><literal type="string">"NO "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"* DEBUG_HELPER          %s *"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_HELPER</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"YES"</literal></expr></then><else>:<expr><literal type="string">"NO "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"* DEBUG_EXTRA           %s *"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_EXTRA</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"YES"</literal></expr></then><else>:<expr><literal type="string">"NO "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"*****************************"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Enable debug logging in dnsmasq (only effective before starting the resolver)</comment>
		<expr_stmt><expr><name><name>argv_dnsmasq</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"--log-debug"</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Have to close the config file if we opened it</comment>
	<if_stmt><if>if<condition>(<expr><name>opened</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>set_nice</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>fallback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>, <decl><type ref="prev"/><name>nice_set</name></decl>, <decl><type ref="prev"/><name>nice_target</name> <init>= <expr><name>fallback</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// Try to read niceness value</comment>
	<comment type="line">// Attempts to set a nice value outside the range are clamped to the range.</comment>
	<if_stmt><if>if<condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%i"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>nice_target</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Skip setting niceness if set to -999</comment>
	<if_stmt><if>if<condition>(<expr><name>nice_target</name> <operator>==</operator> <operator>-</operator><literal type="number">999</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   NICE: Not changing nice value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Adjust if != -999</comment>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>nice_set</name> <operator>=</operator> <call><name>nice</name><argument_list>(<argument><expr><name>nice_target</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
	   <name>errno</name> <operator>==</operator> <name>EPERM</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// ERROR EPERM: The calling process attempted to increase its priority</comment>
		<comment type="line">// by supplying a negative value but has insufficient privileges.</comment>
		<comment type="line">// On Linux, the RLIMIT_NICE resource limit can be used to define a limit to</comment>
		<comment type="line">// which an unprivileged process's nice value can be raised. We are not</comment>
		<comment type="line">// affected by this limit when pihole-FTL is running with CAP_SYS_NICE</comment>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   NICE: Cannot change niceness to %d (permission denied)"</literal></expr></argument>,
		     <argument><expr><name>nice_target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>nice_set</name> <operator>==</operator> <name>nice_target</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   NICE: Set process niceness to %d%s"</literal></expr></argument>,
		     <argument><expr><name>nice_set</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>nice_set</name> <operator>==</operator> <name>fallback</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">" (default)"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   NICE: Set process niceness to %d (asked for %d)"</literal></expr></argument>,
		     <argument><expr><name>nice_set</name></expr></argument>, <argument><expr><name>nice_target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>read_bool</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>fallback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>option</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>fallback</name></expr>;</return></block_content></block></if>

	<if type="elseif">else if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
	        <call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"no"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if>

	<if type="elseif">else if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
	        <call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"yes"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>fallback</name></expr>;</return>
</block_content>}</block></function>
</unit>
