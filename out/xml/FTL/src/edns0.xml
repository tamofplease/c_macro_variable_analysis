<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/edns0.c"><comment type="block">/* Pi-hole: A black hole for Internet advertisements
*  (c) 2020 Pi-hole, LLC (https://pi-hole.net)
*  Network-wide ad blocking via your own hardware.
*
*  FTL Engine
*  EDNS parsing routines
*
*  This file is copyright under the latest version of the EUPL.
*  Please see LICENSE file for your rights under this license. */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTLDNS</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnsmasq/dnsmasq.h"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__USE_XOPEN</name></cpp:undef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FTL.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"edns0.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"datastructure.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shmem.h"</cpp:file></cpp:include>

<comment type="line">// EDNS(0) Client Subnet [Optional, RFC7871]</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EDNS0_ECS</name></cpp:macro> <cpp:value>EDNS0_OPTION_CLIENT_SUBNET</cpp:value></cpp:define>

<comment type="line">// EDN(0) COOKIE [Standard, RFC7873]</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EDNS0_COOKIE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<comment type="line">// EDNS(0) MAC address [NOT STANDARDIZED]</comment>
<comment type="line">//</comment>
<comment type="line">// BYTE encoding, payload size: 6 bytes</comment>
<comment type="line">// dnsmasq option: --add-mac</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EDNS0_MAC_ADDR_BYTE</name></cpp:macro> <cpp:value>EDNS0_OPTION_MAC</cpp:value></cpp:define>
<comment type="line">// TEXT encoding, payload size: 17 bytes</comment>
<comment type="line">// dnsmasq option: --add-mac=text</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EDNS0_MAC_ADDR_TEXT</name></cpp:macro> <cpp:value>EDNS0_OPTION_NOMDEVICEID</cpp:value></cpp:define>
<comment type="line">// BASE64 encoding, payload size: 8 bytes</comment>
<comment type="line">// dnsmasq option: --add-mac=base64</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EDNS0_MAC_ADDR_BASE64</name></cpp:macro> <cpp:value>EDNS0_MAC_ADDR_TEXT</cpp:value></cpp:define>

<comment type="line">// EDNS(0) CPE-ID (Common Platform Enumeration Identifier) [NOT STANDARDIZED]</comment>
<comment type="line">// Payload: String of any length (can be zero)</comment>
<comment type="line">// dnsmasq option: --add-cpe-id=...</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EDNS0_CPE_ID</name></cpp:macro> <cpp:value>EDNS0_OPTION_NOMCPEID</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>FTL_parse_pseudoheaders</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>mysockaddr</name></name> <modifier>*</modifier></type><name>peer</name></decl></parameter>, <parameter><decl><type><name>ednsData</name> <modifier>*</modifier></type><name>edns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>is_sign</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>plen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pheader</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sizep</name></decl>;</decl_stmt>

	<comment type="line">// Extract additional record A.K.A. pseudoheader</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pheader</name> <operator>=</operator> <call><name>find_pseudoheader</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>plen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sizep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_sign</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// Debug logging</comment>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_EDNS0</name></expr>)</condition><block type="pseudo"><block_content>
		<for>for<control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>plen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"EDNS(0) pheader[%i] = 0x%02x"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pheader</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

        <comment type="line">// Working pointer</comment>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>pheader</name></expr></init></decl>;</decl_stmt>

<comment type="line">// RFC 6891                   EDNS(0) Extensions                   6.1.2.  Wire Format</comment>
<comment type="line">// </comment>
<comment type="line">//    An OPT RR has a fixed part and a variable set of options expressed as</comment>
<comment type="line">//    {attribute, value} pairs.  The fixed part holds some DNS metadata,</comment>
<comment type="line">//    and also a small collection of basic extension elements that we</comment>
<comment type="line">//    expect to be so popular that it would be a waste of wire space to</comment>
<comment type="line">//    encode them as {attribute, value} pairs.</comment>
<comment type="line">// </comment>
<comment type="line">//    The fixed part of an OPT RR is structured as follows:</comment>
<comment type="line">// </comment>
<comment type="line">//        +------------+--------------+------------------------------+</comment>
<comment type="line">//        | Field Name | Field Type   | Description                  |</comment>
<comment type="line">//        +------------+--------------+------------------------------+</comment>
<comment type="line">//        | NAME       | domain name  | MUST be 0 (root domain)      |</comment>
	<if_stmt><if>if<condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
<comment type="line">//        +------------+--------------+------------------------------+</comment>
<comment type="line">//        | TYPE       | u_int16_t    | OPT (41)                     |</comment>
	<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>type</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>type</name> <operator>!=</operator> <literal type="number">41</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
<comment type="line">//        +------------+--------------+------------------------------+</comment>
<comment type="line">//        | CLASS      | u_int16_t    | requestor's UDP payload size |</comment>
	<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>class</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>class</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_EDNS0</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"EDNS(0) requestor's UDP payload size: %u bytes"</literal></expr></argument>, <argument><expr><name>class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<comment type="line">//        +------------+--------------+------------------------------+</comment>
<comment type="line">//        | TTL        | u_int32_t    | extended RCODE and flags     |</comment>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ttl</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>GETLONG</name><argument_list>(<argument><expr><name>ttl</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//        +------------+--------------+------------------------------+</comment>
<comment type="line">//        | RDLEN      | u_int16_t    | length of all RDATA          |</comment>
	<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>rdlen</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>rdlen</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//        +------------+--------------+------------------------------+</comment>
<comment type="line">//        | RDATA      | octet stream | {attribute,value} pairs      |</comment>
<comment type="line">//        +------------+--------------+------------------------------+</comment>

<comment type="line">//   The variable part of an OPT RR may contain zero or more options in</comment>
<comment type="line">//   the RDATA.  Each option MUST be treated as a bit field.  Each option</comment>
<comment type="line">//   is encoded as:</comment>
<comment type="line">//</comment>
<comment type="line">//                  +0 (MSB)                            +1 (LSB)</comment>
<comment type="line">//       +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+</comment>
<comment type="line">//    0: |                          OPTION-CODE                          |</comment>
<comment type="line">//       +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+</comment>
<comment type="line">//    2: |                         OPTION-LENGTH                         |</comment>
<comment type="line">//       +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+</comment>
<comment type="line">//    4: |                                                               |</comment>
<comment type="line">//       /                          OPTION-DATA                          /</comment>
<comment type="line">//       /                                                               /</comment>
<comment type="line">//       +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+</comment>

<comment type="line">// RFC 6891                   EDNS(0) Extensions                   6.1.3.  OPT Record TTL Field Use</comment>
<comment type="line">//</comment>
<comment type="line">//   The extended RCODE and flags, which OPT stores in the RR Time to Live</comment>
<comment type="line">//   (TTL) field, are structured as follows:</comment>
<comment type="line">//</comment>
<comment type="line">//                  +0 (MSB)                            +1 (LSB)</comment>
<comment type="line">//       +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+</comment>
<comment type="line">//    0: |         EXTENDED-RCODE        |            VERSION            |</comment>
<comment type="line">//       +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+</comment>
<comment type="line">//    2: | DO|                           Z                               |</comment>
<comment type="line">//       +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+</comment>
<comment type="line">//</comment>
<comment type="line">//   EXTENDED-RCODE</comment>
<comment type="line">//      Forms the upper 8 bits of extended 12-bit RCODE (together with the</comment>
<comment type="line">//      4 bits defined in [RFC1035].  Note that EXTENDED-RCODE value 0</comment>
<comment type="line">//      indicates that an unextended RCODE is in use (values 0 through</comment>
<comment type="line">//      15).</comment>
<comment type="line">//</comment>
<comment type="line">//   VERSION</comment>
<comment type="line">//      Indicates the implementation level of the setter.  Full</comment>
<comment type="line">//      conformance with this specification is indicated by version '0'.</comment>
<comment type="line">//      Requestors are encouraged to set this to the lowest implemented</comment>
<comment type="line">//      level capable of expressing a transaction, to minimise the</comment>
<comment type="line">//      responder and network load of discovering the greatest common</comment>
<comment type="line">//      implementation level between requestor and responder.  A</comment>
<comment type="line">//      requestor's version numbering strategy MAY ideally be a run-time</comment>
<comment type="line">//      configuration option.</comment>
<comment type="line">//      If a responder does not implement the VERSION level of the</comment>
<comment type="line">//      request, then it MUST respond with RCODE=BADVERS.  All responses</comment>
<comment type="line">//      MUST be limited in format to the VERSION level of the request, but</comment>
<comment type="line">//      the VERSION of each response SHOULD be the highest implementation</comment>
<comment type="line">//      level of the responder.  In this way, a requestor will learn the</comment>
<comment type="line">//      implementation level of a responder as a side effect of every</comment>
<comment type="line">//      response, including error responses and including RCODE=BADVERS.</comment>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>edns0_version</name> <init>= <expr><operator>(</operator><name>ttl</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>%</operator> <literal type="number">0xFF</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>edns0_version</name> <operator>!=</operator> <literal type="number">0x00</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name></decl>;</decl_stmt> <comment type="line">// The header is 11 bytes before the beginning of OPTION-DATA</comment>
	<while>while <condition>(<expr><operator>(</operator><name>offset</name> <operator>=</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>pheader</name> <operator>-</operator> <literal type="number">11u</literal><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <name>rdlen</name> <operator>&amp;&amp;</operator> <name>rdlen</name> <operator>&lt;</operator> <name>UINT16_MAX</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>code</name></decl>, <decl><type ref="prev"/><name>optlen</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>optlen</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

		<comment type="line">// Avoid buffer overflow due to an malicious packet</comment>
		<if_stmt><if>if<condition>(<expr><name>offset</name> <operator>+</operator> <name>optlen</name> <operator>&gt;</operator> <name>rdlen</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_EDNS0</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Found malicious EDNS payload, skipping record."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Debug logging</comment>
		<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_EDNS0</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"EDNS(0) code %u, optlen %u (bytes %zu - %zu of %u)"</literal></expr></argument>,
			     <argument><expr><name>code</name></expr></argument>, <argument><expr><name>optlen</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <name>optlen</name></expr></argument>, <argument><expr><name>rdlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>EDNS0_ECS</name> <operator>&amp;&amp;</operator> <name><name>config</name><operator>.</operator><name>edns0_ecs</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// EDNS(0) CLIENT SUBNET</comment>
			<comment type="line">// RFC 7871              Client Subnet in DNS Queries              6.  Option Format</comment>
			<comment type="line">//   This protocol uses an EDNS0 [RFC6891] option to include client</comment>
			<comment type="line">//   address information in DNS messages.  The option is structured as</comment>
			<comment type="line">//   follows:</comment>
			<comment type="line">//</comment>
			<comment type="line">//                +0 (MSB)                            +1 (LSB)</comment>
			<comment type="line">//      +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+</comment>
			<comment type="line">//   0: |                          OPTION-CODE                          |</comment>
			<comment type="line">//      +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+</comment>
			<comment type="line">//   2: |                         OPTION-LENGTH                         |</comment>
			<comment type="line">//      +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+</comment>
			<comment type="line">//   4: |                            FAMILY                             |</comment>
			<comment type="line">//      +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+</comment>
			<decl_stmt><decl><type><name>short</name></type> <name>family</name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>family</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">//      +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+</comment>
			<comment type="line">//   6: |     SOURCE PREFIX-LENGTH      |     SCOPE PREFIX-LENGTH       |</comment>
			<comment type="line">//      +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+</comment>
			<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>source_netmask</name> <init>= <expr><operator>*</operator><name>p</name><operator>++</operator></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> <comment type="line">// We are not interested in the scope prefix-length. It MUST be 0 in queries</comment>
			<comment type="line">//      +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+</comment>
			<comment type="line">//   8: |                           ADDRESS...                          /</comment>
			<comment type="line">//      +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+</comment>
			<decl_stmt><decl><type><name><name>union</name> <name>all_addr</name></name></type> <name>addr</name> <init>= <expr><block>{<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>}</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>addrlen</name> <init>= <expr><name>optlen</name> <operator>-</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><name>family</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>addrlen</name> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>addr4</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// IPv4</comment>
				<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>addr4</name><operator>.</operator><name>s_addr</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if<condition>(<expr><name>family</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>addrlen</name> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>addr6</name><operator>.</operator><name>s6_addr</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// IPv6</comment>
				<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>addr6</name><operator>.</operator><name>s6_addr</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></else></if_stmt>

			<comment type="line">// Advance working pointer (we already walked 4 bytes above)</comment>
			<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>optlen</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>char</name></type> <name><name>ipaddr</name><index>[<expr><name>ADDRSTRLEN</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><ternary><condition><expr><name>family</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>AF_INET</name></expr> </then><else>: <expr><name>AF_INET6</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>addr4</name><operator>.</operator><name>s_addr</name></name></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ipaddr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// Only use /32 (IPv4) and /128 (IPv6) addresses</comment>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>family</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>source_netmask</name> <operator>==</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;&amp;</operator>
			   <operator>!</operator><operator>(</operator><name>family</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>source_netmask</name> <operator>==</operator> <literal type="number">128</literal><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_EDNS0</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"EDNS(0) CLIENT SUBNET: %s/%u found (IPv%u)"</literal></expr></argument>,
					     <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><name>source_netmask</name></expr></argument>, <argument><expr><ternary><condition><expr><name>family</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">6</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<comment type="line">// Copy data to edns struct</comment>
			<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>edns</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>edns</name><operator>-&gt;</operator><name>client</name><index>[<expr><name>ADDRSTRLEN</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

			<comment type="line">// Only set the address as useful when it is not the</comment>
			<comment type="line">// loopback address of the distant machine (127.0.0.0/8 or ::1)</comment>
			<if_stmt><if>if<condition>(<expr><operator>(</operator><name>family</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>ntohl</name><argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>addr4</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFF000000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x7F000000</literal><operator>)</operator> <operator>||</operator>
			   <operator>(</operator><name>family</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>IN6_IS_ADDR_LOOPBACK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>addr6</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_EDNS0</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"EDNS(0) CLIENT SUBNET: Skipped %s/%u (IPv%u loopback address)"</literal></expr></argument>,
					     <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><name>source_netmask</name></expr></argument>, <argument><expr><ternary><condition><expr><name>family</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">6</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name><name>edns</name><operator>-&gt;</operator><name>client_set</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_EDNS0</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"EDNS(0) CLIENT SUBNET: %s/%u - OK (IPv%u)"</literal></expr></argument>,
					     <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><name>source_netmask</name></expr></argument>, <argument><expr><ternary><condition><expr><name>family</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">6</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if<condition>(<expr><name>code</name> <operator>==</operator> <name>EDNS0_COOKIE</name> <operator>&amp;&amp;</operator> <name>optlen</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// EDNS(0) COOKIE client</comment>
			<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>client_cookie</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>client_cookie</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_EDNS0</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name></type> <name><name>pretty_client_cookie</name><index>[<expr><literal type="number">8</literal><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="line">// client: fixed length</comment>
				<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><name>pretty_client_cookie</name></expr></init></decl>;</decl_stmt>
				<for>for<control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
					<expr_stmt><expr><name>pp</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><literal type="string">"%02X"</literal></expr></argument>, <argument><expr><name><name>client_cookie</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"EDNS(0) COOKIE (client-only): %s"</literal></expr></argument>,
				     <argument><expr><name>pretty_client_cookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="line">// Advance working pointer</comment>
			<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if<condition>(<expr><name>code</name> <operator>==</operator> <name>EDNS0_COOKIE</name> <operator>&amp;&amp;</operator> <name>optlen</name> <operator>&gt;=</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name>optlen</name> <operator>&lt;=</operator> <literal type="number">40</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// EDNS(0) COOKIE client + server</comment>
			<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>client_cookie</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>client_cookie</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>server_cookie_len</name> <init>= <expr><name>optlen</name> <operator>-</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>server_cookie</name><index>[<expr><name>server_cookie_len</name></expr>]</index></name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>server_cookie</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">8u</literal></expr></argument>, <argument><expr><name>server_cookie_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_EDNS0</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name></type> <name><name>pretty_client_cookie</name><index>[<expr><literal type="number">8</literal><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="line">// client: fixed length</comment>
				<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><name>pretty_client_cookie</name></expr></init></decl>;</decl_stmt>
				<for>for<control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
					<expr_stmt><expr><name>pp</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><literal type="string">"%02X"</literal></expr></argument>, <argument><expr><name><name>client_cookie</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
				<decl_stmt><decl><type><name>char</name></type> <name><name>pretty_server_cookie</name><index>[<expr><name>server_cookie_len</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1u</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="line">// server: variable length</comment>
				<expr_stmt><expr><name>pp</name> <operator>=</operator> <name>pretty_server_cookie</name></expr>;</expr_stmt>
				<for>for<control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>server_cookie_len</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
					<expr_stmt><expr><name>pp</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><literal type="string">"%02X"</literal></expr></argument>, <argument><expr><name><name>server_cookie</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"EDNS(0) COOKIE (client + server): %s (client), %s (server, %u bytes)"</literal></expr></argument>,
				     <argument><expr><name>pretty_client_cookie</name></expr></argument>, <argument><expr><name>pretty_server_cookie</name></expr></argument>, <argument><expr><name>server_cookie_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="line">// Advance working pointer</comment>
			<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>optlen</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if<condition>(<expr><name>code</name> <operator>==</operator> <name>EDNS0_MAC_ADDR_BYTE</name> <operator>&amp;&amp;</operator> <name>optlen</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// EDNS(0) MAC address (BYTE format)</comment>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>edns</name><operator>-&gt;</operator><name>mac_byte</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>edns</name><operator>-&gt;</operator><name>mac_byte</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>print_mac</name><argument_list>(<argument><expr><name><name>edns</name><operator>-&gt;</operator><name>mac_text</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name><name>edns</name><operator>-&gt;</operator><name>mac_byte</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>edns</name><operator>-&gt;</operator><name>mac_byte</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>edns</name><operator>-&gt;</operator><name>mac_set</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_EDNS0</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"EDNS(0) MAC address (BYTE format): %s"</literal></expr></argument>, <argument><expr><name><name>edns</name><operator>-&gt;</operator><name>mac_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="line">// Advance working pointer</comment>
			<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if<condition>(<expr><name>code</name> <operator>==</operator> <name>EDNS0_MAC_ADDR_TEXT</name> <operator>&amp;&amp;</operator> <name>optlen</name> <operator>==</operator> <literal type="number">17</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// EDNS(0) MAC address (TEXT format)</comment>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>edns</name><operator>-&gt;</operator><name>mac_text</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>edns</name><operator>-&gt;</operator><name>mac_text</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name><name>edns</name><operator>-&gt;</operator><name>mac_text</name></name></expr></argument>, <argument><expr><literal type="string">"%hhx:%hhx:%hhx:%hhx:%hhx:%hhx"</literal></expr></argument>,
			          <argument><expr><operator>&amp;</operator><name><name>edns</name><operator>-&gt;</operator><name>mac_byte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
			          <argument><expr><operator>&amp;</operator><name><name>edns</name><operator>-&gt;</operator><name>mac_byte</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
			          <argument><expr><operator>&amp;</operator><name><name>edns</name><operator>-&gt;</operator><name>mac_byte</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
			          <argument><expr><operator>&amp;</operator><name><name>edns</name><operator>-&gt;</operator><name>mac_byte</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,
			          <argument><expr><operator>&amp;</operator><name><name>edns</name><operator>-&gt;</operator><name>mac_byte</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,
			          <argument><expr><operator>&amp;</operator><name><name>edns</name><operator>-&gt;</operator><name>mac_byte</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">6</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>edns</name><operator>-&gt;</operator><name>mac_set</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_EDNS0</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"EDNS(0) MAC address (TEXT format): %s"</literal></expr></argument>, <argument><expr><name><name>edns</name><operator>-&gt;</operator><name>mac_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_EDNS0</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"         Received MAC address has invalid format!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="line">// Advance working pointer</comment>
			<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">17</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if<condition>(<expr><name>code</name> <operator>==</operator> <name>EDNS0_MAC_ADDR_BASE64</name> <operator>&amp;&amp;</operator> <name>optlen</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// EDNS(0) MAC address (BASE format)</comment>
			<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_EDNS0</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"EDNS(0) MAC address (BASE64 format): NOT IMPLEMENTED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="line">// Advance working pointer</comment>
			<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if<condition>(<expr><name>code</name> <operator>==</operator> <name>EDNS0_CPE_ID</name> <operator>&amp;&amp;</operator> <name>optlen</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// EDNS(0) CPE-ID, 256 byte arbitrary limit</comment>
			<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>payload</name><index>[<expr><name>optlen</name> <operator>+</operator> <literal type="number">1u</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="line">// variable length</comment>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>payload</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>optlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>payload</name><index>[<expr><name>optlen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_EDNS0</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name></type> <name><name>pretty_payload</name><index>[<expr><name>optlen</name><operator>*</operator><literal type="number">5</literal> <operator>+</operator> <literal type="number">1u</literal></expr>]</index></name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><name>pretty_payload</name></expr></init></decl>;</decl_stmt>
				<for>for<control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>optlen</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
					<expr_stmt><expr><name>pp</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><literal type="string">"0x%02X "</literal></expr></argument>, <argument><expr><name><name>payload</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
				<expr_stmt><expr><name><name>pretty_payload</name><index>[<expr><name>optlen</name><operator>*</operator><literal type="number">5</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> <comment type="line">// Truncate away the trailing whitespace</comment>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"EDNS(0) CPE-ID (payload size %u): \"%s\" (%s)"</literal></expr></argument>,
				     <argument><expr><name>optlen</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>, <argument><expr><name>pretty_payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="line">// Advance working pointer</comment>
			<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>optlen</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_EDNS0</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"EDNS(0):n option %u with length %u"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>optlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<comment type="line">// Not implemented, skip this record</comment>

			<comment type="line">// Advance working pointer</comment>
			<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>optlen</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function></unit>
