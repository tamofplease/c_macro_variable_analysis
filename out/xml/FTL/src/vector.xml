<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/vector.c"><comment type="block">/* Pi-hole: A black hole for Internet advertisements
*  (c) 2020 Pi-hole, LLC (https://pi-hole.net)
*  Network-wide ad blocking via your own hardware.
*
*  FTL Engine
*  Dynamic vector routines
*
*  This file is copyright under the latest version of the EUPL.
*  Please see LICENSE file for your rights under this license. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vector.h"</cpp:file></cpp:include>
<comment type="line">// struct config</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<comment type="line">// logg()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>

<function><type><name>sqlite3_stmt_vec</name> <modifier>*</modifier></type><name>new_sqlite3_stmt_vec</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>initial_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_VECTORS</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Initializing new sqlite3_stmt* vector with size %u"</literal></expr></argument>, <argument><expr><name>initial_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>sqlite3_stmt_vec</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sqlite3_stmt_vec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>initial_size</name></expr>;</expr_stmt>
	<comment type="line">// Calloc ensures they are all set to zero which is the default state</comment>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>items</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>initial_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sqlite3_stmt</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>initial_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// Set correct subroutine pointers</comment>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>set</name></name> <operator>=</operator> <name>set_sqlite3_stmt_vec</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>get</name></name> <operator>=</operator> <name>get_sqlite3_stmt_vec</name></expr>;</expr_stmt>
	<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>resize_sqlite3_stmt_vec</name><parameter_list>(<parameter><decl><type><name>sqlite3_stmt_vec</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>capacity</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_VECTORS</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Resizing sqlite3_stmt* vector %p from %u to %u"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// If ptr is NULL, the call to realloc(ptr, size) is equivalent to</comment>
	<comment type="line">// malloc(size) so we can use it also for initializing a vector for the</comment>
	<comment type="line">// first time.</comment>
	<decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier><modifier>*</modifier></type><name>items</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sqlite3_stmt</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>capacity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>items</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"ERROR: Memory allocation failed in resize_sqlite3_stmt_vec(%p, %u)"</literal></expr></argument>,
		       <argument><expr><name>v</name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Update items pointer</comment>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>items</name></name> <operator>=</operator> <name>items</name></expr>;</expr_stmt>

	<comment type="line">// NULL-initialize newly allocated memory slots</comment>
	<for>for<control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><name><name>v</name><operator>-&gt;</operator><name>capacity</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>capacity</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>

	<comment type="line">// Update capacity</comment>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>capacity</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_sqlite3_stmt_vec</name><parameter_list>(<parameter><decl><type><name>sqlite3_stmt_vec</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_VECTORS</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Setting sqlite3_stmt** %p[%u] &lt;-- %p"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>v</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"ERROR: Passed NULL vector to set_sqlite3_stmt_vec(%p, %u, %p)"</literal></expr></argument>,
		       <argument><expr><name>v</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>v</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Allocate more memory when trying to set a statement vector entry with</comment>
		<comment type="line">// an index larger than the current array size (this makes set an</comment>
		<comment type="line">// equivalent alternative to append)</comment>
		<expr_stmt><expr><call><name>resize_sqlite3_stmt_vec</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>index</name> <operator>+</operator> <name>VEC_ALLOC_STEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Set item</comment>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// This function has no effects except to return a value. It can be subject to</comment>
<comment type="line">// data flow analysis and might be eliminated. Hence, we add the "pure"</comment>
<comment type="line">// attribute to this function.</comment>
<decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>get_sqlite3_stmt_vec</name><argument_list>(<argument><expr><name>sqlite3_stmt_vec</name> <operator>*</operator><name>v</name></expr></argument>, <argument><expr><name>unsigned</name> <name>int</name> <name>index</name></expr></argument>)</argument_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>v</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"ERROR: Passed NULL vector to get_sqlite3_stmt_vec(%p, %u)"</literal></expr></argument>,
		       <argument><expr><name>v</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>v</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Silently increase size of vector if trying to read out-of-bounds</comment>
		<expr_stmt><expr><call><name>resize_sqlite3_stmt_vec</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>index</name> <operator>+</operator> <name>VEC_ALLOC_STEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>sqlite3_stmt</name><modifier>*</modifier></type> <name>item</name> <init>= <expr><name><name>v</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_VECTORS</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Getting sqlite3_stmt** %p[%u] --&gt; %p"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>free_sqlite3_stmt_vec</name><parameter_list>(<parameter><decl><type><name>sqlite3_stmt_vec</name> <modifier>*</modifier><modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_VECTORS</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Freeing sqlite3_stmt* vector %p"</literal></expr></argument>, <argument><expr><operator>*</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// This vector was never allocated, invoking free_sqlite3_stmt_vec() on a</comment>
	<comment type="line">// NULL pointer should be a harmless no-op.</comment>
	<if_stmt><if>if<condition>(<expr><name>v</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>v</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><operator>(</operator><operator>*</operator><name>v</name><operator>)</operator><operator>-&gt;</operator><name>items</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// Free elements of the vector...</comment>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>v</name><operator>)</operator><operator>-&gt;</operator><name>items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// ...and then the vector itself</comment>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
