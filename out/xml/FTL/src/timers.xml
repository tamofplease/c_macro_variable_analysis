<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/timers.c"><comment type="block">/* Pi-hole: A black hole for Internet advertisements
*  (c) 2017 Pi-hole, LLC (https://pi-hole.net)
*  Network-wide ad blocking via your own hardware.
*
*  FTL Engine
*  Timing routines
*
*  This file is copyright under the latest version of the EUPL.
*  Please see LICENSE file for your rights under this license. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FTL.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"timers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name><name>t0</name><index>[<expr><name>NUMTIMERS</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>timer_start</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>timers</name></name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>NUMTIMERS</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Code error: Timer %i not defined in timer_start()."</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_REALTIME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>timespec</name></name></type> <name>diff</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>diff</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>end</name><operator>.</operator><name>tv_nsec</name></name><operator>-</operator><name><name>start</name><operator>.</operator><name>tv_nsec</name></name> <operator>&lt;</operator> <literal type="number">0L</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>diff</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>end</name><operator>.</operator><name>tv_sec</name></name> <operator>-</operator> <name><name>start</name><operator>.</operator><name>tv_sec</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="line">// subtract one second here...</comment>
		<expr_stmt><expr><name><name>diff</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <name><name>end</name><operator>.</operator><name>tv_nsec</name></name> <operator>-</operator> <name><name>start</name><operator>.</operator><name>tv_nsec</name></name> <operator>+</operator> <literal type="number">1000000000L</literal></expr>;</expr_stmt> <comment type="line">// ...we have to add it here</comment>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>diff</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>end</name><operator>.</operator><name>tv_sec</name></name> <operator>-</operator> <name><name>start</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>diff</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <name><name>end</name><operator>.</operator><name>tv_nsec</name></name> <operator>-</operator> <name><name>start</name><operator>.</operator><name>tv_nsec</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>diff</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>double</name></type> <name>timer_elapsed_msec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>timers</name></name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>NUMTIMERS</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Code error: Timer %i not defined in timer_elapsed_msec()."</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>td</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_REALTIME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>td</name> <operator>=</operator> <call><name>diff</name><argument_list>(<argument><expr><name><name>t0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>td</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1e3</literal> <operator>+</operator> <name><name>td</name><operator>.</operator><name>tv_nsec</name></name> <operator>*</operator> <literal type="number">1e-6</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sleepms</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>milliseconds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>milliseconds</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>milliseconds</name> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>select</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
