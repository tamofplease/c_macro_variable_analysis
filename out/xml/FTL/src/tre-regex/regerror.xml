<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/tre-regex/regerror.c"><comment type="block">/*
  tre_regerror.c - POSIX tre_regerror() implementation for TRE.

  This software is released under a BSD-style license.
  See the file LICENSE for details and copyright.

*/</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_CONFIG_H */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_WCHAR_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wchar.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_WCHAR_H */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_WCTYPE_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wctype.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_WCTYPE_H */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tre-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tre.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_GETTEXT</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libintl.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dgettext</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>s</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gettext</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>s</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_</name><parameter_list>(<parameter><type><name>String</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dgettext(PACKAGE, String)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gettext_noop</name><parameter_list>(<parameter><type><name>String</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>String</cpp:value></cpp:define>

<comment type="block">/* Error message strings for error codes listed in `tre.h'.  This list
   needs to be in sync with the codes listed there, naturally. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>tre_error_messages</name><index>[]</index></name> <init>=
  <expr><block>{ <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"No error"</literal></expr></argument>)</argument_list></call></expr>,				 <comment type="block">/* REG_OK */</comment>
    <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"No match"</literal></expr></argument>)</argument_list></call></expr>,				 <comment type="block">/* REG_NOMATCH */</comment>
    <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Invalid regexp"</literal></expr></argument>)</argument_list></call></expr>,			 <comment type="block">/* REG_BADPAT */</comment>
    <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Unknown collating element"</literal></expr></argument>)</argument_list></call></expr>,		 <comment type="block">/* REG_ECOLLATE */</comment>
    <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Unknown character class name"</literal></expr></argument>)</argument_list></call></expr>,	 <comment type="block">/* REG_ECTYPE */</comment>
    <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Trailing backslash"</literal></expr></argument>)</argument_list></call></expr>,			 <comment type="block">/* REG_EESCAPE */</comment>
    <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Invalid back reference"</literal></expr></argument>)</argument_list></call></expr>,		 <comment type="block">/* REG_ESUBREG */</comment>
    <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Missing ']'"</literal></expr></argument>)</argument_list></call></expr>,			 <comment type="block">/* REG_EBRACK */</comment>
    <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Missing ')'"</literal></expr></argument>)</argument_list></call></expr>,			 <comment type="block">/* REG_EPAREN */</comment>
    <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Missing '}'"</literal></expr></argument>)</argument_list></call></expr>,			 <comment type="block">/* REG_EBRACE */</comment>
    <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Invalid contents of {}"</literal></expr></argument>)</argument_list></call></expr>,		 <comment type="block">/* REG_BADBR */</comment>
    <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Invalid character range"</literal></expr></argument>)</argument_list></call></expr>,		 <comment type="block">/* REG_ERANGE */</comment>
    <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>,			 <comment type="block">/* REG_ESPACE */</comment>
    <macro><name>gettext_noop</name><argument_list>(<argument><literal type="string">"Invalid use of repetition operators"</literal></argument>)</argument_list></macro>	 <comment type="block">/* REG_BADRPT */</comment>
  }</block></expr></init></decl>;</decl_stmt>

<function><type><name>size_t</name></type>
<name>tre_regerror</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errcode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>regex_t</name> <modifier>*</modifier></type><name>preg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>errbuf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>err_len</name></decl>;</decl_stmt>

  <comment type="block">/*LINTED*/</comment><expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><operator>&amp;</operator><name>preg</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>errcode</name> <operator>&gt;=</operator> <literal type="number">0</literal>
      <operator>&amp;&amp;</operator> <name>errcode</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>tre_error_messages</name></expr></argument>)</argument_list></sizeof>
			 <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tre_error_messages</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>gettext</name><argument_list>(<argument><expr><name><name>tre_error_messages</name><index>[<expr><name>errcode</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>gettext</name><argument_list>(<argument><expr><literal type="string">"Unknown error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <expr_stmt><expr><name>err_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>errbuf_size</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>err_len</name> <operator>&gt;</operator> <name>errbuf_size</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>errbuf_size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>errbuf</name><index>[<expr><name>errbuf_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  <return>return <expr><name>err_len</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* EOF */</comment>
</unit>
