<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/tre-regex/tre-stack.c"><comment type="block">/*
  tre-stack.c - Simple stack implementation

  This software is released under a BSD-style license.
  See the file LICENSE for details and copyright.

*/</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_CONFIG_H */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tre-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tre-stack.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xmalloc.h"</cpp:file></cpp:include>

<union>union <name>tre_stack_item</name> <block>{
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>voidptr_value</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>int_value</name></decl>;</decl_stmt>
}</block>;</union>

<struct>struct <name>tre_stack_rec</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>max_size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>increment</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ptr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>union</name> <name>tre_stack_item</name></name> <modifier>*</modifier></type><name>stack</name></decl>;</decl_stmt>
}</block>;</struct>


<function><type><name>tre_stack_t</name> <modifier>*</modifier></type>
<name>tre_stack_new</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>increment</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>tre_stack_t</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stack</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>stack</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_size</name></name> <operator>=</operator> <name>max_size</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>increment</name></name> <operator>=</operator> <name>increment</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>tre_stack_destroy</name><parameter_list>(<parameter><decl><type><name>tre_stack_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>tre_stack_num_objects</name><parameter_list>(<parameter><decl><type><name>tre_stack_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>s</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>reg_errcode_t</name></type>
<name>tre_stack_push</name><parameter_list>(<parameter><decl><type><name>tre_stack_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>tre_stack_item</name></name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ptr</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stack</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>ptr</name></name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ptr</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if>
  <else>else
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_size</name></name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"tre_stack_push: stack full\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <return>return <expr><name>REG_ESPACE</name></expr>;</return>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <decl_stmt><decl><type><name><name>union</name> <name>tre_stack_item</name></name> <modifier>*</modifier></type><name>new_buffer</name></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>int</name></type> <name>new_size</name></decl>;</decl_stmt>
	  <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"tre_stack_push: trying to realloc more space\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>new_size</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>increment</name></name></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name>new_size</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>max_size</name></name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>new_size</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  <expr_stmt><expr><name>new_buffer</name> <operator>=</operator> <call><name>xrealloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>new_buffer</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name>new_buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"tre_stack_push: realloc failed.\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <return>return <expr><name>REG_ESPACE</name></expr>;</return>
	    </block_content>}</block></if></if_stmt>
	  <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"tre_stack_push: realloc succeeded.\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>new_size</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stack</name></name> <operator>=</operator> <name>new_buffer</name></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>tre_stack_push</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  <return>return <expr><name>REG_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>define_pushf</name><parameter_list>(<parameter><type><name>typetag</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro>  \
  <cpp:value>declare_pushf(typetag, type) {     \
    union tre_stack_item item;	     \
    item.typetag ## _value = value;  \
    return tre_stack_push(s, item);  \
}</cpp:value></cpp:define>

<macro><name>define_pushf</name><argument_list>(<argument>int</argument>, <argument>int</argument>)</argument_list></macro>
<macro><name>define_pushf</name><argument_list>(<argument>voidptr</argument>, <argument>void *</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>define_popf</name><parameter_list>(<parameter><type><name>typetag</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro>		    \
  <cpp:value>declare_popf(typetag, type) {			    \
    return s-&gt;stack[--s-&gt;ptr].typetag ## _value;    \
  }</cpp:value></cpp:define>

<macro><name>define_popf</name><argument_list>(<argument>int</argument>, <argument>int</argument>)</argument_list></macro>
<macro><name>define_popf</name><argument_list>(<argument>voidptr</argument>, <argument>void *</argument>)</argument_list></macro>

<comment type="block">/* EOF */</comment>
</unit>
