<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/tre-regex/regcomp.c"><comment type="block">/*
  tre_regcomp.c - TRE POSIX compatible regex compilation functions.

  This software is released under a BSD-style license.
  See the file LICENSE for details and copyright.

*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tre-config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tre-internal.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_CONFIG_H */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tre.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tre-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xmalloc.h"</cpp:file></cpp:include>

<function><type><name>int</name></type>
<name>tre_regncomp</name><parameter_list>(<parameter><decl><type><name>regex_t</name> <modifier>*</modifier></type><name>preg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>regex</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TRE_WCHAR</name></expr></cpp:if>
  <decl_stmt><decl><type><name>tre_char_t</name> <modifier>*</modifier></type><name>wregex</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>wlen</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>wregex</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tre_char_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>wregex</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>REG_ESPACE</name></expr>;</return></block_content></block></if></if_stmt>

  <comment type="block">/* If the current locale uses the standard single byte encoding of
     characters, we don't do a multibyte string conversion.  If we did,
     many applications which use the default locale would break since
     the default "C" locale uses the 7-bit ASCII character set, and
     all characters with the eighth bit set would be considered invalid. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TRE_MULTIBYTE</name></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><name>TRE_MB_CUR_MAX</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TRE_MULTIBYTE */</comment>
    <block>{<block_content>
      <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>regex</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>tre_char_t</name> <modifier>*</modifier></type><name>wstr</name> <init>= <expr><name>wregex</name></expr></init></decl>;</decl_stmt>

      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	<expr_stmt><expr><operator>*</operator><operator>(</operator><name>wstr</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>str</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
      <expr_stmt><expr><name>wlen</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
    </block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TRE_MULTIBYTE</name></expr></cpp:if>
  <else>else
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>consumed</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>tre_char_t</name> <modifier>*</modifier></type><name>wcptr</name> <init>= <expr><name>wregex</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_MBSTATE_T</name></cpp:ifdef>
      <decl_stmt><decl><type><name>mbstate_t</name></type> <name>state</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_MBSTATE_T */</comment>
      <while>while <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>consumed</name> <operator>=</operator> <call><name>tre_mbrtowc</name><argument_list>(<argument><expr><name>wcptr</name></expr></argument>, <argument><expr><name>regex</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <switch>switch <condition>(<expr><name>consumed</name></expr>)</condition>
	    <block>{<block_content>
	    <case>case <expr><literal type="number">0</literal></expr>:</case>
	      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>regex</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>consumed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
	      <else>else
		<block>{<block_content>
		  <expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>wregex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <return>return <expr><name>REG_BADPAT</name></expr>;</return>
		</block_content>}</block></else></if_stmt>
	      <break>break;</break>
	    <case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
	      <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"mbrtowc: error %d: %s.\n"</literal><operator>,</operator> <name>errno</name><operator>,</operator> <call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>wregex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <return>return <expr><name>REG_BADPAT</name></expr>;</return>
	    <case>case <expr><operator>-</operator><literal type="number">2</literal></expr>:</case>
	      <comment type="block">/* The last character wasn't complete.  Let's not call it a
		 fatal error. */</comment>
	      <expr_stmt><expr><name>consumed</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
	      <break>break;</break>
	    </block_content>}</block></switch>
	  <expr_stmt><expr><name>regex</name> <operator>+=</operator> <name>consumed</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>n</name> <operator>-=</operator> <name>consumed</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>wcptr</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
      <expr_stmt><expr><name>wlen</name> <operator>=</operator> <name>wcptr</name> <operator>-</operator> <name>wregex</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TRE_MULTIBYTE */</comment>

  <expr_stmt><expr><name><name>wregex</name><index>[<expr><name>wlen</name></expr>]</index></name> <operator>=</operator> <name>L</name><literal type="char">'\0'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tre_compile</name><argument_list>(<argument><expr><name>preg</name></expr></argument>, <argument><expr><name>wregex</name></expr></argument>, <argument><expr><name>wlen</name></expr></argument>, <argument><expr><name>cflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>wregex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !TRE_WCHAR */</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tre_compile</name><argument_list>(<argument><expr><name>preg</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>tre_char_t</name> <operator>*</operator><operator>)</operator><name>regex</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>cflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !TRE_WCHAR */</comment>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* this version takes bytes literally, to be used with raw vectors */</comment>
<function><type><name>int</name></type>
<name>tre_regncompb</name><parameter_list>(<parameter><decl><type><name>regex_t</name> <modifier>*</modifier></type><name>preg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>regex</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TRE_WCHAR</name></expr></cpp:if> <comment type="block">/* wide chars = we need to convert it all to the wide format */</comment>
  <decl_stmt><decl><type><name>tre_char_t</name> <modifier>*</modifier></type><name>wregex</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>wregex</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tre_char_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>wregex</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>REG_ESPACE</name></expr>;</return></block_content></block></if></if_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>wregex</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>tre_char_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>regex</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tre_compile</name><argument_list>(<argument><expr><name>preg</name></expr></argument>, <argument><expr><name>wregex</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>cflags</name> <operator>|</operator> <name>REG_USEBYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>wregex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !TRE_WCHAR */</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tre_compile</name><argument_list>(<argument><expr><name>preg</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>tre_char_t</name> <operator>*</operator><operator>)</operator><name>regex</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>cflags</name> <operator>|</operator> <name>REG_USEBYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !TRE_WCHAR */</comment>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>tre_regcomp</name><parameter_list>(<parameter><decl><type><name>regex_t</name> <modifier>*</modifier></type><name>preg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>regex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>tre_regncomp</name><argument_list>(<argument><expr><name>preg</name></expr></argument>, <argument><expr><name>regex</name></expr></argument>, <argument><expr><ternary><condition><expr><name>regex</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>regex</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>cflags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>tre_regcompb</name><parameter_list>(<parameter><decl><type><name>regex_t</name> <modifier>*</modifier></type><name>preg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>regex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tre_char_t</name> <modifier>*</modifier></type><name>wregex</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>wlen</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>regex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>regex</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tre_char_t</name> <modifier>*</modifier></type><name>wstr</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>wregex</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tre_char_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>wregex</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REG_ESPACE</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>wstr</name> <operator>=</operator> <name>wregex</name></expr>;</expr_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><operator>(</operator><name>wstr</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>str</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
  <expr_stmt><expr><name>wlen</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wregex</name><index>[<expr><name>wlen</name></expr>]</index></name> <operator>=</operator> <name>L</name><literal type="char">'\0'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tre_compile</name><argument_list>(<argument><expr><name>preg</name></expr></argument>, <argument><expr><name>wregex</name></expr></argument>, <argument><expr><name>wlen</name></expr></argument>, <argument><expr><name>cflags</name> <operator>|</operator> <name>REG_USEBYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>wregex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TRE_WCHAR</name></cpp:ifdef>
<function><type><name>int</name></type>
<name>tre_regwncomp</name><parameter_list>(<parameter><decl><type><name>regex_t</name> <modifier>*</modifier></type><name>preg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>regex</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>tre_compile</name><argument_list>(<argument><expr><name>preg</name></expr></argument>, <argument><expr><name>regex</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>cflags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>tre_regwcomp</name><parameter_list>(<parameter><decl><type><name>regex_t</name> <modifier>*</modifier></type><name>preg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>regex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>tre_compile</name><argument_list>(<argument><expr><name>preg</name></expr></argument>, <argument><expr><name>regex</name></expr></argument>, <argument><expr><ternary><condition><expr><name>regex</name></expr> ?</condition><then> <expr><call><name>wcslen</name><argument_list>(<argument><expr><name>regex</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>cflags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TRE_WCHAR */</comment>

<function><type><name>void</name></type>
<name>tre_regfree</name><parameter_list>(<parameter><decl><type><name>regex_t</name> <modifier>*</modifier></type><name>preg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>tre_free</name><argument_list>(<argument><expr><name>preg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* EOF */</comment>
</unit>
