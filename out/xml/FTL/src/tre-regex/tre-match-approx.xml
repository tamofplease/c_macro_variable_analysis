<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/tre-regex/tre-match-approx.c"><comment type="block">/*
  tre-match-approx.c - TRE approximate regex matching engine

  This software is released under a BSD-style license.
  See the file LICENSE for details and copyright.

*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tre-config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tre-internal.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_CONFIG_H */</comment>

<comment type="block">/* AIX requires this to be the first thing in the file.	 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TRE_USE_ALLOCA</name></cpp:ifdef>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__GNUC__</name></cpp:ifndef>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><name>HAVE_ALLOCA_H</name></expr></cpp:if>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>&lt;alloca.h&gt;</cpp:file></cpp:include>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifdef>#  <cpp:directive>ifdef</cpp:directive> <name>_AIX</name></cpp:ifdef>
 <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>alloca</name></cpp:pragma>
<cpp:else>#  <cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifndef>#   <cpp:directive>ifndef</cpp:directive> <name>alloca</name></cpp:ifndef> <comment type="block">/* predefined by HP cc +Olibcalls */</comment>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>alloca</name> <parameter_list>()</parameter_list>;</function_decl>
<cpp:endif>#   <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TRE_USE_ALLOCA */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__USE_STRING_INLINES</name></cpp:macro></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__NO_INLINE__</name></cpp:undef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_WCHAR_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wchar.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_WCHAR_H */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_WCTYPE_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wctype.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_WCTYPE_H */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>TRE_WCHAR</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !TRE_WCHAR */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_MALLOC_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;malloc.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_MALLOC_H */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tre-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tre-match-utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tre.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xmalloc.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRE_M_COST</name></cpp:macro>	<cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRE_M_NUM_INS</name></cpp:macro>	<cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRE_M_NUM_DEL</name></cpp:macro>	<cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRE_M_NUM_SUBST</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRE_M_NUM_ERR</name></cpp:macro>	<cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRE_M_LAST</name></cpp:macro>	<cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRE_M_MAX_DEPTH</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
  <comment type="block">/* State in the TNFA transition table. */</comment>
  <decl_stmt><decl><type><name>tre_tnfa_transition_t</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>
  <comment type="block">/* Position in input string. */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>
  <comment type="block">/* Tag values. */</comment>
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>tags</name></decl>;</decl_stmt>
  <comment type="block">/* Matching parameters. */</comment>
  <decl_stmt><decl><type><name>regaparams_t</name></type> <name>params</name></decl>;</decl_stmt>
  <comment type="block">/* Nesting depth of parameters.  This is used as an index in
     the `costs' array. */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>
  <comment type="block">/* Costs and counter values for different parameter nesting depths. */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name><name>costs</name><index>[<expr><name>TRE_M_MAX_DEPTH</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>TRE_M_LAST</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>tre_tnfa_approx_reach_t</name>;</typedef>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TRE_DEBUG</name></cpp:ifdef>
<comment type="block">/* Prints the `reach' array in a readable fashion with DPRINT. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>tre_print_reach</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>tre_tnfa_t</name> <modifier>*</modifier></type><name>tnfa</name></decl></parameter>, <parameter><decl><type><name>tre_tnfa_approx_reach_t</name> <modifier>*</modifier></type><name>reach</name></decl></parameter>,
		<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_tags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

  <comment type="block">/* Print each state on one line. */</comment>
  <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"  reach:\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>id</name> <operator>&lt;</operator> <name><name>tnfa</name><operator>-&gt;</operator><name>num_states</name></name></expr>;</condition> <incr><expr><name>id</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>&lt;</operator> <name>pos</name></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if></if_stmt>  <comment type="block">/* Not reached. */</comment>
      <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"	 %03d, costs "</literal><operator>,</operator> <name>id</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"["</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>TRE_M_LAST</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%2d"</literal><operator>,</operator> <name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>TRE_M_LAST</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">","</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></for>
	  <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"]"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>depth</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">", "</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
      <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"\n	tags "</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_tags</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%02d"</literal><operator>,</operator> <name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>num_tags</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">","</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
      <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TRE_DEBUG */</comment>


<comment type="block">/* Sets the matching parameters in `reach' to the ones defined in the `pa'
   array.  If `pa' specifies default values, they are taken from
   `default_params'. */</comment>
<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>void</name></type>
<name>tre_set_params</name><parameter_list>(<parameter><decl><type><name>tre_tnfa_approx_reach_t</name> <modifier>*</modifier></type><name>reach</name></decl></parameter>,
	       <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pa</name></decl></parameter>, <parameter><decl><type><name>regaparams_t</name></type> <name>default_params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>

  <comment type="block">/* If depth is increased reset costs and counters to zero for the
     new levels. */</comment>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>pa</name><index>[<expr><name>TRE_PARAM_DEPTH</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>value</name> <operator>&lt;=</operator> <name>TRE_M_MAX_DEPTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;</operator> <name><name>reach</name><operator>-&gt;</operator><name>depth</name></name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>reach</name><operator>-&gt;</operator><name>depth</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>value</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>TRE_M_LAST</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	  <expr_stmt><expr><name><name>reach</name><operator>-&gt;</operator><name>costs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
    </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>reach</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

  <comment type="block">/* Set insert cost. */</comment>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>pa</name><index>[<expr><name>TRE_PARAM_COST_INS</name></expr>]</index></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>TRE_PARAM_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>reach</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>cost_ins</name></name> <operator>=</operator> <name><name>default_params</name><operator>.</operator><name>cost_ins</name></name></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>value</name> <operator>!=</operator> <name>TRE_PARAM_UNSET</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>reach</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>cost_ins</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="block">/* Set delete cost. */</comment>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>pa</name><index>[<expr><name>TRE_PARAM_COST_DEL</name></expr>]</index></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>TRE_PARAM_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>reach</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>cost_del</name></name> <operator>=</operator> <name><name>default_params</name><operator>.</operator><name>cost_del</name></name></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>value</name> <operator>!=</operator> <name>TRE_PARAM_UNSET</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>reach</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>cost_del</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="block">/* Set substitute cost. */</comment>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>pa</name><index>[<expr><name>TRE_PARAM_COST_SUBST</name></expr>]</index></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>TRE_PARAM_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>reach</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>cost_subst</name></name> <operator>=</operator> <name><name>default_params</name><operator>.</operator><name>cost_subst</name></name></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>reach</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>cost_subst</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <comment type="block">/* Set maximum cost. */</comment>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>pa</name><index>[<expr><name>TRE_PARAM_COST_MAX</name></expr>]</index></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>TRE_PARAM_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>reach</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>max_cost</name></name> <operator>=</operator> <name><name>default_params</name><operator>.</operator><name>max_cost</name></name></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>value</name> <operator>!=</operator> <name>TRE_PARAM_UNSET</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>reach</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>max_cost</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="block">/* Set maximum inserts. */</comment>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>pa</name><index>[<expr><name>TRE_PARAM_MAX_INS</name></expr>]</index></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>TRE_PARAM_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>reach</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>max_ins</name></name> <operator>=</operator> <name><name>default_params</name><operator>.</operator><name>max_ins</name></name></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>value</name> <operator>!=</operator> <name>TRE_PARAM_UNSET</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>reach</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>max_ins</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="block">/* Set maximum deletes. */</comment>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>pa</name><index>[<expr><name>TRE_PARAM_MAX_DEL</name></expr>]</index></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>TRE_PARAM_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>reach</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>max_del</name></name> <operator>=</operator> <name><name>default_params</name><operator>.</operator><name>max_del</name></name></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>value</name> <operator>!=</operator> <name>TRE_PARAM_UNSET</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>reach</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>max_del</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="block">/* Set maximum substitutes. */</comment>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>pa</name><index>[<expr><name>TRE_PARAM_MAX_SUBST</name></expr>]</index></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>TRE_PARAM_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>reach</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>max_subst</name></name> <operator>=</operator> <name><name>default_params</name><operator>.</operator><name>max_subst</name></name></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>value</name> <operator>!=</operator> <name>TRE_PARAM_UNSET</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>reach</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>max_subst</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="block">/* Set maximum number of errors. */</comment>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>pa</name><index>[<expr><name>TRE_PARAM_MAX_ERR</name></expr>]</index></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>TRE_PARAM_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>reach</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>max_err</name></name> <operator>=</operator> <name><name>default_params</name><operator>.</operator><name>max_err</name></name></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>value</name> <operator>!=</operator> <name>TRE_PARAM_UNSET</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>reach</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>max_err</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>reg_errcode_t</name></type>
<name>tre_tnfa_run_approx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>tre_tnfa_t</name> <modifier>*</modifier></type><name>tnfa</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
		    <parameter><decl><type><name>tre_str_type_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>match_tags</name></decl></parameter>,
		    <parameter><decl><type><name>regamatch_t</name> <modifier>*</modifier></type><name>match</name></decl></parameter>, <parameter><decl><type><name>regaparams_t</name></type> <name>default_params</name></decl></parameter>,
		    <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>match_end_ofs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* State variables required by GET_NEXT_WCHAR. */</comment>
  <decl_stmt><decl><type><name>tre_char_t</name></type> <name>prev_c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>next_c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str_byte</name> <init>= <expr><name>string</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pos_add_next</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TRE_WCHAR</name></cpp:ifdef>
  <decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>str_wide</name> <init>= <expr><name>string</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TRE_MBSTATE</name></cpp:ifdef>
  <decl_stmt><decl><type><name>mbstate_t</name></type> <name>mbstate</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !TRE_WCHAR */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TRE_WCHAR */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>reg_notbol</name> <init>= <expr><name>eflags</name> <operator>&amp;</operator> <name>REG_NOTBOL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>reg_noteol</name> <init>= <expr><name>eflags</name> <operator>&amp;</operator> <name>REG_NOTEOL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>reg_newline</name> <init>= <expr><name><name>tnfa</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;</operator> <name>REG_NEWLINE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>str_user_end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>prev_pos</name></decl>;</decl_stmt>

  <comment type="block">/* Number of tags. */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>num_tags</name></decl>;</decl_stmt>
  <comment type="block">/* The reach tables. */</comment>
  <decl_stmt><decl><type><name>tre_tnfa_approx_reach_t</name> <modifier>*</modifier></type><name>reach</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>reach_next</name></decl>;</decl_stmt>
  <comment type="block">/* Tag array for temporary use. */</comment>
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>tmp_tags</name></decl>;</decl_stmt>

  <comment type="block">/* End offset of best match so far, or -1 if no match found yet. */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>match_eo</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <comment type="block">/* Costs of the match. */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name><name>match_costs</name><index>[<expr><name>TRE_M_LAST</name></expr>]</index></name></decl>;</decl_stmt>

  <comment type="block">/* Space for temporary data required for matching. */</comment>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>id</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>match_tags</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>num_tags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>num_tags</name> <operator>=</operator> <name><name>tnfa</name><operator>-&gt;</operator><name>num_tags</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TRE_MBSTATE</name></cpp:ifdef>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mbstate</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mbstate</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TRE_MBSTATE */</comment>

  <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"tre_tnfa_run_approx, input type %d, len %d, eflags %d, "</literal>
	  <literal type="string">"match_tags %p\n"</literal><operator>,</operator>
	  <name>type</name><operator>,</operator> <name>len</name><operator>,</operator> <name>eflags</name><operator>,</operator>
	  <name>match_tags</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"max cost %d, ins %d, del %d, subst %d\n"</literal><operator>,</operator>
	  <name><name>default_params</name><operator>.</operator><name>max_cost</name></name><operator>,</operator>
	  <name><name>default_params</name><operator>.</operator><name>cost_ins</name></name><operator>,</operator>
	  <name><name>default_params</name><operator>.</operator><name>cost_del</name></name><operator>,</operator>
	  <name><name>default_params</name><operator>.</operator><name>cost_subst</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Allocate memory for temporary data required for matching.	This needs to
     be done for every matching operation to be thread safe.  This allocates
     everything in a single large block from the stack frame using alloca()
     or with malloc() if alloca is unavailable. */</comment>
  <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf_cursor</name></decl>;</decl_stmt>
    <comment type="block">/* Space needed for one array of tags. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>tag_bytes</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tmp_tags</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>num_tags</name></expr></init></decl>;</decl_stmt>
    <comment type="block">/* Space needed for one reach table. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>reach_bytes</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>reach_next</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>tnfa</name><operator>-&gt;</operator><name>num_states</name></name></expr></init></decl>;</decl_stmt>
    <comment type="block">/* Total space needed. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>total_bytes</name> <init>= <expr><name>reach_bytes</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name><name>tnfa</name><operator>-&gt;</operator><name>num_states</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>*</operator> <name>tag_bytes</name></expr></init></decl>;</decl_stmt>
    <comment type="block">/* Add some extra to make sure we can align the pointers.  The multiplier
       used here must be equal to the number of ALIGN calls below. */</comment>
    <expr_stmt><expr><name>total_bytes</name> <operator>+=</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

    <comment type="block">/* Allocate the memory. */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TRE_USE_ALLOCA</name></cpp:ifdef>
    <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><name>total_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !TRE_USE_ALLOCA */</comment>
    <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>total_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !TRE_USE_ALLOCA */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>REG_ESPACE</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>total_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Allocate `tmp_tags' from `buf'. */</comment>
    <expr_stmt><expr><name>tmp_tags</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>buf_cursor</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>tag_bytes</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>buf_cursor</name> <operator>+=</operator> <call><name>ALIGN</name><argument_list>(<argument><expr><name>buf_cursor</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Allocate `reach' from `buf'. */</comment>
    <expr_stmt><expr><name>reach</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buf_cursor</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>buf_cursor</name> <operator>+=</operator> <name>reach_bytes</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>buf_cursor</name> <operator>+=</operator> <call><name>ALIGN</name><argument_list>(<argument><expr><name>buf_cursor</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Allocate `reach_next' from `buf'. */</comment>
    <expr_stmt><expr><name>reach_next</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buf_cursor</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>buf_cursor</name> <operator>+=</operator> <name>reach_bytes</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>buf_cursor</name> <operator>+=</operator> <call><name>ALIGN</name><argument_list>(<argument><expr><name>buf_cursor</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Allocate tag arrays for `reach' and `reach_next' from `buf'. */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tnfa</name><operator>-&gt;</operator><name>num_states</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
      <block>{<block_content>
	<expr_stmt><expr><name><name>reach</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tags</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buf_cursor</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>buf_cursor</name> <operator>+=</operator> <name>tag_bytes</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tags</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buf_cursor</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>buf_cursor</name> <operator>+=</operator> <name>tag_bytes</name></expr>;</expr_stmt>
      </block_content>}</block></for>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>buf_cursor</name> <operator>&lt;=</operator> <name>buf</name> <operator>+</operator> <name>total_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TRE_M_LAST</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>match_costs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt></block_content></block></for>

  <comment type="block">/* Mark the reach arrays empty. */</comment>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tnfa</name><operator>-&gt;</operator><name>num_states</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>reach</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>=</operator> <name><name>reach_next</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>

  <expr_stmt><expr><name>prev_pos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>GET_NEXT_WCHAR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <while>while <condition>(<comment type="block">/*CONSTCOND*/</comment><expr><operator>(</operator><name>void</name><operator>)</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%03d:%2lc/%05d\n"</literal><operator>,</operator> <name>pos</name><operator>,</operator> <operator>(</operator><name>tre_cint_t</name><operator>)</operator><name>next_c</name><operator>,</operator> <operator>(</operator><name>int</name><operator>)</operator><name>next_c</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Add initial states to `reach_next' if an exact match has not yet
	 been found. */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>match_costs</name><index>[<expr><name>TRE_M_COST</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>tre_tnfa_transition_t</name> <modifier>*</modifier></type><name>trans</name></decl>;</decl_stmt>
	  <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"  init"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <for>for <control>(<init><expr><name>trans</name> <operator>=</operator> <name><name>tnfa</name><operator>-&gt;</operator><name>initial</name></name></expr>;</init> <condition><expr><name><name>trans</name><operator>-&gt;</operator><name>state</name></name></expr>;</condition> <incr><expr><name>trans</name><operator>++</operator></expr></incr>)</control>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name>int</name></type> <name>stateid</name> <init>= <expr><name><name>trans</name><operator>-&gt;</operator><name>state_id</name></name></expr></init></decl>;</decl_stmt>

	      <comment type="block">/* If this state is not currently in `reach_next', add it
		 there. */</comment>
	      <if_stmt><if>if <condition>(<expr><name><name>reach_next</name><index>[<expr><name>stateid</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>&lt;</operator> <name>pos</name></expr>)</condition>
		<block>{<block_content>
		  <if_stmt><if>if <condition>(<expr><name><name>trans</name><operator>-&gt;</operator><name>assertions</name></name> <operator>&amp;&amp;</operator> <call><name>CHECK_ASSERTIONS</name><argument_list>(<argument><expr><name><name>trans</name><operator>-&gt;</operator><name>assertions</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		    <block>{<block_content>
		      <comment type="block">/* Assertions failed, don't add this state. */</comment>
		      <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">" !%d (assert)"</literal><operator>,</operator> <name>stateid</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <continue>continue;</continue>
		    </block_content>}</block></if></if_stmt>
		  <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">" %d"</literal><operator>,</operator> <name>stateid</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>stateid</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <name><name>trans</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>stateid</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

		  <comment type="block">/* Compute tag values after this transition. */</comment>
		  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_tags</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		    <expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>stateid</name></expr>]</index></name><operator>.</operator><name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

		  <if_stmt><if>if <condition>(<expr><name><name>trans</name><operator>-&gt;</operator><name>tags</name></name></expr>)</condition><block type="pseudo"><block_content>
		    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>trans</name><operator>-&gt;</operator><name>tags</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		      <if_stmt><if>if <condition>(<expr><name><name>trans</name><operator>-&gt;</operator><name>tags</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>num_tags</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>stateid</name></expr>]</index></name><operator>.</operator><name><name>tags</name><index>[<expr><name><name>trans</name><operator>-&gt;</operator><name>tags</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>

		  <comment type="block">/* Set the parameters, depth, and costs. */</comment>
		  <expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>stateid</name></expr>]</index></name><operator>.</operator><name>params</name> <operator>=</operator> <name>default_params</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>stateid</name></expr>]</index></name><operator>.</operator><name>depth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TRE_M_LAST</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		    <expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>stateid</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
		  <if_stmt><if>if <condition>(<expr><name><name>trans</name><operator>-&gt;</operator><name>params</name></name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><call><name>tre_set_params</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>reach_next</name><index>[<expr><name>stateid</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>trans</name><operator>-&gt;</operator><name>params</name></name></expr></argument>,
				   <argument><expr><name>default_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		  <comment type="block">/* If this is the final state, mark the exact match. */</comment>
		  <if_stmt><if>if <condition>(<expr><name><name>trans</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name><name>tnfa</name><operator>-&gt;</operator><name>final</name></name></expr>)</condition>
		    <block>{<block_content>
		      <expr_stmt><expr><name>match_eo</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
		      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_tags</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>match_tags</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>reach_next</name><index>[<expr><name>stateid</name></expr>]</index></name><operator>.</operator><name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
		      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TRE_M_LAST</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>match_costs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
		    </block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></for>
	    <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>


      <comment type="block">/* Handle inserts.  This is done by pretending there's an epsilon
	 transition from each state in `reach' back to the same state.
	 We don't need to worry about the final state here; this will never
	 give a better match than what we already have. */</comment>
      <for>for <control>(<init><expr><name>id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>id</name> <operator>&lt;</operator> <name><name>tnfa</name><operator>-&gt;</operator><name>num_states</name></name></expr>;</condition> <incr><expr><name>id</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>int</name></type> <name>cost</name></decl>, <decl><type ref="prev"/><name>cost0</name></decl>;</decl_stmt>

	  <if_stmt><if>if <condition>(<expr><name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>!=</operator> <name>prev_pos</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"	 insert: %d not reached\n"</literal><operator>,</operator> <name>id</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <continue>continue;</continue>	 <comment type="block">/* Not reached. */</comment>
	    </block_content>}</block></if></if_stmt>

	  <expr_stmt><expr><name>depth</name> <operator>=</operator> <name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>

	  <comment type="block">/* Compute and check cost at current depth. */</comment>
	  <expr_stmt><expr><name>cost</name> <operator>=</operator> <name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><name>depth</name></expr>]</index><index>[<expr><name>TRE_M_COST</name></expr>]</index></name></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>params</name><operator>.</operator><name>cost_ins</name></name> <operator>!=</operator> <name>TRE_PARAM_UNSET</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>cost</name> <operator>+=</operator> <name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>params</name><operator>.</operator><name>cost_ins</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  <if_stmt><if>if <condition>(<expr><name>cost</name> <operator>&gt;</operator> <name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>params</name><operator>.</operator><name>max_cost</name></name></expr>)</condition><block type="pseudo"><block_content>
	    <continue>continue;</continue></block_content></block></if></if_stmt>  <comment type="block">/* Cost too large. */</comment>

	  <comment type="block">/* Check number of inserts at current depth. */</comment>
	  <if_stmt><if>if <condition>(<expr><name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><name>depth</name></expr>]</index><index>[<expr><name>TRE_M_NUM_INS</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal>
	      <operator>&gt;</operator> <name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>params</name><operator>.</operator><name>max_ins</name></name></expr>)</condition><block type="pseudo"><block_content>
	    <continue>continue;</continue></block_content></block></if></if_stmt>  <comment type="block">/* Too many inserts. */</comment>

	  <comment type="block">/* Check total number of errors at current depth. */</comment>
	  <if_stmt><if>if <condition>(<expr><name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><name>depth</name></expr>]</index><index>[<expr><name>TRE_M_NUM_ERR</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal>
	      <operator>&gt;</operator> <name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>params</name><operator>.</operator><name>max_err</name></name></expr>)</condition><block type="pseudo"><block_content>
	    <continue>continue;</continue></block_content></block></if></if_stmt>  <comment type="block">/* Too many errors. */</comment>

	  <comment type="block">/* Compute overall cost. */</comment>
	  <expr_stmt><expr><name>cost0</name> <operator>=</operator> <name>cost</name></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>cost0</name> <operator>=</operator> <name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>TRE_M_COST</name></expr>]</index></name></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>params</name><operator>.</operator><name>cost_ins</name></name> <operator>!=</operator> <name>TRE_PARAM_UNSET</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>cost0</name> <operator>+=</operator> <name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>params</name><operator>.</operator><name>cost_ins</name></name></expr>;</expr_stmt></block_content></block></if>
	      <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>cost0</name> <operator>+=</operator> <name><name>default_params</name><operator>.</operator><name>cost_ins</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	    </block_content>}</block></if></if_stmt>

	  <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"  insert: from %d to %d, cost %d: "</literal><operator>,</operator> <name>id</name><operator>,</operator> <name>id</name><operator>,</operator>
		  <name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><name>depth</name></expr>]</index><index>[<expr><name>TRE_M_COST</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name><name>reach_next</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>==</operator> <name>pos</name>
	      <operator>&amp;&amp;</operator> <operator>(</operator><name>cost0</name> <operator>&gt;=</operator> <name><name>reach_next</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>TRE_M_COST</name></expr>]</index></name><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"lose\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <continue>continue;</continue>
	    </block_content>}</block></if></if_stmt>
	  <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"win\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <comment type="block">/* Copy state, position, tags, parameters, and depth. */</comment>
	  <expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>state</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
	  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_tags</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
	  <expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>params</name> <operator>=</operator> <name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>params</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>depth</name> <operator>=</operator> <name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>

	  <comment type="block">/* Set the costs after this transition. */</comment>
	  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>reach_next</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>costs</name></expr></argument>, <argument><expr><name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>costs</name></expr></argument>,
		 <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>reach_next</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof>
		 <operator>*</operator> <name>TRE_M_LAST</name> <operator>*</operator> <operator>(</operator><name>depth</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><name>depth</name></expr>]</index><index>[<expr><name>TRE_M_COST</name></expr>]</index></name> <operator>=</operator> <name>cost</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><name>depth</name></expr>]</index><index>[<expr><name>TRE_M_NUM_INS</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><name>depth</name></expr>]</index><index>[<expr><name>TRE_M_NUM_ERR</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>TRE_M_COST</name></expr>]</index></name> <operator>=</operator> <name>cost0</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>TRE_M_NUM_INS</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>TRE_M_NUM_ERR</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>

	</block_content>}</block></for>


      <comment type="block">/* Handle deletes.  This is done by traversing through the whole TNFA
	 pretending that all transitions are epsilon transitions, until
	 no more states can be reached with better costs. */</comment>
      <block>{<block_content>
	<comment type="block">/* XXX - dynamic ringbuffer size */</comment>
	<decl_stmt><decl><type><name>tre_tnfa_approx_reach_t</name> <modifier>*</modifier></type><name><name>ringbuffer</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>tre_tnfa_approx_reach_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>deque_start</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>deque_end</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>deque_start</name> <operator>=</operator> <name>deque_end</name> <operator>=</operator> <name>ringbuffer</name></expr>;</expr_stmt>

	<comment type="block">/* Add all states in `reach_next' to the deque. */</comment>
	<for>for <control>(<init><expr><name>id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>id</name> <operator>&lt;</operator> <name><name>tnfa</name><operator>-&gt;</operator><name>num_states</name></name></expr>;</condition> <incr><expr><name>id</name><operator>++</operator></expr></incr>)</control>
	  <block>{<block_content>
	    <if_stmt><if>if <condition>(<expr><name><name>reach_next</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>!=</operator> <name>pos</name></expr>)</condition><block type="pseudo"><block_content>
	      <continue>continue;</continue></block_content></block></if></if_stmt>
	    <expr_stmt><expr><operator>*</operator><name>deque_end</name> <operator>=</operator> <operator>&amp;</operator><name><name>reach_next</name><index>[<expr><name>id</name></expr>]</index></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>deque_end</name><operator>++</operator></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>deque_end</name> <operator>!=</operator> <name>deque_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></for>

	<comment type="block">/* Repeat until the deque is empty. */</comment>
	<while>while <condition>(<expr><name>deque_end</name> <operator>!=</operator> <name>deque_start</name></expr>)</condition>
	  <block>{<block_content>
	    <decl_stmt><decl><type><name>tre_tnfa_approx_reach_t</name> <modifier>*</modifier></type><name>reach_p</name></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>int</name></type> <name>cost</name></decl>, <decl><type ref="prev"/><name>cost0</name></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>tre_tnfa_transition_t</name> <modifier>*</modifier></type><name>trans</name></decl>;</decl_stmt>

	    <comment type="block">/* Pop the first item off the deque. */</comment>
	    <expr_stmt><expr><name>reach_p</name> <operator>=</operator> <operator>*</operator><name>deque_start</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>id</name> <operator>=</operator> <name>reach_p</name> <operator>-</operator> <name>reach_next</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>depth</name> <operator>=</operator> <name><name>reach_p</name><operator>-&gt;</operator><name>depth</name></name></expr>;</expr_stmt>

	    <comment type="block">/* Compute cost at current depth. */</comment>
	    <expr_stmt><expr><name>cost</name> <operator>=</operator> <name><name>reach_p</name><operator>-&gt;</operator><name>costs</name><index>[<expr><name>depth</name></expr>]</index><index>[<expr><name>TRE_M_COST</name></expr>]</index></name></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><name><name>reach_p</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>cost_del</name></name> <operator>!=</operator> <name>TRE_PARAM_UNSET</name></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>cost</name> <operator>+=</operator> <name><name>reach_p</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>cost_del</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	    <comment type="block">/* Check cost, number of deletes, and total number of errors
	       at current depth. */</comment>
	    <if_stmt><if>if <condition>(<expr><name>cost</name> <operator>&gt;</operator> <name><name>reach_p</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>max_cost</name></name>
		<operator>||</operator> <operator>(</operator><name><name>reach_p</name><operator>-&gt;</operator><name>costs</name><index>[<expr><name>depth</name></expr>]</index><index>[<expr><name>TRE_M_NUM_DEL</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal>
		    <operator>&gt;</operator> <name><name>reach_p</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>max_del</name></name><operator>)</operator>
		<operator>||</operator> <operator>(</operator><name><name>reach_p</name><operator>-&gt;</operator><name>costs</name><index>[<expr><name>depth</name></expr>]</index><index>[<expr><name>TRE_M_NUM_ERR</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal>
		    <operator>&gt;</operator> <name><name>reach_p</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>max_err</name></name><operator>)</operator></expr>)</condition>
	      <block>{<block_content>
		<comment type="block">/* Too many errors or cost too large. */</comment>
		<expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"  delete: from %03d: cost too large\n"</literal><operator>,</operator> <name>id</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>deque_start</name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>deque_start</name> <operator>&gt;=</operator> <operator>(</operator><name>ringbuffer</name> <operator>+</operator> <literal type="number">512</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name>deque_start</name> <operator>=</operator> <name>ringbuffer</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<continue>continue;</continue>
	      </block_content>}</block></if></if_stmt>

	    <comment type="block">/* Compute overall cost. */</comment>
	    <expr_stmt><expr><name>cost0</name> <operator>=</operator> <name>cost</name></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name>cost0</name> <operator>=</operator> <name><name>reach_p</name><operator>-&gt;</operator><name>costs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>TRE_M_COST</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>reach_p</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>cost_del</name></name> <operator>!=</operator> <name>TRE_PARAM_UNSET</name></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name>cost0</name> <operator>+=</operator> <name><name>reach_p</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>cost_del</name></name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
		  <expr_stmt><expr><name>cost0</name> <operator>+=</operator> <name><name>default_params</name><operator>.</operator><name>cost_del</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	      </block_content>}</block></if></if_stmt>

	    <for>for <control>(<init><expr><name>trans</name> <operator>=</operator> <name><name>reach_p</name><operator>-&gt;</operator><name>state</name></name></expr>;</init> <condition><expr><name><name>trans</name><operator>-&gt;</operator><name>state</name></name></expr>;</condition> <incr><expr><name>trans</name><operator>++</operator></expr></incr>)</control>
	      <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>dest_id</name> <init>= <expr><name><name>trans</name><operator>-&gt;</operator><name>state_id</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"  delete: from %03d to %03d, cost %d (%d): "</literal><operator>,</operator>
			<name>id</name><operator>,</operator> <name>dest_id</name><operator>,</operator> <name>cost0</name><operator>,</operator> <name><name>reach_p</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>max_cost</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>trans</name><operator>-&gt;</operator><name>assertions</name></name> <operator>&amp;&amp;</operator> <call><name>CHECK_ASSERTIONS</name><argument_list>(<argument><expr><name><name>trans</name><operator>-&gt;</operator><name>assertions</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"assertion failed\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <continue>continue;</continue>
		  </block_content>}</block></if></if_stmt>

		<comment type="block">/* Compute tag values after this transition. */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_tags</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		  <expr_stmt><expr><name><name>tmp_tags</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>reach_p</name><operator>-&gt;</operator><name>tags</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
		<if_stmt><if>if <condition>(<expr><name><name>trans</name><operator>-&gt;</operator><name>tags</name></name></expr>)</condition><block type="pseudo"><block_content>
		  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>trans</name><operator>-&gt;</operator><name>tags</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		    <if_stmt><if>if <condition>(<expr><name><name>trans</name><operator>-&gt;</operator><name>tags</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>num_tags</name></expr>)</condition><block type="pseudo"><block_content>
		      <expr_stmt><expr><name><name>tmp_tags</name><index>[<expr><name><name>trans</name><operator>-&gt;</operator><name>tags</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>

		<comment type="block">/* If another path has also reached this state, choose the one
		   with the smallest cost or best tags if costs are equal. */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>reach_next</name><index>[<expr><name>dest_id</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>==</operator> <name>pos</name>
		    <operator>&amp;&amp;</operator> <operator>(</operator><name>cost0</name> <operator>&gt;</operator> <name><name>reach_next</name><index>[<expr><name>dest_id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>TRE_M_COST</name></expr>]</index></name>
			<operator>||</operator> <operator>(</operator><name>cost0</name> <operator>==</operator> <name><name>reach_next</name><index>[<expr><name>dest_id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>TRE_M_COST</name></expr>]</index></name>
			    <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>match_tags</name>
				<operator>||</operator> <operator>!</operator><call><name>tre_tag_order</name><argument_list>(<argument><expr><name>num_tags</name></expr></argument>,
						  <argument><expr><name><name>tnfa</name><operator>-&gt;</operator><name>tag_directions</name></name></expr></argument>,
						  <argument><expr><name>tmp_tags</name></expr></argument>,
						  <argument><expr><name><name>reach_next</name><index>[<expr><name>dest_id</name></expr>]</index></name><operator>.</operator><name>tags</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"lose, cost0 %d, have %d\n"</literal><operator>,</operator>
			    <name>cost0</name><operator>,</operator> <name><name>reach_next</name><index>[<expr><name>dest_id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>TRE_M_COST</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <continue>continue;</continue>
		  </block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"win\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Set state, position, tags, parameters, depth, and costs. */</comment>
		<expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>dest_id</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <name><name>trans</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>dest_id</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_tags</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		  <expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>dest_id</name></expr>]</index></name><operator>.</operator><name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>tmp_tags</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

		<expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>dest_id</name></expr>]</index></name><operator>.</operator><name>params</name> <operator>=</operator> <name><name>reach_p</name><operator>-&gt;</operator><name>params</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>trans</name><operator>-&gt;</operator><name>params</name></name></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><call><name>tre_set_params</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>reach_next</name><index>[<expr><name>dest_id</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>trans</name><operator>-&gt;</operator><name>params</name></name></expr></argument>,
				 <argument><expr><name>default_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>dest_id</name></expr>]</index></name><operator>.</operator><name>depth</name> <operator>=</operator> <name><name>reach_p</name><operator>-&gt;</operator><name>depth</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>reach_next</name><index>[<expr><name>dest_id</name></expr>]</index></name><operator>.</operator><name>costs</name></expr></argument>,
		       <argument><expr><name><name>reach_p</name><operator>-&gt;</operator><name>costs</name></name></expr></argument>,
		       <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>reach_p</name><operator>-&gt;</operator><name>costs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof>
		       <operator>*</operator> <name>TRE_M_LAST</name> <operator>*</operator> <operator>(</operator><name>depth</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>dest_id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><name>depth</name></expr>]</index><index>[<expr><name>TRE_M_COST</name></expr>]</index></name> <operator>=</operator> <name>cost</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>dest_id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><name>depth</name></expr>]</index><index>[<expr><name>TRE_M_NUM_DEL</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>dest_id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><name>depth</name></expr>]</index><index>[<expr><name>TRE_M_NUM_ERR</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>dest_id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>TRE_M_COST</name></expr>]</index></name> <operator>=</operator> <name>cost0</name></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>dest_id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>TRE_M_NUM_DEL</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>dest_id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>TRE_M_NUM_ERR</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		  </block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>trans</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name><name>tnfa</name><operator>-&gt;</operator><name>final</name></name>
		    <operator>&amp;&amp;</operator> <operator>(</operator><name><name>match_eo</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal>
			<operator>||</operator> <name><name>match_costs</name><index>[<expr><name>TRE_M_COST</name></expr>]</index></name></expr></argument> &gt;</argument_list></name> <name>cost0</name>
			<operator>||</operator> <operator>(</operator><name><name>match_costs</name><index>[<expr><name>TRE_M_COST</name></expr>]</index></name> <operator>==</operator> <name>cost0</name>
			    <operator>&amp;&amp;</operator> <operator>(</operator><name>num_tags</name> <operator>&gt;</operator> <literal type="number">0</literal>
				<operator>&amp;&amp;</operator> <name><name>tmp_tags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>match_tags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"	 setting new match at %d, cost %d\n"</literal><operator>,</operator>
			    <name>pos</name><operator>,</operator> <name>cost0</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><name>match_eo</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>match_costs</name></expr></argument>, <argument><expr><name><name>reach_next</name><index>[<expr><name>dest_id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
			   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>match_costs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>TRE_M_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_tags</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		      <expr_stmt><expr><name><name>match_tags</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>tmp_tags</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
		  </block_content>}</block></if></if_stmt>

		<comment type="block">/* Add to the end of the deque. */</comment>
		<expr_stmt><expr><operator>*</operator><name>deque_end</name> <operator>=</operator> <operator>&amp;</operator><name><name>reach_next</name><index>[<expr><name>dest_id</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>deque_end</name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>deque_end</name> <operator>&gt;=</operator> <operator>(</operator><name>ringbuffer</name> <operator>+</operator> <literal type="number">512</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name>deque_end</name> <operator>=</operator> <name>ringbuffer</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>deque_end</name> <operator>!=</operator> <name>deque_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      </block_content>}</block></for>
	    <expr_stmt><expr><name>deque_start</name><operator>++</operator></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><name>deque_start</name> <operator>&gt;=</operator> <operator>(</operator><name>ringbuffer</name> <operator>+</operator> <literal type="number">512</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>deque_start</name> <operator>=</operator> <name>ringbuffer</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  </block_content>}</block></while>

      </block_content>}</block>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TRE_DEBUG</name></cpp:ifdef>
      <expr_stmt><expr><call><name>tre_print_reach</name><argument_list>(<argument><expr><name>tnfa</name></expr></argument>, <argument><expr><name>reach_next</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>num_tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TRE_DEBUG */</comment>

      <comment type="block">/* Check for end of string. */</comment>
      <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>STR_USER</name></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><name>str_user_end</name></expr>)</condition><block type="pseudo"><block_content>
		<break>break;</break></block_content></block></if></if_stmt>
	    </block_content>}</block></if>
	  <if type="elseif">else if <condition>(<expr><name>next_c</name> <operator>==</operator> <name>L</name><literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
	    <break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
	    <break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

      <expr_stmt><expr><name>prev_pos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>GET_NEXT_WCHAR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Swap `reach' and `reach_next'. */</comment>
      <block>{<block_content>
	<decl_stmt><decl><type><name>tre_tnfa_approx_reach_t</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>reach</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>reach</name> <operator>=</operator> <name>reach_next</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>reach_next</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
      </block_content>}</block>

      <comment type="block">/* Handle exact matches and substitutions. */</comment>
      <for>for <control>(<init><expr><name>id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>id</name> <operator>&lt;</operator> <name><name>tnfa</name><operator>-&gt;</operator><name>num_states</name></name></expr>;</condition> <incr><expr><name>id</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>tre_tnfa_transition_t</name> <modifier>*</modifier></type><name>trans</name></decl>;</decl_stmt>

	  <if_stmt><if>if <condition>(<expr><name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>&lt;</operator> <name>prev_pos</name></expr>)</condition><block type="pseudo"><block_content>
	    <continue>continue;</continue></block_content></block></if></if_stmt>  <comment type="block">/* Not reached. */</comment>
	  <for>for <control>(<init><expr><name>trans</name> <operator>=</operator> <name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>state</name></expr>;</init> <condition><expr><name><name>trans</name><operator>-&gt;</operator><name>state</name></name></expr>;</condition> <incr><expr><name>trans</name><operator>++</operator></expr></incr>)</control>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name>int</name></type> <name>dest_id</name></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name>int</name></type> <name>cost</name></decl>, <decl><type ref="prev"/><name>cost0</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

	      <if_stmt><if>if <condition>(<expr><name><name>trans</name><operator>-&gt;</operator><name>assertions</name></name>
		  <operator>&amp;&amp;</operator> <operator>(</operator><call><name>CHECK_ASSERTIONS</name><argument_list>(<argument><expr><name><name>trans</name><operator>-&gt;</operator><name>assertions</name></name></expr></argument>)</argument_list></call>
		      <operator>||</operator> <call><name>CHECK_CHAR_CLASSES</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>tnfa</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"  exact,  from %d: assert failed\n"</literal><operator>,</operator> <name>id</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

	      <expr_stmt><expr><name>depth</name> <operator>=</operator> <name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>dest_id</name> <operator>=</operator> <name><name>trans</name><operator>-&gt;</operator><name>state_id</name></name></expr>;</expr_stmt>

	      <expr_stmt><expr><name>cost</name> <operator>=</operator> <name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><name>depth</name></expr>]</index><index>[<expr><name>TRE_M_COST</name></expr>]</index></name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>cost0</name> <operator>=</operator> <name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>TRE_M_COST</name></expr>]</index></name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	      <if_stmt><if>if <condition>(<expr><name><name>trans</name><operator>-&gt;</operator><name>code_min</name></name> <operator>&gt;</operator> <operator>(</operator><name>tre_cint_t</name><operator>)</operator><name>prev_c</name>
		  <operator>||</operator> <name><name>trans</name><operator>-&gt;</operator><name>code_max</name></name> <operator>&lt;</operator> <operator>(</operator><name>tre_cint_t</name><operator>)</operator><name>prev_c</name></expr>)</condition>
		<block>{<block_content>
		  <comment type="block">/* Handle substitutes.  The required character was not in
		     the string, so match it in place of whatever was supposed
		     to be there and increase costs accordingly. */</comment>
		  <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

		  <comment type="block">/* Compute and check cost at current depth. */</comment>
		  <expr_stmt><expr><name>cost</name> <operator>=</operator> <name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><name>depth</name></expr>]</index><index>[<expr><name>TRE_M_COST</name></expr>]</index></name></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>params</name><operator>.</operator><name>cost_subst</name></name> <operator>!=</operator> <name>TRE_PARAM_UNSET</name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name>cost</name> <operator>+=</operator> <name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>params</name><operator>.</operator><name>cost_subst</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  <if_stmt><if>if <condition>(<expr><name>cost</name> <operator>&gt;</operator> <name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>params</name><operator>.</operator><name>max_cost</name></name></expr>)</condition><block type="pseudo"><block_content>
		    <continue>continue;</continue></block_content></block></if></if_stmt> <comment type="block">/* Cost too large. */</comment>

		  <comment type="block">/* Check number of substitutes at current depth. */</comment>
		  <if_stmt><if>if <condition>(<expr><name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><name>depth</name></expr>]</index><index>[<expr><name>TRE_M_NUM_SUBST</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal>
		      <operator>&gt;</operator> <name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>params</name><operator>.</operator><name>max_subst</name></name></expr>)</condition><block type="pseudo"><block_content>
		    <continue>continue;</continue></block_content></block></if></if_stmt> <comment type="block">/* Too many substitutes. */</comment>

		  <comment type="block">/* Check total number of errors at current depth. */</comment>
		  <if_stmt><if>if <condition>(<expr><name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><name>depth</name></expr>]</index><index>[<expr><name>TRE_M_NUM_ERR</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal>
		      <operator>&gt;</operator> <name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>params</name><operator>.</operator><name>max_err</name></name></expr>)</condition><block type="pseudo"><block_content>
		    <continue>continue;</continue></block_content></block></if></if_stmt> <comment type="block">/* Too many errors. */</comment>

		  <comment type="block">/* Compute overall cost. */</comment>
		  <expr_stmt><expr><name>cost0</name> <operator>=</operator> <name>cost</name></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		    <block>{<block_content>
		      <expr_stmt><expr><name>cost0</name> <operator>=</operator> <name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>TRE_M_COST</name></expr>]</index></name></expr>;</expr_stmt>
		      <if_stmt><if>if <condition>(<expr><name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>params</name><operator>.</operator><name>cost_subst</name></name> <operator>!=</operator> <name>TRE_PARAM_UNSET</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>cost0</name> <operator>+=</operator> <name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>params</name><operator>.</operator><name>cost_subst</name></name></expr>;</expr_stmt></block_content></block></if>
		      <else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>cost0</name> <operator>+=</operator> <name><name>default_params</name><operator>.</operator><name>cost_subst</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		    </block_content>}</block></if></if_stmt>
		  <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"  subst,  from %03d to %03d, cost %d: "</literal><operator>,</operator>
			  <name>id</name><operator>,</operator> <name>dest_id</name><operator>,</operator> <name>cost0</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
	      <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"  exact,  from %03d to %03d, cost %d: "</literal><operator>,</operator>
			<name>id</name><operator>,</operator> <name>dest_id</name><operator>,</operator> <name>cost0</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	      <comment type="block">/* Compute tag values after this transition. */</comment>
	      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_tags</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>tmp_tags</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
	      <if_stmt><if>if <condition>(<expr><name><name>trans</name><operator>-&gt;</operator><name>tags</name></name></expr>)</condition><block type="pseudo"><block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>trans</name><operator>-&gt;</operator><name>tags</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		  <if_stmt><if>if <condition>(<expr><name><name>trans</name><operator>-&gt;</operator><name>tags</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>num_tags</name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name><name>tmp_tags</name><index>[<expr><name><name>trans</name><operator>-&gt;</operator><name>tags</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>

	      <comment type="block">/* If another path has also reached this state, choose the
		 one with the smallest cost or best tags if costs are equal. */</comment>
	      <if_stmt><if>if <condition>(<expr><name><name>reach_next</name><index>[<expr><name>dest_id</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>==</operator> <name>pos</name>
		  <operator>&amp;&amp;</operator> <operator>(</operator><name>cost0</name> <operator>&gt;</operator> <name><name>reach_next</name><index>[<expr><name>dest_id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>TRE_M_COST</name></expr>]</index></name>
		      <operator>||</operator> <operator>(</operator><name>cost0</name> <operator>==</operator> <name><name>reach_next</name><index>[<expr><name>dest_id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>TRE_M_COST</name></expr>]</index></name>
			  <operator>&amp;&amp;</operator> <operator>!</operator><call><name>tre_tag_order</name><argument_list>(<argument><expr><name>num_tags</name></expr></argument>, <argument><expr><name><name>tnfa</name><operator>-&gt;</operator><name>tag_directions</name></name></expr></argument>,
					    <argument><expr><name>tmp_tags</name></expr></argument>,
					    <argument><expr><name><name>reach_next</name><index>[<expr><name>dest_id</name></expr>]</index></name><operator>.</operator><name>tags</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"lose\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
	      <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"win %d %d\n"</literal><operator>,</operator>
		      <name><name>reach_next</name><index>[<expr><name>dest_id</name></expr>]</index></name><operator>.</operator><name>pos</name><operator>,</operator>
		      <name><name>reach_next</name><index>[<expr><name>dest_id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>TRE_M_COST</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	      <comment type="block">/* Set state, position, tags, and depth. */</comment>
	      <expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>dest_id</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <name><name>trans</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>dest_id</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
	      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_tags</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>dest_id</name></expr>]</index></name><operator>.</operator><name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>tmp_tags</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
	      <expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>dest_id</name></expr>]</index></name><operator>.</operator><name>depth</name> <operator>=</operator> <name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>

	      <comment type="block">/* Set parameters. */</comment>
	      <expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>dest_id</name></expr>]</index></name><operator>.</operator><name>params</name> <operator>=</operator> <name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>params</name></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><name><name>trans</name><operator>-&gt;</operator><name>params</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>tre_set_params</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>reach_next</name><index>[<expr><name>dest_id</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>trans</name><operator>-&gt;</operator><name>params</name></name></expr></argument>,
			       <argument><expr><name>default_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	      <comment type="block">/* Set the costs after this transition. */</comment>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>reach_next</name><index>[<expr><name>dest_id</name></expr>]</index></name><operator>.</operator><name>costs</name></expr></argument>,
		       <argument><expr><name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>costs</name></expr></argument>,
		       <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>reach</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof>
		       <operator>*</operator> <name>TRE_M_LAST</name> <operator>*</operator> <operator>(</operator><name>depth</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>dest_id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><name>depth</name></expr>]</index><index>[<expr><name>TRE_M_COST</name></expr>]</index></name> <operator>=</operator> <name>cost</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>dest_id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><name>depth</name></expr>]</index><index>[<expr><name>TRE_M_NUM_SUBST</name></expr>]</index></name> <operator>+=</operator> <name>err</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>dest_id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><name>depth</name></expr>]</index><index>[<expr><name>TRE_M_NUM_ERR</name></expr>]</index></name> <operator>+=</operator> <name>err</name></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>dest_id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>TRE_M_COST</name></expr>]</index></name> <operator>=</operator> <name>cost0</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>dest_id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>TRE_M_NUM_SUBST</name></expr>]</index></name> <operator>+=</operator> <name>err</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>reach_next</name><index>[<expr><name>dest_id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>TRE_M_NUM_ERR</name></expr>]</index></name> <operator>+=</operator> <name>err</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

	      <if_stmt><if>if <condition>(<expr><name><name>trans</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name><name>tnfa</name><operator>-&gt;</operator><name>final</name></name>
		  <operator>&amp;&amp;</operator> <operator>(</operator><name>match_eo</name> <operator>&lt;</operator> <literal type="number">0</literal>
		      <operator>||</operator> <name>cost0</name> <operator>&lt;</operator> <name><name>match_costs</name><index>[<expr><name>TRE_M_COST</name></expr>]</index></name>
		      <operator>||</operator> <operator>(</operator><name>cost0</name> <operator>==</operator> <name><name>match_costs</name><index>[<expr><name>TRE_M_COST</name></expr>]</index></name>
			  <operator>&amp;&amp;</operator> <name>num_tags</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>tmp_tags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>match_tags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"    setting new match at %d, cost %d\n"</literal><operator>,</operator>
			  <name>pos</name><operator>,</operator> <name>cost0</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name>match_eo</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
		  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TRE_M_LAST</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		    <expr_stmt><expr><name><name>match_costs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>reach_next</name><index>[<expr><name>dest_id</name></expr>]</index></name><operator>.</operator><name><name>costs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
		  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_tags</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		    <expr_stmt><expr><name><name>match_tags</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>tmp_tags</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></for>
	</block_content>}</block></for>
    </block_content>}</block></while>

  <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"match end offset = %d, match cost = %d\n"</literal><operator>,</operator> <name>match_eo</name><operator>,</operator>
	  <name><name>match_costs</name><index>[<expr><name>TRE_M_COST</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>TRE_USE_ALLOCA</name></cpp:ifndef>
  <if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !TRE_USE_ALLOCA */</comment>

  <expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>cost</name></name> <operator>=</operator> <name><name>match_costs</name><index>[<expr><name>TRE_M_COST</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>num_ins</name></name> <operator>=</operator> <name><name>match_costs</name><index>[<expr><name>TRE_M_NUM_INS</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>num_del</name></name> <operator>=</operator> <name><name>match_costs</name><index>[<expr><name>TRE_M_NUM_DEL</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>num_subst</name></name> <operator>=</operator> <name><name>match_costs</name><index>[<expr><name>TRE_M_NUM_SUBST</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>match_end_ofs</name> <operator>=</operator> <name>match_eo</name></expr>;</expr_stmt>

  <return>return <expr><ternary><condition><expr><name>match_eo</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>REG_OK</name></expr> </then><else>: <expr><name>REG_NOMATCH</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
