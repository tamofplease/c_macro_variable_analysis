<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/tre-regex/tre-mem.c"><comment type="block">/*
  tre-mem.c - TRE memory allocator

  This software is released under a BSD-style license.
  See the file LICENSE for details and copyright.

*/</comment>

<comment type="block">/*
  This memory allocator is for allocating small memory blocks efficiently
  in terms of memory overhead and execution speed.  The allocated blocks
  cannot be freed individually, only all at once.  There can be multiple
  allocators, though.
*/</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_CONFIG_H */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tre-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tre-mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xmalloc.h"</cpp:file></cpp:include>


<comment type="block">/* Returns a new memory allocator or NULL if out of memory. */</comment>
<function><type><name>tre_mem_t</name></type>
<name>tre_mem_new_impl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>provided</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>provided_block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>tre_mem_t</name></type> <name>mem</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>provided</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>mem</name> <operator>=</operator> <name>provided_block</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>mem</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>mem</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>mem</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>mem</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><name>mem</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Frees the memory allocator and all memory allocated with it. */</comment>
<function><type><name>void</name></type>
<name>tre_mem_destroy</name><parameter_list>(<parameter><decl><type><name>tre_mem_t</name></type> <name>mem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>tre_list_t</name> <modifier>*</modifier></type><name>tmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>l</name> <init>= <expr><name><name>mem</name><operator>-&gt;</operator><name>blocks</name></name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>l</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>l</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
    </block_content>}</block></while>
  <expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* Allocates a block of `size' bytes from `mem'.  Returns a pointer to the
   allocated block or NULL if an underlying malloc() failed. */</comment>
<function><type><name>void</name> <modifier>*</modifier></type>
<name>tre_mem_alloc_impl</name><parameter_list>(<parameter><decl><type><name>tre_mem_t</name></type> <name>mem</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>provided</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>provided_block</name></decl></parameter>,
		   <parameter><decl><type><name>int</name></type> <name>zero</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>mem</name><operator>-&gt;</operator><name>failed</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"tre_mem_alloc: oops, called after failure?!\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MALLOC_DEBUGGING</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>provided</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"tre_mem_alloc: xmalloc forced failure\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>mem</name><operator>-&gt;</operator><name>failed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	  <return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MALLOC_DEBUGGING */</comment>

  <if_stmt><if>if <condition>(<expr><name><name>mem</name><operator>-&gt;</operator><name>n</name></name> <operator>&lt;</operator> <name>size</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* We need more memory than is available in the current block.
	 Allocate a new block. */</comment>
      <decl_stmt><decl><type><name>tre_list_t</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>provided</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"tre_mem_alloc: using provided block\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name>provided_block</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"tre_mem_alloc: provided block was NULL\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>mem</name><operator>-&gt;</operator><name>failed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	      <return>return <expr><name>NULL</name></expr>;</return>
	    </block_content>}</block></if></if_stmt>
	  <expr_stmt><expr><name><name>mem</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>provided_block</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>mem</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <name>TRE_MEM_BLOCK_SIZE</name></expr>;</expr_stmt>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <decl_stmt><decl><type><name>int</name></type> <name>block_size</name></decl>;</decl_stmt>
	  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>*</operator> <literal type="number">8</literal> <operator>&gt;</operator> <name>TRE_MEM_BLOCK_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>block_size</name> <operator>=</operator> <name>size</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><name>block_size</name> <operator>=</operator> <name>TRE_MEM_BLOCK_SIZE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	  <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"tre_mem_alloc: allocating new %d byte block\n"</literal><operator>,</operator>
		  <name>block_size</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>l</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name><name>mem</name><operator>-&gt;</operator><name>failed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	      <return>return <expr><name>NULL</name></expr>;</return>
	    </block_content>}</block></if></if_stmt>
	  <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>block_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>mem</name><operator>-&gt;</operator><name>failed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	      <return>return <expr><name>NULL</name></expr>;</return>
	    </block_content>}</block></if></if_stmt>
	  <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name><name>mem</name><operator>-&gt;</operator><name>current</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>mem</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  <if_stmt><if>if <condition>(<expr><name><name>mem</name><operator>-&gt;</operator><name>blocks</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>mem</name><operator>-&gt;</operator><name>blocks</name></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  <expr_stmt><expr><name><name>mem</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>mem</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>mem</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <name>block_size</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

  <comment type="block">/* Make sure the next pointer will be aligned. */</comment>
  <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>ALIGN</name><argument_list>(<argument><expr><name><name>mem</name><operator>-&gt;</operator><name>ptr</name></name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Allocate from current block. */</comment>
  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>mem</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mem</name><operator>-&gt;</operator><name>ptr</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mem</name><operator>-&gt;</operator><name>n</name></name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>

  <comment type="block">/* Set to zero if needed. */</comment>
  <if_stmt><if>if <condition>(<expr><name>zero</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* EOF */</comment>
</unit>
