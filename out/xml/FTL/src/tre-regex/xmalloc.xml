<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/tre-regex/xmalloc.c"><comment type="block">/*
  xmalloc.c - Simple malloc debugging library implementation

  This software is released under a BSD-style license.
  See the file LICENSE for details and copyright.

*/</comment>

<comment type="block">/*
  TODO:
   - red zones
   - group dumps by source location
*/</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_CONFIG_H */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XMALLOC_INTERNAL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xmalloc.h"</cpp:file></cpp:include>

<escape char="0x0c"/>
<comment type="block">/*
  Internal stuff.
*/</comment>

<typedef>typedef <type><struct>struct <name>hashTableItemRec</name> <block>{
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bytes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>line</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>hashTableItemRec</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>hashTableItem</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>hashTableItem</name> <modifier>*</modifier><modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>
}</block></struct></type> <name>hashTable</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>xmalloc_peak</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xmalloc_current</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>xmalloc_peak_blocks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xmalloc_current_blocks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>xmalloc_fail_after</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TABLE_BITS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TABLE_MASK</name></cpp:macro> <cpp:value>((1 &lt;&lt; TABLE_BITS) - 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TABLE_SIZE</name></cpp:macro> <cpp:value>(1 &lt;&lt; TABLE_BITS)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>hashTable</name> <modifier>*</modifier></type>
<name>hash_table_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>hashTable</name> <modifier>*</modifier></type><name>tbl</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>tbl</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tbl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>tbl</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>tbl</name><operator>-&gt;</operator><name>table</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>TABLE_SIZE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>tbl</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>tbl</name><operator>-&gt;</operator><name>table</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

  <return>return <expr><name>tbl</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>hash_void_ptr</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>hash</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <comment type="block">/* I took this hash function just off the top of my head, I have
     no idea whether it is bad or very bad. */</comment>
  <expr_stmt><expr><name>hash</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">8</literal> <operator>/</operator> <name>TABLE_BITS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name>hash</name> <operator>^=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>ptr</name> <operator>&gt;&gt;</operator> <name>i</name><operator>*</operator><literal type="number">8</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>hash</name> <operator>+=</operator> <name>i</name> <operator>*</operator> <literal type="number">17</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>hash</name> <operator>&amp;=</operator> <name>TABLE_MASK</name></expr>;</expr_stmt>
    </block_content>}</block></for>
  <return>return <expr><name>hash</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>hash_table_add</name><parameter_list>(<parameter><decl><type><name>hashTable</name> <modifier>*</modifier></type><name>tbl</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bytes</name></decl></parameter>,
	       <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>hashTableItem</name> <modifier>*</modifier></type><name>item</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>hash_void_ptr</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>tbl</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <while>while <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>new</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>new</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>tbl</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <expr_stmt><expr><name>xmalloc_current</name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>xmalloc_current</name> <operator>&gt;</operator> <name>xmalloc_peak</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>xmalloc_peak</name> <operator>=</operator> <name>xmalloc_current</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>xmalloc_current_blocks</name><operator>++</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>xmalloc_current_blocks</name> <operator>&gt;</operator> <name>xmalloc_peak_blocks</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>xmalloc_peak_blocks</name> <operator>=</operator> <name>xmalloc_current_blocks</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>hash_table_del</name><parameter_list>(<parameter><decl><type><name>hashTable</name> <modifier>*</modifier></type><name>tbl</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>hashTableItem</name> <modifier>*</modifier></type><name>item</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>hash_void_ptr</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>tbl</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"xfree: invalid ptr %p\n"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>ptr</name></name> <operator>!=</operator> <name>ptr</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>ptr</name></name> <operator>!=</operator> <name>ptr</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"xfree: invalid ptr %p\n"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>xmalloc_current</name> <operator>-=</operator> <name><name>item</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>xmalloc_current_blocks</name><operator>--</operator></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>prev</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
  <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>tbl</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>hashTable</name> <modifier>*</modifier></type><name>xmalloc_table</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xmalloc_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>xmalloc_table</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>xmalloc_table</name> <operator>=</operator> <call><name>hash_table_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>xmalloc_peak</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>xmalloc_peak_blocks</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>xmalloc_current</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>xmalloc_current_blocks</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>xmalloc_fail_after</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>xmalloc_table</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>xmalloc_table</name><operator>-&gt;</operator><name>table</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<escape char="0x0c"/>
<comment type="block">/*
  Public API.
*/</comment>

<function><type><name>void</name></type>
<name>xmalloc_configure</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fail_after</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>xmalloc_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>xmalloc_fail_after</name> <operator>=</operator> <name>fail_after</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>xmalloc_dump_leaks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>num_leaks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>leaked_bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>hashTableItem</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>xmalloc_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TABLE_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>xmalloc_table</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      <while>while <condition>(<expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s:%d: %s: %d bytes at %p not freed\n"</literal></expr></argument>,
		 <argument><expr><name><name>item</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>func</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>num_leaks</name><operator>++</operator></expr>;</expr_stmt>
	  <expr_stmt><expr><name>leaked_bytes</name> <operator>+=</operator> <name><name>item</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>
    </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><name>num_leaks</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No memory leaks.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d unfreed memory chuncks, total %d unfreed bytes.\n"</literal></expr></argument>,
	   <argument><expr><name>num_leaks</name></expr></argument>, <argument><expr><name>leaked_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Peak memory consumption %d bytes (%.1f kB, %.1f MB) in %d blocks "</literal></expr></argument>,
	 <argument><expr><name>xmalloc_peak</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>xmalloc_peak</name> <operator>/</operator> <literal type="number">1024</literal></expr></argument>,
	 <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>xmalloc_peak</name> <operator>/</operator> <operator>(</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr></argument>, <argument><expr><name>xmalloc_peak_blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(average "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>xmalloc_peak_blocks</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>xmalloc_peak</name> <operator>+</operator> <name>xmalloc_peak_blocks</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator>
		  <operator>/</operator> <name>xmalloc_peak_blocks</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"N/A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" bytes per block).\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>num_leaks</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>xmalloc_impl</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>xmalloc_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>xmalloc_fail_after</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>xmalloc_fail_after</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
      printf("xmalloc: forced failure %s:%d: %s\n", file, line, func);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name>xmalloc_fail_after</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"xmalloc: called after failure from %s:%d: %s\n"</literal></expr></argument>,
	     <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name>xmalloc_fail_after</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>xmalloc_fail_after</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>hash_table_add</name><argument_list>(<argument><expr><name>xmalloc_table</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>size</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>xcalloc_impl</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
	     <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>xmalloc_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>xmalloc_fail_after</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>xmalloc_fail_after</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
      printf("xcalloc: forced failure %s:%d: %s\n", file, line, func);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name>xmalloc_fail_after</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"xcalloc: called after failure from %s:%d: %s\n"</literal></expr></argument>,
	     <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name>xmalloc_fail_after</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>xmalloc_fail_after</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>nmemb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>hash_table_add</name><argument_list>(<argument><expr><name>xmalloc_table</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>nmemb</name> <operator>*</operator> <name>size</name><operator>)</operator></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>xfree_impl</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/*LINTED*/</comment><expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><operator>&amp;</operator><name>file</name></expr>;</expr_stmt>
  <comment type="block">/*LINTED*/</comment><expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><operator>&amp;</operator><name>line</name></expr>;</expr_stmt>
  <comment type="block">/*LINTED*/</comment><expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><operator>&amp;</operator><name>func</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>xmalloc_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>hash_table_del</name><argument_list>(<argument><expr><name>xmalloc_table</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>xrealloc_impl</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>new_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
	      <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>new_ptr</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>xmalloc_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>new_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>xmalloc_fail_after</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>xmalloc_fail_after</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name>xmalloc_fail_after</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"xrealloc: called after failure from %s:%d: %s\n"</literal></expr></argument>,
	     <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name>xmalloc_fail_after</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>xmalloc_fail_after</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>new_ptr</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>new_ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>hash_table_del</name><argument_list>(<argument><expr><name>xmalloc_table</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>hash_table_add</name><argument_list>(<argument><expr><name>xmalloc_table</name></expr></argument>, <argument><expr><name>new_ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>new_size</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  <return>return <expr><name>new_ptr</name></expr>;</return>
</block_content>}</block></function>



<comment type="block">/* EOF */</comment>
</unit>
