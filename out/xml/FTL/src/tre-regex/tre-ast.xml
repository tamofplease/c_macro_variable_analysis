<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/tre-regex/tre-ast.c"><comment type="block">/*
  tre-ast.c - Abstract syntax tree (AST) routines

  This software is released under a BSD-style license.
  See the file LICENSE for details and copyright.

*/</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_CONFIG_H */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tre-ast.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tre-mem.h"</cpp:file></cpp:include>

<function><type><name>tre_ast_node_t</name> <modifier>*</modifier></type>
<name>tre_ast_new_node</name><parameter_list>(<parameter><decl><type><name>tre_mem_t</name></type> <name>mem</name></decl></parameter>, <parameter><decl><type><name>tre_ast_type_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>tre_ast_node_t</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>tre_mem_calloc</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>obj</name></name> <operator>=</operator> <call><name>tre_mem_calloc</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>obj</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>nullable</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>submatch_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

  <return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>tre_ast_node_t</name> <modifier>*</modifier></type>
<name>tre_ast_new_literal</name><parameter_list>(<parameter><decl><type><name>tre_mem_t</name></type> <name>mem</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code_min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code_max</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>tre_ast_node_t</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tre_literal_t</name> <modifier>*</modifier></type><name>lit</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>tre_ast_new_node</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>LITERAL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tre_literal_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>lit</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>obj</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lit</name><operator>-&gt;</operator><name>code_min</name></name> <operator>=</operator> <name>code_min</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lit</name><operator>-&gt;</operator><name>code_max</name></name> <operator>=</operator> <name>code_max</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lit</name><operator>-&gt;</operator><name>position</name></name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>

  <return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>tre_ast_node_t</name> <modifier>*</modifier></type>
<name>tre_ast_new_iter</name><parameter_list>(<parameter><decl><type><name>tre_mem_t</name></type> <name>mem</name></decl></parameter>, <parameter><decl><type><name>tre_ast_node_t</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>,
		 <parameter><decl><type><name>int</name></type> <name>minimal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>tre_ast_node_t</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tre_iteration_t</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>tre_ast_new_node</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>ITERATION</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tre_iteration_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>iter</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>obj</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>min</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>minimal</name></name> <operator>=</operator> <name>minimal</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>num_submatches</name></name> <operator>=</operator> <name><name>arg</name><operator>-&gt;</operator><name>num_submatches</name></name></expr>;</expr_stmt>

  <return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>tre_ast_node_t</name> <modifier>*</modifier></type>
<name>tre_ast_new_union</name><parameter_list>(<parameter><decl><type><name>tre_mem_t</name></type> <name>mem</name></decl></parameter>, <parameter><decl><type><name>tre_ast_node_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>tre_ast_node_t</name> <modifier>*</modifier></type><name>right</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>tre_ast_node_t</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>tre_ast_new_node</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>UNION</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tre_union_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>tre_union_t</name> <operator>*</operator><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>obj</name></name><operator>)</operator><operator>-&gt;</operator><name>left</name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>tre_union_t</name> <operator>*</operator><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>obj</name></name><operator>)</operator><operator>-&gt;</operator><name>right</name> <operator>=</operator> <name>right</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>num_submatches</name></name> <operator>=</operator> <name><name>left</name><operator>-&gt;</operator><name>num_submatches</name></name> <operator>+</operator> <name><name>right</name><operator>-&gt;</operator><name>num_submatches</name></name></expr>;</expr_stmt>

  <return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>tre_ast_node_t</name> <modifier>*</modifier></type>
<name>tre_ast_new_catenation</name><parameter_list>(<parameter><decl><type><name>tre_mem_t</name></type> <name>mem</name></decl></parameter>, <parameter><decl><type><name>tre_ast_node_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>,
		       <parameter><decl><type><name>tre_ast_node_t</name> <modifier>*</modifier></type><name>right</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>tre_ast_node_t</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>tre_ast_new_node</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>CATENATION</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tre_catenation_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>tre_catenation_t</name> <operator>*</operator><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>obj</name></name><operator>)</operator><operator>-&gt;</operator><name>left</name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>tre_catenation_t</name> <operator>*</operator><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>obj</name></name><operator>)</operator><operator>-&gt;</operator><name>right</name> <operator>=</operator> <name>right</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>num_submatches</name></name> <operator>=</operator> <name><name>left</name><operator>-&gt;</operator><name>num_submatches</name></name> <operator>+</operator> <name><name>right</name><operator>-&gt;</operator><name>num_submatches</name></name></expr>;</expr_stmt>

  <return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TRE_DEBUG</name></cpp:ifdef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>tre_findent</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <while>while <condition>(<expr><name>i</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>tre_print_params</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>params</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"params ["</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TRE_PARAM_LAST</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>TRE_PARAM_UNSET</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"unset"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	  <if type="elseif">else if <condition>(<expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>TRE_PARAM_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"default"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%d"</literal><operator>,</operator> <name><name>params</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	  <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>TRE_PARAM_LAST</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">", "</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
      <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"]"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>tre_do_print</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>tre_ast_node_t</name> <modifier>*</modifier></type><name>ast</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>code_min</name></decl>, <decl><type ref="prev"/><name>code_max</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>num_tags</name> <init>= <expr><name><name>ast</name><operator>-&gt;</operator><name>num_tags</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tre_literal_t</name> <modifier>*</modifier></type><name>lit</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tre_iteration_t</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tre_findent</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name><name>ast</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>LITERAL</name></expr>:</case>
      <expr_stmt><expr><name>lit</name> <operator>=</operator> <name><name>ast</name><operator>-&gt;</operator><name>obj</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>code_min</name> <operator>=</operator> <name><name>lit</name><operator>-&gt;</operator><name>code_min</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>code_max</name> <operator>=</operator> <name><name>lit</name><operator>-&gt;</operator><name>code_max</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>lit</name><operator>-&gt;</operator><name>position</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>IS_EMPTY</name><argument_list>(<argument><expr><name>lit</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"literal empty\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><call><name>IS_ASSERTION</name><argument_list>(<argument><expr><name>lit</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>assertions</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"bol"</literal></expr>, <expr><literal type="string">"eol"</literal></expr>, <expr><literal type="string">"ctype"</literal></expr>, <expr><literal type="string">"!ctype"</literal></expr>,
				 <expr><literal type="string">"bow"</literal></expr>, <expr><literal type="string">"eow"</literal></expr>, <expr><literal type="string">"wb"</literal></expr>, <expr><literal type="string">"!wb"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	  <if_stmt><if>if <condition>(<expr><name>code_max</name> <operator>&gt;=</operator> <name>ASSERT_LAST</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"assertions: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator> <operator>&lt;=</operator> <name>ASSERT_LAST</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><name>code_max</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><name><name>assertions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
	  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><call><name>IS_TAG</name><argument_list>(<argument><expr><name>lit</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"tag %d\n"</literal></expr></argument>, <argument><expr><name>code_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><call><name>IS_BACKREF</name><argument_list>(<argument><expr><name>lit</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"backref %d, pos %d\n"</literal></expr></argument>, <argument><expr><name>code_max</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><call><name>IS_PARAMETER</name><argument_list>(<argument><expr><name>lit</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>tre_print_params</name><argument_list>(<argument><expr><name><name>lit</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"literal (%c, %c) (%d, %d), pos %d, sub %d, "</literal>
		  <literal type="string">"%d tags\n"</literal></expr></argument>, <argument><expr><name>code_min</name></expr></argument>, <argument><expr><name>code_max</name></expr></argument>, <argument><expr><name>code_min</name></expr></argument>, <argument><expr><name>code_max</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>,
		  <argument><expr><name><name>ast</name><operator>-&gt;</operator><name>submatch_id</name></name></expr></argument>, <argument><expr><name>num_tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
      <break>break;</break>
    <case>case <expr><name>ITERATION</name></expr>:</case>
      <expr_stmt><expr><name>iter</name> <operator>=</operator> <name><name>ast</name><operator>-&gt;</operator><name>obj</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"iteration {%d, %d}, sub %d, %d tags, %s\n"</literal></expr></argument>,
	      <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>min</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>max</name></name></expr></argument>, <argument><expr><name><name>ast</name><operator>-&gt;</operator><name>submatch_id</name></name></expr></argument>, <argument><expr><name>num_tags</name></expr></argument>,
	      <argument><expr><ternary><condition><expr><name><name>iter</name><operator>-&gt;</operator><name>minimal</name></name></expr> ?</condition><then> <expr><literal type="string">"minimal"</literal></expr> </then><else>: <expr><literal type="string">"greedy"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tre_do_print</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>indent</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>UNION</name></expr>:</case>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"union, sub %d, %d tags\n"</literal></expr></argument>, <argument><expr><name><name>ast</name><operator>-&gt;</operator><name>submatch_id</name></name></expr></argument>, <argument><expr><name>num_tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tre_do_print</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>tre_union_t</name> <operator>*</operator><operator>)</operator><name><name>ast</name><operator>-&gt;</operator><name>obj</name></name><operator>)</operator><operator>-&gt;</operator><name>left</name></expr></argument>, <argument><expr><name>indent</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tre_do_print</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>tre_union_t</name> <operator>*</operator><operator>)</operator><name><name>ast</name><operator>-&gt;</operator><name>obj</name></name><operator>)</operator><operator>-&gt;</operator><name>right</name></expr></argument>, <argument><expr><name>indent</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>CATENATION</name></expr>:</case>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"catenation, sub %d, %d tags\n"</literal></expr></argument>, <argument><expr><name><name>ast</name><operator>-&gt;</operator><name>submatch_id</name></name></expr></argument>,
	      <argument><expr><name>num_tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tre_do_print</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>tre_catenation_t</name> <operator>*</operator><operator>)</operator><name><name>ast</name><operator>-&gt;</operator><name>obj</name></name><operator>)</operator><operator>-&gt;</operator><name>left</name></expr></argument>, <argument><expr><name>indent</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tre_do_print</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>tre_catenation_t</name> <operator>*</operator><operator>)</operator><name><name>ast</name><operator>-&gt;</operator><name>obj</name></name><operator>)</operator><operator>-&gt;</operator><name>right</name></expr></argument>, <argument><expr><name>indent</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>tre_ast_fprint</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>tre_ast_node_t</name> <modifier>*</modifier></type><name>ast</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>tre_do_print</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>tre_ast_print</name><parameter_list>(<parameter><decl><type><name>tre_ast_node_t</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"AST:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tre_ast_fprint</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TRE_DEBUG */</comment>

<comment type="block">/* EOF */</comment>
</unit>
