<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/tre-regex/regexec.c"><comment type="block">/*
  tre_regexec.c - TRE POSIX compatible matching functions (and more).

  This software is released under a BSD-style license.
  See the file LICENSE for details and copyright.

*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tre-config.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_CONFIG_H */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TRE_USE_ALLOCA</name></cpp:ifdef>
<comment type="block">/* AIX requires this to be the first thing in the file.	 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__GNUC__</name></cpp:ifndef>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><name>HAVE_ALLOCA_H</name></expr></cpp:if>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>&lt;alloca.h&gt;</cpp:file></cpp:include>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifdef>#  <cpp:directive>ifdef</cpp:directive> <name>_AIX</name></cpp:ifdef>
 <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>alloca</name></cpp:pragma>
<cpp:else>#  <cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifndef>#   <cpp:directive>ifndef</cpp:directive> <name>alloca</name></cpp:ifndef> <comment type="block">/* predefined by HP cc +Olibcalls */</comment>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>alloca</name> <parameter_list>()</parameter_list>;</function_decl>
<cpp:endif>#   <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TRE_USE_ALLOCA */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_WCHAR_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wchar.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_WCHAR_H */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_WCTYPE_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wctype.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_WCTYPE_H */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>TRE_WCHAR</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !TRE_WCHAR */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_MALLOC_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;malloc.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_MALLOC_H */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tre-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tre.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xmalloc.h"</cpp:file></cpp:include>


<comment type="block">/* Fills the POSIX.2 regmatch_t array according to the TNFA tag and match
   endpoint values. */</comment>
<function><type><name>void</name></type>
<name>tre_fill_pmatch</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>nmatch</name></decl></parameter>, <parameter><decl><type><name>regmatch_t</name></type> <name><name>pmatch</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cflags</name></decl></parameter>,
		<parameter><decl><type><specifier>const</specifier> <name>tre_tnfa_t</name> <modifier>*</modifier></type><name>tnfa</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>tags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>match_eo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>tre_submatch_data_t</name> <modifier>*</modifier></type><name>submatch_data</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>parents</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>match_eo</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>cflags</name> <operator>&amp;</operator> <name>REG_NOSUB</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Construct submatch offsets from the tags. */</comment>
      <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"end tag = t%d = %d\n"</literal><operator>,</operator> <name><name>tnfa</name><operator>-&gt;</operator><name>end_tag</name></name><operator>,</operator> <name>match_eo</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>submatch_data</name> <operator>=</operator> <name><name>tnfa</name><operator>-&gt;</operator><name>submatch_data</name></name></expr>;</expr_stmt>
      <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>tnfa</name><operator>-&gt;</operator><name>num_submatches</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>nmatch</name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name><name>submatch_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>so_tag</name> <operator>==</operator> <name><name>tnfa</name><operator>-&gt;</operator><name>end_tag</name></name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_so</name> <operator>=</operator> <name>match_eo</name></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_so</name> <operator>=</operator> <name><name>tags</name><index>[<expr><name><name>submatch_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>so_tag</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	  <if_stmt><if>if <condition>(<expr><name><name>submatch_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eo_tag</name> <operator>==</operator> <name><name>tnfa</name><operator>-&gt;</operator><name>end_tag</name></name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_eo</name> <operator>=</operator> <name>match_eo</name></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_eo</name> <operator>=</operator> <name><name>tags</name><index>[<expr><name><name>submatch_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eo_tag</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	  <comment type="block">/* If either of the endpoints were not used, this submatch
	     was not part of the match. */</comment>
	  <if_stmt><if>if <condition>(<expr><name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_so</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_eo</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_so</name> <operator>=</operator> <name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_eo</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	  <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"pmatch[%d] = {t%d = %d, t%d = %d}\n"</literal><operator>,</operator> <name>i</name><operator>,</operator>
		  <name><name>submatch_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>so_tag</name><operator>,</operator> <name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_so</name><operator>,</operator>
		  <name><name>submatch_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eo_tag</name><operator>,</operator> <name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_eo</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
      <comment type="block">/* Reset all submatches that are not within all of their parent
	 submatches. */</comment>
      <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>tnfa</name><operator>-&gt;</operator><name>num_submatches</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>nmatch</name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_eo</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_so</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_so</name> <operator>&lt;=</operator> <name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_eo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <expr_stmt><expr><name>parents</name> <operator>=</operator> <name><name>submatch_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>parents</name></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name>parents</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
	    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>parents</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
	      <block>{<block_content>
		<expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"pmatch[%d] parent %d\n"</literal><operator>,</operator> <name>i</name><operator>,</operator> <name><name>parents</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_so</name> <operator>&lt;</operator> <name><name>pmatch</name><index>[<expr><name><name>parents</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>rm_so</name>
		    <operator>||</operator> <name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_eo</name> <operator>&gt;</operator> <name><name>pmatch</name><index>[<expr><name><name>parents</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>rm_eo</name></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_so</name> <operator>=</operator> <name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_eo</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      </block_content>}</block></for></block_content></block></if></if_stmt>
	  <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
    </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>nmatch</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_so</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_eo</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>


<comment type="block">/*
  Wrapper functions for POSIX compatible regexp matching.
*/</comment>

<function><type><name>int</name></type>
<name>tre_have_backrefs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>regex_t</name> <modifier>*</modifier></type><name>preg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>tre_tnfa_t</name> <modifier>*</modifier></type><name>tnfa</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>preg</name><operator>-&gt;</operator><name>TRE_REGEX_T_FIELD</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><name><name>tnfa</name><operator>-&gt;</operator><name>have_backrefs</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>tre_have_approx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>regex_t</name> <modifier>*</modifier></type><name>preg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>tre_tnfa_t</name> <modifier>*</modifier></type><name>tnfa</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>preg</name><operator>-&gt;</operator><name>TRE_REGEX_T_FIELD</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><name><name>tnfa</name><operator>-&gt;</operator><name>have_approx</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>tre_match</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>tre_tnfa_t</name> <modifier>*</modifier></type><name>tnfa</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
	  <parameter><decl><type><name>tre_str_type_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nmatch</name></decl></parameter>, <parameter><decl><type><name>regmatch_t</name></type> <name><name>pmatch</name><index>[]</index></name></decl></parameter>,
	  <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>reg_errcode_t</name></type> <name>status</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>tags</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>eo</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>tnfa</name><operator>-&gt;</operator><name>num_tags</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nmatch</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TRE_USE_ALLOCA</name></cpp:ifdef>
      <expr_stmt><expr><name>tags</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tags</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>tnfa</name><operator>-&gt;</operator><name>num_tags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !TRE_USE_ALLOCA */</comment>
      <expr_stmt><expr><name>tags</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tags</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>tnfa</name><operator>-&gt;</operator><name>num_tags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !TRE_USE_ALLOCA */</comment>
      <if_stmt><if>if <condition>(<expr><name>tags</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>REG_ESPACE</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

  <comment type="block">/* Dispatch to the appropriate matcher. */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>tnfa</name><operator>-&gt;</operator><name>have_backrefs</name></name> <operator>||</operator> <name>eflags</name> <operator>&amp;</operator> <name>REG_BACKTRACKING_MATCHER</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* The regex has back references, use the backtracking matcher. */</comment>
      <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>STR_USER</name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><specifier>const</specifier> <name>tre_str_source</name> <modifier>*</modifier></type><name>source</name> <init>= <expr><name>string</name></expr></init></decl>;</decl_stmt>
	  <if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>rewind</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>source</name><operator>-&gt;</operator><name>compare</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
	    <comment type="block">/* The backtracking matcher requires rewind and compare
	       capabilities from the input stream. */</comment>
	    <return>return <expr><name>REG_BADPAT</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>tre_tnfa_run_backtrack</name><argument_list>(<argument><expr><name>tnfa</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>type</name></expr></argument>,
				      <argument><expr><name>tags</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TRE_APPROX</name></cpp:ifdef>
  <if type="elseif">else if <condition>(<expr><name><name>tnfa</name><operator>-&gt;</operator><name>have_approx</name></name> <operator>||</operator> <name>eflags</name> <operator>&amp;</operator> <name>REG_APPROX_MATCHER</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* The regex uses approximate matching, use the approximate matcher. */</comment>
      <decl_stmt><decl><type><name>regamatch_t</name></type> <name>match</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>regaparams_t</name></type> <name>params</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tre_regaparams_default</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>params</name><operator>.</operator><name>max_err</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>params</name><operator>.</operator><name>max_cost</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>tre_tnfa_run_approx</name><argument_list>(<argument><expr><name>tnfa</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>tags</name></expr></argument>,
				   <argument><expr><operator>&amp;</operator><name>match</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TRE_APPROX */</comment>
  <else>else
    <block>{<block_content>
      <comment type="block">/* Exact matching, no back references, use the parallel matcher. */</comment>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>tre_tnfa_run_parallel</name><argument_list>(<argument><expr><name>tnfa</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>type</name></expr></argument>,
				     <argument><expr><name>tags</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>REG_OK</name></expr>)</condition><block type="pseudo"><block_content>
    <comment type="block">/* A match was found, so fill the submatch registers. */</comment>
    <expr_stmt><expr><call><name>tre_fill_pmatch</name><argument_list>(<argument><expr><name>nmatch</name></expr></argument>, <argument><expr><name>pmatch</name></expr></argument>, <argument><expr><name><name>tnfa</name><operator>-&gt;</operator><name>cflags</name></name></expr></argument>, <argument><expr><name>tnfa</name></expr></argument>, <argument><expr><name>tags</name></expr></argument>, <argument><expr><name>eo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>TRE_USE_ALLOCA</name></cpp:ifndef>
  <if_stmt><if>if <condition>(<expr><name>tags</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !TRE_USE_ALLOCA */</comment>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>tre_regnexec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>regex_t</name> <modifier>*</modifier></type><name>preg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
	 <parameter><decl><type><name>size_t</name></type> <name>nmatch</name></decl></parameter>, <parameter><decl><type><name>regmatch_t</name></type> <name><name>pmatch</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>tre_tnfa_t</name> <modifier>*</modifier></type><name>tnfa</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>preg</name><operator>-&gt;</operator><name>TRE_REGEX_T_FIELD</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tre_str_type_t</name></type> <name>type</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>TRE_MB_CUR_MAX</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>STR_BYTE</name></expr> </then><else>: <expr><name>STR_MBS</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name>tre_match</name><argument_list>(<argument><expr><name>tnfa</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nmatch</name></expr></argument>, <argument><expr><name>pmatch</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>tre_regexec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>regex_t</name> <modifier>*</modifier></type><name>preg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,
	<parameter><decl><type><name>size_t</name></type> <name>nmatch</name></decl></parameter>, <parameter><decl><type><name>regmatch_t</name></type> <name><name>pmatch</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>tre_regnexec</name><argument_list>(<argument><expr><name>preg</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>nmatch</name></expr></argument>, <argument><expr><name>pmatch</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>tre_regexecb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>regex_t</name> <modifier>*</modifier></type><name>preg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,
        <parameter><decl><type><name>size_t</name></type> <name>nmatch</name></decl></parameter>, <parameter><decl><type><name>regmatch_t</name></type> <name><name>pmatch</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>tre_tnfa_t</name> <modifier>*</modifier></type><name>tnfa</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>preg</name><operator>-&gt;</operator><name>TRE_REGEX_T_FIELD</name></name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name>tre_match</name><argument_list>(<argument><expr><name>tnfa</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>STR_BYTE</name></expr></argument>, <argument><expr><name>nmatch</name></expr></argument>, <argument><expr><name>pmatch</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>tre_regnexecb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>regex_t</name> <modifier>*</modifier></type><name>preg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
        <parameter><decl><type><name>size_t</name></type> <name>nmatch</name></decl></parameter>, <parameter><decl><type><name>regmatch_t</name></type> <name><name>pmatch</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>tre_tnfa_t</name> <modifier>*</modifier></type><name>tnfa</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>preg</name><operator>-&gt;</operator><name>TRE_REGEX_T_FIELD</name></name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name>tre_match</name><argument_list>(<argument><expr><name>tnfa</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>STR_BYTE</name></expr></argument>, <argument><expr><name>nmatch</name></expr></argument>, <argument><expr><name>pmatch</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TRE_WCHAR</name></cpp:ifdef>

<function><type><name>int</name></type>
<name>tre_regwnexec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>regex_t</name> <modifier>*</modifier></type><name>preg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
	  <parameter><decl><type><name>size_t</name></type> <name>nmatch</name></decl></parameter>, <parameter><decl><type><name>regmatch_t</name></type> <name><name>pmatch</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>tre_tnfa_t</name> <modifier>*</modifier></type><name>tnfa</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>preg</name><operator>-&gt;</operator><name>TRE_REGEX_T_FIELD</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>tre_match</name><argument_list>(<argument><expr><name>tnfa</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>STR_WIDE</name></expr></argument>, <argument><expr><name>nmatch</name></expr></argument>, <argument><expr><name>pmatch</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>tre_regwexec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>regex_t</name> <modifier>*</modifier></type><name>preg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,
	 <parameter><decl><type><name>size_t</name></type> <name>nmatch</name></decl></parameter>, <parameter><decl><type><name>regmatch_t</name></type> <name><name>pmatch</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>tre_regwnexec</name><argument_list>(<argument><expr><name>preg</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>nmatch</name></expr></argument>, <argument><expr><name>pmatch</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TRE_WCHAR */</comment>

<function><type><name>int</name></type>
<name>tre_reguexec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>regex_t</name> <modifier>*</modifier></type><name>preg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>tre_str_source</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,
	 <parameter><decl><type><name>size_t</name></type> <name>nmatch</name></decl></parameter>, <parameter><decl><type><name>regmatch_t</name></type> <name><name>pmatch</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>tre_tnfa_t</name> <modifier>*</modifier></type><name>tnfa</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>preg</name><operator>-&gt;</operator><name>TRE_REGEX_T_FIELD</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>tre_match</name><argument_list>(<argument><expr><name>tnfa</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>STR_USER</name></expr></argument>, <argument><expr><name>nmatch</name></expr></argument>, <argument><expr><name>pmatch</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TRE_APPROX</name></cpp:ifdef>

<comment type="block">/*
  Wrapper functions for approximate regexp matching.
*/</comment>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>tre_match_approx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>tre_tnfa_t</name> <modifier>*</modifier></type><name>tnfa</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
		 <parameter><decl><type><name>tre_str_type_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>regamatch_t</name> <modifier>*</modifier></type><name>match</name></decl></parameter>, <parameter><decl><type><name>regaparams_t</name></type> <name>params</name></decl></parameter>,
		 <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>reg_errcode_t</name></type> <name>status</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>tags</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>eo</name></decl>;</decl_stmt>

  <comment type="block">/* If the regexp does not use approximate matching features, the
     maximum cost is zero, and the approximate matcher isn't forced,
     use the exact matcher instead. */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>params</name><operator>.</operator><name>max_cost</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>tnfa</name><operator>-&gt;</operator><name>have_approx</name></name>
      <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>eflags</name> <operator>&amp;</operator> <name>REG_APPROX_MATCHER</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>tre_match</name><argument_list>(<argument><expr><name>tnfa</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>match</name><operator>-&gt;</operator><name>nmatch</name></name></expr></argument>, <argument><expr><name><name>match</name><operator>-&gt;</operator><name>pmatch</name></name></expr></argument>,
		     <argument><expr><name>eflags</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

  <comment type="block">/* Back references are not supported by the approximate matcher. */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>tnfa</name><operator>-&gt;</operator><name>have_backrefs</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>REG_BADPAT</name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>tnfa</name><operator>-&gt;</operator><name>num_tags</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>match</name><operator>-&gt;</operator><name>nmatch</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TRE_USE_ALLOCA</name></expr></cpp:if>
      <expr_stmt><expr><name>tags</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tags</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>tnfa</name><operator>-&gt;</operator><name>num_tags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !TRE_USE_ALLOCA */</comment>
      <expr_stmt><expr><name>tags</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tags</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>tnfa</name><operator>-&gt;</operator><name>num_tags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !TRE_USE_ALLOCA */</comment>
      <if_stmt><if>if <condition>(<expr><name>tags</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>REG_ESPACE</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>tre_tnfa_run_approx</name><argument_list>(<argument><expr><name>tnfa</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>tags</name></expr></argument>,
			       <argument><expr><name>match</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>REG_OK</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>tre_fill_pmatch</name><argument_list>(<argument><expr><name><name>match</name><operator>-&gt;</operator><name>nmatch</name></name></expr></argument>, <argument><expr><name><name>match</name><operator>-&gt;</operator><name>pmatch</name></name></expr></argument>, <argument><expr><name><name>tnfa</name><operator>-&gt;</operator><name>cflags</name></name></expr></argument>, <argument><expr><name>tnfa</name></expr></argument>, <argument><expr><name>tags</name></expr></argument>, <argument><expr><name>eo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>TRE_USE_ALLOCA</name></cpp:ifndef>
  <if_stmt><if>if <condition>(<expr><name>tags</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !TRE_USE_ALLOCA */</comment>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>tre_reganexec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>regex_t</name> <modifier>*</modifier></type><name>preg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
	  <parameter><decl><type><name>regamatch_t</name> <modifier>*</modifier></type><name>match</name></decl></parameter>, <parameter><decl><type><name>regaparams_t</name></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>tre_tnfa_t</name> <modifier>*</modifier></type><name>tnfa</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>preg</name><operator>-&gt;</operator><name>TRE_REGEX_T_FIELD</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tre_str_type_t</name></type> <name>type</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>TRE_MB_CUR_MAX</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>STR_BYTE</name></expr> </then><else>: <expr><name>STR_MBS</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name>tre_match_approx</name><argument_list>(<argument><expr><name>tnfa</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>match</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>tre_regaexec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>regex_t</name> <modifier>*</modifier></type><name>preg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,
	 <parameter><decl><type><name>regamatch_t</name> <modifier>*</modifier></type><name>match</name></decl></parameter>, <parameter><decl><type><name>regaparams_t</name></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>tre_reganexec</name><argument_list>(<argument><expr><name>preg</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>match</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>tre_regaexecb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>regex_t</name> <modifier>*</modifier></type><name>preg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,
          <parameter><decl><type><name>regamatch_t</name> <modifier>*</modifier></type><name>match</name></decl></parameter>, <parameter><decl><type><name>regaparams_t</name></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>tre_tnfa_t</name> <modifier>*</modifier></type><name>tnfa</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>preg</name><operator>-&gt;</operator><name>TRE_REGEX_T_FIELD</name></name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name>tre_match_approx</name><argument_list>(<argument><expr><name>tnfa</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>STR_BYTE</name></expr></argument>,
                          <argument><expr><name>match</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TRE_WCHAR</name></cpp:ifdef>

<function><type><name>int</name></type>
<name>tre_regawnexec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>regex_t</name> <modifier>*</modifier></type><name>preg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
	   <parameter><decl><type><name>regamatch_t</name> <modifier>*</modifier></type><name>match</name></decl></parameter>, <parameter><decl><type><name>regaparams_t</name></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>tre_tnfa_t</name> <modifier>*</modifier></type><name>tnfa</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>preg</name><operator>-&gt;</operator><name>TRE_REGEX_T_FIELD</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>tre_match_approx</name><argument_list>(<argument><expr><name>tnfa</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>STR_WIDE</name></expr></argument>,
			  <argument><expr><name>match</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>tre_regawexec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>regex_t</name> <modifier>*</modifier></type><name>preg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,
	  <parameter><decl><type><name>regamatch_t</name> <modifier>*</modifier></type><name>match</name></decl></parameter>, <parameter><decl><type><name>regaparams_t</name></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>tre_regawnexec</name><argument_list>(<argument><expr><name>preg</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>match</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TRE_WCHAR */</comment>

<function><type><name>void</name></type>
<name>tre_regaparams_default</name><parameter_list>(<parameter><decl><type><name>regaparams_t</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>params</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>cost_ins</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>cost_del</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>cost_subst</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>max_cost</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>max_ins</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>max_del</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>max_subst</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>max_err</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TRE_APPROX */</comment>

<comment type="block">/* EOF */</comment>
</unit>
