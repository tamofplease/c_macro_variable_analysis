<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/tre-regex/tre-filter.c"><comment type="block">/*
  tre-filter.c: Histogram filter to quickly find regexp match candidates

  This software is released under a BSD-style license.
  See the file LICENSE for details and copyright.

*/</comment>

<comment type="block">/* The idea of this filter is quite simple.  First, let's assume the
   search pattern is a simple string.  In order for a substring of a
   longer string to match the search pattern, it must have the same
   numbers of different characters as the pattern, and those
   characters must occur in the same order as they occur in pattern. */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_CONFIG_H */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tre-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tre-filter.h"</cpp:file></cpp:include>

<function><type><name>int</name></type>
<name>tre_filter_find</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>tre_filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name><name>counts</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>window_len</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>window_len</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tre_filter_profile_t</name> <modifier>*</modifier></type><name>profile</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>profile</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>str_orig</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"tre_filter_find: %.*s\n"</literal><operator>,</operator> <name>len</name><operator>,</operator> <name>str</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>elementsof</name><argument_list>(<argument><expr><name>counts</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>counts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

  <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <while>while <condition>(<expr><operator>*</operator><name>str</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>window_len</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>len</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>counts</name><index>[<expr><operator>*</operator><name>str</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

  <while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>tre_filter_profile_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>counts</name><index>[<expr><operator>*</operator><name>str</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>counts</name><index>[<expr><operator>*</operator><operator>(</operator><name>str</name> <operator>-</operator> <name>window_len</name><operator>)</operator></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>

      <expr_stmt><expr><name>p</name> <operator>=</operator> <name>profile</name></expr>;</expr_stmt>
      <while>while <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>ch</name></name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name><name>counts</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>ch</name></name></expr>]</index></name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition><block type="pseudo"><block_content>
	    <break>break;</break></block_content></block></if></if_stmt>
	  <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>ch</name></name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Found possible match at %d\n"</literal><operator>,</operator>
		  <name>str</name> <operator>-</operator> <name>str_orig</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <return>return <expr><name>str</name> <operator>-</operator> <name>str_orig</name></expr>;</return>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"No match so far...\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
  <expr_stmt><expr><call><name>DPRINT</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"This string cannot match.\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
