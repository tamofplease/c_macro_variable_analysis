<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/api/api.c"><comment type="block">/* Pi-hole: A black hole for Internet advertisements
*  (c) 2017 Pi-hole, LLC (https://pi-hole.net)
*  Network-wide ad blocking via your own hardware.
*
*  FTL Engine
*  API Implementation
*
*  This file is copyright under the latest version of the EUPL.
*  Please see LICENSE file for your rights under this license. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../FTL.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"api.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../enums.h"</cpp:file></cpp:include>
<comment type="line">// getstr()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../shmem.h"</cpp:file></cpp:include>
<comment type="line">// read_setupVarsconf()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../setupVars.h"</cpp:file></cpp:include>
<comment type="line">// ssend()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"socket.h"</cpp:file></cpp:include>
<comment type="line">// get_FTL_db_filesize()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../files.h"</cpp:file></cpp:include>
<comment type="line">// logg()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"request.h"</cpp:file></cpp:include>
<comment type="line">// struct config</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../config.h"</cpp:file></cpp:include>
<comment type="line">// get_sqlite3_version()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../database/common.h"</cpp:file></cpp:include>
<comment type="line">// get_number_of_queries_in_DB()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../database/query-table.h"</cpp:file></cpp:include>
<comment type="line">// in_auditlist()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../database/gravity-db.h"</cpp:file></cpp:include>
<comment type="line">// struct overTime</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../overTime.h"</cpp:file></cpp:include>
<comment type="line">// Version information</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../version.h"</cpp:file></cpp:include>
<comment type="line">// enum REGEX</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../regex_r.h"</cpp:file></cpp:include>
<comment type="line">// get_aliasclient_list()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../database/aliasclients.h"</cpp:file></cpp:include>
<comment type="line">// get_edestr()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"api_helper.h"</cpp:file></cpp:include>
<comment type="line">// RTF_UP, RTF_GATEWAY</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/route.h&gt;</cpp:file></cpp:include>

<comment type="line">// defined in src/dnsmasq/cache.c</comment>
<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>querystr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ __typeof__ (a) _a = (a); __typeof__ (b) _b = (b); _a &lt; _b ? _a : _b; })</cpp:value></cpp:define>

<comment type="block">/* qsort comparison function (count field), sort ASC */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>cmpasc</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>a</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>b</name></expr></argument>)</argument_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>elem1</name> <init>= <expr><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name>a</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>elem2</name> <init>= <expr><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>elem1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>elem2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>elem1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>elem2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>

<comment type="line">// qsort subroutine, sort DESC</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>cmpdesc</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>a</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>b</name></expr></argument>)</argument_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>elem1</name> <init>= <expr><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name>a</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>elem2</name> <init>= <expr><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>elem1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>elem2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>elem1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>elem2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>getStats</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>istelnet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>blocked</name> <init>= <expr><call><name>blocked_queries</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>total</name> <init>= <expr><name><name>counters</name><operator>-&gt;</operator><name>queries</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float</name></type> <name>percentage</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">// Avoid 1/0 condition</comment>
	<if_stmt><if>if<condition>(<expr><name>total</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>percentage</name> <operator>=</operator> <literal type="number">1e2f</literal><operator>*</operator><name>blocked</name><operator>/</operator><name>total</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Send domains being blocked</comment>
	<if_stmt><if>if<condition>(<expr><name>istelnet</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ssend</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"domains_being_blocked %i\n"</literal></expr></argument>, <argument><expr><name><name>counters</name><operator>-&gt;</operator><name>gravity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pack_int32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>counters</name><operator>-&gt;</operator><name>gravity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="line">// unique_clients: count only clients that have been active within the most recent 24 hours</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>activeclients</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>clientID</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>clientID</name> <operator>&lt;</operator> <name><name>counters</name><operator>-&gt;</operator><name>clients</name></name></expr>;</condition> <incr><expr><name>clientID</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="line">// Get client pointer</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>clientsData</name><modifier>*</modifier></type> <name>client</name> <init>= <expr><call><name>getClient</name><argument_list>(<argument><expr><name>clientID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>client</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>activeclients</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if<condition>(<expr><name>istelnet</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ssend</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"dns_queries_today %i\nads_blocked_today %i\nads_percentage_today %f\n"</literal></expr></argument>,
		      <argument><expr><name>total</name></expr></argument>, <argument><expr><name>blocked</name></expr></argument>, <argument><expr><name>percentage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ssend</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"unique_domains %i\nqueries_forwarded %i\nqueries_cached %i\n"</literal></expr></argument>,
		      <argument><expr><name><name>counters</name><operator>-&gt;</operator><name>domains</name></name></expr></argument>, <argument><expr><call><name>forwarded_queries</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>cached_queries</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ssend</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"clients_ever_seen %i\n"</literal></expr></argument>, <argument><expr><name><name>counters</name><operator>-&gt;</operator><name>clients</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ssend</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"unique_clients %i\n"</literal></expr></argument>, <argument><expr><name>activeclients</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Sum up all query types (A, AAAA, ANY, SRV, SOA, ...)</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>sumalltypes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>queryType</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>queryType</name> <operator>&lt;</operator> <name>TYPE_MAX</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>queryType</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name>sumalltypes</name> <operator>+=</operator> <name><name>counters</name><operator>-&gt;</operator><name>querytype</name><index>[<expr><name>queryType</name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>ssend</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"dns_queries_all_types %i\n"</literal></expr></argument>, <argument><expr><name>sumalltypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Send individual reply type counters</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>sumallreplies</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name><name>enum</name> <name>reply_type</name></name></type> <name>reply</name> <init>= <expr><name>REPLY_UNKNOWN</name></expr></init></decl>;</init> <condition><expr><name>reply</name> <operator>&lt;</operator> <name>QUERY_REPLY_MAX</name></expr>;</condition> <incr><expr><name>reply</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ssend</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"reply_%s %i\n"</literal></expr></argument>, <argument><expr><call><name>get_query_reply_str</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>counters</name><operator>-&gt;</operator><name>reply</name><index>[<expr><name>reply</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>sumallreplies</name> <operator>+=</operator> <name><name>counters</name><operator>-&gt;</operator><name>reply</name><index>[<expr><name>reply</name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>ssend</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"dns_queries_all_replies %i\n"</literal></expr></argument>, <argument><expr><name>sumallreplies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ssend</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"privacy_level %i\n"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>privacylevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>pack_int32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pack_int32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>blocked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pack_float</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>percentage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pack_int32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>counters</name><operator>-&gt;</operator><name>domains</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pack_int32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><call><name>forwarded_queries</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pack_int32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><call><name>cached_queries</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pack_int32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>counters</name><operator>-&gt;</operator><name>clients</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pack_int32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>activeclients</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="line">// Send status</comment>
	<if_stmt><if>if<condition>(<expr><name>istelnet</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ssend</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"status %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>blockingstatus</name></expr> ?</condition><then> <expr><literal type="string">"enabled"</literal></expr> </then><else>: <expr><literal type="string">"disabled"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pack_uint8</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>blockingstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>getOverTime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>istelnet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>istelnet</name></expr>)</condition>
	<block>{<block_content>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>slot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>slot</name> <operator>&lt;</operator> <name>OVERTIME_SLOTS</name></expr>;</condition> <incr><expr><name>slot</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ssend</name><argument_list>(<argument><expr><name>sock</name></expr></argument>,<argument><expr><literal type="string">"%lli %i %i\n"</literal></expr></argument>,
			      <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name><name>overTime</name><index>[<expr><name>slot</name></expr>]</index></name><operator>.</operator><name>timestamp</name></expr></argument>,
			      <argument><expr><name><name>overTime</name><index>[<expr><name>slot</name></expr>]</index></name><operator>.</operator><name>total</name></expr></argument>,
			      <argument><expr><name><name>overTime</name><index>[<expr><name>slot</name></expr>]</index></name><operator>.</operator><name>blocked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="line">// We can use the map16 type because there should only be about 288 time slots (TIMEFRAME set to "yesterday")</comment>
		<comment type="line">// and map16 can hold up to (2^16)-1 = 65535 pairs</comment>

		<comment type="line">// Send domains over time</comment>
		<expr_stmt><expr><call><name>pack_map16_start</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <name>OVERTIME_SLOTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>slot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>slot</name> <operator>&lt;</operator> <name>OVERTIME_SLOTS</name></expr>;</condition> <incr><expr><name>slot</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>pack_int32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>overTime</name><index>[<expr><name>slot</name></expr>]</index></name><operator>.</operator><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pack_int32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>overTime</name><index>[<expr><name>slot</name></expr>]</index></name><operator>.</operator><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<comment type="line">// Send ads over time</comment>
		<expr_stmt><expr><call><name>pack_map16_start</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <name>OVERTIME_SLOTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>slot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>slot</name> <operator>&lt;</operator> <name>OVERTIME_SLOTS</name></expr>;</condition> <incr><expr><name>slot</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>pack_int32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>overTime</name><index>[<expr><name>slot</name></expr>]</index></name><operator>.</operator><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pack_int32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>overTime</name><index>[<expr><name>slot</name></expr>]</index></name><operator>.</operator><name>blocked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>getTopDomains</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>client_message</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>istelnet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name><name>temparray</name><index>[<expr><name><name>counters</name><operator>-&gt;</operator><name>domains</name></name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>count</name><init>=<expr><literal type="number">10</literal></expr></init></decl>, <decl><type ref="prev"/><name>num</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>audit</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>asc</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>blocked</name> <init>= <expr><call><name>command</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"&gt;top-ads"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Exit before processing any data if requested via config setting</comment>
	<expr_stmt><expr><call><name>get_privacy_level</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>privacylevel</name></name> <operator>&gt;=</operator> <name>PRIVACY_HIDE_DOMAINS</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// Always send the total number of domains, but pretend it's 0</comment>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name>istelnet</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pack_int32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Match both top-domains and top-ads</comment>
	<comment type="line">// example: &gt;top-domains (15)</comment>
	<if_stmt><if>if<condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"%*[^(](%i)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="line">// User wants a different number of requests</comment>
		<expr_stmt><expr><name>count</name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Apply Audit Log filtering?</comment>
	<comment type="line">// example: &gt;top-domains for audit</comment>
	<if_stmt><if>if<condition>(<expr><call><name>command</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">" for audit"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>audit</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Sort in ascending order?</comment>
	<comment type="line">// example: &gt;top-domains asc</comment>
	<if_stmt><if>if<condition>(<expr><call><name>command</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">" asc"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>asc</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>domainID</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>domainID</name> <operator>&lt;</operator> <name><name>counters</name><operator>-&gt;</operator><name>domains</name></name></expr>;</condition> <incr><expr><name>domainID</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="line">// Get domain pointer</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>domainsData</name><modifier>*</modifier></type> <name>domain</name> <init>= <expr><call><name>getDomain</name><argument_list>(<argument><expr><name>domainID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>domain</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>temparray</name><index>[<expr><name>domainID</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>domainID</name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>blocked</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>temparray</name><index>[<expr><name>domainID</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>domain</name><operator>-&gt;</operator><name>blockedcount</name></name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<comment type="line">// Count only permitted queries</comment>
			<expr_stmt><expr><name><name>temparray</name><index>[<expr><name>domainID</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>domain</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <name><name>domain</name><operator>-&gt;</operator><name>blockedcount</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></for>

	<comment type="line">// Sort temporary array</comment>
	<if_stmt><if>if<condition>(<expr><name>asc</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>temparray</name></expr></argument>, <argument><expr><name><name>counters</name><operator>-&gt;</operator><name>domains</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>int</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cmpasc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>temparray</name></expr></argument>, <argument><expr><name><name>counters</name><operator>-&gt;</operator><name>domains</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>int</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cmpdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


	<comment type="line">// Get filter</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filter</name> <init>= <expr><call><name>read_setupVarsconf</name><argument_list>(<argument><expr><literal type="string">"API_QUERY_LOG_SHOW"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>showpermitted</name> <init>= <expr><name>true</name></expr></init></decl>, <decl><type ref="prev"/><name>showblocked</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>filter</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"permittedonly"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>showblocked</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if<condition>(<expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"blockedonly"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>showpermitted</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if<condition>(<expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"nothing"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>showpermitted</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>showblocked</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>clearSetupVarsArray</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Get domains which the user doesn't want to see</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>excludedomains</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>audit</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>excludedomains</name> <operator>=</operator> <call><name>read_setupVarsconf</name><argument_list>(<argument><expr><literal type="string">"API_EXCLUDE_DOMAINS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>excludedomains</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>getSetupVarsArray</name><argument_list>(<argument><expr><name>excludedomains</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>istelnet</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Send the data required to get the percentage each domain has been blocked / queried</comment>
		<if_stmt><if>if<condition>(<expr><name>blocked</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pack_int32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><call><name>blocked_queries</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pack_int32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>counters</name><operator>-&gt;</operator><name>queries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>counters</name><operator>-&gt;</operator><name>domains</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="line">// Get sorted index</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>domainID</name> <init>= <expr><name><name>temparray</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<comment type="line">// Get domain pointer</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>domainsData</name><modifier>*</modifier></type> <name>domain</name> <init>= <expr><call><name>getDomain</name><argument_list>(<argument><expr><name>domainID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>domain</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// Skip this domain if there is a filter on it</comment>
		<if_stmt><if>if<condition>(<expr><name>excludedomains</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>insetupVarsArray</name><argument_list>(<argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>domain</name><operator>-&gt;</operator><name>domainpos</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// Skip this domain if already audited</comment>
		<if_stmt><if>if<condition>(<expr><name>audit</name> <operator>&amp;&amp;</operator> <call><name>in_auditlist</name><argument_list>(<argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>domain</name><operator>-&gt;</operator><name>domainpos</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>FOUND</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_API</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"API: %s has been audited."</literal></expr></argument>, <argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>domain</name><operator>-&gt;</operator><name>domainpos</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Hidden domain, probably due to privacy level. Skip this in the top lists</comment>
		<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>domain</name><operator>-&gt;</operator><name>domainpos</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>HIDDEN_DOMAIN</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><name>blocked</name> <operator>&amp;&amp;</operator> <name>showblocked</name> <operator>&amp;&amp;</operator> <name><name>domain</name><operator>-&gt;</operator><name>blockedcount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name>istelnet</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ssend</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"%i %i %s\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>domain</name><operator>-&gt;</operator><name>blockedcount</name></name></expr></argument>, <argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>domain</name><operator>-&gt;</operator><name>domainpos</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else <block>{<block_content>
				<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>pack_str32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>domain</name><operator>-&gt;</operator><name>domainpos</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<return>return;</return></block_content></block></if></if_stmt>

				<expr_stmt><expr><call><name>pack_int32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>domain</name><operator>-&gt;</operator><name>blockedcount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if<condition>(<expr><operator>!</operator><name>blocked</name> <operator>&amp;&amp;</operator> <name>showpermitted</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>domain</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <name><name>domain</name><operator>-&gt;</operator><name>blockedcount</name></name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name>istelnet</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ssend</name><argument_list>(<argument><expr><name>sock</name></expr></argument>,<argument><expr><literal type="string">"%i %i %s\n"</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><operator>(</operator><name><name>domain</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <name><name>domain</name><operator>-&gt;</operator><name>blockedcount</name></name><operator>)</operator></expr></argument>,<argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>domain</name><operator>-&gt;</operator><name>domainpos</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else
			<block>{<block_content>
				<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>pack_str32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>domain</name><operator>-&gt;</operator><name>domainpos</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<return>return;</return></block_content></block></if></if_stmt>

				<expr_stmt><expr><call><name>pack_int32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>domain</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <name><name>domain</name><operator>-&gt;</operator><name>blockedcount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Only count entries that are actually sent and return when we have send enough data</comment>
		<if_stmt><if>if<condition>(<expr><name>n</name> <operator>==</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if<condition>(<expr><name>excludedomains</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>clearSetupVarsArray</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>getTopClients</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>client_message</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>istelnet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name><name>temparray</name><index>[<expr><name><name>counters</name><operator>-&gt;</operator><name>clients</name></name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>count</name><init>=<expr><literal type="number">10</literal></expr></init></decl>, <decl><type ref="prev"/><name>num</name></decl>;</decl_stmt>

	<comment type="line">// Exit before processing any data if requested via config setting</comment>
	<expr_stmt><expr><call><name>get_privacy_level</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>privacylevel</name></name> <operator>&gt;=</operator> <name>PRIVACY_HIDE_DOMAINS_CLIENTS</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// Always send the total number of clients, but pretend it's 0</comment>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name>istelnet</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pack_int32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Match both top-domains and top-ads</comment>
	<comment type="line">// example: &gt;top-clients (15)</comment>
	<if_stmt><if>if<condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"%*[^(](%i)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="line">// User wants a different number of requests</comment>
		<expr_stmt><expr><name>count</name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Show also clients which have not been active recently?</comment>
	<comment type="line">// This option can be combined with existing options,</comment>
	<comment type="line">// i.e. both &gt;top-clients withzero" and "&gt;top-clients withzero (123)" are valid</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>includezeroclients</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>command</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">" withzero"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>includezeroclients</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Show number of blocked queries instead of total number?</comment>
	<comment type="line">// This option can be combined with existing options,</comment>
	<comment type="line">// i.e. "&gt;top-clients withzero blocked (123)" would be valid</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>blockedonly</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>command</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">" blocked"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>blockedonly</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>clientID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>clientID</name> <operator>&lt;</operator> <name><name>counters</name><operator>-&gt;</operator><name>clients</name></name></expr>;</condition> <incr><expr><name>clientID</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="line">// Get client pointer</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>clientsData</name><modifier>*</modifier></type> <name>client</name> <init>= <expr><call><name>getClient</name><argument_list>(<argument><expr><name>clientID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// Skip invalid clients and also those managed by alias clients</comment>
		<if_stmt><if>if<condition>(<expr><name>client</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>client</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>aliasclient</name></name> <operator>&amp;&amp;</operator> <name><name>client</name><operator>-&gt;</operator><name>aliasclient_id</name></name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>temparray</name><index>[<expr><name>clientID</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>temparray</name><index>[<expr><name>clientID</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>clientID</name></expr>;</expr_stmt>
		<comment type="line">// Use either blocked or total count based on request string</comment>
		<expr_stmt><expr><name><name>temparray</name><index>[<expr><name>clientID</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>blockedonly</name></expr> ?</condition><then> <expr><name><name>client</name><operator>-&gt;</operator><name>blockedcount</name></name></expr> </then><else>: <expr><name><name>client</name><operator>-&gt;</operator><name>count</name></name></expr></else></ternary></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">// Sort in ascending order?</comment>
	<comment type="line">// example: &gt;top-clients asc</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>asc</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>command</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">" asc"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>asc</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Sort temporary array</comment>
	<if_stmt><if>if<condition>(<expr><name>asc</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>temparray</name></expr></argument>, <argument><expr><name><name>counters</name><operator>-&gt;</operator><name>clients</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>int</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cmpasc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>temparray</name></expr></argument>, <argument><expr><name><name>counters</name><operator>-&gt;</operator><name>clients</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>int</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cmpdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="line">// Get clients which the user doesn't want to see</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>excludeclients</name> <init>= <expr><call><name>read_setupVarsconf</name><argument_list>(<argument><expr><literal type="string">"API_EXCLUDE_CLIENTS"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>excludeclients</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>getSetupVarsArray</name><argument_list>(<argument><expr><name>excludeclients</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>istelnet</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Send the total queries so they can make percentages from this data</comment>
		<expr_stmt><expr><call><name>pack_int32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>counters</name><operator>-&gt;</operator><name>queries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>counters</name><operator>-&gt;</operator><name>clients</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="line">// Get sorted indices and counter values (may be either total or blocked count)</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>clientID</name> <init>= <expr><name><name>temparray</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ccount</name> <init>= <expr><name><name>temparray</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<comment type="line">// clientID -1 means this client is to be skipped (managed by a alias-client)</comment>
		<if_stmt><if>if<condition>(<expr><name>clientID</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// Get client pointer</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>clientsData</name><modifier>*</modifier></type> <name>client</name> <init>= <expr><call><name>getClient</name><argument_list>(<argument><expr><name>clientID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Skip invalid clients</comment>
		<if_stmt><if>if<condition>(<expr><name>client</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// Skip this client if there is a filter on it</comment>
		<if_stmt><if>if<condition>(<expr><name>excludeclients</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
			<operator>(</operator><call><name>insetupVarsArray</name><argument_list>(<argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>ippos</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>insetupVarsArray</name><argument_list>(<argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>namepos</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// Hidden client, probably due to privacy level. Skip this in the top lists</comment>
		<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>ippos</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>HIDDEN_CLIENT</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// Get client IP and name</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>client_ip</name> <init>= <expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>ippos</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>client_name</name> <init>= <expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>namepos</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Return this client if either</comment>
		<comment type="line">// - "withzero" option is set, and/or</comment>
		<comment type="line">// - the client made at least one query within the most recent 24 hours</comment>
		<if_stmt><if>if<condition>(<expr><name>includezeroclients</name> <operator>||</operator> <name>ccount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name>istelnet</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ssend</name><argument_list>(<argument><expr><name>sock</name></expr></argument>,<argument><expr><literal type="string">"%i %i %s %s\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>ccount</name></expr></argument>, <argument><expr><name>client_ip</name></expr></argument>, <argument><expr><name>client_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else
			<block>{<block_content>
				<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>pack_str32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>pack_str32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>client_ip</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<return>return;</return></block_content></block></if></if_stmt>

				<expr_stmt><expr><call><name>pack_int32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>ccount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><name>n</name> <operator>==</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if<condition>(<expr><name>excludeclients</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>clearSetupVarsArray</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>getUpstreamDestinations</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>client_message</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>istelnet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>sort</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name><name>temparray</name><index>[<expr><name><name>counters</name><operator>-&gt;</operator><name>upstreams</name></name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>sumforwarded</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>command</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"unsorted"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>sort</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>upstreamID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>upstreamID</name> <operator>&lt;</operator> <name><name>counters</name><operator>-&gt;</operator><name>upstreams</name></name></expr>;</condition> <incr><expr><name>upstreamID</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="line">// Get upstream pointer</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>upstreamsData</name><modifier>*</modifier></type> <name>upstream</name> <init>= <expr><call><name>getUpstream</name><argument_list>(<argument><expr><name>upstreamID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>upstream</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>temparray</name><index>[<expr><name>upstreamID</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>upstreamID</name></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>upstream</name><operator>-&gt;</operator><name>overTime</name></name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>upstream</name><operator>-&gt;</operator><name>overTime</name></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><name>count</name> <operator>+=</operator> <name><name>upstream</name><operator>-&gt;</operator><name>overTime</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><name><name>temparray</name><index>[<expr><name>upstreamID</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>sumforwarded</name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if<condition>(<expr><name>sort</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Sort temporary array in descending order</comment>
		<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>temparray</name></expr></argument>, <argument><expr><name><name>counters</name><operator>-&gt;</operator><name>upstreams</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>int</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cmpdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cached</name> <init>= <expr><call><name>cached_queries</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>blocked</name> <init>= <expr><call><name>blocked_queries</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>others</name> <init>= <expr><name><name>counters</name><operator>-&gt;</operator><name>queries</name></name> <operator>-</operator> <name><name>counters</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>QUERY_FORWARDED</name></expr>]</index></name> <operator>-</operator> <name>cached</name> <operator>-</operator> <name>blocked</name></expr></init></decl>;</decl_stmt>
	<comment type="line">// The total number of DNS packets can be different than the total</comment>
	<comment type="line">// number of queries as FTL is periodically sending queries to multiple</comment>
	<comment type="line">// DNS upstream servers to probe which one is the fastest</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>totalqueries</name> <init>= <expr><name>sumforwarded</name> <operator>+</operator> <name>blocked</name> <operator>+</operator> <name>cached</name> <operator>+</operator> <name>others</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// Loop over available forward destinations</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>-</operator><literal type="number">3</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>counters</name><operator>-&gt;</operator><name>upstreams</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>float</name></type> <name>percentage</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>in_port_t</name></type> <name>upstream_port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if<condition>(<expr><name>i</name> <operator>==</operator> <operator>-</operator><literal type="number">3</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Blocked queries (local lists)</comment>
			<expr_stmt><expr><name>ip</name> <operator>=</operator> <literal type="string">"blocked"</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>name</name> <operator>=</operator> <name>ip</name></expr>;</expr_stmt>

			<if_stmt><if>if<condition>(<expr><name>totalqueries</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<comment type="line">// What's the percentage of blocked queries on the total amount of queries?</comment>
				<expr_stmt><expr><name>percentage</name> <operator>=</operator> <literal type="number">1e2f</literal> <operator>*</operator> <name>blocked</name> <operator>/</operator> <name>totalqueries</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if<condition>(<expr><name>i</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Local cache</comment>
			<expr_stmt><expr><name>ip</name> <operator>=</operator> <literal type="string">"cached"</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>name</name> <operator>=</operator> <name>ip</name></expr>;</expr_stmt>

			<if_stmt><if>if<condition>(<expr><name>totalqueries</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<comment type="line">// What's the percentage of cached queries on the total amount of queries?</comment>
				<expr_stmt><expr><name>percentage</name> <operator>=</operator> <literal type="number">1e2f</literal> <operator>*</operator> <name>cached</name> <operator>/</operator> <name>totalqueries</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if<condition>(<expr><name>i</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Others</comment>
			<expr_stmt><expr><name>ip</name> <operator>=</operator> <literal type="string">"other"</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>name</name> <operator>=</operator> <name>ip</name></expr>;</expr_stmt>

			<if_stmt><if>if<condition>(<expr><name>totalqueries</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<comment type="line">// What's the percentage of cached queries on the total amount of queries?</comment>
				<expr_stmt><expr><name>percentage</name> <operator>=</operator> <literal type="number">1e2f</literal> <operator>*</operator> <name>others</name> <operator>/</operator> <name>totalqueries</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="line">// Regular upstream destination</comment>
			<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>upstreamID</name> <init>= <expr><name><name>temparray</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>count</name> <init>= <expr><name><name>temparray</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

			<comment type="line">// Get upstream pointer</comment>
			<decl_stmt><decl><type><specifier>const</specifier> <name>upstreamsData</name><modifier>*</modifier></type> <name>upstream</name> <init>= <expr><call><name>getUpstream</name><argument_list>(<argument><expr><name>upstreamID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><name>upstream</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<comment type="line">// Get IP and host name of upstream destination if available</comment>
			<expr_stmt><expr><name>ip</name> <operator>=</operator> <call><name>getstr</name><argument_list>(<argument><expr><name><name>upstream</name><operator>-&gt;</operator><name>ippos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name><name>upstream</name><operator>-&gt;</operator><name>namepos</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>getstr</name><argument_list>(<argument><expr><name><name>upstream</name><operator>-&gt;</operator><name>namepos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>getstr</name><argument_list>(<argument><expr><name><name>upstream</name><operator>-&gt;</operator><name>ippos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<expr_stmt><expr><name>upstream_port</name> <operator>=</operator> <name><name>upstream</name><operator>-&gt;</operator><name>port</name></name></expr>;</expr_stmt>

			<comment type="line">// Get percentage</comment>
			<if_stmt><if>if<condition>(<expr><name>totalqueries</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>percentage</name> <operator>=</operator> <literal type="number">1e2f</literal> <operator>*</operator> <name>count</name> <operator>/</operator> <name>totalqueries</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="line">// Send data:</comment>
		<comment type="line">// - always if i &lt; 0 (special upstreams: blocked and cached)</comment>
		<comment type="line">// - only if percentage &gt; 0.0 for all others (i &gt; 0)</comment>
		<if_stmt><if>if<condition>(<expr><name>percentage</name> <operator>&gt;</operator> <literal type="number">0.0f</literal> <operator>||</operator> <name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name>istelnet</name></expr>)</condition><block type="pseudo"><block_content>
				<if_stmt><if>if<condition>(<expr><name>upstream_port</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ssend</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"%i %.2f %s#%u %s#%u\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>percentage</name></expr></argument>,
					      <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>upstream_port</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>upstream_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ssend</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"%i %.2f %s %s\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>percentage</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></if>
			<else>else
			<block>{<block_content>
				<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>pack_str32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>pack_str32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<return>return;</return></block_content></block></if></if_stmt>

				<expr_stmt><expr><call><name>pack_float</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>percentage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>getQueryTypes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>istelnet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name><name>enum</name> <name>query_types</name></name></type> <name>type</name> <init>= <expr><name>TYPE_A</name></expr></init></decl>;</init> <condition><expr><name>type</name> <operator>&lt;</operator> <name>TYPE_MAX</name></expr>;</condition> <incr><expr><name>type</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>total</name> <operator>+=</operator> <name><name>counters</name><operator>-&gt;</operator><name>querytype</name><index>[<expr><name>type</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<decl_stmt><decl><type><name>float</name></type> <name><name>percentage</name><index>[<expr><name>TYPE_MAX</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0.0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

	<comment type="line">// Prevent floating point exceptions by checking if the divisor is != 0</comment>
	<if_stmt><if>if<condition>(<expr><name>total</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<for>for<control>(<init><decl><type><name><name>enum</name> <name>query_types</name></name></type> <name>type</name> <init>= <expr><name>TYPE_A</name></expr></init></decl>;</init> <condition><expr><name>type</name> <operator>&lt;</operator> <name>TYPE_MAX</name></expr>;</condition> <incr><expr><name>type</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name><name>percentage</name><index>[<expr><name>type</name></expr>]</index></name> <operator>=</operator> <literal type="number">1e2f</literal><operator>*</operator><name><name>counters</name><operator>-&gt;</operator><name>querytype</name><index>[<expr><name>type</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>/</operator><name>total</name></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>istelnet</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ssend</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"A (IPv4): %.2f\nAAAA (IPv6): %.2f\nANY: %.2f\nSRV: %.2f\n"</literal>
		             <literal type="string">"SOA: %.2f\nPTR: %.2f\nTXT: %.2f\nNAPTR: %.2f\n"</literal>
		             <literal type="string">"MX: %.2f\nDS: %.2f\nRRSIG: %.2f\nDNSKEY: %.2f\n"</literal>
		             <literal type="string">"NS: %.2f\n"</literal> <literal type="string">"OTHER: %.2f\n\nSVCB: %.2f\nHTTPS: %.2f\n"</literal></expr></argument>,
		      <argument><expr><name><name>percentage</name><index>[<expr><name>TYPE_A</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>percentage</name><index>[<expr><name>TYPE_AAAA</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>percentage</name><index>[<expr><name>TYPE_ANY</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>percentage</name><index>[<expr><name>TYPE_SRV</name></expr>]</index></name></expr></argument>,
		      <argument><expr><name><name>percentage</name><index>[<expr><name>TYPE_SOA</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>percentage</name><index>[<expr><name>TYPE_PTR</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>percentage</name><index>[<expr><name>TYPE_TXT</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>percentage</name><index>[<expr><name>TYPE_NAPTR</name></expr>]</index></name></expr></argument>,
		      <argument><expr><name><name>percentage</name><index>[<expr><name>TYPE_MX</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>percentage</name><index>[<expr><name>TYPE_DS</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>percentage</name><index>[<expr><name>TYPE_RRSIG</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>percentage</name><index>[<expr><name>TYPE_DNSKEY</name></expr>]</index></name></expr></argument>,
		      <argument><expr><name><name>percentage</name><index>[<expr><name>TYPE_NS</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>percentage</name><index>[<expr><name>TYPE_OTHER</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>percentage</name><index>[<expr><name>TYPE_SVCB</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>percentage</name><index>[<expr><name>TYPE_HTTPS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>pack_str32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"A (IPv4)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pack_float</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>percentage</name><index>[<expr><name>TYPE_A</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pack_str32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"AAAA (IPv6)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pack_float</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>percentage</name><index>[<expr><name>TYPE_AAAA</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pack_str32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"ANY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pack_float</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>percentage</name><index>[<expr><name>TYPE_ANY</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pack_str32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"SRV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pack_float</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>percentage</name><index>[<expr><name>TYPE_SRV</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pack_str32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"SOA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pack_float</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>percentage</name><index>[<expr><name>TYPE_SOA</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pack_str32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"PTR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pack_float</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>percentage</name><index>[<expr><name>TYPE_PTR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pack_str32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"TXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pack_float</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>percentage</name><index>[<expr><name>TYPE_TXT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pack_str32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"NAPTR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pack_float</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>percentage</name><index>[<expr><name>TYPE_NAPTR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pack_str32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"MX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pack_float</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>percentage</name><index>[<expr><name>TYPE_MX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pack_str32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"DS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pack_float</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>percentage</name><index>[<expr><name>TYPE_DS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pack_str32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"RRSIG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pack_float</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>percentage</name><index>[<expr><name>TYPE_RRSIG</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pack_str32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"DNSKEY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pack_float</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>percentage</name><index>[<expr><name>TYPE_DNSKEY</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pack_str32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"NS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pack_float</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>percentage</name><index>[<expr><name>TYPE_NS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pack_str32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"OTHER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pack_float</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>percentage</name><index>[<expr><name>TYPE_OTHER</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pack_str32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"SVCB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pack_float</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>percentage</name><index>[<expr><name>TYPE_SVCB</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pack_str32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"HTTPS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pack_float</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>percentage</name><index>[<expr><name>TYPE_HTTPS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>getAllQueries</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>client_message</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>istelnet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Exit before processing any data if requested via config setting</comment>
	<expr_stmt><expr><call><name>get_privacy_level</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>privacylevel</name></name> <operator>&gt;=</operator> <name>PRIVACY_MAXIMUM</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// Do we want a more specific version of this command (domain/client/time interval filtered)?</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>from</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>until</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>showpermitted</name> <init>= <expr><name>true</name></expr></init></decl>, <decl><type ref="prev"/><name>showblocked</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>domainname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>filterdomainname</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>domainid</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>clientname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>filterclientname</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>clientid</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>clientid_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>querytype</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>forwarddest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>filterforwarddest</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>forwarddestid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">// Time filtering?</comment>
	<if_stmt><if>if<condition>(<expr><call><name>command</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"&gt;getallqueries-time"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"&gt;getallqueries-time %i %i"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>from</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>until</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Query type filtering?</comment>
	<if_stmt><if>if<condition>(<expr><call><name>command</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"&gt;getallqueries-qtype"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<comment type="line">// Get query type we want to see only</comment>
		<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>qtype</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"&gt;getallqueries-qtype %u"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>qtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>qtype</name> <operator>&lt;</operator> <name>TYPE_A</name> <operator>||</operator> <name>qtype</name> <operator>&gt;=</operator> <name>TYPE_MAX</name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Invalid query type requested</comment>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>querytype</name> <operator>=</operator> <name>qtype</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Forward destination filtering?</comment>
	<if_stmt><if>if<condition>(<expr><call><name>command</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"&gt;getallqueries-forward"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<comment type="line">// Get forward destination name we want to see only (limit length to 255 chars)</comment>
		<expr_stmt><expr><name>forwarddest</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>forwarddest</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"&gt;getallqueries-forward %255s"</literal></expr></argument>, <argument><expr><name>forwarddest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>filterforwarddest</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>forwarddest</name></expr></argument>, <argument><expr><literal type="string">"blocked"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>forwarddestid</name> <operator>=</operator> <operator>-</operator><literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>forwarddest</name></expr></argument>, <argument><expr><literal type="string">"cached"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>forwarddestid</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>forwarddest</name></expr></argument>, <argument><expr><literal type="string">"other"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>forwarddestid</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<comment type="line">// Extract address/name and port</comment>
			<decl_stmt><decl><type><name>char</name></type> <name><name>serv_addr</name><index>[<expr><name>INET6_ADDRSTRLEN</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>serv_port</name> <init>= <expr><literal type="number">53</literal></expr></init></decl>;</decl_stmt>
			<comment type="line">// We limit the number of bytes written into the serv_addr buffer</comment>
			<comment type="line">// to prevent buffer overflows. If there is no port available in</comment>
			<comment type="line">// the database, we skip extracting them and use the default port</comment>
			<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>forwarddest</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><call><name>xstr</name><argument_list>(<argument><expr><name>INET6_ADDRSTRLEN</name></expr></argument>)</argument_list></call><literal type="string">"[^#]#%u"</literal></expr></argument>, <argument><expr><name>serv_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>serv_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>serv_addr</name><index>[<expr><name>INET6_ADDRSTRLEN</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

			<comment type="line">// Iterate through all known forward destinations</comment>
			<expr_stmt><expr><name>forwarddestid</name> <operator>=</operator> <operator>-</operator><literal type="number">3</literal></expr>;</expr_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>counters</name><operator>-&gt;</operator><name>upstreams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<comment type="line">// Get forward pointer</comment>
				<decl_stmt><decl><type><specifier>const</specifier> <name>upstreamsData</name><modifier>*</modifier></type> <name>forward</name> <init>= <expr><call><name>getUpstream</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if<condition>(<expr><name>forward</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
					<continue>continue;</continue></block_content></block></if></if_stmt>

				<comment type="line">// Try to match the requested string against their IP addresses and</comment>
				<comment type="line">// (if available) their host names</comment>
				<if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>forward</name><operator>-&gt;</operator><name>ippos</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>serv_addr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
				   <operator>(</operator><name><name>forward</name><operator>-&gt;</operator><name>namepos</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
				    <call><name>strcasecmp</name><argument_list>(<argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>forward</name><operator>-&gt;</operator><name>namepos</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>serv_addr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>forward</name><operator>-&gt;</operator><name>port</name></name> <operator>==</operator> <name>serv_port</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>forwarddestid</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
			<if_stmt><if>if<condition>(<expr><name>forwarddestid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="line">// Requested forward destination has not been found, we directly</comment>
				<comment type="line">// exit here as there is no data to be returned</comment>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>forwarddest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Domain filtering?</comment>
	<if_stmt><if>if<condition>(<expr><call><name>command</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"&gt;getallqueries-domain"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<comment type="line">// Get domain name we want to see only (limit length to 255 chars)</comment>
		<expr_stmt><expr><name>domainname</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>domainname</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name>forwarddest</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>forwarddest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"&gt;getallqueries-domain %255s"</literal></expr></argument>, <argument><expr><name>domainname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>filterdomainname</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<comment type="line">// Iterate through all known domains</comment>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>domainID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>domainID</name> <operator>&lt;</operator> <name><name>counters</name><operator>-&gt;</operator><name>domains</name></name></expr>;</condition> <incr><expr><name>domainID</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<comment type="line">// Get domain pointer</comment>
			<decl_stmt><decl><type><specifier>const</specifier> <name>domainsData</name><modifier>*</modifier></type> <name>domain</name> <init>= <expr><call><name>getDomain</name><argument_list>(<argument><expr><name>domainID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><name>domain</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<comment type="line">// Try to match the requested string</comment>
			<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>domain</name><operator>-&gt;</operator><name>domainpos</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>domainname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>domainid</name> <operator>=</operator> <name>domainID</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if<condition>(<expr><name>domainid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Requested domain has not been found, we directly</comment>
			<comment type="line">// exit here as there is no data to be returned</comment>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>domainname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>forwarddest</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>forwarddest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Client filtering?</comment>
	<if_stmt><if>if<condition>(<expr><call><name>command</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"&gt;getallqueries-client"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<comment type="line">// Get client name we want to see only (limit length to 255 chars)</comment>
		<expr_stmt><expr><name>clientname</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>clientname</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name>forwarddest</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>forwarddest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if<condition>(<expr><name>domainname</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>domainname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><call><name>command</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"&gt;getallqueries-client-blocked"</literal></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>showpermitted</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"&gt;getallqueries-client-blocked %255s"</literal></expr></argument>, <argument><expr><name>clientname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"&gt;getallqueries-client %255s"</literal></expr></argument>, <argument><expr><name>clientname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>filterclientname</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

		<comment type="line">// Iterate through all known clients</comment>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>counters</name><operator>-&gt;</operator><name>clients</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<comment type="line">// Get client pointer</comment>
			<decl_stmt><decl><type><specifier>const</specifier> <name>clientsData</name><modifier>*</modifier></type> <name>client</name> <init>= <expr><call><name>getClient</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<comment type="line">// Skip invalid clients and also those managed by alias clients</comment>
			<if_stmt><if>if<condition>(<expr><name>client</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>client</name><operator>-&gt;</operator><name>aliasclient_id</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<comment type="line">// Try to match the requested string</comment>
			<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>ippos</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>clientname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
			   <operator>(</operator><name><name>client</name><operator>-&gt;</operator><name>namepos</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
			    <call><name>strcasecmp</name><argument_list>(<argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>namepos</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>clientname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>clientid</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

				<comment type="line">// Is this a alias-client?</comment>
				<if_stmt><if>if<condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>aliasclient</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>clientid_list</name> <operator>=</operator> <call><name>get_aliasclient_list</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if<condition>(<expr><name>clientid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Requested client has not been found, we directly</comment>
			<comment type="line">// exit here as there is no data to be returned</comment>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>clientname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>forwarddest</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>forwarddest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if<condition>(<expr><name>domainname</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>domainname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>ibeg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>num</name></decl>;</decl_stmt>
	<comment type="line">// Test for integer that specifies number of entries to be shown</comment>
	<if_stmt><if>if<condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"%*[^(](%i)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// User wants a different number of requests</comment>
		<comment type="line">// Don't allow a start index that is smaller than zero</comment>
		<expr_stmt><expr><name>ibeg</name> <operator>=</operator> <name><name>counters</name><operator>-&gt;</operator><name>queries</name></name><operator>-</operator><name>num</name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>ibeg</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>ibeg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Get potentially existing filtering flags</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>filter</name> <init>= <expr><call><name>read_setupVarsconf</name><argument_list>(<argument><expr><literal type="string">"API_QUERY_LOG_SHOW"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>filter</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"permittedonly"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>showblocked</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if<condition>(<expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"blockedonly"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>showpermitted</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if<condition>(<expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"nothing"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>showpermitted</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>showblocked</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>clearSetupVarsArray</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>queryID</name> <init>= <expr><name>ibeg</name></expr></init></decl>;</init> <condition><expr><name>queryID</name> <operator>&lt;</operator> <name><name>counters</name><operator>-&gt;</operator><name>queries</name></name></expr>;</condition> <incr><expr><name>queryID</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>queriesData</name><modifier>*</modifier></type> <name>query</name> <init>= <expr><call><name>getQuery</name><argument_list>(<argument><expr><name>queryID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// Check if this query has been create while in maximum privacy mode</comment>
		<if_stmt><if>if<condition>(<expr><name>query</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>query</name><operator>-&gt;</operator><name>privacylevel</name></name> <operator>&gt;=</operator> <name>PRIVACY_MAXIMUM</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// Verify query type</comment>
		<if_stmt><if>if<condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>type</name></name> <operator>&gt;=</operator> <name>TYPE_MAX</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<comment type="line">// Get query type</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>qtype</name> <init>= <expr><name><name>querytypes</name><index>[<expr><name><name>query</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type> <name><name>othertype</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt> <comment type="line">// Maximum is "TYPE65535" = 10 bytes</comment>
		<if_stmt><if>if<condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TYPE_OTHER</name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Check the dnsmasq RR types table for a matching record</comment>
			<expr_stmt><expr><name>qtype</name> <operator>=</operator> <call><name>querystr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>qtype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// If not known (querystr() returned "type=1234"), we replace this</comment>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><name>qtype</name> <operator>||</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>qtype</name></expr></argument>, <argument><expr><literal type="string">"type="</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<comment type="line">// Format custom type into buffer</comment>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>othertype</name></expr></argument>, <argument><expr><literal type="string">"TYPE%u"</literal></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>qtype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line">// Replace qtype pointer</comment>
				<expr_stmt><expr><name>qtype</name> <operator>=</operator> <name>othertype</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Hide UNKNOWN queries when not requesting both query status types</comment>
		<if_stmt><if>if<condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>QUERY_UNKNOWN</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>showpermitted</name> <operator>&amp;&amp;</operator> <name>showblocked</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// Skip blocked queries when asked to</comment>
		<if_stmt><if>if<condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>blocked</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>showblocked</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// Skip permitted queries when asked to</comment>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>query</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>blocked</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>showpermitted</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// Skip those entries which so not meet the requested timeframe</comment>
		<if_stmt><if>if<condition>(<expr><operator>(</operator><name>from</name> <operator>&gt;</operator> <name><name>query</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>&amp;&amp;</operator> <name>from</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>query</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>&gt;</operator> <name>until</name> <operator>&amp;&amp;</operator> <name>until</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// Skip if domain is not identical with what the user wants to see</comment>
		<if_stmt><if>if<condition>(<expr><name>filterdomainname</name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Check direct match</comment>
			<if_stmt><if>if<condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>domainID</name></name> <operator>==</operator> <name>domainid</name></expr>)</condition>
			<block>{<block_content>
				<comment type="line">// Get this query</comment>
			</block_content>}</block></if>
			<comment type="line">// If the domain of this query did not match, the CNAME</comment>
			<comment type="line">// domain may still match - we have to check it in</comment>
			<comment type="line">// addition if this query is of CNAME blocked type</comment>
			<if type="elseif">else if<condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>CNAME_domainID</name></name> <operator>==</operator> <name>domainid</name></expr>)</condition>
			<block>{<block_content>
				<comment type="line">// Get this query</comment>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="line">// Skip this query</comment>
				<continue>continue;</continue>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Skip if client name and IP are not identical with what the user wants to see</comment>
		<if_stmt><if>if<condition>(<expr><name>filterclientname</name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Normal clients</comment>
			<if_stmt><if>if<condition>(<expr><name>clientid_list</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>query</name><operator>-&gt;</operator><name>clientID</name></name> <operator>!=</operator> <name>clientid</name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if>
			<comment type="line">// Alias-clients (we have to check for all clients managed by this alias-client)</comment>
			<if type="elseif">else if<condition>(<expr><name>clientid_list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
				<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>clientid_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
					<if_stmt><if>if<condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>clientID</name></name> <operator>==</operator> <name><name>clientid_list</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
				<if_stmt><if>if<condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
					<continue>continue;</continue></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Skip if query type is not identical with what the user wants to see</comment>
		<if_stmt><if>if<condition>(<expr><name>querytype</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>querytype</name> <operator>!=</operator> <name><name>query</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><name>filterforwarddest</name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Skip if not from the virtual blocking "upstream" server</comment>
			<if_stmt><if>if<condition>(<expr><name>forwarddestid</name> <operator>==</operator> <operator>-</operator><literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>query</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>blocked</name></name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if>
			<comment type="line">// Does the user want to see queries answered from local cache?</comment>
			<if type="elseif">else if<condition>(<expr><name>forwarddestid</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>query</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>QUERY_CACHE</name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if>
			<comment type="line">// Does the user want to see queries from the "other" category</comment>
			<if type="elseif">else if<condition>(<expr><name>forwarddestid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>query</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>QUERY_IN_PROGRESS</name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if>
			<comment type="line">// Does the user want to see queries answered by an upstream server?</comment>
			<if type="elseif">else if<condition>(<expr><name>forwarddestid</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>forwarddestid</name> <operator>!=</operator> <name><name>query</name><operator>-&gt;</operator><name>upstreamID</name></name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Ask subroutine for domain. It may return "hidden" depending on</comment>
		<comment type="line">// the privacy settings at the time the query was made</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>domain</name> <init>= <expr><call><name>getDomainString</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Similarly for the client</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>clientIPName</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<comment type="line">// Get client pointer</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>clientsData</name><modifier>*</modifier></type> <name>client</name> <init>= <expr><call><name>getClient</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>clientID</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>domain</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>client</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>namepos</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>clientIPName</name> <operator>=</operator> <call><name>getClientNameString</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>clientIPName</name> <operator>=</operator> <call><name>getClientIPString</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>delay</name> <init>= <expr><ternary><condition><expr><name><name>query</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>response_calculated</name></name></expr> ?</condition><then> <expr><name><name>query</name><operator>-&gt;</operator><name>response</name></name></expr> </then><else>: <expr><literal type="number">0UL</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

		<comment type="line">// Get domain blocked during deep CNAME inspection, if applicable</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>CNAME_domain</name> <init>= <expr><literal type="string">"N/A"</literal></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>CNAME_domainID</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>CNAME_domain</name> <operator>=</operator> <call><name>getCNAMEDomainString</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Get domainlist table ID, if applicable and permitted by privacy settings</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>domainlist_id</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>config</name><operator>.</operator><name>privacylevel</name></name> <operator>&lt;</operator> <name>PRIVACY_HIDE_DOMAINS</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cacheID</name> <init>= <expr><call><name>findCacheID</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>domainID</name></name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>clientID</name></name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>DNSCacheData</name> <modifier>*</modifier></type><name>dns_cache</name> <init>= <expr><call><name>getDNSCache</name><argument_list>(<argument><expr><name>cacheID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><name>dns_cache</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>domainlist_id</name> <operator>=</operator> <name><name>dns_cache</name><operator>-&gt;</operator><name>domainlist_id</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Get IP of upstream destination, if applicable</comment>
		<decl_stmt><decl><type><name>in_port_t</name></type> <name>upstream_port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>upstream_name</name> <init>= <expr><literal type="string">"N/A"</literal></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>upstreamID</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>upstreamsData</name> <modifier>*</modifier></type><name>upstream</name> <init>= <expr><call><name>getUpstream</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>upstreamID</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><name>upstream</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if<condition>(<expr><name><name>upstream</name><operator>-&gt;</operator><name>namepos</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<comment type="line">// Get upstream destination name if possible</comment>
					<expr_stmt><expr><name>upstream_name</name> <operator>=</operator> <call><name>getstr</name><argument_list>(<argument><expr><name><name>upstream</name><operator>-&gt;</operator><name>namepos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<comment type="line">// If we have no name, get the IP address</comment>
					<expr_stmt><expr><name>upstream_name</name> <operator>=</operator> <call><name>getstr</name><argument_list>(<argument><expr><name><name>upstream</name><operator>-&gt;</operator><name>ippos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<expr_stmt><expr><name>upstream_port</name> <operator>=</operator> <name><name>upstream</name><operator>-&gt;</operator><name>port</name></name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Get reply type</comment>
		<comment type="line">// If this is a partially cached CNAME (parts needed to be</comment>
		<comment type="line">// forwarded) but we never receive replies, we have to set the</comment>
		<comment type="line">// reply back to unknown instead of handing out "CNAME"</comment>
		<comment type="line">// See https://discourse.pi-hole.net/t/garbage-response-times-for-many-almost-half-at-times-cname-answers/50291/17</comment>
		<decl_stmt><decl><type><name><name>enum</name> <name>reply_type</name></name></type> <name>reply</name> <init>= <expr><ternary><condition><expr><name><name>query</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>response_calculated</name></name></expr> ?</condition><then> <expr><name><name>query</name><operator>-&gt;</operator><name>reply</name></name></expr> </then><else>: <expr><name>REPLY_UNKNOWN</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

		<comment type="line">// Overwrite reply and reply time if they don't make sense for this query</comment>
		<comment type="line">// See same Discourse discussion as immediately above</comment>
		<if_stmt><if>if<condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>QUERY_RETRIED</name> <operator>||</operator> <name><name>query</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>QUERY_IN_PROGRESS</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>reply</name> <operator>=</operator> <name>REPLY_UNKNOWN</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>delay</name> <operator>=</operator> <literal type="number">0UL</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><name>istelnet</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ssend</name><argument_list>(<argument><expr><name>sock</name></expr></argument>,<argument><expr><literal type="string">"%lli %s %s %s %i %i %i %lu %s %i %s#%u \"%s\""</literal></expr></argument>,
				<argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name><name>query</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>,
				<argument><expr><name>qtype</name></expr></argument>,
				<argument><expr><name>domain</name></expr></argument>,
				<argument><expr><name>clientIPName</name></expr></argument>,
				<argument><expr><name><name>query</name><operator>-&gt;</operator><name>status</name></name></expr></argument>,
				<argument><expr><name><name>query</name><operator>-&gt;</operator><name>dnssec</name></name></expr></argument>,
				<argument><expr><name>reply</name></expr></argument>,
				<argument><expr><name>delay</name></expr></argument>,
				<argument><expr><name>CNAME_domain</name></expr></argument>,
				<argument><expr><name>domainlist_id</name></expr></argument>,
				<argument><expr><name>upstream_name</name></expr></argument>,
				<argument><expr><name>upstream_port</name></expr></argument>,
				<argument><expr><ternary><condition><expr><name><name>query</name><operator>-&gt;</operator><name>ede</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><call><name>get_edestr</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>ede</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_API</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ssend</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">" \"%i\""</literal></expr></argument>, <argument><expr><name>queryID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>ssend</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>pack_int32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>query</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// Use a fixstr because the length of qtype is always 4 (max is 31 for fixstr)</comment>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>pack_fixstr</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>qtype</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>

			<comment type="line">// Use str32 for domain and client because we have no idea how long they will be (max is 4294967295 for str32)</comment>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>pack_str32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>pack_str32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>clientIPName</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>pack_uint8</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pack_uint8</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>dnssec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<comment type="line">// Free allocated memory</comment>
	<if_stmt><if>if<condition>(<expr><name>filterclientname</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>clientname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>filterdomainname</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>domainname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>filterforwarddest</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>forwarddest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>clientid_list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>clientid_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>getRecentBlocked</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>client_message</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>istelnet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>num</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">// Test for integer that specifies number of entries to be shown</comment>
	<if_stmt><if>if<condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"%*[^(](%i)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="line">// User wants a different number of requests</comment>
		<if_stmt><if>if<condition>(<expr><name>num</name> <operator>&gt;=</operator> <name><name>counters</name><operator>-&gt;</operator><name>queries</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Find most recently blocked query</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>queryID</name> <init>= <expr><name><name>counters</name><operator>-&gt;</operator><name>queries</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>queryID</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name>queryID</name><operator>--</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>queriesData</name><modifier>*</modifier></type> <name>query</name> <init>= <expr><call><name>getQuery</name><argument_list>(<argument><expr><name>queryID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>query</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>blocked</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Ask subroutine for domain. It may return "hidden" depending on</comment>
			<comment type="line">// the privacy settings at the time the query was made</comment>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>domain</name> <init>= <expr><call><name>getDomainString</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><name>domain</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<if_stmt><if>if<condition>(<expr><name>istelnet</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ssend</name><argument_list>(<argument><expr><name>sock</name></expr></argument>,<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>pack_str32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return;</return></block_content></block></if></if_stmt>

			<comment type="line">// Only count when sent successfully</comment>
			<expr_stmt><expr><name>found</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><name>found</name> <operator>&gt;=</operator> <name>num</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>getClientID</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>istelnet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>istelnet</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ssend</name><argument_list>(<argument><expr><name>sock</name></expr></argument>,<argument><expr><literal type="string">"%i\n"</literal></expr></argument>, <argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pack_int32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>getVersion</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>istelnet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>commit</name> <init>= <expr><name>GIT_HASH</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tag</name> <init>= <expr><name>GIT_TAG</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>version</name> <init>= <expr><call><name>get_FTL_version</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Extract first 7 characters of the hash</comment>
	<decl_stmt><decl><type><name>char</name></type> <name><name>hash</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>, <argument><expr><call><name>min</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">7</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name>istelnet</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ssend</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"version %s\ntag %s\nbranch %s\nhash %s\ndate %s\n"</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>GIT_BRANCH</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>GIT_DATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else <block>{<block_content>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>pack_str32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call> <operator>||</operator>
					<operator>!</operator><call><name>pack_str32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>tag</name></expr></argument>)</argument_list></call> <operator>||</operator>
					<operator>!</operator><call><name>pack_str32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>GIT_BRANCH</name></expr></argument>)</argument_list></call> <operator>||</operator>
					<operator>!</operator><call><name>pack_str32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call> <operator>||</operator>
					<operator>!</operator><call><name>pack_str32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>GIT_DATE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return;</return></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name>istelnet</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ssend</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"version vDev-%s\ntag %s\nbranch %s\nhash %s\ndate %s\n"</literal></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>GIT_BRANCH</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>GIT_DATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else <block>{<block_content>
			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hashVersion</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">6</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><name>hashVersion</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>hashVersion</name></expr></argument>, <argument><expr><literal type="string">"vDev-%s"</literal></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>pack_str32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>hashVersion</name></expr></argument>)</argument_list></call> <operator>||</operator>
					<operator>!</operator><call><name>pack_str32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>tag</name></expr></argument>)</argument_list></call> <operator>||</operator>
					<operator>!</operator><call><name>pack_str32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>GIT_BRANCH</name></expr></argument>)</argument_list></call> <operator>||</operator>
					<operator>!</operator><call><name>pack_str32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call> <operator>||</operator>
					<operator>!</operator><call><name>pack_str32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>GIT_DATE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hashVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>getDBstats</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>istelnet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Get file details</comment>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name></type> <name>filesize</name> <init>= <expr><call><name>get_FTL_db_filesize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>char</name></type> <name><name>prefix</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>formatted</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>format_memory_size</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>filesize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>formatted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>istelnet</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ssend</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"queries in database: %i\ndatabase filesize: %.2f %sB\nSQLite version: %s\n"</literal></expr></argument>,
		             <argument><expr><call><name>get_number_of_queries_in_DB</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>formatted</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><call><name>get_sqlite3_version</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>pack_int32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><call><name>get_number_of_queries_in_DB</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pack_int64</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>filesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>pack_str32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>get_sqlite3_version</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>getClientsOverTime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>istelnet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Exit before processing any data if requested via config setting</comment>
	<expr_stmt><expr><call><name>get_privacy_level</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>privacylevel</name></name> <operator>&gt;=</operator> <name>PRIVACY_HIDE_DOMAINS_CLIENTS</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// Get clients which the user doesn't want to see</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>excludeclients</name> <init>= <expr><call><name>read_setupVarsconf</name><argument_list>(<argument><expr><literal type="string">"API_EXCLUDE_CLIENTS"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// Array of clients to be skipped in the output</comment>
	<comment type="line">// if skipclient[i] == true then this client should be hidden from</comment>
	<comment type="line">// returned data. We initialize it with false</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name><name>skipclient</name><index>[<expr><name><name>counters</name><operator>-&gt;</operator><name>clients</name></name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>skipclient</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>counters</name><operator>-&gt;</operator><name>clients</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>excludeclients</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>getSetupVarsArray</name><argument_list>(<argument><expr><name>excludeclients</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for<control>(<init><decl><type><name>int</name></type> <name>clientID</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>clientID</name> <operator>&lt;</operator> <name><name>counters</name><operator>-&gt;</operator><name>clients</name></name></expr>;</condition> <incr><expr><name>clientID</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<comment type="line">// Get client pointer</comment>
			<decl_stmt><decl><type><specifier>const</specifier> <name>clientsData</name><modifier>*</modifier></type> <name>client</name> <init>= <expr><call><name>getClient</name><argument_list>(<argument><expr><name>clientID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<comment type="line">// Skip invalid clients</comment>
			<if_stmt><if>if<condition>(<expr><name>client</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<comment type="line">// Check if this client should be skipped</comment>
			<if_stmt><if>if<condition>(<expr><call><name>insetupVarsArray</name><argument_list>(<argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>ippos</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
			   <call><name>insetupVarsArray</name><argument_list>(<argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>namepos</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
			   <operator>(</operator><operator>!</operator><name><name>client</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>aliasclient</name></name> <operator>&amp;&amp;</operator> <name><name>client</name><operator>-&gt;</operator><name>aliasclient_id</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>skipclient</name><index>[<expr><name>clientID</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Main return loop</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>slot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>slot</name> <operator>&lt;</operator> <name>OVERTIME_SLOTS</name></expr>;</condition> <incr><expr><name>slot</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name>istelnet</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ssend</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"%lli"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name><name>overTime</name><index>[<expr><name>slot</name></expr>]</index></name><operator>.</operator><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pack_int32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>overTime</name><index>[<expr><name>slot</name></expr>]</index></name><operator>.</operator><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<comment type="line">// Loop over forward destinations to generate output to be sent to the client</comment>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>clientID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>clientID</name> <operator>&lt;</operator> <name><name>counters</name><operator>-&gt;</operator><name>clients</name></name></expr>;</condition> <incr><expr><name>clientID</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name><name>skipclient</name><index>[<expr><name>clientID</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<comment type="line">// Get client pointer</comment>
			<decl_stmt><decl><type><specifier>const</specifier> <name>clientsData</name><modifier>*</modifier></type> <name>client</name> <init>= <expr><call><name>getClient</name><argument_list>(<argument><expr><name>clientID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<comment type="line">// Skip invalid clients and also those managed by alias clients</comment>
			<if_stmt><if>if<condition>(<expr><name>client</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>client</name><operator>-&gt;</operator><name>aliasclient_id</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>
			<comment type="line">// Also skip clients with no active counts at all (may be old IPv6 addresses)</comment>
			<if_stmt><if>if<condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>thisclient</name> <init>= <expr><name><name>client</name><operator>-&gt;</operator><name>overTime</name><index>[<expr><name>slot</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if<condition>(<expr><name>istelnet</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ssend</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">" %i"</literal></expr></argument>, <argument><expr><name>thisclient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pack_int32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>thisclient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></for>

		<if_stmt><if>if<condition>(<expr><name>istelnet</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ssend</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pack_int32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if<condition>(<expr><name>excludeclients</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>clearSetupVarsArray</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>getClientNames</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>istelnet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Exit before processing any data if requested via config setting</comment>
	<expr_stmt><expr><call><name>get_privacy_level</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>privacylevel</name></name> <operator>&gt;=</operator> <name>PRIVACY_HIDE_DOMAINS_CLIENTS</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// Get clients which the user doesn't want to see</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>excludeclients</name> <init>= <expr><call><name>read_setupVarsconf</name><argument_list>(<argument><expr><literal type="string">"API_EXCLUDE_CLIENTS"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// Array of clients to be skipped in the output</comment>
	<comment type="line">// if skipclient[i] == true then this client should be hidden from</comment>
	<comment type="line">// returned data. We initialize it with false</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name><name>skipclient</name><index>[<expr><name><name>counters</name><operator>-&gt;</operator><name>clients</name></name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>skipclient</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>counters</name><operator>-&gt;</operator><name>clients</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>excludeclients</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>getSetupVarsArray</name><argument_list>(<argument><expr><name>excludeclients</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for<control>(<init><decl><type><name>int</name></type> <name>clientID</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>clientID</name> <operator>&lt;</operator> <name><name>counters</name><operator>-&gt;</operator><name>clients</name></name></expr>;</condition> <incr><expr><name>clientID</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<comment type="line">// Get client pointer</comment>
			<decl_stmt><decl><type><specifier>const</specifier> <name>clientsData</name><modifier>*</modifier></type> <name>client</name> <init>= <expr><call><name>getClient</name><argument_list>(<argument><expr><name>clientID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<comment type="line">// Skip invalid clients</comment>
			<if_stmt><if>if<condition>(<expr><name>client</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<comment type="line">// Check if this client should be skipped</comment>
			<if_stmt><if>if<condition>(<expr><call><name>insetupVarsArray</name><argument_list>(<argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>ippos</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
			   <call><name>insetupVarsArray</name><argument_list>(<argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>namepos</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
			   <operator>(</operator><operator>!</operator><name><name>client</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>aliasclient</name></name> <operator>&amp;&amp;</operator> <name><name>client</name><operator>-&gt;</operator><name>aliasclient_id</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>skipclient</name><index>[<expr><name>clientID</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Loop over clients to generate output to be sent to the client</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>clientID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>clientID</name> <operator>&lt;</operator> <name><name>counters</name><operator>-&gt;</operator><name>clients</name></name></expr>;</condition> <incr><expr><name>clientID</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>skipclient</name><index>[<expr><name>clientID</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// Get client pointer</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>clientsData</name><modifier>*</modifier></type> <name>client</name> <init>= <expr><call><name>getClient</name><argument_list>(<argument><expr><name>clientID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// Skip invalid clients and also those managed by alias clients</comment>
		<if_stmt><if>if<condition>(<expr><name>client</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>client</name><operator>-&gt;</operator><name>aliasclient_id</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<comment type="line">// Skip clients with no active counts at all (may be old IPv6 addresses)</comment>
		<if_stmt><if>if<condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>client_ip</name> <init>= <expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>ippos</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>client_name</name> <init>= <expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>namepos</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if<condition>(<expr><name>istelnet</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ssend</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"%s %s\n"</literal></expr></argument>, <argument><expr><name>client_name</name></expr></argument>, <argument><expr><name>client_ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name>pack_str32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>client_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pack_str32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>client_ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if<condition>(<expr><name>excludeclients</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>clearSetupVarsArray</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>getUnknownQueries</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>istelnet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Exit before processing any data if requested via config setting</comment>
	<expr_stmt><expr><call><name>get_privacy_level</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>privacylevel</name></name> <operator>&gt;=</operator> <name>PRIVACY_HIDE_DOMAINS</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>queryID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>queryID</name> <operator>&lt;</operator> <name><name>counters</name><operator>-&gt;</operator><name>queries</name></name></expr>;</condition> <incr><expr><name>queryID</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>queriesData</name><modifier>*</modifier></type> <name>query</name> <init>= <expr><call><name>getQuery</name><argument_list>(<argument><expr><name>queryID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if<condition>(<expr><name>query</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
		  <operator>(</operator><name><name>query</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>QUERY_UNKNOWN</name> <operator>&amp;&amp;</operator> <name><name>query</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>complete</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<decl_stmt><decl><type><name>char</name></type> <name><name>type</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TYPE_A</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>type</name></expr></argument>,<argument><expr><literal type="string">"IPv4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>type</name></expr></argument>,<argument><expr><literal type="string">"IPv6"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="line">// Get domain pointer</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>domainsData</name><modifier>*</modifier></type> <name>domain</name> <init>= <expr><call><name>getDomain</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>domainID</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// Get client pointer</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>clientsData</name><modifier>*</modifier></type> <name>client</name> <init>= <expr><call><name>getClient</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>clientID</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if<condition>(<expr><name>domain</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>client</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// Get client IP string</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>clientIP</name> <init>= <expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>ippos</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if<condition>(<expr><name>istelnet</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ssend</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"%lli %i %i %s %s %s %i %s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name><name>query</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>, <argument><expr><name>queryID</name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>domain</name><operator>-&gt;</operator><name>domainpos</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>clientIP</name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>query</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>complete</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name>pack_int32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>query</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pack_int32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// Use a fixstr because the length of qtype is always 4 (max is 31 for fixstr)</comment>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>pack_fixstr</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return;</return></block_content></block></if></if_stmt>

			<comment type="line">// Use str32 for domain and client because we have no idea how long they will be (max is 4294967295 for str32)</comment>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>pack_str32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>domain</name><operator>-&gt;</operator><name>domainpos</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>pack_str32</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>clientIP</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>pack_uint8</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pack_bool</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>complete</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// FTL_unlink_DHCP_lease()</comment>
<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>FTL_unlink_DHCP_lease</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ipaddr</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>delete_lease</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>client_message</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Extract IP address from request</comment>
	<decl_stmt><decl><type><name>char</name></type> <name><name>ipaddr</name><index>[<expr><name>INET6_ADDRSTRLEN</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"&gt;delete-lease %"</literal><call><name>xstr</name><argument_list>(<argument><expr><name>INET6_ADDRSTRLEN</name></expr></argument>)</argument_list></call><literal type="string">"s"</literal></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ssend</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"ERROR: No IP address specified!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>ipaddr</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>ipaddr</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_API</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Received request to delete lease for %s"</literal></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>FTL_unlink_DHCP_lease</name><argument_list>(<argument><expr><name>ipaddr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ssend</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"OK: Removed specified lease\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ssend</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Specified IP address invalid!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_API</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"...done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>getDNSport</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Return DNS port used by FTL</comment>
	<expr_stmt><expr><call><name>ssend</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>dns_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>getMAXLOGAGE</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Return maxlogage used by FTL</comment>
	<expr_stmt><expr><call><name>ssend</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>maxlogage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>getDefaultInterface</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name><name>iface</name><index>[<expr><name>IF_NAMESIZE</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>in_addr_t</name> <modifier>*</modifier></type><name>gw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Get IPv4 default route gateway and associated interface</comment>
	<decl_stmt><decl><type><name>long</name></type> <name>dest_r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>gw_r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>metric</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>minmetric</name> <init>= <expr><name>__INT_MAX__</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>iface_r</name><index>[<expr><name>IF_NAMESIZE</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>file</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"/proc/net/route"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Parse /proc/net/route - the kernel's IPv4 routing table</comment>
		<while>while<condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s %lx %lx %x %*i %*i %i"</literal></expr></argument>, <argument><expr><name>iface_r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dest_r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gw_r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>metric</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<comment type="line">// Only analyze routes which are UP and whose</comment>
			<comment type="line">// destinations are a gateway</comment>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>RTF_UP</name><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>RTF_GATEWAY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<comment type="line">// Only analyze "catch all" routes (destination 0.0.0.0)</comment>
			<if_stmt><if>if<condition>(<expr><name>dest_r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<comment type="line">// Store default gateway, overwrite if we find a route with</comment>
			<comment type="line">// a lower metric</comment>
			<if_stmt><if>if<condition>(<expr><name>metric</name> <operator>&lt;</operator> <name>minmetric</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>minmetric</name> <operator>=</operator> <name>metric</name></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>gw</name> <operator>=</operator> <name>gw_r</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>iface</name></expr></argument>, <argument><expr><name>iface_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_API</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Reading interfaces: flags: %i, addr: %s, iface: %s, metric: %i, minmetric: %i"</literal></expr></argument>,
					     <argument><expr><name>flags</name></expr></argument>, <argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator>struct <name>in_addr</name> <operator>*</operator><operator>)</operator> <name>gw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>iface</name></expr></argument>, <argument><expr><name>metric</name></expr></argument>, <argument><expr><name>minmetric</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Cannot read /proc/net/route: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="line">// Return success based on having found the default gateway's address</comment>
	<return>return <expr><name>gw</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>getGateway</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>in_addr_t</name></type> <name>gw</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>iface</name><index>[<expr><name>IF_NAMESIZE</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>getDefaultInterface</name><argument_list>(<argument><expr><name>iface</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ssend</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"%s %s\n"</literal></expr></argument>, <argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator>struct <name>in_addr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>gw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>iface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>if_info</name> <block>{
	<decl_stmt><decl><type><name>bool</name></type> <name>carrier</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>default_iface</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
	<struct>struct <block>{
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>v4</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>v6</name></decl>;</decl_stmt>
	}</block> <decl><name>ip</name></decl>;</struct>
	<decl_stmt><decl><type><name>int</name></type> <name>speed</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>rx_bytes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>tx_bytes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sa_family_t</name></type> <name>family</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>if_info</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dirent.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>listInterfaces</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>if_info</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>head</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name><name>default_iface</name><index>[<expr><name>IF_NAMESIZE</name></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Loop over interfaces and extract information</comment>
	<decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dfd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>if_info</name></name> <modifier>*</modifier></type><name>tail</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>tx_sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>rx_sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>fname</name><index>[<expr><literal type="number">64</literal> <operator>+</operator> <name>IF_NAMESIZE</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>readbuffer</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

	<comment type="line">// Open /sys/class/net directory</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dfd</name> <operator>=</operator> <call><name>opendir</name><argument_list>(<argument><expr><literal type="string">"/sys/class/net"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"API: Cannot access /sys/class/net"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Get IP addresses of all interfaces on this machine</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>ifaddrs</name></name> <modifier>*</modifier></type><name>ifap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>getifaddrs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ifap</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"API error: Cannot get interface addresses: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Walk /sys/class/net directory</comment>
	<while>while <condition>(<expr><operator>(</operator><name>dp</name> <operator>=</operator> <call><name>readdir</name><argument_list>(<argument><expr><name>dfd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Skip "." and ".."</comment>
		<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>dp</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>dp</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// Create new interface record</comment>
		<decl_stmt><decl><type><name><name>struct</name> <name>if_info</name></name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>if_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>dp</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>default_iface</name></name> <operator>=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>default_iface</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<comment type="line">// Extract carrier status</comment>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"/sys/class/net/%s/carrier"</literal></expr></argument>, <argument><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>readbuffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>readbuffer</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>carrier</name></name> <operator>=</operator> <name><name>readbuffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Cannot read %s: %s"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<comment type="line">// Extract link speed (may not be possible, e.g., for WiFi devices with dynamic link speeds)</comment>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"/sys/class/net/%s/speed"</literal></expr></argument>, <argument><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><call><name>fscanf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%i"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>speed</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>speed</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Cannot read %s: %s"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<comment type="line">// Get total transmitted bytes</comment>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"/sys/class/net/%s/statistics/tx_bytes"</literal></expr></argument>, <argument><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><call><name>fscanf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%zi"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>tx_bytes</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>tx_bytes</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Cannot read %s: %s"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<comment type="line">// Get total transmitted bytes</comment>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"/sys/class/net/%s/statistics/rx_bytes"</literal></expr></argument>, <argument><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><call><name>fscanf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%zi"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>rx_bytes</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>rx_bytes</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Cannot read %s: %s"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<comment type="line">// Get IP address(es) of this interface</comment>
		<if_stmt><if>if<condition>(<expr><name>ifap</name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Walk through linked list of interface addresses</comment>

			<for>for<control>(<init><decl><type><name><name>struct</name> <name>ifaddrs</name></name> <modifier>*</modifier><name>ifa</name></type> <init>= <expr><name>ifap</name></expr></init></decl>;</init> <condition><expr><name>ifa</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ifa</name> <operator>=</operator> <name><name>ifa</name><operator>-&gt;</operator><name>ifa_next</name></name></expr></incr>)</control>
			<block>{<block_content>
				<comment type="line">// Skip interfaces without an address and those</comment>
				<comment type="line">// not matching the current interface</comment>
				<if_stmt><if>if<condition>(<expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_addr</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_name</name></name></expr></argument>, <argument><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<continue>continue;</continue></block_content></block></if></if_stmt>

				<comment type="line">// If we reach this point, we found the correct interface</comment>
				<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name><name>ifa</name><operator>-&gt;</operator><name>ifa_addr</name><operator>-&gt;</operator><name>sa_family</name></name></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>char</name></type> <name><name>host</name><index>[<expr><name>NI_MAXHOST</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if<condition>(<expr><name><name>new</name><operator>-&gt;</operator><name>family</name></name> <operator>==</operator> <name>AF_INET</name> <operator>||</operator> <name><name>new</name><operator>-&gt;</operator><name>family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition>
				<block>{<block_content>
					<comment type="line">// Get IP address</comment>
					<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>s</name> <init>= <expr><call><name>getnameinfo</name><argument_list>(<argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_addr</name></name></expr></argument>,
					                          <argument><expr><ternary><condition><expr><operator>(</operator><name><name>new</name><operator>-&gt;</operator><name>family</name></name> <operator>==</operator> <name>AF_INET</name><operator>)</operator></expr> ?</condition><then>
					                               <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr> </then><else>:
					                               <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr></else></ternary></expr></argument>,
					                          <argument><expr><name>host</name></expr></argument>, <argument><expr><name>NI_MAXHOST</name></expr></argument>,
					                          <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NI_NUMERICHOST</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"API warning: getnameinfo() failed: %s\n"</literal></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<continue>continue;</continue>
					</block_content>}</block></if></if_stmt>

					<if_stmt><if>if<condition>(<expr><name><name>new</name><operator>-&gt;</operator><name>family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition>
					<block>{<block_content>
						<comment type="line">// IPv4 address</comment>
						<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>new</name><operator>-&gt;</operator><name>ip</name><operator>.</operator><name>v4</name></name></expr>)</condition>
						<block>{<block_content>
							<comment type="line">// First or only IPv4 address of this interface</comment>
							<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>ip</name><operator>.</operator><name>v4</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></if>
						<else>else
						<block>{<block_content>
							<comment type="line">// Create comma-separated list</comment>
							<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_v4</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>ip</name><operator>.</operator><name>v4</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>new_v4</name></expr></argument>, <argument><expr><literal type="string">"%s,%s"</literal></expr></argument>, <argument><expr><name><name>new</name><operator>-&gt;</operator><name>ip</name><operator>.</operator><name>v4</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>ip</name><operator>.</operator><name>v4</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>ip</name><operator>.</operator><name>v4</name></name> <operator>=</operator> <name>new_v4</name></expr>;</expr_stmt>
						</block_content>}</block></else></if_stmt>
					</block_content>}</block></if>
					<if type="elseif">else if<condition>(<expr><name><name>new</name><operator>-&gt;</operator><name>family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition>
					<block>{<block_content>
						<comment type="line">// IPv6 address</comment>
						<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>new</name><operator>-&gt;</operator><name>ip</name><operator>.</operator><name>v6</name></name></expr>)</condition>
						<block>{<block_content>
							<comment type="line">// First or only IPv6 address of this interface</comment>
							<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>ip</name><operator>.</operator><name>v6</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></if>
						<else>else
						<block>{<block_content>
							<comment type="line">// Create comma-separated list</comment>
							<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_v6</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>ip</name><operator>.</operator><name>v6</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>new_v6</name></expr></argument>, <argument><expr><literal type="string">"%s,%s"</literal></expr></argument>, <argument><expr><name><name>new</name><operator>-&gt;</operator><name>ip</name><operator>.</operator><name>v6</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>ip</name><operator>.</operator><name>v6</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>ip</name><operator>.</operator><name>v6</name></name> <operator>=</operator> <name>new_v6</name></expr>;</expr_stmt>
						</block_content>}</block></else></if_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Add to end of the linked list</comment>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>head</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>head</name> <operator>=</operator> <name>new</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if<condition>(<expr><name>tail</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>tail</name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>tx_sum</name> <operator>+=</operator> <name><name>new</name><operator>-&gt;</operator><name>tx_bytes</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>rx_sum</name> <operator>+=</operator> <name><name>new</name><operator>-&gt;</operator><name>rx_bytes</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>closedir</name><argument_list>(<argument><expr><name>dfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>freeifaddrs</name><argument_list>(<argument><expr><name>ifap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Create sum entry only if there is more than one interface</comment>
	<if_stmt><if>if<condition>(<expr><name>head</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name><name>struct</name> <name>if_info</name></name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>if_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"sum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>carrier</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>speed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>tx_bytes</name></name> <operator>=</operator> <name>tx_sum</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>rx_bytes</name></name> <operator>=</operator> <name>rx_sum</name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>tail</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>tail</name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>send_iface</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>if_info</name></name> <modifier>*</modifier></type><name>iface</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>double</name></type> <name>tx</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>, <decl><type ref="prev"/><name>rx</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>txp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name><name>rxp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>format_memory_size</name><argument_list>(<argument><expr><name>txp</name></expr></argument>, <argument><expr><name><name>iface</name><operator>-&gt;</operator><name>tx_bytes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>format_memory_size</name><argument_list>(<argument><expr><name>rxp</name></expr></argument>, <argument><expr><name><name>iface</name><operator>-&gt;</operator><name>rx_bytes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>ssend</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"%s %s %i %.1f%sB %.1f%sB %s %s\n"</literal></expr></argument>,
	             <argument><expr><name><name>iface</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
	             <argument><expr><ternary><condition><expr><name><name>iface</name><operator>-&gt;</operator><name>carrier</name></name></expr> ?</condition><then> <expr><literal type="string">"UP"</literal></expr> </then><else>: <expr><literal type="string">"DOWN"</literal></expr></else></ternary></expr></argument>,
	             <argument><expr><name><name>iface</name><operator>-&gt;</operator><name>speed</name></name></expr></argument>,
	             <argument><expr><name>tx</name></expr></argument>, <argument><expr><name>txp</name></expr></argument>, <argument><expr><name>rx</name></expr></argument>, <argument><expr><name>rxp</name></expr></argument>,
	             <argument><expr><ternary><condition><expr><name><name>iface</name><operator>-&gt;</operator><name>carrier</name></name> <operator>&amp;&amp;</operator> <name><name>iface</name><operator>-&gt;</operator><name>ip</name><operator>.</operator><name>v4</name></name></expr> ?</condition><then> <expr><name><name>iface</name><operator>-&gt;</operator><name>ip</name><operator>.</operator><name>v4</name></name></expr> </then><else>: <expr><literal type="string">"-"</literal></expr></else></ternary></expr></argument>,
	             <argument><expr><ternary><condition><expr><name><name>iface</name><operator>-&gt;</operator><name>carrier</name></name> <operator>&amp;&amp;</operator> <name><name>iface</name><operator>-&gt;</operator><name>ip</name><operator>.</operator><name>v6</name></name></expr> ?</condition><then> <expr><name><name>iface</name><operator>-&gt;</operator><name>ip</name><operator>.</operator><name>v6</name></name></expr> </then><else>: <expr><literal type="string">"-"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>getInterfaces</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Get interface with default route</comment>
	<decl_stmt><decl><type><name>in_addr_t</name></type> <name>gw</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>default_iface</name><index>[<expr><name>IF_NAMESIZE</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>getDefaultInterface</name><argument_list>(<argument><expr><name>default_iface</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Enumerate and list interfaces</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>if_info</name></name> <modifier>*</modifier></type><name>ifinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>listInterfaces</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ifinfo</name></expr></argument>, <argument><expr><name>default_iface</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ssend</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"ERROR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Loop over collected interface information</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>if_info</name></name> <modifier>*</modifier></type><name>iface</name> <init>= <expr><name>ifinfo</name></expr></init></decl>;</decl_stmt>
	<comment type="line">// Show only the default interface as first interface</comment>
	<while>while<condition>(<expr><name>iface</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>iface</name><operator>-&gt;</operator><name>default_iface</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>send_iface</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>iface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>iface</name> <operator>=</operator> <name><name>iface</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name>iface</name> <operator>=</operator> <name>ifinfo</name></expr>;</expr_stmt>
	<comment type="line">// Show all but the default interface</comment>
	<while>while<condition>(<expr><name>iface</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>iface</name><operator>-&gt;</operator><name>default_iface</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>send_iface</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>iface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="line">// Free associated memory</comment>
		<decl_stmt><decl><type><name><name>struct</name> <name>if_info</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>iface</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>iface</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>iface</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>iface</name><operator>-&gt;</operator><name>ip</name><operator>.</operator><name>v4</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>iface</name><operator>-&gt;</operator><name>ip</name><operator>.</operator><name>v4</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>iface</name><operator>-&gt;</operator><name>ip</name><operator>.</operator><name>v6</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>iface</name><operator>-&gt;</operator><name>ip</name><operator>.</operator><name>v6</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>iface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>iface</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function></unit>
