<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/api/msgpack.c"><comment type="block">/* Pi-hole: A black hole for Internet advertisements
*  (c) 2017 Pi-hole, LLC (https://pi-hole.net)
*  Network-wide ad blocking via your own hardware.
*
*  FTL Engine
*  MessagePack serialization
*
*  This file is copyright under the latest version of the EUPL.
*  Please see LICENSE file for your rights under this license. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FTL.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"api.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"socket.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>pack_eom</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sock</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// This byte is explicitly never used in the MessagePack spec, so it is perfect to use as an EOM for this API.</comment>
	<decl_stmt><decl><type><name>uint8_t</name></type> <name>eom</name> <init>= <expr><literal type="number">0xc1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eom</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>eom</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pack_basic</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>format</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>leToBe64</name><argument_list>(<argument><expr><specifier>const</specifier> <name>uint64_t</name> <name>value</name></expr></argument>)</argument_list> <block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>value</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>part1</name></decl>, <decl><type ref="prev"/><name>part2</name></decl>;</decl_stmt>

	<comment type="line">// Copy the two halves of the 64 bit input into uint32_t's so we can use htonl</comment>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>part1</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>part2</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Flip each half around</comment>
	<expr_stmt><expr><name>part1</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>part1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>part2</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>part2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Arrange them to form the big-endian version of the original input</comment>
	<return>return <expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>part1</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>|</operator> <name>part2</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>pack_bool</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint8_t</name></type> <name>packed</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><literal type="number">0xc3</literal></expr> </then><else>: <expr><literal type="number">0xc2</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packed</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>packed</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>pack_uint8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>pack_basic</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="number">0xcc</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>pack_uint64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>bigEValue</name> <init>= <expr><call><name>leToBe64</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>pack_basic</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="number">0xcf</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bigEValue</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bigEValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>pack_int32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>bigEValue</name> <init>= <expr><call><name>htonl</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>pack_basic</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="number">0xd2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bigEValue</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bigEValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>pack_int64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// Need to use memcpy to do a direct copy without reinterpreting the bytes (making negatives into positives).</comment>
	<comment type="line">// It should get optimized away.</comment>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>bigEValue</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bigEValue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bigEValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>bigEValue</name> <operator>=</operator> <call><name>leToBe64</name><argument_list>(<argument><expr><name>bigEValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pack_basic</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="number">0xd3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bigEValue</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bigEValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>pack_float</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// Need to use memcpy to do a direct copy without reinterpreting the bytes. It should get optimized away.</comment>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>bigEValue</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bigEValue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bigEValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>bigEValue</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>bigEValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pack_basic</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="number">0xca</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bigEValue</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bigEValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Return true if successful</comment>
<function><type><name>bool</name></type> <name>pack_fixstr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// Make sure that the length is less than 32</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>length</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>length</name> <operator>&gt;=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Tried to send a fixstr longer than 31 bytes!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>format</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator><literal type="number">0xA0</literal> <operator>|</operator> <name>length</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>format</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Return true if successful</comment>
<function><type><name>bool</name></type> <name>pack_str32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// Make sure that the length is less than 4294967296</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>length</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>length</name> <operator>&gt;=</operator> <literal type="number">2147483648u</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Tried to send a str32 longer than 2147483647 bytes!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>format</name> <init>= <expr><literal type="number">0xdb</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>format</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>bigELength</name> <init>= <expr><call><name>htonl</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bigELength</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bigELength</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>pack_map16_start</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>format</name> <init>= <expr><literal type="number">0xde</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>format</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>bigELength</name> <init>= <expr><call><name>htons</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bigELength</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bigELength</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
