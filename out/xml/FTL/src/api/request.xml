<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/api/request.c"><comment type="block">/* Pi-hole: A black hole for Internet advertisements
*  (c) 2017 Pi-hole, LLC (https://pi-hole.net)
*  Network-wide ad blocking via your own hardware.
*
*  FTL Engine
*  Socket request handling routines
*
*  This file is copyright under the latest version of the EUPL.
*  Please see LICENSE file for your rights under this license. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../FTL.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"api.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../shmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../timers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"socket.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../resolve.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../regex_r.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../database/network-table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../log.h"</cpp:file></cpp:include>
<comment type="line">// Eventqueue routines</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../events.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../config.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>bool</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>command</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>client_message</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>cmd</name></expr></argument>)</argument_list> <block>{<block_content>
	<return>return <expr><call><name>strstr</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>bool</name></type> <name>process_request</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>client_message</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>istelnet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>EOT</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>EOT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x04</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>EOT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>processed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>command</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"&gt;stats"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>processed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>lock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>getStats</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>istelnet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>unlock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><call><name>command</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"&gt;overTime"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>processed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>lock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>getOverTime</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>istelnet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>unlock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><call><name>command</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"&gt;top-domains"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>command</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"&gt;top-ads"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>processed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>lock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>getTopDomains</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><name>istelnet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>unlock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><call><name>command</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"&gt;top-clients"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>processed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>lock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>getTopClients</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><name>istelnet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>unlock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><call><name>command</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"&gt;forward-dest"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>processed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>lock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>getUpstreamDestinations</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><name>istelnet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>unlock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><call><name>command</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"&gt;forward-names"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>processed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>lock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>getUpstreamDestinations</name><argument_list>(<argument><expr><literal type="string">"&gt;forward-dest unsorted"</literal></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><name>istelnet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>unlock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><call><name>command</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"&gt;querytypes"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>processed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>lock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>getQueryTypes</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>istelnet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>unlock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><call><name>command</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"&gt;getallqueries"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>processed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>lock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>getAllQueries</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><name>istelnet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>unlock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><call><name>command</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"&gt;recentBlocked"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>processed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>lock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>getRecentBlocked</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><name>istelnet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>unlock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><call><name>command</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"&gt;clientID"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>processed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>lock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>getClientID</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>istelnet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>unlock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><call><name>command</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"&gt;version"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>processed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<comment type="line">// No lock required</comment>
		<expr_stmt><expr><call><name>getVersion</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>istelnet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><call><name>command</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"&gt;dbstats"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>processed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<comment type="line">// No lock required. Access to the database</comment>
		<comment type="line">// is guaranteed to be atomic</comment>
		<expr_stmt><expr><call><name>getDBstats</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>istelnet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><call><name>command</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"&gt;ClientsoverTime"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>processed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>lock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>getClientsOverTime</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>istelnet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>unlock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><call><name>command</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"&gt;client-names"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>processed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>lock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>getClientNames</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>istelnet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>unlock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><call><name>command</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"&gt;unknown"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>processed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>lock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>getUnknownQueries</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>istelnet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>unlock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><call><name>command</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"&gt;cacheinfo"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>processed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>lock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>getCacheInformation</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>unlock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><call><name>command</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"&gt;reresolve"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>processed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Received API request to re-resolve host names"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>set_event</name><argument_list>(<argument><expr><name>RELOAD_PRIVACY_LEVEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><call><name>command</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"&gt;recompile-regex"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>processed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Received API request to recompile regex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>lock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Reread regex.list</comment>
		<comment type="line">// Read and compile possible regex filters</comment>
		<expr_stmt><expr><call><name>read_regex_from_database</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>unlock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><call><name>command</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"&gt;delete-lease"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>processed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>delete_lease</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><call><name>command</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"&gt;dns-port"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>processed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>getDNSport</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><call><name>command</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"&gt;maxlogage"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>processed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>getMAXLOGAGE</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><call><name>command</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"&gt;gateway"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>processed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>getGateway</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><call><name>command</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"&gt;interfaces"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>processed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>getInterfaces</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Test only at the end if we want to quit or kill</comment>
	<comment type="line">// so things can be processed before</comment>
	<if_stmt><if>if<condition>(<expr><call><name>command</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="string">"&gt;quit"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>command</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><name>EOT</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_API</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Received &gt;quit or EOT on socket %d"</literal></expr></argument>, <argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>processed</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ssend</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"unknown command: %s\n"</literal></expr></argument>, <argument><expr><name>client_message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// End of queryable commands: Send EOM</comment>
	<expr_stmt><expr><call><name>seom</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>istelnet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
</unit>
