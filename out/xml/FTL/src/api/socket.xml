<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/api/socket.c"><comment type="block">/* Pi-hole: A black hole for Internet advertisements
*  (c) 2017 Pi-hole, LLC (https://pi-hole.net)
*  Network-wide ad blocking via your own hardware.
*
*  FTL Engine
*  Socket connection routines
*
*  This file is copyright under the latest version of the EUPL.
*  Please see LICENSE file for your rights under this license. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FTL.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"api.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"socket.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../config.h"</cpp:file></cpp:include>
<comment type="line">// sleepms()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../timers.h"</cpp:file></cpp:include>
<comment type="line">// global variable killed</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../signals.h"</cpp:file></cpp:include>
<comment type="line">// API thread storage</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../daemon.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../shmem.h"</cpp:file></cpp:include>

<comment type="line">// The backlog argument defines the maximum length</comment>
<comment type="line">// to which the queue of pending connections for</comment>
<comment type="line">// telnetfd may grow. If a connection request arrives</comment>
<comment type="line">// when the queue is full, the client may receive an</comment>
<comment type="line">// error with an indication of ECONNREFUSED or, if</comment>
<comment type="line">// the underlying protocol supports retransmission,</comment>
<comment type="line">// the request may be ignored so that a later</comment>
<comment type="line">// reattempt at connection succeeds.</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BACKLOG</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bind_to_telnet_socket</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>telnet_type</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>socketdescriptor</name> <init>= <expr><call><name>socket</name><argument_list>(<argument><expr><ternary><condition><expr><name>type</name> <operator>==</operator> <name>TELNET_SOCK</name></expr> ?</condition><then> <expr><name>AF_LOCAL</name></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>type</name> <operator>==</operator> <name>TELNETv4</name></expr> ?</condition><then> <expr><name>AF_INET</name></expr> </then><else>: <expr><name>AF_INET6</name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>socketdescriptor</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Error opening %s telnet socket: %s (%i)"</literal></expr></argument>, <argument><expr><name>stype</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>addrlen</name> <init>= <expr><call><name>MAX</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_un</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>MAX</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>address</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>type</name> <operator>==</operator> <name>TELNETv4</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>TELNETv6</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Set SO_REUSEADDR to allow re-binding to the port that has been used</comment>
		<comment type="line">// previously by FTL. A common pattern is that you change FTL's</comment>
		<comment type="line">// configuration file and need to restart that server to make it reload</comment>
		<comment type="line">// its configuration. Without SO_REUSEADDR, the bind() call in the restarted</comment>
		<comment type="line">// new instance will fail if there were connections open to the previous</comment>
		<comment type="line">// instance when you killed it. Those connections will hold the TCP port in</comment>
		<comment type="line">// the TIME_WAIT state for 30-120 seconds, so you fall into case 1 above.</comment>
		<if_stmt><if>if<condition>(<expr><macro><name>setsockopt</name><argument_list>(<argument>socketdescriptor</argument>, <argument>SOL_SOCKET</argument>, <argument>SO_REUSEADDR</argument>, <argument>&amp;(int){ <literal type="number">1</literal> }</argument>, <argument>sizeof(int)</argument>)</argument_list></macro> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"WARN: allowing re-binding (%s) failed: %s"</literal></expr></argument>, <argument><expr><name>stype</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><name>type</name> <operator>==</operator> <name>TELNETv6</name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// If this flag is set to true (nonzero), then the  socket  is  reâ</comment>
			<comment type="line">// stricted  to  sending  and receiving IPv6 packets only.  In this</comment>
			<comment type="line">// case, an IPv4 and an IPv6 application can bind to a single  port</comment>
			<comment type="line">// at the same time.</comment>
			<if_stmt><if>if<condition>(<expr><macro><name>setsockopt</name><argument_list>(<argument>socketdescriptor</argument>, <argument>IPPROTO_IPV6</argument>, <argument>IPV6_V6ONLY</argument>, <argument>&amp;(int){ <literal type="number">1</literal> }</argument>, <argument>sizeof(int)</argument>)</argument_list></macro> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"WARN: setting socket to IPv6-only failed: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>socket_listenlocal</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name><operator>*</operator><operator>)</operator> <name>address</name><operator>)</operator><operator>-&gt;</operator><name>sin6_addr</name> <operator>=</operator> <name>in6addr_loopback</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name><operator>*</operator><operator>)</operator> <name>address</name><operator>)</operator><operator>-&gt;</operator><name>sin6_addr</name> <operator>=</operator> <name>in6addr_any</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<comment type="line">// The bind() system call binds a socket to an address,</comment>
			<comment type="line">// in this case the address of the current host and</comment>
			<comment type="line">// port number on which the server will run.</comment>
			<comment type="line">// convert this to network byte order using the function htons()</comment>
			<comment type="line">// which converts a port number in host byte order to a port number</comment>
			<comment type="line">// in network byte order</comment>

			<comment type="line">// Bind to IPv6 socket</comment>
			<expr_stmt><expr><operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name><operator>*</operator><operator>)</operator> <name>address</name><operator>)</operator><operator>-&gt;</operator><name>sin6_family</name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name><operator>*</operator><operator>)</operator> <name>address</name><operator>)</operator><operator>-&gt;</operator><name>sin6_port</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <comment type="line">// IPv4</comment>
		<block>{<block_content>

			<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>socket_listenlocal</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name><operator>*</operator><operator>)</operator> <name>address</name><operator>)</operator><operator>-&gt;</operator><name><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>INADDR_LOOPBACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name><operator>*</operator><operator>)</operator> <name>address</name><operator>)</operator><operator>-&gt;</operator><name><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name>INADDR_ANY</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<comment type="line">// Bind to IPv4 port</comment>
			<expr_stmt><expr><operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name><operator>*</operator><operator>)</operator> <name>address</name><operator>)</operator><operator>-&gt;</operator><name>sin_family</name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name><operator>*</operator><operator>)</operator> <name>address</name><operator>)</operator><operator>-&gt;</operator><name>sin_port</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<else>else <comment type="line">// socket</comment>
	<block>{<block_content>
		<comment type="line">// Make sure unix socket file handle does not exist, if it exists, remove it</comment>
		<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name><name>FTLfiles</name><operator>.</operator><name>socketfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><operator>(</operator><operator>(</operator>struct <name>sockaddr_un</name><operator>*</operator><operator>)</operator> <name>address</name><operator>)</operator><operator>-&gt;</operator><name>sun_family</name> <operator>=</operator> <name>AF_LOCAL</name></expr>;</expr_stmt>
		<comment type="line">// The sockaddr_un.sum_path may be shorter than the size of the FTLfiles.socketfile</comment>
		<comment type="line">// buffer. Ensure that the string is null-terminated even when the string is too large.</comment>
		<comment type="line">// In case strlen(FTLfiles.socketfile) &lt; sizeof(address.sun_path) [this will virtually</comment>
		<comment type="line">// always be the case], the explicit setting of the last byte to zero is a no-op as</comment>
		<comment type="line">// strncpy() writes additional null bytes to ensure that a total of n bytes are written.</comment>
		<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator>struct <name>sockaddr_un</name><operator>*</operator><operator>)</operator> <name>address</name><operator>)</operator><operator>-&gt;</operator><name>sun_path</name></expr></argument>, <argument><expr><name><name>FTLfiles</name><operator>.</operator><name>socketfile</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>(</operator><operator>(</operator>struct <name>sockaddr_un</name><operator>*</operator><operator>)</operator> <name>address</name><operator>)</operator><operator>-&gt;</operator><name>sun_path</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><operator>(</operator>struct <name>sockaddr_un</name><operator>*</operator><operator>)</operator> <name>address</name><operator>)</operator><operator>-&gt;</operator><name><name>sun_path</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><operator>(</operator><operator>(</operator></expr></argument></argument_list></sizeof></expr></index></name>struct <name>sockaddr_un</name><operator>*</operator></expr></expr_stmt>)</block_content> address</block></else></if_stmt>)</block_content>-&gt;sun_path</block></function>)<expr_stmt><expr><operator>-</operator><literal type="number">1</literal>] <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	}

	<comment type="line">// Bind to socket</comment>
	if<expr_stmt><expr><operator>(</operator><call><name>bind</name><argument_list>(<argument><expr><name>socketdescriptor</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <name>address</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator>
	<block>{
		<expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Error binding to %s telnet socket: %s (%i)"</literal></expr></argument>, <argument><expr><name>stype</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	}</block></expr></expr_stmt>

	<comment type="line">// The listen system call allows the process to listen on the socket for connections</comment>
	<if_stmt><if>if<condition>(<expr><call><name>listen</name><argument_list>(<argument><expr><name>socketdescriptor</name></expr></argument>, <argument><expr><name>BACKLOG</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Error listening on %s telnet socket: %s (%i)"</literal></expr></argument>, <argument><expr><name>stype</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Listening on port %i for incoming %s telnet connections"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>port</name></name></expr></argument>, <argument><expr><name>stype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>socketdescriptor</name></expr>;</return>
}

static <function><type><name>void</name> <modifier>*</modifier></type><name>telnet_connection_handler_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>thread_info</name></name> <modifier>*</modifier></type><name>tinfo</name> <init>= <expr><name>args</name></expr></init></decl>;</decl_stmt>
	<comment type="line">// Set thread name</comment>
	<decl_stmt><decl><type><name>char</name></type> <name><name>threadname</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>threadname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>threadname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"telnet-%s-%i"</literal></expr></argument>, <argument><expr><name><name>tinfo</name><operator>-&gt;</operator><name>stype</name></name></expr></argument>, <argument><expr><name><name>tinfo</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>prctl</name><argument_list>(<argument><expr><name>PR_SET_NAME</name></expr></argument>, <argument><expr><name>threadname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Ensure this thread can be canceled at any time (not only at</comment>
	<comment type="line">// cancellation points)</comment>
	<expr_stmt><expr><call><name>pthread_setcanceltype</name><argument_list>(<argument><expr><name>PTHREAD_CANCEL_ASYNCHRONOUS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_API</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Started telnet thread %s"</literal></expr></argument>, <argument><expr><name>threadname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Listen as long as this thread is not canceled</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>errors</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><operator>!</operator><name>killed</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Look for new clients that want to connect</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>csck</name> <init>= <expr><call><name>accept</name><argument_list>(<argument><expr><name><name>tinfo</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>csck</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Telnet error in %s: %s (%i, fd: %d)"</literal></expr></argument>, <argument><expr><name>threadname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name><name>tinfo</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>errors</name><operator>++</operator> <operator>&gt;</operator> <literal type="number">20</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>sleepms</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Define buffer for client's message</comment>
		<decl_stmt><decl><type><name>char</name></type> <name><name>client_message</name><index>[<expr><name>SOCKETBUFFERLEN</name></expr>]</index></name> <init>=<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

		<comment type="line">// Receive from client</comment>
		<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name></decl>;</decl_stmt>
		<while>while<condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>recv</name><argument_list>(<argument><expr><name>csck</name></expr></argument>, <argument><expr><name>client_message</name></expr></argument>, <argument><expr><name>SOCKETBUFFERLEN</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;</operator> <name>SOCKETBUFFERLEN</name></expr>)</condition>
			<block>{<block_content>
				<comment type="line">// Null-terminate client string</comment>
				<expr_stmt><expr><name><name>client_message</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>message</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if<condition>(<expr><name>message</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_API</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Break in telnet thread for socket %d/%d: Memory error"</literal></expr></argument>, <argument><expr><name><name>tinfo</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>csck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>

				<comment type="line">// Clear client message receive buffer</comment>
				<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>client_message</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>client_message</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="line">// Process received message</comment>
				<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>eom</name> <init>= <expr><call><name>process_request</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>csck</name></expr></argument>, <argument><expr><name><name>tinfo</name><operator>-&gt;</operator><name>istelnet</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if<condition>(<expr><name>eom</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if<condition>(<expr><name>n</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_API</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Break in telnet thread for socket %d/%d: No data received"</literal></expr></argument>, <argument><expr><name><name>tinfo</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>csck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></while>

		<comment type="line">// Close client socket</comment>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>csck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_API</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Terminating telnet thread %s (%d errors)"</literal></expr></argument>, <argument><expr><name>threadname</name></expr></argument>, <argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Free thread-private memory</comment>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>listen_telnet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>telnet_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// We will use the attributes object later to start all threads in detached mode</comment>
	<decl_stmt><decl><type><name>pthread_attr_t</name></type> <name>attr</name></decl>;</decl_stmt>
	<comment type="line">// Initialize thread attributes object with default attribute values</comment>
	<expr_stmt><expr><call><name>pthread_attr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// When a detached thread terminates, its resources are automatically released back to</comment>
	<comment type="line">// the system without the need for another thread to join with the terminated thread</comment>
	<expr_stmt><expr><call><name>pthread_attr_setdetachstate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>PTHREAD_CREATE_DETACHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Initialize telnet socket</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stype</name> <init>= <expr><ternary><condition><expr><name>type</name> <operator>==</operator> <name>TELNET_SOCK</name></expr> ?</condition><then> <expr><literal type="string">"socket"</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>type</name> <operator>==</operator> <name>TELNETv4</name></expr> ?</condition><then> <expr><literal type="string">"IPv4"</literal></expr> </then><else>: <expr><literal type="string">"IPv6"</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>fd</name> <init>= <expr><call><name>bind_to_telnet_socket</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>stype</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"WARN: Cannot bind to %s telnet socket"</literal></expr></argument>, <argument><expr><name>stype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_API</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Telnet-%s listener accepting on fd %d"</literal></expr></argument>, <argument><expr><name>stype</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for<control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_API_THREADS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="line">// Spawn telnet thread</comment>
		<comment type="line">// Create a private copy of the socket fd for the child thread</comment>
		<decl_stmt><decl><type><name><name>struct</name> <name>thread_info</name></name> <modifier>*</modifier></type><name>tinfo</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>thread_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name>tinfo</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>tinfo</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tinfo</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tinfo</name><operator>-&gt;</operator><name>istelnet</name></name> <operator>=</operator> <operator>(</operator><name>type</name> <operator>==</operator> <name>TELNETv4</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>TELNETv6</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tinfo</name><operator>-&gt;</operator><name>stype</name></name> <operator>=</operator> <name>stype</name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>api_threads</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>telnet_connection_handler_thread</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>tinfo</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Log the error code description</comment>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"WARNING: Unable to open telnet processing thread: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>seom</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>istelnet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>istelnet</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ssend</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="string">"---EOM---\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pack_eom</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>bool</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><call><name>format</name> <argument_list>(<argument><expr><name>gnu_printf</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name>_ssend</name><argument_list>(<argument><expr><specifier>const</specifier> <name>int</name> <name>sock</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>file</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>func</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>int</name> <name>line</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>format</name></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>bytes</name> <init>= <expr><call><name>vasprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>bytes</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>buffer</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>FTLwrite</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><call><name>short_path</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>errno</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</unit>
