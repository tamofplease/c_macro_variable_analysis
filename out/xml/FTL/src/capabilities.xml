<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/capabilities.c"><comment type="block">/* Pi-hole: A black hole for Internet advertisements
*  (c) 2017 Pi-hole, LLC (https://pi-hole.net)
*  Network-wide ad blocking via your own hardware.
*
*  FTL Engine
*  Linux capability check routines
*
*  This file is copyright under the latest version of the EUPL.
*  Please see LICENSE file for your rights under this license. */</comment>

<comment type="line">// Definition of LINUX_CAPABILITY_VERSION_*</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTLDNS</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnsmasq/dnsmasq.h"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__USE_XOPEN</name></cpp:undef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FTL.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"capabilities.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name><name>capabilityIDs</name><index>[]</index></name>   <init>= <expr><block>{ <expr><name>CAP_CHOWN</name></expr> ,  <expr><name>CAP_DAC_OVERRIDE</name></expr> ,  <expr><name>CAP_DAC_READ_SEARCH</name></expr> ,  <expr><name>CAP_FOWNER</name></expr> ,  <expr><name>CAP_FSETID</name></expr> ,  <expr><name>CAP_KILL</name></expr> ,  <expr><name>CAP_SETGID</name></expr> ,  <expr><name>CAP_SETUID</name></expr> ,  <expr><name>CAP_SETPCAP</name></expr> ,  <expr><name>CAP_LINUX_IMMUTABLE</name></expr> ,  <expr><name>CAP_NET_BIND_SERVICE</name></expr> ,  <expr><name>CAP_NET_BROADCAST</name></expr> ,  <expr><name>CAP_NET_ADMIN</name></expr> ,  <expr><name>CAP_NET_RAW</name></expr> ,  <expr><name>CAP_IPC_LOCK</name></expr> ,  <expr><name>CAP_IPC_OWNER</name></expr> ,  <expr><name>CAP_SYS_MODULE</name></expr> ,  <expr><name>CAP_SYS_RAWIO</name></expr> ,  <expr><name>CAP_SYS_CHROOT</name></expr> ,  <expr><name>CAP_SYS_PTRACE</name></expr> ,  <expr><name>CAP_SYS_PACCT</name></expr> ,  <expr><name>CAP_SYS_ADMIN</name></expr> ,  <expr><name>CAP_SYS_BOOT</name></expr> ,  <expr><name>CAP_SYS_NICE</name></expr> ,  <expr><name>CAP_SYS_RESOURCE</name></expr> ,  <expr><name>CAP_SYS_TIME</name></expr> ,  <expr><name>CAP_SYS_TTY_CONFIG</name></expr> ,  <expr><name>CAP_MKNOD</name></expr> ,  <expr><name>CAP_LEASE</name></expr> ,  <expr><name>CAP_AUDIT_WRITE</name></expr> ,  <expr><name>CAP_AUDIT_CONTROL</name></expr> ,  <expr><name>CAP_SETFCAP</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type>        <name><name>capabilityNames</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"CAP_CHOWN"</literal></expr>, <expr><literal type="string">"CAP_DAC_OVERRIDE"</literal></expr>, <expr><literal type="string">"CAP_DAC_READ_SEARCH"</literal></expr>, <expr><literal type="string">"CAP_FOWNER"</literal></expr>, <expr><literal type="string">"CAP_FSETID"</literal></expr>, <expr><literal type="string">"CAP_KILL"</literal></expr>, <expr><literal type="string">"CAP_SETGID"</literal></expr>, <expr><literal type="string">"CAP_SETUID"</literal></expr>, <expr><literal type="string">"CAP_SETPCAP"</literal></expr>, <expr><literal type="string">"CAP_LINUX_IMMUTABLE"</literal></expr>, <expr><literal type="string">"CAP_NET_BIND_SERVICE"</literal></expr>, <expr><literal type="string">"CAP_NET_BROADCAST"</literal></expr>, <expr><literal type="string">"CAP_NET_ADMIN"</literal></expr>, <expr><literal type="string">"CAP_NET_RAW"</literal></expr>, <expr><literal type="string">"CAP_IPC_LOCK"</literal></expr>, <expr><literal type="string">"CAP_IPC_OWNER"</literal></expr>, <expr><literal type="string">"CAP_SYS_MODULE"</literal></expr>, <expr><literal type="string">"CAP_SYS_RAWIO"</literal></expr>, <expr><literal type="string">"CAP_SYS_CHROOT"</literal></expr>, <expr><literal type="string">"CAP_SYS_PTRACE"</literal></expr>, <expr><literal type="string">"CAP_SYS_PACCT"</literal></expr>, <expr><literal type="string">"CAP_SYS_ADMIN"</literal></expr>, <expr><literal type="string">"CAP_SYS_BOOT"</literal></expr>, <expr><literal type="string">"CAP_SYS_NICE"</literal></expr>, <expr><literal type="string">"CAP_SYS_RESOURCE"</literal></expr>, <expr><literal type="string">"CAP_SYS_TIME"</literal></expr>, <expr><literal type="string">"CAP_SYS_TTY_CONFIG"</literal></expr>, <expr><literal type="string">"CAP_MKNOD"</literal></expr>, <expr><literal type="string">"CAP_LEASE"</literal></expr>, <expr><literal type="string">"CAP_AUDIT_WRITE"</literal></expr>, <expr><literal type="string">"CAP_AUDIT_CONTROL"</literal></expr>, <expr><literal type="string">"CAP_SETFCAP"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>numCaps</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>capabilityIDs</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>capabilityIDs</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>check_capabilities</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// First assume header version 1</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>capsize</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="line">// VFS_CAP_U32_1</comment>
	<decl_stmt><decl><type><name>cap_user_data_t</name></type> <name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>cap_user_header_t</name></type> <name>hdr</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>capsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Determine capabilities version used by the current kernel</comment>
	<expr_stmt><expr><call><name>capget</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Check version</comment>
	<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>version</name></name> <operator>!=</operator> <name>LINUX_CAPABILITY_VERSION_1</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// If unknown version, use largest supported version (3)</comment>
		<comment type="line">// Version 2 is deprecated according to linux/capability.h</comment>
		<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>version</name></name> <operator>!=</operator> <name>LINUX_CAPABILITY_VERSION_2</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>LINUX_CAPABILITY_VERSION_3</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>capsize</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <comment type="line">// VFS_CAP_U32_3</comment>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="line">// Use version 2</comment>
			<expr_stmt><expr><name>capsize</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <comment type="line">// VFS_CAP_U32_2</comment>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Get current capabilities</comment>
	<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>capsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>capget</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"***************************************"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"* Linux capability debugging enabled  *"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0u</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numCaps</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>capid</name> <init>= <expr><name><name>capabilityIDs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"* %-24s (%02u) = %s%s%s *"</literal></expr></argument>,
			<argument><expr><name><name>capabilityNames</name><index>[<expr><name>capid</name></expr>]</index></name></expr></argument>, <argument><expr><name>capid</name></expr></argument>,
			<argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>permitted</name></name>   <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>capid</name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"P"</literal></expr></then><else>:<expr><literal type="string">"-"</literal></expr></else></ternary><operator>)</operator></expr></argument>,
			<argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>inheritable</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>capid</name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"I"</literal></expr></then><else>:<expr><literal type="string">"-"</literal></expr></else></ternary><operator>)</operator></expr></argument>,
			<argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>effective</name></name>   <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>capid</name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"E"</literal></expr></then><else>:<expr><literal type="string">"-"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"***************************************"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>capabilities_okay</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>permitted</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>CAP_NET_ADMIN</name><operator>)</operator><operator>)</operator> <operator>||</operator>
	    <operator>!</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>effective</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>CAP_NET_ADMIN</name><operator>)</operator><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Needed for ARP-injection (used when we're the DHCP server)</comment>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"WARNING: Required Linux capability CAP_NET_ADMIN not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>capabilities_okay</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>permitted</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>CAP_NET_RAW</name><operator>)</operator><operator>)</operator> <operator>||</operator>
	    <operator>!</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>effective</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>CAP_NET_RAW</name><operator>)</operator><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Needed for raw socket access (necessary for ICMP)</comment>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"WARNING: Required Linux capability CAP_NET_RAW not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>capabilities_okay</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>permitted</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>CAP_NET_BIND_SERVICE</name><operator>)</operator><operator>)</operator> <operator>||</operator>
	    <operator>!</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>effective</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>CAP_NET_BIND_SERVICE</name><operator>)</operator><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Necessary for dynamic port binding</comment>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"WARNING: Required Linux capability CAP_NET_BIND_SERVICE not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>capabilities_okay</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>permitted</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>CAP_SYS_NICE</name><operator>)</operator><operator>)</operator> <operator>||</operator>
	    <operator>!</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>effective</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>CAP_SYS_NICE</name><operator>)</operator><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Necessary for setting higher process priority through nice</comment>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"WARNING: Required Linux capability CAP_SYS_NICE not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>capabilities_okay</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>permitted</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>CAP_CHOWN</name><operator>)</operator><operator>)</operator> <operator>||</operator>
	    <operator>!</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>effective</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>CAP_CHOWN</name><operator>)</operator><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Necessary to chown required files that are owned by another user</comment>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"WARNING: Required Linux capability CAP_CHOWN not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>capabilities_okay</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Free allocated memory</comment>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Return whether capabilities are all okay</comment>
	<return>return <expr><name>capabilities_okay</name></expr>;</return>
</block_content>}</block></function>
</unit>
