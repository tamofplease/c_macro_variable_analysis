<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/files.c"><comment type="block">/* Pi-hole: A black hole for Internet advertisements
*  (c) 2017 Pi-hole, LLC (https://pi-hole.net)
*  Network-wide ad blocking via your own hardware.
*
*  FTL Engine
*  File operation routines
*
*  This file is copyright under the latest version of the EUPL.
*  Please see LICENSE file for your rights under this license. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FTL.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"files.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"setupVars.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>

<comment type="line">// opendir(), readdir()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dirent.h&gt;</cpp:file></cpp:include>
<comment type="line">// getpwuid()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pwd.h&gt;</cpp:file></cpp:include>
<comment type="line">// getgrgid()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grp.h&gt;</cpp:file></cpp:include>
<comment type="line">// NAME_MAX</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<comment type="line">// statvfs()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/statvfs.h&gt;</cpp:file></cpp:include>
<comment type="line">// dirname()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libgen.h&gt;</cpp:file></cpp:include>

<comment type="line">// chmod_file() changes the file mode bits of a given file (relative</comment>
<comment type="line">// to the directory file descriptor) according to mode. mode is an</comment>
<comment type="line">// octal number representing the bit pattern for the new mode bits</comment>
<function><type><name>bool</name></type> <name>chmod_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><call><name>chmod</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"WARNING: chmod(%s, %d): chmod() failed: %s (%d)"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"WARNING: chmod(%s, %d): stat() failed: %s (%d)"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// We need to apply a bitmask on st.st_mode as the upper bits may contain random data</comment>
	<comment type="line">// 0x1FF = 0b111_111_111 corresponding to the three-digit octal mode number</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>st</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <literal type="number">0x1FF</literal><operator>)</operator> <operator>!=</operator> <name>mode</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"WARNING: chmod(%s, %d): Verification failed, %d != %d"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>file_exists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
	<return>return <expr><call><name>stat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>get_FTL_db_filesize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name><name>FTLfiles</name><operator>.</operator><name>FTL_db</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// stat() failed (maybe the DB file does not exist?)</comment>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name><name>st</name><operator>.</operator><name>st_size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ls_dir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Open directory stream</comment>
	<decl_stmt><decl><type><name>DIR</name><modifier>*</modifier></type> <name>dirp</name> <init>= <expr><call><name>opendir</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>dirp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"opendir(\"%s\") failed with %s (%d)"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Stack space for full path (directory + "/" + filename + terminating \0)</comment>
	<decl_stmt><decl><type><name>char</name></type> <name><name>full_path</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>+</operator><name>NAME_MAX</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"------ Listing content of directory %s ------"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"File Mode User:Group      Size  Filename"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>dircontent</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<comment type="line">// Walk directory file by file</comment>
	<while>while<condition>(<expr><operator>(</operator><name>dircontent</name> <operator>=</operator> <call><name>readdir</name><argument_list>(<argument><expr><name>dirp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Get filename</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><name><name>dircontent</name><operator>-&gt;</operator><name>d_name</name></name></expr></init></decl>;</decl_stmt>

		<comment type="line">// Construct full path</comment>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>full_path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>full_path</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
		<comment type="line">// Use stat to get file size, permissions, and ownership</comment>
		<if_stmt><if>if<condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>full_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"%s failed with %s (%d)"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Get owner's name</comment>
		<decl_stmt><decl><type><name><name>struct</name> <name>passwd</name></name> <modifier>*</modifier></type><name>pwd</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type> <name><name>user</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pwd</name> <operator>=</operator> <call><name>getpwuid</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_uid</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>pwd</name><operator>-&gt;</operator><name>pw_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>st</name><operator>.</operator><name>st_uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<decl_stmt><decl><type><name><name>struct</name> <name>group</name></name> <modifier>*</modifier></type><name>grp</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type> <name><name>usergroup</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
		<comment type="line">// Get out group name</comment>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>grp</name> <operator>=</operator> <call><name>getgrgid</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_gid</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>usergroup</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>usergroup</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s:%s"</literal></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name><name>grp</name><operator>-&gt;</operator><name>gr_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>usergroup</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>usergroup</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s:%d"</literal></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name><name>st</name><operator>.</operator><name>st_gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<decl_stmt><decl><type><name>char</name></type> <name><name>permissions</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
		<comment type="line">// Get human-readable format of permissions as known from ls</comment>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>permissions</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>permissions</name></expr></argument>)</argument_list></sizeof></expr></argument>,
		         <argument><expr><literal type="string">"%s%s%s%s%s%s%s%s%s"</literal></expr></argument>,
		         <argument><expr><ternary><condition><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_IRUSR</name></expr> ?</condition><then> <expr><literal type="string">"r"</literal></expr></then><else>:<expr><literal type="string">"-"</literal></expr></else></ternary></expr></argument>,
		         <argument><expr><ternary><condition><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_IWUSR</name></expr> ?</condition><then> <expr><literal type="string">"w"</literal></expr></then><else>:<expr><literal type="string">"-"</literal></expr></else></ternary></expr></argument>,
		         <argument><expr><ternary><condition><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_IXUSR</name></expr> ?</condition><then> <expr><literal type="string">"x"</literal></expr></then><else>:<expr><literal type="string">"-"</literal></expr></else></ternary></expr></argument>,
		         <argument><expr><ternary><condition><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_IRGRP</name></expr> ?</condition><then> <expr><literal type="string">"r"</literal></expr></then><else>:<expr><literal type="string">"-"</literal></expr></else></ternary></expr></argument>,
		         <argument><expr><ternary><condition><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_IWGRP</name></expr> ?</condition><then> <expr><literal type="string">"w"</literal></expr></then><else>:<expr><literal type="string">"-"</literal></expr></else></ternary></expr></argument>,
		         <argument><expr><ternary><condition><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_IXGRP</name></expr> ?</condition><then> <expr><literal type="string">"x"</literal></expr></then><else>:<expr><literal type="string">"-"</literal></expr></else></ternary></expr></argument>,
		         <argument><expr><ternary><condition><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_IROTH</name></expr> ?</condition><then> <expr><literal type="string">"r"</literal></expr></then><else>:<expr><literal type="string">"-"</literal></expr></else></ternary></expr></argument>,
		         <argument><expr><ternary><condition><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_IWOTH</name></expr> ?</condition><then> <expr><literal type="string">"w"</literal></expr></then><else>:<expr><literal type="string">"-"</literal></expr></else></ternary></expr></argument>,
		         <argument><expr><ternary><condition><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_IXOTH</name></expr> ?</condition><then> <expr><literal type="string">"x"</literal></expr></then><else>:<expr><literal type="string">"-"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>char</name></type> <name><name>prefix</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>double</name></type> <name>formatted</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>format_memory_size</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>formatted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Log output for this file</comment>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"%s %-15s %3.0f%s  %s"</literal></expr></argument>, <argument><expr><name>permissions</name></expr></argument>, <argument><expr><name>usergroup</name></expr></argument>, <argument><expr><name>formatted</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"---------------------------------------------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Close directory stream</comment>
	<expr_stmt><expr><call><name>closedir</name><argument_list>(<argument><expr><name>dirp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>get_path_usage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Get filesystem information about /dev/shm (typically a tmpfs)</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>statvfs</name></name></type> <name>f</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>statvfs</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// If statvfs() failed, we return the error instead</comment>
		<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">63</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Explicitly cast the block counts to unsigned long long to avoid</comment>
	<comment type="line">// overflowing with drives larger than 4 GB on 32bit systems</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>size</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name><name>f</name><operator>.</operator><name>f_blocks</name></name> <operator>*</operator> <name><name>f</name><operator>.</operator><name>f_frsize</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>free</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name><name>f</name><operator>.</operator><name>f_bavail</name></name> <operator>*</operator> <name><name>f</name><operator>.</operator><name>f_bsize</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>used</name> <init>= <expr><name>size</name> <operator>-</operator> <name>free</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// Create human-readable total size</comment>
	<decl_stmt><decl><type><name>char</name></type> <name><name>prefix_size</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>formatted_size</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>format_memory_size</name><argument_list>(<argument><expr><name>prefix_size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>formatted_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Generate human-readable "total used" size</comment>
	<decl_stmt><decl><type><name>char</name></type> <name><name>prefix_used</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>formatted_used</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>format_memory_size</name><argument_list>(<argument><expr><name>prefix_used</name></expr></argument>, <argument><expr><name>used</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>formatted_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Print result into buffer passed to this subroutine</comment>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="string">"%s: %.1f%sB used, %.1f%sB total"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>,
	         <argument><expr><name>formatted_used</name></expr></argument>, <argument><expr><name>prefix_used</name></expr></argument>, <argument><expr><name>formatted_size</name></expr></argument>, <argument><expr><name>prefix_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Return percentage of used shared memory</comment>
	<comment type="line">// Adding 1 avoids FPE if the size turns out to be zero</comment>
	<return>return <expr><operator>(</operator><name>used</name><operator>*</operator><literal type="number">100</literal><operator>)</operator><operator>/</operator><operator>(</operator><name>size</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>get_filepath_usage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// Get path from file, we duplicate the string</comment>
	<comment type="line">// here as dirname() modifies the string inplace</comment>
	<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>path</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dirname</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Get percentage of disk usage at this path</comment>
	<return>return <expr><call><name>get_path_usage</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
