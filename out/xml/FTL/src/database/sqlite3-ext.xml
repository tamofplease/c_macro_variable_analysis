<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/database/sqlite3-ext.c"><comment type="block">/* Pi-hole: A black hole for Internet advertisements
*  (c) 2020 Pi-hole, LLC (https://pi-hole.net)
*  Network-wide ad blocking via your own hardware.
*
*  FTL Engine
*  SQLite3 database engine extensions
*
*  This file is copyright under the latest version of the EUPL.
*  Please see LICENSE file for your rights under this license. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3-ext.h"</cpp:file></cpp:include>

<comment type="line">// inet_pton</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<comment type="line">// sscanf()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<comment type="line">// type bool</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<comment type="line">// strstr()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<comment type="line">// free()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<comment type="line">// logg()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../log.h"</cpp:file></cpp:include>
<comment type="line">// struct config</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../config.h"</cpp:file></cpp:include>

<comment type="line">// isMAC()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-table.h"</cpp:file></cpp:include>

<comment type="line">// Counting number of occurrences of a specific char in a string</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>count_char</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>haystack</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <name>needle</name></expr></argument>)</argument_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><literal type="number">0u</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><operator>*</operator><name>haystack</name></expr>)</condition><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>haystack</name><operator>++</operator> <operator>==</operator> <name>needle</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></while>
	<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<comment type="line">// Identify MAC addresses using a set of suitable criteria</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>isMAC</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>input</name></expr></argument>)</argument_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>input</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>                <comment type="line">// Valid input</comment>
	   <call><name>strlen</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">17u</literal> <operator>&amp;&amp;</operator>         <comment type="line">// MAC addresses are always 17 chars long (6 bytes + 5 colons)</comment>
	   <call><name>count_char</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">5u</literal> <operator>&amp;&amp;</operator> <comment type="line">// MAC addresses always have 5 colons</comment>
	   <call><name>strstr</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"::"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>    <comment type="line">// No double-colons (IPv6 address abbreviation)</comment>
	   <block>{<block_content>
		<comment type="line">// This is a MAC address of the form AA:BB:CC:DD:EE:FF</comment>
		<return>return <expr><name>true</name></expr>;</return>
	   </block_content>}</block></if></if_stmt>

	<comment type="line">// Not a MAC address</comment>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>subnet_match_impl</name><parameter_list>(<parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Exactly two arguments should be submitted to this routine</comment>
	<if_stmt><if>if<condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"Passed an invalid number of arguments"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Return NO MATCH if invoked with non-TEXT arguments</comment>
	<if_stmt><if>if <condition>(<expr><call><name>sqlite3_value_type</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SQLITE_TEXT</name> <operator>||</operator>
	    <call><name>sqlite3_value_type</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SQLITE_TEXT</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"SQL: Invoked subnet_match() with non-text arguments: %d, %d"</literal></expr></argument>,
		     <argument><expr><call><name>sqlite3_value_type</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sqlite3_value_type</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_result_int</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Analyze input supplied to our SQLite subroutine</comment>
	<comment type="line">// From the DB side (first argument) ...</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addrDBcidr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// ... and from FTL's side (second argument)</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addrFTL</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Return early (no match) if database entry is a MAC address</comment>
	<comment type="line">// We can skip all computations in this case</comment>
	<if_stmt><if>if<condition>(<expr><call><name>isMAC</name><argument_list>(<argument><expr><name>addrDBcidr</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>sqlite3_result_int</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Return early (no match) if IP types are different</comment>
	<comment type="line">// We can skip all computations in this case</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>isIPv6_DB</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>addrDBcidr</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>isIPv6_FTL</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>addrFTL</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>isIPv6_DB</name> <operator>!=</operator> <name>isIPv6_FTL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>sqlite3_result_int</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Extract possible CIDR from database IP string</comment>
	<comment type="line">// sscanf() will not overwrite the pre-defined CIDR in cidr if</comment>
	<comment type="line">// no CIDR is specified in the database</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>cidr</name> <init>= <expr><ternary><condition><expr><name>isIPv6_DB</name></expr> ?</condition><then> <expr><literal type="number">128</literal></expr> </then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>addrDB</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>rt</name> <init>= <expr><call><name>sscanf</name><argument_list>(<argument><expr><name>addrDBcidr</name></expr></argument>, <argument><expr><literal type="string">"%m[^/]/%i"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>addrDB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cidr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Skip if database row seems to be a CIDR but does not contain an address ('/32' is invalid)</comment>
	<comment type="line">// Passing an invalid IP address to inet_pton() causes a SEGFAULT</comment>
	<if_stmt><if>if<condition>(<expr><name>rt</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>addrDB</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>sqlite3_result_int</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Convert the Internet host address into binary form in network byte order</comment>
	<comment type="line">// We use in6_addr as variable type here as it is guaranteed to be large enough</comment>
	<comment type="line">// for both, IPv4 and IPv6 addresses (128 bits variable size).</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>saddrDB</name> <init>= <expr><block>{<expr><block>{<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>}</block></expr>}</block></expr></init></decl>, <decl><type ref="prev"/><name>saddrFTL</name> <init>= <expr><block>{<expr><block>{<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><ternary><condition><expr><name>isIPv6_DB</name></expr> ?</condition><then> <expr><name>AF_INET6</name></expr> </then><else>: <expr><name>AF_INET</name></expr></else></ternary></expr></argument>, <argument><expr><name>addrDB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>saddrDB</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// This may happen when trying to analyze a hostname, skip this entry and return NO MATCH (= 0)</comment>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>addrDB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_result_int</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Free allocated memory</comment>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>addrDB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>addrDB</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="line">// Check and convert client IP address as seen by FTL</comment>
	<if_stmt><if>if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><ternary><condition><expr><name>isIPv6_FTL</name></expr> ?</condition><then> <expr><name>AF_INET6</name></expr> </then><else>: <expr><name>AF_INET</name></expr></else></ternary></expr></argument>, <argument><expr><name>addrFTL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>saddrFTL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="line">//sqlite3_result_error(context, "Passed a malformed IP address (FTL)", -1);</comment>
		<comment type="line">// Return non-fatal "NO MATCH" if address is invalid</comment>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Malformed FTL IP address: %s"</literal></expr></argument>, <argument><expr><name>addrFTL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_result_int</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Construct binary mask from CIDR field</comment>
	<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>bitmask</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cidr</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>bitmask</name><index>[<expr><name>i</name><operator>/</operator><literal type="number">8</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">7</literal><operator>-</operator><operator>(</operator><name>i</name><operator>%</operator><literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">// Apply bitmask to both IP addresses</comment>
	<comment type="line">// Note: the upper 12 byte of IPv4 addresses are zero</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>match</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0u</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16u</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>saddrDB</name><operator>.</operator><name>s6_addr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;=</operator> <name><name>bitmask</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>saddrFTL</name><operator>.</operator><name>s6_addr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;=</operator> <name><name>bitmask</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

		<comment type="line">// Are the addresses different given the applied mask?</comment>
		<if_stmt><if>if<condition>(<expr><name><name>saddrDB</name><operator>.</operator><name>s6_addr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>saddrFTL</name><operator>.</operator><name>s6_addr</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>match</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="line">// Possible debug logging</comment>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type> <name><name>subnet</name><index>[<expr><name>INET6_ADDRSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><ternary><condition><expr><name>isIPv6_FTL</name></expr> ?</condition><then> <expr><name>AF_INET6</name></expr> </then><else>: <expr><name>AF_INET</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitmask</name></expr></argument>, <argument><expr><name>subnet</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>subnet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"SQL: Comparing %s vs. %s (subnet %s) - %s"</literal></expr></argument>,
		     <argument><expr><name>addrFTL</name></expr></argument>, <argument><expr><name>addrDBcidr</name></expr></argument>, <argument><expr><name>subnet</name></expr></argument>,
			 <argument><expr><ternary><condition><expr><name>match</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"!! MATCH !!"</literal></expr> </then><else>: <expr><literal type="string">"NO MATCH"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Return if we found a match between the two addresses</comment>
	<comment type="line">// given a possibly specified mask. We return the number of</comment>
	<comment type="line">// matching bits (cannot be more than the CIDR field specified)</comment>
	<comment type="line">// so the algorithm can decide which subnet match is the most</comment>
	<comment type="line">// exact one and prefer it (e.g., 10.8.1.0/24 beats 10.0.0.0/8)</comment>
	<expr_stmt><expr><call><name>sqlite3_result_int</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><ternary><condition><expr><name>match</name></expr> ?</condition><then> <expr><name>cidr</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqlite3_pihole_extensions_init</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErrMsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sqlite3_api_routines</name></name> <modifier>*</modifier></type><name>pApi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>pzErrMsg</name></expr>;</expr_stmt>  <comment type="block">/* Unused parameter */</comment>

	<comment type="line">// Register new sqlite function subnet_match taking 2 arguments in UTF8 format.</comment>
	<comment type="line">// The function is deterministic in the sense of always returning the same output for the same input.</comment>
	<comment type="line">// We define a scalar function here so the last two pointers are NULL.</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"subnet_match"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>SQLITE_UTF8</name> <operator>|</operator> <name>SQLITE_DETERMINISTIC</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
	                                 <argument><expr><name>subnet_match_impl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Error while initializing the SQLite3 extension subnet_match: %s"</literal></expr></argument>,
		     <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function></unit>
