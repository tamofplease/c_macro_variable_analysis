<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/database/gravity-db.c"><comment type="block">/* Pi-hole: A black hole for Internet advertisements
*  (c) 2017 Pi-hole, LLC (https://pi-hole.net)
*  Network-wide ad blocking via your own hardware.
*
*  FTL Engine
*  Gravity database routines
*
*  This file is copyright under the latest version of the EUPL.
*  Please see LICENSE file for your rights under this license. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../FTL.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gravity-db.h"</cpp:file></cpp:include>
<comment type="line">// struct config</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../config.h"</cpp:file></cpp:include>
<comment type="line">// logg()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../log.h"</cpp:file></cpp:include>
<comment type="line">// getstr()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../shmem.h"</cpp:file></cpp:include>
<comment type="line">// SQLite3 prepared statement vectors</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../vector.h"</cpp:file></cpp:include>
<comment type="line">// log_subnet_warning()</comment>
<comment type="line">// logg_inaccessible_adlist</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"message-table.h"</cpp:file></cpp:include>
<comment type="line">// getMACfromIP()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-table.h"</cpp:file></cpp:include>
<comment type="line">// struct DNSCacheData</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../datastructure.h"</cpp:file></cpp:include>
<comment type="line">// reset_aliasclient()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aliasclients.h"</cpp:file></cpp:include>

<comment type="line">// Definition of struct regexData</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../regex_r.h"</cpp:file></cpp:include>

<comment type="line">// Prefix of interface names in the client table</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERFACE_SEP</name></cpp:macro> <cpp:value>":"</cpp:value></cpp:define>

<comment type="line">// Process-private prepared statements are used to support multiple forks (might</comment>
<comment type="line">// be TCP workers) to use the database simultaneously without corrupting the</comment>
<comment type="line">// gravity database</comment>
<decl_stmt><decl><type><name>sqlite3_stmt_vec</name> <modifier>*</modifier></type><name>whitelist_stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sqlite3_stmt_vec</name> <modifier>*</modifier></type><name>gravity_stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sqlite3_stmt_vec</name> <modifier>*</modifier></type><name>blacklist_stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="line">// Private variables</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>sqlite3</name> <modifier>*</modifier></type><name>gravity_db</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>sqlite3_stmt</name><modifier>*</modifier></type> <name>table_stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>sqlite3_stmt</name><modifier>*</modifier></type> <name>auditlist_stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>gravityDB_opened</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<comment type="line">// Table names corresponding to the enum defined in gravity-db.h</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>tablename</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"vw_gravity"</literal></expr>, <expr><literal type="string">"vw_blacklist"</literal></expr>, <expr><literal type="string">"vw_whitelist"</literal></expr>, <expr><literal type="string">"vw_regex_blacklist"</literal></expr>, <expr><literal type="string">"vw_regex_whitelist"</literal></expr> , <expr><literal type="string">""</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<comment type="line">// Prototypes from functions in dnsmasq's source</comment>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>rehash</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// Initialize gravity subroutines</comment>
<function><type><name>void</name></type> <name>gravityDB_forked</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// See "How To Corrupt An SQLite Database File"</comment>
	<comment type="line">// (https://www.sqlite.org/howtocorrupt.html):</comment>
	<comment type="line">// 2.6. Carrying an open database connection across a fork()</comment>
	<comment type="line">//</comment>
	<comment type="line">// Do not open an SQLite database connection, then fork(), then try to</comment>
	<comment type="line">// use that database connection in the child process. All kinds of</comment>
	<comment type="line">// locking problems will result and you can easily end up with a corrupt</comment>
	<comment type="line">// database. SQLite is not designed to support that kind of behavior.</comment>
	<comment type="line">// Any database connection that is used in a child process must be</comment>
	<comment type="line">// opened in the child process, not inherited from the parent.</comment>
	<comment type="line">//</comment>
	<comment type="line">// Do not even call sqlite3_close() on a database connection from a</comment>
	<comment type="line">// child process if the connection was opened in the parent. It is safe</comment>
	<comment type="line">// to close the underlying file descriptor, but the sqlite3_close()</comment>
	<comment type="line">// interface might invoke cleanup activities that will delete content</comment>
	<comment type="line">// out from under the parent, leading to errors and perhaps even</comment>
	<comment type="line">// database corruption.</comment>
	<comment type="line">//</comment>
	<comment type="line">// Hence, we pretend that we did not open the database so far</comment>
	<comment type="line">// NOTE: Yes, this will leak memory into the forks, however, there isn't</comment>
	<comment type="line">// much we can do about this. The "proper" solution would be to close</comment>
	<comment type="line">// the finalize the prepared gravity database statements and close the</comment>
	<comment type="line">// database connection *before* forking and re-open and re-prepare them</comment>
	<comment type="line">// afterwards (independently once in the parent, once in the fork). It</comment>
	<comment type="line">// is clear that this in not what we want to do as this is a slow</comment>
	<comment type="line">// process and many TCP queries could lead to a DoS attack.</comment>
	<expr_stmt><expr><name>gravityDB_opened</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>gravity_db</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="line">// Also pretend we have not yet prepared the list statements</comment>
	<expr_stmt><expr><name>whitelist_stmt</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>blacklist_stmt</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>gravity_stmt</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="line">// Open the database</comment>
	<expr_stmt><expr><call><name>gravityDB_open</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Open gravity database</comment>
<function><type><name>bool</name></type> <name>gravityDB_open</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name><name>FTLfiles</name><operator>.</operator><name>gravity_db</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// File does not exist</comment>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"gravityDB_open(): %s does not exist"</literal></expr></argument>, <argument><expr><name><name>FTLfiles</name><operator>.</operator><name>gravity_db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>gravityDB_opened</name> <operator>&amp;&amp;</operator> <name>gravity_db</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"gravityDB_open(): Database already connected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"gravityDB_open(): Trying to open %s in read-only mode"</literal></expr></argument>, <argument><expr><name><name>FTLfiles</name><operator>.</operator><name>gravity_db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_open_v2</name><argument_list>(<argument><expr><name><name>FTLfiles</name><operator>.</operator><name>gravity_db</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gravity_db</name></expr></argument>, <argument><expr><name>SQLITE_OPEN_READONLY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr> )</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"gravityDB_open() - SQL error: %s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>gravityDB_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Database connection is now open</comment>
	<expr_stmt><expr><name>gravityDB_opened</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="line">// Tell SQLite3 to store temporary tables in memory. This speeds up read operations on</comment>
	<comment type="line">// temporary tables, indices, and views.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"gravityDB_open(): Setting location for temporary object to MEMORY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zErrMsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>gravity_db</name></expr></argument>, <argument><expr><literal type="string">"PRAGMA temp_store = MEMORY"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr> )</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"gravityDB_open(PRAGMA temp_store) - SQL error (%i): %s"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>zErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>gravityDB_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Prepare audit statement</comment>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"gravityDB_open(): Preparing audit query"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// We support adding audit domains with a wildcard character (*)</comment>
	<comment type="line">// Example 1: google.de</comment>
	<comment type="line">//            matches only google.de</comment>
	<comment type="line">// Example 2: *.google.de</comment>
	<comment type="line">//            matches all subdomains of google.de</comment>
	<comment type="line">//            BUT NOT google.de itself</comment>
	<comment type="line">// Example 3: *google.de</comment>
	<comment type="line">//            matches 'google.de' and all of its subdomains but</comment>
	<comment type="line">//            also other domains ending in google.de, like</comment>
	<comment type="line">//            abcgoogle.de</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v3</name><argument_list>(<argument><expr><name>gravity_db</name></expr></argument>,
	        <argument><expr><literal type="string">"SELECT domain, "</literal>
	          <literal type="string">"CASE WHEN substr(domain, 1, 1) = '*' "</literal> <comment type="line">// Does the database string start in '*' ?</comment>
	            <literal type="string">"THEN '*' || substr(:input, - length(domain) + 1) "</literal> <comment type="line">// If so: Crop the input domain and prepend '*'</comment>
	            <literal type="string">"ELSE :input "</literal> <comment type="line">// If not: Use input domain directly for comparison</comment>
	          <literal type="string">"END matcher "</literal>
	        <literal type="string">"FROM domain_audit WHERE matcher = domain"</literal> <comment type="line">// Match where (modified) domain equals the database domain</comment>
	        <literal type="string">";"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_PREPARE_PERSISTENT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>auditlist_stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr> )</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"gravityDB_open(\"SELECT EXISTS(... domain_audit ...)\") - SQL error prepare: %s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>gravityDB_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Set SQLite3 busy timeout to a user-defined value (defaults to 1 second)</comment>
	<comment type="line">// to avoid immediate failures when the gravity database is still busy</comment>
	<comment type="line">// writing the changes to disk</comment>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"gravityDB_open(): Setting busy timeout to %d"</literal></expr></argument>, <argument><expr><name>DATABASE_BUSY_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>sqlite3_busy_timeout</name><argument_list>(<argument><expr><name>gravity_db</name></expr></argument>, <argument><expr><name>DATABASE_BUSY_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Prepare private vector of statements for this process (might be a TCP fork!)</comment>
	<if_stmt><if>if<condition>(<expr><name>whitelist_stmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>whitelist_stmt</name> <operator>=</operator> <call><name>new_sqlite3_stmt_vec</name><argument_list>(<argument><expr><name><name>counters</name><operator>-&gt;</operator><name>clients</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>blacklist_stmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>blacklist_stmt</name> <operator>=</operator> <call><name>new_sqlite3_stmt_vec</name><argument_list>(<argument><expr><name><name>counters</name><operator>-&gt;</operator><name>clients</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>gravity_stmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>gravity_stmt</name> <operator>=</operator> <call><name>new_sqlite3_stmt_vec</name><argument_list>(<argument><expr><name><name>counters</name><operator>-&gt;</operator><name>clients</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Explicitly set busy handler to zero milliseconds</comment>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"gravityDB_open(): Setting busy timeout to zero"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_busy_timeout</name><argument_list>(<argument><expr><name>gravity_db</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"gravityDB_open() - Cannot set busy handler: %s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"gravityDB_open(): Successfully opened gravity.db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>gravityDB_reopen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// We call this routine when reloading the cache.</comment>
	<expr_stmt><expr><call><name>gravityDB_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Re-open gravity database</comment>
	<return>return <expr><call><name>gravityDB_open</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>get_client_querystr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>column</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>groups</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Build query string with group filtering</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>querystr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querystr</name></expr></argument>, <argument><expr><literal type="string">"SELECT %s from %s WHERE domain = ? AND group_id IN (%s);"</literal></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>groups</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"get_client_querystr(%s, %s) - asprintf() error"</literal></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>groups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"get_client_querystr: %s"</literal></expr></argument>, <argument><expr><name>querystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>querystr</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Determine whether to show IP or hardware address</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>show_client_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hwaddr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>,
                                             <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>hostname</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Valid hostname address, display it</comment>
		<return>return <expr><name>hostname</name></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><name>hwaddr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><literal type="string">"ip-"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Valid hardware address and not a mock-device</comment>
		<return>return <expr><name>hwaddr</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Fallback: display IP address</comment>
	<return>return <expr><name>ip</name></expr>;</return>
</block_content>}</block></function>


<comment type="line">// Get associated groups for this client (if defined)</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>get_client_groupids</name><parameter_list>(<parameter><decl><type><name>clientsData</name><modifier>*</modifier></type> <name>client</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip</name> <init>= <expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>ippos</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>found_group</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>groupspos</name></name> <operator>=</operator> <literal type="number">0u</literal></expr>;</expr_stmt>

	<comment type="line">// Do not proceed when database is not available</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>gravityDB_opened</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>gravityDB_open</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"get_client_groupids(): Gravity database not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_CLIENTS</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Querying gravity database for client with IP %s..."</literal></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Check if client is configured through the client table</comment>
	<comment type="line">// This will return nothing if the client is unknown/unconfigured</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>querystr</name> <init>= <expr><literal type="string">"SELECT count(id) matching_count, "</literal>
	                       <literal type="string">"max(id) chosen_match_id, "</literal>
	                       <literal type="string">"ip chosen_match_text, "</literal>
	                       <literal type="string">"group_concat(id) matching_ids, "</literal>
	                       <literal type="string">"subnet_match(ip,?) matching_bits FROM client "</literal>
	                       <literal type="string">"WHERE matching_bits &gt; 0 "</literal>
	                       <literal type="string">"GROUP BY matching_bits "</literal>
	                       <literal type="string">"ORDER BY matching_bits DESC LIMIT 1;"</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">// Prepare query</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>gravity_db</name></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>table_stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"get_client_groupids(\"%s\") - SQL error prepare: %s"</literal></expr></argument>,
		     <argument><expr><name>ip</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Bind ipaddr to prepared statement</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>table_stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"get_client_groupids(\"%s\"): Failed to bind ip: %s"</literal></expr></argument>,
		     <argument><expr><name>ip</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>table_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>table_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Perform query</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>table_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>matching_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>chosen_match_id</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>matching_bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>matching_ids</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>chosen_match_text</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SQLITE_ROW</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// There is a record for this client in the database,</comment>
		<comment type="line">// extract the result (there can be at most one line)</comment>
		<expr_stmt><expr><name>matching_count</name> <operator>=</operator> <call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>table_stmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>chosen_match_id</name> <operator>=</operator> <call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>table_stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>chosen_match_text</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>table_stmt</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>matching_ids</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>table_stmt</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>matching_bits</name> <operator>=</operator> <call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>table_stmt</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_CLIENTS</name> <operator>&amp;&amp;</operator> <name>matching_count</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<comment type="line">// Case matching_count &gt; 1 handled below using logg_subnet_warning()</comment>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"--&gt; Found record for %s in the client table (group ID %d)"</literal></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>chosen_match_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SQLITE_DONE</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_CLIENTS</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"--&gt; No record for %s in the client table"</literal></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="line">// Error</comment>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"get_client_groupids(\"%s\") - SQL error step: %s"</literal></expr></argument>,
		     <argument><expr><name>ip</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>gravityDB_finalizeTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></else></if_stmt>

	<comment type="line">// Finalize statement</comment>
	<expr_stmt><expr><call><name>gravityDB_finalizeTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>matching_count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// There is more than one configured subnet that matches to current device</comment>
		<comment type="line">// with the same number of subnet mask bits. This is likely unintended by</comment>
		<comment type="line">// the user so we issue a warning so they can address it.</comment>
		<comment type="line">// Example:</comment>
		<comment type="line">//   Device 10.8.0.22</comment>
		<comment type="line">//   Client 1: 10.8.0.0/24</comment>
		<comment type="line">//   Client 2: 10.8.1.0/24</comment>
		<expr_stmt><expr><call><name>logg_subnet_warning</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr><name>matching_count</name></expr></argument>, <argument><expr><name>matching_ids</name></expr></argument>, <argument><expr><name>matching_bits</name></expr></argument>, <argument><expr><name>chosen_match_text</name></expr></argument>, <argument><expr><name>chosen_match_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Free memory if applicable</comment>
	<if_stmt><if>if<condition>(<expr><name>matching_ids</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>matching_ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>matching_ids</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>chosen_match_text</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>chosen_match_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>chosen_match_text</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// If we didn't find an IP address match above, try with MAC address matches</comment>
	<comment type="line">// 1. Look up MAC address of this client</comment>
	<comment type="line">//   1.1. Look up IP address in network_addresses table</comment>
	<comment type="line">//   1.2. Get MAC address from this network_id</comment>
	<comment type="line">// 2. If found -&gt; Get groups by looking up MAC address in client table</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hwaddr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>chosen_match_id</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_CLIENTS</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Querying gravity database for MAC address of %s..."</literal></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="line">// Do the lookup</comment>
		<expr_stmt><expr><name>hwaddr</name> <operator>=</operator> <call><name>getMACfromIP</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><name>hwaddr</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_CLIENTS</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"--&gt; No result."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if<condition>(<expr><name>hwaddr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>hwaddr</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><literal type="string">"ip-"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hwaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>hwaddr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

			<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_CLIENTS</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Skipping mock-device hardware address lookup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<comment type="line">// Set MAC address from database information if available and the MAC address is not already set</comment>
		<if type="elseif">else if<condition>(<expr><name>hwaddr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>client</name><operator>-&gt;</operator><name>hwlen</name></name> <operator>!=</operator> <literal type="number">6</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Proper MAC parsing</comment>
			<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>data</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>n</name> <init>= <expr><call><name>sscanf</name><argument_list>(<argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><literal type="string">"%hhx:%hhx:%hhx:%hhx:%hhx:%hhx"</literal></expr></argument>,
			                     <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
			                     <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="line">// Set hwlen only if we got data</comment>
			<if_stmt><if>if<condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>hwaddr</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>hwlen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// MAC address fallback: Try to synthesize MAC address from internal buffer</comment>
		<if_stmt><if>if<condition>(<expr><name>hwaddr</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>client</name><operator>-&gt;</operator><name>hwlen</name></name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>strlen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"AA:BB:CC:DD:EE:FF"</literal></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>hwaddr</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>, <argument><expr><name>strlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>strlen</name></expr></argument>, <argument><expr><literal type="string">"%02X:%02X:%02X:%02X:%02X:%02X"</literal></expr></argument>,
			         <argument><expr><name><name>client</name><operator>-&gt;</operator><name>hwaddr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>hwaddr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>hwaddr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
			         <argument><expr><name><name>client</name><operator>-&gt;</operator><name>hwaddr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>hwaddr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>hwaddr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_CLIENTS</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"--&gt; Obtained %s from internal ARP cache"</literal></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Check if we received a valid MAC address</comment>
	<comment type="line">// This ensures we skip mock hardware addresses such as "ip-127.0.0.1"</comment>
	<if_stmt><if>if<condition>(<expr><name>hwaddr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_CLIENTS</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"--&gt; Querying client table for %s"</literal></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="line">// Check if client is configured through the client table</comment>
		<comment type="line">// This will return nothing if the client is unknown/unconfigured</comment>
		<comment type="line">// We use COLLATE NOCASE to ensure the comparison is done case-insensitive</comment>
		<expr_stmt><expr><name>querystr</name> <operator>=</operator> <literal type="string">"SELECT id FROM client WHERE ip = ? COLLATE NOCASE;"</literal></expr>;</expr_stmt>

		<comment type="line">// Prepare query</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>gravity_db</name></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>table_stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"get_client_groupids(%s) - SQL error prepare: %s"</literal></expr></argument>,
				<argument><expr><name>querystr</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hwaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// hwaddr != NULL -&gt; memory has been allocated</comment>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Bind hwaddr to prepared statement</comment>
		<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>table_stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"get_client_groupids(\"%s\", \"%s\"): Failed to bind hwaddr: %s"</literal></expr></argument>,
				<argument><expr><name>ip</name></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>table_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>table_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hwaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// hwaddr != NULL -&gt; memory has been allocated</comment>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Perform query</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>table_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SQLITE_ROW</name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// There is a record for this client in the database,</comment>
			<comment type="line">// extract the result (there can be at most one line)</comment>
			<expr_stmt><expr><name>chosen_match_id</name> <operator>=</operator> <call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>table_stmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_CLIENTS</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"--&gt; Found record for %s in the client table (group ID %d)"</literal></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>chosen_match_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SQLITE_DONE</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_CLIENTS</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"--&gt; There is no record for %s in the client table"</literal></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="line">// Error</comment>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"get_client_groupids(\"%s\", \"%s\") - SQL error step: %s"</literal></expr></argument>,
				<argument><expr><name>ip</name></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>gravityDB_finalizeTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hwaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// hwaddr != NULL -&gt; memory has been allocated</comment>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></else></if_stmt>

		<comment type="line">// Finalize statement and free allocated memory</comment>
		<expr_stmt><expr><call><name>gravityDB_finalizeTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// If we did neither find an IP nor a MAC address match above, we try to look</comment>
	<comment type="line">// up the client using its host name</comment>
	<comment type="line">// 1. Look up host name address of this client</comment>
	<comment type="line">// 2. If found -&gt; Get groups by looking up host name in client table</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>chosen_match_id</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_CLIENTS</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Querying gravity database for host name of %s..."</literal></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="line">// Do the lookup</comment>
		<expr_stmt><expr><name>hostname</name> <operator>=</operator> <call><name>getNameFromIP</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><name>hostname</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_CLIENTS</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"--&gt; No result."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><name>hostname</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>hostname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_CLIENTS</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Skipping empty host name lookup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Check if we received a valid MAC address</comment>
	<comment type="line">// This ensures we skip mock hardware addresses such as "ip-127.0.0.1"</comment>
	<if_stmt><if>if<condition>(<expr><name>hostname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_CLIENTS</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"--&gt; Querying client table for %s"</literal></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="line">// Check if client is configured through the client table</comment>
		<comment type="line">// This will return nothing if the client is unknown/unconfigured</comment>
		<comment type="line">// We use COLLATE NOCASE to ensure the comparison is done case-insensitive</comment>
		<expr_stmt><expr><name>querystr</name> <operator>=</operator> <literal type="string">"SELECT id FROM client WHERE ip = ? COLLATE NOCASE;"</literal></expr>;</expr_stmt>

		<comment type="line">// Prepare query</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>gravity_db</name></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>table_stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"get_client_groupids(%s) - SQL error prepare: %s"</literal></expr></argument>,
				<argument><expr><name>querystr</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>hwaddr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hwaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// hostname != NULL -&gt; memory has been allocated</comment>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Bind hostname to prepared statement</comment>
		<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>table_stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"get_client_groupids(\"%s\", \"%s\"): Failed to bind hostname: %s"</literal></expr></argument>,
				<argument><expr><name>ip</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>table_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>table_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>hwaddr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hwaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// hostname != NULL -&gt; memory has been allocated</comment>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Perform query</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>table_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SQLITE_ROW</name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// There is a record for this client in the database,</comment>
			<comment type="line">// extract the result (there can be at most one line)</comment>
			<expr_stmt><expr><name>chosen_match_id</name> <operator>=</operator> <call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>table_stmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_CLIENTS</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"--&gt; Found record for %s in the client table (group ID %d)"</literal></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>chosen_match_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SQLITE_DONE</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_CLIENTS</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"--&gt; There is no record for %s in the client table"</literal></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="line">// Error</comment>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"get_client_groupids(\"%s\", \"%s\") - SQL error step: %s"</literal></expr></argument>,
				<argument><expr><name>ip</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>gravityDB_finalizeTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>hwaddr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hwaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// hostname != NULL -&gt; memory has been allocated</comment>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></else></if_stmt>

		<comment type="line">// Finalize statement and free allocated memory</comment>
		<expr_stmt><expr><call><name>gravityDB_finalizeTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// If we did neither find an IP nor a MAC address and also no host name</comment>
	<comment type="line">// match above, we try to look up the client using its interface</comment>
	<comment type="line">// 1. Look up the interface of this client (FTL isn't aware of it</comment>
	<comment type="line">//    when creating the client from history data!)</comment>
	<comment type="line">// 2. If found -&gt; Get groups by looking up interface in client table</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>interface</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>chosen_match_id</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_CLIENTS</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Querying gravity database for interface of %s..."</literal></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="line">// Do the lookup</comment>
		<expr_stmt><expr><name>interface</name> <operator>=</operator> <call><name>getIfaceFromIP</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><name>interface</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_CLIENTS</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"--&gt; No result."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><name>interface</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>interface</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>interface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>interface</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_CLIENTS</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Skipping empty interface lookup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Check if we received a valid interface</comment>
	<if_stmt><if>if<condition>(<expr><name>interface</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_CLIENTS</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Querying client table for interface "</literal><name>INTERFACE_SEP</name><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>interface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="line">// Check if client is configured through the client table using its interface</comment>
		<comment type="line">// This will return nothing if the client is unknown/unconfigured</comment>
		<comment type="line">// We use the SQLite concatenate operator || to prepace the queried interface by ":"</comment>
		<comment type="line">// We use COLLATE NOCASE to ensure the comparison is done case-insensitive</comment>
		<expr_stmt><expr><name>querystr</name> <operator>=</operator> <literal type="string">"SELECT id FROM client WHERE ip = '"</literal><name>INTERFACE_SEP</name><literal type="string">"' || ? COLLATE NOCASE;"</literal></expr>;</expr_stmt>

		<comment type="line">// Prepare query</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>gravity_db</name></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>table_stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"get_client_groupids(%s) - SQL error prepare: %s"</literal></expr></argument>,
				<argument><expr><name>querystr</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>hwaddr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hwaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if<condition>(<expr><name>hostname</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>interface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// interface != NULL -&gt; memory has been allocated</comment>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Bind interface to prepared statement</comment>
		<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>table_stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>interface</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"get_client_groupids(\"%s\", \"%s\"): Failed to bind interface: %s"</literal></expr></argument>,
				<argument><expr><name>ip</name></expr></argument>, <argument><expr><name>interface</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>table_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>table_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>hwaddr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hwaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if<condition>(<expr><name>hostname</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>interface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// interface != NULL -&gt; memory has been allocated</comment>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Perform query</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>table_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SQLITE_ROW</name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// There is a record for this client in the database,</comment>
			<comment type="line">// extract the result (there can be at most one line)</comment>
			<expr_stmt><expr><name>chosen_match_id</name> <operator>=</operator> <call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>table_stmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_CLIENTS</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"--&gt; Found record for interface "</literal><name>INTERFACE_SEP</name><literal type="string">"%s in the client table (group ID %d)"</literal></expr></argument>, <argument><expr><name>interface</name></expr></argument>, <argument><expr><name>chosen_match_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SQLITE_DONE</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_CLIENTS</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"--&gt; There is no record for interface "</literal><name>INTERFACE_SEP</name><literal type="string">"%s in the client table"</literal></expr></argument>, <argument><expr><name>interface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="line">// Error</comment>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"get_client_groupids(\"%s\", \"%s\") - SQL error step: %s"</literal></expr></argument>,
				<argument><expr><name>ip</name></expr></argument>, <argument><expr><name>interface</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>gravityDB_finalizeTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>hwaddr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hwaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if<condition>(<expr><name>hostname</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>interface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// interface != NULL -&gt; memory has been allocated</comment>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></else></if_stmt>

		<comment type="line">// Finalize statement and free allocated memory</comment>
		<expr_stmt><expr><call><name>gravityDB_finalizeTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// We use the default group and return early here</comment>
	<comment type="line">// if above lookups didn't return any results</comment>
	<comment type="line">// (the client is not configured through the client table)</comment>
	<if_stmt><if>if<condition>(<expr><name>chosen_match_id</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_CLIENTS</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Gravity database: Client %s not found. Using default group.\n"</literal></expr></argument>,
			     <argument><expr><call><name>show_client_string</name><argument_list>(<argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>groupspos</name></name> <operator>=</operator> <call><name>addstr</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>found_group</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><name>hwaddr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hwaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>hwaddr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><name>hostname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>hostname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><name>interface</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>interface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>interface</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Build query string to get possible group associations for this particular client</comment>
	<comment type="line">// The SQL GROUP_CONCAT() function returns a string which is the concatenation of all</comment>
	<comment type="line">// non-NULL values of group_id separated by ','. The order of the concatenated elements</comment>
	<comment type="line">// is arbitrary, however, is of no relevance for your use case.</comment>
	<comment type="line">// We check using a possibly defined subnet and use the first result</comment>
	<expr_stmt><expr><name>querystr</name> <operator>=</operator> <literal type="string">"SELECT GROUP_CONCAT(group_id) FROM client_by_group "</literal>
	           <literal type="string">"WHERE client_id = ?;"</literal></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_CLIENTS</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Querying gravity database for client %s (getting groups)"</literal></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Prepare query</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>gravity_db</name></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>table_stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"get_client_groupids(\"%s\", \"%s\", %d) - SQL error prepare: %s"</literal></expr></argument>,
		     <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>chosen_match_id</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>table_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Bind hwaddr to prepared statement</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name>table_stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>chosen_match_id</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"get_client_groupids(\"%s\", \"%s\", %d): Failed to bind chosen_match_id: %s"</literal></expr></argument>,
			<argument><expr><name>ip</name></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>chosen_match_id</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>table_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>table_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Perform query</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>table_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SQLITE_ROW</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// There is a record for this client in the database</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>result</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>table_stmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>result</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>groupspos</name></name> <operator>=</operator> <call><name>addstr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>found_group</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SQLITE_DONE</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Found no record for this client in the database</comment>
		<comment type="line">// -&gt; No associated groups</comment>
		<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>groupspos</name></name> <operator>=</operator> <call><name>addstr</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>found_group</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"get_client_groupids(\"%s\", \"%s\", %d) - SQL error step: %s"</literal></expr></argument>,
		     <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>chosen_match_id</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>gravityDB_finalizeTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
	<comment type="line">// Finalize statement</comment>
	<expr_stmt><expr><call><name>gravityDB_finalizeTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_CLIENTS</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name>interface</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Gravity database: Client %s found (identified by interface %s). Using groups (%s)\n"</literal></expr></argument>,
			     <argument><expr><call><name>show_client_string</name><argument_list>(<argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>interface</name></expr></argument>, <argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>groupspos</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Gravity database: Client %s found. Using groups (%s)\n"</literal></expr></argument>,
			     <argument><expr><call><name>show_client_string</name><argument_list>(<argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>groupspos</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Free possibly allocated memory</comment>
	<if_stmt><if>if<condition>(<expr><name>hwaddr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hwaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>hwaddr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>hostname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>hostname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>interface</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>interface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>interface</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Return success</comment>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>malloc</name><operator>)</operator></expr></argument>)</argument_list> <name>get_client_names_from_ids</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>group_ids</name></expr></argument>)</argument_list>
<block>{<block_content>
	<comment type="line">// Build query string to get concatenated groups</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>querystr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querystr</name></expr></argument>, <argument><expr><literal type="string">"SELECT GROUP_CONCAT(ip) FROM client "</literal>
	                       <literal type="string">"WHERE id IN (%s);"</literal></expr></argument>, <argument><expr><name>group_ids</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"group_names(%s) - asprintf() error"</literal></expr></argument>, <argument><expr><name>group_ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Querying group names for IDs (%s)"</literal></expr></argument>, <argument><expr><name>group_ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Prepare query</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>gravity_db</name></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>table_stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"get_client_groupids(%s) - SQL error prepare: %s"</literal></expr></argument>,
		     <argument><expr><name>querystr</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>table_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>querystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"N/A"</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Perform query</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>table_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SQLITE_ROW</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// There is a record for this client in the database</comment>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>table_stmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"N/A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SQLITE_DONE</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Found no record for this client in the database</comment>
		<comment type="line">// -&gt; No associated groups</comment>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"N/A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"group_names(%s) - SQL error step: %s"</literal></expr></argument>,
		     <argument><expr><name>querystr</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>gravityDB_finalizeTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>querystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"N/A"</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></else></if_stmt>
	<comment type="line">// Finalize statement</comment>
	<expr_stmt><expr><call><name>gravityDB_finalizeTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>querystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<comment type="line">// Prepare statements for scanning white- and blacklist as well as gravit for one client</comment>
<function><type><name>bool</name></type> <name>gravityDB_prepare_client_statements</name><parameter_list>(<parameter><decl><type><name>clientsData</name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Return early if gravity database is not available</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>gravityDB_opened</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>gravityDB_open</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>clientip</name> <init>= <expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>ippos</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Initializing gravity statements for %s"</literal></expr></argument>, <argument><expr><name>clientip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Get associated groups for this client (if defined)</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>querystr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>client</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>found_group</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>get_client_groupids</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// Prepare whitelist statement</comment>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"gravityDB_open(): Preparing vw_whitelist statement for client %s"</literal></expr></argument>, <argument><expr><name>clientip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>querystr</name> <operator>=</operator> <call><name>get_client_querystr</name><argument_list>(<argument><expr><literal type="string">"vw_whitelist"</literal></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>groupspos</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>sqlite3_stmt</name><modifier>*</modifier></type> <name>stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_prepare_v3</name><argument_list>(<argument><expr><name>gravity_db</name></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_PREPARE_PERSISTENT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr> )</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"gravityDB_open(\"SELECT(... vw_whitelist ...)\") - SQL error prepare: %s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>gravityDB_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name><name>whitelist_stmt</name><operator>-&gt;</operator><name>set</name></name><argument_list>(<argument><expr><name>whitelist_stmt</name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>querystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Prepare gravity statement</comment>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"gravityDB_open(): Preparing vw_gravity statement for client %s"</literal></expr></argument>, <argument><expr><name>clientip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>querystr</name> <operator>=</operator> <call><name>get_client_querystr</name><argument_list>(<argument><expr><literal type="string">"vw_gravity"</literal></expr></argument>, <argument><expr><literal type="string">"domain"</literal></expr></argument>, <argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>groupspos</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v3</name><argument_list>(<argument><expr><name>gravity_db</name></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_PREPARE_PERSISTENT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr> )</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"gravityDB_open(\"SELECT(... vw_gravity ...)\") - SQL error prepare: %s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>gravityDB_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name><name>gravity_stmt</name><operator>-&gt;</operator><name>set</name></name><argument_list>(<argument><expr><name>gravity_stmt</name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>querystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Prepare blacklist statement</comment>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"gravityDB_open(): Preparing vw_blacklist statement for client %s"</literal></expr></argument>, <argument><expr><name>clientip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>querystr</name> <operator>=</operator> <call><name>get_client_querystr</name><argument_list>(<argument><expr><literal type="string">"vw_blacklist"</literal></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>groupspos</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v3</name><argument_list>(<argument><expr><name>gravity_db</name></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_PREPARE_PERSISTENT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr> )</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"gravityDB_open(\"SELECT(... vw_blacklist ...)\") - SQL error prepare: %s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>gravityDB_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name><name>blacklist_stmt</name><operator>-&gt;</operator><name>set</name></name><argument_list>(<argument><expr><name>blacklist_stmt</name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>querystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Finalize non-NULL prepared statements and set them to NULL for a given client</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gravityDB_finalize_client_statements</name><parameter_list>(<parameter><decl><type><name>clientsData</name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Finalizing gravity statements for %s"</literal></expr></argument>, <argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>ippos</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>whitelist_stmt</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
	   <call><name><name>whitelist_stmt</name><operator>-&gt;</operator><name>get</name></name><argument_list>(<argument><expr><name>whitelist_stmt</name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><call><name><name>whitelist_stmt</name><operator>-&gt;</operator><name>get</name></name><argument_list>(<argument><expr><name>whitelist_stmt</name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>whitelist_stmt</name><operator>-&gt;</operator><name>set</name></name><argument_list>(<argument><expr><name>whitelist_stmt</name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>blacklist_stmt</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
	   <call><name><name>blacklist_stmt</name><operator>-&gt;</operator><name>get</name></name><argument_list>(<argument><expr><name>blacklist_stmt</name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><call><name><name>blacklist_stmt</name><operator>-&gt;</operator><name>get</name></name><argument_list>(<argument><expr><name>blacklist_stmt</name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>blacklist_stmt</name><operator>-&gt;</operator><name>set</name></name><argument_list>(<argument><expr><name>blacklist_stmt</name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>gravity_stmt</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
	   <call><name><name>gravity_stmt</name><operator>-&gt;</operator><name>get</name></name><argument_list>(<argument><expr><name>gravity_stmt</name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><call><name><name>gravity_stmt</name><operator>-&gt;</operator><name>get</name></name><argument_list>(<argument><expr><name>gravity_stmt</name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>gravity_stmt</name><operator>-&gt;</operator><name>set</name></name><argument_list>(<argument><expr><name>gravity_stmt</name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Unset group found property to trigger a check next time the</comment>
	<comment type="line">// client sends a query</comment>
	<if_stmt><if>if<condition>(<expr><name>client</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>found_group</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// Close gravity database connection</comment>
<function><type><name>void</name></type> <name>gravityDB_close</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Return early if gravity database is not available</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>gravityDB_opened</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// Finalize prepared list statements for all clients</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>clientID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>clientID</name> <operator>&lt;</operator> <name><name>counters</name><operator>-&gt;</operator><name>clients</name></name></expr>;</condition> <incr><expr><name>clientID</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>clientsData</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><call><name>getClient</name><argument_list>(<argument><expr><name>clientID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>client</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>gravityDB_finalize_client_statements</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="line">// Free allocated memory for vectors of prepared client statements</comment>
	<expr_stmt><expr><call><name>free_sqlite3_stmt_vec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>whitelist_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free_sqlite3_stmt_vec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>blacklist_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free_sqlite3_stmt_vec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gravity_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Finalize audit list statement</comment>
	<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>auditlist_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>auditlist_stmt</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="line">// Close table</comment>
	<expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name>gravity_db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>gravity_db</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>gravityDB_opened</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Prepare a SQLite3 statement which can be used by gravityDB_getDomain() to get</comment>
<comment type="line">// blocking domains from a table which is specified when calling this function</comment>
<function><type><name>bool</name></type> <name>gravityDB_getTable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>gravityDB_opened</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>gravityDB_open</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"gravityDB_getTable(%u): Gravity database not available"</literal></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Checking for smaller than GRAVITY_LIST is omitted due to list being unsigned</comment>
	<if_stmt><if>if<condition>(<expr><name>list</name> <operator>&gt;=</operator> <name>UNKNOWN_TABLE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"gravityDB_getTable(%u): Requested list is not known!"</literal></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>querystr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<comment type="line">// Build correct query string to be used depending on list to be read</comment>
	<comment type="line">// We GROUP BY id as the view also includes the group_id leading to possible duplicates</comment>
	<comment type="line">// when domains are included in more than one group</comment>
	<if_stmt><if>if<condition>(<expr><name>list</name> <operator>==</operator> <name>GRAVITY_TABLE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>querystr</name> <operator>=</operator> <literal type="string">"SELECT DISTINCT domain FROM vw_gravity"</literal></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if<condition>(<expr><name>list</name> <operator>==</operator> <name>EXACT_BLACKLIST_TABLE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>querystr</name> <operator>=</operator> <literal type="string">"SELECT domain, id FROM vw_blacklist GROUP BY id"</literal></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if<condition>(<expr><name>list</name> <operator>==</operator> <name>EXACT_WHITELIST_TABLE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>querystr</name> <operator>=</operator> <literal type="string">"SELECT domain, id FROM vw_whitelist GROUP BY id"</literal></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if<condition>(<expr><name>list</name> <operator>==</operator> <name>REGEX_BLACKLIST_TABLE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>querystr</name> <operator>=</operator> <literal type="string">"SELECT domain, id FROM vw_regex_blacklist GROUP BY id"</literal></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if<condition>(<expr><name>list</name> <operator>==</operator> <name>REGEX_WHITELIST_TABLE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>querystr</name> <operator>=</operator> <literal type="string">"SELECT domain, id FROM vw_regex_whitelist GROUP BY id"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Prepare SQLite3 statement</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>gravity_db</name></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>table_stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"readGravity(%s) - SQL error prepare: %s"</literal></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>gravityDB_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Free allocated memory and return success</comment>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Get a single domain from a running SELECT operation</comment>
<comment type="line">// This function returns a pointer to a string as long</comment>
<comment type="line">// as there are domains available. Once we reached the</comment>
<comment type="line">// end of the table, it returns NULL. It also returns</comment>
<comment type="line">// NULL when it encounters an error (e.g., on reading</comment>
<comment type="line">// errors). Errors are logged to FTL.log</comment>
<comment type="line">// This function is performance critical as it might</comment>
<comment type="line">// be called millions of times for large blocking lists</comment>
<function><type><specifier>inline</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>gravityDB_getDomain</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rowid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Perform step</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>table_stmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Valid row</comment>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SQLITE_ROW</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>domain</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>table_stmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>rowid</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>rowid</name> <operator>=</operator> <call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>table_stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>domain</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Check for error. An error happened when the result is neither</comment>
	<comment type="line">// SQLITE_ROW (we returned earlier in this case), nor</comment>
	<comment type="line">// SQLITE_DONE (we are finished reading the table)</comment>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_DONE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"gravityDB_getDomain() - SQL error step: %s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>rowid</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>rowid</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Finished reading, nothing to get here</comment>
	<if_stmt><if>if<condition>(<expr><name>rowid</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>rowid</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Finalize statement of a gravity database transaction</comment>
<function><type><name>void</name></type> <name>gravityDB_finalizeTable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>gravityDB_opened</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// Finalize statement</comment>
	<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>table_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>table_stmt</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Get number of domains in a specified table of the gravity database We return</comment>
<comment type="line">// the constant DB_FAILED and log to FTL.log if we encounter any error</comment>
<function><type><name>int</name></type> <name>gravityDB_count</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>gravity_tables</name></name></type> <name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>gravityDB_opened</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>gravityDB_open</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"gravityDB_count(%d): Gravity database not available"</literal></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>DB_FAILED</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>querystr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<comment type="line">// Build query string to be used depending on list to be read</comment>
	<switch>switch <condition>(<expr><name>list</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>GRAVITY_TABLE</name></expr>:</case>
			<comment type="line">// We get the number of unique gravity domains as counted and stored by gravity. Counting the number</comment>
			<comment type="line">// of distinct domains in vw_gravity may take up to several minutes for very large blocking lists on</comment>
			<comment type="line">// very low-end devices such as the Raspierry Pi Zero</comment>
			<expr_stmt><expr><name>querystr</name> <operator>=</operator> <literal type="string">"SELECT value FROM info WHERE property = 'gravity_count';"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>EXACT_BLACKLIST_TABLE</name></expr>:</case>
			<expr_stmt><expr><name>querystr</name> <operator>=</operator> <literal type="string">"SELECT COUNT(DISTINCT domain) FROM vw_blacklist"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>EXACT_WHITELIST_TABLE</name></expr>:</case>
			<expr_stmt><expr><name>querystr</name> <operator>=</operator> <literal type="string">"SELECT COUNT(DISTINCT domain) FROM vw_whitelist"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>REGEX_BLACKLIST_TABLE</name></expr>:</case>
			<expr_stmt><expr><name>querystr</name> <operator>=</operator> <literal type="string">"SELECT COUNT(DISTINCT domain) FROM vw_regex_blacklist"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>REGEX_WHITELIST_TABLE</name></expr>:</case>
			<expr_stmt><expr><name>querystr</name> <operator>=</operator> <literal type="string">"SELECT COUNT(DISTINCT domain) FROM vw_regex_whitelist"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>UNKNOWN_TABLE</name></expr>:</case>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Error: List type %u unknown!"</literal></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>gravityDB_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>DB_FAILED</name></expr>;</return>
	</block_content>}</block></switch>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Querying count of distinct domains in gravity database table %s: %s"</literal></expr></argument>,
		     <argument><expr><name><name>tablename</name><index>[<expr><name>list</name></expr>]</index></name></expr></argument>, <argument><expr><name>querystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Prepare query</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>gravity_db</name></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>table_stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"gravityDB_count(%s) - SQL error prepare %s"</literal></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>gravityDB_finalizeTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>gravityDB_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>DB_FAILED</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Perform query</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>table_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_ROW</name></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"gravityDB_count(%s) - SQL error step %s"</literal></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>list</name> <operator>==</operator> <name>GRAVITY_TABLE</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Count of gravity domains not available. Please run pihole -g"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>gravityDB_finalizeTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>gravityDB_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>DB_FAILED</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Get result when there was no error</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>result</name> <init>= <expr><call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>table_stmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Finalize statement</comment>
	<expr_stmt><expr><call><name>gravityDB_finalizeTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"gravityDB_count(%d): %i entries in %s"</literal></expr></argument>,
		     <argument><expr><name>list</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>tablename</name><index>[<expr><name>list</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Return result</comment>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>db_result</name></name></type> <name>domain_in_list</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>domain</name></decl></parameter>, <parameter><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>listname</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>domain_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Do not try to bind text to statement when database is not available</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>gravityDB_opened</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>gravityDB_open</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Gravity database not available (%s)"</literal></expr></argument>, <argument><expr><name>listname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>LIST_NOT_AVAILABLE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="line">// Bind domain to prepared statement</comment>
	<comment type="line">// SQLITE_STATIC: Use the string without first duplicating it internally.</comment>
	<comment type="line">// We can do this as domain has dynamic scope that exceeds that of the binding.</comment>
	<comment type="line">// We need to bind the domain only once even to the prepared audit statement as:</comment>
	<comment type="line">//     When the same named SQL parameter is used more than once, second and</comment>
	<comment type="line">//     subsequent occurrences have the same index as the first occurrence.</comment>
	<comment type="line">//     (https://www.sqlite.org/c3ref/bind_blob.html)</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"domain_in_list(\"%s\", %p, %s): Failed to bind domain: %s"</literal></expr></argument>,
		     <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>listname</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>LIST_NOT_AVAILABLE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Perform step</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SQLITE_BUSY</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Database is busy</comment>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Gravity database is busy (%s)"</literal></expr></argument>, <argument><expr><name>listname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_clear_bindings</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>LIST_NOT_AVAILABLE</name></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_ROW</name> <operator>&amp;&amp;</operator> <name>rc</name> <operator>!=</operator> <name>SQLITE_DONE</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Any return code that is neither SQLITE_BUSY nor SQLITE_ROW or</comment>
		<comment type="line">// SQLITE_DONE is an error we should log</comment>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"domain_in_list(\"%s\", %p, %s): Failed to perform step: %s"</literal></expr></argument>,
		     <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>listname</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_clear_bindings</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>LIST_NOT_AVAILABLE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Get result of query (if available)</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>result</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>rc</name> <operator>==</operator> <name>SQLITE_ROW</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>domain_id</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>domain_id</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"domain_in_list(\"%s\", %p, %s): %d"</literal></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>listname</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// The sqlite3_reset() function is called to reset a prepared statement</comment>
	<comment type="line">// object back to its initial state, ready to be re-executed. Note: Any SQL</comment>
	<comment type="line">// statement variables that had values bound to them using the</comment>
	<comment type="line">// sqlite3_bind_*() API retain their values.</comment>
	<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Contrary to the intuition of many, sqlite3_reset() does not reset the</comment>
	<comment type="line">// bindings on a prepared statement. Use this routine to reset all host</comment>
	<comment type="line">// parameters to NULL.</comment>
	<expr_stmt><expr><call><name>sqlite3_clear_bindings</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Return if domain was found in current table</comment>
	<return>return <expr><ternary><condition><expr><operator>(</operator><name>rc</name> <operator>==</operator> <name>SQLITE_ROW</name><operator>)</operator></expr> ?</condition><then> <expr><name>FOUND</name></expr> </then><else>: <expr><name>NOT_FOUND</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gravityDB_reload_groups</name><parameter_list>(<parameter><decl><type><name>clientsData</name><modifier>*</modifier></type> <name>client</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Rebuild client table statements (possibly from a different group set)</comment>
	<expr_stmt><expr><call><name>gravityDB_finalize_client_statements</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>gravityDB_prepare_client_statements</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Reload regex for this client (possibly from a different group set)</comment>
	<expr_stmt><expr><call><name>reload_per_client_regex</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Check if this client needs a rechecking of group membership</comment>
<comment type="line">// This client may be identified by something that wasn't there on its first query (hostname, MAC address, interface)</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>gravityDB_client_check_again</name><parameter_list>(<parameter><decl><type><name>clientsData</name><modifier>*</modifier></type> <name>client</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>time_t</name></type> <name>diff</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>client</name><operator>-&gt;</operator><name>firstSeen</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>check_count</name> <init>= <expr><name><name>client</name><operator>-&gt;</operator><name>reread_groups</name></name> <operator>+</operator> <literal type="number">1u</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>check_count</name> <operator>&lt;=</operator> <name>NUM_RECHECKS</name> <operator>&amp;&amp;</operator> <name>diff</name> <operator>&gt;</operator> <name>check_count</name> <operator>*</operator> <name>RECHECK_DELAY</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ord</name> <init>= <expr><call><name>get_ordinal_suffix</name><argument_list>(<argument><expr><name>check_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_CLIENTS</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Reloading client groups after %u seconds (%u%s check)"</literal></expr></argument>,
			     <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>diff</name></expr></argument>, <argument><expr><name>check_count</name></expr></argument>, <argument><expr><name>ord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>reread_groups</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>gravityDB_reload_groups</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>db_result</name></name></type> <name>in_whitelist</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>domain</name></decl></parameter>, <parameter><decl><type><name>DNSCacheData</name> <modifier>*</modifier></type><name>dns_cache</name></decl></parameter>, <parameter><decl><type><name>clientsData</name><modifier>*</modifier></type> <name>client</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// If list statement is not ready and cannot be initialized (e.g. no</comment>
	<comment type="line">// access to the database), we return false to prevent an FTL crash</comment>
	<if_stmt><if>if<condition>(<expr><name>whitelist_stmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>LIST_NOT_AVAILABLE</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// Check if this client needs a rechecking of group membership</comment>
	<expr_stmt><expr><call><name>gravityDB_client_check_again</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Get whitelist statement from vector of prepared statements if available</comment>
	<decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><call><name><name>whitelist_stmt</name><operator>-&gt;</operator><name>get</name></name><argument_list>(<argument><expr><name>whitelist_stmt</name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// If client statement is not ready and cannot be initialized (e.g. no access to</comment>
	<comment type="line">// the database), we return false (not in whitelist) to prevent an FTL crash</comment>
	<if_stmt><if>if<condition>(<expr><name>stmt</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>gravityDB_prepare_client_statements</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"ERROR: Gravity database not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>LIST_NOT_AVAILABLE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Update statement if has just been initialized</comment>
	<if_stmt><if>if<condition>(<expr><name>stmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name><name>whitelist_stmt</name><operator>-&gt;</operator><name>get</name></name><argument_list>(<argument><expr><name>whitelist_stmt</name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// We have to check both the exact whitelist (using a prepared database statement)</comment>
	<comment type="line">// as well the compiled regex whitelist filters to check if the current domain is</comment>
	<comment type="line">// whitelisted.</comment>
	<return>return <expr><call><name>domain_in_list</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="string">"whitelist"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dns_cache</name><operator>-&gt;</operator><name>domainlist_id</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>db_result</name></name></type> <name>in_gravity</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>domain</name></decl></parameter>, <parameter><decl><type><name>clientsData</name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// If list statement is not ready and cannot be initialized (e.g. no</comment>
	<comment type="line">// access to the database), we return false to prevent an FTL crash</comment>
	<if_stmt><if>if<condition>(<expr><name>gravity_stmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>LIST_NOT_AVAILABLE</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// Check if this client needs a rechecking of group membership</comment>
	<expr_stmt><expr><call><name>gravityDB_client_check_again</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Get whitelist statement from vector of prepared statements</comment>
	<decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><call><name><name>gravity_stmt</name><operator>-&gt;</operator><name>get</name></name><argument_list>(<argument><expr><name>gravity_stmt</name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// If client statement is not ready and cannot be initialized (e.g. no access to</comment>
	<comment type="line">// the database), we return false (not in gravity list) to prevent an FTL crash</comment>
	<if_stmt><if>if<condition>(<expr><name>stmt</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>gravityDB_prepare_client_statements</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"ERROR: Gravity database not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>LIST_NOT_AVAILABLE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Update statement if has just been initialized</comment>
	<if_stmt><if>if<condition>(<expr><name>stmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name><name>gravity_stmt</name><operator>-&gt;</operator><name>get</name></name><argument_list>(<argument><expr><name>gravity_stmt</name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><call><name>domain_in_list</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="string">"gravity"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>db_result</name></name></type> <name>in_blacklist</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>domain</name></decl></parameter>, <parameter><decl><type><name>DNSCacheData</name> <modifier>*</modifier></type><name>dns_cache</name></decl></parameter>, <parameter><decl><type><name>clientsData</name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// If list statement is not ready and cannot be initialized (e.g. no</comment>
	<comment type="line">// access to the database), we return false to prevent an FTL crash</comment>
	<if_stmt><if>if<condition>(<expr><name>blacklist_stmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>LIST_NOT_AVAILABLE</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// Check if this client needs a rechecking of group membership</comment>
	<expr_stmt><expr><call><name>gravityDB_client_check_again</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Get whitelist statement from vector of prepared statements</comment>
	<decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><call><name><name>blacklist_stmt</name><operator>-&gt;</operator><name>get</name></name><argument_list>(<argument><expr><name>blacklist_stmt</name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// If client statement is not ready and cannot be initialized (e.g. no access to</comment>
	<comment type="line">// the database), we return false (not in blacklist) to prevent an FTL crash</comment>
	<if_stmt><if>if<condition>(<expr><name>stmt</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>gravityDB_prepare_client_statements</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"ERROR: Gravity database not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>LIST_NOT_AVAILABLE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Update statement if has just been initialized</comment>
	<if_stmt><if>if<condition>(<expr><name>stmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name><name>blacklist_stmt</name><operator>-&gt;</operator><name>get</name></name><argument_list>(<argument><expr><name>blacklist_stmt</name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><call><name>domain_in_list</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="string">"blacklist"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dns_cache</name><operator>-&gt;</operator><name>domainlist_id</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>in_auditlist</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>domain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// If audit list statement is not ready and cannot be initialized (e.g. no access</comment>
	<comment type="line">// to the database), we return false (not in audit list) to prevent an FTL crash</comment>
	<if_stmt><if>if<condition>(<expr><name>auditlist_stmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// We check the domain_audit table for the given domain</comment>
	<return>return <expr><call><name>domain_in_list</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><name>auditlist_stmt</name></expr></argument>, <argument><expr><literal type="string">"auditlist"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FOUND</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>gravityDB_get_regex_client_groups</name><parameter_list>(<parameter><decl><type><name>clientsData</name><modifier>*</modifier></type> <name>client</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>numregex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>regexData</name> <modifier>*</modifier></type><name>regex</name></decl></parameter>,
                                       <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_REGEX</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Getting regex client groups for client with ID %i"</literal></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>querystr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>client</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>found_group</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>get_client_groupids</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// Group filtering</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>groups</name> <init>= <expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>groupspos</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querystr</name></expr></argument>, <argument><expr><literal type="string">"SELECT id from %s WHERE group_id IN (%s);"</literal></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>groups</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"gravityDB_get_regex_client_groups(%s, %s) - asprintf() error"</literal></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>groups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Prepare query</comment>
	<decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>query_stmt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>gravity_db</name></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>query_stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"gravityDB_get_regex_client_groups(): %s - SQL error prepare: %s"</literal></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>gravityDB_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>querystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Perform query</comment>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_REGEX</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Regex %s: Querying groups for client %s: \"%s\""</literal></expr></argument>, <argument><expr><name><name>regextype</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>ippos</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>querystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<while>while<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>SQLITE_ROW</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>result</name> <init>= <expr><call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>regexID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>regexID</name> <operator>&lt;</operator> <name>numregex</name></expr>;</condition> <incr><expr><name>regexID</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name><name>regex</name><index>[<expr><name>regexID</name></expr>]</index></name><operator>.</operator><name>database_id</name> <operator>==</operator> <name>result</name></expr>)</condition>
			<block>{<block_content>
				<comment type="line">// Regular expressions are stored in one array</comment>
				<if_stmt><if>if<condition>(<expr><name>type</name> <operator>==</operator> <name>REGEX_WHITELIST</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>regexID</name> <operator>+=</operator> <call><name>get_num_regex</name><argument_list>(<argument><expr><name>REGEX_BLACKLIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><call><name>set_per_client_regex</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>regexID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_REGEX</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Regex %s: Enabling regex with DB ID %i for client %s"</literal></expr></argument>, <argument><expr><name><name>regextype</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>ippos</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></while>

	<comment type="line">// Finalize statement</comment>
	<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Free allocated memory and return result</comment>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>querystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>check_inaccessible_adlists</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

	<comment type="line">// check if any adlist was inaccessible in the last gravity run</comment>
	<comment type="line">// if so, gravity stored `status` in the adlist table with</comment>
	<comment type="line">// "3": List unavailable, Pi-hole used a local copy</comment>
	<comment type="line">// "4": List unavailable, there is no local copy available</comment>

	<comment type="line">// Do not proceed when database is not available</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>gravityDB_opened</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>gravityDB_open</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"check_inaccessible_adlists(): Gravity database not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>querystr</name> <init>= <expr><literal type="string">"SELECT id, address FROM adlist WHERE status IN (3,4) AND enabled=1"</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">// Prepare query</comment>
	<decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>query_stmt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>gravity_db</name></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>query_stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"check_inaccessible_adlists(): %s - SQL error prepare: %s"</literal></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>gravityDB_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Perform query</comment>
	<while>while<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>SQLITE_ROW</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// log to the message table</comment>
		<expr_stmt><expr><call><name>logg_inaccessible_adlist</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="line">// Finalize statement</comment>
	<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
