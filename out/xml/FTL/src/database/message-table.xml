<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/database/message-table.c"><comment type="block">/* Pi-hole: A black hole for Internet advertisements
*  (c) 2020 Pi-hole, LLC (https://pi-hole.net)
*  Network-wide ad blocking via your own hardware.
*
*  FTL Engine
*  Message table routines
*
*  This file is copyright under the latest version of the EUPL.
*  Please see LICENSE file for your rights under this license. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../FTL.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"message-table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<comment type="line">// logg()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../log.h"</cpp:file></cpp:include>
<comment type="line">// get_group_names()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gravity-db.h"</cpp:file></cpp:include>
<comment type="line">// cli_mode</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../args.h"</cpp:file></cpp:include>
<comment type="line">// cleanup()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../daemon.h"</cpp:file></cpp:include>
<comment type="line">// main_pid()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../signals.h"</cpp:file></cpp:include>
<comment type="line">// struct config</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../config.h"</cpp:file></cpp:include>
<comment type="line">// get_rate_limit_turnaround()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../gc.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>message_types</name><index>[<expr><name>MAX_MESSAGE</name></expr>]</index></name> <init>=
	<expr><block>{ <expr><literal type="string">"REGEX"</literal></expr>, <expr><literal type="string">"SUBNET"</literal></expr>, <expr><literal type="string">"HOSTNAME"</literal></expr>, <expr><literal type="string">"DNSMASQ_CONFIG"</literal></expr>, <expr><literal type="string">"RATE_LIMIT"</literal></expr>, <expr><literal type="string">"DNSMASQ_WARN"</literal></expr>, <expr><literal type="string">"LOAD"</literal></expr>, <expr><literal type="string">"SHMEM"</literal></expr>, <expr><literal type="string">"DISK"</literal></expr>, <expr><literal type="string">"ADLIST"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>message_blob_types</name><index>[<expr><name>MAX_MESSAGE</name></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>=
	<expr><block>{
		<expr><block>{	<comment type="line">// REGEX_MESSAGE: The message column contains the regex warning text</comment>
			<expr><name>SQLITE_TEXT</name></expr>, <comment type="line">// regex type ("blacklist", "whitelist")</comment>
			<expr><name>SQLITE_TEXT</name></expr>, <comment type="line">// regex text (the erroring regex filter itself)</comment>
			<expr><name>SQLITE_INTEGER</name></expr>, <comment type="line">// database index of regex (so the dashboard can show a link)</comment>
			<expr><name>SQLITE_NULL</name></expr>, <comment type="line">// not used</comment>
			<expr><name>SQLITE_NULL</name></expr> <comment type="line">// not used</comment>
		}</block></expr>,
		<expr><block>{	<comment type="line">// SUBNET_MESSAGE: The message column contains the IP address of the client in question</comment>
			<expr><name>SQLITE_INTEGER</name></expr>, <comment type="line">// number of matching</comment>
			<expr><name>SQLITE_TEXT</name></expr>, <comment type="line">// comma-separated list of matching subnets (text representation)</comment>
			<expr><name>SQLITE_TEXT</name></expr>, <comment type="line">// comma-separated list of matching subnets (database IDs)</comment>
			<expr><name>SQLITE_TEXT</name></expr>, <comment type="line">// chosen subnet (text representation)</comment>
			<expr><name>SQLITE_INTEGER</name></expr> <comment type="line">// chosen subnet (database ID)</comment>
		}</block></expr>,
		<expr><block>{	<comment type="line">// HOSTNAME_MESSAGE: The message column contains the IP address of the device</comment>
			<expr><name>SQLITE_TEXT</name></expr>, <comment type="line">// Obtained host name</comment>
			<expr><name>SQLITE_INTEGER</name></expr>, <comment type="line">// Position of error in string</comment>
			<expr><name>SQLITE_NULL</name></expr>, <comment type="line">// not used</comment>
			<expr><name>SQLITE_NULL</name></expr>, <comment type="line">// not used</comment>
			<expr><name>SQLITE_NULL</name></expr> <comment type="line">// not used</comment>
		}</block></expr>,
		<expr><block>{	<comment type="line">// DNSMASQ_CONFIG_MESSAGE: The message column contains the full message itself</comment>
			<expr><name>SQLITE_NULL</name></expr>, <comment type="line">// Not used</comment>
			<expr><name>SQLITE_NULL</name></expr>, <comment type="line">// Not used</comment>
			<expr><name>SQLITE_NULL</name></expr>, <comment type="line">// Not used</comment>
			<expr><name>SQLITE_NULL</name></expr>, <comment type="line">// Not used</comment>
			<expr><name>SQLITE_NULL</name></expr>  <comment type="line">// Not used</comment>
		}</block></expr>,
		<expr><block>{	<comment type="line">// RATE_LIMIT_MESSAGE: The message column contains the IP address of the client in question</comment>
			<expr><name>SQLITE_INTEGER</name></expr>, <comment type="line">// Configured maximum number of queries</comment>
			<expr><name>SQLITE_INTEGER</name></expr>, <comment type="line">// Configured rate-limiting interval [seconds]</comment>
			<expr><name>SQLITE_NULL</name></expr>, <comment type="line">// Not used</comment>
			<expr><name>SQLITE_NULL</name></expr>, <comment type="line">// Not used</comment>
			<expr><name>SQLITE_NULL</name></expr>  <comment type="line">// Not used</comment>
		}</block></expr>,
		<expr><block>{	<comment type="line">// DNSMASQ_WARN_MESSAGE: The message column contains the full message itself</comment>
			<expr><name>SQLITE_NULL</name></expr>, <comment type="line">// Not used</comment>
			<expr><name>SQLITE_NULL</name></expr>, <comment type="line">// Not used</comment>
			<expr><name>SQLITE_NULL</name></expr>, <comment type="line">// Not used</comment>
			<expr><name>SQLITE_NULL</name></expr>, <comment type="line">// Not used</comment>
			<expr><name>SQLITE_NULL</name></expr>  <comment type="line">// Not used</comment>
		}</block></expr>,
		<expr><block>{	<comment type="line">// LOAD_MESSAGE: The message column contains a general message</comment>
			<expr><name>SQLITE_FLOAT</name></expr>, <comment type="line">// 15min load average</comment>
			<expr><name>SQLITE_INTEGER</name></expr>, <comment type="line">// Number of cores</comment>
			<expr><name>SQLITE_NULL</name></expr>, <comment type="line">// Not used</comment>
			<expr><name>SQLITE_NULL</name></expr>, <comment type="line">// Not used</comment>
			<expr><name>SQLITE_NULL</name></expr>  <comment type="line">// Not used</comment>
		}</block></expr>,
		<expr><block>{	<comment type="line">// SHMEM_MESSAGE: The message column contains the corresponding path</comment>
			<expr><name>SQLITE_INTEGER</name></expr>, <comment type="line">// Percentage currently used</comment>
			<expr><name>SQLITE_TEXT</name></expr>, <comment type="line">// Human-readable details about memory/disk usage</comment>
			<expr><name>SQLITE_NULL</name></expr>, <comment type="line">// Not used</comment>
			<expr><name>SQLITE_NULL</name></expr>, <comment type="line">// Not used</comment>
			<expr><name>SQLITE_NULL</name></expr>  <comment type="line">// Not used</comment>
		}</block></expr>,
		<expr><block>{	<comment type="line">// DISK_MESSAGE: The message column contains the corresponding path</comment>
			<expr><name>SQLITE_INTEGER</name></expr>, <comment type="line">// Percentage currently used</comment>
			<expr><name>SQLITE_TEXT</name></expr>, <comment type="line">// Human-readable details about memory/disk usage</comment>
			<expr><name>SQLITE_NULL</name></expr>, <comment type="line">// Not used</comment>
			<expr><name>SQLITE_NULL</name></expr>, <comment type="line">// Not used</comment>
			<expr><name>SQLITE_NULL</name></expr>  <comment type="line">// Not used</comment>
		}</block></expr>,
		<expr><block>{	<comment type="line">// INACCESSIBLE_ADLIST_MESSAGE: The message column contains the corresponding adlist URL</comment>
			<expr><name>SQLITE_INTEGER</name></expr>, <comment type="line">// database index of the adlist (so the dashboard can show a link)</comment>
			<expr><name>SQLITE_NULL</name></expr>, <comment type="line">// not used</comment>
			<expr><name>SQLITE_NULL</name></expr>, <comment type="line">// not used</comment>
			<expr><name>SQLITE_NULL</name></expr>, <comment type="line">// not used</comment>
			<expr><name>SQLITE_NULL</name></expr> <comment type="line">// not used</comment>
		}</block></expr>,
	}</block></expr></init></decl>;</decl_stmt>
<comment type="line">// Create message table in the database</comment>
<function><type><name>bool</name></type> <name>create_message_table</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// The blob fields can hold arbitrary data. Their type is specified through the type.</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"CREATE TABLE message ( id INTEGER PRIMARY KEY AUTOINCREMENT, "</literal>
	                                    <literal type="string">"timestamp INTEGER NOT NULL, "</literal>
	                                    <literal type="string">"type TEXT NOT NULL, "</literal>
	                                    <literal type="string">"message TEXT NOT NULL, "</literal>
	                                    <literal type="string">"blob1 BLOB, "</literal>
	                                    <literal type="string">"blob2 BLOB, "</literal>
	                                    <literal type="string">"blob3 BLOB, "</literal>
	                                    <literal type="string">"blob4 BLOB, "</literal>
	                                    <literal type="string">"blob5 BLOB );"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Update database version to 6</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>db_set_FTL_property</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>DB_VERSION</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"create_message_table(): Failed to update database version!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Flush message table</comment>
<function><type><name>bool</name></type> <name>flush_message_table</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Return early if database is known to be broken</comment>
	<if_stmt><if>if<condition>(<expr><call><name>FTLDBerror</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
	<comment type="line">// Open database connection</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>db</name> <operator>=</operator> <call><name>dbopen</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"flush_message_table() - Failed to open DB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Flush message table</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"DELETE FROM message;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Close database connection</comment>
	<expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>add_message</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>message_type</name></name></type> <name>type</name></decl></parameter>,
                        <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>count</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>okay</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<comment type="line">// Return early if database is known to be broken</comment>
	<if_stmt><if>if<condition>(<expr><call><name>FTLDBerror</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
	<comment type="line">// Open database connection</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>db</name> <operator>=</operator> <call><name>dbopen</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"add_message() - Failed to open DB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Ensure there are no duplicates when adding messages</comment>
	<decl_stmt><decl><type><name>sqlite3_stmt</name><modifier>*</modifier></type> <name>stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>querystr</name> <init>= <expr><literal type="string">"DELETE FROM message WHERE type = ?1 AND message = ?2"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"add_message(type=%u, message=%s) - SQL error prepare DELETE: %s"</literal></expr></argument>,
			<argument><expr><name>type</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>end_of_add_message</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Bind type to prepared statement</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>message_types</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"add_message(type=%u, message=%s) - Failed to bind type DELETE: %s"</literal></expr></argument>,
			<argument><expr><name>type</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>end_of_add_message</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Bind message to prepared statement</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"add_message(type=%u, message=%s) - Failed to bind message DELETE: %s"</literal></expr></argument>,
			<argument><expr><name>type</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>end_of_add_message</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Execute and finalize</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>rc</name> <operator>!=</operator> <name>SQLITE_DONE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"add_message(type=%u, message=%s) - SQL error step DELETE: %s"</literal></expr></argument>,
			<argument><expr><name>type</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>end_of_add_message</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>sqlite3_clear_bindings</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>stmt</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="line">// Prepare SQLite statement</comment>
	<expr_stmt><expr><name>querystr</name> <operator>=</operator> <literal type="string">"INSERT INTO message (timestamp,type,message,blob1,blob2,blob3,blob4,blob5) "</literal>
	           <literal type="string">"VALUES ((cast(strftime('%s', 'now') as int)),?,?,?,?,?,?,?);"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr> )</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"add_message(type=%u, message=%s) - SQL error prepare: %s"</literal></expr></argument>,
		     <argument><expr><name>type</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>end_of_add_message</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Bind type to prepared statement</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>message_types</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"add_message(type=%u, message=%s) - Failed to bind type: %s"</literal></expr></argument>,
		     <argument><expr><name>type</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>end_of_add_message</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Bind message to prepared statement</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"add_message(type=%u, message=%s) - Failed to bind message: %s"</literal></expr></argument>,
		     <argument><expr><name>type</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>end_of_add_message</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>datatype</name> <init>= <expr><name><name>message_blob_types</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<switch>switch <condition>(<expr><name>datatype</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>SQLITE_INTEGER</name></expr>:</case>
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>SQLITE_FLOAT</name></expr>:</case>
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_double</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>SQLITE_TEXT</name></expr>:</case>
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>SQLITE_NULL</name></expr>:</case> <comment type="block">/* Fall through */</comment>
			<default>default:</default>
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_null</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch>

		<comment type="line">// Bind message to prepared statement</comment>
		<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"add_message(type=%u, message=%s) - Failed to bind argument %u (type %u): %s"</literal></expr></argument>,
			     <argument><expr><name>type</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><name>datatype</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>end_of_add_message</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Step and check if successful</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_DONE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Encountered error while trying to store message in long-term database: %s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>end_of_add_message</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Final database handling</comment>
	<expr_stmt><expr><call><name>sqlite3_clear_bindings</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>okay</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<label><name>end_of_add_message</name>:</label> <comment type="line">// Close database connection</comment>
	<expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>okay</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>logg_regex_warning</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>warning</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>dbindex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>regex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Only log regex errors/warnings in the main process to prevent errors</comment>
	<comment type="line">// being added multiple times to the database when a TCP worker</comment>
	<comment type="line">// (re)compiles a faulty regex</comment>
	<if_stmt><if>if<condition>(<expr><call><name>getpid</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name>main_pid</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// Log to FTL.log</comment>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"REGEX WARNING: Invalid regex %s filter \"%s\": %s"</literal></expr></argument>,
	     <argument><expr><name>type</name></expr></argument>, <argument><expr><name>regex</name></expr></argument>, <argument><expr><name>warning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Log to database only if not in CLI mode</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>cli_mode</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>add_message</name><argument_list>(<argument><expr><name>REGEX_MESSAGE</name></expr></argument>, <argument><expr><name>warning</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>regex</name></expr></argument>, <argument><expr><name>dbindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>logg_subnet_warning</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>matching_count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>matching_ids</name></decl></parameter>,
                         <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>matching_bits</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>chosen_match_text</name></decl></parameter>,
                         <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>chosen_match_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Log to FTL.log</comment>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"SUBNET WARNING: Client %s is managed by %i groups (IDs %s), all describing /%i subnets. "</literal>
	     <literal type="string">"FTL chose the most recent entry %s (ID %i) for this client."</literal></expr></argument>,
	     <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>matching_count</name></expr></argument>, <argument><expr><name>matching_ids</name></expr></argument>, <argument><expr><name>matching_bits</name></expr></argument>,
	     <argument><expr><name>chosen_match_text</name></expr></argument>, <argument><expr><name>chosen_match_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Log to database</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>names</name> <init>= <expr><call><name>get_client_names_from_ids</name><argument_list>(<argument><expr><name>matching_ids</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>add_message</name><argument_list>(<argument><expr><name>SUBNET_MESSAGE</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>matching_count</name></expr></argument>, <argument><expr><name>names</name></expr></argument>, <argument><expr><name>matching_ids</name></expr></argument>, <argument><expr><name>chosen_match_text</name></expr></argument>, <argument><expr><name>chosen_match_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>logg_hostname_warning</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Log to FTL.log</comment>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"HOSTNAME WARNING: Host name of client \"%s\" =&gt; \"%s\" contains (at least) one invalid character at position %d"</literal></expr></argument>,
	     <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Log to database</comment>
	<expr_stmt><expr><call><name>add_message</name><argument_list>(<argument><expr><name>HOSTNAME_MESSAGE</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>int</name><operator>)</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>logg_fatal_dnsmasq_message</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Log to FTL.log</comment>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"FATAL ERROR in dnsmasq core: %s"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Log to database</comment>
	<expr_stmt><expr><call><name>add_message</name><argument_list>(<argument><expr><name>DNSMASQ_CONFIG_MESSAGE</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// FTL will dies after this point, so we should make sure to clean up</comment>
	<comment type="line">// behind ourselves</comment>
	<expr_stmt><expr><call><name>cleanup</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>logg_rate_limit_message</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>clientIP</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>rate_limit_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>time_t</name></type> <name>turnaround</name> <init>= <expr><call><name>get_rate_limit_turnaround</name><argument_list>(<argument><expr><name>rate_limit_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Log to FTL.log</comment>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Rate-limiting %s for at least %ld second%s"</literal></expr></argument>,
	     <argument><expr><name>clientIP</name></expr></argument>, <argument><expr><name>turnaround</name></expr></argument>, <argument><expr><ternary><condition><expr><name>turnaround</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"s"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Log to database</comment>
	<expr_stmt><expr><call><name>add_message</name><argument_list>(<argument><expr><name>RATE_LIMIT_MESSAGE</name></expr></argument>, <argument><expr><name>clientIP</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>rate_limit</name><operator>.</operator><name>count</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>rate_limit</name><operator>.</operator><name>interval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>logg_warn_dnsmasq_message</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Log to FTL.log</comment>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"WARNING in dnsmasq core: %s"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Log to database</comment>
	<expr_stmt><expr><call><name>add_message</name><argument_list>(<argument><expr><name>DNSMASQ_WARN_MESSAGE</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>log_resource_shortage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>double</name></type> <name>load</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>nprocs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>shmem</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>disk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>load</name> <operator>&gt;</operator> <literal type="number">0.0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"WARNING: Long-term load (15min avg) larger than number of processors: %.1f &gt; %d"</literal></expr></argument>, <argument><expr><name>load</name></expr></argument>, <argument><expr><name>nprocs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>add_message</name><argument_list>(<argument><expr><name>LOAD_MESSAGE</name></expr></argument>, <argument><expr><literal type="string">"excessive load"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>load</name></expr></argument>, <argument><expr><name>nprocs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><name>shmem</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"WARNING: RAM shortage (%s) ahead: %d%% is used (%s)"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>shmem</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>add_message</name><argument_list>(<argument><expr><name>SHMEM_MESSAGE</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>shmem</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><name>disk</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"WARNING: Disk shortage (%s) ahead: %d%% is used (%s)"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>disk</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>add_message</name><argument_list>(<argument><expr><name>DISK_MESSAGE</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>disk</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>logg_inaccessible_adlist</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>dbindex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Log to FTL.log</comment>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"ADLIST WARNING: Adlist with ID %d (%s) was inaccessible during last gravity run"</literal></expr></argument>, <argument><expr><name>dbindex</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Log to database</comment>
	<expr_stmt><expr><call><name>add_message</name><argument_list>(<argument><expr><name>INACCESSIBLE_ADLIST_MESSAGE</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dbindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
