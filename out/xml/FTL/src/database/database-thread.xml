<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/database/database-thread.c"><comment type="block">/* Pi-hole: A black hole for Internet advertisements
*  (c) 2017 Pi-hole, LLC (https://pi-hole.net)
*  Network-wide ad blocking via your own hardware.
*
*  FTL Engine
*  Database thread
*
*  This file is copyright under the latest version of the EUPL.
*  Please see LICENSE file for your rights under this license. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../FTL.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"database-thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<comment type="line">// [un]lock_shm();</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../shmem.h"</cpp:file></cpp:include>
<comment type="line">// parse_neighbor_cache()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-table.h"</cpp:file></cpp:include>
<comment type="line">// DB_save_queries()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query-table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../timers.h"</cpp:file></cpp:include>
<comment type="line">// global variable killed</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../signals.h"</cpp:file></cpp:include>
<comment type="line">// reimport_aliasclients()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aliasclients.h"</cpp:file></cpp:include>
<comment type="line">// Eventqueue routines</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../events.h"</cpp:file></cpp:include>
<comment type="line">// check_blocking_status()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../setupVars.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBOPEN_OR_AGAIN</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>{ db = dbopen(false); if(db == NULL) { thread_sleepms(DB, 5000); continue; } }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BREAK_IF_KILLED</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>{ if(killed) break; }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBCLOSE_OR_BREAK</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>{ dbclose(&amp;db); BREAK_IF_KILLED(); }</cpp:value></cpp:define>

<function><type><name>void</name> <modifier>*</modifier></type><name>DB_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Set thread name</comment>
	<expr_stmt><expr><name><name>thread_names</name><index>[<expr><name>DB</name></expr>]</index></name> <operator>=</operator> <literal type="string">"database"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>prctl</name><argument_list>(<argument><expr><name>PR_SET_NAME</name></expr></argument>, <argument><expr><name><name>thread_names</name><index>[<expr><name>DB</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Save timestamp as we do not want to store immediately</comment>
	<comment type="line">// to the database</comment>
	<decl_stmt><decl><type><name>time_t</name></type> <name>lastDBsave</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>%</operator><name><name>config</name><operator>.</operator><name>DBinterval</name></name></expr></init></decl>;</decl_stmt>

	<comment type="line">// This thread runs until shutdown of the process. We keep this thread</comment>
	<comment type="line">// running when pihole-FTL.db is corrupted because reloading of privacy</comment>
	<comment type="line">// level, and the gravity database (initially and after gravity)</comment>
	<while>while<condition>(<expr><operator>!</operator><name>killed</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>time_t</name></type> <name>now</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>now</name> <operator>-</operator> <name>lastDBsave</name> <operator>&gt;=</operator> <name><name>config</name><operator>.</operator><name>DBinterval</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Update lastDBsave timer</comment>
			<expr_stmt><expr><name>lastDBsave</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>%</operator><name><name>config</name><operator>.</operator><name>DBinterval</name></name></expr>;</expr_stmt>

			<comment type="line">// Save data to database (if enabled)</comment>
			<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>DBexport</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>DBOPEN_OR_AGAIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>lock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>DB_save_queries</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>unlock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

				<comment type="line">// Check if GC should be done on the database</comment>
				<if_stmt><if>if<condition>(<expr><name>DBdeleteoldqueries</name> <operator>&amp;&amp;</operator> <name><name>config</name><operator>.</operator><name>maxDBdays</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
				<block>{<block_content>
					<comment type="line">// No thread locks needed</comment>
					<expr_stmt><expr><call><name>delete_old_queries_in_DB</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>DBdeleteoldqueries</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><call><name>DBCLOSE_OR_BREAK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="line">// Parse neighbor cache (fill network table) if enabled</comment>
			<if_stmt><if>if <condition>(<expr><name><name>config</name><operator>.</operator><name>parse_arp_cache</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>set_event</name><argument_list>(<argument><expr><name>PARSE_NEIGHBOR_CACHE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Update MAC vendor strings once a month (the MAC vendor</comment>
		<comment type="line">// database is not updated very often)</comment>
		<if_stmt><if>if<condition>(<expr><name>now</name> <operator>%</operator> <literal type="number">2592000L</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>DBOPEN_OR_AGAIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>updateMACVendorRecords</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>DBCLOSE_OR_BREAK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Parse ARP cache if requested</comment>
		<if_stmt><if>if<condition>(<expr><call><name>get_and_clear_event</name><argument_list>(<argument><expr><name>PARSE_NEIGHBOR_CACHE</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>DBOPEN_OR_AGAIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>parse_neighbor_cache</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>DBCLOSE_OR_BREAK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Import alias-clients</comment>
		<if_stmt><if>if<condition>(<expr><call><name>get_and_clear_event</name><argument_list>(<argument><expr><name>REIMPORT_ALIASCLIENTS</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>DBOPEN_OR_AGAIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>lock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>reimport_aliasclients</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>unlock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>DBCLOSE_OR_BREAK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Process database related event queue elements</comment>
		<if_stmt><if>if<condition>(<expr><call><name>get_and_clear_event</name><argument_list>(<argument><expr><name>RELOAD_GRAVITY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FTL_reload_all_domainlists</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>BREAK_IF_KILLED</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Reload privacy level from pihole-FTL.conf</comment>
		<if_stmt><if>if<condition>(<expr><call><name>get_and_clear_event</name><argument_list>(<argument><expr><name>RELOAD_PRIVACY_LEVEL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>get_privacy_level</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>BREAK_IF_KILLED</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Inspect setupVars.conf to see if Pi-hole blocking is enabled</comment>
		<if_stmt><if>if<condition>(<expr><call><name>get_and_clear_event</name><argument_list>(<argument><expr><name>RELOAD_BLOCKINGSTATUS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>check_blocking_status</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>BREAK_IF_KILLED</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Sleep 0.1 sec</comment>
		<expr_stmt><expr><call><name>thread_sleepms</name><argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Terminating database thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
