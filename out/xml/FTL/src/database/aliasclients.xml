<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/database/aliasclients.c"><comment type="block">/* Pi-hole: A black hole for Internet advertisements
*  (c) 2020 Pi-hole, LLC (https://pi-hole.net)
*  Network-wide ad blocking via your own hardware.
*
*  FTL Engine
*  Super client table routines
*
*  This file is copyright under the latest version of the EUPL.
*  Please see LICENSE file for your rights under this license. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../FTL.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aliasclients.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<comment type="line">// global counters variable</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../shmem.h"</cpp:file></cpp:include>
<comment type="line">// global config variable</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../config.h"</cpp:file></cpp:include>
<comment type="line">// logg()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../log.h"</cpp:file></cpp:include>
<comment type="line">// getAliasclientIDfromIP()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-table.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>create_aliasclients_table</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Create aliasclient table in the database</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"CREATE TABLE aliasclient (id INTEGER PRIMARY KEY NOT NULL, "</literal> \
	                                       <literal type="string">"name TEXT NOT NULL, "</literal> \
	                                       <literal type="string">"comment TEXT);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Add aliasclient_id to network table</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"ALTER TABLE network ADD COLUMN aliasclient_id INTEGER;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Update database version to 9</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>db_set_FTL_property</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>DB_VERSION</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"create_aliasclients_table(): Failed to update database version!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Recompute the alias-client's values</comment>
<comment type="line">// We shouldn't do this too often as it iterates over all existing clients</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>recompute_aliasclient</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>aliasclientID</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>clientsData</name> <modifier>*</modifier></type><name>aliasclient</name> <init>= <expr><call><name>getClient</name><argument_list>(<argument><expr><name>aliasclientID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_ALIASCLIENTS</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Recomputing alias-client \"%s\" (%s)..."</literal></expr></argument>,
		     <argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>aliasclient</name><operator>-&gt;</operator><name>namepos</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>aliasclient</name><operator>-&gt;</operator><name>ippos</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Reset this alias-client</comment>
	<expr_stmt><expr><name><name>aliasclient</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>aliasclient</name><operator>-&gt;</operator><name>blockedcount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>aliasclient</name><operator>-&gt;</operator><name>overTime</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>aliasclient</name><operator>-&gt;</operator><name>overTime</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Loop over all existing clients to find which clients are associated to this one</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>clientID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>clientID</name> <operator>&lt;</operator> <name><name>counters</name><operator>-&gt;</operator><name>clients</name></name></expr>;</condition> <incr><expr><name>clientID</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="line">// Get pointer to client candidate</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>clientsData</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><call><name>getClient</name><argument_list>(<argument><expr><name>clientID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// Skip invalid clients and alias-clients</comment>
		<if_stmt><if>if<condition>(<expr><name>client</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>client</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>aliasclient</name></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// Skip clients that are not managed by this aliasclient</comment>
		<if_stmt><if>if<condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>aliasclient_id</name></name> <operator>!=</operator> <name>aliasclientID</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_ALIASCLIENTS</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Client \"%s\" (%s) NOT managed by this alias-client, skipping"</literal></expr></argument>,
				     <argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>namepos</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>ippos</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Debug logging</comment>
		<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_ALIASCLIENTS</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Client \"%s\" (%s) IS  managed by this alias-client, adding counts"</literal></expr></argument>,
					<argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>namepos</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>ippos</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Add counts of this client to the alias-client</comment>
		<expr_stmt><expr><name><name>aliasclient</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <name><name>client</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>aliasclient</name><operator>-&gt;</operator><name>blockedcount</name></name> <operator>+=</operator> <name><name>client</name><operator>-&gt;</operator><name>blockedcount</name></name></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>OVERTIME_SLOTS</name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>aliasclient</name><operator>-&gt;</operator><name>overTime</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>+=</operator> <name><name>client</name><operator>-&gt;</operator><name>overTime</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// Store hostname of device identified by dbID</comment>
<function><type><name>bool</name></type> <name>import_aliasclients</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Return early if database is known to be broken</comment>
	<if_stmt><if>if<condition>(<expr><call><name>FTLDBerror</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>querystr</name><index>[]</index></name> <init>= <expr><literal type="string">"SELECT id,name FROM aliasclient"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"import_aliasclients() - SQL error prepare: %s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Loop until no further data is available</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>imported</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_DONE</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Check if we ran into an error</comment>
		<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_ROW</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"import_aliasclients() - SQL error step: %s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Get hardware address from database and store it as IP + MAC address of this client</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>aliasclient_id</name> <init>= <expr><call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Create a new (super-)client</comment>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>aliasclient_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aliasclient_str</name></expr></argument>, <argument><expr><literal type="string">"aliasclient-%i"</literal></expr></argument>, <argument><expr><name>aliasclient_id</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Memory error in import_aliasclients()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Try to open existing client</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>clientID</name> <init>= <expr><call><name>findClientID</name><argument_list>(<argument><expr><name>aliasclient_str</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>clientsData</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><call><name>getClient</name><argument_list>(<argument><expr><name>clientID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>client</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>aliasclient_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Set client flags</comment>
		<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>new</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

		<comment type="line">// Reset counter</comment>
		<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<comment type="line">// Store intended name</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>namepos</name></name> <operator>=</operator> <call><name>addstr</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// This is a aliasclient</comment>
		<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>aliasclient</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>aliasclient_id</name></name> <operator>=</operator> <name>aliasclient_id</name></expr>;</expr_stmt>

		<comment type="line">// Debug logging</comment>
		<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_ALIASCLIENTS</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Added alias-client \"%s\" (%s) with FTL ID %i"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>aliasclient_str</name></expr></argument>, <argument><expr><name>clientID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>aliasclient_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>imported</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="line">// Finalize statement</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"import_aliasclients() - SQL error finalize: %s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Imported %d alias-client%s"</literal></expr></argument>, <argument><expr><name>imported</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>imported</name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"s"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_aliasclient_ID</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>clientsData</name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Skip alias-clients themselves</comment>
	<if_stmt><if>if<condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>aliasclient</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>clientIP</name> <init>= <expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>ippos</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_ALIASCLIENTS</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   Looking for the alias-client for client %s..."</literal></expr></argument>,
		     <argument><expr><name>clientIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Get aliasclient ID from database (DB index)</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>aliasclient_DBid</name> <init>= <expr><call><name>getAliasclientIDfromIP</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>clientIP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Compare DB index for all alias-clients stored in FTL</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>aliasclientID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init>;</init> <condition><expr><name>aliasclientID</name> <operator>&lt;</operator> <name><name>counters</name><operator>-&gt;</operator><name>clients</name></name></expr>;</condition> <incr><expr><name>aliasclientID</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="line">// Get pointer to alias client candidate</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>clientsData</name> <modifier>*</modifier></type><name>alias_client</name> <init>= <expr><call><name>getClient</name><argument_list>(<argument><expr><name>aliasclientID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Skip clients that are not alias-clients</comment>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>alias_client</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>aliasclient</name></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// Compare MAC address of the current client to the</comment>
		<comment type="line">// alias client candidate's MAC address</comment>
		<if_stmt><if>if<condition>(<expr><name><name>alias_client</name><operator>-&gt;</operator><name>aliasclient_id</name></name> <operator>==</operator> <name>aliasclient_DBid</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_ALIASCLIENTS</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   -&gt; \"%s\" (%s)"</literal></expr></argument>,
				     <argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>alias_client</name><operator>-&gt;</operator><name>namepos</name></name></expr></argument>)</argument_list></call></expr></argument>,
				     <argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>alias_client</name><operator>-&gt;</operator><name>ippos</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<return>return <expr><name>aliasclientID</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_ALIASCLIENTS</name> <operator>&amp;&amp;</operator> <name>aliasclientID</name> <operator>==</operator> <name><name>counters</name><operator>-&gt;</operator><name>clients</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   -&gt; not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Not found</comment>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>reset_aliasclient</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>clientsData</name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Return early if database is known to be broken</comment>
	<if_stmt><if>if<condition>(<expr><call><name>FTLDBerror</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// Open pihole-FTL.db database file if needed</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>db_opened</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>db</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><operator>(</operator><name>db</name> <operator>=</operator> <call><name>dbopen</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"reimport_aliasclients() - Failed to open DB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Successful</comment>
		<expr_stmt><expr><name>db_opened</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Skip alias-clients themselves</comment>
	<if_stmt><if>if<condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>aliasclient</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// Find corresponding alias-client (if any)</comment>
	<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>aliasclient_id</name></name> <operator>=</operator> <call><name>get_aliasclient_ID</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Close the database if we opened it here</comment>
	<if_stmt><if>if<condition>(<expr><name>db_opened</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Skip if there is no responsible alias-client</comment>
	<if_stmt><if>if<condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>aliasclient_id</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// Recompute all values for this alias-client</comment>
	<expr_stmt><expr><call><name>recompute_aliasclient</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>aliasclient_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Return a list of clients linked to the current alias-client</comment>
<comment type="line">// The first element contains the number of following IDs</comment>
<function><type><name>int</name> <modifier>*</modifier></type><name>get_aliasclient_list</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>aliasclientID</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<comment type="line">// Loop over all existing clients to count associated clients</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>clientID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>clientID</name> <operator>&lt;</operator> <name><name>counters</name><operator>-&gt;</operator><name>clients</name></name></expr>;</condition> <incr><expr><name>clientID</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="line">// Get pointer to client candidate</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>clientsData</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><call><name>getClient</name><argument_list>(<argument><expr><name>clientID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// Skip invalid clients and those that are not managed by this aliasclient</comment>
		<if_stmt><if>if<condition>(<expr><name>client</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>client</name><operator>-&gt;</operator><name>aliasclient_id</name></name> <operator>!=</operator> <name>aliasclientID</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><name>count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

	<comment type="line">// Loop over all existing clients to fill list of clients</comment>
	<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>clientID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>clientID</name> <operator>&lt;</operator> <name><name>counters</name><operator>-&gt;</operator><name>clients</name></name></expr>;</condition> <incr><expr><name>clientID</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="line">// Get pointer to client candidate</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>clientsData</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><call><name>getClient</name><argument_list>(<argument><expr><name>clientID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// Skip invalid clients and those that are not managed by this aliasclient</comment>
		<if_stmt><if>if<condition>(<expr><name>client</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>client</name><operator>-&gt;</operator><name>aliasclient_id</name></name> <operator>!=</operator> <name>aliasclientID</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>list</name><index>[<expr><operator>++</operator><name>count</name></expr>]</index></name> <operator>=</operator> <name>clientID</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Reimport alias-clients from database</comment>
<comment type="line">// Note that this will always only change or add new clients. Alias-clients are</comment>
<comment type="line">// removed by nulling them before importing new clients</comment>
<function><type><name>void</name></type> <name>reimport_aliasclients</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Return early if database is known to be broken</comment>
	<if_stmt><if>if<condition>(<expr><call><name>FTLDBerror</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// Open pihole-FTL.db database file if needed</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>db_opened</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>db</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><operator>(</operator><name>db</name> <operator>=</operator> <call><name>dbopen</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"reimport_aliasclients() - Failed to open DB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Successful</comment>
		<expr_stmt><expr><name>db_opened</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Loop over all existing alias-clients and set their counters to zero</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>clientID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>clientID</name> <operator>&lt;</operator> <name><name>counters</name><operator>-&gt;</operator><name>clients</name></name></expr>;</condition> <incr><expr><name>clientID</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="line">// Get pointer to client candidate</comment>
		<decl_stmt><decl><type><name>clientsData</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><call><name>getClient</name><argument_list>(<argument><expr><name>clientID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// Skip invalid and non-alias-clients</comment>
		<if_stmt><if>if<condition>(<expr><name>client</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><name><name>client</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>aliasclient</name></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// Reset this alias-client</comment>
		<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>blockedcount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>overTime</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>overTime</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">// Import aliasclients from database table</comment>
	<expr_stmt><expr><call><name>import_aliasclients</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Recompute all alias-clients</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>clientID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>clientID</name> <operator>&lt;</operator> <name><name>counters</name><operator>-&gt;</operator><name>clients</name></name></expr>;</condition> <incr><expr><name>clientID</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="line">// Get pointer to client candidate</comment>
		<decl_stmt><decl><type><name>clientsData</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><call><name>getClient</name><argument_list>(<argument><expr><name>clientID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// Skip invalid and alias-clients</comment>
		<if_stmt><if>if<condition>(<expr><name>client</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>client</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>aliasclient</name></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>reset_aliasclient</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">// Close the database if we opened it here</comment>
	<if_stmt><if>if<condition>(<expr><name>db_opened</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function></unit>
