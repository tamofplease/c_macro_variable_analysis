<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/database/query-table.c"><comment type="block">/* Pi-hole: A black hole for Internet advertisements
*  (c) 2019 Pi-hole, LLC (https://pi-hole.net)
*  Network-wide ad blocking via your own hardware.
*
*  FTL Engine
*  Query table database routines
*
*  This file is copyright under the latest version of the EUPL.
*  Please see LICENSE file for your rights under this license. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../FTL.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query-table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<comment type="line">// get[Domain,ClientIP,Forward]String(), etc.</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../datastructure.h"</cpp:file></cpp:include>
<comment type="line">// getOverTimeID()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../overTime.h"</cpp:file></cpp:include>
<comment type="line">// get_FTL_db_filesize()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../files.h"</cpp:file></cpp:include>
<comment type="line">// timer_elapsed_msec()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../timers.h"</cpp:file></cpp:include>
<comment type="line">// logg()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../log.h"</cpp:file></cpp:include>
<comment type="line">// struct config</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../config.h"</cpp:file></cpp:include>
<comment type="line">// getstr()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../shmem.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>saving_failed_before</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>get_number_of_queries_in_DB</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Return early if database is known to be broken</comment>
	<if_stmt><if>if<condition>(<expr><call><name>FTLDBerror</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>DB_FAILED</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// Open pihole-FTL.db database file if needed</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>db_opened</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>db</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><operator>(</operator><name>db</name> <operator>=</operator> <call><name>dbopen</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"get_number_of_queries_in_DB() - Failed to open DB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>DB_FAILED</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Successful</comment>
		<expr_stmt><expr><name>db_opened</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Count number of rows using the index timestamp is faster than select(*)</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>db_query_int</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"SELECT COUNT(timestamp) FROM query_storage"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>db_opened</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>DB_save_queries</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Return early if database is known to be broken</comment>
	<if_stmt><if>if<condition>(<expr><call><name>FTLDBerror</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>DB_FAILED</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// Start database timer</comment>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>timer_start</name><argument_list>(<argument><expr><name>DATABASE_WRITE_TIMER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Open pihole-FTL.db database file if needed</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>db_opened</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>db</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><operator>(</operator><name>db</name> <operator>=</operator> <call><name>dbopen</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"DB_save_queries() - Failed to open DB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>DB_FAILED</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Successful</comment>
		<expr_stmt><expr><name>db_opened</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>saved</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>error</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>query_stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>domain_stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>client_stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>forward_stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>addinfo_stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>dbquery</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"BEGIN TRANSACTION IMMEDIATE"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr> )</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SQLITE_BUSY</name></expr> )</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"WARNING"</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"ERROR"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"%s: Storing queries in long-term database failed: %s"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><name>db_opened</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return>return <expr><name>DB_FAILED</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Prepare statements</comment>
	<expr_stmt><expr><name>rc</name>  <operator>=</operator> <call><name>sqlite3_prepare_v3</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"INSERT INTO query_storage "</literal>
	                                 <literal type="string">"(timestamp,type,status,domain,client,forward,additional_info,reply_type,reply_time,dnssec) "</literal>
	                                 <literal type="string">"VALUES "</literal>
	                                 <literal type="string">"(?1,?2,?3,"</literal>
	                                 <literal type="string">"(SELECT id FROM domain_by_id WHERE domain = ?4),"</literal>
	                                 <literal type="string">"(SELECT id FROM client_by_id WHERE ip = ?5 AND name = ?6),"</literal>
	                                 <literal type="string">"(SELECT id FROM forward_by_id WHERE forward = ?7),"</literal>
	                                 <literal type="string">"(SELECT id FROM addinfo_by_id WHERE type = ?8 AND content = ?9),"</literal>
	                                 <literal type="string">"?10,?11,?12)"</literal></expr></argument>,
	                         <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_PREPARE_PERSISTENT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>query_stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr> )</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>spaces</name></decl>;</decl_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SQLITE_BUSY</name></expr> )</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>text</name>   <operator>=</operator> <literal type="string">"WARNING"</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>spaces</name> <operator>=</operator> <literal type="string">"       "</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>text</name>   <operator>=</operator> <literal type="string">"ERROR"</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>spaces</name> <operator>=</operator> <literal type="string">"     "</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"%s: Storing queries in long-term database failed: %s\n"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"%s  Keeping queries in memory for later new attempt"</literal></expr></argument>, <argument><expr><name>spaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>saving_failed_before</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><name>db_opened</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return>return <expr><name>DB_FAILED</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v3</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"INSERT OR IGNORE INTO domain_by_id (domain) VALUES (?)"</literal></expr></argument>,
	                        <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_PREPARE_PERSISTENT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>domain_stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr> )</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>spaces</name></decl>;</decl_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SQLITE_BUSY</name></expr> )</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>text</name>   <operator>=</operator> <literal type="string">"WARNING"</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>spaces</name> <operator>=</operator> <literal type="string">"       "</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>text</name>   <operator>=</operator> <literal type="string">"ERROR"</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>spaces</name> <operator>=</operator> <literal type="string">"     "</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"%s: Storing queries in long-term database failed: %s\n"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"%s  Keeping queries in memory for later new attempt"</literal></expr></argument>, <argument><expr><name>spaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>saving_failed_before</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><name>db_opened</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return>return <expr><name>DB_FAILED</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v3</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"INSERT OR IGNORE INTO client_by_id (ip,name) VALUES (?,?)"</literal></expr></argument>,
	                        <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_PREPARE_PERSISTENT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>client_stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr> )</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>spaces</name></decl>;</decl_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SQLITE_BUSY</name></expr> )</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>text</name>   <operator>=</operator> <literal type="string">"WARNING"</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>spaces</name> <operator>=</operator> <literal type="string">"       "</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>text</name>   <operator>=</operator> <literal type="string">"ERROR"</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>spaces</name> <operator>=</operator> <literal type="string">"     "</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"%s: Storing queries in long-term database failed: %s\n"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"%s  Keeping queries in memory for later new attempt"</literal></expr></argument>, <argument><expr><name>spaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>saving_failed_before</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><name>db_opened</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return>return <expr><name>DB_FAILED</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v3</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"INSERT OR IGNORE INTO forward_by_id (forward) VALUES (?)"</literal></expr></argument>,
	                        <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_PREPARE_PERSISTENT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>forward_stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr> )</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>spaces</name></decl>;</decl_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SQLITE_BUSY</name></expr> )</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>text</name>   <operator>=</operator> <literal type="string">"WARNING"</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>spaces</name> <operator>=</operator> <literal type="string">"       "</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>text</name>   <operator>=</operator> <literal type="string">"ERROR"</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>spaces</name> <operator>=</operator> <literal type="string">"     "</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"%s: Storing queries in long-term database failed: %s\n"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"%s  Keeping queries in memory for later new attempt"</literal></expr></argument>, <argument><expr><name>spaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>saving_failed_before</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><name>db_opened</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return>return <expr><name>DB_FAILED</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v3</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"INSERT OR IGNORE INTO addinfo_by_id (type,content) VALUES (?,?)"</literal></expr></argument>,
	                        <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_PREPARE_PERSISTENT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addinfo_stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr> )</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>spaces</name></decl>;</decl_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SQLITE_BUSY</name></expr> )</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>text</name>   <operator>=</operator> <literal type="string">"WARNING"</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>spaces</name> <operator>=</operator> <literal type="string">"       "</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>text</name>   <operator>=</operator> <literal type="string">"ERROR"</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>spaces</name> <operator>=</operator> <literal type="string">"     "</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"%s: Storing queries in long-term database failed: %s\n"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"%s  Keeping queries in memory for later new attempt"</literal></expr></argument>, <argument><expr><name>spaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>saving_failed_before</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><name>db_opened</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return>return <expr><name>DB_FAILED</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Get last ID stored in the database</comment>
	<decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>lastID</name> <init>= <expr><call><name>get_max_query_ID</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>blocked</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type> <name>currenttimestamp</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type> <name>newlasttimestamp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>queryID</name></decl>;</decl_stmt>
	<for>for<control>(<init><expr><name>queryID</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>lastdbindex</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>queryID</name> <operator>&lt;</operator> <name><name>counters</name><operator>-&gt;</operator><name>queries</name></name></expr>;</condition> <incr><expr><name>queryID</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>queriesData</name><modifier>*</modifier></type> <name>query</name> <init>= <expr><call><name>getQuery</name><argument_list>(<argument><expr><name>queryID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name>query</name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Memory error</comment>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>database</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Skip, already saved in database</comment>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>query</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>complete</name></name> <operator>&amp;&amp;</operator> <name><name>query</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>&gt;</operator> <name>currenttimestamp</name><operator>-</operator><literal type="number">2</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Break if a brand new query (age &lt; 2 seconds) is not yet completed</comment>
			<comment type="line">// giving it a chance to be stored next time</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>privacylevel</name></name> <operator>&gt;=</operator> <name>PRIVACY_MAXIMUM</name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Skip, we never store nor count queries recorded</comment>
			<comment type="line">// while have been in maximum privacy mode in the database</comment>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// TIMESTAMP</comment>
		<expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// TYPE</comment>
		<if_stmt><if>if<condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>TYPE_OTHER</name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Store mapped type if query-&gt;type is not OTHER</comment>
			<expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="line">// Store query type + offset if query-&gt; type is OTHER</comment>
			<expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>qtype</name></name> <operator>+</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="line">// STATUS</comment>
		<expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// DOMAIN</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>domain</name> <init>= <expr><call><name>getDomainString</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>domain_stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Execute prepare client statement and check if successful</comment>
		<if_stmt><if>if<condition>(<expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>domain_stmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SQLITE_DONE</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Encountered error while trying to store client in long-term database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>sqlite3_clear_bindings</name><argument_list>(<argument><expr><name>domain_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>domain_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// CLIENT</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>clientIP</name> <init>= <expr><call><name>getClientIPString</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>clientIP</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>client_stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>clientIP</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>clientName</name> <init>= <expr><call><name>getClientNameString</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>clientName</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>client_stmt</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>clientName</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Execute prepare client statement and check if successful</comment>
		<if_stmt><if>if<condition>(<expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>client_stmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SQLITE_DONE</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Encountered error while trying to store client in long-term database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>sqlite3_clear_bindings</name><argument_list>(<argument><expr><name>client_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>client_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// FORWARD</comment>
		<if_stmt><if>if<condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>upstreamID</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Get forward pointer</comment>
			<decl_stmt><decl><type><specifier>const</specifier> <name>upstreamsData</name><modifier>*</modifier></type> <name>upstream</name> <init>= <expr><call><name>getUpstream</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>upstreamID</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>forwardIP</name> <init>= <expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>upstream</name><operator>-&gt;</operator><name>ippos</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><name>upstream</name> <operator>&amp;&amp;</operator> <name>forwardIP</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="line">// The length of the string WITHOUT the NUL byte. This is what sqlite3_bind_text() expects.</comment>
				<if_stmt><if>if<condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%s#%u"</literal></expr></argument>, <argument><expr><name>forwardIP</name></expr></argument>, <argument><expr><name><name>upstream</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<comment type="line">// Use transient here as we step only after the buffer is freed below</comment>
					<expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="line">// Use static here as we insert right away</comment>
					<expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>forward_stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="line">// Execute prepared forward statement and check if successful</comment>
					<if_stmt><if>if<condition>(<expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>forward_stmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SQLITE_DONE</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Encountered error while trying to store forward destination in long-term database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><call><name>sqlite3_clear_bindings</name><argument_list>(<argument><expr><name>forward_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>forward_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<comment type="line">// Memory error: Do not store the forward destination</comment>
					<expr_stmt><expr><call><name>sqlite3_bind_null</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>

				<if_stmt><if>if<condition>(<expr><name>buffer</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="line">// No forward destination</comment>
			<expr_stmt><expr><call><name>sqlite3_bind_null</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cacheID</name> <init>= <expr><call><name>findCacheID</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>domainID</name></name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>clientID</name></name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DNSCacheData</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><call><name>getDNSCache</name><argument_list>(<argument><expr><name>cacheID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// ADDITIONAL_INFO</comment>
		<if_stmt><if>if<condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>QUERY_GRAVITY_CNAME</name> <operator>||</operator>
		   <name><name>query</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>QUERY_REGEX_CNAME</name> <operator>||</operator>
		   <name><name>query</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>QUERY_BLACKLIST_CNAME</name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Save domain blocked during deep CNAME inspection</comment>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cname</name> <init>= <expr><call><name>getCNAMEDomainString</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ADDINFO_CNAME_DOMAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>cname</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// Execute prepared addinfo statement and check if successful</comment>
			<expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name>addinfo_stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ADDINFO_CNAME_DOMAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>addinfo_stmt</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>cname</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>addinfo_stmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SQLITE_DONE</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Encountered error while trying to store addinfo in long-term database (CNAME)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>sqlite3_clear_bindings</name><argument_list>(<argument><expr><name>addinfo_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>addinfo_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if<condition>(<expr><name>cache</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>cache</name><operator>-&gt;</operator><name>domainlist_id</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ADDINFO_REGEX_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>domainlist_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// Execute prepared addinfo statement and check if successful</comment>
			<expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name>addinfo_stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ADDINFO_REGEX_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name>addinfo_stmt</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>domainlist_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>addinfo_stmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SQLITE_DONE</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Encountered error while trying to store addinfo in long-term database (domainlist_id)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>sqlite3_clear_bindings</name><argument_list>(<argument><expr><name>addinfo_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>addinfo_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="line">// Nothing to add here</comment>
			<expr_stmt><expr><call><name>sqlite3_bind_null</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sqlite3_bind_null</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="line">// REPLY_TYPE</comment>
		<expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>reply</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// REPLY_TIME (stored in units of seconds) if available, NULL otherwise</comment>
		<if_stmt><if>if<condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>response_calculated</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>sqlite3_bind_double</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">1e-4</literal><operator>*</operator><name><name>query</name><operator>-&gt;</operator><name>response</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>sqlite3_bind_null</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<comment type="line">// DNSSEC</comment>
		<expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>dnssec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Step and check if successful</comment>
		<if_stmt><if>if<condition>(<expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SQLITE_DONE</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Encountered error while trying to store queries in long-term database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>sqlite3_clear_bindings</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Increment counters</comment>
		<expr_stmt><expr><name>saved</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>lastID</name><operator>++</operator></expr>;</expr_stmt>

		<comment type="line">// Mark this query as saved in the database</comment>
		<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>database</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

		<comment type="line">// Total counter information (delta computation)</comment>
		<expr_stmt><expr><name>total</name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>blocked</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>blocked</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="line">// Update lasttimestamp variable with timestamp of the latest stored query</comment>
		<if_stmt><if>if<condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>&gt;</operator> <name>newlasttimestamp</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>newlasttimestamp</name> <operator>=</operator> <name><name>query</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if<condition>(<expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SQLITE_OK</name> <operator>||</operator>
	   <call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>domain_stmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SQLITE_OK</name> <operator>||</operator>
	   <call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>client_stmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SQLITE_OK</name> <operator>||</operator>
	   <call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>forward_stmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SQLITE_OK</name> <operator>||</operator>
	   <call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>addinfo_stmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Statement finalization failed when trying to store queries to long-term database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>rc</name> <operator>==</operator> <name>SQLITE_BUSY</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Keeping queries in memory for later new attempt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>saving_failed_before</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><name>db_opened</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return>return <expr><name>DB_FAILED</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Store index for next loop iteration round and update last time stamp</comment>
	<comment type="line">// in the database only if all queries have been saved successfully</comment>
	<if_stmt><if>if<condition>(<expr><name>saved</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>error</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>lastdbindex</name> <operator>=</operator> <name>queryID</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>db_set_FTL_property</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>DB_LASTTIMESTAMP</name></expr></argument>, <argument><expr><name>newlasttimestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>db_update_counters</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>total</name></expr></argument>, <argument><expr><name>blocked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Finish prepared statement</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>dbquery</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><literal type="string">"END TRANSACTION"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// No need to log the error string here, dbquery() did that already above</comment>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"END TRANSACTION failed when trying to store queries to long-term database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>rc</name> <operator>==</operator> <name>SQLITE_BUSY</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Keeping queries in memory for later new attempt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>saving_failed_before</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><name>db_opened</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return>return <expr><name>DB_FAILED</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name> <operator>||</operator> <name>saving_failed_before</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Notice: Queries stored in long-term database: %u (took %.1f ms, last SQLite ID %li)"</literal></expr></argument>,
		     <argument><expr><name>saved</name></expr></argument>, <argument><expr><call><name>timer_elapsed_msec</name><argument_list>(<argument><expr><name>DATABASE_WRITE_TIMER</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lastID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>saving_failed_before</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"        Queries from earlier attempt(s) stored successfully"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>saving_failed_before</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>db_opened</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>saved</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>delete_old_queries_in_DB</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Return early if database is known to be broken</comment>
	<if_stmt><if>if<condition>(<expr><call><name>FTLDBerror</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>timestamp</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>config</name><operator>.</operator><name>maxDBdays</name></name> <operator>*</operator> <literal type="number">86400</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>dbquery</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"DELETE FROM query_storage WHERE timestamp &lt;= %i"</literal></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"delete_old_queries_in_DB(): Deleting queries due to age of entries failed!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Get how many rows have been affected (deleted)</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>affected</name> <init>= <expr><call><name>sqlite3_changes</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Print final message only if there is a difference</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name><operator>)</operator> <operator>||</operator> <name>affected</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Notice: Database size is %.2f MB, deleted %i rows"</literal></expr></argument>, <argument><expr><literal type="number">1e-6</literal><operator>*</operator><call><name>get_FTL_db_filesize</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>add_additional_info_column</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Add column additinal_info to queries table</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"ALTER TABLE queries ADD COLUMN additional_info TEXT;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Update the database version to 7</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"INSERT OR REPLACE INTO ftl (id, value) VALUES ( %u, %i );"</literal></expr></argument>, <argument><expr><name>DB_VERSION</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>add_query_storage_columns</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Start transaction of database update</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"BEGIN TRANSACTION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Add additional columns to the query_storage table</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"ALTER TABLE query_storage ADD COLUMN reply_type INTEGER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"ALTER TABLE query_storage ADD COLUMN reply_time REAL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"ALTER TABLE query_storage ADD COLUMN dnssec INTEGER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Update VIEW queries</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"DROP VIEW queries"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"CREATE VIEW queries AS "</literal>
	                     <literal type="string">"SELECT id, timestamp, type, status, "</literal>
	                       <literal type="string">"CASE typeof(domain) WHEN 'integer' THEN (SELECT domain FROM domain_by_id d WHERE d.id = q.domain) ELSE domain END domain,"</literal>
	                       <literal type="string">"CASE typeof(client) WHEN 'integer' THEN (SELECT ip FROM client_by_id c WHERE c.id = q.client) ELSE client END client,"</literal>
	                       <literal type="string">"CASE typeof(forward) WHEN 'integer' THEN (SELECT forward FROM forward_by_id f WHERE f.id = q.forward) ELSE forward END forward,"</literal>
	                       <literal type="string">"CASE typeof(additional_info) WHEN 'integer' THEN (SELECT content FROM addinfo_by_id a WHERE a.id = q.additional_info) ELSE additional_info END additional_info, "</literal>
	                       <literal type="string">"reply_type, reply_time, dnssec "</literal>
	                       <literal type="string">"FROM query_storage q"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Update database version to 12</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>db_set_FTL_property</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>DB_VERSION</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"add_query_storage_columns(): Failed to update database version!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Finish transaction</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>optimize_queries_table</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Start transaction of database update</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"BEGIN TRANSACTION;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Create link tables for domain, client, and forward strings</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"CREATE TABLE domain_by_id (id INTEGER PRIMARY KEY, domain TEXT NOT NULL);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"CREATE TABLE client_by_id (id INTEGER PRIMARY KEY, ip TEXT NOT NULL, name TEXT);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"CREATE TABLE forward_by_id (id INTEGER PRIMARY KEY, forward TEXT NOT NULL);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Create UNIQUE index for the new tables</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"CREATE UNIQUE INDEX domain_by_id_domain_idx ON domain_by_id(domain);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"CREATE UNIQUE INDEX client_by_id_client_idx ON client_by_id(ip,name);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"CREATE UNIQUE INDEX forward_by_id_forward_idx ON forward_by_id(forward);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Rename current queries table</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"ALTER TABLE queries RENAME TO query_storage;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Change column definitions of the queries_storage table to allow</comment>
	<comment type="line">// integer IDs. If we would leave the column definitions as TEXT, we</comment>
	<comment type="line">// could not tell apart integer IDs easily as everything INSERTed would</comment>
	<comment type="line">// be converted to TEXT form (this is very inefficient)</comment>
	<comment type="line">// We have to turn off defensive mode to do this.</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"PRAGMA writable_schema = ON;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"UPDATE sqlite_master SET sql = 'CREATE TABLE \"query_storage\" (id INTEGER PRIMARY KEY AUTOINCREMENT, timestamp INTEGER NOT NULL, type INTEGER NOT NULL, status INTEGER NOT NULL, domain INTEGER NOT NULL, client INTEGER NOT NULL, forward INTEGER , additional_info TEXT)' WHERE type = 'table' AND name = 'query_storage';"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"PRAGMA writable_schema = OFF;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Create VIEW queries so user scripts continue to work despite our</comment>
	<comment type="line">// optimization here. The VIEW will pull the strings from the linked</comment>
	<comment type="line">// tables when needed to always server the strings.</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"CREATE VIEW queries AS "</literal>
	                     <literal type="string">"SELECT id, timestamp, type, status, "</literal>
	                       <literal type="string">"CASE typeof(domain) WHEN 'integer' THEN (SELECT domain FROM domain_by_id d WHERE d.id = q.domain) ELSE domain END domain,"</literal>
	                       <literal type="string">"CASE typeof(client) WHEN 'integer' THEN (SELECT ip FROM client_by_id c WHERE c.id = q.client) ELSE client END client,"</literal>
	                       <literal type="string">"CASE typeof(forward) WHEN 'integer' THEN (SELECT forward FROM forward_by_id f WHERE f.id = q.forward) ELSE forward END forward,"</literal>
	                       <literal type="string">"additional_info FROM query_storage q;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Update database version to 10</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>db_set_FTL_property</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>DB_VERSION</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"optimize_queries_table(): Failed to update database version!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Finish transaction</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>create_addinfo_table</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Start transaction of database update</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"BEGIN TRANSACTION;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Create link table for additional_info column</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"CREATE TABLE addinfo_by_id (id INTEGER PRIMARY KEY, type INTEGER NOT NULL, content NOT NULL);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Create UNIQUE index for the new tables</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"CREATE UNIQUE INDEX addinfo_by_id_idx ON addinfo_by_id(type,content);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Change column definitions of the queries_storage table to allow</comment>
	<comment type="line">// integer IDs. If we would leave the column definitions as TEXT, we</comment>
	<comment type="line">// could not tell apart integer IDs easily as everything INSERTed would</comment>
	<comment type="line">// be converted to TEXT form (this is very inefficient)</comment>
	<comment type="line">// We have to turn off defensive mode to do this.</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"PRAGMA writable_schema = ON;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"UPDATE sqlite_master SET sql = 'CREATE TABLE \"query_storage\" (id INTEGER PRIMARY KEY AUTOINCREMENT, timestamp INTEGER NOT NULL, type INTEGER NOT NULL, status INTEGER NOT NULL, domain INTEGER NOT NULL, client INTEGER NOT NULL, forward INTEGER, additional_info INTEGER)' WHERE type = 'table' AND name = 'query_storage';"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"PRAGMA writable_schema = OFF;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Create VIEW queries so user scripts continue to work despite our</comment>
	<comment type="line">// optimization here. The VIEW will pull the strings from the linked</comment>
	<comment type="line">// tables when needed to always server the strings.</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"DROP VIEW queries"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"CREATE VIEW queries AS "</literal>
	                     <literal type="string">"SELECT id, timestamp, type, status, "</literal>
	                       <literal type="string">"CASE typeof(domain) WHEN 'integer' THEN (SELECT domain FROM domain_by_id d WHERE d.id = q.domain) ELSE domain END domain,"</literal>
	                       <literal type="string">"CASE typeof(client) WHEN 'integer' THEN (SELECT ip FROM client_by_id c WHERE c.id = q.client) ELSE client END client,"</literal>
	                       <literal type="string">"CASE typeof(forward) WHEN 'integer' THEN (SELECT forward FROM forward_by_id f WHERE f.id = q.forward) ELSE forward END forward,"</literal>
	                       <literal type="string">"CASE typeof(additional_info) WHEN 'integer' THEN (SELECT content FROM addinfo_by_id a WHERE a.id = q.additional_info) ELSE additional_info END additional_info "</literal>
	                       <literal type="string">"FROM query_storage q;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Update database version to 11</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>db_set_FTL_property</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>DB_VERSION</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"create_addinfo_table(): Failed to update database version!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Finish transaction</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Get most recent 24 hours data from long-term database</comment>
<function><type><name>void</name></type> <name>DB_read_queries</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Return early if database is known to be broken</comment>
	<if_stmt><if>if<condition>(<expr><call><name>FTLDBerror</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// Open database</comment>
	<decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>db</name> <operator>=</operator> <call><name>dbopen</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"DB_read_queries() - Failed to open DB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Prepare request</comment>
	<comment type="line">// Get time stamp 24 hours in the past</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>time_t</name></type> <name>now</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>time_t</name></type> <name>mintime</name> <init>= <expr><name>now</name> <operator>-</operator> <name><name>config</name><operator>.</operator><name>maxlogage</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>querystr</name> <init>= <expr><literal type="string">"SELECT id,timestamp,type,status,domain,client,forward,additional_info,reply_type,reply_time,dnssec FROM queries WHERE timestamp &gt;= ?"</literal></expr></init></decl>;</decl_stmt>
	<comment type="line">// Log FTL_db query string in debug mode</comment>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"DB_read_queries(): \"%s\" with ? = %lli"</literal></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>mintime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Prepare SQLite3 statement</comment>
	<decl_stmt><decl><type><name>sqlite3_stmt</name><modifier>*</modifier></type> <name>stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_prepare_v3</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_PREPARE_PERSISTENT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"DB_read_queries() - SQL error prepare: %s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>end_of_DB_read_queries</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Bind limit</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>mintime</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"DB_read_queries() - Failed to bind type mintime: %s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>end_of_DB_read_queries</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Lock shared memory</comment>
	<expr_stmt><expr><call><name>lock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Loop through returned database rows</comment>
	<while>while<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>SQLITE_ROW</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>time_t</name></type> <name>queryTimeStamp</name> <init>= <expr><call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// 1483228800 = 01/01/2017 @ 12:00am (UTC)</comment>
		<if_stmt><if>if<condition>(<expr><name>queryTimeStamp</name> <operator>&lt;</operator> <literal type="number">1483228800</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"DB warn: TIMESTAMP should be larger than 01/01/2017 but is %lli"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>queryTimeStamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>(<expr><name>queryTimeStamp</name> <operator>&gt;</operator> <name>now</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"DB warn: Skipping query logged in the future (%lli)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>queryTimeStamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>type</name> <init>= <expr><call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>mapped_type</name> <init>= <expr><name>type</name> <operator>&gt;=</operator> <name>TYPE_A</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>&lt;</operator> <name>TYPE_MAX</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>offset_type</name> <init>= <expr><name>type</name> <operator>&gt;</operator> <literal type="number">100</literal> <operator>&amp;&amp;</operator> <name>type</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">100</literal> <operator>+</operator> <name>UINT16_MAX</name><operator>)</operator></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name>mapped_type</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>offset_type</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"DB warn: TYPE should not be %i"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<comment type="line">// Don't import AAAA queries from database if the user set</comment>
		<comment type="line">// AAAA_QUERY_ANALYSIS=no in pihole-FTL.conf</comment>
		<if_stmt><if>if<condition>(<expr><name>type</name> <operator>==</operator> <name>TYPE_AAAA</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>config</name><operator>.</operator><name>analyze_AAAA</name></name></expr>)</condition>
		<block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>status_int</name> <init>= <expr><call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>status_int</name> <argument_list type="generic">&lt; <argument><expr><name>QUERY_UNKNOWN</name> <operator>||</operator> <name>status_int</name></expr></argument> &gt;</argument_list></name> <name>QUERY_STATUS_MAX</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"DB warn: STATUS should be within [%i,%i] but is %i"</literal></expr></argument>, <argument><expr><name>QUERY_UNKNOWN</name></expr></argument>, <argument><expr><name>QUERY_STATUS_MAX</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>status_int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>query_status</name></name></type> <name>status</name> <init>= <expr><name>status_int</name></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>domainname</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>domainname</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"DB warn: DOMAIN should never be NULL, %lli"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>queryTimeStamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>clientIP</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>clientIP</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"DB warn: CLIENT should never be NULL, %lli"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>queryTimeStamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Check if user wants to skip queries coming from localhost</comment>
		<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>ignore_localhost</name></name> <operator>&amp;&amp;</operator>
		   <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>clientIP</name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>clientIP</name></expr></argument>, <argument><expr><literal type="string">"::1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Ensure we have enough shared memory available for new data</comment>
		<expr_stmt><expr><call><name>shm_ensure_size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>upstreamID</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="line">// Default if not forwarded</comment>
		<comment type="line">// Try to extract the upstream from the "forward" column if non-empty</comment>
		<if_stmt><if>if<condition>(<expr><call><name>sqlite3_column_bytes</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
		   <operator>(</operator><name>buffer</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Get IP address and port of upstream destination</comment>
			<decl_stmt><decl><type><name>char</name></type> <name><name>serv_addr</name><index>[<expr><name>INET6_ADDRSTRLEN</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>serv_port</name> <init>= <expr><literal type="number">53</literal></expr></init></decl>;</decl_stmt>
			<comment type="line">// We limit the number of bytes written into the serv_addr buffer</comment>
			<comment type="line">// to prevent buffer overflows. If there is no port available in</comment>
			<comment type="line">// the database, we skip extracting them and use the default port</comment>
			<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><call><name>xstr</name><argument_list>(<argument><expr><name>INET6_ADDRSTRLEN</name></expr></argument>)</argument_list></call><literal type="string">"[^#]#%u"</literal></expr></argument>, <argument><expr><name>serv_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>serv_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>serv_addr</name><index>[<expr><name>INET6_ADDRSTRLEN</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>upstreamID</name> <operator>=</operator> <call><name>findUpstreamID</name><argument_list>(<argument><expr><name>serv_addr</name></expr></argument>, <argument><expr><operator>(</operator><name>in_port_t</name><operator>)</operator><name>serv_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>reply_type</name> <init>= <expr><name>REPLY_UNKNOWN</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><call><name>sqlite3_column_type</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>SQLITE_INTEGER</name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// The field has been added for database version 12</comment>
			<expr_stmt><expr><name>reply_type</name> <operator>=</operator> <call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>reply_type</name> <operator>&lt;</operator> <name>REPLY_UNKNOWN</name> <operator>||</operator> <name>reply_type</name> <operator>&gt;=</operator> <name>QUERY_REPLY_MAX</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"DB warn: REPLY value %i is invalid, %lli"</literal></expr></argument>, <argument><expr><name>reply_type</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>queryTimeStamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>double</name></type> <name>reply_time</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>reply_time_avail</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><call><name>sqlite3_column_type</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>SQLITE_FLOAT</name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// The field has been added for database version 12</comment>
			<expr_stmt><expr><name>reply_time</name> <operator>=</operator> <call><name>sqlite3_column_double</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>reply_time_avail</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>reply_time</name> <operator>&lt;</operator> <literal type="number">0.0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"DB warn: REPLY_TIME value %f is invalid, %lli"</literal></expr></argument>, <argument><expr><name>reply_time</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>queryTimeStamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>dnssec</name> <init>= <expr><name>DNSSEC_UNSPECIFIED</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><call><name>sqlite3_column_type</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>SQLITE_INTEGER</name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// The field has been added for database version 12</comment>
			<expr_stmt><expr><name>dnssec</name> <operator>=</operator> <call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>dnssec</name> <operator>&lt;</operator> <name>DNSSEC_UNSPECIFIED</name> <operator>||</operator> <name>dnssec</name> <operator>&gt;=</operator> <name>DNSSEC_ABANDONED</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"DB warn: DNSSEC value %i is invalid, %lli"</literal></expr></argument>, <argument><expr><name>dnssec</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>queryTimeStamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Obtain IDs only after filtering which queries we want to keep</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>timeidx</name> <init>= <expr><call><name>getOverTimeID</name><argument_list>(<argument><expr><name>queryTimeStamp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>domainID</name> <init>= <expr><call><name>findDomainID</name><argument_list>(<argument><expr><name>domainname</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>clientID</name> <init>= <expr><call><name>findClientID</name><argument_list>(<argument><expr><name>clientIP</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Set index for this query</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>queryIndex</name> <init>= <expr><name><name>counters</name><operator>-&gt;</operator><name>queries</name></name></expr></init></decl>;</decl_stmt>

		<comment type="line">// Store this query in memory</comment>
		<decl_stmt><decl><type><name>queriesData</name><modifier>*</modifier></type> <name>query</name> <init>= <expr><call><name>getQuery</name><argument_list>(<argument><expr><name>queryIndex</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>MAGICBYTE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <name>queryTimeStamp</name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>type</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Mapped query type</comment>
			<if_stmt><if>if<condition>(<expr><name>type</name> <operator>&gt;=</operator> <name>TYPE_A</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>&lt;</operator> <name>TYPE_MAX</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt></block_content></block></if>
			<else>else
			<block>{<block_content>
				<comment type="line">// Invalid query type</comment>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"DB warn: Query type %d is invalid."</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="line">// Offset query type</comment>
			<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TYPE_OTHER</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>qtype</name></name> <operator>=</operator> <name>type</name> <operator>-</operator> <literal type="number">100</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="line">// Status is set below</comment>
		<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>domainID</name></name> <operator>=</operator> <name>domainID</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>clientID</name></name> <operator>=</operator> <name>clientID</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>upstreamID</name></name> <operator>=</operator> <name>upstreamID</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>response</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>response_calculated</name></name> <operator>=</operator> <name>reply_time_avail</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>dnssec</name></name> <operator>=</operator> <name>dnssec</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>reply</name></name> <operator>=</operator> <name>reply_type</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>counters</name><operator>-&gt;</operator><name>reply</name><index>[<expr><name><name>query</name><operator>-&gt;</operator><name>reply</name></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>response</name></name> <operator>=</operator> <name>reply_time</name> <operator>*</operator> <literal type="number">1e4</literal></expr>;</expr_stmt> <comment type="line">// convert to tenth-millisecond unit</comment>
		<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>CNAME_domainID</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<comment type="line">// Initialize flags</comment>
		<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>complete</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <comment type="line">// Mark as all information is available</comment>
		<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>blocked</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>whitelisted</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>database</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>ede</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <comment type="line">// EDE_UNSET == -1</comment>

		<comment type="line">// Set lastQuery timer for network table</comment>
		<decl_stmt><decl><type><name>clientsData</name><modifier>*</modifier></type> <name>client</name> <init>= <expr><call><name>getClient</name><argument_list>(<argument><expr><name>clientID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>lastQuery</name></name> <operator>=</operator> <name>queryTimeStamp</name></expr>;</expr_stmt>

		<comment type="line">// Handle type counters</comment>
		<expr_stmt><expr><name><name>counters</name><operator>-&gt;</operator><name>querytype</name><index>[<expr><name><name>query</name><operator>-&gt;</operator><name>type</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

		<comment type="line">// Update overTime data</comment>
		<expr_stmt><expr><name><name>overTime</name><index>[<expr><name>timeidx</name></expr>]</index></name><operator>.</operator><name>total</name><operator>++</operator></expr>;</expr_stmt>
		<comment type="line">// Update overTime data structure with the new client</comment>
		<expr_stmt><expr><call><name>change_clientcount</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>timeidx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Increase DNS queries counter</comment>
		<expr_stmt><expr><name><name>counters</name><operator>-&gt;</operator><name>queries</name></name><operator>++</operator></expr>;</expr_stmt>

		<comment type="line">// Get additional information from the additional_info column if applicable</comment>
		<if_stmt><if>if<condition>(<expr><name>status</name> <operator>==</operator> <name>QUERY_GRAVITY_CNAME</name> <operator>||</operator>
		   <name>status</name> <operator>==</operator> <name>QUERY_REGEX_CNAME</name> <operator>||</operator>
		   <name>status</name> <operator>==</operator> <name>QUERY_BLACKLIST_CNAME</name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// QUERY_*_CNAME: Get domain causing the blocking</comment>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>CNAMEdomain</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><name>CNAMEdomain</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>CNAMEdomain</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="line">// Add domain to FTL's memory but do not count it. Seeing a</comment>
				<comment type="line">// domain in the middle of a CNAME trajectory does not mean</comment>
				<comment type="line">// it was queried intentionally.</comment>
				<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>CNAMEdomainID</name> <init>= <expr><call><name>findDomainID</name><argument_list>(<argument><expr><name>CNAMEdomain</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>CNAME_domainID</name></name> <operator>=</operator> <name>CNAMEdomainID</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if<condition>(<expr><call><name>sqlite3_column_bytes</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Set ID of the domainlist entry that was the reason for permitting/blocking this query</comment>
			<comment type="line">// We assume the value in this field is said ID when it is not a CNAME-related domain</comment>
			<comment type="line">// (checked above) and the value of additional_info is not NULL (0 bytes storage size)</comment>
			<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cacheID</name> <init>= <expr><call><name>findCacheID</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>domainID</name></name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>clientID</name></name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>DNSCacheData</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><call><name>getDNSCache</name><argument_list>(<argument><expr><name>cacheID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<comment type="line">// Only load if</comment>
			<comment type="line">//  a) we have a cache entry</comment>
			<if_stmt><if>if<condition>(<expr><name>cache</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>domainlist_id</name></name> <operator>=</operator> <call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Increment status counters, we first have to add one to the count of</comment>
		<comment type="line">// unknown queries because query_set_status() will subtract from there</comment>
		<comment type="line">// when setting a different status</comment>
		<expr_stmt><expr><name><name>counters</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>QUERY_UNKNOWN</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>query_set_status</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Do further processing based on the query status we read from the database</comment>
		<switch>switch<condition>(<expr><name>status</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>QUERY_UNKNOWN</name></expr>:</case> <comment type="line">// Unknown</comment>
				<break>break;</break>

			<case>case <expr><name>QUERY_GRAVITY</name></expr>:</case> <comment type="line">// Blocked by gravity</comment>
			<case>case <expr><name>QUERY_REGEX</name></expr>:</case> <comment type="line">// Blocked by regex blacklist</comment>
			<case>case <expr><name>QUERY_BLACKLIST</name></expr>:</case> <comment type="line">// Blocked by exact blacklist</comment>
			<case>case <expr><name>QUERY_EXTERNAL_BLOCKED_IP</name></expr>:</case> <comment type="line">// Blocked by external provider</comment>
			<case>case <expr><name>QUERY_EXTERNAL_BLOCKED_NULL</name></expr>:</case> <comment type="line">// Blocked by external provider</comment>
			<case>case <expr><name>QUERY_EXTERNAL_BLOCKED_NXRA</name></expr>:</case> <comment type="line">// Blocked by external provider</comment>
			<case>case <expr><name>QUERY_GRAVITY_CNAME</name></expr>:</case> <comment type="line">// Blocked by gravity (inside CNAME path)</comment>
			<case>case <expr><name>QUERY_REGEX_CNAME</name></expr>:</case> <comment type="line">// Blocked by regex blacklist (inside CNAME path)</comment>
			<case>case <expr><name>QUERY_BLACKLIST_CNAME</name></expr>:</case> <comment type="line">// Blocked by exact blacklist (inside CNAME path)</comment>
			<case>case <expr><name>QUERY_DBBUSY</name></expr>:</case> <comment type="line">// Blocked because gravity database was busy</comment>
			<case>case <expr><name>QUERY_SPECIAL_DOMAIN</name></expr>:</case> <comment type="line">// Blocked by special domain handling</comment>
				<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>blocked</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<comment type="line">// Get domain pointer</comment>
				<decl_stmt><decl><type><name>domainsData</name><modifier>*</modifier></type> <name>domain</name> <init>= <expr><call><name>getDomain</name><argument_list>(<argument><expr><name>domainID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>domain</name><operator>-&gt;</operator><name>blockedcount</name></name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>change_clientcount</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>QUERY_FORWARDED</name></expr>:</case> <comment type="line">// Forwarded</comment>
			<case>case <expr><name>QUERY_RETRIED</name></expr>:</case> <comment type="line">// (fall through)</comment>
			<case>case <expr><name>QUERY_RETRIED_DNSSEC</name></expr>:</case> <comment type="line">// (fall through)</comment>
				<comment type="line">// Only update upstream if there is one (there</comment>
				<comment type="line">// won't be one for retried DNSSEC queries)</comment>
				<if_stmt><if>if<condition>(<expr><name>upstreamID</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>upstreamsData</name> <modifier>*</modifier></type><name>upstream</name> <init>= <expr><call><name>getUpstream</name><argument_list>(<argument><expr><name>upstreamID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if_stmt><if>if<condition>(<expr><name>upstream</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name><name>upstream</name><operator>-&gt;</operator><name>overTime</name><index>[<expr><name>timeidx</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>upstream</name><operator>-&gt;</operator><name>lastQuery</name></name> <operator>=</operator> <name>queryTimeStamp</name></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>

			<case>case <expr><name>QUERY_CACHE</name></expr>:</case> <comment type="line">// Cached or local config</comment>
			<case>case <expr><name>QUERY_CACHE_STALE</name></expr>:</case>
				<comment type="line">// Nothing to be done here</comment>
				<break>break;</break>

			<case>case <expr><name>QUERY_IN_PROGRESS</name></expr>:</case>
				<comment type="line">// Nothing to be done here</comment>
				<break>break;</break>

			<case>case <expr><name>QUERY_STATUS_MAX</name></expr>:</case>
			<default>default:</default>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Warning: Found unknown status %i in long term database!"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>unlock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Imported %i queries from the long-term database"</literal></expr></argument>, <argument><expr><name><name>counters</name><operator>-&gt;</operator><name>queries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Update lastdbindex so that the next call to DB_save_queries()</comment>
	<comment type="line">// skips the queries that we just imported from the database</comment>
	<expr_stmt><expr><name>lastdbindex</name> <operator>=</operator> <name><name>counters</name><operator>-&gt;</operator><name>queries</name></name></expr>;</expr_stmt>

	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SQLITE_DONE</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"DB_read_queries() - SQL error step: %s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>end_of_DB_read_queries</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Finalize SQLite3 statement</comment>
	<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end_of_DB_read_queries</name>:</label>	<comment type="line">// Close database here, we have to reopen it later (after forking)</comment>
	<expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
