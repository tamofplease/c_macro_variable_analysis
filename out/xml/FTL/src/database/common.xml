<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/database/common.c"><comment type="block">/* Pi-hole: A black hole for Internet advertisements
*  (c) 2017 Pi-hole, LLC (https://pi-hole.net)
*  Network-wide ad blocking via your own hardware.
*
*  FTL Engine
*  Common database routines for pihole-FTL.db
*
*  This file is copyright under the latest version of the EUPL.
*  Please see LICENSE file for your rights under this license. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../FTL.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"message-table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../shmem.h"</cpp:file></cpp:include>
<comment type="line">// struct config</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../config.h"</cpp:file></cpp:include>
<comment type="line">// logg()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../timers.h"</cpp:file></cpp:include>
<comment type="line">// file_exists()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../files.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3-ext.h"</cpp:file></cpp:include>
<comment type="line">// import_aliasclients()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aliasclients.h"</cpp:file></cpp:include>
<comment type="line">// add_additional_info_column()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query-table.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>bool</name></type> <name>DBdeleteoldqueries</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>DBerror</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>lastdbindex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>FTLDBerror</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<block>{<block_content>
	<return>return <expr><name>DBerror</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>bool</name></type> <name>checkFTLDBrc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>rc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Check if the database file is malformed</comment>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SQLITE_CORRUPT</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"WARN: Database %s is damaged and cannot be used."</literal></expr></argument>, <argument><expr><name><name>FTLfiles</name><operator>.</operator><name>FTL_db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>DBerror</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="line">// Check if the database file is read-only</comment>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SQLITE_READONLY</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"WARN: Database %s is read-only and cannot be used."</literal></expr></argument>, <argument><expr><name><name>FTLfiles</name><operator>.</operator><name>FTL_db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>DBerror</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>DBerror</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_dbclose</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier><modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Silently return if the database is known to be broken. It may not be</comment>
	<comment type="line">// possible to close the connection properly.</comment>
	<if_stmt><if>if<condition>(<expr><call><name>FTLDBerror</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Closing FTL database in %s() (%s:%i)"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Only try to close an existing database connection</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>db</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>db</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_close</name><argument_list>(<argument><expr><operator>*</operator><name>db</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Error while trying to close database: %s"</literal></expr></argument>,
		     <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Always set database pointer to NULL, even when closing failed</comment>
	<if_stmt><if>if<condition>(<expr><name>db</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>db</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>sqlite3</name><modifier>*</modifier></type> <name>_dbopen</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>create</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Silently return NULL if the database is known to be broken</comment>
	<if_stmt><if>if<condition>(<expr><call><name>FTLDBerror</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// Try to open database</comment>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Opening FTL database in %s() (%s:%i)"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>SQLITE_OPEN_READWRITE</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>create</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SQLITE_OPEN_CREATE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_open_v2</name><argument_list>(<argument><expr><name><name>FTLfiles</name><operator>.</operator><name>FTL_db</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr> )</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Error while trying to open database: %s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Explicitly set busy handler to value defined in FTL.h</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_busy_timeout</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>DATABASE_BUSY_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr> )</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Error while trying to set busy timeout (%d ms) on database: %s"</literal></expr></argument>,
		     <argument><expr><name>DATABASE_BUSY_TIMEOUT</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>db</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dbquery</name><parameter_list>(<parameter><decl><type><name>sqlite3</name><modifier>*</modifier></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Return early if the database is known to be broken</comment>
	<if_stmt><if>if<condition>(<expr><call><name>FTLDBerror</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><call><name>sqlite3_vmprintf</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>query</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Memory allocation failed in dbquery()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Log generated SQL string when dbquery() is called</comment>
	<comment type="line">// although the database connection is not available</comment>
	<if_stmt><if>if<condition>(<expr><name>db</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"dbquery(\"%s\") called but database is not available!"</literal></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"dbquery: \"%s\""</literal></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"ERROR: SQL query \"%s\" failed: %s"</literal></expr></argument>,
		     <argument><expr><name>query</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Free allocated memory for query string</comment>
	<expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"         ---&gt; OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Return success</comment>
	<return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>create_counter_table</name><parameter_list>(<parameter><decl><type><name>sqlite3</name><modifier>*</modifier></type> <name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Create FTL table in the database (holds properties like database version, etc.)</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"CREATE TABLE counters ( id INTEGER PRIMARY KEY NOT NULL, value INTEGER NOT NULL );"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// ID 0 = total queries</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>db_set_counter</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>DB_TOTALQUERIES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"create_counter_table(): Failed to set total queries counter to zero!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// ID 1 = total blocked queries</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>db_set_counter</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>DB_BLOCKEDQUERIES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"create_counter_table(): Failed to set blocked queries counter to zero!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Time stamp of creation of the counters database</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>db_set_FTL_property</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>DB_FIRSTCOUNTERTIMESTAMP</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>time</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"create_counter_table(): Failed to update first counter timestamp!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Update database version to 2</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>db_set_FTL_property</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>DB_VERSION</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"create_counter_table(): Failed to update database version!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>db_create</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><call><name>dbopen</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>db</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// Create Queries table in the database</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"CREATE TABLE queries ( id INTEGER PRIMARY KEY AUTOINCREMENT, timestamp INTEGER NOT NULL, type INTEGER NOT NULL, status INTEGER NOT NULL, domain TEXT NOT NULL, client TEXT NOT NULL, forward TEXT );"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Add an index on the timestamps (not a unique index!)</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"CREATE INDEX idx_queries_timestamps ON queries (timestamp);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Create FTL table in the database (holds properties like database version, etc.)</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"CREATE TABLE ftl ( id INTEGER PRIMARY KEY NOT NULL, value BLOB NOT NULL );"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Set FTL_db version 1</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>db_set_FTL_property</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>DB_VERSION</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// Most recent timestamp initialized to 00:00 1 Jan 1970</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>db_set_FTL_property</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>DB_LASTTIMESTAMP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// Close database handle</comment>
	<expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>SQLite3LogCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iErrCode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zMsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Note: pArg is NULL and not used</comment>
	<comment type="line">// See https://sqlite.org/rescode.html#extrc for details</comment>
	<comment type="line">// concerning the return codes returned here</comment>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"SQLite3 message: %s (%d)"</literal></expr></argument>, <argument><expr><name>zMsg</name></expr></argument>, <argument><expr><name>iErrCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>db_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Initialize SQLite3 logging callback</comment>
	<comment type="line">// This ensures SQLite3 errors and warnings are logged to FTL.log</comment>
	<comment type="line">// We use this to possibly catch even more errors in places we do not</comment>
	<comment type="line">// explicitly check for failures to have happened</comment>
	<expr_stmt><expr><call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_LOG</name></expr></argument>, <argument><expr><name>SQLite3LogCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Register Pi-hole provided SQLite3 extensions (see sqlite3-ext.c)</comment>
	<expr_stmt><expr><call><name>sqlite3_auto_extension</name><argument_list>(<argument><expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call><operator>)</operator><name>sqlite3_pihole_extensions_init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Check if database exists, if not create empty database</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>file_exists</name><argument_list>(<argument><expr><name><name>FTLfiles</name><operator>.</operator><name>FTL_db</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"No database file found, creating new (empty) database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>db_create</name><argument_list>()</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Creation of database failed, database is not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Explicitly set permissions to 0664</comment>
	<comment type="line">// 664 =            u+w       u+r       g+w       g+r       o+r</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>mode_t</name></type> <name>mode</name> <init>= <expr><name>S_IWUSR</name> <operator>|</operator> <name>S_IRUSR</name> <operator>|</operator> <name>S_IWGRP</name> <operator>|</operator> <name>S_IRGRP</name> <operator>|</operator> <name>S_IROTH</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>chmod_file</name><argument_list>(<argument><expr><name><name>FTLfiles</name><operator>.</operator><name>FTL_db</name></name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Open database</comment>
	<decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><call><name>dbopen</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Return if database access failed</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>db</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// Test FTL_db version and see if we need to upgrade the database file</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>dbversion</name> <init>= <expr><call><name>db_get_int</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>DB_VERSION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// Warn if there is an error, however, do not warn on database file</comment>
	<comment type="line">// corruption. This has already been logged before</comment>
	<if_stmt><if>if<condition>(<expr><name>dbversion</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>FTLDBerror</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Database not available, please ensure the database is unlocked when starting pihole-FTL !"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Database version is %i"</literal></expr></argument>, <argument><expr><name>dbversion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>


	<comment type="line">// Update to version 2 if lower</comment>
	<if_stmt><if>if<condition>(<expr><name>dbversion</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Update to version 2: Create counters table</comment>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Updating long-term database to version 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>create_counter_table</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Counter table not initialized, database not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="line">// Get updated version</comment>
		<expr_stmt><expr><name>dbversion</name> <operator>=</operator> <call><name>db_get_int</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>DB_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Update to version 3 if lower</comment>
	<if_stmt><if>if<condition>(<expr><name>dbversion</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Update to version 3: Create network table</comment>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Updating long-term database to version 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>create_network_table</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Network table not initialized, database not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="line">// Get updated version</comment>
		<expr_stmt><expr><name>dbversion</name> <operator>=</operator> <call><name>db_get_int</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>DB_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Update to version 4 if lower</comment>
	<if_stmt><if>if<condition>(<expr><name>dbversion</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Update to version 4: Unify clients in network table</comment>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Updating long-term database to version 4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>unify_hwaddr</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Unable to unify clients in network table, database not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="line">// Get updated version</comment>
		<expr_stmt><expr><name>dbversion</name> <operator>=</operator> <call><name>db_get_int</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>DB_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Update to version 5 if lower</comment>
	<if_stmt><if>if<condition>(<expr><name>dbversion</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Update to version 5: Create network-addresses table</comment>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Updating long-term database to version 5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>create_network_addresses_table</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Network-addresses table not initialized, database not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="line">// Get updated version</comment>
		<expr_stmt><expr><name>dbversion</name> <operator>=</operator> <call><name>db_get_int</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>DB_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Update to version 6 if lower</comment>
	<if_stmt><if>if<condition>(<expr><name>dbversion</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Update to version 6: Create message table</comment>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Updating long-term database to version 6"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>create_message_table</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Message table not initialized, database not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="line">// Get updated version</comment>
		<expr_stmt><expr><name>dbversion</name> <operator>=</operator> <call><name>db_get_int</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>DB_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Update to version 7 if lower</comment>
	<if_stmt><if>if<condition>(<expr><name>dbversion</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Update to version 7: Add additional_info column to queries table</comment>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Updating long-term database to version 7"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>add_additional_info_column</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Column additional_info not initialized, database not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="line">// Get updated version</comment>
		<expr_stmt><expr><name>dbversion</name> <operator>=</operator> <call><name>db_get_int</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>DB_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Update to version 8 if lower</comment>
	<if_stmt><if>if<condition>(<expr><name>dbversion</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Update to version 8: Add name field to network_addresses table</comment>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Updating long-term database to version 8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>create_network_addresses_with_names_table</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Network addresses table not initialized, database not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="line">// Get updated version</comment>
		<expr_stmt><expr><name>dbversion</name> <operator>=</operator> <call><name>db_get_int</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>DB_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Update to version 9 if lower</comment>
	<if_stmt><if>if<condition>(<expr><name>dbversion</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Update to version 9: Add aliasclients table</comment>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Updating long-term database to version 9"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>create_aliasclients_table</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Aliasclients table not initialized, database not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="line">// Get updated version</comment>
		<expr_stmt><expr><name>dbversion</name> <operator>=</operator> <call><name>db_get_int</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>DB_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Update to version 10 if lower</comment>
	<if_stmt><if>if<condition>(<expr><name>dbversion</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Update to version 10: Use linking tables for queries table</comment>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Updating long-term database to version 10"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>optimize_queries_table</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Queries table not optimized, database not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Reopen database after low-level schema editing to reload the schema</comment>
		<expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>db</name> <operator>=</operator> <call><name>dbopen</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>

		<comment type="line">// Get updated version</comment>
		<expr_stmt><expr><name>dbversion</name> <operator>=</operator> <call><name>db_get_int</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>DB_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Update to version 11 if lower</comment>
	<if_stmt><if>if<condition>(<expr><name>dbversion</name> <operator>&lt;</operator> <literal type="number">11</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Update to version 11: Use link table also for additional_info column</comment>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Updating long-term database to version 11"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>create_addinfo_table</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Linkt table for additional_info not generated, database not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Reopen database after low-level schema editing to reload the schema</comment>
		<expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>db</name> <operator>=</operator> <call><name>dbopen</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>

		<comment type="line">// Get updated version</comment>
		<expr_stmt><expr><name>dbversion</name> <operator>=</operator> <call><name>db_get_int</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>DB_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Update to version 12 if lower</comment>
	<if_stmt><if>if<condition>(<expr><name>dbversion</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Update to version 12: Add additional columns for reply type and time, and dnssec status</comment>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Updating long-term database to version 12"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>add_query_storage_columns</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Additional records not generated, database not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="line">// Get updated version</comment>
		<expr_stmt><expr><name>dbversion</name> <operator>=</operator> <call><name>db_get_int</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>DB_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>lock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>import_aliasclients</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>unlock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Close database to prevent having it opened all time</comment>
	<comment type="line">// We already closed the database when we returned earlier</comment>
	<expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Log if users asked us to not use the long-term database for queries</comment>
	<comment type="line">// We will still use it to store warnings in it</comment>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>DBexport</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>maxDBdays</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Not using the database for storing queries"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>config</name><operator>.</operator><name>DBexport</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Database successfully initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>db_get_int</name><parameter_list>(<parameter><decl><type><name>sqlite3</name><modifier>*</modifier></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>ftl_table_props</name></name></type> <name>ID</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Prepare SQL statement</comment>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>querystr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querystr</name></expr></argument>, <argument><expr><literal type="string">"SELECT VALUE FROM ftl WHERE id = %u;"</literal></expr></argument>, <argument><expr><name>ID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>querystr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Memory allocation failed in db_get_int db, with ID = %u (%i)"</literal></expr></argument>, <argument><expr><name>ID</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>DB_FAILED</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><call><name>db_query_int</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>querystr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>querystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>db_set_FTL_property</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>ftl_table_props</name></name></type> <name>ID</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>long</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>dbquery</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"INSERT OR REPLACE INTO ftl (id, value) VALUES ( %u, %ld );"</literal></expr></argument>, <argument><expr><name>ID</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>db_set_counter</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>counters_table_props</name></name></type> <name>ID</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>long</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>rc</name> <init>= <expr><call><name>dbquery</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"INSERT OR REPLACE INTO counters (id, value) VALUES ( %u, %ld );"</literal></expr></argument>, <argument><expr><name>ID</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>db_update_counters</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>total</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>blocked</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>dbquery</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"UPDATE counters SET value = value + %i WHERE id = %i;"</literal></expr></argument>, <argument><expr><name>total</name></expr></argument>, <argument><expr><name>DB_TOTALQUERIES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>dbquery</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"UPDATE counters SET value = value + %i WHERE id = %i;"</literal></expr></argument>, <argument><expr><name>blocked</name></expr></argument>, <argument><expr><name>DB_BLOCKEDQUERIES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>db_query_int</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>querystr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Return early if the database is known to be broken</comment>
	<if_stmt><if>if<condition>(<expr><call><name>FTLDBerror</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>DB_FAILED</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"dbquery: \"%s\""</literal></expr></argument>, <argument><expr><name>querystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>sqlite3_stmt</name><modifier>*</modifier></type> <name>stmt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr> )</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SQLITE_BUSY</name></expr> )</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Encountered prepare error in db_query_int(\"%s\"): %s"</literal></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>DB_FAILED</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SQLITE_ROW</name></expr> )</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"         ---&gt; Result %i (int)"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SQLITE_DONE</name></expr> )</condition>
	<block>{<block_content>
		<comment type="line">// No rows available</comment>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name>DB_NODATA</name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"         ---&gt; No data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Encountered step error in db_query_int(\"%s\"): %s"</literal></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>DB_FAILED</name></expr>;</return>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>long</name> <name>int</name></type> <name>get_max_query_ID</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Return early if the database is known to be broken</comment>
	<if_stmt><if>if<condition>(<expr><call><name>FTLDBerror</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>DB_FAILED</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name> <init>= <expr><literal type="string">"SELECT MAX(ID) FROM queries"</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"dbquery: \"%s\""</literal></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>sqlite3_stmt</name><modifier>*</modifier></type> <name>stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr> )</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SQLITE_BUSY</name></expr> )</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Encountered prepare error in get_max_query_ID(): %s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Return okay if the database is busy</comment>
		<return>return <expr><name>DB_FAILED</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SQLITE_ROW</name></expr> )</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Encountered step error in get_max_query_ID(): %s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>DB_FAILED</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>result</name> <init>= <expr><call><name>sqlite3_column_int64</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"         ---&gt; Result %lli (long long int)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Return SQLite3 engine version string</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_sqlite3_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>sqlite3_libversion</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
