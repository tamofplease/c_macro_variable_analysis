<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/database/network-table.c"><comment type="block">/* Pi-hole: A black hole for Internet advertisements
*  (c) 2017 Pi-hole, LLC (https://pi-hole.net)
*  Network-wide ad blocking via your own hardware.
*
*  FTL Engine
*  Network table routines
*
*  This file is copyright under the latest version of the EUPL.
*  Please see LICENSE file for your rights under this license. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../FTL.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network-table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../shmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../log.h"</cpp:file></cpp:include>
<comment type="line">// timer_elapsed_msec()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../timers.h"</cpp:file></cpp:include>
<comment type="line">// struct config</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../config.h"</cpp:file></cpp:include>
<comment type="line">// resolveHostname()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../resolve.h"</cpp:file></cpp:include>
<comment type="line">// killed</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../signals.h"</cpp:file></cpp:include>

<comment type="line">// Private prototypes</comment>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>getMACVendor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hwaddr</name></decl></parameter>)</parameter_list> __attribute__ <parameter_list>(<parameter/></parameter_list>(malloc</function_decl>))<empty_stmt>;</empty_stmt>
<enum>enum <name>arp_status</name> <block>{ <decl><name>CLIENT_NOT_HANDLED</name></decl>, <decl><name>CLIENT_ARP_COMPLETE</name></decl>, <decl><name>CLIENT_ARP_INCOMPLETE</name></decl> }</block>;</enum>

<function><type><name>bool</name></type> <name>create_network_table</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Return early if database is known to be broken</comment>
	<if_stmt><if>if<condition>(<expr><call><name>FTLDBerror</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// Create network table in the database</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"CREATE TABLE network ( id INTEGER PRIMARY KEY NOT NULL, "</literal> \
	                                    <literal type="string">"ip TEXT NOT NULL, "</literal> \
	                                    <literal type="string">"hwaddr TEXT NOT NULL, "</literal> \
	                                    <literal type="string">"interface TEXT NOT NULL, "</literal> \
	                                    <literal type="string">"name TEXT, "</literal> \
	                                    <literal type="string">"firstSeen INTEGER NOT NULL, "</literal> \
	                                    <literal type="string">"lastQuery INTEGER NOT NULL, "</literal> \
	                                    <literal type="string">"numQueries INTEGER NOT NULL, "</literal> \
	                                    <literal type="string">"macVendor TEXT);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Update database version to 3</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>db_set_FTL_property</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>DB_VERSION</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"create_network_table(): Failed to update database version!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>create_network_addresses_table</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Return early if database is known to be broken</comment>
	<if_stmt><if>if<condition>(<expr><call><name>FTLDBerror</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// Disable foreign key enforcement for this transaction</comment>
	<comment type="line">// Otherwise, dropping the network table would not be allowed</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"PRAGMA foreign_keys=OFF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Begin new transaction</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"BEGIN TRANSACTION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Create network_addresses table in the database</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"CREATE TABLE network_addresses ( network_id INTEGER NOT NULL, "</literal>\
	                                              <literal type="string">"ip TEXT NOT NULL, "</literal>\
	                                              <literal type="string">"lastSeen INTEGER NOT NULL DEFAULT (cast(strftime('%%s', 'now') as int)), "</literal>\
	                                              <literal type="string">"UNIQUE(network_id,ip), "</literal>\
	                                              <literal type="string">"FOREIGN KEY(network_id) REFERENCES network(id));"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Create a network_addresses row for each entry in the network table</comment>
	<comment type="line">// Ignore possible duplicates as they are harmless and can be skipped</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"INSERT OR IGNORE INTO network_addresses (network_id,ip) SELECT id,ip FROM network;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Remove IP column from network table.</comment>
	<comment type="line">// As ALTER TABLE is severely limited, we have to do the column deletion manually.</comment>
	<comment type="line">// Step 1: We create a new table without the ip column</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"CREATE TABLE network_bck ( id INTEGER PRIMARY KEY NOT NULL, "</literal> \
	                                    <literal type="string">"hwaddr TEXT UNIQUE NOT NULL, "</literal> \
	                                    <literal type="string">"interface TEXT NOT NULL, "</literal> \
	                                    <literal type="string">"name TEXT, "</literal> \
	                                    <literal type="string">"firstSeen INTEGER NOT NULL, "</literal> \
	                                    <literal type="string">"lastQuery INTEGER NOT NULL, "</literal> \
	                                    <literal type="string">"numQueries INTEGER NOT NULL, "</literal> \
	                                    <literal type="string">"macVendor TEXT);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Step 2: Copy data (except ip column) from network into network_back</comment>
	<comment type="line">//         The unique constraint on hwaddr is satisfied by grouping results</comment>
	<comment type="line">//         by this field where we chose to take only the most recent entry</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"INSERT INTO network_bck "</literal>\
	         <literal type="string">"SELECT id, hwaddr, interface, name, firstSeen, "</literal>\
	                <literal type="string">"lastQuery, numQueries, macVendor "</literal>\
	                <literal type="string">"FROM network GROUP BY hwaddr HAVING max(lastQuery);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Step 3: Drop the network table, the unique index will be automatically dropped</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"DROP TABLE network;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Step 4: Rename network_bck table to network table as last step</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"ALTER TABLE network_bck RENAME TO network;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Update database version to 5</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>db_set_FTL_property</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>DB_VERSION</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"create_network_addresses_table(): Failed to update database version!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Finish transaction</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Re-enable foreign key enforcement</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"PRAGMA foreign_keys=ON"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>create_network_addresses_with_names_table</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Return early if database is known to be broken</comment>
	<if_stmt><if>if<condition>(<expr><call><name>FTLDBerror</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// Disable foreign key enforcement for this transaction</comment>
	<comment type="line">// Otherwise, dropping the network table would not be allowed</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"PRAGMA foreign_keys=OFF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Begin new transaction</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"BEGIN TRANSACTION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Step 1: Create network_addresses table in the database</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"CREATE TABLE network_addresses_bck ( network_id INTEGER NOT NULL, "</literal>
	                                                  <literal type="string">"ip TEXT UNIQUE NOT NULL, "</literal>
	                                                  <literal type="string">"lastSeen INTEGER NOT NULL DEFAULT (cast(strftime('%%s', 'now') as int)), "</literal>
	                                                  <literal type="string">"name TEXT, "</literal>
	                                                  <literal type="string">"nameUpdated INTEGER, "</literal>
	                                                  <literal type="string">"FOREIGN KEY(network_id) REFERENCES network(id));"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Step 2: Copy data from network_addresses into network_addresses_bck</comment>
	<comment type="line">//         name and nameUpdated are NULL at this point</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"REPLACE INTO network_addresses_bck "</literal>
	             <literal type="string">"(network_id,ip,lastSeen) "</literal>
	             <literal type="string">"SELECT network_id,ip,lastSeen "</literal>
	                    <literal type="string">"FROM network_addresses;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Step 3: Drop the network_addresses table</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"DROP TABLE network_addresses;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Step 4: Drop the network_names table (if exists due to a previous v7 database update)</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"DROP TABLE IF EXISTS network_names;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Step 5: Rename network_addresses_bck table to network_addresses table as last step</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"ALTER TABLE network_addresses_bck RENAME TO network_addresses;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Remove name column from network table.</comment>
	<comment type="line">// As ALTER TABLE is severely limited, we have to do the column deletion manually.</comment>
	<comment type="line">// Step 1: We create a new table without the name column</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"CREATE TABLE network_bck ( id INTEGER PRIMARY KEY NOT NULL, "</literal> \
	                                        <literal type="string">"hwaddr TEXT UNIQUE NOT NULL, "</literal> \
	                                        <literal type="string">"interface TEXT NOT NULL, "</literal> \
	                                        <literal type="string">"firstSeen INTEGER NOT NULL, "</literal> \
	                                        <literal type="string">"lastQuery INTEGER NOT NULL, "</literal> \
	                                        <literal type="string">"numQueries INTEGER NOT NULL, "</literal> \
	                                        <literal type="string">"macVendor TEXT);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Step 2: Copy data (except name column) from network into network_back</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"INSERT INTO network_bck "</literal>\
	             <literal type="string">"SELECT id, hwaddr, interface, firstSeen, "</literal>\
	                    <literal type="string">"lastQuery, numQueries, macVendor "</literal>\
	                    <literal type="string">"FROM network;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Step 3: Drop the network table, the unique index will be automatically dropped</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"DROP TABLE network;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Step 4: Rename network_bck table to network table as last step</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"ALTER TABLE network_bck RENAME TO network;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Update database version to 8</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>db_set_FTL_property</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>DB_VERSION</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"create_network_addresses_with_names_table(): Failed to update database version!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Finish transaction</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Re-enable foreign key enforcement</comment>
	<expr_stmt><expr><call><name>SQL_bool</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"PRAGMA foreign_keys=ON"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Try to find device by recent usage of this IP address</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>find_device_by_recent_ip</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ipaddr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Return early if database is known to be broken</comment>
	<if_stmt><if>if<condition>(<expr><call><name>FTLDBerror</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>querystr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querystr</name></expr></argument>,
	                   <argument><expr><literal type="string">"SELECT network_id FROM network_addresses "</literal>
	                   <literal type="string">"WHERE ip = \'%s\' AND "</literal>
	                   <literal type="string">"lastSeen &gt; (cast(strftime('%%s', 'now') as int)-86400) "</literal>
	                   <literal type="string">"ORDER BY lastSeen DESC LIMIT 1;"</literal></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>querystr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Memory allocation failed in find_device_by_recent_ip(\"%s\"): %i"</literal></expr></argument>,
		     <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Perform SQL query</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>network_id</name> <init>= <expr><call><name>db_query_int</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>querystr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>querystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>querystr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>network_id</name> <operator>==</operator> <name>DB_FAILED</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// SQLite error</comment>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><name>network_id</name> <operator>==</operator> <name>DB_NODATA</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// No result found</comment>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_ARP</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"APR: Identified device %s using most recently used IP address"</literal></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Found network_id</comment>
	<return>return <expr><name>network_id</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Try to find device by mock hardware address (generated from IP address)</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>find_device_by_mock_hwaddr</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ipaddr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Return early if database is known to be broken</comment>
	<if_stmt><if>if<condition>(<expr><call><name>FTLDBerror</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>DB_FAILED</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>querystr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querystr</name></expr></argument>, <argument><expr><literal type="string">"SELECT id FROM network WHERE hwaddr = \'ip-%s\';"</literal></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>querystr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Memory allocation failed in find_device_by_mock_hwaddr(\"%s\"): %i"</literal></expr></argument>,
		     <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Perform SQL query</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>network_id</name> <init>= <expr><call><name>db_query_int</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>querystr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>querystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>network_id</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Try to find device by hardware address</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>find_device_by_hwaddr</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>hwaddr</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Return early if database is known to be broken</comment>
	<if_stmt><if>if<condition>(<expr><call><name>FTLDBerror</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>DB_FAILED</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>querystr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querystr</name></expr></argument>, <argument><expr><literal type="string">"SELECT id FROM network WHERE hwaddr = \'%s\' COLLATE NOCASE;"</literal></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>querystr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Memory allocation failed in find_device_by_hwaddr(\"%s\"): %i"</literal></expr></argument>,
		     <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Perform SQL query</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>network_id</name> <init>= <expr><call><name>db_query_int</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>querystr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>querystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>network_id</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Try to find device by RECENT mock hardware address (generated from IP address)</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>find_recent_device_by_mock_hwaddr</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ipaddr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Return early if database is known to be broken</comment>
	<if_stmt><if>if<condition>(<expr><call><name>FTLDBerror</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>DB_FAILED</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>querystr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querystr</name></expr></argument>,
	                   <argument><expr><literal type="string">"SELECT id FROM network WHERE "</literal>
	                   <literal type="string">"hwaddr = \'ip-%s\' AND "</literal>
	                   <literal type="string">"firstSeen &gt; (cast(strftime('%%s', 'now') as int)-3600);"</literal></expr></argument>,
	                   <argument><expr><name>ipaddr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>querystr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Memory allocation failed in find_device_by_recent_mock_hwaddr(\"%s\"): %i"</literal></expr></argument>,
		     <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Perform SQL query</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>network_id</name> <init>= <expr><call><name>db_query_int</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>querystr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>querystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>network_id</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Store hostname of device identified by dbID</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>update_netDB_name</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Return early if database is known to be broken</comment>
	<if_stmt><if>if<condition>(<expr><call><name>FTLDBerror</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// Skip if hostname is NULL or an empty string (= no result)</comment>
	<if_stmt><if>if<condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SQLITE_OK</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>query_stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>querystr</name><index>[]</index></name> <init>= <expr><literal type="string">"UPDATE network_addresses SET name = ?1, "</literal>
	                               <literal type="string">"nameUpdated = (cast(strftime('%s', 'now') as int)) "</literal>
	                               <literal type="string">"WHERE ip = ?2"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>query_stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"update_netDB_name(%s, \"%s\") - SQL error prepare (%i): %s"</literal></expr></argument>,
		     <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"dbquery: \"%s\" with arguments 1 = \"%s\" and 2 = \"%s\""</literal></expr></argument>,
		     <argument><expr><name>querystr</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Bind name to prepared statement (1st argument)</comment>
	<comment type="line">// We can do this as name has dynamic scope that exceeds that of the binding.</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"update_netDB_name(%s, \"%s\"): Failed to bind ip (error %d): %s"</literal></expr></argument>,
		     <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="line">// Bind ip (unique key) to prepared statement (2nd argument)</comment>
	<comment type="line">// We can do this as name has dynamic scope that exceeds that of the binding.</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"update_netDB_name(%s, \"%s\"): Failed to bind name (error %d): %s"</literal></expr></argument>,
		     <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Perform step</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_DONE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"update_netDB_name(%s, \"%s\"): Failed to step (error %d): %s"</literal></expr></argument>,
		     <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Finalize statement</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"update_netDB_name(%s, \"%s\"): Failed to finalize (error %d): %s"</literal></expr></argument>,
		     <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Updates lastQuery. Only use new value if larger than zero.</comment>
<comment type="line">// client-&gt;lastQuery may be zero if this client is only known</comment>
<comment type="line">// from a database entry but has not been seen since then (skip in this case)</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>update_netDB_lastQuery</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>network_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>time_t</name></type> <name>lastQuery</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Return early if database is known to be broken</comment>
	<if_stmt><if>if<condition>(<expr><call><name>FTLDBerror</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// Return early if there is nothing to update</comment>
	<if_stmt><if>if<condition>(<expr><name>lastQuery</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SQLITE_OK</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ret</name> <init>= <expr><call><name>dbquery</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"UPDATE network "</literal>\
	                            <literal type="string">"SET lastQuery = MAX(lastQuery, %ld) "</literal>\
	                            <literal type="string">"WHERE id = %i;"</literal></expr></argument>,
	                            <argument><expr><name>lastQuery</name></expr></argument>, <argument><expr><name>network_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<comment type="line">// Update numQueries.</comment>
<comment type="line">// Add queries seen since last update and reset counter afterwards</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>update_netDB_numQueries</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>dbID</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>numQueries</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Return early if database is known to be broken</comment>
	<if_stmt><if>if<condition>(<expr><call><name>FTLDBerror</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// Return early if there is nothing to update</comment>
	<if_stmt><if>if<condition>(<expr><name>numQueries</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SQLITE_OK</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ret</name> <init>= <expr><call><name>dbquery</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"UPDATE network "</literal>
	                            <literal type="string">"SET numQueries = numQueries + %u "</literal>
	                            <literal type="string">"WHERE id = %i;"</literal></expr></argument>,
	                            <argument><expr><name>numQueries</name></expr></argument>, <argument><expr><name>dbID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Add IP address record if it does not exist (INSERT). If it already exists,</comment>
<comment type="line">// the UNIQUE(ip) trigger becomes active and the line is instead REPLACEd.</comment>
<comment type="line">// We preserve a possibly existing IP -&gt; host name association here</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>add_netDB_network_address</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>network_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Return early if database is known to be broken</comment>
	<if_stmt><if>if<condition>(<expr><call><name>FTLDBerror</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// Return early if there is nothing to be done in here</comment>
	<if_stmt><if>if<condition>(<expr><name>ip</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SQLITE_OK</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>query_stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>querystr</name><index>[]</index></name> <init>= <expr><literal type="string">"INSERT OR REPLACE INTO network_addresses "</literal>
	                        <literal type="string">"(network_id,ip,lastSeen,name,nameUpdated) VALUES "</literal>
	                        <literal type="string">"(?1,?2,(cast(strftime('%s', 'now') as int)),"</literal>
	                        <literal type="string">"(SELECT name FROM network_addresses "</literal>
	                                <literal type="string">"WHERE ip = ?2),"</literal>
	                        <literal type="string">"(SELECT nameUpdated FROM network_addresses "</literal>
	                                <literal type="string">"WHERE ip = ?2));"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>query_stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"add_netDB_network_address(%i, \"%s\") - SQL error prepare (%i): %s"</literal></expr></argument>,
		     <argument><expr><name>network_id</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"dbquery: \"%s\" with arguments ?1 = %i and ?2 = \"%s\""</literal></expr></argument>,
		     <argument><expr><name>querystr</name></expr></argument>, <argument><expr><name>network_id</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Bind network_id to prepared statement (1st argument)</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>network_id</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"add_netDB_network_address(%i, \"%s\"): Failed to bind network_id (error %d): %s"</literal></expr></argument>,
		     <argument><expr><name>network_id</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="line">// Bind ip to prepared statement (2nd argument)</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"add_netDB_network_address(%i, \"%s\"): Failed to bind name (error %d): %s"</literal></expr></argument>,
		     <argument><expr><name>network_id</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Perform step</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_DONE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"add_netDB_network_address(%i, \"%s\"): Failed to step (error %d): %s"</literal></expr></argument>,
		     <argument><expr><name>network_id</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Finalize statement</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"add_netDB_network_address(%i, \"%s\"): Failed to finalize (error %d): %s"</literal></expr></argument>,
		     <argument><expr><name>network_id</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Insert a new record into the network table</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>insert_netDB_device</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hwaddr</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>lastQuery</name></decl></parameter>,
                               <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>numQueriesARP</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>macVendor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Return early if database is known to be broken</comment>
	<if_stmt><if>if<condition>(<expr><call><name>FTLDBerror</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>query_stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>querystr</name><index>[]</index></name> <init>= <expr><literal type="string">"INSERT INTO network "</literal>\
	                        <literal type="string">"(hwaddr,interface,firstSeen,lastQuery,numQueries,macVendor) "</literal>\
	                        <literal type="string">"VALUES (?1,\'N/A\',?2,?3,?4,?5);"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>query_stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"insert_netDB_device(\"%s\",%lu, %lu, %u, \"%s\") - SQL error prepare (%i): %s"</literal></expr></argument>,
		     <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>lastQuery</name></expr></argument>, <argument><expr><name>numQueriesARP</name></expr></argument>, <argument><expr><name>macVendor</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"dbquery: \"%s\" with arguments ?1-?5 = (\"%s\",%lu,%lu,%u,\"%s\")"</literal></expr></argument>,
		     <argument><expr><name>querystr</name></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>lastQuery</name></expr></argument>, <argument><expr><name>numQueriesARP</name></expr></argument>, <argument><expr><name>macVendor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Bind hwaddr to prepared statement (1st argument)</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"insert_netDB_device(\"%s\",%lu, %lu, %u, \"%s\"): Failed to bind hwaddr (error %d): %s"</literal></expr></argument>,
		     <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>lastQuery</name></expr></argument>, <argument><expr><name>numQueriesARP</name></expr></argument>, <argument><expr><name>macVendor</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Bind now to prepared statement (2nd argument)</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"insert_netDB_device(\"%s\",%lu, %lu, %u, \"%s\"): Failed to bind now (error %d): %s"</literal></expr></argument>,
		     <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>lastQuery</name></expr></argument>, <argument><expr><name>numQueriesARP</name></expr></argument>, <argument><expr><name>macVendor</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Bind lastQuery to prepared statement (3rd argument)</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>lastQuery</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"insert_netDB_device(\"%s\",%lu, %lu, %u, \"%s\"): Failed to bind lastQuery (error %d): %s"</literal></expr></argument>,
		     <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>lastQuery</name></expr></argument>, <argument><expr><name>numQueriesARP</name></expr></argument>, <argument><expr><name>macVendor</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Bind numQueriesARP to prepared statement (4th argument)</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>numQueriesARP</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"insert_netDB_device(\"%s\",%lu, %lu, %u, \"%s\"): Failed to bind numQueriesARP (error %d): %s"</literal></expr></argument>,
		     <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>lastQuery</name></expr></argument>, <argument><expr><name>numQueriesARP</name></expr></argument>, <argument><expr><name>macVendor</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Bind macVendor to prepared statement (5th argument) - the macVendor can be NULL here</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>macVendor</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"insert_netDB_device(\"%s\",%lu, %lu, %u, \"%s\"): Failed to bind macVendor (error %d): %s"</literal></expr></argument>,
		     <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>lastQuery</name></expr></argument>, <argument><expr><name>numQueriesARP</name></expr></argument>, <argument><expr><name>macVendor</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Perform step</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_DONE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"insert_netDB_device(\"%s\",%lu, %lu, %u, \"%s\"): Failed to step (error %d): %s"</literal></expr></argument>,
		     <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>lastQuery</name></expr></argument>, <argument><expr><name>numQueriesARP</name></expr></argument>, <argument><expr><name>macVendor</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Finalize statement</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"insert_netDB_device(\"%s\",%lu, %lu, %u, \"%s\"): Failed to finalize (error %d): %s"</literal></expr></argument>,
		     <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>lastQuery</name></expr></argument>, <argument><expr><name>numQueriesARP</name></expr></argument>, <argument><expr><name>macVendor</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Convert mock-device into a real one by changing the hardware address (and possibly adding a vendor string)</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>unmock_netDB_device</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hwaddr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>macVendor</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>dbID</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Return early if database is known to be broken</comment>
	<if_stmt><if>if<condition>(<expr><call><name>FTLDBerror</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>query_stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>querystr</name><index>[]</index></name> <init>= <expr><literal type="string">"UPDATE network SET "</literal>\
	                        <literal type="string">"hwaddr = ?1, macVendor=?2 WHERE id = ?3;"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>query_stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"unmock_netDB_device(\"%s\", \"%s\", %i) - SQL error prepare (%i): %s"</literal></expr></argument>,
		     <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>macVendor</name></expr></argument>, <argument><expr><name>dbID</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"dbquery: \"%s\" with arguments ?1 = \"%s\", ?2 = \"%s\", ?3 = %i"</literal></expr></argument>,
		     <argument><expr><name>querystr</name></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>macVendor</name></expr></argument>, <argument><expr><name>dbID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Bind hwaddr to prepared statement (1st argument)</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"unmock_netDB_device(\"%s\", \"%s\", %i): Failed to bind hwaddr (error %d): %s"</literal></expr></argument>,
		     <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>macVendor</name></expr></argument>, <argument><expr><name>dbID</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Bind macVendor to prepared statement (2nd argument) - the macVendor can be NULL here</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>macVendor</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"unmock_netDB_device(\"%s\", \"%s\", %i): Failed to bind macVendor (error %d): %s"</literal></expr></argument>,
		     <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>macVendor</name></expr></argument>, <argument><expr><name>dbID</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Bind now to prepared statement (3rd argument)</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dbID</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"unmock_netDB_device(\"%s\", \"%s\", %i): Failed to bind now (error %d): %s"</literal></expr></argument>,
		     <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>macVendor</name></expr></argument>, <argument><expr><name>dbID</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Perform step</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_DONE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"unmock_netDB_device(\"%s\", \"%s\", %i): Failed to step (error %d): %s"</literal></expr></argument>,
		     <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>macVendor</name></expr></argument>, <argument><expr><name>dbID</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Finalize statement</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"unmock_netDB_device(\"%s\", \"%s\", %i): Failed to finalize (error %d): %s"</literal></expr></argument>,
		     <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>macVendor</name></expr></argument>, <argument><expr><name>dbID</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Update interface of device</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>update_netDB_interface</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>network_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>iface</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Return early if database is known to be broken</comment>
	<if_stmt><if>if<condition>(<expr><call><name>FTLDBerror</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// Return early if there is nothing to be done in here</comment>
	<if_stmt><if>if<condition>(<expr><name>iface</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>iface</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SQLITE_OK</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>query_stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>querystr</name><index>[]</index></name> <init>= <expr><literal type="string">"UPDATE network SET interface = ?1 WHERE id = ?2"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>query_stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"update_netDB_interface(%i, \"%s\") - SQL error prepare (%i): %s"</literal></expr></argument>,
		     <argument><expr><name>network_id</name></expr></argument>, <argument><expr><name>iface</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"dbquery: \"%s\" with arguments ?1 = \"%s\" and ?2 = %i"</literal></expr></argument>,
		     <argument><expr><name>querystr</name></expr></argument>, <argument><expr><name>iface</name></expr></argument>, <argument><expr><name>network_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Bind iface to prepared statement (1st argument)</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>iface</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"update_netDB_interface(%i, \"%s\"): Failed to bind iface (error %d): %s"</literal></expr></argument>,
		     <argument><expr><name>network_id</name></expr></argument>, <argument><expr><name>iface</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="line">// Bind network_id to prepared statement (2nd argument)</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>network_id</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"update_netDB_interface(%i, \"%s\"): Failed to bind name (error %d): %s"</literal></expr></argument>,
		     <argument><expr><name>network_id</name></expr></argument>, <argument><expr><name>iface</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Perform step</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_DONE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"update_netDB_interface(%i, \"%s\"): Failed to step (error %d): %s"</literal></expr></argument>,
		     <argument><expr><name>network_id</name></expr></argument>, <argument><expr><name>iface</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Finalize statement</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"update_netDB_interface(%i, \"%s\"): Failed to finalize (error %d): %s"</literal></expr></argument>,
		     <argument><expr><name>network_id</name></expr></argument>, <argument><expr><name>iface</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>query_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Loop over all clients known to FTL and ensure we add them all to the database</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>add_FTL_clients_to_network_table</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>arp_status</name></name> <modifier>*</modifier></type><name>client_status</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>,
                                             <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>additional_entries</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Return early if database is known to be broken</comment>
	<if_stmt><if>if<condition>(<expr><call><name>FTLDBerror</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>hwaddr</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>clientID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>clientID</name> <operator>&lt;</operator> <name><name>counters</name><operator>-&gt;</operator><name>clients</name></name></expr>;</condition> <incr><expr><name>clientID</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="line">// Check thread cancellation</comment>
		<if_stmt><if>if<condition>(<expr><name>killed</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<comment type="line">// Get client pointer</comment>
		<expr_stmt><expr><call><name>lock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>clientsData</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><call><name>getClient</name><argument_list>(<argument><expr><name>clientID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>client</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_ARP</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Network table: Client %d returned NULL pointer"</literal></expr></argument>, <argument><expr><name>clientID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>unlock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Silently skip alias-clients - they do not really exist</comment>
		<if_stmt><if>if<condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>aliasclient</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>unlock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Get hostname and IP address of this client</comment>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ipaddr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>interface</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>ipaddr</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>ippos</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>hostname</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>namepos</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>interface</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>ifacepos</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Skip if already handled above (first check against clients_array_size as we might have added</comment>
		<comment type="line">// more clients to FTL's memory herein (those known only from the database))</comment>
		<if_stmt><if>if<condition>(<expr><name><name>client_status</name><index>[<expr><name>clientID</name></expr>]</index></name> <operator>!=</operator> <name>CLIENT_NOT_HANDLED</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_ARP</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Network table: Client %s known through ARP/neigh cache"</literal></expr></argument>,
				     <argument><expr><name>ipaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if<condition>(<expr><name>ipaddr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ipaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if<condition>(<expr><name>hostname</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if<condition>(<expr><name>interface</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>interface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>unlock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if>
		<if type="elseif">else if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_ARP</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Network table: %s NOT known through ARP/neigh cache"</literal></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">//</comment>
		<comment type="line">// Variant 1: Try to find a device with an EDNS(0)-provided hardware address</comment>
		<comment type="line">//</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>dbID</name> <init>= <expr><name>DB_NODATA</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>hwlen</name></name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hwaddr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%02X:%02X:%02X:%02X:%02X:%02X"</literal></expr></argument>,
			         <argument><expr><name><name>client</name><operator>-&gt;</operator><name>hwaddr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>hwaddr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
			         <argument><expr><name><name>client</name><operator>-&gt;</operator><name>hwaddr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>hwaddr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,
			         <argument><expr><name><name>client</name><operator>-&gt;</operator><name>hwaddr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>hwaddr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>hwaddr</name><index>[<expr><literal type="number">6</literal><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>unlock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>dbID</name> <operator>=</operator> <call><name>find_device_by_hwaddr</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>lock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// Reacquire client pointer (if may have changed when unlocking above)</comment>
			<expr_stmt><expr><name>client</name> <operator>=</operator> <call><name>getClient</name><argument_list>(<argument><expr><name>clientID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_ARP</name> <operator>&amp;&amp;</operator> <name>dbID</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Network table: Client with MAC %s is network ID %i"</literal></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>dbID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="line">//</comment>
			<comment type="line">// Variant 2: Try to find a device using the same IP address within the last 24 hours</comment>
			<comment type="line">// Only try this when there is no EDNS(0) MAC address available</comment>
			<comment type="line">//</comment>
			<expr_stmt><expr><call><name>unlock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>dbID</name> <operator>=</operator> <call><name>find_device_by_recent_ip</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>lock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// Reacquire client pointer (if may have changed when unlocking above)</comment>
			<expr_stmt><expr><name>client</name> <operator>=</operator> <call><name>getClient</name><argument_list>(<argument><expr><name>clientID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_ARP</name> <operator>&amp;&amp;</operator> <name>dbID</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Network table: Client with IP %s has no MAC info but was recently be seen for network ID %i"</literal></expr></argument>,
				     <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><name>dbID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="line">//</comment>
			<comment type="line">// Variant 3: Try to find a device with mock IP address</comment>
			<comment type="line">// Only try this when there is no EDNS(0) MAC address available</comment>
			<comment type="line">//</comment>
			<if_stmt><if>if<condition>(<expr><name>dbID</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>unlock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>dbID</name> <operator>=</operator> <call><name>find_device_by_mock_hwaddr</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>lock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

				<comment type="line">// Reacquire client pointer (if may have changed when unlocking above)</comment>
				<expr_stmt><expr><name>client</name> <operator>=</operator> <call><name>getClient</name><argument_list>(<argument><expr><name>clientID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_ARP</name> <operator>&amp;&amp;</operator> <name>dbID</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Network table: Client with IP %s has no MAC info but is known as mock-hwaddr client with network ID %i"</literal></expr></argument>,
					     <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><name>dbID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="line">// Create mock hardware address in the style of "ip-&lt;IP address&gt;", like "ip-127.0.0.1"</comment>
			<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><literal type="string">"ip-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>hwaddr</name><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hwaddr</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>hwaddr</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>hwaddr</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if<condition>(<expr><name>dbID</name> <operator>==</operator> <name>DB_FAILED</name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// SQLite error</comment>
			<if_stmt><if>if<condition>(<expr><name>ipaddr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ipaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if<condition>(<expr><name>hostname</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if<condition>(<expr><name>interface</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>interface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block></if>
		<comment type="line">// Device not in database, add new entry</comment>
		<if type="elseif">else if<condition>(<expr><name>dbID</name> <operator>==</operator> <name>DB_NODATA</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>macVendor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>hwlen</name></name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="line">// Normal client, MAC was likely obtained from EDNS(0) data</comment>
				<expr_stmt><expr><call><name>unlock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>macVendor</name> <operator>=</operator> <call><name>getMACVendor</name><argument_list>(<argument><expr><name>hwaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>lock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

				<comment type="line">// Reacquire client pointer (if may have changed when unlocking above)</comment>
				<expr_stmt><expr><name>client</name> <operator>=</operator> <call><name>getClient</name><argument_list>(<argument><expr><name>clientID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_ARP</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Network table: Creating new FTL device MAC = %s, IP = %s, hostname = \"%s\", vendor = \"%s\", interface = \"%s\""</literal></expr></argument>,
				     <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>macVendor</name></expr></argument>, <argument><expr><name>interface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="line">// Add new device to database</comment>
			<decl_stmt><decl><type><specifier>const</specifier> <name>time_t</name></type> <name>lastQuery</name> <init>= <expr><name><name>client</name><operator>-&gt;</operator><name>lastQuery</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>numQueriesARP</name> <init>= <expr><name><name>client</name><operator>-&gt;</operator><name>numQueriesARP</name></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>unlock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>insert_netDB_device</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>lastQuery</name></expr></argument>, <argument><expr><name>numQueriesARP</name></expr></argument>, <argument><expr><name>macVendor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>lock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// Reacquire client pointer (if may have changed when unlocking above)</comment>
			<expr_stmt><expr><name>client</name> <operator>=</operator> <call><name>getClient</name><argument_list>(<argument><expr><name>clientID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// Reset client counter</comment>
			<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>numQueriesARP</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

			<comment type="line">// Free allocated memory (if allocated)</comment>
			<if_stmt><if>if<condition>(<expr><name>macVendor</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>macVendor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>macVendor</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="line">// Obtain ID which was given to this new entry</comment>
			<expr_stmt><expr><name>dbID</name> <operator>=</operator> <call><name>sqlite3_last_insert_rowid</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else	<comment type="line">// Device already in database</comment>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_ARP</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Network table: Updating existing FTL device MAC = %s, IP = %s, hostname = \"%s\", interface = \"%s\""</literal></expr></argument>,
				     <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>interface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="line">// Update timestamp of last query if applicable</comment>
			<decl_stmt><decl><type><specifier>const</specifier> <name>time_t</name></type> <name>lastQuery</name> <init>= <expr><name><name>client</name><operator>-&gt;</operator><name>lastQuery</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>numQueriesARP</name> <init>= <expr><name><name>client</name><operator>-&gt;</operator><name>numQueriesARP</name></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>unlock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>update_netDB_lastQuery</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>dbID</name></expr></argument>, <argument><expr><name>lastQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if<condition>(<expr><name>ipaddr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ipaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<if_stmt><if>if<condition>(<expr><name>hostname</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<if_stmt><if>if<condition>(<expr><name>interface</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>interface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<comment type="line">// Update number of queries if applicable</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>update_netDB_numQueries</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>dbID</name></expr></argument>, <argument><expr><name>numQueriesARP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if<condition>(<expr><name>ipaddr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ipaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<if_stmt><if>if<condition>(<expr><name>hostname</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<if_stmt><if>if<condition>(<expr><name>interface</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>interface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name>lock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// Reacquire client pointer (if may have changed when unlocking above)</comment>
			<expr_stmt><expr><name>client</name> <operator>=</operator> <call><name>getClient</name><argument_list>(<argument><expr><name>clientID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>numQueriesARP</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><call><name>unlock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Add unique IP address / mock-MAC pair to network_addresses table</comment>
		<comment type="line">// ipaddr is a local copy</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>add_netDB_network_address</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>dbID</name></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name>ipaddr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ipaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if<condition>(<expr><name>hostname</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if<condition>(<expr><name>interface</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>interface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Update hostname if available</comment>
		<comment type="line">// hostname is a local copy</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>update_netDB_name</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name>ipaddr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ipaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if<condition>(<expr><name>hostname</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if<condition>(<expr><name>interface</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>interface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Update interface if available</comment>
		<comment type="line">// interface is a local copy</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>update_netDB_interface</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>dbID</name></expr></argument>, <argument><expr><name>interface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name>ipaddr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ipaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if<condition>(<expr><name>hostname</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if<condition>(<expr><name>interface</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>interface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Add to number of processed ARP cache entries</comment>
		<expr_stmt><expr><operator>(</operator><operator>*</operator><name>additional_entries</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

		<comment type="line">// Free allocated memory</comment>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ipaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>interface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">// Check for possible error in loop</comment>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SQLITE_BUSY</name></expr> )</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"WARNING"</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"ERROR"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"%s: Storing devices in network table failed: %s"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>add_local_interfaces_to_network_table</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>additional_entries</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Return early if database is known to be broken</comment>
	<if_stmt><if>if<condition>(<expr><call><name>FTLDBerror</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// Try to access the kernel's Internet protocol address management</comment>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>ip_pipe</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>cmd</name><index>[]</index></name> <init>= <expr><literal type="string">"ip address show"</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ip_pipe</name> <operator>=</operator> <call><name>popen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"WARN: Command \"%s\" failed: %s"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Buffers</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>linebuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>linebuffersize</name> <init>= <expr><literal type="number">0u</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>iface_no</name></decl>, <decl><type ref="prev"/><name>rc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>has_iface</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>has_hwaddr</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>ipaddr</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>hwaddr</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>iface</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

	<comment type="line">// Read response line by line</comment>
	<while>while<condition>(<expr><call><name>getline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>linebuffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>linebuffersize</name></expr></argument>, <argument><expr><name>ip_pipe</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Skip if line buffer is invalid</comment>
		<if_stmt><if>if<condition>(<expr><name>linebuffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>linebuffer</name></expr></argument>, <argument><expr><literal type="string">"%i: %99[^:]"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>iface_no</name></expr></argument>, <argument><expr><name>iface</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Obtained an interface, continue to the next line</comment>
			<expr_stmt><expr><name>has_iface</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>has_hwaddr</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>iface</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>iface</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Do not try to read IP addresses when the information above is incomplete</comment>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name>has_iface</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// Try to read hardware address</comment>
		<comment type="line">// We skip lines with "link/none" (virtual, e.g., wireguard interfaces)</comment>
		<if_stmt><if>if<condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>linebuffer</name></expr></argument>, <argument><expr><literal type="string">"    link/ether %99s"</literal></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Obtained an Ethernet hardware address, continue to the next line</comment>
			<expr_stmt><expr><name>has_hwaddr</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>hwaddr</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>hwaddr</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if>
		<if type="elseif">else if<condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>linebuffer</name></expr></argument>, <argument><expr><literal type="string">"    link/loopback %99s"</literal></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Obtained a loopback hardware address, continue to the next line</comment>
			<expr_stmt><expr><name>has_hwaddr</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>hwaddr</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>hwaddr</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Do not try to read IP addresses when the information above is incomplete</comment>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name>has_hwaddr</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// Try to read IPv4 address</comment>
		<comment type="line">// We need a special rule here to avoid "inet6 ..." being accepted as IPv4 address</comment>
		<if_stmt><if>if<condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>linebuffer</name></expr></argument>, <argument><expr><literal type="string">"    inet%*[ ]%[0-9.] brd"</literal></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Obtained an IPv4 address</comment>
			<expr_stmt><expr><name><name>ipaddr</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>ipaddr</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="line">// Try to read IPv6 address</comment>
			<if_stmt><if>if<condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>linebuffer</name></expr></argument>, <argument><expr><literal type="string">"    inet6%*[ ]%[0-9a-fA-F:] scope"</literal></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="line">// Obtained an IPv6 address</comment>
				<expr_stmt><expr><name><name>ipaddr</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>ipaddr</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="line">// No address data, continue to next line</comment>
				<continue>continue;</continue>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_ARP</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Network table: read interface details for interface %s (%s) with address %s"</literal></expr></argument>,
			     <argument><expr><name>iface</name></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Try to find the device we parsed above</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>dbID</name> <init>= <expr><call><name>find_device_by_hwaddr</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_ARP</name> <operator>&amp;&amp;</operator> <name>dbID</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Network table (ip a): Client with MAC %s was recently be seen for network ID %i"</literal></expr></argument>,
			     <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>dbID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Break on SQLite error</comment>
		<if_stmt><if>if<condition>(<expr><name>dbID</name> <operator>==</operator> <name>DB_FAILED</name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// SQLite error</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Get vendor</comment>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>macVendor</name> <init>= <expr><call><name>getMACVendor</name><argument_list>(<argument><expr><name>hwaddr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Device not in database, add new entry</comment>
		<if_stmt><if>if<condition>(<expr><name>dbID</name> <operator>==</operator> <name>DB_NODATA</name></expr>)</condition>
		<block>{<block_content>

			<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_ARP</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Network table: Creating new ip a device MAC = %s, IP = %s, vendor = \"%s\", interface = \"%s\""</literal></expr></argument>,
					<argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><name>macVendor</name></expr></argument>, <argument><expr><name>iface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="line">// Try to import query data from a possibly previously existing mock-device</comment>
			<decl_stmt><decl><type><name>int</name></type> <name>mockID</name> <init>= <expr><call><name>find_device_by_mock_hwaddr</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>lastQuery</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>firstSeen</name> <init>= <expr><name>now</name></expr></init></decl>, <decl><type ref="prev"/><name>numQueries</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><name>mockID</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>querystr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if<condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querystr</name></expr></argument>, <argument><expr><literal type="string">"SELECT lastQuery from network where id = %i"</literal></expr></argument>, <argument><expr><name>mockID</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>macVendor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><name>false</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>lastQuery</name> <operator>=</operator> <call><name>db_query_int</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>querystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>querystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if<condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querystr</name></expr></argument>, <argument><expr><literal type="string">"SELECT firstSeen from network where id = %i"</literal></expr></argument>, <argument><expr><name>mockID</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>macVendor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><name>false</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>firstSeen</name> <operator>=</operator> <call><name>db_query_int</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>querystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>querystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if<condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querystr</name></expr></argument>, <argument><expr><literal type="string">"SELECT numQueries from network where id = %i"</literal></expr></argument>, <argument><expr><name>mockID</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>macVendor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><name>false</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>numQueries</name> <operator>=</operator> <call><name>db_query_int</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>querystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>querystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="line">// Add new device to database</comment>
			<expr_stmt><expr><call><name>insert_netDB_device</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>firstSeen</name></expr></argument>, <argument><expr><name>lastQuery</name></expr></argument>, <argument><expr><name>numQueries</name></expr></argument>, <argument><expr><name>macVendor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// Obtain ID which was given to this new entry</comment>
			<expr_stmt><expr><name>dbID</name> <operator>=</operator> <call><name>sqlite3_last_insert_rowid</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else	<comment type="line">// Device already in database</comment>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_ARP</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Network table: Updating existing ip a device MAC = %s, IP = %s, interface = \"%s\""</literal></expr></argument>,
				     <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><name>iface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="line">//Free allocated memory</comment>
		<if_stmt><if>if<condition>(<expr><name>macVendor</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>macVendor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>macVendor</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Add unique IP address / mock-MAC pair to network_addresses table</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>add_netDB_network_address</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>dbID</name></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<comment type="line">// Update interface if available</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>update_netDB_interface</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>dbID</name></expr></argument>, <argument><expr><name>iface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<comment type="line">// Add to number of processed ARP cache entries</comment>
		<expr_stmt><expr><operator>(</operator><operator>*</operator><name>additional_entries</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="line">// Close pipe handle and free allocated memory</comment>
	<expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>ip_pipe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>linebuffer</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>linebuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Parse kernel's neighbor cache</comment>
<function><type><name>void</name></type> <name>parse_neighbor_cache</name><parameter_list>(<parameter><decl><type><name>sqlite3</name><modifier>*</modifier></type> <name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Try to access the kernel's neighbor cache</comment>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>arpfp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>cmd</name><index>[]</index></name> <init>= <expr><literal type="string">"ip neigh show"</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>arpfp</name> <operator>=</operator> <call><name>popen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"WARN: Command \"%s\" failed: %s"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Start ARP timer</comment>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_ARP</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>timer_start</name><argument_list>(<argument><expr><name>ARP_TIMER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Prepare buffers</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>linebuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>linebuffersize</name> <init>= <expr><literal type="number">0u</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>ip</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>hwaddr</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>iface</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>entries</name> <init>= <expr><literal type="number">0u</literal></expr></init></decl>, <decl><type ref="prev"/><name>additional_entries</name> <init>= <expr><literal type="number">0u</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type> <name>now</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>sql</name><index>[]</index></name> <init>= <expr><literal type="string">"BEGIN TRANSACTION IMMEDIATE"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>dbquery</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SQLITE_BUSY</name></expr> )</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"WARNING"</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"ERROR"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<comment type="line">// dbquery() above already logs the reason for why the query failed</comment>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"%s: Storing devices in network table (\"%s\") failed"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>arpfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Remove all but the most recent IP addresses not seen for more than a certain time</comment>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>network_expire</name></name> <operator>&gt;</operator> <literal type="number">0u</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>time_t</name></type> <name>limit</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">24</literal><operator>*</operator><literal type="number">3600</literal><operator>*</operator><name><name>config</name><operator>.</operator><name>network_expire</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>dbquery</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"DELETE FROM network_addresses "</literal>
		                        <literal type="string">"WHERE lastSeen &lt; %lu;"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>arpfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>dbquery</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"UPDATE network_addresses SET name = NULL "</literal>
		                        <literal type="string">"WHERE nameUpdated &lt; %lu;"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>arpfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Initialize array of status for individual clients used to</comment>
	<comment type="line">// remember the status of a client already seen in the neigh cache</comment>
	<expr_stmt><expr><call><name>lock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>clients</name> <init>= <expr><name><name>counters</name><operator>-&gt;</operator><name>clients</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>unlock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>enum</name> <name>arp_status</name></name></type> <name><name>client_status</name><index>[<expr><name>clients</name></expr>]</index></name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>clients</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>client_status</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>CLIENT_NOT_HANDLED</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">// Read ARP cache line by line</comment>
	<while>while<condition>(<expr><call><name>getline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>linebuffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>linebuffersize</name></expr></argument>, <argument><expr><name>arpfp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Skip if line buffer is invalid</comment>
		<if_stmt><if>if<condition>(<expr><name>linebuffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// Check thread cancellation</comment>
		<if_stmt><if>if<condition>(<expr><name>killed</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><call><name>sscanf</name><argument_list>(<argument><expr><name>linebuffer</name></expr></argument>, <argument><expr><literal type="string">"%99s dev %99s lladdr %99s"</literal></expr></argument>,
		                 <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>iface</name></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Ensure strings are null-terminated in case we hit the max.</comment>
		<comment type="line">// length limitation</comment>
		<expr_stmt><expr><name><name>ip</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iface</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>iface</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>hwaddr</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>hwaddr</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

		<comment type="line">// Check if we want to process the line we just read</comment>
		<if_stmt><if>if<condition>(<expr><name>num</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name>num</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="line">// This line is incomplete, remember this to skip</comment>
				<comment type="line">// mock-device creation after ARP processing</comment>
				<expr_stmt><expr><call><name>lock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>clientID</name> <init>= <expr><call><name>findClientID</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>unlock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if<condition>(<expr><name>clientID</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>client_status</name><index>[<expr><name>clientID</name></expr>]</index></name> <operator>=</operator> <name>CLIENT_ARP_INCOMPLETE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="line">// Skip to the next row in the neigh cache rather when</comment>
			<comment type="line">// marking as incomplete client</comment>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Get ID of this device in our network database. If it cannot be</comment>
		<comment type="line">// found, then this is a new device. We only use the hardware address</comment>
		<comment type="line">// to uniquely identify clients and only use the first returned ID.</comment>
		<comment type="line">//</comment>
		<comment type="line">// Same MAC, two IPs: Non-deterministic (sequential) DHCP server, we</comment>
		<comment type="line">// update the IP address to the last seen one.</comment>
		<comment type="line">//</comment>
		<comment type="line">// We can run this SELECT inside the currently active transaction as</comment>
		<comment type="line">// only the changed to the database are collected for latter</comment>
		<comment type="line">// commitment. Read-only access such as this SELECT command will be</comment>
		<comment type="line">// executed immediately on the database.</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>dbID</name> <init>= <expr><call><name>find_device_by_hwaddr</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if<condition>(<expr><name>dbID</name> <operator>==</operator> <name>DB_FAILED</name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Get SQLite error code and return early from loop</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_errcode</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// If we reach this point, we can check if this client</comment>
		<comment type="line">// is known to pihole-FTL</comment>
		<comment type="line">// false = do not create a new record if the client is</comment>
		<comment type="line">//         unknown (only DNS requesting clients do this)</comment>
		<expr_stmt><expr><call><name>lock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>clientID</name> <init>= <expr><call><name>findClientID</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Get hostname of this client if the client is known</comment>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>client_valid</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>time_t</name></type> <name>lastQuery</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>numQueries</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		<comment type="line">// This client is known (by its IP address) to pihole-FTL if</comment>
		<comment type="line">// findClientID() returned a non-negative index</comment>
		<if_stmt><if>if<condition>(<expr><name>clientID</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>clientsData</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><call><name>getClient</name><argument_list>(<argument><expr><name>clientID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><name>client</name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>client_valid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>hostname</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>namepos</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>lastQuery</name> <operator>=</operator> <name><name>client</name><operator>-&gt;</operator><name>lastQuery</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>numQueries</name> <operator>=</operator> <name><name>client</name><operator>-&gt;</operator><name>numQueriesARP</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>client_status</name><index>[<expr><name>clientID</name></expr>]</index></name> <operator>=</operator> <name>CLIENT_ARP_COMPLETE</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>hostname</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>unlock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Device not in database, add new entry</comment>
		<if_stmt><if>if<condition>(<expr><name>dbID</name> <operator>==</operator> <name>DB_NODATA</name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Try to obtain vendor from MAC database</comment>
			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>macVendor</name> <init>= <expr><call><name>getMACVendor</name><argument_list>(<argument><expr><name>hwaddr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="line">// Check if we recently added a mock-device with the same IP address</comment>
			<comment type="line">// and the ARP entry just came a bit delayed (reported by at least one user)</comment>
			<expr_stmt><expr><name>dbID</name> <operator>=</operator> <call><name>find_recent_device_by_mock_hwaddr</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if<condition>(<expr><name>dbID</name> <operator>==</operator> <name>DB_NODATA</name></expr>)</condition>
			<block>{<block_content>
				<comment type="line">// Device not known AND no recent mock-device found ---&gt; create new device record</comment>
				<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_ARP</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Network table: Creating new ARP device MAC = %s, IP = %s, hostname = \"%s\", vendor = \"%s\""</literal></expr></argument>,
					     <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>macVendor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<comment type="line">// Create new record (INSERT)</comment>
				<expr_stmt><expr><call><name>insert_netDB_device</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>lastQuery</name></expr></argument>, <argument><expr><name>numQueries</name></expr></argument>, <argument><expr><name>macVendor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>lock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>clientsData</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><call><name>getClient</name><argument_list>(<argument><expr><name>clientID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if<condition>(<expr><name>client</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
				<block>{<block_content>
					<comment type="line">// Reacquire client pointer (if may have changed when unlocking above)</comment>
					<expr_stmt><expr><name>client</name> <operator>=</operator> <call><name>getClient</name><argument_list>(<argument><expr><name>clientID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="line">// Reset client ARP counter (we stored the entry in the database)</comment>
					<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>numQueriesARP</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><call><name>unlock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

				<comment type="line">// Obtain ID which was given to this new entry</comment>
				<expr_stmt><expr><name>dbID</name> <operator>=</operator> <call><name>sqlite3_last_insert_rowid</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="line">// Store hostname in the appropriate network_address record (if available)</comment>
				<if_stmt><if>if<condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>update_netDB_name</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
					<block>{<block_content>
						<comment type="line">// Free allocated memory</comment>
						<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>macVendor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="line">// Device is ALREADY KNOWN ---&gt; convert mock-device to a "real" one</comment>
				<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_ARP</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Network table: Un-mocking ARP device MAC = %s, IP = %s, hostname = \"%s\", vendor = \"%s\""</literal></expr></argument>,
					     <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>macVendor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<comment type="line">// Update/replace important device properties</comment>
				<expr_stmt><expr><call><name>unmock_netDB_device</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>macVendor</name></expr></argument>, <argument><expr><name>dbID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="line">// Host name, count and last query timestamp will be set in the next</comment>
				<comment type="line">// loop iteration for the sake of simplicity</comment>
			</block_content>}</block></else></if_stmt>

			<comment type="line">// Free allocated memory</comment>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>macVendor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<comment type="line">// Device in database AND client known to Pi-hole</comment>
		<if type="elseif">else if<condition>(<expr><name>client_valid</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_ARP</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Network table: Updating existing ARP device MAC = %s, IP = %s, hostname = \"%s\""</literal></expr></argument>,
				     <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="line">// Update timestamp of last query if applicable</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>update_netDB_lastQuery</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>dbID</name></expr></argument>, <argument><expr><name>lastQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
			<block>{<block_content>
				<comment type="line">// Free allocated memory</comment>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<comment type="line">// Update number of queries if applicable</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>update_netDB_numQueries</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>dbID</name></expr></argument>, <argument><expr><name>numQueries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
			<block>{<block_content>
				<comment type="line">// Free allocated memory</comment>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name>lock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// Acquire client pointer</comment>
			<decl_stmt><decl><type><name>clientsData</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><call><name>getClient</name><argument_list>(<argument><expr><name>clientID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><name>client</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<comment type="line">// Reset client ARP counter (we stored the entry in the database)</comment>
				<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>numQueriesARP</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>unlock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// Update hostname if available</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>update_netDB_name</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
			<block>{<block_content>
				<comment type="line">// Free allocated memory</comment>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="line">// else: Device in database but not known to Pi-hole</comment>

		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>hostname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

		<comment type="line">// Store interface if available</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>update_netDB_interface</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>dbID</name></expr></argument>, <argument><expr><name>iface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<comment type="line">// Add unique IP address / mock-MAC pair to network_addresses table</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>add_netDB_network_address</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>dbID</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<comment type="line">// Count number of processed ARP cache entries</comment>
		<expr_stmt><expr><name>entries</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="line">// Close pipe handle and free allocated memory</comment>
	<expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>arpfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>linebuffer</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>linebuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Database error in ARP cache processing loop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Check thread cancellation</comment>
	<if_stmt><if>if<condition>(<expr><name>killed</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// Loop over all clients known to FTL and ensure we add them all to the</comment>
	<comment type="line">// database</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>add_FTL_clients_to_network_table</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>client_status</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>additional_entries</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// Check thread cancellation</comment>
	<if_stmt><if>if<condition>(<expr><name>killed</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// Finally, loop over the available interfaces to ensure we list the</comment>
	<comment type="line">// IP addresses correctly (local addresses are NOT contained in the</comment>
	<comment type="line">// ARP/neighbor cache).</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>add_local_interfaces_to_network_table</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>additional_entries</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// Check thread cancellation</comment>
	<if_stmt><if>if<condition>(<expr><name>killed</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// Ensure mock-devices which are not assigned to any addresses any more</comment>
	<comment type="line">// (they have been converted to "real" devices), are removed at this point</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>dbquery</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"DELETE FROM network WHERE id NOT IN "</literal>
	                                           <literal type="string">"(SELECT network_id from network_addresses) "</literal>
	                                       <literal type="string">"AND hwaddr LIKE 'ip-%%';"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Database error in mock-device cleaning statement"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Actually update the database</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>dbquery</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"END TRANSACTION"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SQLITE_BUSY</name></expr> )</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"WARNING"</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"ERROR"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"%s: Storing devices in network table failed: %s"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Debug logging</comment>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_ARP</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"ARP table processing (%i entries from ARP, %i from FTL's cache) took %.1f ms"</literal></expr></argument>,
		     <argument><expr><name>entries</name></expr></argument>, <argument><expr><name>additional_entries</name></expr></argument>, <argument><expr><call><name>timer_elapsed_msec</name><argument_list>(<argument><expr><name>ARP_TIMER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// Loop over all entries in network table and unify entries by their hwaddr</comment>
<comment type="line">// If we find duplicates, we keep the most recent entry, while</comment>
<comment type="line">// - we replace the first-seen date by the earliest across all rows</comment>
<comment type="line">// - we sum up the number of queries of all clients with the same hwaddr</comment>
<function><type><name>bool</name></type> <name>unify_hwaddr</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Return early if database is known to be broken</comment>
	<if_stmt><if>if<condition>(<expr><call><name>FTLDBerror</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// We request sets of (id,hwaddr). They are GROUPed BY hwaddr to make</comment>
	<comment type="line">// the set unique in hwaddr.</comment>
	<comment type="line">// The grouping is constrained by the HAVING clause which is</comment>
	<comment type="line">// evaluated once across all rows of a group to ensure the returned</comment>
	<comment type="line">// set represents the most recent entry for a given hwaddr</comment>
	<comment type="line">// Get only duplicated hwaddrs here (HAVING cnt &gt; 1).</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>querystr</name><index>[]</index></name> <init>= <expr><literal type="string">"SELECT id,hwaddr,COUNT(*) cnt "</literal>
	                        <literal type="string">"FROM network "</literal>
	                        <literal type="string">"GROUP BY hwaddr "</literal>
	                        <literal type="string">"HAVING MAX(lastQuery) "</literal>
	                        <literal type="string">"AND cnt &gt; 1;"</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">// Perform SQL query</comment>
	<decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"unify_hwaddr(\"%s\") - SQL error prepare: %s"</literal></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Loop until no further (id,hwaddr) sets are available</comment>
	<while>while<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_DONE</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Check if we ran into an error</comment>
		<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_ROW</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"unify_hwaddr(\"%s\") - SQL error step: %s"</literal></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Obtain id and hwaddr of the most recent entry for this particular client</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>id</name> <init>= <expr><call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hwaddr</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Reset statement</comment>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Update firstSeen with lowest value across all rows with the same hwaddr</comment>
		<expr_stmt><expr><call><name>dbquery</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"UPDATE network "</literal>\
		            <literal type="string">"SET firstSeen = (SELECT MIN(firstSeen) FROM network WHERE hwaddr = \'%s\' COLLATE NOCASE) "</literal>\
		            <literal type="string">"WHERE id = %i;"</literal></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Update numQueries with sum of all rows with the same hwaddr</comment>
		<expr_stmt><expr><call><name>dbquery</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"UPDATE network "</literal>\
		            <literal type="string">"SET numQueries = (SELECT SUM(numQueries) FROM network WHERE hwaddr = \'%s\' COLLATE NOCASE) "</literal>\
		            <literal type="string">"WHERE id = %i;"</literal></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Remove all other lines with the same hwaddr but a different id</comment>
		<expr_stmt><expr><call><name>dbquery</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"DELETE FROM network "</literal>\
		            <literal type="string">"WHERE hwaddr = \'%s\' COLLATE NOCASE "</literal>\
		            <literal type="string">"AND id != %i;"</literal></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hwaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="line">// Finalize statement</comment>
	<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Update database version to 4</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>db_set_FTL_property</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>DB_VERSION</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>malloc</name><operator>)</operator></expr></argument>)</argument_list> <name>getMACVendor</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>hwaddr</name></expr></argument>)</argument_list>
<block>{<block_content>
	<comment type="line">// Special handling for the loopback interface</comment>
	<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><literal type="string">"00:00:00:00:00:00"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"virtual interface"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name><name>FTLfiles</name><operator>.</operator><name>macvendor_db</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// File does not exist</comment>
		<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_ARP</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"getMACVenor(\"%s\"): %s does not exist"</literal></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name><name>FTLfiles</name><operator>.</operator><name>macvendor_db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>hwaddr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><literal type="string">"ip-"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// MAC address is incomplete or mock address (for distant clients)</comment>
		<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_ARP</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"getMACVenor(\"%s\"): MAC invalid (length %zu)"</literal></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>hwaddr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>macvendor_db</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_open_v2</name><argument_list>(<argument><expr><name><name>FTLfiles</name><operator>.</operator><name>macvendor_db</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>macvendor_db</name></expr></argument>, <argument><expr><name>SQLITE_OPEN_READONLY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"getMACVendor(\"%s\") - SQL error: %s"</literal></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name>macvendor_db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Only keep "XX:YY:ZZ" (8 characters)</comment>
	<decl_stmt><decl><type><name>char</name></type> <name><name>hwaddrshort</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>hwaddrshort</name></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hwaddrshort</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>querystr</name><index>[]</index></name> <init>= <expr><literal type="string">"SELECT vendor FROM macvendor WHERE mac LIKE ?;"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>macvendor_db</name></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"getMACVendor(\"%s\") - SQL error prepare \"%s\": %s"</literal></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name>macvendor_db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Bind hwaddrshort to prepared statement</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>hwaddrshort</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"getMACVendor(\"%s\" -&gt; \"%s\"): Failed to bind hwaddrshort: %s"</literal></expr></argument>,
		     <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>hwaddrshort</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name>macvendor_db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vendor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SQLITE_ROW</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>vendor</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="line">// Not found</comment>
		<expr_stmt><expr><name>vendor</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_DONE</name> <operator>&amp;&amp;</operator> <name>rc</name> <operator>!=</operator> <name>SQLITE_ROW</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Error</comment>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"getMACVendor(\"%s\") - SQL error step: %s"</literal></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name>macvendor_db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"DEBUG: MAC Vendor lookup for %s returned \"%s\""</literal></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>vendor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>vendor</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>updateMACVendorRecords</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Return early if database is known to be broken</comment>
	<if_stmt><if>if<condition>(<expr><call><name>FTLDBerror</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name><name>FTLfiles</name><operator>.</operator><name>macvendor_db</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// File does not exist</comment>
		<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_ARP</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"updateMACVendorRecords(): \"%s\" does not exist"</literal></expr></argument>, <argument><expr><name><name>FTLfiles</name><operator>.</operator><name>macvendor_db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>selectstr</name> <init>= <expr><literal type="string">"SELECT id,hwaddr FROM network;"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>selectstr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"updateMACVendorRecords() - SQL error prepare \"%s\": %s"</literal></expr></argument>, <argument><expr><name>selectstr</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<while>while<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>SQLITE_ROW</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>id</name> <init>= <expr><call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hwaddr</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Get vendor for MAC</comment>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vendor</name> <init>= <expr><call><name>getMACVendor</name><argument_list>(<argument><expr><name>hwaddr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hwaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>hwaddr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

		<comment type="line">// Prepare UPDATE statement</comment>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>updatestr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>updatestr</name></expr></argument>, <argument><expr><literal type="string">"UPDATE network SET macVendor = \'%s\' WHERE id = %i"</literal></expr></argument>, <argument><expr><name>vendor</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"updateMACVendorRecords() - Allocation error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>vendor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Execute prepared statement</comment>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zErrMsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>updatestr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"updateMACVendorRecords() - SQL exec error: \"%s\": %s"</literal></expr></argument>, <argument><expr><name>updatestr</name></expr></argument>, <argument><expr><name>zErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>updatestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>vendor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Free allocated memory</comment>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>updatestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>vendor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_DONE</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Error</comment>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"updateMACVendorRecords() - SQL error step: %s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Get hardware address of device identified by IP address</comment>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>malloc</name><operator>)</operator></expr></argument>)</argument_list> <name>getMACfromIP</name><argument_list>(<argument><expr><name>sqlite3</name><operator>*</operator> <name>db</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>ipaddr</name></expr></argument>)</argument_list>
<block>{<block_content>
	<comment type="line">// Return early if database is known to be broken</comment>
	<if_stmt><if>if<condition>(<expr><call><name>FTLDBerror</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// Open pihole-FTL.db database file if needed</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>db_opened</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>db</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><operator>(</operator><name>db</name> <operator>=</operator> <call><name>dbopen</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"getMACfromIP(\"%s\") - Failed to open DB"</literal></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Successful</comment>
		<expr_stmt><expr><name>db_opened</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Prepare SQLite statement</comment>
	<comment type="line">// We request the most recent IP entry in case there an IP appears</comment>
	<comment type="line">// multiple times in the network_addresses table</comment>
	<decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>querystr</name> <init>= <expr><literal type="string">"SELECT hwaddr FROM network WHERE id = "</literal>
	                       <literal type="string">"(SELECT network_id FROM network_addresses "</literal>
	                       <literal type="string">"WHERE ip = ? GROUP BY ip HAVING max(lastSeen));"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"getMACfromIP(\"%s\") - SQL error prepare: %s"</literal></expr></argument>,
		     <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><name>db_opened</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Bind ipaddr to prepared statement</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"getMACfromIP(\"%s\"): Failed to bind ip: %s"</literal></expr></argument>,
		     <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><name>db_opened</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hwaddr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SQLITE_ROW</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Database record found (result might be empty)</comment>
		<expr_stmt><expr><name>hwaddr</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SQLITE_DONE</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Not found</comment>
		<expr_stmt><expr><name>hwaddr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"getMACfromIP(\"%s\"): Failed step: %s"</literal></expr></argument>,
		     <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name> <operator>&amp;&amp;</operator> <name>hwaddr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Found database hardware address %s -&gt; %s"</literal></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Finalize statement and close database handle</comment>
	<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>db_opened</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>hwaddr</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<comment type="line">// Get aliasclient ID of device identified by IP address (if available)</comment>
<function><type><name>int</name></type> <name>getAliasclientIDfromIP</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ipaddr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Return early if database is known to be broken</comment>
	<if_stmt><if>if<condition>(<expr><call><name>FTLDBerror</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>DB_FAILED</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// Open pihole-FTL.db database file if needed</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>db_opened</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>db</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><operator>(</operator><name>db</name> <operator>=</operator> <call><name>dbopen</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"getAliasclientIDfromIP(\"%s\") - Failed to open DB"</literal></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>DB_FAILED</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Successful</comment>
		<expr_stmt><expr><name>db_opened</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Prepare SQLite statement</comment>
	<comment type="line">// We request the most recent IP entry in case there an IP appears</comment>
	<comment type="line">// multiple times in the network_addresses table</comment>
	<decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>querystr</name> <init>= <expr><literal type="string">"SELECT aliasclient_id FROM network WHERE id = "</literal>
	                       <literal type="string">"(SELECT network_id FROM network_addresses "</literal>
	                       <literal type="string">"WHERE ip = ? "</literal>
	                             <literal type="string">"AND aliasclient_id IS NOT NULL "</literal>
	                       <literal type="string">"GROUP BY ip HAVING max(lastSeen));"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"getAliasclientIDfromIP(\"%s\") - SQL error prepare: %s"</literal></expr></argument>,
		     <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><name>db_opened</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return>return <expr><name>DB_FAILED</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Bind ipaddr to prepared statement</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"getAliasclientIDfromIP(\"%s\"): Failed to bind ip: %s"</literal></expr></argument>,
		     <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><name>db_opened</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return>return <expr><name>DB_FAILED</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>aliasclient_id</name> <init>= <expr><name>DB_NODATA</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SQLITE_ROW</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Database record found</comment>
		<expr_stmt><expr><name>aliasclient_id</name> <operator>=</operator> <call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_DONE</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Error, check for database corruption</comment>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>DB_FAILED</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_ALIASCLIENTS</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"   Aliasclient ID %s -&gt; %i%s"</literal></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><name>aliasclient_id</name></expr></argument>,
		     <argument><expr><ternary><condition><expr><operator>(</operator><name>aliasclient_id</name> <operator>==</operator> <name>DB_NODATA</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">" (NOT FOUND)"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Finalize statement and close database handle</comment>
	<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>db_opened</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>aliasclient_id</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Get host name of device identified by IP address</comment>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>malloc</name><operator>)</operator></expr></argument>)</argument_list> <name>getNameFromIP</name><argument_list>(<argument><expr><name>sqlite3</name> <operator>*</operator><name>db</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>ipaddr</name></expr></argument>)</argument_list>
<block>{<block_content>
	<comment type="line">// Return early if database is known to be broken</comment>
	<if_stmt><if>if<condition>(<expr><call><name>FTLDBerror</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// Check if we want to resolve host names</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>resolve_this_name</name><argument_list>(<argument><expr><name>ipaddr</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"getNameFromIP(\"%s\") - configured to not resolve host name"</literal></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Open pihole-FTL.db database file if needed</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>db_opened</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>db</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><operator>(</operator><name>db</name> <operator>=</operator> <call><name>dbopen</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"getNameFromIP(\"%s\") - Failed to open DB"</literal></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Successful</comment>
		<expr_stmt><expr><name>db_opened</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Check for a host name associated with the same IP address</comment>
	<decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>querystr</name> <init>= <expr><literal type="string">"SELECT name FROM network_addresses WHERE name IS NOT NULL AND ip = ?;"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"getNameFromIP(\"%s\") - SQL error prepare: %s"</literal></expr></argument>,
		     <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><name>db_opened</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Bind ipaddr to prepared statement</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"getNameFromIP(\"%s\"): Failed to bind ip: %s"</literal></expr></argument>,
		     <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><name>db_opened</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SQLITE_ROW</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Database record found (result might be empty)</comment>
		<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Found database host name (same address) %s -&gt; %s"</literal></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_DONE</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Error</comment>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Finalize statement</comment>
	<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Return here if we found the name</comment>
	<if_stmt><if>if<condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name>db_opened</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return>return <expr><name>name</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Nothing found for the exact IP address</comment>
	<comment type="line">// Check for a host name associated with the same device (but another IP address)</comment>
	<expr_stmt><expr><name>querystr</name> <operator>=</operator> <literal type="string">"SELECT name FROM network_addresses "</literal>
	                       <literal type="string">"WHERE name IS NOT NULL AND "</literal>
	                             <literal type="string">"network_id = (SELECT network_id FROM network_addresses "</literal>
	                                                             <literal type="string">"WHERE ip = ?) "</literal>
	                       <literal type="string">"ORDER BY lastSeen DESC LIMIT 1"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"getNameFromIP(\"%s\") - SQL error prepare: %s"</literal></expr></argument>,
		     <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><name>db_opened</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Bind ipaddr to prepared statement</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"getNameFromIP(\"%s\"): Failed to bind ip: %s"</literal></expr></argument>,
		     <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><name>db_opened</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SQLITE_ROW</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Database record found (result might be empty)</comment>
		<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <operator>(</operator><name>DEBUG_DATABASE</name> <operator>|</operator> <name>DEBUG_RESOLVER</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Found database host name (same device) %s -&gt; %s"</literal></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SQLITE_DONE</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Not found</comment>
		<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <operator>(</operator><name>DEBUG_DATABASE</name> <operator>|</operator> <name>DEBUG_RESOLVER</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">" ---&gt; not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="line">// Error</comment>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></else></if_stmt>

	<comment type="line">// Finalize statement and close database handle</comment>
	<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>db_opened</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<comment type="line">// Get interface of device identified by IP address</comment>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>malloc</name><operator>)</operator></expr></argument>)</argument_list> <name>getIfaceFromIP</name><argument_list>(<argument><expr><name>sqlite3</name> <operator>*</operator><name>db</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>ipaddr</name></expr></argument>)</argument_list>
<block>{<block_content>
	<comment type="line">// Return early if database is known to be broken</comment>
	<if_stmt><if>if<condition>(<expr><call><name>FTLDBerror</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// Open pihole-FTL.db database file if needed</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>db_opened</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>db</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><operator>(</operator><name>db</name> <operator>=</operator> <call><name>dbopen</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"getIfaceFromIP(\"%s\") - Failed to open DB"</literal></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Successful</comment>
		<expr_stmt><expr><name>db_opened</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Prepare SQLite statement</comment>
	<decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>querystr</name> <init>= <expr><literal type="string">"SELECT interface FROM network "</literal>
	                               <literal type="string">"JOIN network_addresses "</literal>
	                                    <literal type="string">"ON network_addresses.network_id = network.id "</literal>
	                               <literal type="string">"WHERE network_addresses.ip = ? AND "</literal>
	                                     <literal type="string">"interface != 'N/A' AND "</literal>
	                                     <literal type="string">"interface IS NOT NULL;"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>querystr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"getIfaceFromIP(\"%s\") - SQL error prepare: %s"</literal></expr></argument>,
		     <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><name>db_opened</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <operator>(</operator><name>DEBUG_DATABASE</name> <operator>|</operator> <name>DEBUG_RESOLVER</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"getDatabaseHostname(): \"%s\" with ? = \"%s\""</literal></expr></argument>,
		     <argument><expr><name>querystr</name></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Bind ipaddr to prepared statement</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"getIfaceFromIP(\"%s\"): Failed to bind ip: %s"</literal></expr></argument>,
		     <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><name>db_opened</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>iface</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SQLITE_ROW</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Database record found (result might be empty)</comment>
		<expr_stmt><expr><name>iface</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_DONE</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Error</comment>
		<expr_stmt><expr><call><name>checkFTLDBrc</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_DATABASE</name> <operator>&amp;&amp;</operator> <name>iface</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Found database interface %s -&gt; %s"</literal></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><name>iface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Finalize statement and close database handle</comment>
	<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>db_opened</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dbclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>iface</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</unit>
