<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/daemon.c"><comment type="block">/* Pi-hole: A black hole for Internet advertisements
*  (c) 2017 Pi-hole, LLC (https://pi-hole.net)
*  Network-wide ad blocking via your own hardware.
*
*  FTL Engine
*  Daemon routines
*
*  This file is copyright under the latest version of the EUPL.
*  Please see LICENSE file for your rights under this license. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FTL.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"daemon.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>
<comment type="line">// sleepms()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"timers.h"</cpp:file></cpp:include>
<comment type="line">// gravityDB_close()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"database/gravity-db.h"</cpp:file></cpp:include>
<comment type="line">// destroy_shmem()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shmem.h"</cpp:file></cpp:include>
<comment type="line">// uname()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/utsname.h&gt;</cpp:file></cpp:include>
<comment type="line">// killed</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"signals.h"</cpp:file></cpp:include>
<comment type="line">// sysinfo()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysinfo.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>pthread_t</name></type> <name><name>threads</name><index>[<expr><name>THREADS_MAX</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_t</name></type> <name><name>api_threads</name><index>[<expr><name>MAX_API_THREADS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>resolver_ready</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>go_daemon</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Create child process</comment>
	<decl_stmt><decl><type><name>pid_t</name></type> <name>process_id</name> <init>= <expr><call><name>fork</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Indication of fork() failure</comment>
	<if_stmt><if>if <condition>(<expr><name>process_id</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"fork failed!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Return failure in exit status</comment>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// PARENT PROCESS. Need to kill it.</comment>
	<if_stmt><if>if <condition>(<expr><name>process_id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"FTL started!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// return success in exit status</comment>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">//unmask the file mode</comment>
	<expr_stmt><expr><call><name>umask</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">//set new session</comment>
	<comment type="line">// creates a session and sets the process group ID</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>pid_t</name></type> <name>sid</name> <init>= <expr><call><name>setsid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>sid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Return failure</comment>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"setsid failed!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Create grandchild process</comment>
	<comment type="line">// Fork a second child and exit immediately to prevent zombies.  This</comment>
	<comment type="line">// causes the second child process to be orphaned, making the init</comment>
	<comment type="line">// process responsible for its cleanup.  And, since the first child is</comment>
	<comment type="line">// a session leader without a controlling terminal, it's possible for</comment>
	<comment type="line">// it to acquire one by opening a terminal in the future (System V-</comment>
	<comment type="line">// based systems).  This second fork guarantees that the child is no</comment>
	<comment type="line">// longer a session leader, preventing the daemon from ever acquiring</comment>
	<comment type="line">// a controlling terminal.</comment>
	<expr_stmt><expr><name>process_id</name> <operator>=</operator> <call><name>fork</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Indication of fork() failure</comment>
	<if_stmt><if>if <condition>(<expr><name>process_id</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"fork failed!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Return failure in exit status</comment>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// PARENT PROCESS. Need to kill it.</comment>
	<if_stmt><if>if <condition>(<expr><name>process_id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// return success in exit status</comment>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>savepid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Closing stdin, stdout and stderr is handled by dnsmasq</comment>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>savepid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>pid_t</name></type> <name>pid</name> <init>= <expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>FTLfiles</name><operator>.</operator><name>pid</name></name></expr></argument>, <argument><expr><literal type="string">"w+"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"WARNING: Unable to write PID to file."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"         Continuing anyway..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%i"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"PID of FTL process: %i"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>removepid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>FTLfiles</name><operator>.</operator><name>pid</name></name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"WARNING: Unable to empty PID file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>getUserName</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
	<comment type="line">// the getpwuid() function shall search the user database for an entry with a matching uid</comment>
	<comment type="line">// the geteuid() function shall return the effective user ID of the calling process - this is used as the search criteria for the getpwuid() function</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uid_t</name></type> <name>euid</name> <init>= <expr><call><name>geteuid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>passwd</name></name> <modifier>*</modifier></type><name>pw</name> <init>= <expr><call><name>getpwuid</name><argument_list>(<argument><expr><name>euid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>pw</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>pw</name><operator>-&gt;</operator><name>pw_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name>euid</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// "man 7 hostname" says:</comment>
<comment type="line">//</comment>
<comment type="line">//     Each element of the hostname must be from 1 to 63 characters long and the</comment>
<comment type="line">//     entire hostname, including the dots, can be at most 253 characters long.</comment>
<comment type="line">//</comment>
<comment type="line">//     Valid characters for hostnames are ASCII(7) letters from a to z, the</comment>
<comment type="line">//     digits from 0 to 9, and the hyphen (-). A hostname may not start with a</comment>
<comment type="line">//     hyphen.</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOSTNAMESIZE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>nodename</name><index>[<expr><name>HOSTNAMESIZE</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Ask kernel for node name if not known</comment>
	<comment type="line">// This is equivalent to "uname -n"</comment>
	<if_stmt><if>if<condition>(<expr><name><name>nodename</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>utsname</name></name></type> <name>buf</name></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><call><name>uname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>nodename</name></name></expr></argument>, <argument><expr><name>HOSTNAMESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>nodename</name><index>[<expr><name>HOSTNAMESIZE</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>nodename</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>delay_startup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Exit early if not sleeping</comment>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>delay_startup</name></name> <operator>==</operator> <literal type="number">0u</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// Get uptime of system</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>sysinfo</name></name></type> <name>info</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>sysinfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>info</name><operator>.</operator><name>uptime</name></name> <operator>&gt;</operator> <name>DELAY_UPTIME</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Not sleeping as system has finished booting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Unable to obtain sysinfo: %s (%i)"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="line">// Sleep if requested by DELAY_STARTUP</comment>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Sleeping for %d seconds as requested by configuration ..."</literal></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>delay_startup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>sleep</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>delay_startup</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"FATAL: Sleeping was interrupted by an external signal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>cleanup</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Done sleeping, continuing startup of resolver..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Is this a fork?</comment>
<decl_stmt><decl><type><name>bool</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>is_fork</name><argument_list>(<argument><expr><specifier>const</specifier> <name>pid_t</name> <name>mpid</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>pid_t</name> <name>pid</name></expr></argument>)</argument_list>
<block>{<block_content>
	<return>return <expr><name>mpid</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>mpid</name> <operator>!=</operator> <name>pid</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>pid_t</name></type> <name>FTL_gettid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_gettid</name></cpp:ifdef>
	<return>return <expr><operator>(</operator><name>pid_t</name><operator>)</operator><call><name>syscall</name><argument_list>(<argument><expr><name>SYS_gettid</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:warning>#<cpp:directive>warning</cpp:directive> SYS_gettid is not available on this system</cpp:warning>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// SYS_gettid</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>terminate_threads</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name></decl>;</decl_stmt>
	<comment type="line">// Terminate threads before closing database connections and finishing shared memory</comment>
	<expr_stmt><expr><name>killed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<comment type="line">// Try to join threads to ensure cancellation has succeeded</comment>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Waiting for threads to join"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>THREADS_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>thread_cancellable</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Thread %s (%d) is idle, terminating it."</literal></expr></argument>,
			     <argument><expr><name><name>thread_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pthread_cancel</name><argument_list>(<argument><expr><name><name>threads</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_REALTIME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Thread %s (%d) is busy, cancelling it (cannot set timeout)."</literal></expr></argument>,
			     <argument><expr><name><name>thread_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pthread_cancel</name><argument_list>(<argument><expr><name><name>threads</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Timeout for joining is 2 seconds for each thread</comment>
		<expr_stmt><expr><name><name>ts</name><operator>.</operator><name>tv_sec</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

		<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>s</name> <init>= <expr><call><name>pthread_timedjoin_np</name><argument_list>(<argument><expr><name><name>threads</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>s</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Thread %s (%d) is still busy, cancelling it."</literal></expr></argument>,
			     <argument><expr><name><name>thread_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pthread_cancel</name><argument_list>(<argument><expr><name><name>threads</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"All threads joined"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Clean up on exit</comment>
<function><type><name>void</name></type> <name>cleanup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Do proper cleanup only if FTL started successfully</comment>
	<if_stmt><if>if<condition>(<expr><name>resolver_ready</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Terminate threads</comment>
		<expr_stmt><expr><call><name>terminate_threads</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Cancel and join possibly still running API worker threads</comment>
		<for>for<control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>tid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>MAX_API_THREADS</name></expr>;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<comment type="line">// Otherwise, cancel and join the thread</comment>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Joining API worker thread %d"</literal></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pthread_cancel</name><argument_list>(<argument><expr><name><name>api_threads</name><index>[<expr><name>tid</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name><name>api_threads</name><index>[<expr><name>tid</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<comment type="line">// Close database connection</comment>
		<expr_stmt><expr><call><name>lock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>gravityDB_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>unlock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Remove PID file</comment>
	<expr_stmt><expr><call><name>removepid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Remove shared memory objects</comment>
	<comment type="line">// Important: This invalidated all objects such as</comment>
	<comment type="line">//            counters-&gt; ... etc.</comment>
	<comment type="line">// This should be the last action when cleaning up</comment>
	<expr_stmt><expr><call><name>destroy_shmem</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">42</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>format_time</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>timer_elapsed_msec</name><argument_list>(<argument><expr><name>EXIT_TIMER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"########## FTL terminated after%s (code %i)! ##########"</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
