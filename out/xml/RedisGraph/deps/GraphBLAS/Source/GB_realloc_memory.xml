<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_realloc_memory.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_realloc_memory: wrapper for realloc</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// A wrapper for realloc.</comment>

<comment type="line">// If p is non-NULL on input, it points to a previously allocated object of</comment>
<comment type="line">// size at least nitems_old * size_of_item.  The object is reallocated to be of</comment>
<comment type="line">// size at least nitems_new * size_of_item.  If p is NULL on input, then a new</comment>
<comment type="line">// object of that size is allocated.  On success, a pointer to the new object</comment>
<comment type="line">// is returned, and ok is returned as true.  If the allocation fails, ok is set</comment>
<comment type="line">// to false and a pointer to the old (unmodified) object is returned.</comment>

<comment type="line">// The actual size_allocated on input can differ from nitems_old*size_of_item,</comment>
<comment type="line">// and the size_allocated on output can be larger than nitems_new*size_of_item,</comment>
<comment type="line">// if the size_allocated is rounded up to the nearest power of two.</comment>

<comment type="line">// Usage:</comment>

<comment type="line">//      p = GB_realloc_memory (nitems_new, size_of_item, p,</comment>
<comment type="line">//              &amp;size_allocated, &amp;ok, Context)</comment>
<comment type="line">//      if (ok)</comment>
<comment type="line">//      {</comment>
<comment type="line">//          p points to a block of at least nitems_new*size_of_item bytes and</comment>
<comment type="line">//          the first part, of size min(nitems_new,nitems_old)*size_of_item,</comment>
<comment type="line">//          has the same content as the old memory block if it was present.</comment>
<comment type="line">//      }</comment>
<comment type="line">//      else</comment>
<comment type="line">//      {</comment>
<comment type="line">//          p points to the old block, and size_allocated is left</comment>
<comment type="line">//          unchanged.  This case never occurs if nitems_new &lt; nitems_old.</comment>
<comment type="line">//      }</comment>
<comment type="line">//      on output, size_allocated is set to the actual size of the block of</comment>
<comment type="line">//      memory</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GB_PUBLIC</name>
<name>void</name> <modifier>*</modifier></type><name>GB_realloc_memory</name>     <comment type="line">// pointer to reallocated block of memory, or</comment>
                            <comment type="line">// to original block if the reallocation failed.</comment>
<parameter_list>(
    <parameter><decl><type><name>size_t</name></type> <name>nitems_new</name></decl></parameter>,      <comment type="line">// new number of items in the object</comment>
    <parameter><decl><type><name>size_t</name></type> <name>size_of_item</name></decl></parameter>,    <comment type="line">// size of each item</comment>
    <comment type="line">// input/output</comment>
    <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                <comment type="line">// old object to reallocate</comment>
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size_allocated</name></decl></parameter>, <comment type="line">// # of bytes actually allocated</comment>
    <comment type="line">// output</comment>
    <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>ok</name></decl></parameter>,               <comment type="line">// true if successful, false otherwise</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// malloc a new block if p is NULL on input</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>GB_malloc_memory</name> <argument_list>(<argument><expr><name>nitems_new</name></expr></argument>, <argument><expr><name>size_of_item</name></expr></argument>, <argument><expr><name>size_allocated</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ok</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>p</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// make sure at least one byte is allocated</comment>
    <expr_stmt><expr><name>size_of_item</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>size_of_item</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>oldsize_allocated</name> <init>= <expr><operator>(</operator><operator>*</operator><name>size_allocated</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>oldsize_allocated</name> <operator>==</operator> <call><name>GB_Global_memtable_size</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// make sure at least one item is allocated</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>nitems_old</name> <init>= <expr><name>oldsize_allocated</name> <operator>/</operator> <name>size_of_item</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>nitems_new</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>nitems_new</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>newsize</name></decl>, <decl><type ref="prev"/><name>oldsize</name></decl> ;</decl_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ok</name><operator>)</operator> <operator>=</operator> <call><name>GB_size_t_multiply</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>newsize</name></expr></argument>, <argument><expr><name>nitems_new</name></expr></argument>, <argument><expr><name>size_of_item</name></expr></argument>)</argument_list></call>
         <operator>&amp;&amp;</operator> <call><name>GB_size_t_multiply</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>oldsize</name></expr></argument>, <argument><expr><name>nitems_old</name></expr></argument>, <argument><expr><name>size_of_item</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>ok</name><operator>)</operator> <operator>||</operator> <name>nitems_new</name> <operator>&gt;</operator> <name>GB_NMAX</name> <operator>||</operator> <name>size_of_item</name> <operator>&gt;</operator> <name>GB_NMAX</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// overflow</comment>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ok</name><operator>)</operator> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check for quick return</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>newsize</name> <operator>==</operator> <name>oldsize</name><operator>)</operator>
        <operator>||</operator> <operator>(</operator><name>newsize</name> <operator>&lt;</operator> <name>oldsize</name> <operator>&amp;&amp;</operator> <name>newsize</name> <operator>&gt;=</operator> <name>oldsize_allocated</name><operator>/</operator><literal type="number">2</literal><operator>)</operator>
        <operator>||</operator> <operator>(</operator><name>newsize</name> <operator>&gt;</operator> <name>oldsize</name> <operator>&amp;&amp;</operator> <name>newsize</name> <operator>&lt;=</operator> <name>oldsize_allocated</name><operator>)</operator></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// If the block does not change, or is shrinking but only by a small</comment>
        <comment type="line">// amount, or is growing but still fits inside the existing block,</comment>
        <comment type="line">// then leave the block as-is.</comment>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ok</name><operator>)</operator> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// reallocate the memory, or use malloc/memcpy/free</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pnew</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>newsize_allocated</name> <init>= <expr><call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>newsize</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><call><name>GB_CEIL_LOG2</name> <argument_list>(<argument><expr><name>newsize_allocated</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_Global_have_realloc_function</name> <argument_list>( )</argument_list></call> <operator>||</operator>
        <operator>(</operator><call><name>GB_Global_free_pool_limit_get</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// use malloc/memcpy/free</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// Either no realloc function is provided, or the new block will fit in</comment>
        <comment type="line">// the free_pool and so must be rounded up to a power of 2.  This is</comment>
        <comment type="line">// done by GB_malloc_memory, which allocates a new block or gets it</comment>
        <comment type="line">// from the free_pool if one exists of that size.</comment>

        <comment type="line">// allocate the new space</comment>
        <expr_stmt><expr><name>pnew</name> <operator>=</operator> <call><name>GB_malloc_memory</name> <argument_list>(<argument><expr><name>nitems_new</name></expr></argument>, <argument><expr><name>size_of_item</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newsize_allocated</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <comment type="line">// copy over the data from the old block to the new block</comment>
        <if_stmt><if>if <condition>(<expr><name>pnew</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// copy from the old to new with a parallel memcpy</comment>
            <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_memcpy</name> <argument_list>(<argument><expr><name>pnew</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>oldsize</name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// free the old block (either hard free, or return to free_pool)</comment>
            <expr_stmt><expr><call><name>GB_dealloc_memory</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>oldsize_allocated</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// use realloc</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// The realloc function has been provided, and the block is larger</comment>
        <comment type="line">// than what can be accomodated by the free_pool.</comment>

        <decl_stmt><decl><type><name>bool</name></type> <name>pretend_to_fail</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>GB_Global_malloc_tracking_get</name> <argument_list>( )</argument_list></call> <operator>&amp;&amp;</operator> <call><name>GB_Global_malloc_debug_get</name> <argument_list>( )</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>pretend_to_fail</name> <operator>=</operator> <call><name>GB_Global_malloc_debug_count_decrement</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pretend_to_fail</name></expr>)</condition>
        <block>{<block_content> 
            <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_MEMDUMP</name></cpp:ifdef>
            <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"hard realloc %p oldsize %ld newsize %ld\n"</literal></expr></argument>,
                <argument><expr><name>p</name></expr></argument>, <argument><expr><name>oldsize_allocated</name></expr></argument>, <argument><expr><name>newsize_allocated</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><name>pnew</name> <operator>=</operator> <call><name>GB_Global_realloc_function</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>newsize_allocated</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_MEMDUMP</name></cpp:ifdef>
            <expr_stmt><expr><call><name>GB_Global_free_pool_dump</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>GB_Global_memtable_dump</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check if successful and return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>pnew</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// realloc failed</comment>
        <if_stmt><if>if <condition>(<expr><name>newsize</name> <operator>&lt;</operator> <name>oldsize</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// the attempt to reduce the size of the block failed, but the old</comment>
            <comment type="line">// block is unchanged.  So pretend to succeed, but do not change</comment>
            <comment type="line">// size_allocated since it must reflect the actual size of the</comment>
            <comment type="line">// block.</comment>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ok</name><operator>)</operator> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// out of memory.  the old block is unchanged</comment>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ok</name><operator>)</operator> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// realloc succeeded</comment>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <name>pnew</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ok</name><operator>)</operator> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>size_allocated</name><operator>)</operator> <operator>=</operator> <name>newsize_allocated</name></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
