<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_bix_alloc.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_bix_alloc: allocate a matrix to hold a given number of entries</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Does not modify A-&gt;p or A-&gt;h (unless an error occurs).  Frees A-&gt;b, A-&gt;x,</comment>
<comment type="line">// and A-&gt;i and reallocates them to the requested size.  Frees any pending</comment>
<comment type="line">// tuples and deletes all entries (including zombies, if any).  If numeric is</comment>
<comment type="line">// false, then A-&gt;x is freed but not reallocated.</comment>

<comment type="line">// If this method fails, all content of A is freed (including A-&gt;p and A-&gt;h).</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GB_PUBLIC</name>
<name>GrB_Info</name></type> <name>GB_bix_alloc</name>       <comment type="line">// allocate A-&gt;b, A-&gt;i, and A-&gt;x space in a matrix</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,           <comment type="line">// matrix to allocate space for</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name></type> <name>nzmax</name></decl></parameter>,  <comment type="line">// number of entries the matrix can hold;</comment>
                            <comment type="line">// ignored if A is iso and full</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sparsity</name></decl></parameter>,     <comment type="line">// sparse (=hyper/auto) / bitmap / full</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>bitmap_calloc</name></decl></parameter>,   <comment type="line">// if true, calloc A-&gt;b, otherwise use malloc</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>numeric</name></decl></parameter>,     <comment type="line">// if true, allocate A-&gt;x, otherwise A-&gt;x is NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_iso</name></decl></parameter>,       <comment type="line">// if true, allocate A as iso</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>A</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate the A-&gt;b, A-&gt;x, and A-&gt;i content of the matrix</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// Free the existing A-&gt;b, A-&gt;x, and A-&gt;i content, if any.</comment>
    <comment type="line">// Leave A-&gt;p and A-&gt;h unchanged.</comment>
    <expr_stmt><expr><call><name>GB_bix_free</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name> <operator>=</operator> <name>A_iso</name></expr>  ;</expr_stmt>       <comment type="line">// OK: see caller for iso burble</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><name>true</name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>sparsity</name> <operator>==</operator> <name>GxB_BITMAP</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>bitmap_calloc</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// content is fully defined</comment>
            <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <call><name>GB_CALLOC</name> <argument_list>(<argument><expr><name>nzmax</name></expr></argument>, <argument><expr><name>int8_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>b_size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// bitmap is not defined and will be computed by the caller</comment>
            <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><name>nzmax</name></expr></argument>, <argument><expr><name>int8_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>b_size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>ok</name> <operator>=</operator> <operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>b</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>sparsity</name> <operator>!=</operator> <name>GxB_FULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// sparsity: sparse / hyper / auto </comment>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><name>nzmax</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>i_size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>ok</name> <operator>=</operator> <operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>i</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>i</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>numeric</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// calloc the space if A is bitmap</comment>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <call><name>GB_XALLOC</name> <argument_list>(<argument><expr><name>sparsity</name> <operator>==</operator> <name>GxB_BITMAP</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>,    <comment type="line">// x:OK</comment>
            <argument><expr><name>nzmax</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>x_size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>ok</name> <operator>=</operator> <name>ok</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>x</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <expr_stmt><expr><call><name>GB_phybix_free</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
