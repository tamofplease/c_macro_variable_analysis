<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_qsort_1b.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_qsort_1b: sort a 2-by-n list, using A [0][ ] as the sort key</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_sort.h"</cpp:file></cpp:include>

<comment type="line">// returns true if A [a] &lt; B [b]</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_lt</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>B</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GB_lt_1 (A ## _0, a, B ## _0, b)</cpp:value></cpp:define>

<comment type="line">// each entry has a single key</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_K</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_qsort_1b: generic method for any data type</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// argument list for calling a function</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_arg</name><parameter_list>(<parameter><type><name>A</name></type></parameter>)</parameter_list></cpp:macro>                       \
    <cpp:value>A ## _0, A ## _1, xsize</cpp:value></cpp:define>

<comment type="line">// argument list for calling a function, with offset</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_arg_offset</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>              \
    <cpp:value>A ## _0 + (x), A ## _1 + (x)*xsize, xsize</cpp:value></cpp:define>

<comment type="line">// argument list for defining a function</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_args</name><parameter_list>(<parameter><type><name>A</name></type></parameter>)</parameter_list></cpp:macro>                      \
    <cpp:value>int64_t *restrict A ## _0,       \
    GB_void *restrict A ## _1,       \
    size_t xsize</cpp:value></cpp:define>

<comment type="line">// swap A [a] and A [b]</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_swap</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>                                                        \
<cpp:value>{                                                                             \
    int64_t t0 = A ## _0 [a] ; A ## _0 [a] = A ## _0 [b] ; A ## _0 [b] = t0 ; \
    GB_void t1 [GB_VLA(xsize)] ;                                              \
    memcpy (t1, A ## _1 + (a)*xsize, xsize) ;                                 \
    memcpy (A ## _1 + (a)*xsize, A ## _1 + (b)*xsize, xsize) ;                \
    memcpy (A ## _1 + (b)*xsize, t1, xsize) ;                                 \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_partition</name></cpp:macro> <cpp:value>GB_partition_1b</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_quicksort</name></cpp:macro> <cpp:value>GB_quicksort_1b</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_qsort_template.c"</cpp:file></cpp:include>

<function><type><name>GB_PUBLIC</name>
<name>void</name></type> <name>GB_qsort_1b</name>    <comment type="line">// sort array A of size 2-by-n, using 1 key (A [0][])</comment>
<parameter_list>(
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_0</name></decl></parameter>,       <comment type="line">// size n array</comment>
    <parameter><decl><type><name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_1</name></decl></parameter>,       <comment type="line">// size n array</comment>
    <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>xsize</name></decl></parameter>,          <comment type="line">// size of entries in A_1</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>n</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>seed</name> <init>= <expr><name>n</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_quicksort</name> <argument_list>(<argument><expr><call><name>GB_arg</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seed</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_qsort_1b_size1:  quicksort with A_1 of type that has sizeof 1</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// for GrB_BOOL, GrB_INT8, GrB_UINT8, and user-defined types with sizeof(...)=1</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A1_type</name></cpp:macro> <cpp:value>uint8_t</cpp:value></cpp:define>

<comment type="line">// argument list for calling a function</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_arg</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_arg</name><parameter_list>(<parameter><type><name>A</name></type></parameter>)</parameter_list></cpp:macro>                       \
    <cpp:value>A ## _0, A ## _1</cpp:value></cpp:define>

<comment type="line">// argument list for calling a function, with offset</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_arg_offset</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_arg_offset</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>              \
    <cpp:value>A ## _0 + (x), A ## _1 + (x)</cpp:value></cpp:define>

<comment type="line">// argument list for defining a function</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_args</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_args</name><parameter_list>(<parameter><type><name>A</name></type></parameter>)</parameter_list></cpp:macro>                      \
    <cpp:value>int64_t *restrict A ## _0,          \
    A1_type *restrict A ## _1</cpp:value></cpp:define>           \

<comment type="line">// swap A [a] and A [b]</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_swap</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_swap</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>                  \
<cpp:value>{                                       \
    int64_t t0 = A ## _0 [a] ; A ## _0 [a] = A ## _0 [b] ; A ## _0 [b] = t0 ; \
    A1_type t1 = A ## _1 [a] ; A ## _1 [a] = A ## _1 [b] ; A ## _1 [b] = t1 ; \
}</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_partition</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_partition</name></cpp:macro> <cpp:value>GB_partition_1b_size1</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_quicksort</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_quicksort</name></cpp:macro> <cpp:value>GB_quicksort_1b_size1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_qsort_template.c"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_qsort_1b_size1</name>  <comment type="line">// GB_qsort_1b with A_1 with sizeof = 1</comment>
<parameter_list>(
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_0</name></decl></parameter>,       <comment type="line">// size n array</comment>
    <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_1</name></decl></parameter>,       <comment type="line">// size n array</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>n</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>seed</name> <init>= <expr><name>n</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_quicksort</name> <argument_list>(<argument><expr><call><name>GB_arg</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seed</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_qsort_1b_size2:  quicksort with A_1 of type that has sizeof 2</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// for GrB_INT16, GrB_UINT16, and user-defined types of sizeof(...) = 2</comment>

<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>A1_type</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A1_type</name></cpp:macro> <cpp:value>uint16_t</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_partition</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_partition</name></cpp:macro> <cpp:value>GB_partition_1b_size2</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_quicksort</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_quicksort</name></cpp:macro> <cpp:value>GB_quicksort_1b_size2</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_qsort_template.c"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_qsort_1b_size2</name>  <comment type="line">// GB_qsort_1b with A_1 with sizeof = 2</comment>
<parameter_list>(
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_0</name></decl></parameter>,       <comment type="line">// size n array</comment>
    <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_1</name></decl></parameter>,      <comment type="line">// size n array</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>n</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>seed</name> <init>= <expr><name>n</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_quicksort</name> <argument_list>(<argument><expr><call><name>GB_arg</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seed</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_qsort_1b_size4:  quicksort with A_1 of type that has sizeof 4</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// for GrB_INT32, GrB_UINT32, GrB_FP32, and user-defined types with</comment>
<comment type="line">// sizeof(...) = 4.</comment>

<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>A1_type</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A1_type</name></cpp:macro> <cpp:value>uint32_t</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_partition</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_partition</name></cpp:macro> <cpp:value>GB_partition_1b_size4</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_quicksort</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_quicksort</name></cpp:macro> <cpp:value>GB_quicksort_1b_size4</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_qsort_template.c"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_qsort_1b_size4</name>  <comment type="line">// GB_qsort_1b with A_1 with sizeof = 4</comment>
<parameter_list>(
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_0</name></decl></parameter>,       <comment type="line">// size n array</comment>
    <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_1</name></decl></parameter>,      <comment type="line">// size n array</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>n</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>seed</name> <init>= <expr><name>n</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_quicksort</name> <argument_list>(<argument><expr><call><name>GB_arg</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seed</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_qsort_1b_size8:  quicksort with A_1 of type that has sizeof 8</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// for GrB_INT64, GrB_UINT64, GrB_FP64, GxB_FC32, and user-defined types</comment>
<comment type="line">// with sizeof(...) = 8.</comment>

<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>A1_type</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A1_type</name></cpp:macro> <cpp:value>uint64_t</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_partition</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_partition</name></cpp:macro> <cpp:value>GB_partition_1b_size8</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_quicksort</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_quicksort</name></cpp:macro> <cpp:value>GB_quicksort_1b_size8</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_qsort_template.c"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_qsort_1b_size8</name>  <comment type="line">// GB_qsort_1b with A_1 with sizeof = 8</comment>
<parameter_list>(
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_0</name></decl></parameter>,       <comment type="line">// size n array</comment>
    <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_1</name></decl></parameter>,      <comment type="line">// size n array</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>n</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>seed</name> <init>= <expr><name>n</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_quicksort</name> <argument_list>(<argument><expr><call><name>GB_arg</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seed</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_qsort_1b_size16:  quicksort with A_1 of type that has sizeof 16</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// for GxB_FC64 and user-defined types with sizeof(...) = 16.</comment>

<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>A1_type</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A1_type</name></cpp:macro> <cpp:value>GB_blob16</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_partition</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_partition</name></cpp:macro> <cpp:value>GB_partition_1b_size16</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_quicksort</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_quicksort</name></cpp:macro> <cpp:value>GB_quicksort_1b_size16</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_qsort_template.c"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_qsort_1b_size16</name> <comment type="line">// GB_qsort_1b with A_1 with sizeof = 16</comment>
<parameter_list>(
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_0</name></decl></parameter>,       <comment type="line">// size n array</comment>
    <parameter><decl><type><name>GB_blob16</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_1</name></decl></parameter>,     <comment type="line">// size n array</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>n</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>seed</name> <init>= <expr><name>n</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_quicksort</name> <argument_list>(<argument><expr><call><name>GB_arg</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seed</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
