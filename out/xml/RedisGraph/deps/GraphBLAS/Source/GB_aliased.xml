<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_aliased.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_aliased: determine if two matrices are aliased</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Returns true if A == B (and not NULL), or if any component A and B are</comment>
<comment type="line">// aliased to each other.  In the latter case, that component of A and B will</comment>
<comment type="line">// always be shallow, in either A or B, or both.  NULL pointers are not</comment>
<comment type="line">// aliased.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<comment type="line">// true if pointers p1 and p2 are aliased and not NULL</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_POINTER_ALIASED</name><parameter_list>(<parameter><type><name>p1</name></type></parameter>,<parameter><type><name>p2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((p1) == (p2) &amp;&amp; (p1) != NULL)</cpp:value></cpp:define>

<function><type><name>GB_PUBLIC</name>
<name>bool</name></type> <name>GB_aliased</name>             <comment type="line">// determine if A and B are aliased</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,           <comment type="line">// input A matrix</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>B</name></decl></parameter>            <comment type="line">// input B matrix</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check the matrices themselves</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>A</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>B</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// this is not an error condition; NULL pointers are not an alias</comment>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>A</name> <operator>==</operator> <name>B</name></expr>)</condition>
    <block>{<block_content> 
        <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check their content</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>aliased</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>GB_POINTER_ALIASED</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>h_shallow</name></name> <operator>||</operator> <name><name>B</name><operator>-&gt;</operator><name>h_shallow</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>aliased</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>GB_POINTER_ALIASED</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>p_shallow</name></name> <operator>||</operator> <name><name>B</name><operator>-&gt;</operator><name>p_shallow</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>aliased</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>GB_POINTER_ALIASED</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>b_shallow</name></name> <operator>||</operator> <name><name>B</name><operator>-&gt;</operator><name>b_shallow</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>aliased</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>GB_POINTER_ALIASED</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>i_shallow</name></name> <operator>||</operator> <name><name>B</name><operator>-&gt;</operator><name>i_shallow</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>aliased</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>GB_POINTER_ALIASED</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>x_shallow</name></name> <operator>||</operator> <name><name>B</name><operator>-&gt;</operator><name>x_shallow</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>aliased</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>GB_aliased</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>Y</name></name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>Y</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>Y_shallow</name></name> <operator>||</operator> <name><name>B</name><operator>-&gt;</operator><name>Y_shallow</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>aliased</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <return>return <expr><operator>(</operator><name>aliased</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
