<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GrB_Row_assign.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Row_assign: C&lt;M'&gt;(row,Cols) = accum (C(row,Cols),u')</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Compare with GxB_Row_subassign, which uses M and C_replace differently</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_assign.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_get_mask.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GrB_Row_assign</name>             <comment type="line">// C&lt;M'&gt;(row,Cols) += u'</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,                   <comment type="line">// input/output matrix for results</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Vector</name></type> <name>M_in</name></decl></parameter>,          <comment type="line">// M for C(row,:), unused if NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,       <comment type="line">// optional accum for z=accum(C(row,Cols),t)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Vector</name></type> <name>u</name></decl></parameter>,             <comment type="line">// input vector</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>row</name></decl></parameter>,                  <comment type="line">// row index</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>Cols</name></decl></parameter>,          <comment type="line">// column indices</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>nCols</name></decl></parameter>,                <comment type="line">// number of column indices</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Descriptor</name></type> <name>desc</name></decl></parameter>       <comment type="line">// descriptor for C(row,:) and M</comment>
)</parameter_list>
<block>{<block_content> 

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_WHERE</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"GrB_Row_assign (C, M, accum, u, row, Cols, nCols, desc)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BURBLE_START</name> <argument_list>(<argument><expr><literal type="string">"GrB_assign"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_FAULTY</name> <argument_list>(<argument><expr><name>M_in</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>M_in</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>M_in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// get the descriptor</comment>
    <expr_stmt><expr><call><name>GB_GET_DESCRIPTOR</name> <argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>C_replace</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>,
        <argument><expr><name>xx1</name></expr></argument>, <argument><expr><name>xx2</name></expr></argument>, <argument><expr><name>xx3</name></expr></argument>, <argument><expr><name>xx7</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// get the mask</comment>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>M</name> <init>= <expr><call><name>GB_get_mask</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>M_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Mask_comp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Mask_struct</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C&lt;M'&gt;(row,Cols) = accum (C(row,Cols), u')</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// construct the row index list Rows = [ row ] of length nRows = 1</comment>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name><name>Rows</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></decl> ;</decl_stmt>
    <expr_stmt><expr><name><name>Rows</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>row</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_assign</name> <argument_list>(
        <argument><expr><name>C</name></expr></argument>, <argument><expr><name>C_replace</name></expr></argument>,                   <comment type="line">// C matrix and its descriptor</comment>
        <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>,      <comment type="line">// mask and its descriptor</comment>
        <argument><expr><name>true</name></expr></argument>,                           <comment type="line">// transpose the mask</comment>
        <argument><expr><name>accum</name></expr></argument>,                          <comment type="line">// for accum (C(Rows,col),u)</comment>
        <argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>u</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,           <comment type="line">// u as a matrix; always transposed</comment>
        <argument><expr><name>Rows</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,                        <comment type="line">// a single row index</comment>
        <argument><expr><name>Cols</name></expr></argument>, <argument><expr><name>nCols</name></expr></argument>,                    <comment type="line">// column indices</comment>
        <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GB_ignore_code</name></expr></argument>,    <comment type="line">// no scalar expansion</comment>
        <argument><expr><name>GB_ROW_ASSIGN</name></expr></argument>,
        <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>GB_BURBLE_END</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
