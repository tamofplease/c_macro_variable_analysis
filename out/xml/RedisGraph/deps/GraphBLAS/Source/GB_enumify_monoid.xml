<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_enumify_monoid.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_enumify_monoid: enumify a monoid</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2021, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_stringify.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_enumify_monoid</name>  <comment type="line">// enumerate a monoid</comment>
<parameter_list>(
    <comment type="line">// outputs:</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>add_ecode</name></decl></parameter>,     <comment type="line">// binary op as an enum</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>id_ecode</name></decl></parameter>,      <comment type="line">// identity value as an enum</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>term_ecode</name></decl></parameter>,    <comment type="line">// terminal value as an enum</comment>
    <comment type="line">// inputs:</comment>
    <parameter><decl><type><name>int</name></type> <name>add_opcode</name></decl></parameter>,     <comment type="line">// binary operator of the monoid</comment>
    <parameter><decl><type><name>int</name></type> <name>zcode</name></decl></parameter>           <comment type="line">// type of the monoid (x, y, and z)</comment>
)</parameter_list>
<block>{<block_content>

    <expr_stmt><expr><call><name>GB_enumify_binop</name> <argument_list>(<argument><expr><name>add_ecode</name></expr></argument>, <argument><expr><name>add_opcode</name></expr></argument>, <argument><expr><name>zcode</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>*</operator><name>add_ecode</name> <operator>&lt;</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_enumify_identity</name> <argument_list>(<argument><expr><name>id_ecode</name></expr></argument>, <argument><expr><name>add_opcode</name></expr></argument>, <argument><expr><name>zcode</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_enumify_terminal</name> <argument_list>(<argument><expr><name>term_ecode</name></expr></argument>, <argument><expr><name>add_opcode</name></expr></argument>, <argument><expr><name>zcode</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
