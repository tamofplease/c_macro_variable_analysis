<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_convert_sparse_to_hyper_test.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_convert_sparse_to_hyper_test: test for sparse to hypersparse conversion</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Returns true if a sparse matrix should be converted to hypersparse.</comment>
<comment type="line">// Returns false if the matrix should stay sparse.</comment>

<comment type="line">// A matrix with vdim &lt;= 1 must always be sparse, not hypersparse;</comment>
<comment type="line">// that is, a GrB_Vector is never hypersparse.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>GB_convert_sparse_to_hyper_test</name>  <comment type="line">// test sparse to hypersparse conversion</comment>
<parameter_list>(
    <parameter><decl><type><name>float</name></type> <name>hyper_switch</name></decl></parameter>,     <comment type="line">// A-&gt;hyper_switch</comment>
    <parameter><decl><type><name>int64_t</name></type> <name>k</name></decl></parameter>,              <comment type="line">// # of non-empty vectors of A (an estimate is OK)</comment>
    <parameter><decl><type><name>int64_t</name></type> <name>vdim</name></decl></parameter>            <comment type="line">// A-&gt;vdim</comment>
)</parameter_list>
<block>{<block_content> 

    <comment type="line">// get the vector dimension of this matrix</comment>
    <decl_stmt><decl><type><name>float</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <name>vdim</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">// ensure k is in the range 0 to n, inclusive</comment>
    <expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <return>return <expr><operator>(</operator><name>n</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <name>k</name><operator>)</operator> <operator>&lt;=</operator> <name>n</name> <operator>*</operator> <name>hyper_switch</name><operator>)</operator><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
