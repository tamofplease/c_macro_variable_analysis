<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GrB_Matrix_exportSize.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Matrix_exportSize: determine sizes of arrays for GrB_Matrix_export</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_transpose.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GrB_Matrix_exportSize</name>  <comment type="line">// determine sizes of user arrays for export</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>Ap_len</name></decl></parameter>,      <comment type="line">// # of entries required for Ap (not # of bytes)</comment>
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>Ai_len</name></decl></parameter>,      <comment type="line">// # of entries required for Ai (not # of bytes)</comment>
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>Ax_len</name></decl></parameter>,      <comment type="line">// # of entries required for Ax (not # of bytes)</comment>
    <parameter><decl><type><name>GrB_Format</name></type> <name>format</name></decl></parameter>,      <comment type="line">// export format</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>            <comment type="line">// matrix to export</comment>
)</parameter_list>
<block>{<block_content> 

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_WHERE1</name> <argument_list>(<argument><expr><literal type="string">"GrB_Matrix_exportSize (&amp;Ap_len, &amp;Ai_len, &amp;Ax_len, format, A)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>Ap_len</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>Ai_len</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>Ax_len</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>nvals</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ax_len</name><operator>)</operator> <operator>=</operator> <name>nvals</name></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine the sizes of Ap and Ai for each format</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <switch>switch <condition>(<expr><name>format</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>GrB_CSR_FORMAT</name></expr> :</case>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ap_len</name><operator>)</operator> <operator>=</operator> <call><name>GB_NROWS</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ai_len</name><operator>)</operator> <operator>=</operator> <name>nvals</name></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><name>GrB_CSC_FORMAT</name></expr> :</case>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ap_len</name><operator>)</operator> <operator>=</operator> <call><name>GB_NCOLS</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ai_len</name><operator>)</operator> <operator>=</operator> <name>nvals</name></expr> ;</expr_stmt>
            <break>break ;</break>

<comment type="line">//      case GrB_DENSE_ROW_FORMAT :</comment>
<comment type="line">//      case GrB_DENSE_COL_FORMAT :</comment>
<comment type="line">//          (*Ap_len) = 0 ;</comment>
<comment type="line">//          (*Ai_len) = 0 ;</comment>
<comment type="line">//          if (!GB_is_dense (A))</comment>
<comment type="line">//          {</comment>
<comment type="line">//              // A must dense or full</comment>
<comment type="line">//              return (GrB_INVALID_VALUE) ;</comment>
<comment type="line">//          }</comment>
<comment type="line">//          break ;</comment>

        <case>case <expr><name>GrB_COO_FORMAT</name></expr> :</case> 
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ap_len</name><operator>)</operator> <operator>=</operator> <name>nvals</name></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ai_len</name><operator>)</operator> <operator>=</operator> <name>nvals</name></expr> ;</expr_stmt>
            <break>break ;</break>

        <default>default :</default>
            <comment type="line">// unknown format</comment>
            <return>return <expr><operator>(</operator><name>GrB_INVALID_VALUE</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></switch>

    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>flush</omp:name></omp:directive></cpp:pragma>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
