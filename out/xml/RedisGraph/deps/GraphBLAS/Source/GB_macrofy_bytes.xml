<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_macrofy_bytes.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_macrofy_bytes: create a single scalar from an array of bytes</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2021, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// When the macro is used, sizeof (ztype) must be the same as nbytes</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_stringify.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_macrofy_bytes</name>
<parameter_list>(
    <comment type="line">// input:</comment>
    <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>,           <comment type="line">// File to write macros, assumed open already</comment>
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Name</name></decl></parameter>,         <comment type="line">// all-upper-case name</comment>
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type_name</name></decl></parameter>,    <comment type="line">// name of the type</comment>
    <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>,     <comment type="line">// array of size nbytes</comment>
    <parameter><decl><type><name>size_t</name></type> <name>nbytes</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>,
        <argument><expr><literal type="string">"#define GB_DECLARE_%s(z) %s z ; \\\n"</literal>
        <literal type="string">"    {                                                       \\\n"</literal>
        <literal type="string">"        const uint8_t bytes [%d] =                          \\\n"</literal>
        <literal type="string">"        {                                                   \\\n"</literal>
        <literal type="string">"            "</literal></expr></argument>,
        <argument><expr><name>Name</name></expr></argument>, <argument><expr><name>type_name</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>nbytes</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nbytes</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"0x%02x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>value</name> <index>[<expr><name>k</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <name>nbytes</name><operator>-</operator><literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>k</name> <operator>%</operator> <literal type="number">8</literal> <operator>==</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\\\n            "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="line">// finalize the array and use memcpy to initialize the scalar</comment>
    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>,
        <argument><expr><literal type="string">"  \\\n"</literal>
        <literal type="string">"        } ;                                                 \\\n"</literal>
        <literal type="string">"        memcpy (&amp;z, bytes, %d) ;                            \\\n"</literal>
        <literal type="string">"    }\n"</literal></expr></argument>,
        <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>nbytes</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
