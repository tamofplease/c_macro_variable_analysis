<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GxB_deserialize_type_name.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GxB_deserialize_type_name: return the name of a type</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_serialize.h"</cpp:file></cpp:include>

<comment type="line">// GxB_deserialize_type_name extracts the type_name of the GrB_Type of the</comment>
<comment type="line">// GrB_Matrix or GrB_Vector held in a serialized blob.  On input, type_name</comment>
<comment type="line">// must point to a user-owned char array of size at least GxB_MAX_NAME_LEN (it</comment>
<comment type="line">// must not point into the blob itself).  On output, type_name will contain a</comment>
<comment type="line">// null-terminated string with the corresponding C type name.  If the blob</comment>
<comment type="line">// holds a matrix of a built-in type, the name is returned as "bool" for</comment>
<comment type="line">// GrB_BOOL, "uint8_t" for GrB_UINT8, "float complex" for GxB_FC32, etc.</comment>

<function><type><name>GrB_Info</name></type> <name>GxB_deserialize_type_name</name>  <comment type="line">// return the type name of a blob</comment>
<parameter_list>(
    <comment type="line">// output:</comment>
    <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>type_name</name></decl></parameter>,        <comment type="line">// name of the type (char array of size at least</comment>
                            <comment type="line">// GxB_MAX_NAME_LEN, owned by the user application).</comment>
    <comment type="line">// input, not modified:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>blob</name></decl></parameter>,       <comment type="line">// the blob</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>blob_size</name></decl></parameter>     <comment type="line">// size of the blob</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_WHERE1</name> <argument_list>(<argument><expr><literal type="string">"GxB_deserialize_type_name (type_name, blob, blob_size)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>type_name</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>blob</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>blob_size</name> <operator>&lt;</operator> <name>GB_BLOB_HEADER_SIZE</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// blob is invalid</comment>
        <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the blob header</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>size_t</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_BLOB_READ</name> <argument_list>(<argument><expr><name>blob_size2</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BLOB_READ</name> <argument_list>(<argument><expr><name>typecode</name></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>blob_size2</name> <operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>blob_size</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// blob is invalid</comment>
        <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the type_name from the built-in type or the blob</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>typecode</name> <operator>&gt;=</operator> <name>GB_BOOL_code</name> <operator>&amp;&amp;</operator> <name>typecode</name> <operator>&lt;</operator> <name>GB_UDT_code</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// blob has a built-in type; the name is not in the blob</comment>
        <decl_stmt><decl><type><name>GrB_Type</name></type> <name>blob_type</name> <init>= <expr><call><name>GB_code_type</name> <argument_list>(<argument><expr><operator>(</operator><name>GB_Type_code</name><operator>)</operator> <name>typecode</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>blob_type</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>type_name</name></expr></argument>, <argument><expr><name><name>blob_type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>GxB_MAX_NAME_LEN</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>typecode</name> <operator>==</operator> <name>GB_UDT_code</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// blob has a user-defined type</comment>
        <if_stmt><if>if <condition>(<expr><name>blob_size</name> <operator>&lt;</operator> <name>GB_BLOB_HEADER_SIZE</name> <operator>+</operator> <name>GxB_MAX_NAME_LEN</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// blob is invalid</comment>
            <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// get the name of the user type from the blob</comment>
        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>type_name</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name>blob</name><operator>)</operator> <operator>+</operator> <name>GB_BLOB_HEADER_SIZE</name></expr></argument>,
            <argument><expr><name>GxB_MAX_NAME_LEN</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// blob is invalid</comment>
        <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// this should already be in the blob, but set it to null just in case</comment>
    <expr_stmt><expr><name><name>type_name</name> <index>[<expr><name>GxB_MAX_NAME_LEN</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>flush</omp:name></omp:directive></cpp:pragma>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
