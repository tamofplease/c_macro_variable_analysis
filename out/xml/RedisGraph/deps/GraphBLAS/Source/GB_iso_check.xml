<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_iso_check.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_iso_check: check if all entries in a matrix are identical</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Returns true if all entries in A are the same, and A can then be converted</comment>
<comment type="line">// to iso if currently non-iso.  Returns false if A is bitmap, has any zombies,</comment>
<comment type="line">// or has or pending tuples, since these are more costly to check.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_atomics.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>GB_iso_check</name>               <comment type="line">// return true if A is iso, false otherwise</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,         <comment type="line">// matrix to reduce</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>A</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>GB_nnz</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>GB_nnz_held</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// empty matrices cannot be iso</comment>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// nothing to do; A is already iso</comment>
        <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// Non-iso matrices with pending work are assumed to be non-iso.</comment>
        <comment type="line">// Bitmap matrices and matrices with zombies could be checked, but</comment>
        <comment type="line">// finding the first entry is tedious so this is skipped.  Matrices</comment>
        <comment type="line">// with pending work could be finished first, but this is costly so it</comment>
        <comment type="line">// is skipped.</comment>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A input for GB_iso_check"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get A</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>asize</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>anz</name> <init>= <expr><call><name>GB_nnz_held</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>iso</name> <init>= <expr><name>true</name></expr></init></decl> ;</decl_stmt>       <comment type="line">// A is iso until proven otherwise</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine the number of threads to use</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ntasks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>nthreads</name> <operator>=</operator> <call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>anz</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>ntasks</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>nthreads</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><literal type="number">64</literal> <operator>*</operator> <name>nthreads</name><operator>)</operator></expr></else></ternary></expr> ;</expr_stmt>
    <expr_stmt><expr><name>ntasks</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>anz</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>ntasks</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>ntasks</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check if A is iso</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>

    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA_DEV</name></cpp:ifndef>
    <block>{<block_content>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_GET_FIRST_VALUE</name><parameter_list>(<parameter><type><name>atype_t</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>Ax</name></type></parameter>)</parameter_list></cpp:macro>                      \
            <cpp:value>const atype_t a = Ax [0]</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COMPARE_WITH_FIRST_VALUE</name><parameter_list>(<parameter><type><name>my_iso</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>Ax</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>           \
            <cpp:value>my_iso = my_iso &amp; (a == Ax [p])</cpp:value></cpp:define>

        <switch>switch <condition>(<expr><name>asize</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>GB_1BYTE</name></expr> :</case> <comment type="line">// uint8, int8, bool, or 1-byte user</comment>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ATYPE</name></cpp:macro> <cpp:value>uint8_t</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_iso_check_template.c"</cpp:file></cpp:include>
                <break>break ;</break>

            <case>case <expr><name>GB_2BYTE</name></expr> :</case> <comment type="line">// uint16, int16, or 2-byte user</comment>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ATYPE</name></cpp:macro> <cpp:value>uint16_t</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_iso_check_template.c"</cpp:file></cpp:include>
                <break>break ;</break>

            <case>case <expr><name>GB_4BYTE</name></expr> :</case> <comment type="line">// uint32, int32, float, or 4-byte user</comment>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ATYPE</name></cpp:macro> <cpp:value>uint32_t</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_iso_check_template.c"</cpp:file></cpp:include>
                <break>break ;</break>

            <case>case <expr><name>GB_8BYTE</name></expr> :</case> <comment type="line">// uint64, int64, double, float complex,</comment>
                            <comment type="line">// or 8-byte user defined</comment>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ATYPE</name></cpp:macro> <cpp:value>uint64_t</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_iso_check_template.c"</cpp:file></cpp:include>
                <break>break ;</break>

            <case>case <expr><name>GB_16BYTE</name></expr> :</case> <comment type="line">// double complex or 16-byte user</comment>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ATYPE</name></cpp:macro> <cpp:value>uint64_t</cpp:value></cpp:define>
                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_GET_FIRST_VALUE</name></cpp:undef>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_GET_FIRST_VALUE</name><parameter_list>(<parameter><type><name>atype_t</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>Ax</name></type></parameter>)</parameter_list></cpp:macro>              \
                    <cpp:value>const atype_t a ## 0 = Ax [0] ;                     \
                    const atype_t a ## 1 = Ax [1] ;</cpp:value></cpp:define>
                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_COMPARE_WITH_FIRST_VALUE</name></cpp:undef>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COMPARE_WITH_FIRST_VALUE</name><parameter_list>(<parameter><type><name>my_iso</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>Ax</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>   \
                    <cpp:value>my_iso = my_iso &amp; (a ## 0 == Ax [2*p  ])            \
                                    &amp; (a ## 1 == Ax [2*p+1])</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_iso_check_template.c"</cpp:file></cpp:include>
                <break>break ;</break>

            <default>default:</default><empty_stmt>;</empty_stmt>
        </block_content>}</block></switch>
    </block_content>}</block>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// with user-defined types of any size</comment>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ATYPE</name></cpp:macro> <cpp:value>GB_void</cpp:value></cpp:define>
        <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_GET_FIRST_VALUE</name></cpp:undef>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_GET_FIRST_VALUE</name><parameter_list>(<parameter><type><name>atype_t</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>Ax</name></type></parameter>)</parameter_list></cpp:macro>                      \
            <cpp:value>GB_void a [GB_VLA(asize)] ;                                 \
            memcpy (a, Ax, asize) ;</cpp:value></cpp:define>
        <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_COMPARE_WITH_FIRST_VALUE</name></cpp:undef>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COMPARE_WITH_FIRST_VALUE</name><parameter_list>(<parameter><type><name>my_iso</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>Ax</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>           \
            <cpp:value>my_iso = my_iso &amp; (memcmp (a, Ax + (p)*asize, asize) == 0)</cpp:value></cpp:define>
        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_iso_check_template.c"</cpp:file></cpp:include>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><operator>(</operator><name>iso</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
