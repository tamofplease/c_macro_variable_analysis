<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_extract.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_extract: C&lt;M&gt; = accum(C,A(I,J))</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Not user-callable.  Implements the user-callable GrB_*_extract functions.</comment>
<comment type="line">//</comment>
<comment type="line">//      C&lt;M&gt; = accum (C, A (Rows,Cols)) or</comment>
<comment type="line">//      C&lt;M&gt; = accum (C, AT(Rows,Cols)) where AT = A'</comment>
<comment type="line">//</comment>
<comment type="line">// equivalently:</comment>
<comment type="line">//</comment>
<comment type="line">//      C&lt;M&gt; = accum (C, A(Rows,Cols) )</comment>
<comment type="line">//      C&lt;M&gt; = accum (C, A(Cols,Rows)')</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro> <cpp:value>GrB_Matrix_free (&amp;T) ;</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_extract.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_subref.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_accum_mask.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_extract</name>                 <comment type="line">// C&lt;M&gt; = accum (C, A(I,J))</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,                   <comment type="line">// input/output matrix for results</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>C_replace</name></decl></parameter>,           <comment type="line">// C matrix descriptor</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,             <comment type="line">// optional mask for C, unused if NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_comp</name></decl></parameter>,           <comment type="line">// mask descriptor</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_struct</name></decl></parameter>,         <comment type="line">// if true, use the only structure of M</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,       <comment type="line">// optional accum for Z=accum(C,T)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,             <comment type="line">// input matrix</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_transpose</name></decl></parameter>,         <comment type="line">// A matrix descriptor</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>Rows</name></decl></parameter>,          <comment type="line">// row indices</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name></type> <name>nRows_in</name></decl></parameter>,       <comment type="line">// number of row indices</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>Cols</name></decl></parameter>,          <comment type="line">// column indices</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name></type> <name>nCols_in</name></decl></parameter>,       <comment type="line">// number of column indices</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// C may be aliased with M and/or A</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>GB_Matrix_opaque</name></name></type> <name>T_header</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>T</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>Rows</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>Cols</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_FAULTY_OR_POSITIONAL</name> <argument_list>(<argument><expr><name>accum</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C input for GB_Matrix_extract"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK_OR_NULL</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><literal type="string">"M for GB_Matrix_extract"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_BINARYOP_OK_OR_NULL</name> <argument_list>(<argument><expr><name>accum</name></expr></argument>, <argument><expr><literal type="string">"accum for GB_Matrix_extract"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A input for GB_Matrix_extract"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// check domains and dimensions for C&lt;M&gt; = accum (C,T)</comment>
    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_compatible</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr></argument>,
        <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// check the dimensions of C</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>cnrows</name> <init>= <expr><call><name>GB_NROWS</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>cncols</name> <init>= <expr><call><name>GB_NCOLS</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>nRows</name></decl>, <decl><type ref="prev"/><name>nCols</name></decl>, <decl><type ref="prev"/><name><name>RowColon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ColColon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rkind</name></decl>, <decl><type ref="prev"/><name>ckind</name></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>A_transpose</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// T = A(Rows,Cols)</comment>
        <expr_stmt><expr><call><name>GB_ijlength</name> <argument_list>(<argument><expr><name>Rows</name></expr></argument>, <argument><expr><name>nRows_in</name></expr></argument>, <argument><expr><call><name>GB_NROWS</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>nRows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rkind</name></expr></argument>, <argument><expr><name>RowColon</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_ijlength</name> <argument_list>(<argument><expr><name>Cols</name></expr></argument>, <argument><expr><name>nCols_in</name></expr></argument>, <argument><expr><call><name>GB_NCOLS</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>nCols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ckind</name></expr></argument>, <argument><expr><name>ColColon</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// T = A(Cols,Rows)</comment>
        <expr_stmt><expr><call><name>GB_ijlength</name> <argument_list>(<argument><expr><name>Rows</name></expr></argument>, <argument><expr><name>nRows_in</name></expr></argument>, <argument><expr><call><name>GB_NCOLS</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>nRows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rkind</name></expr></argument>, <argument><expr><name>RowColon</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_ijlength</name> <argument_list>(<argument><expr><name>Cols</name></expr></argument>, <argument><expr><name>nCols_in</name></expr></argument>, <argument><expr><call><name>GB_NROWS</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>nCols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ckind</name></expr></argument>, <argument><expr><name>ColColon</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>cnrows</name> <operator>!=</operator> <name>nRows</name> <operator>||</operator> <name>cncols</name> <operator>!=</operator> <name>nCols</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_DIMENSION_MISMATCH</name></expr></argument>,
            <argument><expr><literal type="string">"Dimensions not compatible:\n"</literal>
            <literal type="string">"required size of output is "</literal> <name>GBd</name> <literal type="string">"-by-"</literal> <name>GBd</name> <literal type="string">"\n"</literal>
            <literal type="string">"but actual size output is  "</literal> <name>GBd</name> <literal type="string">"-by-"</literal> <name>GBd</name> <literal type="string">"\n"</literal></expr></argument>,
            <argument><expr><name>nRows</name></expr></argument>, <argument><expr><name>nCols</name></expr></argument>, <argument><expr><name>cnrows</name></expr></argument>, <argument><expr><name>cncols</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// quick return if an empty mask is complemented</comment>
    <expr_stmt><expr><call><name>GB_RETURN_IF_QUICK_MASK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>C_replace</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// delete any lingering zombies and assemble any pending tuples</comment>
    <expr_stmt><expr><call><name>GB_MATRIX_WAIT</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>        <comment type="line">// cannot be jumbled</comment>
    <expr_stmt><expr><call><name>GB_MATRIX_WAIT</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>        <comment type="line">// cannot be jumbled</comment>

    <expr_stmt><expr><call><name>GB_BURBLE_DENSE</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"(C %s) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BURBLE_DENSE</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><literal type="string">"(M %s) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BURBLE_DENSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"(A %s) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// handle the CSR/CSC format and transpose; T = A (I,J) or T = A (J,I)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>I</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>J</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>ni</name></decl>, <decl><type ref="prev"/><name>nj</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>T_is_csc</name></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>is_csc</name></name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>A_transpose</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// T = A(Rows,Cols) where both A and T are in CSC format</comment>
            <expr_stmt><expr><name>I</name> <operator>=</operator> <name>Rows</name></expr> ;</expr_stmt> <expr_stmt><expr><name>ni</name> <operator>=</operator> <name>nRows_in</name></expr> ;</expr_stmt>  <comment type="line">// indices into the vectors</comment>
            <expr_stmt><expr><name>J</name> <operator>=</operator> <name>Cols</name></expr> ;</expr_stmt> <expr_stmt><expr><name>nj</name> <operator>=</operator> <name>nCols_in</name></expr> ;</expr_stmt>  <comment type="line">// vectors</comment>
            <expr_stmt><expr><name>T_is_csc</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>           <comment type="line">// return T in CSC format</comment>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// T = A(Cols,Rows) where A is CSC and T is returned as CSR format</comment>
            <expr_stmt><expr><name>I</name> <operator>=</operator> <name>Cols</name></expr> ;</expr_stmt> <expr_stmt><expr><name>ni</name> <operator>=</operator> <name>nCols_in</name></expr> ;</expr_stmt>  <comment type="line">// indices into the vectors</comment>
            <expr_stmt><expr><name>J</name> <operator>=</operator> <name>Rows</name></expr> ;</expr_stmt> <expr_stmt><expr><name>nj</name> <operator>=</operator> <name>nRows_in</name></expr> ;</expr_stmt>  <comment type="line">// vectors</comment>
            <expr_stmt><expr><name>T_is_csc</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>          <comment type="line">// return T in CSR format</comment>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>A_transpose</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// T = A(Rows,Cols) where both A and T are in CSR format</comment>
            <expr_stmt><expr><name>I</name> <operator>=</operator> <name>Cols</name></expr> ;</expr_stmt> <expr_stmt><expr><name>ni</name> <operator>=</operator> <name>nCols_in</name></expr> ;</expr_stmt>  <comment type="line">// indices into the vectors</comment>
            <expr_stmt><expr><name>J</name> <operator>=</operator> <name>Rows</name></expr> ;</expr_stmt> <expr_stmt><expr><name>nj</name> <operator>=</operator> <name>nRows_in</name></expr> ;</expr_stmt>  <comment type="line">// vectors</comment>
            <expr_stmt><expr><name>T_is_csc</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>          <comment type="line">// return T in CSR format</comment>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// T = A(Cols,Rows) where A is CSR but T is returned as CSC format</comment>
            <expr_stmt><expr><name>I</name> <operator>=</operator> <name>Rows</name></expr> ;</expr_stmt> <expr_stmt><expr><name>ni</name> <operator>=</operator> <name>nRows_in</name></expr> ;</expr_stmt>  <comment type="line">// indices into the vectors</comment>
            <expr_stmt><expr><name>J</name> <operator>=</operator> <name>Cols</name></expr> ;</expr_stmt> <expr_stmt><expr><name>nj</name> <operator>=</operator> <name>nCols_in</name></expr> ;</expr_stmt>  <comment type="line">// vectors</comment>
            <expr_stmt><expr><name>T_is_csc</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>           <comment type="line">// return T in CSC format</comment>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// T has T-&gt;vdim = |J|, each vector of length T-&gt;vlen = |J|, regardless of</comment>
    <comment type="line">// its CSR/CSC format.</comment>

    <comment type="line">// J is a list of length |J| of vectors in the range 0:A-&gt;vdim-1</comment>
    <comment type="line">// I is a list of length |I| of indices in the range 0:A-&gt;vlen-1</comment>

    <comment type="line">// |I| and |J| are either nRows or nCols, depending on the 4 cases above.</comment>

    <comment type="line">// T has the same hypersparsity as A.</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// T = A (I,J)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// TODO::: iso:  if accum is PAIR, extract T as iso</comment>

    <expr_stmt><expr><call><name>GB_CLEAR_STATIC_HEADER</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T_header</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_subref</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>T_is_csc</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>nj</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><literal type="string">"T extracted"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C&lt;M&gt; = accum (C,T): accumulate the results into C via the mask M</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <return>return <expr><operator>(</operator><call><name>GB_accum_mask</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><name>C_replace</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>,
        <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
