<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_nvals.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_nvals: number of entries in a matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GB_nvals</name>           <comment type="line">// get the number of entries in a matrix</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>nvals</name></decl></parameter>,       <comment type="line">// matrix has nvals entries</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,     <comment type="line">// matrix to query</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>nvals</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// leave zombies alone, and leave jumbled, but assemble any pending tuples</comment>
    <expr_stmt><expr><call><name>GB_MATRIX_WAIT_IF_PENDING</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return the number of entries in the matrix</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// Pending tuples are disjoint from the zombies and the live entries in the</comment>
    <comment type="line">// matrix.  However, there can be duplicates in the pending tuples, and the</comment>
    <comment type="line">// number of duplicates has not yet been determined.  Thus, zombies can be</comment>
    <comment type="line">// tolerated but pending tuples cannot.</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_ZOMBIES_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>nvals</name><operator>)</operator> <operator>=</operator> <call><name>GB_nnz</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>nzombies</name></name><operator>)</operator></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
