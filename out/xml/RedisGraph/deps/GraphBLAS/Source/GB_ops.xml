<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_ops.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_ops.c: built-in types, functions, operators, and other externs</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// This file defines the predefined built-in types, descriptors, unary</comment>
<comment type="line">// operators, index_unary operators, binary operators, monoids, and semirings.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// compiler flags</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_COMPILER_ICC</name> <operator>||</operator> <name>GB_COMPILER_ICX</name></expr></cpp:if>
    <comment type="line">// disable icc warnings</comment>
    <comment type="line">//  144:  initialize with incompatible pointer</comment>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name> <name>(</name><name>disable</name><name>:</name> <name>144</name> <name>)</name></cpp:pragma>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_COMPILER_GCC</name></expr></cpp:elif>
    <comment type="line">// disable gcc warnings</comment>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>( <argument><expr><name>__cplusplus</name></expr></argument> )</argument_list></call></expr></cpp:if>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wincompatible-pointer-types"</cpp:literal></cpp:pragma>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_COMPILER_MSC</name></expr></cpp:elif>
    <comment type="line">// disable MS Visual Studio warnings</comment>
    <macro><name>GB_PRAGMA</name> <argument_list>(<argument>warning (disable : <literal type="number">4146</literal> )</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// built-in types</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_TYPEDEF</name><parameter_list>(<parameter><type><name>prefix</name></type></parameter>,<parameter><type><name>type</name></type></parameter>,<parameter><type><name>ctype</name></type></parameter>,<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro>                  \
    <cpp:value>struct GB_Type_opaque GB_OPAQUE (type) =                \
    {                                                       \
        GB_MAGIC, 0,                                        \
        sizeof (ctype),                                     \
        GB_ ## type ## _code,                               \
        name,                                               \
        NULL                                                \
    } ;                                                     \
    GrB_Type prefix ## _ ## type = &amp; GB_OPAQUE (type)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>GB_TYPEDEF</name> <argument_list>(<argument><expr><name>GrB</name></expr></argument>, <argument><expr><name>BOOL</name></expr></argument>  , <argument><expr><name>bool</name></expr></argument>      , <argument><expr><literal type="string">"bool"</literal></expr></argument>       )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GB_TYPEDEF</name> <argument_list>(<argument><expr><name>GrB</name></expr></argument>, <argument><expr><name>INT8</name></expr></argument>  , <argument><expr><name>int8_t</name></expr></argument>    , <argument><expr><literal type="string">"int8_t"</literal></expr></argument>     )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GB_TYPEDEF</name> <argument_list>(<argument><expr><name>GrB</name></expr></argument>, <argument><expr><name>INT16</name></expr></argument> , <argument><expr><name>int16_t</name></expr></argument>   , <argument><expr><literal type="string">"int16_t"</literal></expr></argument>    )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GB_TYPEDEF</name> <argument_list>(<argument><expr><name>GrB</name></expr></argument>, <argument><expr><name>INT32</name></expr></argument> , <argument><expr><name>int32_t</name></expr></argument>   , <argument><expr><literal type="string">"int32_t"</literal></expr></argument>    )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GB_TYPEDEF</name> <argument_list>(<argument><expr><name>GrB</name></expr></argument>, <argument><expr><name>INT64</name></expr></argument> , <argument><expr><name>int64_t</name></expr></argument>   , <argument><expr><literal type="string">"int64_t"</literal></expr></argument>    )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GB_TYPEDEF</name> <argument_list>(<argument><expr><name>GrB</name></expr></argument>, <argument><expr><name>UINT8</name></expr></argument> , <argument><expr><name>uint8_t</name></expr></argument>   , <argument><expr><literal type="string">"uint8_t"</literal></expr></argument>    )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GB_TYPEDEF</name> <argument_list>(<argument><expr><name>GrB</name></expr></argument>, <argument><expr><name>UINT16</name></expr></argument>, <argument><expr><name>uint16_t</name></expr></argument>  , <argument><expr><literal type="string">"uint16_t"</literal></expr></argument>   )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GB_TYPEDEF</name> <argument_list>(<argument><expr><name>GrB</name></expr></argument>, <argument><expr><name>UINT32</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>  , <argument><expr><literal type="string">"uint32_t"</literal></expr></argument>   )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GB_TYPEDEF</name> <argument_list>(<argument><expr><name>GrB</name></expr></argument>, <argument><expr><name>UINT64</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>  , <argument><expr><literal type="string">"uint64_t"</literal></expr></argument>   )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GB_TYPEDEF</name> <argument_list>(<argument><expr><name>GrB</name></expr></argument>, <argument><expr><name>FP32</name></expr></argument>  , <argument><expr><name>float</name></expr></argument>     , <argument><expr><literal type="string">"float"</literal></expr></argument>      )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GB_TYPEDEF</name> <argument_list>(<argument><expr><name>GrB</name></expr></argument>, <argument><expr><name>FP64</name></expr></argument>  , <argument><expr><name>double</name></expr></argument>    , <argument><expr><literal type="string">"double"</literal></expr></argument>     )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GB_TYPEDEF</name> <argument_list>(<argument><expr><name>GxB</name></expr></argument>, <argument><expr><name>FC32</name></expr></argument>  , <argument><expr><name>GxB_FC32_t</name></expr></argument>, <argument><expr><literal type="string">"GxB_FC32_t"</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GB_TYPEDEF</name> <argument_list>(<argument><expr><name>GxB</name></expr></argument>, <argument><expr><name>FC64</name></expr></argument>  , <argument><expr><name>GxB_FC64_t</name></expr></argument>, <argument><expr><literal type="string">"GxB_FC64_t"</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// built-in descriptors</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>o</name></cpp:macro> <cpp:value>((GrB_Desc_Value) GxB_DEFAULT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_DESC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>,<parameter><type><name>out</name></type></parameter>,<parameter><type><name>mask</name></type></parameter>,<parameter><type><name>in0</name></type></parameter>,<parameter><type><name>in1</name></type></parameter>)</parameter_list></cpp:macro>                                  \
    <cpp:value>struct GB_Descriptor_opaque GB_OPAQUE (desc_ ## name) =             \
    {                                                                   \
        GB_MAGIC, 0,            <comment type="block">/* initialized */</comment>                       \
        "", 0,                  <comment type="block">/* logger */</comment>                            \
        (double) GxB_DEFAULT,   <comment type="block">/* chunk */</comment>                             \
        (GrB_Desc_Value) (out),                                         \
        (GrB_Desc_Value) (mask),                                        \
        (GrB_Desc_Value) (in0),                                         \
        (GrB_Desc_Value) (in1),                                         \
        o, o,                   <comment type="block">/* default: axb, #threads */</comment>            \
        0,                      <comment type="block">/* default compression */</comment>               \
        0,                      <comment type="block">/* no sort */</comment>                           \
        0                       <comment type="block">/* import */</comment>                            \
    } ;                                                                 \
    GrB_Descriptor GRB (DESC_ ## name) = &amp; GB_OPAQUE (desc_ ## name) ;</cpp:value></cpp:define>

<comment type="line">//       name     outp         structure     complement  in0       in1</comment>

<comment type="line">// GrB_NULL     , o          , o             + o       , o       , o</comment>
<macro><name>GB_DESC</name> <argument_list>(<argument>T1</argument>     , <argument>o</argument>          , <argument>o             + o</argument>       , <argument>o</argument>       , <argument>GrB_TRAN</argument> )</argument_list></macro>
<macro><name>GB_DESC</name> <argument_list>(<argument>T0</argument>     , <argument>o</argument>          , <argument>o             + o</argument>       , <argument>GrB_TRAN</argument>, <argument>o</argument>        )</argument_list></macro>
<macro><name>GB_DESC</name> <argument_list>(<argument>T0T1</argument>   , <argument>o</argument>          , <argument>o             + o</argument>       , <argument>GrB_TRAN</argument>, <argument>GrB_TRAN</argument> )</argument_list></macro>

<macro><name>GB_DESC</name> <argument_list>(<argument>C</argument>      , <argument>o</argument>          , <argument>o             + GrB_COMP</argument>, <argument>o</argument>       , <argument>o</argument>        )</argument_list></macro>
<macro><name>GB_DESC</name> <argument_list>(<argument>CT1</argument>    , <argument>o</argument>          , <argument>o             + GrB_COMP</argument>, <argument>o</argument>       , <argument>GrB_TRAN</argument> )</argument_list></macro>
<macro><name>GB_DESC</name> <argument_list>(<argument>CT0</argument>    , <argument>o</argument>          , <argument>o             + GrB_COMP</argument>, <argument>GrB_TRAN</argument>, <argument>o</argument>        )</argument_list></macro>
<macro><name>GB_DESC</name> <argument_list>(<argument>CT0T1</argument>  , <argument>o</argument>          , <argument>o             + GrB_COMP</argument>, <argument>GrB_TRAN</argument>, <argument>GrB_TRAN</argument> )</argument_list></macro>

<macro><name>GB_DESC</name> <argument_list>(<argument>S</argument>      , <argument>o</argument>          , <argument>GrB_STRUCTURE + o</argument>       , <argument>o</argument>       , <argument>o</argument>        )</argument_list></macro>
<macro><name>GB_DESC</name> <argument_list>(<argument>ST1</argument>    , <argument>o</argument>          , <argument>GrB_STRUCTURE + o</argument>       , <argument>o</argument>       , <argument>GrB_TRAN</argument> )</argument_list></macro>
<macro><name>GB_DESC</name> <argument_list>(<argument>ST0</argument>    , <argument>o</argument>          , <argument>GrB_STRUCTURE + o</argument>       , <argument>GrB_TRAN</argument>, <argument>o</argument>        )</argument_list></macro>
<macro><name>GB_DESC</name> <argument_list>(<argument>ST0T1</argument>  , <argument>o</argument>          , <argument>GrB_STRUCTURE + o</argument>       , <argument>GrB_TRAN</argument>, <argument>GrB_TRAN</argument> )</argument_list></macro>

<macro><name>GB_DESC</name> <argument_list>(<argument>SC</argument>     , <argument>o</argument>          , <argument>GrB_STRUCTURE + GrB_COMP</argument>, <argument>o</argument>       , <argument>o</argument>        )</argument_list></macro>
<macro><name>GB_DESC</name> <argument_list>(<argument>SCT1</argument>   , <argument>o</argument>          , <argument>GrB_STRUCTURE + GrB_COMP</argument>, <argument>o</argument>       , <argument>GrB_TRAN</argument> )</argument_list></macro>
<macro><name>GB_DESC</name> <argument_list>(<argument>SCT0</argument>   , <argument>o</argument>          , <argument>GrB_STRUCTURE + GrB_COMP</argument>, <argument>GrB_TRAN</argument>, <argument>o</argument>        )</argument_list></macro>
<macro><name>GB_DESC</name> <argument_list>(<argument>SCT0T1</argument> , <argument>o</argument>          , <argument>GrB_STRUCTURE + GrB_COMP</argument>, <argument>GrB_TRAN</argument>, <argument>GrB_TRAN</argument> )</argument_list></macro>

<macro><name>GB_DESC</name> <argument_list>(<argument>R</argument>      , <argument>GrB_REPLACE</argument>, <argument>o             + o</argument>       , <argument>o</argument>       , <argument>o</argument>        )</argument_list></macro>
<macro><name>GB_DESC</name> <argument_list>(<argument>RT1</argument>    , <argument>GrB_REPLACE</argument>, <argument>o             + o</argument>       , <argument>o</argument>       , <argument>GrB_TRAN</argument> )</argument_list></macro>
<macro><name>GB_DESC</name> <argument_list>(<argument>RT0</argument>    , <argument>GrB_REPLACE</argument>, <argument>o             + o</argument>       , <argument>GrB_TRAN</argument>, <argument>o</argument>        )</argument_list></macro>
<macro><name>GB_DESC</name> <argument_list>(<argument>RT0T1</argument>  , <argument>GrB_REPLACE</argument>, <argument>o             + o</argument>       , <argument>GrB_TRAN</argument>, <argument>GrB_TRAN</argument> )</argument_list></macro>

<macro><name>GB_DESC</name> <argument_list>(<argument>RC</argument>     , <argument>GrB_REPLACE</argument>, <argument>o             + GrB_COMP</argument>, <argument>o</argument>       , <argument>o</argument>        )</argument_list></macro>
<macro><name>GB_DESC</name> <argument_list>(<argument>RCT1</argument>   , <argument>GrB_REPLACE</argument>, <argument>o             + GrB_COMP</argument>, <argument>o</argument>       , <argument>GrB_TRAN</argument> )</argument_list></macro>
<macro><name>GB_DESC</name> <argument_list>(<argument>RCT0</argument>   , <argument>GrB_REPLACE</argument>, <argument>o             + GrB_COMP</argument>, <argument>GrB_TRAN</argument>, <argument>o</argument>        )</argument_list></macro>
<macro><name>GB_DESC</name> <argument_list>(<argument>RCT0T1</argument> , <argument>GrB_REPLACE</argument>, <argument>o             + GrB_COMP</argument>, <argument>GrB_TRAN</argument>, <argument>GrB_TRAN</argument> )</argument_list></macro>

<macro><name>GB_DESC</name> <argument_list>(<argument>RS</argument>     , <argument>GrB_REPLACE</argument>, <argument>GrB_STRUCTURE + o</argument>       , <argument>o</argument>       , <argument>o</argument>        )</argument_list></macro>
<macro><name>GB_DESC</name> <argument_list>(<argument>RST1</argument>   , <argument>GrB_REPLACE</argument>, <argument>GrB_STRUCTURE + o</argument>       , <argument>o</argument>       , <argument>GrB_TRAN</argument> )</argument_list></macro>
<macro><name>GB_DESC</name> <argument_list>(<argument>RST0</argument>   , <argument>GrB_REPLACE</argument>, <argument>GrB_STRUCTURE + o</argument>       , <argument>GrB_TRAN</argument>, <argument>o</argument>        )</argument_list></macro>
<macro><name>GB_DESC</name> <argument_list>(<argument>RST0T1</argument> , <argument>GrB_REPLACE</argument>, <argument>GrB_STRUCTURE + o</argument>       , <argument>GrB_TRAN</argument>, <argument>GrB_TRAN</argument> )</argument_list></macro>

<macro><name>GB_DESC</name> <argument_list>(<argument>RSC</argument>    , <argument>GrB_REPLACE</argument>, <argument>GrB_STRUCTURE + GrB_COMP</argument>, <argument>o</argument>       , <argument>o</argument>        )</argument_list></macro>
<macro><name>GB_DESC</name> <argument_list>(<argument>RSCT1</argument>  , <argument>GrB_REPLACE</argument>, <argument>GrB_STRUCTURE + GrB_COMP</argument>, <argument>o</argument>       , <argument>GrB_TRAN</argument> )</argument_list></macro>
<macro><name>GB_DESC</name> <argument_list>(<argument>RSCT0</argument>  , <argument>GrB_REPLACE</argument>, <argument>GrB_STRUCTURE + GrB_COMP</argument>, <argument>GrB_TRAN</argument>, <argument>o</argument>        )</argument_list></macro>
<macro><name>GB_DESC</name> <argument_list>(<argument>RSCT0T1</argument>, <argument>GrB_REPLACE</argument>, <argument>GrB_STRUCTURE + GrB_COMP</argument>, <argument>GrB_TRAN</argument>, <argument>GrB_TRAN</argument> )</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>o</name></cpp:undef>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_OP: construct the name of an operator</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_OP</name><parameter_list>(<parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GB_EVAL3 (op, _, GB_XTYPE)</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// helper macros to define unary operators</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_OP1zx</name><parameter_list>(<parameter><type><name>op</name></type></parameter>,<parameter><type><name>str</name></type></parameter>,<parameter><type><name>z_t</name></type></parameter>,<parameter><type><name>ztype</name></type></parameter>,<parameter><type><name>x_t</name></type></parameter>,<parameter><type><name>xtype</name></type></parameter>)</parameter_list></cpp:macro>                                \
    <cpp:value>extern void GB_FUNC_T (op, xtype) (z_t *z, const x_t *x) ;              \
    struct GB_UnaryOp_opaque GB_OPAQUE (GB_OP (op)) =                       \
    {                                                                       \
        GB_MAGIC, 0,                                                        \
        &amp; GB_OPAQUE (ztype),                                                \
        &amp; GB_OPAQUE (xtype),                                                \
        NULL,                                                               \
        (GxB_unary_function) (&amp; GB_FUNC_T (op, xtype)), NULL, NULL, NULL,   \
        str,                                                                \
        GB_ ## op ## _unop_code,                                            \
        NULL, 0                                                             \
    }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRB_OP1z</name><parameter_list>(<parameter><type><name>op</name></type></parameter>,<parameter><type><name>str</name></type></parameter>,<parameter><type><name>z_t</name></type></parameter>,<parameter><type><name>ztype</name></type></parameter>)</parameter_list></cpp:macro>                                          \
    <cpp:value>GB_OP1zx (op, str, z_t, ztype, GB_TYPE, GB_XTYPE) ;                     \
    GrB_UnaryOp GRB (GB_OP (op)) = &amp; GB_OPAQUE (GB_OP (op))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRB_OP1</name><parameter_list>(<parameter><type><name>op</name></type></parameter>,<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GRB_OP1z (op, str, GB_TYPE, GB_XTYPE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GXB_OP1z</name><parameter_list>(<parameter><type><name>op</name></type></parameter>,<parameter><type><name>str</name></type></parameter>,<parameter><type><name>z_t</name></type></parameter>,<parameter><type><name>ztype</name></type></parameter>)</parameter_list></cpp:macro>                                          \
    <cpp:value>GB_OP1zx (op, str, z_t, ztype, GB_TYPE, GB_XTYPE) ;                     \
    GrB_UnaryOp GXB (GB_OP (op)) = &amp; GB_OPAQUE (GB_OP (op))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GXB_OP1</name><parameter_list>(<parameter><type><name>op</name></type></parameter>,<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GXB_OP1z (op, str, GB_TYPE, GB_XTYPE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GXB_OP1_RENAME</name><parameter_list>(<parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro>                                                  \
    <cpp:value>GrB_UnaryOp GXB (GB_OP (op)) = &amp; GB_OPAQUE (GB_OP (op))</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// helper macros to define binary operators</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_OP2zxy</name><parameter_list>(<parameter><type><name>op</name></type></parameter>,<parameter><type><name>str</name></type></parameter>,<parameter><type><name>z_t</name></type></parameter>,<parameter><type><name>ztype</name></type></parameter>,<parameter><type><name>x_t</name></type></parameter>,<parameter><type><name>xtype</name></type></parameter>,<parameter><type><name>y_t</name></type></parameter>,<parameter><type><name>ytype</name></type></parameter>)</parameter_list></cpp:macro>                     \
    <cpp:value>extern void GB_FUNC_T(op,xtype) (z_t *z, const x_t *x, const y_t *y) ;  \
    struct GB_BinaryOp_opaque GB_OPAQUE (GB_OP (op)) =                      \
    {                                                                       \
        GB_MAGIC, 0,                                                        \
        &amp; GB_OPAQUE (ztype),                                                \
        &amp; GB_OPAQUE (xtype),                                                \
        &amp; GB_OPAQUE (ytype),                                                \
        NULL, NULL, (GxB_binary_function) (&amp; GB_FUNC_T (op, xtype)), NULL,  \
        str,                                                                \
        GB_ ## op ## _binop_code,                                           \
        NULL, 0                                                             \
    }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRB_OP2z</name><parameter_list>(<parameter><type><name>op</name></type></parameter>,<parameter><type><name>str</name></type></parameter>,<parameter><type><name>z_t</name></type></parameter>,<parameter><type><name>ztype</name></type></parameter>)</parameter_list></cpp:macro>                                          \
    <cpp:value>GB_OP2zxy (op, str, z_t, ztype, GB_TYPE, GB_XTYPE, GB_TYPE, GB_XTYPE) ; \
    GrB_BinaryOp GRB (GB_OP (op)) = &amp; GB_OPAQUE (GB_OP (op))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRB_OP2</name><parameter_list>(<parameter><type><name>op</name></type></parameter>,<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GRB_OP2z (op, str, GB_TYPE, GB_XTYPE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GXB_OP2z</name><parameter_list>(<parameter><type><name>op</name></type></parameter>,<parameter><type><name>str</name></type></parameter>,<parameter><type><name>z_t</name></type></parameter>,<parameter><type><name>ztype</name></type></parameter>)</parameter_list></cpp:macro>                                          \
    <cpp:value>GB_OP2zxy (op, str, z_t, ztype, GB_TYPE, GB_XTYPE, GB_TYPE, GB_XTYPE) ; \
    GrB_BinaryOp GXB (GB_OP (op)) = &amp; GB_OPAQUE (GB_OP (op))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GXB_OP2</name><parameter_list>(<parameter><type><name>op</name></type></parameter>,<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GXB_OP2z (op, str, GB_TYPE, GB_XTYPE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GXB_OP2shift</name><parameter_list>(<parameter><type><name>op</name></type></parameter>,<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>GB_OP2zxy (op, str, GB_TYPE, GB_XTYPE, GB_TYPE, GB_XTYPE, int8_t, INT8) ; \
    GrB_BinaryOp GXB (GB_OP (op)) = &amp; GB_OPAQUE (GB_OP (op))</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// positional unary and binary operators</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// The function pointer inside a positional operator cannot be called directly,</comment>
<comment type="line">// since it does not depend on the values of its two arguments.  The operator</comment>
<comment type="line">// can only be implemented via its opcode.</comment>

<comment type="line">// helper macros to define positional unary operators</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GXB_OP1_POS</name><parameter_list>(<parameter><type><name>op</name></type></parameter>,<parameter><type><name>str</name></type></parameter>,<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro>                                            \
    <cpp:value>struct GB_UnaryOp_opaque GB_OPAQUE (op ## _ ## type) =                  \
    {                                                                       \
        GB_MAGIC, 0,                                                        \
        &amp; GB_OPAQUE (type),     <comment type="block">/* ztype */</comment>                                 \
        &amp; GB_OPAQUE (type),     <comment type="block">/* xtype */</comment>                                 \
        NULL,                   <comment type="block">/* ytype */</comment>                                 \
        NULL, NULL, NULL, NULL,                                             \
        str,                                                                \
        GB_ ## op ## _unop_code,                                            \
        NULL, 0                                                             \
    } ;                                                                     \
    GrB_UnaryOp GXB (op ## _ ## type) = &amp; GB_OPAQUE (op ## _ ## type)</cpp:value></cpp:define>

<comment type="line">// helper macros to define positional binary operators</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GXB_OP2_POS</name><parameter_list>(<parameter><type><name>op</name></type></parameter>,<parameter><type><name>str</name></type></parameter>,<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro>                                            \
    <cpp:value>struct GB_BinaryOp_opaque GB_OPAQUE (op ## _ ## type) =                 \
    {                                                                       \
        GB_MAGIC, 0,                                                        \
        &amp; GB_OPAQUE (type),     <comment type="block">/* ztype */</comment>                                 \
        &amp; GB_OPAQUE (type),     <comment type="block">/* xtype */</comment>                                 \
        &amp; GB_OPAQUE (type),     <comment type="block">/* ytype */</comment>                                 \
        NULL, NULL, NULL, NULL,                                             \
        str,                                                                \
        GB_ ## op ## _binop_code,                                           \
        NULL, 0                                                             \
    } ;                                                                     \
    GrB_BinaryOp GXB (op ## _ ## type) = &amp; GB_OPAQUE (op ## _ ## type)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>GXB_OP1_POS</name> <argument_list>(<argument><expr><name>POSITIONI</name></expr></argument> , <argument><expr><literal type="string">"positioni"</literal></expr></argument> , <argument><expr><name>INT32</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GXB_OP1_POS</name> <argument_list>(<argument><expr><name>POSITIONI</name></expr></argument> , <argument><expr><literal type="string">"positioni"</literal></expr></argument> , <argument><expr><name>INT64</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GXB_OP1_POS</name> <argument_list>(<argument><expr><name>POSITIONI1</name></expr></argument>, <argument><expr><literal type="string">"positioni1"</literal></expr></argument>, <argument><expr><name>INT32</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GXB_OP1_POS</name> <argument_list>(<argument><expr><name>POSITIONI1</name></expr></argument>, <argument><expr><literal type="string">"positioni1"</literal></expr></argument>, <argument><expr><name>INT64</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GXB_OP1_POS</name> <argument_list>(<argument><expr><name>POSITIONJ</name></expr></argument> , <argument><expr><literal type="string">"positionj"</literal></expr></argument> , <argument><expr><name>INT32</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GXB_OP1_POS</name> <argument_list>(<argument><expr><name>POSITIONJ</name></expr></argument> , <argument><expr><literal type="string">"positionj"</literal></expr></argument> , <argument><expr><name>INT64</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GXB_OP1_POS</name> <argument_list>(<argument><expr><name>POSITIONJ1</name></expr></argument>, <argument><expr><literal type="string">"positionj1"</literal></expr></argument>, <argument><expr><name>INT32</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GXB_OP1_POS</name> <argument_list>(<argument><expr><name>POSITIONJ1</name></expr></argument>, <argument><expr><literal type="string">"positionj1"</literal></expr></argument>, <argument><expr><name>INT64</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

<expr_stmt><expr><call><name>GXB_OP2_POS</name> <argument_list>(<argument><expr><name>FIRSTI</name></expr></argument>    , <argument><expr><literal type="string">"firsti"</literal></expr></argument>    , <argument><expr><name>INT32</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GXB_OP2_POS</name> <argument_list>(<argument><expr><name>FIRSTI</name></expr></argument>    , <argument><expr><literal type="string">"firsti"</literal></expr></argument>    , <argument><expr><name>INT64</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GXB_OP2_POS</name> <argument_list>(<argument><expr><name>FIRSTI1</name></expr></argument>   , <argument><expr><literal type="string">"firsti1"</literal></expr></argument>   , <argument><expr><name>INT32</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GXB_OP2_POS</name> <argument_list>(<argument><expr><name>FIRSTI1</name></expr></argument>   , <argument><expr><literal type="string">"firsti1"</literal></expr></argument>   , <argument><expr><name>INT64</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GXB_OP2_POS</name> <argument_list>(<argument><expr><name>FIRSTJ</name></expr></argument>    , <argument><expr><literal type="string">"firstj"</literal></expr></argument>    , <argument><expr><name>INT32</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GXB_OP2_POS</name> <argument_list>(<argument><expr><name>FIRSTJ</name></expr></argument>    , <argument><expr><literal type="string">"firstj"</literal></expr></argument>    , <argument><expr><name>INT64</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GXB_OP2_POS</name> <argument_list>(<argument><expr><name>FIRSTJ1</name></expr></argument>   , <argument><expr><literal type="string">"firstj1"</literal></expr></argument>   , <argument><expr><name>INT32</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GXB_OP2_POS</name> <argument_list>(<argument><expr><name>FIRSTJ1</name></expr></argument>   , <argument><expr><literal type="string">"firstj1"</literal></expr></argument>   , <argument><expr><name>INT64</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

<expr_stmt><expr><call><name>GXB_OP2_POS</name> <argument_list>(<argument><expr><name>SECONDI</name></expr></argument>   , <argument><expr><literal type="string">"secondi"</literal></expr></argument>   , <argument><expr><name>INT32</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GXB_OP2_POS</name> <argument_list>(<argument><expr><name>SECONDI</name></expr></argument>   , <argument><expr><literal type="string">"secondi"</literal></expr></argument>   , <argument><expr><name>INT64</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GXB_OP2_POS</name> <argument_list>(<argument><expr><name>SECONDI1</name></expr></argument>  , <argument><expr><literal type="string">"secondi1"</literal></expr></argument>  , <argument><expr><name>INT32</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GXB_OP2_POS</name> <argument_list>(<argument><expr><name>SECONDI1</name></expr></argument>  , <argument><expr><literal type="string">"secondi1"</literal></expr></argument>  , <argument><expr><name>INT64</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GXB_OP2_POS</name> <argument_list>(<argument><expr><name>SECONDJ</name></expr></argument>   , <argument><expr><literal type="string">"secondj"</literal></expr></argument>   , <argument><expr><name>INT32</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GXB_OP2_POS</name> <argument_list>(<argument><expr><name>SECONDJ</name></expr></argument>   , <argument><expr><literal type="string">"secondj"</literal></expr></argument>   , <argument><expr><name>INT64</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GXB_OP2_POS</name> <argument_list>(<argument><expr><name>SECONDJ1</name></expr></argument>  , <argument><expr><literal type="string">"secondj1"</literal></expr></argument>  , <argument><expr><name>INT32</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GXB_OP2_POS</name> <argument_list>(<argument><expr><name>SECONDJ1</name></expr></argument>  , <argument><expr><literal type="string">"secondj1"</literal></expr></argument>  , <argument><expr><name>INT64</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// built-in index_unary operators</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// IndexUnaryOps that depend on i,j,y but not A(i,j), and result has</comment>
<comment type="line">// the same type as the scalar y: ROWINDEX, COLINDEX, DIAGINDEX</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRB_IDXOP_POSITIONAL</name><parameter_list>(<parameter><type><name>op</name></type></parameter>,<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro>                                        \
    <cpp:value>extern void GB_FUNC_T(op,GB_XTYPE) (GB_TYPE *z, const void *unused,     \
        GrB_Index i, GrB_Index j, const GB_TYPE *y) ;                       \
    struct GB_IndexUnaryOp_opaque GB_OPAQUE (GB_OP (op)) =                  \
    {                                                                       \
        GB_MAGIC, 0,                                                        \
        &amp; GB_OPAQUE (GB_XTYPE), <comment type="block">/* ztype */</comment>                                 \
        NULL,                   <comment type="block">/* xtype */</comment>                                 \
        &amp; GB_OPAQUE (GB_XTYPE), <comment type="block">/* ytype */</comment>                                 \
        NULL, (GxB_index_unary_function) (&amp; GB_FUNC_T (op, GB_XTYPE)),      \
            NULL, NULL,                                                     \
        str,                                                                \
        GB_ ## op ## _idxunop_code,                                         \
        NULL, 0                                                             \
    } ;                                                                     \
    GrB_IndexUnaryOp GRB (GB_OP (op)) = &amp; GB_OPAQUE (GB_OP (op))</cpp:value></cpp:define>

<comment type="line">// GxB_IndexUnaryOps that depend on i,j,y but not A(i,j), and result has</comment>
<comment type="line">// the same type as the scalar y: FLIPDIAGINDEX</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GXB_IDXOP_POSITIONAL</name><parameter_list>(<parameter><type><name>op</name></type></parameter>,<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro>                                        \
    <cpp:value>extern void GB_FUNC_T(op,GB_XTYPE) (GB_TYPE *z, const void *unused,     \
        GrB_Index i, GrB_Index j, const GB_TYPE *y) ;                       \
    struct GB_IndexUnaryOp_opaque GB_OPAQUE (GB_OP (op)) =                  \
    {                                                                       \
        GB_MAGIC, 0,                                                        \
        &amp; GB_OPAQUE (GB_XTYPE), <comment type="block">/* ztype */</comment>                                 \
        NULL,                   <comment type="block">/* xtype */</comment>                                 \
        &amp; GB_OPAQUE (GB_XTYPE), <comment type="block">/* ytype */</comment>                                 \
        NULL, (GxB_index_unary_function) (&amp; GB_FUNC_T (op, GB_XTYPE)),      \
            NULL, NULL,                                                     \
        str,                                                                \
        GB_ ## op ## _idxunop_code,                                         \
        NULL, 0                                                             \
    } ;                                                                     \
    GrB_IndexUnaryOp GXB (GB_OP (op)) = &amp; GB_OPAQUE (GB_OP (op))</cpp:value></cpp:define>

<comment type="line">// IndexUnaryOps that depend on i,j, and y but not A(i,j), and result is</comment>
<comment type="line">// bool: TRIL, TRIU, DIAG, OFFDIAG, COLLE, COLGT, ROWLE, ROWGT</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRB_IDXOP_POSITIONAL_BOOL</name><parameter_list>(<parameter><type><name>op</name></type></parameter>,<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro>                                   \
    <cpp:value>extern void GB_FUNC_T(op,GB_XTYPE) (bool *z, const void *unused,        \
        GrB_Index i, GrB_Index j, const GB_TYPE *y) ;                       \
    struct GB_IndexUnaryOp_opaque GB_OPAQUE (GB_OP (op)) =                  \
    {                                                                       \
        GB_MAGIC, 0,                                                        \
        &amp; GB_OPAQUE (BOOL),     <comment type="block">/* ztype */</comment>                                 \
        NULL,                   <comment type="block">/* xtype */</comment>                                 \
        &amp; GB_OPAQUE (GB_XTYPE), <comment type="block">/* ytype */</comment>                                 \
        NULL, (GxB_index_unary_function) (&amp; GB_FUNC_T (op, GB_XTYPE)),      \
            NULL, NULL,                                                     \
        str,                                                                \
        GB_ ## op ## _idxunop_code,                                         \
        NULL, 0                                                             \
    } ;                                                                     \
    GrB_IndexUnaryOp GRB (op) = &amp; GB_OPAQUE (GB_OP (op))</cpp:value></cpp:define>

<comment type="line">// GrB_IndexUnaryOps that depend on A(i,j), and result is bool: VALUE* ops</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRB_IDXOP_VALUE</name><parameter_list>(<parameter><type><name>op</name></type></parameter>,<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro>                                             \
    <cpp:value>extern void GB_FUNC_T(op,GB_XTYPE) (bool *z, const GB_TYPE *x,          \
        GrB_Index i_unused, GrB_Index j_unused, const GB_TYPE *y) ;         \
    struct GB_IndexUnaryOp_opaque GB_OPAQUE (GB_OP (op)) =                  \
    {                                                                       \
        GB_MAGIC, 0,                                                        \
        &amp; GB_OPAQUE (BOOL),     <comment type="block">/* ztype */</comment>                                 \
        &amp; GB_OPAQUE (GB_XTYPE), <comment type="block">/* xtype */</comment>                                 \
        &amp; GB_OPAQUE (GB_XTYPE), <comment type="block">/* ytype */</comment>                                 \
        NULL, (GxB_index_unary_function) (&amp; GB_FUNC_T (op, GB_XTYPE)),      \
            NULL, NULL,                                                     \
        str,                                                                \
        GB_ ## op ## _idxunop_code,                                         \
        NULL, 0                                                             \
    } ;                                                                     \
    GrB_IndexUnaryOp GRB (GB_OP (op)) = &amp; GB_OPAQUE (GB_OP (op))</cpp:value></cpp:define>

<comment type="line">// GrB_IndexUnaryOps that depend on A(i,j), result is bool: VALUE* complex ops</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GXB_IDXOP_VALUE</name><parameter_list>(<parameter><type><name>op</name></type></parameter>,<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro>                                             \
    <cpp:value>extern void GB_FUNC_T(op,GB_XTYPE) (bool *z, const GB_TYPE *x,          \
        GrB_Index i_unused, GrB_Index j_unused, const GB_TYPE *y) ;         \
    struct GB_IndexUnaryOp_opaque GB_OPAQUE (GB_OP (op)) =                  \
    {                                                                       \
        GB_MAGIC, 0,                                                        \
        &amp; GB_OPAQUE (BOOL),     <comment type="block">/* ztype */</comment>                                 \
        &amp; GB_OPAQUE (GB_XTYPE), <comment type="block">/* xtype */</comment>                                 \
        &amp; GB_OPAQUE (GB_XTYPE), <comment type="block">/* ytype */</comment>                                 \
        NULL, (GxB_index_unary_function) (&amp; GB_FUNC_T (op, GB_XTYPE)),      \
            NULL, NULL,                                                     \
        str,                                                                \
        GB_ ## op ## _idxunop_code,                                         \
        NULL, 0                                                             \
    } ;                                                                     \
    GrB_IndexUnaryOp GXB (GB_OP (op)) = &amp; GB_OPAQUE (GB_OP (op))</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// built-in select operators</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GXB_SEL</name><parameter_list>(<parameter><type><name>op</name></type></parameter>,<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro>                                                     \
    <cpp:value>struct GB_SelectOp_opaque GB_OPAQUE (op) =                              \
    {                                                                       \
        GB_MAGIC, 0,                                                        \
        &amp; GB_OPAQUE (BOOL),     <comment type="block">/* ztype */</comment>                                 \
        NULL,                   <comment type="block">/* xtype */</comment>                                 \
        NULL,                   <comment type="block">/* thunk type for GxB_SelectOp */</comment>           \
        NULL, NULL, NULL, NULL,                                             \
        str,                                                                \
        GB_ ## op ## _selop_code,                                           \
        NULL, 0                                                             \
    } ;                                                                     \
    GxB_SelectOp GXB (op) = &amp; GB_OPAQUE (op)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>GXB_SEL</name> <argument_list>(<argument><expr><name>TRIL</name></expr></argument>     , <argument><expr><literal type="string">"tril"</literal></expr></argument>    )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GXB_SEL</name> <argument_list>(<argument><expr><name>TRIU</name></expr></argument>     , <argument><expr><literal type="string">"triu"</literal></expr></argument>    )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GXB_SEL</name> <argument_list>(<argument><expr><name>DIAG</name></expr></argument>     , <argument><expr><literal type="string">"diag"</literal></expr></argument>    )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GXB_SEL</name> <argument_list>(<argument><expr><name>OFFDIAG</name></expr></argument>  , <argument><expr><literal type="string">"offdiag"</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt>

<expr_stmt><expr><call><name>GXB_SEL</name> <argument_list>(<argument><expr><name>NONZERO</name></expr></argument>  , <argument><expr><literal type="string">"nonzero"</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GXB_SEL</name> <argument_list>(<argument><expr><name>EQ_ZERO</name></expr></argument>  , <argument><expr><literal type="string">"eq_zero"</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GXB_SEL</name> <argument_list>(<argument><expr><name>GT_ZERO</name></expr></argument>  , <argument><expr><literal type="string">"gt_zero"</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GXB_SEL</name> <argument_list>(<argument><expr><name>GE_ZERO</name></expr></argument>  , <argument><expr><literal type="string">"ge_zero"</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GXB_SEL</name> <argument_list>(<argument><expr><name>LT_ZERO</name></expr></argument>  , <argument><expr><literal type="string">"lt_zero"</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GXB_SEL</name> <argument_list>(<argument><expr><name>LE_ZERO</name></expr></argument>  , <argument><expr><literal type="string">"le_zero"</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt>

<expr_stmt><expr><call><name>GXB_SEL</name> <argument_list>(<argument><expr><name>NE_THUNK</name></expr></argument> , <argument><expr><literal type="string">"ne_thunk"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GXB_SEL</name> <argument_list>(<argument><expr><name>EQ_THUNK</name></expr></argument> , <argument><expr><literal type="string">"eq_thunk"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GXB_SEL</name> <argument_list>(<argument><expr><name>GT_THUNK</name></expr></argument> , <argument><expr><literal type="string">"gt_thunk"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GXB_SEL</name> <argument_list>(<argument><expr><name>GE_THUNK</name></expr></argument> , <argument><expr><literal type="string">"ge_thunk"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GXB_SEL</name> <argument_list>(<argument><expr><name>LT_THUNK</name></expr></argument> , <argument><expr><literal type="string">"lt_thunk"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>GXB_SEL</name> <argument_list>(<argument><expr><name>LE_THUNK</name></expr></argument> , <argument><expr><literal type="string">"le_thunk"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// define all built-in operators</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_TYPE</name></cpp:macro>             <cpp:value>bool</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro>            <cpp:value>BOOL</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_ops_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_TYPE</name></cpp:macro>             <cpp:value>int8_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro>            <cpp:value>INT8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_SIGNED_INT</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_ops_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_TYPE</name></cpp:macro>             <cpp:value>uint8_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro>            <cpp:value>UINT8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_UNSIGNED_INT</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_ops_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_TYPE</name></cpp:macro>             <cpp:value>int16_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro>            <cpp:value>INT16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_SIGNED_INT</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_ops_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_TYPE</name></cpp:macro>             <cpp:value>uint16_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro>            <cpp:value>UINT16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_UNSIGNED_INT</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_ops_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_TYPE</name></cpp:macro>             <cpp:value>int32_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro>            <cpp:value>INT32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_SIGNED_INT</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_SIGNED_INDEX</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_ops_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_TYPE</name></cpp:macro>             <cpp:value>uint32_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro>            <cpp:value>UINT32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_UNSIGNED_INT</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_ops_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_TYPE</name></cpp:macro>             <cpp:value>int64_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro>            <cpp:value>INT64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_SIGNED_INT</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_SIGNED_INDEX</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_SIGNED_INDEX64</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_ops_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_TYPE</name></cpp:macro>             <cpp:value>uint64_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro>            <cpp:value>UINT64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_UNSIGNED_INT</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_ops_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_TYPE</name></cpp:macro>             <cpp:value>float</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro>            <cpp:value>FP32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FLOAT</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FLOATING_POINT</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_ops_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_TYPE</name></cpp:macro>             <cpp:value>double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro>            <cpp:value>FP64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_DOUBLE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FLOATING_POINT</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_ops_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_TYPE</name></cpp:macro>             <cpp:value>GxB_FC32_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro>            <cpp:value>FC32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FLOAT_COMPLEX</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COMPLEX</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FLOATING_POINT</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_ops_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_TYPE</name></cpp:macro>             <cpp:value>GxB_FC64_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro>            <cpp:value>FC64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_DOUBLE_COMPLEX</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COMPLEX</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FLOATING_POINT</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_ops_template.c"</cpp:file></cpp:include>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// special cases for functions and operators</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// 5 special cases:</comment>
<comment type="line">// purely boolean operators: these do not have _BOOL in their name</comment>
<comment type="line">// They are not created by the templates above.</comment>
<decl_stmt><decl><type><name>GrB_UnaryOp</name></type>  <name>GrB_LNOT</name>  <init>= <expr><operator>&amp;</operator> <call><name>GB_OPAQUE</name> <argument_list>(<argument><expr><name>LNOT_BOOL</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>GrB_LOR</name>   <init>= <expr><operator>&amp;</operator> <call><name>GB_OPAQUE</name> <argument_list>(<argument><expr><name>LOR_BOOL</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>GrB_LAND</name>  <init>= <expr><operator>&amp;</operator> <call><name>GB_OPAQUE</name> <argument_list>(<argument><expr><name>LAND_BOOL</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>GrB_LXOR</name>  <init>= <expr><operator>&amp;</operator> <call><name>GB_OPAQUE</name> <argument_list>(<argument><expr><name>LXOR_BOOL</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>GrB_LXNOR</name> <init>= <expr><operator>&amp;</operator> <call><name>GB_OPAQUE</name> <argument_list>(<argument><expr><name>EQ_BOOL</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

<comment type="line">// Special case for GrB_Matrix_build and GrB_Vector_build:  this operator is</comment>
<comment type="line">// not valid to use in any other methods.</comment>
<function_decl><type><name><name>struct</name> <name>GB_BinaryOp_opaque</name></name></type> <name>GB_OPAQUE</name> <parameter_list>(<parameter><decl><type><name>IGNORE_DUP</name></type></decl></parameter>)</parameter_list> <init>=
<expr><block>{
    <expr><name>GB_MAGIC2</name></expr></block></expr></init><operator>,</operator> 0<operator>,</operator>
    NULL<operator>,</operator> NULL<operator>,</operator> NULL<operator>,</operator>
    NULL<operator>,</operator> NULL<operator>,</operator> NULL<operator>,</operator> NULL<operator>,</operator>
    "ignore_dup"<operator>,</operator> GB_NOP_code<operator>,</operator> NULL<operator>,</operator> 0</function_decl>
} ;
<decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>GxB_IGNORE_DUP</name> <init>= <expr><operator>&amp;</operator> <call><name>GB_OPAQUE</name> <argument_list>(<argument><expr><name>IGNORE_DUP</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

<comment type="line">// GrB_ONEB_T: identical to GxB_PAIR_T</comment>
<decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>GrB_ONEB_BOOL</name>   <init>= <expr><operator>&amp;</operator> <call><name>GB_OPAQUE</name> <argument_list>(<argument><expr><name>PAIR_BOOL</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>GrB_ONEB_INT8</name>   <init>= <expr><operator>&amp;</operator> <call><name>GB_OPAQUE</name> <argument_list>(<argument><expr><name>PAIR_INT8</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>GrB_ONEB_INT16</name>  <init>= <expr><operator>&amp;</operator> <call><name>GB_OPAQUE</name> <argument_list>(<argument><expr><name>PAIR_INT16</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>GrB_ONEB_INT32</name>  <init>= <expr><operator>&amp;</operator> <call><name>GB_OPAQUE</name> <argument_list>(<argument><expr><name>PAIR_INT32</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>GrB_ONEB_INT64</name>  <init>= <expr><operator>&amp;</operator> <call><name>GB_OPAQUE</name> <argument_list>(<argument><expr><name>PAIR_INT64</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>GrB_ONEB_UINT8</name>  <init>= <expr><operator>&amp;</operator> <call><name>GB_OPAQUE</name> <argument_list>(<argument><expr><name>PAIR_UINT8</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>GrB_ONEB_UINT16</name> <init>= <expr><operator>&amp;</operator> <call><name>GB_OPAQUE</name> <argument_list>(<argument><expr><name>PAIR_UINT16</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>GrB_ONEB_UINT32</name> <init>= <expr><operator>&amp;</operator> <call><name>GB_OPAQUE</name> <argument_list>(<argument><expr><name>PAIR_UINT32</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>GrB_ONEB_UINT64</name> <init>= <expr><operator>&amp;</operator> <call><name>GB_OPAQUE</name> <argument_list>(<argument><expr><name>PAIR_UINT64</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>GrB_ONEB_FP32</name>   <init>= <expr><operator>&amp;</operator> <call><name>GB_OPAQUE</name> <argument_list>(<argument><expr><name>PAIR_FP32</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>GrB_ONEB_FP64</name>   <init>= <expr><operator>&amp;</operator> <call><name>GB_OPAQUE</name> <argument_list>(<argument><expr><name>PAIR_FP64</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>GxB_ONEB_FC32</name>   <init>= <expr><operator>&amp;</operator> <call><name>GB_OPAQUE</name> <argument_list>(<argument><expr><name>PAIR_FC32</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>GxB_ONEB_FC64</name>   <init>= <expr><operator>&amp;</operator> <call><name>GB_OPAQUE</name> <argument_list>(<argument><expr><name>PAIR_FC64</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_ALL</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// The GrB_ALL pointer is never dereferenced.  It is passed in as an argument to</comment>
<comment type="line">// indicate that all indices are to be used, as in the colon in C = A(:,j).</comment>

<function_decl><type><name>GrB_Index</name></type> <name>GB_OPAQUE</name> <parameter_list>(<parameter><decl><type><name>ALL</name></type></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init> ;</function_decl>
<decl_stmt><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>GrB_ALL</name> <init>= <expr><operator>&amp;</operator> <call><name>GB_OPAQUE</name> <argument_list>(<argument><expr><name>ALL</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

<comment type="line">// the default hyper_switch is defined in GB_defaults.h</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>GxB_HYPER_DEFAULT</name> <init>= <expr><name>GB_HYPER_SWITCH_DEFAULT</name></expr></init></decl> ;</decl_stmt>

<comment type="line">// set GxB_HYPER_SWITCH to either of these to ensure matrix is always, or never,</comment>
<comment type="line">// stored in hypersparse format, respectively.</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>GxB_ALWAYS_HYPER</name> <init>= <expr><name>GB_ALWAYS_HYPER</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>GxB_NEVER_HYPER</name>  <init>= <expr><name>GB_NEVER_HYPER</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GxB_Format_Value</name></type> <name>GxB_FORMAT_DEFAULT</name> <init>= <expr><name>GxB_BY_ROW</name></expr></init></decl> ;</decl_stmt>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// predefined built-in monoids</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_COMPILER_MSC</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FC32_ONE</name></cpp:macro>  <cpp:value>{1.0f, 0.0f}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FC64_ONE</name></cpp:macro>  <cpp:value>{1.0 , 0.0 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FC32_ZERO</name></cpp:macro> <cpp:value>{0.0f, 0.0f}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FC64_ZERO</name></cpp:macro> <cpp:value>{0.0 , 0.0 }</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FC32_ONE</name></cpp:macro>  <cpp:value>GxB_CMPLXF (1,0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FC64_ONE</name></cpp:macro>  <cpp:value>GxB_CMPLX  (1,0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FC32_ZERO</name></cpp:macro> <cpp:value>GxB_CMPLXF (0,0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FC64_ZERO</name></cpp:macro> <cpp:value>GxB_CMPLX  (0,0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">// helper macro to define built-in monoids (no terminal value)</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MONOID_DEF</name><parameter_list>(<parameter><type><name>op</name></type></parameter>,<parameter><type><name>ztype</name></type></parameter>,<parameter><type><name>identity</name></type></parameter>)</parameter_list></cpp:macro>                                    \
    <cpp:value>ztype GB_OPAQUE (GB_EVAL2 (identity_, op)) = identity ;                 \
    struct GB_Monoid_opaque GB_OPAQUE (GB_EVAL2 (op, _MONOID)) =            \
    {                                                                       \
        GB_MAGIC, 0,                                                        \
        &amp; GB_OPAQUE (op),                                                   \
        &amp; GB_OPAQUE (GB_EVAL2 (identity_, op)),                             \
        NULL,                                                               \
        0, 0                                                                \
    } ;                                                                     \
    GrB_Monoid GXB (GB_EVAL2 (op, _MONOID)) =                               \
        &amp; GB_OPAQUE (GB_EVAL2 (op, _MONOID)) ;</cpp:value></cpp:define>

<comment type="line">// helper macro to define built-in monoids (with terminal value)</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MONOID_DEFT</name><parameter_list>(<parameter><type><name>op</name></type></parameter>,<parameter><type><name>ztype</name></type></parameter>,<parameter><type><name>identity</name></type></parameter>,<parameter><type><name>terminal</name></type></parameter>)</parameter_list></cpp:macro>                          \
    <cpp:value>ztype GB_OPAQUE (GB_EVAL2 (identity_, op)) = identity ;                 \
    ztype GB_OPAQUE (GB_EVAL2 (terminal_, op)) = terminal ;                 \
    struct GB_Monoid_opaque GB_OPAQUE (GB_EVAL2 (op, _MONOID)) =            \
    {                                                                       \
        GB_MAGIC, 0,                                                        \
        &amp; GB_OPAQUE (op),                                                   \
        &amp; GB_OPAQUE (GB_EVAL2 (identity_, op)),                             \
        &amp; GB_OPAQUE (GB_EVAL2 (terminal_, op)),                             \
        0, 0                                                                \
    } ;                                                                     \
    GrB_Monoid GXB (GB_EVAL2 (op, _MONOID)) =                               \
        &amp; GB_OPAQUE (GB_EVAL2 (op, _MONOID)) ;</cpp:value></cpp:define>

<comment type="line">// macro to construct GrB_* monoids in the updated specification</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MONOID_GRB</name><parameter_list>(<parameter><type><name>op</name></type></parameter>,<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro>                                              \
<cpp:value>GrB_Monoid GRB (GB_EVAL3 (op, _MONOID_, type)) =                            \
    &amp; GB_OPAQUE (GB_EVAL4 (op, _, type, _MONOID)) ;</cpp:value></cpp:define>

<comment type="line">// MIN monoids:</comment>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>MIN_INT8</argument>     , <argument>int8_t</argument>    , <argument>INT8_MAX</argument>    , <argument>INT8_MIN</argument>  )</argument_list></macro>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>MIN_INT16</argument>    , <argument>int16_t</argument>   , <argument>INT16_MAX</argument>   , <argument>INT16_MIN</argument> )</argument_list></macro>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>MIN_INT32</argument>    , <argument>int32_t</argument>   , <argument>INT32_MAX</argument>   , <argument>INT32_MIN</argument> )</argument_list></macro>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>MIN_INT64</argument>    , <argument>int64_t</argument>   , <argument>INT64_MAX</argument>   , <argument>INT64_MIN</argument> )</argument_list></macro>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>MIN_UINT8</argument>    , <argument>uint8_t</argument>   , <argument>UINT8_MAX</argument>   , <argument><literal type="number">0</literal></argument>         )</argument_list></macro>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>MIN_UINT16</argument>   , <argument>uint16_t</argument>  , <argument>UINT16_MAX</argument>  , <argument><literal type="number">0</literal></argument>         )</argument_list></macro>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>MIN_UINT32</argument>   , <argument>uint32_t</argument>  , <argument>UINT32_MAX</argument>  , <argument><literal type="number">0</literal></argument>         )</argument_list></macro>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>MIN_UINT64</argument>   , <argument>uint64_t</argument>  , <argument>UINT64_MAX</argument>  , <argument><literal type="number">0</literal></argument>         )</argument_list></macro>
<macro><name>GB_MONOID_DEF</name>  <argument_list>( <argument>MIN_FP32</argument>     , <argument>float</argument>     , <argument>INFINITY</argument>    )</argument_list></macro>
<macro><name>GB_MONOID_DEF</name>  <argument_list>( <argument>MIN_FP64</argument>     , <argument>double</argument>    , <argument>INFINITY</argument>    )</argument_list></macro>

<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>MIN</argument>, <argument>INT8</argument>     )</argument_list></macro>
<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>MIN</argument>, <argument>INT16</argument>    )</argument_list></macro>
<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>MIN</argument>, <argument>INT32</argument>    )</argument_list></macro>
<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>MIN</argument>, <argument>INT64</argument>    )</argument_list></macro>
<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>MIN</argument>, <argument>UINT8</argument>    )</argument_list></macro>
<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>MIN</argument>, <argument>UINT16</argument>   )</argument_list></macro>
<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>MIN</argument>, <argument>UINT32</argument>   )</argument_list></macro>
<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>MIN</argument>, <argument>UINT64</argument>   )</argument_list></macro>
<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>MIN</argument>, <argument>FP32</argument>     )</argument_list></macro>
<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>MIN</argument>, <argument>FP64</argument>     )</argument_list></macro>

<comment type="line">// MAX monoids:</comment>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>MAX_INT8</argument>     , <argument>int8_t</argument>    , <argument>INT8_MIN</argument>    , <argument>INT8_MAX</argument>  )</argument_list></macro>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>MAX_INT16</argument>    , <argument>int16_t</argument>   , <argument>INT16_MIN</argument>   , <argument>INT16_MAX</argument> )</argument_list></macro>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>MAX_INT32</argument>    , <argument>int32_t</argument>   , <argument>INT32_MIN</argument>   , <argument>INT32_MAX</argument> )</argument_list></macro>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>MAX_INT64</argument>    , <argument>int64_t</argument>   , <argument>INT64_MIN</argument>   , <argument>INT64_MAX</argument> )</argument_list></macro>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>MAX_UINT8</argument>    , <argument>uint8_t</argument>   , <argument><literal type="number">0</literal></argument>           , <argument>UINT8_MAX</argument> )</argument_list></macro>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>MAX_UINT16</argument>   , <argument>uint16_t</argument>  , <argument><literal type="number">0</literal></argument>           , <argument>UINT16_MAX</argument>)</argument_list></macro>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>MAX_UINT32</argument>   , <argument>uint32_t</argument>  , <argument><literal type="number">0</literal></argument>           , <argument>UINT32_MAX</argument>)</argument_list></macro>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>MAX_UINT64</argument>   , <argument>uint64_t</argument>  , <argument><literal type="number">0</literal></argument>           , <argument>UINT64_MAX</argument>)</argument_list></macro>
<macro><name>GB_MONOID_DEF</name>  <argument_list>( <argument>MAX_FP32</argument>     , <argument>float</argument>     , <argument>-INFINITY</argument>   )</argument_list></macro>
<macro><name>GB_MONOID_DEF</name>  <argument_list>( <argument>MAX_FP64</argument>     , <argument>double</argument>    , <argument>-INFINITY</argument>   )</argument_list></macro>

<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>MAX</argument>, <argument>INT8</argument>     )</argument_list></macro>
<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>MAX</argument>, <argument>INT16</argument>    )</argument_list></macro>
<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>MAX</argument>, <argument>INT32</argument>    )</argument_list></macro>
<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>MAX</argument>, <argument>INT64</argument>    )</argument_list></macro>
<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>MAX</argument>, <argument>UINT8</argument>    )</argument_list></macro>
<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>MAX</argument>, <argument>UINT16</argument>   )</argument_list></macro>
<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>MAX</argument>, <argument>UINT32</argument>   )</argument_list></macro>
<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>MAX</argument>, <argument>UINT64</argument>   )</argument_list></macro>
<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>MAX</argument>, <argument>FP32</argument>     )</argument_list></macro>
<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>MAX</argument>, <argument>FP64</argument>     )</argument_list></macro>

<comment type="line">// PLUS monoids:</comment>
<macro><name>GB_MONOID_DEF</name>  <argument_list>( <argument>PLUS_INT8</argument>    , <argument>int8_t</argument>    , <argument><literal type="number">0</literal></argument>           )</argument_list></macro>
<macro><name>GB_MONOID_DEF</name>  <argument_list>( <argument>PLUS_INT16</argument>   , <argument>int16_t</argument>   , <argument><literal type="number">0</literal></argument>           )</argument_list></macro>
<macro><name>GB_MONOID_DEF</name>  <argument_list>( <argument>PLUS_INT32</argument>   , <argument>int32_t</argument>   , <argument><literal type="number">0</literal></argument>           )</argument_list></macro>
<macro><name>GB_MONOID_DEF</name>  <argument_list>( <argument>PLUS_INT64</argument>   , <argument>int64_t</argument>   , <argument><literal type="number">0</literal></argument>           )</argument_list></macro>
<macro><name>GB_MONOID_DEF</name>  <argument_list>( <argument>PLUS_UINT8</argument>   , <argument>uint8_t</argument>   , <argument><literal type="number">0</literal></argument>           )</argument_list></macro>
<macro><name>GB_MONOID_DEF</name>  <argument_list>( <argument>PLUS_UINT16</argument>  , <argument>uint16_t</argument>  , <argument><literal type="number">0</literal></argument>           )</argument_list></macro>
<macro><name>GB_MONOID_DEF</name>  <argument_list>( <argument>PLUS_UINT32</argument>  , <argument>uint32_t</argument>  , <argument><literal type="number">0</literal></argument>           )</argument_list></macro>
<macro><name>GB_MONOID_DEF</name>  <argument_list>( <argument>PLUS_UINT64</argument>  , <argument>uint64_t</argument>  , <argument><literal type="number">0</literal></argument>           )</argument_list></macro>
<macro><name>GB_MONOID_DEF</name>  <argument_list>( <argument>PLUS_FP32</argument>    , <argument>float</argument>     , <argument><literal type="number">0</literal></argument>           )</argument_list></macro>
<macro><name>GB_MONOID_DEF</name>  <argument_list>( <argument>PLUS_FP64</argument>    , <argument>double</argument>    , <argument><literal type="number">0</literal></argument>           )</argument_list></macro>
<macro><name>GB_MONOID_DEF</name>  <argument_list>( <argument>PLUS_FC32</argument>    , <argument>GxB_FC32_t</argument>, <argument>GB_FC32_ZERO</argument>)</argument_list></macro>
<macro><name>GB_MONOID_DEF</name>  <argument_list>( <argument>PLUS_FC64</argument>    , <argument>GxB_FC64_t</argument>, <argument>GB_FC64_ZERO</argument>)</argument_list></macro>

<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>PLUS</argument>, <argument>INT8</argument>     )</argument_list></macro>
<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>PLUS</argument>, <argument>INT16</argument>    )</argument_list></macro>
<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>PLUS</argument>, <argument>INT32</argument>    )</argument_list></macro>
<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>PLUS</argument>, <argument>INT64</argument>    )</argument_list></macro>
<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>PLUS</argument>, <argument>UINT8</argument>    )</argument_list></macro>
<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>PLUS</argument>, <argument>UINT16</argument>   )</argument_list></macro>
<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>PLUS</argument>, <argument>UINT32</argument>   )</argument_list></macro>
<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>PLUS</argument>, <argument>UINT64</argument>   )</argument_list></macro>
<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>PLUS</argument>, <argument>FP32</argument>     )</argument_list></macro>
<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>PLUS</argument>, <argument>FP64</argument>     )</argument_list></macro>

<comment type="line">// TIMES monoids:</comment>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>TIMES_INT8</argument>   , <argument>int8_t</argument>    , <argument><literal type="number">1</literal></argument>           , <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>TIMES_INT16</argument>  , <argument>int16_t</argument>   , <argument><literal type="number">1</literal></argument>           , <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>TIMES_INT32</argument>  , <argument>int32_t</argument>   , <argument><literal type="number">1</literal></argument>           , <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>TIMES_INT64</argument>  , <argument>int64_t</argument>   , <argument><literal type="number">1</literal></argument>           , <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>TIMES_UINT8</argument>  , <argument>uint8_t</argument>   , <argument><literal type="number">1</literal></argument>           , <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>TIMES_UINT16</argument> , <argument>uint16_t</argument>  , <argument><literal type="number">1</literal></argument>           , <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>TIMES_UINT32</argument> , <argument>uint32_t</argument>  , <argument><literal type="number">1</literal></argument>           , <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>TIMES_UINT64</argument> , <argument>uint64_t</argument>  , <argument><literal type="number">1</literal></argument>           , <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>GB_MONOID_DEF</name>  <argument_list>( <argument>TIMES_FP32</argument>   , <argument>float</argument>     , <argument><literal type="number">1</literal></argument>           )</argument_list></macro>
<macro><name>GB_MONOID_DEF</name>  <argument_list>( <argument>TIMES_FP64</argument>   , <argument>double</argument>    , <argument><literal type="number">1</literal></argument>           )</argument_list></macro>
<macro><name>GB_MONOID_DEF</name>  <argument_list>( <argument>TIMES_FC32</argument>   , <argument>GxB_FC32_t</argument>, <argument>GB_FC32_ONE</argument> )</argument_list></macro>
<macro><name>GB_MONOID_DEF</name>  <argument_list>( <argument>TIMES_FC64</argument>   , <argument>GxB_FC64_t</argument>, <argument>GB_FC64_ONE</argument> )</argument_list></macro>

<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>TIMES</argument>, <argument>INT8</argument>     )</argument_list></macro>
<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>TIMES</argument>, <argument>INT16</argument>    )</argument_list></macro>
<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>TIMES</argument>, <argument>INT32</argument>    )</argument_list></macro>
<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>TIMES</argument>, <argument>INT64</argument>    )</argument_list></macro>
<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>TIMES</argument>, <argument>UINT8</argument>    )</argument_list></macro>
<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>TIMES</argument>, <argument>UINT16</argument>   )</argument_list></macro>
<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>TIMES</argument>, <argument>UINT32</argument>   )</argument_list></macro>
<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>TIMES</argument>, <argument>UINT64</argument>   )</argument_list></macro>
<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>TIMES</argument>, <argument>FP32</argument>     )</argument_list></macro>
<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>TIMES</argument>, <argument>FP64</argument>     )</argument_list></macro>

<comment type="line">// ANY monoids:</comment>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>ANY_INT8</argument>     , <argument>int8_t</argument>    , <argument><literal type="number">0</literal></argument>           , <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>ANY_INT16</argument>    , <argument>int16_t</argument>   , <argument><literal type="number">0</literal></argument>           , <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>ANY_INT32</argument>    , <argument>int32_t</argument>   , <argument><literal type="number">0</literal></argument>           , <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>ANY_INT64</argument>    , <argument>int64_t</argument>   , <argument><literal type="number">0</literal></argument>           , <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>ANY_UINT8</argument>    , <argument>uint8_t</argument>   , <argument><literal type="number">0</literal></argument>           , <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>ANY_UINT16</argument>   , <argument>uint16_t</argument>  , <argument><literal type="number">0</literal></argument>           , <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>ANY_UINT32</argument>   , <argument>uint32_t</argument>  , <argument><literal type="number">0</literal></argument>           , <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>ANY_UINT64</argument>   , <argument>uint64_t</argument>  , <argument><literal type="number">0</literal></argument>           , <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>ANY_FP32</argument>     , <argument>float</argument>     , <argument><literal type="number">0</literal></argument>           , <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>ANY_FP64</argument>     , <argument>double</argument>    , <argument><literal type="number">0</literal></argument>           , <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>ANY_FC32</argument>     , <argument>GxB_FC32_t</argument>, <argument>GB_FC32_ZERO</argument>, <argument>GB_FC32_ZERO</argument>)</argument_list></macro>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>ANY_FC64</argument>     , <argument>GxB_FC64_t</argument>, <argument>GB_FC64_ZERO</argument>, <argument>GB_FC64_ZERO</argument>)</argument_list></macro>

<comment type="line">// Boolean monoids:</comment>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>ANY_BOOL</argument>     , <argument>bool</argument>      , <argument>false</argument>       , <argument>false</argument>)</argument_list></macro>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>LOR_BOOL</argument>     , <argument>bool</argument>      , <argument>false</argument>       , <argument>true</argument> )</argument_list></macro>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>LAND_BOOL</argument>    , <argument>bool</argument>      , <argument>true</argument>        , <argument>false</argument>)</argument_list></macro>
<macro><name>GB_MONOID_DEF</name>  <argument_list>( <argument>LXOR_BOOL</argument>    , <argument>bool</argument>      , <argument>false</argument>       )</argument_list></macro>
<macro><name>GB_MONOID_DEF</name>  <argument_list>( <argument>EQ_BOOL</argument>      , <argument>bool</argument>      , <argument>true</argument>        )</argument_list></macro>
<comment type="line">// GrB_LXNOR_BOOL_MONIOD is the same as GrB_EQ_BOOL_MONIOD:</comment>
<decl_stmt><decl><type><name>GrB_Monoid</name></type> <name>GxB_LXNOR_BOOL_MONOID</name> <init>= <expr><operator>&amp;</operator> <call><name>GB_OPAQUE</name> <argument_list>(<argument><expr><name>EQ_BOOL_MONOID</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>LOR</argument>  , <argument>BOOL</argument>     )</argument_list></macro>
<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>LAND</argument> , <argument>BOOL</argument>     )</argument_list></macro>
<macro><name>GB_MONOID_GRB</name>  <argument_list>( <argument>LXOR</argument> , <argument>BOOL</argument>     )</argument_list></macro>
<decl_stmt><decl><type><name>GrB_Monoid</name></type> <name>GrB_LXNOR_MONOID_BOOL</name> <init>= <expr><operator>&amp;</operator> <call><name>GB_OPAQUE</name> <argument_list>(<argument><expr><name>EQ_BOOL_MONOID</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

<comment type="line">// BOR monoids (bitwise or):</comment>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>BOR_UINT8</argument>    , <argument>uint8_t</argument>   , <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0xFF</literal></argument>               )</argument_list></macro>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>BOR_UINT16</argument>   , <argument>uint16_t</argument>  , <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0xFFFF</literal></argument>             )</argument_list></macro>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>BOR_UINT32</argument>   , <argument>uint32_t</argument>  , <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0xFFFFFFFF</literal></argument>         )</argument_list></macro>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>BOR_UINT64</argument>   , <argument>uint64_t</argument>  , <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0xFFFFFFFFFFFFFFFF</literal></argument> )</argument_list></macro>

<comment type="line">// BAND monoids (bitwise and):</comment>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>BAND_UINT8</argument>   , <argument>uint8_t</argument>   , <argument><literal type="number">0xFF</literal></argument>              , <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>BAND_UINT16</argument>  , <argument>uint16_t</argument>  , <argument><literal type="number">0xFFFF</literal></argument>            , <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>BAND_UINT32</argument>  , <argument>uint32_t</argument>  , <argument><literal type="number">0xFFFFFFFF</literal></argument>        , <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>GB_MONOID_DEFT</name> <argument_list>( <argument>BAND_UINT64</argument>  , <argument>uint64_t</argument>  , <argument><literal type="number">0xFFFFFFFFFFFFFFFF</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>

<comment type="line">// BXOR monoids (bitwise xor):</comment>
<macro><name>GB_MONOID_DEF</name>  <argument_list>( <argument>BXOR_UINT8</argument>   , <argument>uint8_t</argument>   , <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>GB_MONOID_DEF</name>  <argument_list>( <argument>BXOR_UINT16</argument>  , <argument>uint16_t</argument>  , <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>GB_MONOID_DEF</name>  <argument_list>( <argument>BXOR_UINT32</argument>  , <argument>uint32_t</argument>  , <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>GB_MONOID_DEF</name>  <argument_list>( <argument>BXOR_UINT64</argument>  , <argument>uint64_t</argument>  , <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<comment type="line">// BXNOR monoids (bitwise xnor):</comment>
<macro><name>GB_MONOID_DEF</name>  <argument_list>( <argument>BXNOR_UINT8</argument>  , <argument>uint8_t</argument>   , <argument><literal type="number">0xFF</literal></argument>               )</argument_list></macro>
<macro><name>GB_MONOID_DEF</name>  <argument_list>( <argument>BXNOR_UINT16</argument> , <argument>uint16_t</argument>  , <argument><literal type="number">0xFFFF</literal></argument>             )</argument_list></macro>
<macro><name>GB_MONOID_DEF</name>  <argument_list>( <argument>BXNOR_UINT32</argument> , <argument>uint32_t</argument>  , <argument><literal type="number">0xFFFFFFFF</literal></argument>         )</argument_list></macro>
<macro><name>GB_MONOID_DEF</name>  <argument_list>( <argument>BXNOR_UINT64</argument> , <argument>uint64_t</argument>  , <argument><literal type="number">0xFFFFFFFFFFFFFFFF</literal></argument> )</argument_list></macro>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// predefined built-in semirings</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_SEMIRING_NAME</name><parameter_list>(<parameter><type><name>add</name></type></parameter>,<parameter><type><name>mult</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>GB_EVAL5 (add, _, mult, _, GB_XTYPE)</cpp:value></cpp:define>

<comment type="line">// helper macro to define semirings: all x,y,z types the same</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GXB_SEMIRING</name><parameter_list>(<parameter><type><name>add</name></type></parameter>,<parameter><type><name>mult</name></type></parameter>)</parameter_list></cpp:macro>                                              \
    <cpp:value>struct GB_Semiring_opaque GB_OPAQUE (GB_SEMIRING_NAME(add, mult)) =     \
    {                                                                       \
        GB_MAGIC, 0,                                                        \
        &amp; GB_OPAQUE (GB_EVAL4 (add, _, GB_XTYPE, _MONOID)),                 \
        &amp; GB_OPAQUE (GB_EVAL3 (mult, _, GB_XTYPE)),                         \
    } ;                                                                     \
    GrB_Semiring GXB (GB_SEMIRING_NAME (add, mult)) =                       \
         &amp; GB_OPAQUE (GB_SEMIRING_NAME (add, mult)) ;</cpp:value></cpp:define>

<comment type="line">// helper macro to define semirings: x,y types the same, z boolean</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_SEMIRING_COMPARE_DEFINE</name><parameter_list>(<parameter><type><name>add</name></type></parameter>,<parameter><type><name>mult</name></type></parameter>)</parameter_list></cpp:macro>                                \
    <cpp:value>struct GB_Semiring_opaque GB_OPAQUE (GB_SEMIRING_NAME(add, mult)) =     \
    {                                                                       \
        GB_MAGIC, 0,                                                        \
        &amp; GB_OPAQUE (GB_EVAL2 (add, _BOOL_MONOID)),                         \
        &amp; GB_OPAQUE (GB_EVAL3 (mult, _, GB_XTYPE)),                         \
    } ;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GXB_SEMIRING_COMPARE</name><parameter_list>(<parameter><type><name>add</name></type></parameter>,<parameter><type><name>mult</name></type></parameter>)</parameter_list></cpp:macro>                                      \
    <cpp:value>GB_SEMIRING_COMPARE_DEFINE (add, mult)                                  \
    GrB_Semiring GXB (GB_SEMIRING_NAME (add, mult)) =                       \
         &amp; GB_OPAQUE (GB_SEMIRING_NAME (add, mult)) ;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro>    <cpp:value>BOOL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_BOOLEAN</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_semiring_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro>    <cpp:value>INT8</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_semiring_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro>    <cpp:value>UINT8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_UNSIGNED_INT</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_semiring_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro>    <cpp:value>INT16</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_semiring_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro>    <cpp:value>UINT16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_UNSIGNED_INT</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_semiring_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro>    <cpp:value>INT32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_POSITIONAL</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_semiring_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_UNSIGNED_INT</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro>    <cpp:value>UINT32</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_semiring_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_POSITIONAL</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro>    <cpp:value>INT64</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_semiring_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_UNSIGNED_INT</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro>    <cpp:value>UINT64</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_semiring_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro>    <cpp:value>FP32</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_semiring_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro>    <cpp:value>FP64</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_semiring_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COMPLEX</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro>    <cpp:value>FC32</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_semiring_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COMPLEX</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro>    <cpp:value>FC64</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_semiring_template.c"</cpp:file></cpp:include>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// 124 predefined built-in semirings in the v1.3 C API</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// These predefined semirings have been added to the spec, as of v1.3.</comment>
<comment type="line">// They are identical to the GxB* semirings of the same name, except for</comment>
<comment type="line">// GrB_LXNOR_LOR_SEMIRING_BOOL, which is identical to GxB_EQ_LOR_BOOL.</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRB_SEMIRING</name><parameter_list>(<parameter><type><name>add</name></type></parameter>,<parameter><type><name>mult</name></type></parameter>,<parameter><type><name>xtype</name></type></parameter>)</parameter_list></cpp:macro>                                \
<cpp:value>GrB_Semiring GRB (GB_EVAL5 (add, _, mult, _SEMIRING_, xtype)) =     \
    &amp; GB_OPAQUE (GB_EVAL5 (add, _, mult, _, xtype)) ;</cpp:value></cpp:define>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// 4 boolean semirings</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>LOR</argument>, <argument>LAND</argument>, <argument>BOOL</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>LAND</argument>, <argument>LOR</argument>, <argument>BOOL</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>LXOR</argument>, <argument>LAND</argument>, <argument>BOOL</argument>)</argument_list></macro>
    <function_decl><type><name>GrB_Semiring</name></type> <name>GRB</name> <parameter_list>(<parameter><decl><type><name>LXNOR_LOR_SEMIRING_BOOL</name></type></decl></parameter>)</parameter_list> <init>= <expr><operator>&amp;</operator> <call><name>GB_OPAQUE</name> <argument_list>(<argument><expr><name>EQ_LOR_BOOL</name></expr></argument>)</argument_list></call></expr></init> ;</function_decl>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// 20 semirings with PLUS monoids</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>PLUS</argument>, <argument>TIMES</argument>, <argument>INT8</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>PLUS</argument>, <argument>TIMES</argument>, <argument>INT16</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>PLUS</argument>, <argument>TIMES</argument>, <argument>INT32</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>PLUS</argument>, <argument>TIMES</argument>, <argument>INT64</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>PLUS</argument>, <argument>TIMES</argument>, <argument>UINT8</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>PLUS</argument>, <argument>TIMES</argument>, <argument>UINT16</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>PLUS</argument>, <argument>TIMES</argument>, <argument>UINT32</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>PLUS</argument>, <argument>TIMES</argument>, <argument>UINT64</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>PLUS</argument>, <argument>TIMES</argument>, <argument>FP32</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>PLUS</argument>, <argument>TIMES</argument>, <argument>FP64</argument>)</argument_list></macro>

    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>PLUS</argument>, <argument>MIN</argument>, <argument>INT8</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>PLUS</argument>, <argument>MIN</argument>, <argument>INT16</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>PLUS</argument>, <argument>MIN</argument>, <argument>INT32</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>PLUS</argument>, <argument>MIN</argument>, <argument>INT64</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>PLUS</argument>, <argument>MIN</argument>, <argument>UINT8</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>PLUS</argument>, <argument>MIN</argument>, <argument>UINT16</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>PLUS</argument>, <argument>MIN</argument>, <argument>UINT32</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>PLUS</argument>, <argument>MIN</argument>, <argument>UINT64</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>PLUS</argument>, <argument>MIN</argument>, <argument>FP32</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>PLUS</argument>, <argument>MIN</argument>, <argument>FP64</argument>)</argument_list></macro>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// 50 semirings with MIN monoids</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>PLUS</argument>, <argument>INT8</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>PLUS</argument>, <argument>INT16</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>PLUS</argument>, <argument>INT32</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>PLUS</argument>, <argument>INT64</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>PLUS</argument>, <argument>UINT8</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>PLUS</argument>, <argument>UINT16</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>PLUS</argument>, <argument>UINT32</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>PLUS</argument>, <argument>UINT64</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>PLUS</argument>, <argument>FP32</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>PLUS</argument>, <argument>FP64</argument>)</argument_list></macro>

    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>TIMES</argument>, <argument>INT8</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>TIMES</argument>, <argument>INT16</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>TIMES</argument>, <argument>INT32</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>TIMES</argument>, <argument>INT64</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>TIMES</argument>, <argument>UINT8</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>TIMES</argument>, <argument>UINT16</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>TIMES</argument>, <argument>UINT32</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>TIMES</argument>, <argument>UINT64</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>TIMES</argument>, <argument>FP32</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>TIMES</argument>, <argument>FP64</argument>)</argument_list></macro>

    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>FIRST</argument>, <argument>INT8</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>FIRST</argument>, <argument>INT16</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>FIRST</argument>, <argument>INT32</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>FIRST</argument>, <argument>INT64</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>FIRST</argument>, <argument>UINT8</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>FIRST</argument>, <argument>UINT16</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>FIRST</argument>, <argument>UINT32</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>FIRST</argument>, <argument>UINT64</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>FIRST</argument>, <argument>FP32</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>FIRST</argument>, <argument>FP64</argument>)</argument_list></macro>

    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>SECOND</argument>, <argument>INT8</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>SECOND</argument>, <argument>INT16</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>SECOND</argument>, <argument>INT32</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>SECOND</argument>, <argument>INT64</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>SECOND</argument>, <argument>UINT8</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>SECOND</argument>, <argument>UINT16</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>SECOND</argument>, <argument>UINT32</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>SECOND</argument>, <argument>UINT64</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>SECOND</argument>, <argument>FP32</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>SECOND</argument>, <argument>FP64</argument>)</argument_list></macro>

    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>MAX</argument>, <argument>INT8</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>MAX</argument>, <argument>INT16</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>MAX</argument>, <argument>INT32</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>MAX</argument>, <argument>INT64</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>MAX</argument>, <argument>UINT8</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>MAX</argument>, <argument>UINT16</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>MAX</argument>, <argument>UINT32</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>MAX</argument>, <argument>UINT64</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>MAX</argument>, <argument>FP32</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MIN</argument>, <argument>MAX</argument>, <argument>FP64</argument>)</argument_list></macro>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// 50 semirings with MAX monoids</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>PLUS</argument>, <argument>INT8</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>PLUS</argument>, <argument>INT16</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>PLUS</argument>, <argument>INT32</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>PLUS</argument>, <argument>INT64</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>PLUS</argument>, <argument>UINT8</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>PLUS</argument>, <argument>UINT16</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>PLUS</argument>, <argument>UINT32</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>PLUS</argument>, <argument>UINT64</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>PLUS</argument>, <argument>FP32</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>PLUS</argument>, <argument>FP64</argument>)</argument_list></macro>

    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>TIMES</argument>, <argument>INT8</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>TIMES</argument>, <argument>INT16</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>TIMES</argument>, <argument>INT32</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>TIMES</argument>, <argument>INT64</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>TIMES</argument>, <argument>UINT8</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>TIMES</argument>, <argument>UINT16</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>TIMES</argument>, <argument>UINT32</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>TIMES</argument>, <argument>UINT64</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>TIMES</argument>, <argument>FP32</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>TIMES</argument>, <argument>FP64</argument>)</argument_list></macro>

    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>FIRST</argument>, <argument>INT8</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>FIRST</argument>, <argument>INT16</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>FIRST</argument>, <argument>INT32</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>FIRST</argument>, <argument>INT64</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>FIRST</argument>, <argument>UINT8</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>FIRST</argument>, <argument>UINT16</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>FIRST</argument>, <argument>UINT32</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>FIRST</argument>, <argument>UINT64</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>FIRST</argument>, <argument>FP32</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>FIRST</argument>, <argument>FP64</argument>)</argument_list></macro>

    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>SECOND</argument>, <argument>INT8</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>SECOND</argument>, <argument>INT16</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>SECOND</argument>, <argument>INT32</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>SECOND</argument>, <argument>INT64</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>SECOND</argument>, <argument>UINT8</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>SECOND</argument>, <argument>UINT16</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>SECOND</argument>, <argument>UINT32</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>SECOND</argument>, <argument>UINT64</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>SECOND</argument>, <argument>FP32</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>SECOND</argument>, <argument>FP64</argument>)</argument_list></macro>

    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>MIN</argument>, <argument>INT8</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>MIN</argument>, <argument>INT16</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>MIN</argument>, <argument>INT32</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>MIN</argument>, <argument>INT64</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>MIN</argument>, <argument>UINT8</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>MIN</argument>, <argument>UINT16</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>MIN</argument>, <argument>UINT32</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>MIN</argument>, <argument>UINT64</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>MIN</argument>, <argument>FP32</argument>)</argument_list></macro>
    <macro><name>GRB_SEMIRING</name> <argument_list>(<argument>MAX</argument>, <argument>MIN</argument>, <argument>FP64</argument>)</argument_list></macro>

</unit>
