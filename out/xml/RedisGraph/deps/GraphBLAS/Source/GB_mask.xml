<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_mask.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mask: apply a mask: C&lt;M&gt; = Z</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// C&lt;M&gt; = Z</comment>

<comment type="line">// GB_mask is only called by GB_accum_mask.</comment>

<comment type="line">// If M is NULL, C can have any sparsity.  Otherwise, if M is present then</comment>
<comment type="line">// C is sparse or hypersparse; if bitmap or full, GB_subassign is used instead.</comment>

<comment type="line">// Nearly all GraphBLAS operations take a mask, which controls how the result</comment>
<comment type="line">// of the computations, Z, are copied into the result matrix C.  The following</comment>
<comment type="line">// working script, GB_spec_mask.m, defines how this is done.  In the</comment>
<comment type="line">// comments, C(i,j) is shorthand for the index i in the jth vector, and</comment>
<comment type="line">// likewise for M, Z, and R.  If the matrices are all CSC, then this is row i</comment>
<comment type="line">// and column j.  If the matrices are all CSR, then it is row j and column i.</comment>

<comment type="block">/*

    function R = GB_spec_mask (C, M, Z, C_replace, Mask_comp,identity)
    %GB_SPEC_MASK: an implementation of GB_mask
    %
    % Computes C&lt;M&gt; = Z, in GraphBLAS notation.
    %
    % Usage:
    % C = GB_spec_mask (C, M, Z, C_replace, Mask_comp, identity)
    %
    % C and Z: matrices of the same size.
    %
    % optional inputs:
    % M: if empty or not present, M = ones (size (C))
    % C_replace: set C to zero first. Default is false.
    % Mask_comp: use ~M instead of M. Default is false.
    % identity: the additive identity of the semiring.  Default is zero.
    %   This is only needed because the GB_spec_* routines operate on dense
    %   matrices, and thus they need to know the value of the implicit 'zero'.
    %
    % This method operates on both plain matrices and on structs with
    % matrix, pattern, and class components.

    if (nargin &lt; 6)
        identity = 0 ;
    end
    if (nargin &lt; 5)
        Mask_comp = false ;
    end
    if (nargin &lt; 4)
        C_replace = false ;
    end

    if (isstruct (C))
        % apply the mask to both the matrix and the pattern
        R.matrix  = GB_spec_mask (C.matrix,  M, Z.matrix,  C_replace, ...
            Mask_comp, identity) ;
        R.pattern = GB_spec_mask (C.pattern, M, Z.pattern, C_replace, ...
            Mask_comp, false) ;
        R.class = C.class ;
        return
    end

    if (~isequal (size (C), size (Z)))
        error ('C and Z must have the same size') ;
    end
    if (~isempty (M))
        if (~isequal (size (C), size (M)))
            error ('C and M must have the same size') ;
        end
    end

    % replace C if requested
    if (C_replace)
        C (:,:) = identity ;
    end

    if (isempty (M))
        % in GraphBLAS, this means M is NULL;
        % implicitly, M = ones (size (C))
        if (~Mask_comp)
            R = Z ;
        else
            % note that Z need never have been computed
            R = C ;
        end
    else
        % form the Boolean mask. For GraphBLAS, this does the
        % right thing and ignores explicit zeros in M.
        M = (M ~= 0) ;
        if (~Mask_comp)
            % R will equal C where M is false
            R = C ;
            % overwrite R with Z where M is true
            R (M) = Z (M) ;
        else
            % M is complemented
            % R will equal Z where M is false
            R = Z ;
            % overwrite R with C where M is true
            R (M) = C (M) ;
        end
    end

*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>                     \
<cpp:value>{                                       \
    GB_Matrix_free (Zhandle) ;          \
    GB_Matrix_free (&amp;C0) ;              \
    GB_Matrix_free (&amp;R) ;               \
}</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mask.h"</cpp:file></cpp:include>

<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>GB_mask</name>                <comment type="line">// C&lt;M&gt; = Z</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C_result</name></decl></parameter>,        <comment type="line">// both input C and result matrix</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,         <comment type="line">// optional mask matrix, can be NULL</comment>
    <parameter><decl><type><name>GrB_Matrix</name> <modifier>*</modifier></type><name>Zhandle</name></decl></parameter>,        <comment type="line">// Z = results of computation, perhaps shallow.</comment>
                                <comment type="line">// Z is freed when done.</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>C_replace</name></decl></parameter>,       <comment type="line">// true if clear(C) to be done first</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_comp</name></decl></parameter>,       <comment type="line">// true if M is to be complemented</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_struct</name></decl></parameter>,     <comment type="line">// if true, use the only structure of M</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// C_result may be aliased with M</comment>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C_result</name></expr></argument>, <argument><expr><literal type="string">"C_result for GB_mask"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><name><name>C_result</name><operator>-&gt;</operator><name>static_header</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <comment type="line">// C may be cleared anyway, without the need for finishing it</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_ZOMBIES_OK</name> <argument_list>(<argument><expr><name>C_result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>C_result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_PENDING_OK</name> <argument_list>(<argument><expr><name>C_result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK_OR_NULL</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><literal type="string">"M for GB_mask"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <comment type="line">// M may have zombies and pending tuples</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_PENDING_OK</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_ZOMBIES_OK</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// Z has the same type as C_result, with no zombies or pending tuples</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Zhandle</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>Z</name> <init>= <expr><operator>*</operator><name>Zhandle</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>, <argument><expr><literal type="string">"Z for GB_mask"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>Z</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name><name>C_result</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <comment type="line">// Z and C_result are never aliased. C_result and M might be.</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Z</name> <operator>!=</operator> <name>C_result</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <comment type="line">// Z and C_result must have the same format and dimensions</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C_result</name><operator>-&gt;</operator><name>vlen</name></name> <operator>==</operator> <name><name>Z</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C_result</name><operator>-&gt;</operator><name>vdim</name></name> <operator>==</operator> <name><name>Z</name><operator>-&gt;</operator><name>vdim</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// M must be compatible with C_result</comment>
    <expr_stmt><expr><call><name>ASSERT_OK</name> <argument_list>(<argument><expr><call><name>GB_Mask_compatible</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>C_result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><name>GrB_SUCCESS</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>C</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>C0</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>R</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>GB_Matrix_opaque</name></name></type> <name>C0_header</name></decl>, <decl><type ref="prev"/><name>R_header</name></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// apply the mask</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>M</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// there is no mask (implicitly M(i,j)=1 for all i and j)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// Any pending work on C is abandoned (zombies and/or pending tuples).</comment>
        <comment type="line">// C and Z can have any sparsity, including bitmap or full.</comment>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>Mask_comp</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// mask is not complemented: this is the default</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// C_result = Z, but make sure a deep copy is made as needed.  It is</comment>
            <comment type="line">// possible that Z is a shallow copy of another matrix.</comment>
            <comment type="line">// Z is freed by GB_transplant_conform.</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><name><name>C_result</name><operator>-&gt;</operator><name>p_shallow</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><name><name>C_result</name><operator>-&gt;</operator><name>h_shallow</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">// transplant Z into C_result and conform to desired hypersparsity</comment>
            <return>return <expr><operator>(</operator><call><name>GB_transplant_conform</name> <argument_list>(<argument><expr><name>C_result</name></expr></argument>, <argument><expr><name><name>C_result</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>Zhandle</name></expr></argument>,
                <argument><expr><name>Context</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// an empty mask is complemented: Z is ignored</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// Z is ignored, and can even be NULL.  The method that calls</comment>
            <comment type="line">// GB_mask can short circuit its computation, ignore accum, and</comment>
            <comment type="line">// apply the mask immediately, and then return to its caller.</comment>
            <comment type="line">// This done by the GB_RETURN_IF_QUICK_MASK macro.</comment>

            <comment type="line">// In the current version, this work is always done by the</comment>
            <comment type="line">// GB_RETURN_IF_QUICK_MASK macro, and GB_mask is no longer called</comment>
            <comment type="line">// with an empty complemented mask.  The following is thus dead</comment>
            <comment type="line">// code.  It is kept here in case this function is called to handle</comment>
            <comment type="line">// this case in a future version.</comment>

            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>GB_DEAD_CODE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <comment type="line">// the following is no longer used</comment>

            <comment type="line">// free Z if it exists (this is OK if Zhandle is NULL)</comment>
            <expr_stmt><expr><call><name>GB_Matrix_free</name> <argument_list>(<argument><expr><name>Zhandle</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>C_replace</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// C_result = 0</comment>
                <return>return <expr><operator>(</operator><call><name>GB_clear</name> <argument_list>(<argument><expr><name>C_result</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="line">// nothing happens</comment>
                <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// the mask is present</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// delete any lingering zombies and assemble any pending tuples</comment>
        <expr_stmt><expr><call><name>GB_MATRIX_WAIT</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>        <comment type="line">// also sort M if jumbled</comment>
        <expr_stmt><expr><call><name>GB_MATRIX_WAIT</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>        <comment type="line">// also sort Z if jumbled</comment>

        <comment type="line">// R has the same CSR/CSC format as C_result.  It is hypersparse if</comment>
        <comment type="line">// both C and Z are hypersparse.</comment>

        <decl_stmt><decl><type><name>bool</name></type> <name>R_is_csc</name> <init>= <expr><name><name>C_result</name><operator>-&gt;</operator><name>is_csc</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>vdim</name> <init>= <expr><name><name>C_result</name><operator>-&gt;</operator><name>vdim</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>vlen</name> <init>= <expr><name><name>C_result</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>C_replace</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>GB_aliased</name> <argument_list>(<argument><expr><name>C_result</name></expr></argument>, <argument><expr><name>M</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// C_result and M are aliased.  This is OK, unless C_replace is</comment>
                <comment type="line">// true.  In this case, M must be left unchanged but C_result</comment>
                <comment type="line">// must be cleared.  To resolve this, a new matrix C0 is</comment>
                <comment type="line">// created, which is what C_result would look like if cleared.</comment>
                <comment type="line">// C_result is left unchanged since changing it would change M.</comment>
                <comment type="line">// The C0 matrix is created as hypersparse.</comment>
                <comment type="line">// set C0-&gt;iso = false  OK</comment>
                <expr_stmt><expr><call><name>GB_CLEAR_STATIC_HEADER</name> <argument_list>(<argument><expr><name>C0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>C0_header</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_new_bix</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C0</name></expr></argument>, <comment type="line">// sparse or hyper, existing header</comment>
                    <argument><expr><name><name>C_result</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>vdim</name></expr></argument>, <argument><expr><name>GB_Ap_calloc</name></expr></argument>, <argument><expr><name>R_is_csc</name></expr></argument>,
                    <argument><expr><name>GxB_HYPERSPARSE</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name><name>C_result</name><operator>-&gt;</operator><name>hyper_switch</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                    <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name>C</name> <operator>=</operator> <name>C0</name></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>static_header</name></name> <operator>||</operator> <name>GBNSTATIC</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// Clear all entries from C_result, and ensure C is hypersparse</comment>
                <comment type="line">// by temporarily changing the sparsity control</comment>
                <decl_stmt><decl><type><name>int</name></type> <name>save</name> <init>= <expr><name><name>C_result</name><operator>-&gt;</operator><name>sparsity_control</name></name></expr></init></decl> ;</decl_stmt>     <comment type="line">// save control</comment>
                <expr_stmt><expr><name><name>C_result</name><operator>-&gt;</operator><name>sparsity_control</name></name> <operator>=</operator> <name>GxB_HYPERSPARSE</name></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_clear</name> <argument_list>(<argument><expr><name>C_result</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>C_result</name><operator>-&gt;</operator><name>sparsity_control</name></name> <operator>=</operator> <name>save</name></expr> ;</expr_stmt>         <comment type="line">// restore control</comment>
                <expr_stmt><expr><name>C</name> <operator>=</operator> <name>C_result</name></expr> ;</expr_stmt>  <comment type="line">// C must have a dynamic header</comment>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><name><name>C</name><operator>-&gt;</operator><name>static_header</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <comment type="line">// C has been cleared, so it has no zombies or pending tuples</comment>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// C has already been finished if C_replace is false, via the</comment>
            <comment type="line">// GB_MATRIX_WAIT (C) in GB_accum_mask.</comment>
            <expr_stmt><expr><name>C</name> <operator>=</operator> <name>C_result</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><name><name>C</name><operator>-&gt;</operator><name>static_header</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// C cannot be bitmap or full for GB_masker</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// no more zombies or pending tuples in M or C</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// continue with C, do not use C_result until the end since it may be</comment>
        <comment type="line">// aliased with M.</comment>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// R = masker (C, M, Z):  compute C&lt;M&gt;=Z, placing results in R</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>GB_CLEAR_STATIC_HEADER</name> <argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>R_header</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_masker</name> <argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><name>R_is_csc</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>Z</name></expr></argument>,
            <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// free temporary matrices Z and C0</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>GB_Matrix_free</name> <argument_list>(<argument><expr><name>Zhandle</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// transplant the result, conform, and free R</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// finished using the mask M, so it is now safe to modify C_result,</comment>
        <comment type="line">// even if C_result and M are aliased</comment>

        <return>return <expr><operator>(</operator><call><name>GB_transplant_conform</name> <argument_list>(<argument><expr><name>C_result</name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>R</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

</unit>
