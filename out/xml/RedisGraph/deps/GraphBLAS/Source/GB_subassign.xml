<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_subassign.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_subassign: C(Rows,Cols)&lt;M&gt; = accum (C(Rows,Cols),A) or A'</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// submatrix assignment: C(Rows,Cols)&lt;M&gt; = accum (C(Rows,Cols),A)</comment>

<comment type="line">// All GxB_*_subassign operations rely on this function.</comment>

<comment type="line">// With scalar_expansion = false, this method does the work for the standard</comment>
<comment type="line">// GxB_*_subassign operations (GxB_Matrix_subassign, GxB_Vector_subassign,</comment>
<comment type="line">// GxB_Row_subassign, and GxB_Col_subassign).  If scalar_expansion is true, it</comment>
<comment type="line">// performs scalar assignment (the GxB_*_subassign_TYPE functions) in which</comment>
<comment type="line">// case the input matrix A is ignored (it is NULL), and the scalar is used</comment>
<comment type="line">// instead.</comment>

<comment type="line">// Compare with GB_assign, which uses M and C_replace differently</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_subassign.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>                 \
<cpp:value>{                                   \
    GB_Matrix_free (&amp;C2) ;          \
    GB_Matrix_free (&amp;M2) ;          \
    GB_Matrix_free (&amp;A2) ;          \
    GB_FREE_WORK (&amp;I2, I2_size) ;   \
    GB_FREE_WORK (&amp;J2, J2_size) ;   \
}</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GB_subassign</name>               <comment type="line">// C(Rows,Cols)&lt;M&gt; += A or A'</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C_in</name></decl></parameter>,                <comment type="line">// input/output matrix for results</comment>
    <parameter><decl><type><name>bool</name></type> <name>C_replace</name></decl></parameter>,                 <comment type="line">// descriptor for C</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M_in</name></decl></parameter>,          <comment type="line">// optional mask for C(Rows,Cols)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_comp</name></decl></parameter>,           <comment type="line">// true if mask is complemented</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_struct</name></decl></parameter>,         <comment type="line">// if true, use the only structure of M</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>M_transpose</name></decl></parameter>,         <comment type="line">// true if the mask should be transposed</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,       <comment type="line">// optional accum for accum(C,T)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A_in</name></decl></parameter>,          <comment type="line">// input matrix</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_transpose</name></decl></parameter>,         <comment type="line">// true if A is transposed</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>Rows</name></decl></parameter>,          <comment type="line">// row indices</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name></type> <name>nRows_in</name></decl></parameter>,       <comment type="line">// number of row indices</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>Cols</name></decl></parameter>,          <comment type="line">// column indices</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name></type> <name>nCols_in</name></decl></parameter>,       <comment type="line">// number of column indices</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>scalar_expansion</name></decl></parameter>,    <comment type="line">// if true, expand scalar to A</comment>
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>scalar</name></decl></parameter>,             <comment type="line">// scalar to be expanded</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>scalar_code</name></decl></parameter>, <comment type="line">// type code of scalar to expand</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check and prep inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>C</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>           <comment type="line">// C_in or C2</comment>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>M</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>           <comment type="line">// M_in or M2</comment>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>           <comment type="line">// A_in or A2</comment>
    <decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>I</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>           <comment type="line">// Rows, Cols, or I2</comment>
    <decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>J</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>           <comment type="line">// Rows, Cols, or J2</comment>

    <comment type="line">// temporary matrices and arrays</comment>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>C2</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>M2</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A2</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>GB_Matrix_opaque</name></name></type>
        <name>C2_header</name></decl>, <decl><type ref="prev"/><name>M2_header</name></decl>, <decl><type ref="prev"/><name>A2_header</name></decl>, <decl><type ref="prev"/><name>MT_header</name></decl>, <decl><type ref="prev"/><name>AT_header</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>I2</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>I2_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>J2</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>J2_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>atype</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>ni</name></decl>, <decl><type ref="prev"/><name>nj</name></decl>, <decl><type ref="prev"/><name>nI</name></decl>, <decl><type ref="prev"/><name>nJ</name></decl>, <decl><type ref="prev"/><name><name>Icolon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>Jcolon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>Ikind</name></decl>, <decl><type ref="prev"/><name>Jkind</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>assign_kind</name> <init>= <expr><name>GB_SUBASSIGN</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>subassign_method</name></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_assign_prep</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subassign_method</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>C2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>M2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>A2</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>C2_header</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>M2_header</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>A2_header</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>MT_header</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>AT_header</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>I</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>I2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>I2_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ni</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nI</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ikind</name></expr></argument>, <argument><expr><name>Icolon</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>J</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>J2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>J2_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nJ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Jkind</name></expr></argument>, <argument><expr><name>Jcolon</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><name>C_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>C_replace</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>assign_kind</name></expr></argument>,
        <argument><expr><name>M_in</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_transpose</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>,
        <argument><expr><name>A_in</name></expr></argument>, <argument><expr><name>A_transpose</name></expr></argument>, <argument><expr><name>Rows</name></expr></argument>, <argument><expr><name>nRows_in</name></expr></argument>, <argument><expr><name>Cols</name></expr></argument>, <argument><expr><name>nCols_in</name></expr></argument>,
        <argument><expr><name>scalar_expansion</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>, <argument><expr><name>scalar_code</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// GxB_Row_subassign, GxB_Col_subassign, GxB_Matrix_subassign and</comment>
    <comment type="line">// GxB_Vector_subassign all use GB_SUBASSIGN.</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>assign_kind</name> <operator>==</operator> <name>GB_SUBASSIGN</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>subassign_method</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// GB_assign_prep has handled the entire assignment itself</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>C</name> <operator>==</operator> <name>C_in</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C_in</name></expr></argument>, <argument><expr><literal type="string">"Final C for subassign"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C(I,J)&lt;M&gt; = A or accum (C(I,J),A) via GB_subassigner</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_subassigner</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>subassign_method</name></expr></argument>, <argument><expr><name>C_replace</name></expr></argument>,
        <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><name>A</name></expr></argument>,
        <argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>, <argument><expr><name>nI</name></expr></argument>, <argument><expr><name>Ikind</name></expr></argument>, <argument><expr><name>Icolon</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>nj</name></expr></argument>, <argument><expr><name>nJ</name></expr></argument>, <argument><expr><name>Jkind</name></expr></argument>, <argument><expr><name>Jcolon</name></expr></argument>,
        <argument><expr><name>scalar_expansion</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// transplant C back into C_in</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>C</name> <operator>==</operator> <name>C2</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// Transplant the content of C2 into C_in and free C2.  Zombies and</comment>
        <comment type="line">// pending tuples can be transplanted from C2 into C_in, and if C2 is</comment>
        <comment type="line">// jumbled, C_in becomes jumbled too.</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C2</name><operator>-&gt;</operator><name>static_header</name></name> <operator>||</operator> <name>GBNSTATIC</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_transplant</name> <argument_list>(<argument><expr><name>C_in</name></expr></argument>, <argument><expr><name><name>C_in</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>C2</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free workspace, finalize C, and return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_conform</name> <argument_list>(<argument><expr><name>C_in</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C_in</name></expr></argument>, <argument><expr><literal type="string">"Final C for subassign"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><call><name>GB_block</name> <argument_list>(<argument><expr><name>C_in</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
