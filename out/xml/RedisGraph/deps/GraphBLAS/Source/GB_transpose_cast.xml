<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_transpose_cast.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_transpose_cast: transpose and typecast</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// The transpose is not in-place.  No operator is applied.  C = (ctype) A' is</comment>
<comment type="line">// computed, or C = (ctype) one (A') if iso_one is true, with typecasting if</comment>
<comment type="line">// ctype is not equal to A-&gt;type.  If iso_one is true, C is returned as an</comment>
<comment type="line">// iso matrix, with an iso value of 1.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_transpose.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_transpose_cast</name>      <comment type="line">// C= (ctype) A' or one (A'), not in-place</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,               <comment type="line">// output matrix C, not in place</comment>
    <parameter><decl><type><name>GrB_Type</name></type> <name>ctype</name></decl></parameter>,             <comment type="line">// desired type of C</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>C_is_csc</name></decl></parameter>,        <comment type="line">// desired CSR/CSC format of C</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,         <comment type="line">// input matrix; C != A</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>iso_one</name></decl></parameter>,         <comment type="line">// if true, C = one (A'), as iso</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>C</name> <operator>!=</operator> <name>A</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>GB_aliased</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GB_Operator</name></type> <name>op</name> <init>= <expr><operator>(</operator><name>GB_Operator</name><operator>)</operator>
        <operator>(</operator><ternary><condition><expr><operator>(</operator><name>iso_one</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>GB_unop_one</name> <argument_list>(<argument><expr><name><name>ctype</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <comment type="line">// C = (ctype) A' if op is NULL, or C = (ctype) one (A')</comment>
    <return>return <expr><operator>(</operator><call><name>GB_transpose</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>C_is_csc</name></expr></argument>, <argument><expr><name>A</name></expr></argument>,
        <argument><expr><name>op</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,     <comment type="line">// iso ONE operator or NULL</comment>
        <argument><expr><name>Context</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
