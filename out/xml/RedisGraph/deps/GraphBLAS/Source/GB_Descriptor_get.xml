<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_Descriptor_get.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_Descriptor_get: get the status of a descriptor</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// A descriptor modifies the behavoir of a GraphBLAS operation.</comment>

<comment type="line">// This function is called via the GB_GET_DESCRIPTOR(...) macro.</comment>

<comment type="line">//  Descriptor field:           Descriptor value:</comment>

<comment type="line">//  desc-&gt;out                   GxB_DEFAULT or GrB_REPLACE</comment>

<comment type="line">//      GrB_REPLACE means that the output matrix C is cleared just</comment>
<comment type="line">//      prior to writing results back into it, via C&lt;M&gt; = results.  This</comment>
<comment type="line">//      descriptor does not affect how C is used to compute the results.  If</comment>
<comment type="line">//      GxB_DEFAULT, then C is not cleared before doing C&lt;M&gt;=results.</comment>

<comment type="line">//  desc-&gt;mask                  GxB_DEFAULT, GrB_COMP, GrB_STRUCTURE, or</comment>
<comment type="line">//                              GrB_COMP + GrB_STRUCTURE</comment>

<comment type="line">//      An optional 'write mask' defines how the results are to be written back</comment>
<comment type="line">//      into C.  The boolean mask matrix M has the same size as C (M is</comment>
<comment type="line">//      typecasted to boolean if it has another type).  If the M input to the</comment>
<comment type="line">//      GraphBLAS method is NULL, then implicitly M(i,j)=1 for all i and j.</comment>
<comment type="line">//      Let Z be the results to be written into C (the same dimension as C).</comment>
<comment type="line">//      If desc-&gt;mask is GxB_DEFAULT, and M(i,j)=1, then C(i,j) is over-written</comment>
<comment type="line">//      with Z(i,j).  Otherwise, if M(i,j)=0 C(i,j) is left unmodified (it</comment>
<comment type="line">//      remains an implicit zero if it is so, or its value is unchanged if it</comment>
<comment type="line">//      has one).  If desc-&gt;mask is GrB_COMP, then the use of M is negated:</comment>
<comment type="line">//      M(i,j)=0 means that C(i,j) is overwritten with Z(i,j), and M(i,j)=1</comment>
<comment type="line">//      means that C(i,j) is left unchanged.  If the value is GrB_STRUCTURE,</comment>
<comment type="line">//      only the pattern is used; any entry present in the pattern has the</comment>
<comment type="line">//      value M(i,j)=1, and entries not in the pattern have the value M(i,j)=0.</comment>
<comment type="line">//      The GrB_COMP and GrB_STUCTURE options can be combined, as GrB_COMP +</comment>
<comment type="line">//      GrB_STRUCTURE.</comment>

<comment type="line">//      Writing results Z into C via the mask M is written as C&lt;M&gt;=Z in</comment>
<comment type="line">//      GraphBLAS notation.</comment>

<comment type="line">//      Note that it is the value of M(i,j) that determines how C(i,j) is</comment>
<comment type="line">//      overwritten.  If the (i,j) entry is present in the M matrix data</comment>
<comment type="line">//      structure but has a numerical value of zero, then it is the same as if</comment>
<comment type="line">//      (i,j) is not present and thus implicitly zero.  Both mean 'M(i,j)=0'</comment>
<comment type="line">//      in the description above of how the mask M works.</comment>

<comment type="line">//  desc-&gt;in0 and desc-&gt;in1     GxB_DEFAULT or GrB_TRAN</comment>

<comment type="line">//      A GrB_Matrix passed as an input parameter to GraphBLAS methods can</comment>
<comment type="line">//      optionally transpose them prior to using them.  desc-&gt;in0 always refers</comment>
<comment type="line">//      to the first input to the method, and desc-&gt;in1 always refers to the</comment>
<comment type="line">//      second one.</comment>

<comment type="line">//      If the value of this descriptor is GxB_DEFAULT, then the matrix is used</comment>
<comment type="line">//      as-is.  Otherwise, it is transposed first.  That is, the results are</comment>
<comment type="line">//      the same as if the transpose of the matrix was passed to the method.</comment>

<comment type="line">//  desc-&gt;axb                   can be:</comment>

<comment type="line">//      GxB_DEFAULT = 0         automatic selection</comment>
<comment type="line">//      GxB_AxB_GUSTAVSON       gather-scatter saxpy method</comment>
<comment type="line">//      GxB_AxB_HASH            hash-based saxpy method</comment>
<comment type="line">//      GxB_AxB_SAXPY           saxpy: either Gustavson or hash</comment>
<comment type="line">//      GxB_AxB_DOT             dot product</comment>

<comment type="line">//  desc-&gt;do_sort               true or false (default is false) </comment>

<comment type="line">//  desc-&gt;nthreads_max          max # number of threads to use (auto if &lt;= 0)</comment>
<comment type="line">//  desc-&gt;chunk                 chunk size for threadds</comment>

<comment type="line">//      These are copied from the GrB_Descriptor into the Context.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GB_PUBLIC</name>
<name>GrB_Info</name></type> <name>GB_Descriptor_get</name>      <comment type="line">// get the contents of a descriptor</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Descriptor</name></type> <name>desc</name></decl></parameter>,  <comment type="line">// descriptor to query, may be NULL</comment>
    <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>C_replace</name></decl></parameter>,            <comment type="line">// if true replace C before C&lt;M&gt;=Z</comment>
    <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>Mask_comp</name></decl></parameter>,            <comment type="line">// if true use logical negation of M</comment>
    <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>Mask_struct</name></decl></parameter>,          <comment type="line">// if true use the structure of M</comment>
    <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>In0_transpose</name></decl></parameter>,        <comment type="line">// if true transpose first input</comment>
    <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>In1_transpose</name></decl></parameter>,        <comment type="line">// if true transpose second input</comment>
    <parameter><decl><type><name>GrB_Desc_Value</name> <modifier>*</modifier></type><name>AxB_method</name></decl></parameter>, <comment type="line">// method for C=A*B</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>do_sort</name></decl></parameter>,               <comment type="line">// if nonzero, sort in GrB_mxm</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// desc may be null, but if not NULL it must be initialized</comment>
    <expr_stmt><expr><call><name>GB_RETURN_IF_FAULTY</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Context</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <comment type="line">// Context is always present</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the contents of the descriptor</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// default values if descriptor is NULL</comment>
    <decl_stmt><decl><type><name>GrB_Desc_Value</name></type> <name>C_desc</name>    <init>= <expr><name>GxB_DEFAULT</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Desc_Value</name></type> <name>Mask_desc</name> <init>= <expr><name>GxB_DEFAULT</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Desc_Value</name></type> <name>In0_desc</name>  <init>= <expr><name>GxB_DEFAULT</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Desc_Value</name></type> <name>In1_desc</name>  <init>= <expr><name>GxB_DEFAULT</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Desc_Value</name></type> <name>AxB_desc</name>  <init>= <expr><name>GxB_DEFAULT</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nthreads_desc</name>        <init>= <expr><name>GxB_DEFAULT</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>chunk_desc</name>        <init>= <expr><name>GxB_DEFAULT</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>do_sort_desc</name>         <init>= <expr><name>GxB_DEFAULT</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">// non-defaults descriptor values</comment>
    <if_stmt><if>if <condition>(<expr><name>desc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// get the contents</comment>
        <expr_stmt><expr><name>C_desc</name>    <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>out</name></name></expr> ;</expr_stmt>   <comment type="line">// DEFAULT or REPLACE</comment>
        <expr_stmt><expr><name>Mask_desc</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>mask</name></name></expr> ;</expr_stmt>  <comment type="line">// DEFAULT, COMP, STRUCTURE, or COMP+STRUCTURE</comment>
        <expr_stmt><expr><name>In0_desc</name>  <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>in0</name></name></expr> ;</expr_stmt>   <comment type="line">// DEFAULT or TRAN</comment>
        <expr_stmt><expr><name>In1_desc</name>  <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>in1</name></name></expr> ;</expr_stmt>   <comment type="line">// DEFAULT or TRAN</comment>
        <expr_stmt><expr><name>AxB_desc</name>  <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>axb</name></name></expr> ;</expr_stmt>   <comment type="line">// DEFAULT, GUSTAVSON, HASH, or DOT</comment>
        <expr_stmt><expr><name>do_sort_desc</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>do_sort</name></name></expr> ;</expr_stmt>  <comment type="line">// DEFAULT, or true (nonzero)</comment>

        <comment type="line">// default is zero.  if descriptor-&gt;nthreads_max &lt;= 0, GraphBLAS selects</comment>
        <comment type="line">// automatically: any value between 1 and the global nthreads_max.  If</comment>
        <comment type="line">// descriptor-&gt;nthreads_max &gt; 0, then that defines the exact number of</comment>
        <comment type="line">// threads to use in the current GraphBLAS operation.</comment>
        <expr_stmt><expr><name>nthreads_desc</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>nthreads_max</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>chunk_desc</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>chunk</name></name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// check for valid values of each descriptor field</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>C_desc</name>    <operator>==</operator> <name>GxB_DEFAULT</name> <operator>||</operator> <name>C_desc</name>    <operator>==</operator> <name>GrB_REPLACE</name><operator>)</operator> <operator>||</operator>
        <operator>!</operator><operator>(</operator><name>Mask_desc</name> <operator>==</operator> <name>GxB_DEFAULT</name>   <operator>||</operator> <name>Mask_desc</name> <operator>==</operator> <name>GrB_COMP</name> <operator>||</operator>
          <name>Mask_desc</name> <operator>==</operator> <name>GrB_STRUCTURE</name> <operator>||</operator> <name>Mask_desc</name> <operator>==</operator> <name>GrB_COMP</name><operator>+</operator><name>GrB_STRUCTURE</name><operator>)</operator> <operator>||</operator>
        <operator>!</operator><operator>(</operator><name>In0_desc</name>  <operator>==</operator> <name>GxB_DEFAULT</name> <operator>||</operator> <name>In0_desc</name>  <operator>==</operator> <name>GrB_TRAN</name><operator>)</operator> <operator>||</operator>
        <operator>!</operator><operator>(</operator><name>In1_desc</name>  <operator>==</operator> <name>GxB_DEFAULT</name> <operator>||</operator> <name>In1_desc</name>  <operator>==</operator> <name>GrB_TRAN</name><operator>)</operator> <operator>||</operator>
        <operator>!</operator><operator>(</operator><name>AxB_desc</name>  <operator>==</operator> <name>GxB_DEFAULT</name> <operator>||</operator> <name>AxB_desc</name>  <operator>==</operator> <name>GxB_AxB_GUSTAVSON</name> <operator>||</operator>
          <name>AxB_desc</name>  <operator>==</operator> <name>GxB_AxB_DOT</name> <operator>||</operator>
          <name>AxB_desc</name>  <operator>==</operator> <name>GxB_AxB_HASH</name> <operator>||</operator> <name>AxB_desc</name>  <operator>==</operator> <name>GxB_AxB_SAXPY</name><operator>)</operator></expr>)</condition>
    <block>{<block_content> 
        <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>C_replace</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>*</operator><name>C_replace</name> <operator>=</operator> <operator>(</operator><name>C_desc</name> <operator>==</operator> <name>GrB_REPLACE</name><operator>)</operator></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>Mask_comp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>*</operator><name>Mask_comp</name> <operator>=</operator> <operator>(</operator><name>Mask_desc</name> <operator>==</operator> <name>GrB_COMP</name><operator>)</operator>
                  <operator>||</operator> <operator>(</operator><name>Mask_desc</name> <operator>==</operator> <name>GrB_COMP</name> <operator>+</operator> <name>GrB_STRUCTURE</name><operator>)</operator></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>Mask_struct</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>*</operator><name>Mask_struct</name> <operator>=</operator> <operator>(</operator><name>Mask_desc</name> <operator>==</operator> <name>GrB_STRUCTURE</name><operator>)</operator>
                    <operator>||</operator> <operator>(</operator><name>Mask_desc</name> <operator>==</operator> <name>GrB_STRUCTURE</name> <operator>+</operator> <name>GrB_COMP</name><operator>)</operator></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>In0_transpose</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>*</operator><name>In0_transpose</name> <operator>=</operator> <operator>(</operator><name>In0_desc</name> <operator>==</operator> <name>GrB_TRAN</name><operator>)</operator></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>In1_transpose</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>*</operator><name>In1_transpose</name> <operator>=</operator> <operator>(</operator><name>In1_desc</name> <operator>==</operator> <name>GrB_TRAN</name><operator>)</operator></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>AxB_method</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>*</operator><name>AxB_method</name> <operator>=</operator> <name>AxB_desc</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>do_sort</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>*</operator><name>do_sort</name> <operator>=</operator> <name>do_sort_desc</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// The number of threads is copied from the descriptor into the Context, so</comment>
    <comment type="line">// it is available to any internal function that needs it.</comment>
    <expr_stmt><expr><name><name>Context</name><operator>-&gt;</operator><name>nthreads_max</name></name> <operator>=</operator> <name>nthreads_desc</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>Context</name><operator>-&gt;</operator><name>chunk</name></name> <operator>=</operator> <name>chunk_desc</name></expr> ;</expr_stmt>

    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
