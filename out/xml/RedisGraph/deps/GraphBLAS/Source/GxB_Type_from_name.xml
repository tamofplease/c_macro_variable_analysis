<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GxB_Type_from_name.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GxB_Type_from_name: return a built-in GrB_Type from its name</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// GxB_Type_from_name returns the built-in GrB_Type corresponding to the</comment>
<comment type="line">// C name of the type as a string.  For user-defined types, type is returned</comment>
<comment type="line">// as NULL.  This is not an error condition.  This allows the user to write</comment>
<comment type="line">// code such as this:</comment>

<comment type="block">/*
    typedef struct { double x ; char stuff [16] ; } myfirsttype ;
    typedef struct { float z [4][4] ; int color ; } myquaternion ;
    GrB_Type MyType1, MyQType ;
    GxB_Type_new (&amp;MyType1, sizeof (myfirsttype), "myfirsttype",
        "typedef struct { double x ; char stuff [16] ; } myfirsttype ;") ;
    GxB_Type_new (&amp;MyQType, sizeof (myquaternion), "myquaternion",
        "typedef struct { float z [4][4] ; int color ; } myquaternion ;") ;

    GrB_Matrix A ;
    // ... create a matrix A of some built-in or user-defined type

    // later on, to query the type of A:
    size_t typesize ;
    GxB_Type_size (&amp;typesize, type) ;       // works for any type
    GrB_Type atype ;
    char atype_name [GxB_MAX_NAME_LEN] ;
    GxB_Matrix_type_name (atype_name, A) ;
    GxB_Type_from_name (&amp;atype, atype_name) ;
    if (atype == NULL)
    {
        // This is not yet an error.  It means that A has a user-defined type.
        if ((strcmp (atype_name, "myfirsttype")) == 0) atype = MyType1 ;
        else if ((strcmp (atype_name, "myquaternion")) == 0) atype = MyQType ;
        else { ... this is now an error ... the type of A is unknown.  }
        }
    }
*/</comment>

<comment type="line">// The alternative to this approach is a single function:</comment>
<comment type="line">//</comment>
<comment type="line">//      GxB_Matrix_type (&amp;type, A)</comment>
<comment type="line">//</comment>
<comment type="line">// which returns the GrB_Type of a GrB_Matrix A.  This has several problems.</comment>
<comment type="line">// The type, even for built-ins, is an ephemeral pointer.  It cannot be shared</comment>
<comment type="line">// across two processes, say with an MPI message or by writing a serialized</comment>
<comment type="line">// matrix to a file or a pipe and reading it in later.  A string (the</comment>
<comment type="line">// type_name) can be safely passed between these processes but a pointer (the</comment>
<comment type="line">// GrB_Type) cannot.  Once a receiving process has the type_name string,</comment>
<comment type="line">// obtained from a file, or another process, it can safely reconstruct the</comment>
<comment type="line">// corresponding GrB_Type with tests such as the ones below, or in the example</comment>
<comment type="line">// above.  This cannot be safely done with GxB_Matrix_type.</comment>

<comment type="line">// As a result, the GxB_Matrix_type function that appears in SuiteSparse</comment>
<comment type="line">// GraphBLAS has been declared "historical" and its use is discouraged.  It</comment>
<comment type="line">// won't be removed, to preserve backward compatibility, but it will eventually</comment>
<comment type="line">// removed from the user guide.  Use the string-based type mechanism instead.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GxB_Type_from_name</name>     <comment type="line">// return the GrB_Type from a name</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Type</name> <modifier>*</modifier></type><name>type</name></decl></parameter>,             <comment type="line">// built-in type, or NULL if not recognized</comment>
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type_name</name></decl></parameter>       <comment type="line">// array of size at least GxB_MAX_NAME_LEN</comment>
)</parameter_list>
<block>{<block_content> 

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>type_name</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine the GrB_Type from its name</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MATCH</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(strncmp (type_name, s, GxB_MAX_NAME_LEN) == 0)</cpp:value></cpp:define>

    <if_stmt><if>if      <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><literal type="string">"bool"</literal></expr></argument>          )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>type</name><operator>)</operator> <operator>=</operator> <name>GrB_BOOL</name></expr>   ;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><literal type="string">"int8_t"</literal></expr></argument>        )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>type</name><operator>)</operator> <operator>=</operator> <name>GrB_INT8</name></expr>   ;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><literal type="string">"int16_t"</literal></expr></argument>       )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>type</name><operator>)</operator> <operator>=</operator> <name>GrB_INT16</name></expr>  ;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><literal type="string">"int32_t"</literal></expr></argument>       )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>type</name><operator>)</operator> <operator>=</operator> <name>GrB_INT32</name></expr>  ;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><literal type="string">"int64_t"</literal></expr></argument>       )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>type</name><operator>)</operator> <operator>=</operator> <name>GrB_INT64</name></expr>  ;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><literal type="string">"uint8_t"</literal></expr></argument>       )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>type</name><operator>)</operator> <operator>=</operator> <name>GrB_UINT8</name></expr>  ;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><literal type="string">"uint16_t"</literal></expr></argument>      )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>type</name><operator>)</operator> <operator>=</operator> <name>GrB_UINT16</name></expr> ;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><literal type="string">"uint32_t"</literal></expr></argument>      )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>type</name><operator>)</operator> <operator>=</operator> <name>GrB_UINT32</name></expr> ;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><literal type="string">"uint64_t"</literal></expr></argument>      )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>type</name><operator>)</operator> <operator>=</operator> <name>GrB_UINT64</name></expr> ;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><literal type="string">"float"</literal></expr></argument>         )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>type</name><operator>)</operator> <operator>=</operator> <name>GrB_FP32</name></expr>   ;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><literal type="string">"double"</literal></expr></argument>        )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>type</name><operator>)</operator> <operator>=</operator> <name>GrB_FP64</name></expr>   ;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><literal type="string">"float complex"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>type</name><operator>)</operator> <operator>=</operator> <name>GxB_FC32</name></expr>   ;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><literal type="string">"GxB_FC32_t"</literal></expr></argument>    )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>type</name><operator>)</operator> <operator>=</operator> <name>GxB_FC32</name></expr>   ;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><literal type="string">"double complex"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>type</name><operator>)</operator> <operator>=</operator> <name>GxB_FC64</name></expr>   ;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><literal type="string">"GxB_FC64_t"</literal></expr></argument>    )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>type</name><operator>)</operator> <operator>=</operator> <name>GxB_FC64</name></expr>   ;</expr_stmt></block_content></block></if>
    <else>else
    <block>{<block_content>
        <comment type="line">// This is not an error.  Returning type as NULL means that A has a</comment>
        <comment type="line">// user-defined type.  GraphBLAS does not keep a registry of</comment>
        <comment type="line">// user-defined types, so let the user application match the name to</comment>
        <comment type="line">// the user-defined type (see example above).</comment>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>type</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
