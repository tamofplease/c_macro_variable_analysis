<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_zstd.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_zstd: wrapper for the ZSTD compression library</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// GB_zstd is a wrapper for the ZSTD compression library.  The</comment>
<comment type="line">// ZSTD library is compiled with ZSTD_DEP enabled (which is not</comment>
<comment type="line">// the default), and configured to use the SuiteSparse:GraphBLAS functions</comment>
<comment type="line">// in place of malloc/calloc/free.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_serialize.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_zstd.h"</cpp:file></cpp:include>

<function><type><name>void</name> <modifier>*</modifier></type><name>ZSTD_malloc</name> <parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><call><name>GB_Global_malloc_function</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>ZSTD_calloc</name> <parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// ns = n*s, the size of the space to allocate</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>ns</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><call><name>GB_size_t_multiply</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ns</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <comment type="line">// malloc the space and then use memset to clear it</comment>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>GB_Global_malloc_function</name> <argument_list>(<argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ZSTD_free</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>GB_Global_free_function</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// ZSTD uses switch statements with no default case.</comment>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wswitch-default"</cpp:literal></cpp:pragma>

<comment type="line">// Include the unmodified zstd, version 1.5.3.  This</comment>
<comment type="line">// allows the ZSTD_* functions to be renamed via GB_zstd.h, and avoids any</comment>
<comment type="line">// conflict with the original -lzstd, which might be linked in by the user</comment>
<comment type="line">// application.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zstd_subset/common/debug.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zstd_subset/common/entropy_common.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zstd_subset/common/error_private.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zstd_subset/common/fse_decompress.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zstd_subset/common/pool.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zstd_subset/common/threading.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zstd_subset/common/xxhash.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zstd_subset/common/zstd_common.c"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zstd_subset/compress/fse_compress.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zstd_subset/compress/hist.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zstd_subset/compress/huf_compress.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zstd_subset/compress/zstd_compress.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zstd_subset/compress/zstd_compress_literals.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zstd_subset/compress/zstd_compress_sequences.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zstd_subset/compress/zstd_compress_superblock.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zstd_subset/compress/zstd_double_fast.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zstd_subset/compress/zstd_fast.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zstd_subset/compress/zstd_lazy.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zstd_subset/compress/zstd_ldm.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zstd_subset/compress/zstdmt_compress.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zstd_subset/compress/zstd_opt.c"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zstd_subset/decompress/huf_decompress.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zstd_subset/decompress/zstd_ddict.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zstd_subset/decompress/zstd_decompress_block.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zstd_subset/decompress/zstd_decompress.c"</cpp:file></cpp:include>


</unit>
