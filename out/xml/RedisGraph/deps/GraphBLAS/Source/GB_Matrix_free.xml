<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_Matrix_free.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_Matrix_free: free a GrB_Matrix or GrB_Vector</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Free all the content of a matrix.  After GB_Matrix_free (&amp;A), the header A</comment>
<comment type="line">// is freed and set to NULL if the header of A was originally dynamically</comment>
<comment type="line">// allocated.  Otherwise, A is not freed.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_Matrix_free</name>             <comment type="line">// free a matrix</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name> <modifier>*</modifier></type><name>Ahandle</name></decl></parameter>         <comment type="line">// handle of matrix to free</comment>
)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>Ahandle</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><operator>*</operator><name>Ahandle</name></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>A</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>magic</name></name> <operator>==</operator> <name>GB_MAGIC</name> <operator>||</operator> <name><name>A</name><operator>-&gt;</operator><name>magic</name></name> <operator>==</operator> <name>GB_MAGIC2</name><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// free all content of A</comment>
            <decl_stmt><decl><type><name>size_t</name></type> <name>header_size</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>header_size</name></name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_phybix_free</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>static_header</name></name><operator>)</operator></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// free the header of A itself, unless it is static</comment>
                <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_FREED</name></expr> ;</expr_stmt>       <comment type="line">// to help detect dangling pointers</comment>
                <expr_stmt><expr><call><name>GB_FREE</name> <argument_list>(<argument><expr><name>Ahandle</name></expr></argument>, <argument><expr><name>header_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ahandle</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

</unit>
