<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_resize.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_resize: change the size of a matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_select.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>                     \
<cpp:value>{                                       \
    GB_FREE (&amp;Ax_new, Ax_new_size) ;    \
    GB_FREE (&amp;Ab_new, Ab_new_size) ;    \
    GB_phybix_free (A) ;                \
}</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_resize: resize a GrB_Matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>GB_resize</name>              <comment type="line">// change the size of a matrix</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,               <comment type="line">// matrix to modify</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name></type> <name>nrows_new</name></decl></parameter>,  <comment type="line">// new number of rows in matrix</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name></type> <name>ncols_new</name></decl></parameter>,  <comment type="line">// new number of columns in matrix</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ax_new</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Ax_new_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int8_t</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ab_new</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Ab_new_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A to resize"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// handle the CSR/CSC format</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>vdim_old</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>vlen_old</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>vlen_new</name></decl>, <decl><type ref="prev"/><name>vdim_new</name></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>is_csc</name></name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name>vlen_new</name> <operator>=</operator> <name>nrows_new</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>vdim_new</name> <operator>=</operator> <name>ncols_new</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <expr_stmt><expr><name>vlen_new</name> <operator>=</operator> <name>ncols_new</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>vdim_new</name> <operator>=</operator> <name>nrows_new</name></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>vdim_new</name> <operator>==</operator> <name>vdim_old</name> <operator>&amp;&amp;</operator> <name>vlen_new</name> <operator>==</operator> <name>vlen_old</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// nothing to do</comment>
        <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// delete any lingering zombies and assemble any pending tuples</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// only do so if either dimension is shrinking, or if pending tuples exist</comment>
    <comment type="line">// and vdim_old &lt;= 1 and vdim_new &gt; 1, since in that case, Pending-&gt;j has</comment>
    <comment type="line">// not been allocated yet, but would be required in the resized matrix.</comment>
    <comment type="line">// If A is jumbled, it must be sorted.</comment>

    <if_stmt><if>if <condition>(<expr><name>vdim_new</name> <operator>&lt;</operator> <name>vdim_old</name> <operator>||</operator> <name>vlen_new</name> <operator>&lt;</operator> <name>vlen_old</name> <operator>||</operator> <name><name>A</name><operator>-&gt;</operator><name>jumbled</name></name> <operator>||</operator>
        <operator>(</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>vdim_old</name> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>vdim_new</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GB_MATRIX_WAIT</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A to resize, wait"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// resize the matrix</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_is_bitmap</name> <init>= <expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_is_full</name> <init>= <expr><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_is_shrinking</name> <init>= <expr><operator>(</operator><name>vdim_new</name> <operator>&lt;=</operator> <name>vdim_old</name> <operator>&amp;&amp;</operator> <name>vlen_new</name> <operator>&lt;=</operator> <name>vlen_old</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>A_is_full</name> <operator>||</operator> <name>A_is_bitmap</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>A_is_shrinking</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// A is full or bitmap</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// get the old and new dimensions</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>anz_new</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><call><name>GB_int64_multiply</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Index</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>anz_new</name></expr></argument>,
            <argument><expr><name>vlen_new</name></expr></argument>, <argument><expr><name>vdim_new</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>anz_new</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>nzmax_new</name> <init>= <expr><call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>anz_new</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>in_place</name> <init>= <expr><name>A_is_full</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>vlen_new</name> <operator>==</operator> <name>vlen_old</name> <operator>||</operator> <name>vdim_new</name> <operator>&lt;=</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>asize</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_iso</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr></init></decl> ;</decl_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// allocate or reallocate A-&gt;x, unless A is iso</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><name>ok</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>A_iso</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>in_place</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// reallocate A-&gt;x in-place; no data movement needed</comment>
                <expr_stmt><expr><call><name>GB_REALLOC</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>nzmax_new</name><operator>*</operator><name>asize</name></expr></argument>, <argument><expr><name>GB_void</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>x_size</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>ok</name></expr></argument>,
                    <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// allocate new space for A-&gt;x; use calloc to ensure all space</comment>
                <comment type="line">// is initialized.</comment>
                <expr_stmt><expr><name>Ax_new</name> <operator>=</operator> <call><name>GB_CALLOC</name> <argument_list>(<argument><expr><name>nzmax_new</name><operator>*</operator><name>asize</name></expr></argument>, <argument><expr><name>GB_void</name></expr></argument>, <comment type="line">// x:OK:calloc</comment>
                    <argument><expr><operator>&amp;</operator><name>Ax_new_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name>ok</name> <operator>=</operator> <operator>(</operator><name>Ax_new</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// allocate or reallocate A-&gt;b</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>in_place</name> <operator>&amp;&amp;</operator> <name>A_is_bitmap</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// allocate new space for A-&gt;b</comment>
            <expr_stmt><expr><name>Ab_new</name> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><name>nzmax_new</name><operator>*</operator><name>asize</name></expr></argument>, <argument><expr><name>int8_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ab_new_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>ok</name> <operator>=</operator> <name>ok</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>Ab_new</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// out of memory</comment>
            <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// move data if not in-place</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>in_place</name></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// determine number of threads to use</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>anz_new</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// resize Ax, unless A is iso</comment>
            <comment type="line">//------------------------------------------------------------------</comment>
        
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>A_iso</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ax_old</name> <init>= <expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>

                <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name></decl> ;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>vdim_new</name> <operator>&lt;=</operator> <literal type="number">4</literal><operator>*</operator><name>nthreads</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// use all threads for each vector</comment>
                    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>vdim_new</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content> 
                        <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>pdest</name> <init>= <expr><name>Ax_new</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>vlen_new</name> <operator>*</operator> <name>asize</name></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>psrc</name>  <init>= <expr><name>Ax_old</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>vlen_old</name> <operator>*</operator> <name>asize</name></expr></init></decl> ;</decl_stmt>
                        <expr_stmt><expr><call><name>GB_memcpy</name> <argument_list>(<argument><expr><name>pdest</name></expr></argument>, <argument><expr><name>psrc</name></expr></argument>, <argument><expr><name>vlen_new</name> <operator>*</operator> <name>asize</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <comment type="line">// use a single thread for each vector</comment>
                    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
                        <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
                    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>vdim_new</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content> 
                        <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>pdest</name> <init>= <expr><name>Ax_new</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>vlen_new</name> <operator>*</operator> <name>asize</name></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>psrc</name>  <init>= <expr><name>Ax_old</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>vlen_old</name> <operator>*</operator> <name>asize</name></expr></init></decl> ;</decl_stmt>
                        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>pdest</name></expr></argument>, <argument><expr><name>psrc</name></expr></argument>, <argument><expr><name>vlen_new</name> <operator>*</operator> <name>asize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><call><name>GB_FREE</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Ax_old</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>x_size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>Ax_new</name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>x_size</name></name> <operator>=</operator> <name>Ax_new_size</name></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// resize Ab if A is bitmap, and count the # of entries</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <if_stmt><if>if <condition>(<expr><name>A_is_bitmap</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ab_old</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pnew</name></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>anvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
                <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
                    <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:anvals</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
                <for>for <control>(<init><expr><name>pnew</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>pnew</name> <operator>&lt;</operator> <name>anz_new</name></expr> ;</condition> <incr><expr><name>pnew</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content> 
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name>pnew</name> <operator>%</operator> <name>vlen_new</name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><name>pnew</name> <operator>/</operator> <name>vlen_new</name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pold</name> <init>= <expr><name>i</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>vlen_old</name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int8_t</name></type> <name>ab</name> <init>= <expr><name><name>Ab_old</name> <index>[<expr><name>pold</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><name><name>Ab_new</name> <index>[<expr><name>pnew</name></expr>]</index></name> <operator>=</operator> <name>ab</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><name>anvals</name> <operator>+=</operator> <name>ab</name></expr> ;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <name>anvals</name></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GB_FREE</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Ab_old</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>b_size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <name>Ab_new</name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>b_size</name></name> <operator>=</operator> <name>Ab_new_size</name></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// adjust dimensions and return result</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name> <operator>=</operator> <name>vdim_new</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name> <operator>=</operator> <name>vlen_new</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name> <operator>=</operator> <name>vdim_new</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>vlen_new</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>vdim_new</name></expr></else></ternary></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A bitmap/full shrunk"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// convert A to hypersparse and resize it</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// convert to hypersparse</comment>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_convert_any_to_hyper</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// A-&gt;Y will be invalidated, so free it</comment>
        <expr_stmt><expr><call><name>GB_hyper_hash_free</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// resize the number of sparse vectors</comment>
        <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ah</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name> <operator>=</operator> <name>vdim_new</name></expr> ;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>vdim_new</name> <operator>&lt;</operator> <name><name>A</name><operator>-&gt;</operator><name>plen</name></name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// reduce the size of A-&gt;p and A-&gt;h; this cannot fail</comment>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_hyper_realloc</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>vdim_new</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>Ap</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>Ah</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>vdim_new</name> <operator>&lt;</operator> <name>vdim_old</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// descrease A-&gt;nvec to delete the vectors outside the range</comment>
            <comment type="line">// 0...vdim_new-1.</comment>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pleft</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pright</name> <init>= <expr><call><name>GB_IMIN</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr></argument>, <argument><expr><name>vdim_new</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_SPLIT_BINARY_SEARCH</name> <argument_list>(<argument><expr><name>vdim_new</name></expr></argument>, <argument><expr><name>Ah</name></expr></argument>, <argument><expr><name>pleft</name></expr></argument>, <argument><expr><name>pright</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name> <operator>=</operator> <name>pleft</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <name><name>Ap</name> <index>[<expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr>]</index></name></expr> ;</expr_stmt>

            <comment type="line">// number of vectors is decreasing, need to count the new number of</comment>
            <comment type="line">// non-empty vectors: done during pruning or by selector, below.</comment>
            <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>     <comment type="line">// recomputed just below</comment>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// resize the length of each vector</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// if vlen is shrinking, delete entries outside the new matrix</comment>
        <if_stmt><if>if <condition>(<expr><name>vlen_new</name> <operator>&lt;</operator> <name>vlen_old</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_selector</name> <argument_list>(
                <argument><expr><name>NULL</name></expr></argument>,                   <comment type="line">// A in-place</comment>
                <argument><expr><name>GB_ROWLE_idxunop_code</name></expr></argument>,  <comment type="line">// use the opcode only</comment>
                <argument><expr><name>NULL</name></expr></argument>,                   <comment type="line">// no operator, just opcode is needed</comment>
                <argument><expr><name>false</name></expr></argument>,                  <comment type="line">// flipij is false</comment>
                <argument><expr><name>A</name></expr></argument>,                      <comment type="line">// input/output matrix</comment>
                <argument><expr><name>vlen_new</name><operator>-</operator><literal type="number">1</literal></expr></argument>,             <comment type="line">// ithunk</comment>
                <argument><expr><name>NULL</name></expr></argument>,                   <comment type="line">// no Thunk GrB_Scalar</comment>
                <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// vlen has been resized</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name> <operator>=</operator> <name>vlen_new</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A vlen resized"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// conform the matrix to its desired sparsity structure</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_conform</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

</unit>
