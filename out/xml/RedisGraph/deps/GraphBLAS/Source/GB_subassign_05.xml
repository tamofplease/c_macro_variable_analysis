<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_subassign_05.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_subassign_05: C(I,J)&lt;M&gt; = scalar ; no S</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Method 05: C(I,J)&lt;M&gt; = scalar ; no S</comment>

<comment type="line">// M:           present</comment>
<comment type="line">// Mask_comp:   false</comment>
<comment type="line">// C_replace:   false</comment>
<comment type="line">// accum:       NULL</comment>
<comment type="line">// A:           scalar</comment>
<comment type="line">// S:           none</comment>

<comment type="line">// C: not bitmap</comment>
<comment type="line">// M: any sparsity</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_subassign_methods.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_subassign_05</name>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,
    <comment type="line">// input:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>I</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nI</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>Ikind</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name><name>Icolon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>J</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nJ</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>Jkind</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name><name>Jcolon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_struct</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>scalar</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>atype</name></decl></parameter>,
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_aliased</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <comment type="line">// NO ALIAS of C==M</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_EMPTY_TASKLIST</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_MATRIX_WAIT_IF_JUMBLED</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_MATRIX_WAIT_IF_JUMBLED</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>GB_GET_C</name></expr> ;</expr_stmt>      <comment type="line">// C must not be bitmap</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>zorig</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>nzombies</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ch</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cp</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>C_is_hyper</name> <init>= <expr><operator>(</operator><name>Ch</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>Cnvec</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>nvec</name></name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>GB_GET_C_HYPER_HASH</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>GB_GET_MASK</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>GB_GET_SCALAR</name></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>accum</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// Method 05: C(I,J)&lt;M&gt; = scalar ; no S</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// Time: Close to Optimal:  the method must iterate over all entries in M,</comment>
    <comment type="line">// so the time is Omega(nnz(M)).  For each entry M(i,j)=1, the</comment>
    <comment type="line">// corresponding entry in C must be found and updated (inserted or</comment>
    <comment type="line">// modified).  This method does this with a binary search of C(:,jC) or a</comment>
    <comment type="line">// direct lookup if C(:,jC) is dense.  The time is thus O(nnz(M)*log(n)) in</comment>
    <comment type="line">// the worst case, usually less than that since C(:,jC) often has O(1)</comment>
    <comment type="line">// entries.  An additional time of O(|J|*log(Cnvec)) is added if C is</comment>
    <comment type="line">// hypersparse.  There is no equivalent method that computes</comment>
    <comment type="line">// C(I,J)&lt;M&gt;=scalar using the matrix S.</comment>

    <comment type="line">// Method 05 and Method 07 are very similar.  Also compare with Method 06n.</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// Parallel: slice M into coarse/fine tasks (Method 05, 06n, 07)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_SUBASSIGN_ONE_SLICE</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <comment type="line">// M cannot be jumbled </comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// phase 1: undelete zombies, update entries, and count pending tuples</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
        <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:nzombies</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// get the task descriptor</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><name>GB_GET_TASK_DESCRIPTOR_PHASE1</name></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// compute all vectors in this task</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get j, the kth vector of M</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Mh</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_GET_VECTOR</name> <argument_list>(<argument><expr><name>pM</name></expr></argument>, <argument><expr><name>pM_end</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>pA_end</name></expr></argument>, <argument><expr><name>Mp</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>Mvlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>mjnz</name> <init>= <expr><name>pM_end</name> <operator>-</operator> <name>pM</name></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>mjnz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get jC, the corresponding vector of C</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>GB_LOOKUP_VECTOR_jC</name> <argument_list>(<argument><expr><name>fine_task</name></expr></argument>, <argument><expr><name>taskid</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>cjnz</name> <init>= <expr><name>pC_end</name> <operator>-</operator> <name>pC_start</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>cjdense</name> <init>= <expr><operator>(</operator><name>cjnz</name> <operator>==</operator> <name>Cvlen</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C(I,jC)&lt;M(:,j)&gt; = scalar ; no S</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <if_stmt><if>if <condition>(<expr><name>cjdense</name></expr>)</condition>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C(:,jC) is dense so the binary search of C is not needed</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <for>for <control>( <init>;</init> <condition><expr><name>pM</name> <operator>&lt;</operator> <name>pM_end</name></expr> ;</condition> <incr><expr><name>pM</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// update C(iC,jC), but only if M(iA,j) allows it</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <decl_stmt><decl><type><name>bool</name></type> <name>mij</name> <init>= <expr><call><name>GBB</name> <argument_list>(<argument><expr><name>Mb</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>GB_mcast</name> <argument_list>(<argument><expr><name>Mx</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>mij</name></expr>)</condition>
                    <block>{<block_content> 
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>iA</name> <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Mi</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>Mvlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                        <expr_stmt><expr><name>GB_iC_DENSE_LOOKUP</name></expr> ;</expr_stmt>

                        <comment type="line">// ----[C A 1] or [X A 1]-------------------------------</comment>
                        <comment type="line">// [C A 1]: action: ( =A ): copy A into C, no accum</comment>
                        <comment type="line">// [X A 1]: action: ( undelete ): zombie lives</comment>
                        <expr_stmt><expr><name>GB_noaccum_C_A_1_scalar</name></expr> ;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>

            </block_content>}</block></if>
            <else>else
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C(:,jC) is sparse; use binary search for C</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <for>for <control>( <init>;</init> <condition><expr><name>pM</name> <operator>&lt;</operator> <name>pM_end</name></expr> ;</condition> <incr><expr><name>pM</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// update C(iC,jC), but only if M(iA,j) allows it</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <decl_stmt><decl><type><name>bool</name></type> <name>mij</name> <init>= <expr><call><name>GBB</name> <argument_list>(<argument><expr><name>Mb</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>GB_mcast</name> <argument_list>(<argument><expr><name>Mx</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>mij</name></expr>)</condition>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>iA</name> <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Mi</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>Mvlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

                        <comment type="line">// find C(iC,jC) in C(:,jC)</comment>
                        <expr_stmt><expr><name>GB_iC_BINARY_SEARCH</name></expr> ;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name>cij_found</name></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// ----[C A 1] or [X A 1]---------------------------</comment>
                            <comment type="line">// [C A 1]: action: ( =A ): copy A into C, no accum</comment>
                            <comment type="line">// [X A 1]: action: ( undelete ): zombie lives</comment>
                            <expr_stmt><expr><name>GB_noaccum_C_A_1_scalar</name></expr> ;</expr_stmt>
                        </block_content>}</block></if>
                        <else>else
                        <block>{<block_content> 
                            <comment type="line">// ----[. A 1]--------------------------------------</comment>
                            <comment type="line">// [. A 1]: action: ( insert )</comment>
                            <expr_stmt><expr><name>task_pending</name><operator>++</operator></expr> ;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><name>GB_PHASE1_TASK_WRAPUP</name></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// phase 2: insert pending tuples</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_PENDING_CUMSUM</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>zorig</name> <operator>=</operator> <name><name>C</name><operator>-&gt;</operator><name>nzombies</name></name></expr> ;</expr_stmt>

    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
        <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>&amp;&amp;:pending_sorted</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// get the task descriptor</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><name>GB_GET_TASK_DESCRIPTOR_PHASE2</name></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// compute all vectors in this task</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get j, the kth vector of M</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Mh</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_GET_VECTOR</name> <argument_list>(<argument><expr><name>pM</name></expr></argument>, <argument><expr><name>pM_end</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>pA_end</name></expr></argument>, <argument><expr><name>Mp</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>Mvlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>mjnz</name> <init>= <expr><name>pM_end</name> <operator>-</operator> <name>pM</name></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>mjnz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get jC, the corresponding vector of C</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>GB_LOOKUP_VECTOR_jC</name> <argument_list>(<argument><expr><name>fine_task</name></expr></argument>, <argument><expr><name>taskid</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>cjdense</name> <init>= <expr><operator>(</operator><operator>(</operator><name>pC_end</name> <operator>-</operator> <name>pC_start</name><operator>)</operator> <operator>==</operator> <name>Cvlen</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C(I,jC)&lt;M(:,j)&gt; = scalar ; no S</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cjdense</name></expr>)</condition>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C(:,jC) is sparse; use binary search for C</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <for>for <control>( <init>;</init> <condition><expr><name>pM</name> <operator>&lt;</operator> <name>pM_end</name></expr> ;</condition> <incr><expr><name>pM</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// update C(iC,jC), but only if M(iA,j) allows it</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <decl_stmt><decl><type><name>bool</name></type> <name>mij</name> <init>= <expr><call><name>GBB</name> <argument_list>(<argument><expr><name>Mb</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>GB_mcast</name> <argument_list>(<argument><expr><name>Mx</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>mij</name></expr>)</condition>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>iA</name> <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Mi</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>Mvlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

                        <comment type="line">// find C(iC,jC) in C(:,jC)</comment>
                        <expr_stmt><expr><name>GB_iC_BINARY_SEARCH</name></expr> ;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cij_found</name></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// ----[. A 1]--------------------------------------</comment>
                            <comment type="line">// [. A 1]: action: ( insert )</comment>
                            <expr_stmt><expr><call><name>GB_PENDING_INSERT</name> <argument_list>(<argument><expr><name>scalar</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><name>GB_PHASE2_TASK_WRAPUP</name></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// finalize the matrix and return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_SUBASSIGN_WRAPUP</name></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
