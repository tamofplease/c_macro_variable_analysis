<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_concat_hyper.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_concat_hyper: concatenate an array of matrices into a hypersparse matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>                 \
<cpp:value>{                                   \
    GB_FREE (&amp;Wi, Wi_size) ;        \
    GB_FREE_WORK (&amp;Wj, Wj_size) ;   \
    GB_FREE_WORK (&amp;Wx, Wx_size) ;   \
    GB_phybix_free (C) ;            \
}</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_concat.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_concat_hyper</name>            <comment type="line">// concatenate into a hypersparse matrix</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,                   <comment type="line">// input/output matrix for results</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>C_iso</name></decl></parameter>,               <comment type="line">// if true, construct C as iso</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GB_void</name> <modifier>*</modifier></type><name>cscalar</name></decl></parameter>,         <comment type="line">// iso value of C, if C is iso </comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>cnz</name></decl></parameter>,              <comment type="line">// # of entries in C</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name> <modifier>*</modifier></type><name>Tiles</name></decl></parameter>,        <comment type="line">// 2D row-major array of size m-by-n,</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name></type> <name>m</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name></type> <name>n</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Tile_rows</name></decl></parameter>,  <comment type="line">// size m+1</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Tile_cols</name></decl></parameter>,  <comment type="line">// size n+1</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate triplet workspace to construct C as hypersparse</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C input to concat hyper"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Wi</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Wi_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Wj</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Wj_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Wx</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Wx_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>ctype</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>cvlen</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>cvdim</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>vdim</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>csc</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>is_csc</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>csize</name> <init>= <expr><name><name>ctype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>ccode</name> <init>= <expr><name><name>ctype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>float</name></type> <name>hyper_switch</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>hyper_switch</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>bitmap_switch</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>bitmap_switch</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>sparsity_control</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>sparsity_control</name></name></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>GB_phybix_free</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>Wi</name> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><name>cnz</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Wi_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>               <comment type="line">// becomes C-&gt;i</comment>
    <expr_stmt><expr><name>Wj</name> <operator>=</operator> <call><name>GB_MALLOC_WORK</name> <argument_list>(<argument><expr><name>cnz</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Wj_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>          <comment type="line">// freed below</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>C_iso</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name>Wx</name> <operator>=</operator> <call><name>GB_MALLOC_WORK</name> <argument_list>(<argument><expr><name>cnz</name> <operator>*</operator> <name>csize</name></expr></argument>, <argument><expr><name>GB_void</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Wx_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <comment type="line">// freed below</comment>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>Wi</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>Wj</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><operator>!</operator><name>C_iso</name> <operator>&amp;&amp;</operator> <name>Wx</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>nouter</name> <init>= <expr><ternary><condition><expr><name>csc</name></expr> ?</condition><then> <expr><name>n</name></expr> </then><else>: <expr><name>m</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>ninner</name> <init>= <expr><ternary><condition><expr><name>csc</name></expr> ?</condition><then> <expr><name>m</name></expr> </then><else>: <expr><name>n</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// concatenate all matrices into the list of triplets</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>pC</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>outer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>outer</name> <operator>&lt;</operator> <name>nouter</name></expr> ;</condition> <incr><expr><name>outer</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>inner</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>inner</name> <operator>&lt;</operator> <name>ninner</name></expr> ;</condition> <incr><expr><name>inner</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get the tile A</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><name>A</name> <operator>=</operator> <ternary><condition><expr><name>csc</name></expr> ?</condition><then> <expr><call><name>GB_TILE</name> <argument_list>(<argument><expr><name>Tiles</name></expr></argument>, <argument><expr><name>inner</name></expr></argument>, <argument><expr><name>outer</name></expr></argument>)</argument_list></call></expr>
                    </then><else>: <expr><call><name>GB_TILE</name> <argument_list>(<argument><expr><name>Tiles</name></expr></argument>, <argument><expr><name>outer</name></expr></argument>, <argument><expr><name>inner</name></expr></argument>)</argument_list></call></expr></else></ternary></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ANY_PENDING_WORK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// determine where to place the tile in C</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// The tile A appears in vectors cvstart:cvend-1 of C, and indices</comment>
            <comment type="line">// cistart:ciend-1.</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>cvstart</name></decl>, <decl><type ref="prev"/><name>cistart</name></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>csc</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// C is held by column</comment>
                <comment type="line">// Tiles is row-major and accessed in column order</comment>
                <expr_stmt><expr><name>cvstart</name> <operator>=</operator> <name><name>Tile_cols</name> <index>[<expr><name>outer</name></expr>]</index></name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>cistart</name> <operator>=</operator> <name><name>Tile_rows</name> <index>[<expr><name>inner</name></expr>]</index></name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// C is held by row</comment>
                <comment type="line">// Tiles is row-major and accessed in row order</comment>
                <expr_stmt><expr><name>cvstart</name> <operator>=</operator> <name><name>Tile_rows</name> <index>[<expr><name>outer</name></expr>]</index></name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>cistart</name> <operator>=</operator> <name><name>Tile_cols</name> <index>[<expr><name>inner</name></expr>]</index></name></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// extract the tuples from tile A</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// if A is iso but C is not, extractTuples expands A-&gt;x [0] into</comment>
            <comment type="line">// all Wx [...].   If both A and C are iso, then all tiles are iso,</comment>
            <comment type="line">// and Wx is not extracted.</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>anz</name> <init>= <expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_extractTuples</name> <argument_list>(
                <argument><expr><operator>(</operator><name>GrB_Index</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><ternary><condition><expr><name>csc</name></expr> ?</condition><then> <expr><name>Wi</name></expr> </then><else>: <expr><name>Wj</name></expr></else></ternary><operator>)</operator> <operator>+</operator> <name>pC</name><operator>)</operator></expr></argument>,
                <argument><expr><operator>(</operator><name>GrB_Index</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><ternary><condition><expr><name>csc</name></expr> ?</condition><then> <expr><name>Wj</name></expr> </then><else>: <expr><name>Wi</name></expr></else></ternary><operator>)</operator> <operator>+</operator> <name>pC</name><operator>)</operator></expr></argument>,
                <argument><expr><ternary><condition><expr><operator>(</operator><name>C_iso</name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>(</operator><name>Wx</name> <operator>+</operator> <name>pC</name> <operator>*</operator> <name>csize</name><operator>)</operator></expr></else></ternary></expr></argument>,
                <argument><expr><operator>(</operator><name>GrB_Index</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name>anz</name><operator>)</operator></expr></argument>, <argument><expr><name>ccode</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// adjust the indices to reflect their new place in C</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int</name></type> <name>nth</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>anz</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>cistart</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>cvstart</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content> 
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pA</name></decl> ;</decl_stmt>
                <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nth</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
                <for>for <control>(<init><expr><name>pA</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>pA</name> <operator>&lt;</operator> <name>anz</name></expr> ;</condition> <incr><expr><name>pA</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>Wi</name> <index>[<expr><name>pC</name> <operator>+</operator> <name>pA</name></expr>]</index></name> <operator>+=</operator> <name>cistart</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><name><name>Wj</name> <index>[<expr><name>pC</name> <operator>+</operator> <name>pA</name></expr>]</index></name> <operator>+=</operator> <name>cvstart</name></expr> ;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>cistart</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content> 
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pA</name></decl> ;</decl_stmt>
                <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nth</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
                <for>for <control>(<init><expr><name>pA</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>pA</name> <operator>&lt;</operator> <name>anz</name></expr> ;</condition> <incr><expr><name>pA</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>Wi</name> <index>[<expr><name>pC</name> <operator>+</operator> <name>pA</name></expr>]</index></name> <operator>+=</operator> <name>cistart</name></expr> ;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>cvstart</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content> 
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pA</name></decl> ;</decl_stmt>
                <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nth</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
                <for>for <control>(<init><expr><name>pA</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>pA</name> <operator>&lt;</operator> <name>anz</name></expr> ;</condition> <incr><expr><name>pA</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>Wj</name> <index>[<expr><name>pC</name> <operator>+</operator> <name>pA</name></expr>]</index></name> <operator>+=</operator> <name>cvstart</name></expr> ;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// advance the tuple counter</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><name>pC</name> <operator>+=</operator> <name>anz</name></expr> ;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// build C from the triplets</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_void</name> <modifier>*</modifier></type><name>S_input</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>C_iso</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name>S_input</name> <operator>=</operator> <name>cscalar</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_builder</name> <argument_list>(
        <argument><expr><name>C</name></expr></argument>,                      <comment type="line">// create C using a static or dynamic header</comment>
        <argument><expr><name>ctype</name></expr></argument>,                  <comment type="line">// C-&gt;type</comment>
        <argument><expr><name>cvlen</name></expr></argument>,                  <comment type="line">// C-&gt;vlen</comment>
        <argument><expr><name>cvdim</name></expr></argument>,                  <comment type="line">// C-&gt;vdim</comment>
        <argument><expr><name>csc</name></expr></argument>,                    <comment type="line">// C-&gt;is_csc</comment>
        <argument><expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Wi</name></expr></argument>,       <comment type="line">// Wi is C-&gt;i on output, or freed on error</comment>
        <argument><expr><operator>&amp;</operator><name>Wi_size</name></expr></argument>,
        <argument><expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Wj</name></expr></argument>,       <comment type="line">// Wj, free on output</comment>
        <argument><expr><operator>&amp;</operator><name>Wj_size</name></expr></argument>,
        <argument><expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Wx</name></expr></argument>,       <comment type="line">// Wx, free on output; or NULL if C is iso</comment>
        <argument><expr><operator>&amp;</operator><name>Wx_size</name></expr></argument>,
        <argument><expr><name>false</name></expr></argument>,                  <comment type="line">// tuples need to be sorted</comment>
        <argument><expr><name>true</name></expr></argument>,                   <comment type="line">// no duplicates</comment>
        <argument><expr><name>cnz</name></expr></argument>,                    <comment type="line">// size of Wi and Wj in # of tuples</comment>
        <argument><expr><name>true</name></expr></argument>,                   <comment type="line">// is_matrix: unused</comment>
        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,             <comment type="line">// original I,J tuples</comment>
        <argument><expr><name>S_input</name></expr></argument>,                <comment type="line">// cscalar if C is iso, or NULL</comment>
        <argument><expr><name>C_iso</name></expr></argument>,                  <comment type="line">// true if C is iso</comment>
        <argument><expr><name>cnz</name></expr></argument>,                    <comment type="line">// # of tuples</comment>
        <argument><expr><name>NULL</name></expr></argument>,                   <comment type="line">// no duplicates, so dup is NUL</comment>
        <argument><expr><name>ctype</name></expr></argument>,                  <comment type="line">// the type of Wx (no typecasting)</comment>
        <argument><expr><name>true</name></expr></argument>,                   <comment type="line">// burble is allowed</comment>
        <argument><expr><name>Context</name></expr></argument>
    )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>hyper_switch</name></name> <operator>=</operator> <name>hyper_switch</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>bitmap_switch</name></name> <operator>=</operator> <name>bitmap_switch</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>sparsity_control</name></name> <operator>=</operator> <name>sparsity_control</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C from concat hyper"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// workspace has been freed by GB_builder, or transplanted into C</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Wi</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Wj</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Wx</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
