<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_subref_slice.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_subref_slice: construct coarse/fine tasks for C = A(I,J)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Determine the tasks for computing C=A(I,J).  The matrix C has Cnvec vectors,</comment>
<comment type="line">// and these are divided into coarse and fine tasks.  A coarse task will</comment>
<comment type="line">// compute one or more whole vectors of C.  A fine task operates on a slice of</comment>
<comment type="line">// a single vector of C.  The slice can be done by the # of entries in the</comment>
<comment type="line">// corresponding vector of A, or by the list of indices I, depending on how the</comment>
<comment type="line">// work is done for that method.</comment>

<comment type="line">// The (kC)th vector will access A(imin:imax,kA) in Ai,Ax [pA:pA_end-1], where</comment>
<comment type="line">// pA = Ap_start [kC] and pA_end = Ap_end [kC].</comment>

<comment type="line">// The computation of each vector C(:,kC) = A(I,kA) is by done using one of 12</comment>
<comment type="line">// different cases, depending on the vector, as determined by GB_subref_method.</comment>
<comment type="line">// Not all vectors in C are computed using the same method.</comment>

<comment type="line">// Note that J can have duplicates.  kC is unique (0:Cnvec-1) but the</comment>
<comment type="line">// corresponding vector kA in A may repeat, if J has duplicates.  Duplicates in</comment>
<comment type="line">// J are not exploited, since the coarse/fine tasks are constructed by slicing</comment>
<comment type="line">// slicing the list of vectors Ch of size Cnvec, not the vectors of A.</comment>

<comment type="line">// Compare this function with GB_ewise_slice, which constructs coarse/fine</comment>
<comment type="line">// tasks for the eWise operations (C=A+B, C=A.*B, and C&lt;M&gt;=Z).</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_WORKSPACE</name></cpp:macro>                       \
<cpp:value>{                                               \
    GB_WERK_POP (Coarse, int64_t) ;             \
    GB_FREE_WORK (&amp;Cwork, Cwork_size) ;         \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>                             \
<cpp:value>{                                               \
    GB_FREE_WORKSPACE ;                         \
    GB_FREE_WORK (&amp;TaskList, TaskList_size) ;   \
    GB_FREE_WORK (&amp;Mark, Mark_size) ;           \
    GB_FREE_WORK (&amp;Inext, Inext_size) ;         \
}</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_subref.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_subref_slice</name>    <comment type="line">// phase 1 of GB_subref</comment>
<parameter_list>(
    <comment type="line">// output:</comment>
    <parameter><decl><type><name>GB_task_struct</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_TaskList</name></decl></parameter>,    <comment type="line">// array of structs</comment>
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>p_TaskList_size</name></decl></parameter>,        <comment type="line">// size of TaskList</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_ntasks</name></decl></parameter>,                  <comment type="line">// # of tasks constructed</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_nthreads</name></decl></parameter>,                <comment type="line">// # of threads for subref operation</comment>
    <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>p_post_sort</name></decl></parameter>,              <comment type="line">// true if a final post-sort is needed</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier> <modifier>*</modifier></type><name>p_Mark</name></decl></parameter>,      <comment type="line">// for I inverse, if needed; size avlen</comment>
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>p_Mark_size</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier> <modifier>*</modifier></type><name>p_Inext</name></decl></parameter>,     <comment type="line">// for I inverse, if needed; size nI</comment>
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>p_Inext_size</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>p_nduplicates</name></decl></parameter>,         <comment type="line">// # of duplicates, if I inverse computed</comment>
    <comment type="line">// from phase0:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap_start</name></decl></parameter>,   <comment type="line">// location of A(imin:imax,kA)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap_end</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>Cnvec</name></decl></parameter>,            <comment type="line">// # of vectors of C</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>need_qsort</name></decl></parameter>,          <comment type="line">// true if C must be sorted</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>Ikind</name></decl></parameter>,                <comment type="line">// GB_ALL, GB_RANGE, GB_STRIDE or GB_LIST</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nI</name></decl></parameter>,               <comment type="line">// length of I</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name><name>Icolon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,       <comment type="line">// for GB_RANGE and GB_STRIDE</comment>
    <comment type="line">// original input:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>avlen</name></decl></parameter>,            <comment type="line">// A-&gt;vlen</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>anz</name></decl></parameter>,              <comment type="line">// nnz (A)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>I</name></decl></parameter>,
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_TaskList</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_TaskList_size</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_ntasks</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_nthreads</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_post_sort</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_Mark</name>  <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_Inext</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_nduplicates</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>(</operator><name>Cnvec</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><name>Ap_start</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>(</operator><name>Cnvec</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><name>Ap_end</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_TaskList</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_TaskList_size</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Mark</name>    <operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Inext</name>   <operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mark</name>  <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Mark_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Inext</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Inext_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cwork</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Cwork_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>Coarse</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>     <comment type="line">// size ntasks1+1</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>ntasks1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine # of threads to use</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate the initial TaskList</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// Allocate the TaskList to hold at least 2*ntask0 tasks.  It will grow</comment>
    <comment type="line">// later, if needed.  Usually, 64*nthreads_max is enough, but in a few cases</comment>
    <comment type="line">// fine tasks can cause this number to be exceeded.  If that occurs,</comment>
    <comment type="line">// TaskList is reallocated.</comment>

    <comment type="line">// When the mask is present, it is often fastest to break the work up</comment>
    <comment type="line">// into tasks, even when nthreads_max is 1.</comment>

    <decl_stmt><decl><type><name>GB_task_struct</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>TaskList</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>TaskList_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>max_ntasks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ntasks0</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>nthreads_max</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><literal type="number">32</literal> <operator>*</operator> <name>nthreads_max</name><operator>)</operator></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_REALLOC_TASK_WORK</name> <argument_list>(<argument><expr><name>TaskList</name></expr></argument>, <argument><expr><name>ntasks0</name></expr></argument>, <argument><expr><name>max_ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine if I_inverse can be constructed</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// I_inverse_ok is true if I might be inverted.  If false, then I will not</comment>
    <comment type="line">// be inverted.  I can be inverted only if the workspace for the inverse</comment>
    <comment type="line">// does not exceed nnz(A).  Note that if I was provided on input as an</comment>
    <comment type="line">// explicit list, but consists of a contiguous range imin:imax, then Ikind</comment>
    <comment type="line">// is now GB_LIST and the list I is ignored.</comment>

    <comment type="line">// If I_inverse_ok is true, the inverse of I might still not be needed.</comment>
    <comment type="line">// need_I_inverse becomes true if any C(:,kC) = A (I,kA) computation</comment>
    <comment type="line">// requires I inverse.</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>I_inverse_limit</name> <init>= <expr><call><name>GB_IMAX</name> <argument_list>(<argument><expr><literal type="number">4096</literal></expr></argument>, <argument><expr><name>anz</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>I_inverse_ok</name> <init>= <expr><operator>(</operator><name>Ikind</name> <operator>==</operator> <name>GB_LIST</name> <operator>&amp;&amp;</operator>
        <operator>(</operator><operator>(</operator><name>nI</name> <operator>&gt;</operator> <name>avlen</name> <operator>/</operator> <literal type="number">256</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>nI</name> <operator>+</operator> <name>avlen</name><operator>)</operator> <operator>&lt;</operator> <name>I_inverse_limit</name><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>need_I_inverse</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>post_sort</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>iinc</name> <init>= <expr><name><name>Icolon</name> <index>[<expr><name>GxB_INC</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate workspace</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>Cwork</name> <operator>=</operator> <call><name>GB_MALLOC_WORK</name> <argument_list>(<argument><expr><name>Cnvec</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cwork_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>Cwork</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// estimate the work required for each vector of C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>nthreads_for_Cwork</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>Cnvec</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>kC</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads_for_Cwork</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
        <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>||:need_I_inverse</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>kC</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>kC</name> <operator>&lt;</operator> <name>Cnvec</name></expr> ;</condition> <incr><expr><name>kC</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content> 
        <comment type="line">// jC is the (kC)th vector of C = A(I,J)</comment>
        <comment type="line">// int64_t jC = GBH (Ch, kC) ;</comment>
        <comment type="line">// C(:,kC) = A(I,kA) will be constructed</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>pA</name>      <init>= <expr><name><name>Ap_start</name> <index>[<expr><name>kC</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_end</name>  <init>= <expr><name><name>Ap_end</name>   <index>[<expr><name>kC</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>alen</name> <init>= <expr><name>pA_end</name> <operator>-</operator> <name>pA</name></expr></init></decl> ;</decl_stmt>      <comment type="line">// nnz (A (imin:imax,j))</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>work</name></decl> ;</decl_stmt>              <comment type="line">// amount of work for C(:,kC) = A (I,kA)</comment>
        <decl_stmt><decl><type><name>bool</name></type> <name>this_needs_I_inverse</name></decl> ;</decl_stmt> <comment type="line">// true if this vector needs I inverse</comment>

        <comment type="line">// ndupl in I not yet known; it is found when I is inverted.  For</comment>
        <comment type="line">// now, assume I has no duplicate entries.  All that is needed for now</comment>
        <comment type="line">// is the work required for each C(:,kC), and whether or not I inverse</comment>
        <comment type="line">// must be created.  The # of duplicates has no impact on the I inverse</comment>
        <comment type="line">// decision, and a minor effect on the work (which is ignored).</comment>

        <expr_stmt><expr><call><name>GB_subref_method</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>work</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>this_needs_I_inverse</name></expr></argument>, <argument><expr><name>alen</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>,
            <argument><expr><name>Ikind</name></expr></argument>, <argument><expr><name>nI</name></expr></argument>, <argument><expr><name>I_inverse_ok</name></expr></argument>, <argument><expr><name>need_qsort</name></expr></argument>, <argument><expr><name>iinc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// log the result</comment>
        <expr_stmt><expr><name>need_I_inverse</name> <operator>=</operator> <name>need_I_inverse</name> <operator>||</operator> <name>this_needs_I_inverse</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>Cwork</name> <index>[<expr><name>kC</name></expr>]</index></name> <operator>=</operator> <name>work</name></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// replace Cwork with its cumulative sum</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_cumsum</name> <argument_list>(<argument><expr><name>Cwork</name></expr></argument>, <argument><expr><name>Cnvec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>nthreads_for_Cwork</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>cwork</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>Cwork</name> <index>[<expr><name>Cnvec</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine # of threads and tasks to use for C=A(I,J)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>cwork</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><name>ntasks1</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>nthreads</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><literal type="number">32</literal> <operator>*</operator> <name>nthreads</name><operator>)</operator></expr></else></ternary></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>target_task_size</name> <init>= <expr><name>cwork</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><name>ntasks1</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>target_task_size</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>target_task_size</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// invert I if required</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>ndupl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>need_I_inverse</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_I_inverse</name> <argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>nI</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Mark</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Mark_size</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>Inext</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Inext_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ndupl</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Mark</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Inext</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check for quick return for a single task</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>Cnvec</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>ntasks1</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// construct a single coarse task that computes all of C</comment>
        <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>kfirst</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>klast</name>  <operator>=</operator> <name>Cnvec</name><operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>

        <comment type="line">// free workspace and return result</comment>
        <expr_stmt><expr><name>GB_FREE_WORKSPACE</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_TaskList</name>   <operator>)</operator> <operator>=</operator> <name>TaskList</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_TaskList_size</name><operator>)</operator> <operator>=</operator> <name>TaskList_size</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_ntasks</name>     <operator>)</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>Cnvec</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_nthreads</name>   <operator>)</operator> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_post_sort</name>  <operator>)</operator> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Mark</name>       <operator>)</operator> <operator>=</operator> <name>Mark</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Mark_size</name>  <operator>)</operator> <operator>=</operator> <name>Mark_size</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Inext</name>      <operator>)</operator> <operator>=</operator> <name>Inext</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Inext_size</name> <operator>)</operator> <operator>=</operator> <name>Inext_size</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_nduplicates</name><operator>)</operator> <operator>=</operator> <name>ndupl</name></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// slice the work into coarse tasks</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_WERK_PUSH</name> <argument_list>(<argument><expr><name>Coarse</name></expr></argument>, <argument><expr><name>ntasks1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>Coarse</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>GB_pslice</name> <argument_list>(<argument><expr><name>Coarse</name></expr></argument>, <argument><expr><name>Cwork</name></expr></argument>, <argument><expr><name>Cnvec</name></expr></argument>, <argument><expr><name>ntasks1</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct all tasks, both coarse and fine</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>ntasks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>ntasks1</name></expr> ;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// coarse task computes C (:,k:klast)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>Coarse</name> <index>[<expr><name>t</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name> <init>= <expr><name><name>Coarse</name> <index>[<expr><name>t</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <name>Cnvec</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// all tasks have been constructed</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <break>break ;</break>

        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>k</name> <operator>&lt;</operator> <name>klast</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// coarse task has 2 or more vectors</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// This is a non-empty coarse-grain task that does two or more</comment>
            <comment type="line">// entire vectors of C, vectors k:klast, inclusive.</comment>
            <expr_stmt><expr><call><name>GB_REALLOC_TASK_WORK</name> <argument_list>(<argument><expr><name>TaskList</name></expr></argument>, <argument><expr><name>ntasks</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>max_ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>kfirst</name> <operator>=</operator> <name>k</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>klast</name>  <operator>=</operator> <name>klast</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>ntasks</name><operator>++</operator></expr> ;</expr_stmt>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// coarse task has 0 or 1 vectors</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// As a coarse-grain task, this task is empty or does a single</comment>
            <comment type="line">// vector, k.  Vector k must be removed from the work done by this</comment>
            <comment type="line">// and any other coarse-grain task, and split into one or more</comment>
            <comment type="line">// fine-grain tasks.</comment>

            <for>for <control>(<init><decl><type><name>int</name></type> <name>tt</name> <init>= <expr><name>t</name></expr></init></decl> ;</init> <condition><expr><name>tt</name> <operator>&lt;</operator> <name>ntasks1</name></expr> ;</condition> <incr><expr><name>tt</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <comment type="line">// remove k from the initial slice tt</comment>
                <if_stmt><if>if <condition>(<expr><name><name>Coarse</name> <index>[<expr><name>tt</name></expr>]</index></name> <operator>==</operator> <name>k</name></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// remove k from task tt</comment>
                    <expr_stmt><expr><name><name>Coarse</name> <index>[<expr><name>tt</name></expr>]</index></name> <operator>=</operator> <name>k</name><operator>+</operator><literal type="number">1</literal></expr> ;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content> 
                    <comment type="line">// break, k not in task tt</comment>
                    <break>break ;</break>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// determine the # of fine-grain tasks to create for vector k</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>double</name></type> <name>ckwork</name> <init>= <expr><name><name>Cwork</name> <index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>Cwork</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>nfine</name> <init>= <expr><name>ckwork</name> <operator>/</operator> <name>target_task_size</name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><name>nfine</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>nfine</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">// make the TaskList bigger, if needed</comment>
            <expr_stmt><expr><call><name>GB_REALLOC_TASK_WORK</name> <argument_list>(<argument><expr><name>TaskList</name></expr></argument>, <argument><expr><name>ntasks</name> <operator>+</operator> <name>nfine</name></expr></argument>, <argument><expr><name>max_ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// create the fine-grain tasks</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <if_stmt><if>if <condition>(<expr><name>nfine</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
            <block>{<block_content> 

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// this is a single coarse task for all of vector k</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>kfirst</name> <operator>=</operator> <name>k</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>klast</name>  <operator>=</operator> <name>k</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>ntasks</name><operator>++</operator></expr> ;</expr_stmt>

            </block_content>}</block></if>
            <else>else
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// slice vector k into nfine fine tasks</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <comment type="line">// There are two kinds of fine tasks, depending on the method</comment>
                <comment type="line">// used to compute C(:,kC) = A(I,kA).  If the method iterates</comment>
                <comment type="line">// across all entries in A(imin:imax,kA), then those entries</comment>
                <comment type="line">// are sliced (of size alen).  Three methods (1, 2, and 6)</comment>
                <comment type="line">// iterate across all entries in I instead (of size nI).</comment>

                <decl_stmt><decl><type><name>int64_t</name></type> <name>pA</name>     <init>= <expr><name><name>Ap_start</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_end</name> <init>= <expr><name><name>Ap_end</name>   <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>alen</name> <init>= <expr><name>pA_end</name> <operator>-</operator> <name>pA</name></expr></init></decl> ;</decl_stmt>      <comment type="line">// nnz (A (imin:imax,j))</comment>

                <decl_stmt><decl><type><name>int</name></type> <name>method</name> <init>= <expr><call><name>GB_subref_method</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>alen</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>,
                    <argument><expr><name>Ikind</name></expr></argument>, <argument><expr><name>nI</name></expr></argument>, <argument><expr><name>I_inverse_ok</name></expr></argument>, <argument><expr><name>need_qsort</name></expr></argument>, <argument><expr><name>iinc</name></expr></argument>, <argument><expr><name>ndupl</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>method</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// multiple fine tasks operate on a single vector C(:,kC)</comment>
                    <comment type="line">// using method 10, and so a post-sort is needed.</comment>
                    <expr_stmt><expr><name>post_sort</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name>method</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>method</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name>method</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition>
                <block>{<block_content>

                    <comment type="line">// slice I for this task</comment>
                    <expr_stmt><expr><name>nfine</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nI</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><name>nfine</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>nfine</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

                    <for>for <control>(<init><decl><type><name>int</name></type> <name>tfine</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>tfine</name> <operator>&lt;</operator> <name>nfine</name></expr> ;</condition> <incr><expr><name>tfine</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content> 
                        <comment type="line">// flag this as a fine task, and record the method.</comment>
                        <comment type="line">// Methods 1, 2, and 6 slice I, not A(:,kA)</comment>
                        <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>kfirst</name> <operator>=</operator> <name>k</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>klast</name> <operator>=</operator> <operator>-</operator><name>method</name></expr> ;</expr_stmt>
                        <comment type="line">// do not partition A(:,kA)</comment>
                        <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>pA</name> <operator>=</operator> <name>pA</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>pA_end</name> <operator>=</operator> <name>pA_end</name></expr> ;</expr_stmt>
                        <comment type="line">// partition I for this task</comment>
                        <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>pB</name></expr></argument>,
                            <argument><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>pB_end</name></expr></argument>, <argument><expr><name>nI</name></expr></argument>, <argument><expr><name>tfine</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <comment type="line">// unused</comment>
                        <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>pM</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
                        <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>pM_end</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
                        <comment type="line">// no post sort</comment>
                        <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
                        <expr_stmt><expr><name>ntasks</name><operator>++</operator></expr> ;</expr_stmt>
                    </block_content>}</block></for>

                </block_content>}</block></if>
                <else>else
                <block>{<block_content>

                    <comment type="line">// slice A(:,kA) for this task</comment>
                    <expr_stmt><expr><name>nfine</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>alen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><name>nfine</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>nfine</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

                    <decl_stmt><decl><type><name>bool</name></type> <name>reverse</name> <init>= <expr><operator>(</operator><name>method</name> <operator>==</operator> <literal type="number">8</literal> <operator>||</operator> <name>method</name> <operator>==</operator> <literal type="number">9</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>

                    <for>for <control>(<init><decl><type><name>int</name></type> <name>tfine</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>tfine</name> <operator>&lt;</operator> <name>nfine</name></expr> ;</condition> <incr><expr><name>tfine</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content> 
                        <comment type="line">// flag this as a fine task, and record the method.</comment>
                        <comment type="line">// These methods slice A(:,kA).  Methods 8 and 9</comment>
                        <comment type="line">// must do so in reverse order.</comment>
                        <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>kfirst</name> <operator>=</operator> <name>k</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>klast</name> <operator>=</operator> <operator>-</operator><name>method</name></expr> ;</expr_stmt>
                        <comment type="line">// partition the items for this task</comment>
                        <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>pA</name></expr></argument>,
                            <argument><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>pA_end</name></expr></argument>, <argument><expr><name>alen</name></expr></argument>,
                            <argument><expr><ternary><condition><expr><operator>(</operator><name>reverse</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>nfine</name><operator>-</operator><name>tfine</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><name>tfine</name></expr></else></ternary></expr></argument>, <argument><expr><name>nfine</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>pA</name> <operator>+=</operator> <name>pA</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>pA_end</name> <operator>+=</operator> <name>pA</name></expr>  ;</expr_stmt>
                        <comment type="line">// do not partition I</comment>
                        <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>pB</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
                        <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>pB_end</name> <operator>=</operator> <name>nI</name></expr> ;</expr_stmt>
                        <comment type="line">// unused</comment>
                        <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>pM</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
                        <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>pM_end</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>

                        <comment type="line">// flag the task that does the post sort</comment>
                        <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <operator>(</operator><name>tfine</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>method</name> <operator>==</operator> <literal type="number">10</literal><operator>)</operator></expr> ;</expr_stmt>
                        <expr_stmt><expr><name>ntasks</name><operator>++</operator></expr> ;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>ntasks</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free workspace and return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_FREE_WORKSPACE</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_TaskList</name>   <operator>)</operator> <operator>=</operator> <name>TaskList</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_TaskList_size</name><operator>)</operator> <operator>=</operator> <name>TaskList_size</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_ntasks</name>     <operator>)</operator> <operator>=</operator> <name>ntasks</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_nthreads</name>   <operator>)</operator> <operator>=</operator> <name>nthreads</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_post_sort</name>  <operator>)</operator> <operator>=</operator> <name>post_sort</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Mark</name>       <operator>)</operator> <operator>=</operator> <name>Mark</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Mark_size</name>  <operator>)</operator> <operator>=</operator> <name>Mark_size</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Inext</name>      <operator>)</operator> <operator>=</operator> <name>Inext</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Inext_size</name> <operator>)</operator> <operator>=</operator> <name>Inext_size</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_nduplicates</name><operator>)</operator> <operator>=</operator> <name>ndupl</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
