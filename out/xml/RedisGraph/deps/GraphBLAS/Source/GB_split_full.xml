<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_split_full.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_split_full: split a full matrix into an array of matrices</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>         \
    <cpp:value>GB_Matrix_free (&amp;C) ;</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_split.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_split_full</name>              <comment type="line">// split a full matrix</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name> <modifier>*</modifier></type><name>Tiles</name></decl></parameter>,              <comment type="line">// 2D row-major array of size m-by-n</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name></type> <name>m</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name></type> <name>n</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Tile_rows</name></decl></parameter>,  <comment type="line">// size m+1</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Tile_cols</name></decl></parameter>,  <comment type="line">// size n+1</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,             <comment type="line">// input matrix</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_is_dense</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>C</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>sparsity_control</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>sparsity_control</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>hyper_switch</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>hyper_switch</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>csc</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>is_csc</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>atype</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>avlen</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
<comment type="line">//  int64_t avdim = A-&gt;vdim ;</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>asize</name> <init>= <expr><name><name>atype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_iso</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>nouter</name> <init>= <expr><ternary><condition><expr><name>csc</name></expr> ?</condition><then> <expr><name>n</name></expr> </then><else>: <expr><name>m</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>ninner</name> <init>= <expr><ternary><condition><expr><name>csc</name></expr> ?</condition><then> <expr><name>m</name></expr> </then><else>: <expr><name>n</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier></type><name>Tile_vdim</name> <init>= <expr><ternary><condition><expr><name>csc</name></expr> ?</condition><then> <expr><name>Tile_cols</name></expr> </then><else>: <expr><name>Tile_rows</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier></type><name>Tile_vlen</name> <init>= <expr><ternary><condition><expr><name>csc</name></expr> ?</condition><then> <expr><name>Tile_rows</name></expr> </then><else>: <expr><name>Tile_cols</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// split A into tiles</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>outer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>outer</name> <operator>&lt;</operator> <name>nouter</name></expr> ;</condition> <incr><expr><name>outer</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>avstart</name> <init>= <expr><name><name>Tile_vdim</name> <index>[<expr><name>outer</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>avend</name>   <init>= <expr><name><name>Tile_vdim</name> <index>[<expr><name>outer</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>

        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>inner</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>inner</name> <operator>&lt;</operator> <name>ninner</name></expr> ;</condition> <incr><expr><name>inner</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// allocate the tile C</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// The tile appears in vectors avstart:avend-1 of A, and indices</comment>
            <comment type="line">// aistart:aiend-1.</comment>

            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>aistart</name> <init>= <expr><name><name>Tile_vlen</name> <index>[<expr><name>inner</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>aiend</name>   <init>= <expr><name><name>Tile_vlen</name> <index>[<expr><name>inner</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>cvdim</name> <init>= <expr><name>avend</name> <operator>-</operator> <name>avstart</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>cvlen</name> <init>= <expr><name>aiend</name> <operator>-</operator> <name>aistart</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>cnz</name> <init>= <expr><name>cvdim</name> <operator>*</operator> <name>cvlen</name></expr></init></decl> ;</decl_stmt>

            <expr_stmt><expr><name>C</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
            <comment type="line">// set C-&gt;iso = A_iso       OK</comment>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_new_bix</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <comment type="line">// new header</comment>
                <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>cvlen</name></expr></argument>, <argument><expr><name>cvdim</name></expr></argument>, <argument><expr><name>GB_Ap_null</name></expr></argument>, <argument><expr><name>csc</name></expr></argument>, <argument><expr><name>GxB_FULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
                <argument><expr><name>hyper_switch</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cnz</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>sparsity_control</name></name> <operator>=</operator> <name>sparsity_control</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>hyper_switch</name></name> <operator>=</operator> <name>hyper_switch</name></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>C_nthreads</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>cnz</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// copy the tile from A into C</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <if_stmt><if>if <condition>(<expr><name>A_iso</name></expr>)</condition>
            <block>{<block_content> 

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// split an iso matrix A into an iso tile C</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <comment type="line">// A is iso and so is C; copy the iso entry</comment>
                <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            </block_content>}</block></if>
            <else>else
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// split a non-iso matrix A into an non-iso tile C</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
                <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA_DEV</name></cpp:ifndef>
                <block>{<block_content>
                    <comment type="line">// no typecasting needed</comment>
                    <switch>switch <condition>(<expr><name>asize</name></expr>)</condition>
                    <block>{<block_content>
                        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COPY</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Cx [pC] = Ax [pA]</cpp:value></cpp:define>

                        <case>case <expr><name>GB_1BYTE</name></expr> :</case> <comment type="line">// uint8, int8, bool, or 1-byte user</comment>
                            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CTYPE</name></cpp:macro> <cpp:value>uint8_t</cpp:value></cpp:define>
                            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_split_full_template.c"</cpp:file></cpp:include>
                            <break>break ;</break>

                        <case>case <expr><name>GB_2BYTE</name></expr> :</case> <comment type="line">// uint16, int16, or 2-byte user</comment>
                            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CTYPE</name></cpp:macro> <cpp:value>uint16_t</cpp:value></cpp:define>
                            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_split_full_template.c"</cpp:file></cpp:include>
                            <break>break ;</break>

                        <case>case <expr><name>GB_4BYTE</name></expr> :</case> <comment type="line">// uint32, int32, float, or 4-byte user</comment>
                            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CTYPE</name></cpp:macro> <cpp:value>uint32_t</cpp:value></cpp:define>
                            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_split_full_template.c"</cpp:file></cpp:include>
                            <break>break ;</break>

                        <case>case <expr><name>GB_8BYTE</name></expr> :</case> <comment type="line">// uint64, int64, double, float</comment>
                                        <comment type="line">// complex, or 8-byte user</comment>
                            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CTYPE</name></cpp:macro> <cpp:value>uint64_t</cpp:value></cpp:define>
                            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_split_full_template.c"</cpp:file></cpp:include>
                            <break>break ;</break>

                        <case>case <expr><name>GB_16BYTE</name></expr> :</case> <comment type="line">// double complex or 16-byte user</comment>
                            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CTYPE</name></cpp:macro> <cpp:value>GB_blob16</cpp:value></cpp:define>
                            <comment type="block">/*
                            #define GB_CTYPE uint64_t
                            #undef  GB_COPY
                            #define GB_COPY(pC,pA)                          \
                                Cx [2*pC  ] = Ax [2*pA  ] ;                 \
                                Cx [2*pC+1] = Ax [2*pA+1] ;
                            */</comment>
                            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_split_full_template.c"</cpp:file></cpp:include>
                            <break>break ;</break>

                        <default>default:</default><empty_stmt>;</empty_stmt>
                    </block_content>}</block></switch>
                </block_content>}</block>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// user-defined types</comment>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CTYPE</name></cpp:macro> <cpp:value>GB_void</cpp:value></cpp:define>
                    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_COPY</name></cpp:undef>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COPY</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>)</parameter_list></cpp:macro>  \
                        <cpp:value>memcpy (Cx +(pC)*asize, Ax +(pA)*asize, asize) ;</cpp:value></cpp:define>
                    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_split_full_template.c"</cpp:file></cpp:include>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// conform the tile and save it in the Tiles array</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C for GB_split"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_conform</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>csc</name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>GB_TILE</name> <argument_list>(<argument><expr><name>Tiles</name></expr></argument>, <argument><expr><name>inner</name></expr></argument>, <argument><expr><name>outer</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>C</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <expr_stmt><expr><call><name>GB_TILE</name> <argument_list>(<argument><expr><name>Tiles</name></expr></argument>, <argument><expr><name>outer</name></expr></argument>, <argument><expr><name>inner</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>C</name></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name>C</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
