<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_convert_sparse_to_bitmap.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_convert_sparse_to_bitmap: convert from sparse/hypersparse to bitmap</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_ek_slice.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA_DEV</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_type__include.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_WORKSPACE</name></cpp:macro>                   \
<cpp:value>{                                           \
    GB_WERK_POP (A_ek_slicing, int64_t) ;   \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>                         \
<cpp:value>{                                           \
    GB_FREE_WORKSPACE ;                     \
    GB_FREE (&amp;Ax_new, Ax_size) ;            \
    GB_FREE (&amp;Ab, Ab_size) ;                \
}</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GB_convert_sparse_to_bitmap</name>    <comment type="line">// convert sparse/hypersparse to bitmap</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,               <comment type="line">// matrix to convert from sparse to bitmap</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>A_ek_slicing</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int8_t</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ab</name>     <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Ab_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ax</name>     <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Ax_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ax_new</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A converting sparse/hypersparse to bitmap"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>        <comment type="line">// A can be jumbled on input</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_ZOMBIES_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>        <comment type="line">// A can have zombies on input</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine the maximum number of threads to use</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine if the conversion can be done in-place</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// A-&gt;x does not change if A is as-if-full or A is iso</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>A_iso</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>A_as_is_full</name> <init>= <expr><call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>in_place</name> <init>= <expr><name>A_as_is_full</name> <operator>||</operator> <name>A_iso</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate A-&gt;b</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>anz</name> <init>= <expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_BURBLE_N</name> <argument_list>(<argument><expr><name>anz</name></expr></argument>, <argument><expr><literal type="string">"(sparse to bitmap) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>avdim</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>avlen</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>anzmax</name></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_int64_multiply</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Index</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>anzmax</name></expr></argument>, <argument><expr><name>avdim</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// problem too large</comment>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>anzmax</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>anzmax</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>Ab</name> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><name>anzmax</name></expr></argument>, <argument><expr><name>int8_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ab_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>Ab</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate the new A-&gt;x</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>asize</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>Ax_shallow</name></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>in_place</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// keep the existing A-&gt;x</comment>
        <expr_stmt><expr><name>Ax</name> <operator>=</operator> <operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Ax_shallow</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>x_shallow</name></name></expr> ;</expr_stmt> <expr_stmt><expr><name>Ax_size</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>x_size</name></name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="line">// A-&gt;x must be modified to fit the bitmap structure.  A-&gt;x is calloc'd</comment>
        <comment type="line">// since otherwise it would contain uninitialized values where A-&gt;b is</comment>
        <comment type="line">// false and entries are not present.</comment>
        <expr_stmt><expr><name>Ax_new</name> <operator>=</operator> <call><name>GB_CALLOC</name> <argument_list>(<argument><expr><name>anzmax</name> <operator>*</operator> <name>asize</name></expr></argument>, <argument><expr><name>GB_void</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <comment type="line">// x:OK:calloc</comment>
        <expr_stmt><expr><name>Ax_shallow</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>Ax_new</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// out of memory</comment>
            <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>Ax</name> <operator>=</operator> <name>Ax_new</name></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// scatter the pattern and values into the new bitmap</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>nzombies</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>nzombies</name></name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>A_as_is_full</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// the sparse A has all entries or is iso: convert in-place</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>nzombies</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <comment type="line">// set all of Ab [0..anz-1] to 1, in parallel</comment>
        <expr_stmt><expr><call><name>GB_memset</name> <argument_list>(<argument><expr><name>Ab</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>anz</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// set all of Ab to zero</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>GB_memset</name> <argument_list>(<argument><expr><name>Ab</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>anzmax</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// scatter the values and pattern of A into the bitmap</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int</name></type> <name>A_nthreads</name></decl>, <decl><type ref="prev"/><name>A_ntasks</name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GB_SLICE_MATRIX</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ah</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ai</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>A_iso</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// A is iso; numerical entries are not modified</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COPY</name><parameter_list>(<parameter><type><name>Axnew</name></type></parameter>,<parameter><type><name>pnew</name></type></parameter>,<parameter><type><name>Axold</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>;</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_convert_sparse_to_bitmap_template.c"</cpp:file></cpp:include>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA_DEV</name></cpp:ifndef>
            <block>{<block_content>
                <switch>switch <condition>(<expr><name>asize</name></expr>)</condition>
                <block>{<block_content>
                    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_COPY</name></cpp:undef>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COPY</name><parameter_list>(<parameter><type><name>Axnew</name></type></parameter>,<parameter><type><name>pnew</name></type></parameter>,<parameter><type><name>Axold</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>         \
                        <cpp:value>Axnew [pnew] = Axold [p] ;</cpp:value></cpp:define>

                    <case>case <expr><name>GB_1BYTE</name></expr> :</case> <comment type="line">// uint8, int8, bool, or 1-byte user</comment>
                        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ATYPE</name></cpp:macro> <cpp:value>uint8_t</cpp:value></cpp:define>
                        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_convert_sparse_to_bitmap_template.c"</cpp:file></cpp:include>
                        <break>break ;</break>

                    <case>case <expr><name>GB_2BYTE</name></expr> :</case> <comment type="line">// uint16, int16, or 2-byte user-defined</comment>
                        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ATYPE</name></cpp:macro> <cpp:value>uint16_t</cpp:value></cpp:define>
                        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_convert_sparse_to_bitmap_template.c"</cpp:file></cpp:include>
                        <break>break ;</break>

                    <case>case <expr><name>GB_4BYTE</name></expr> :</case> <comment type="line">// uint32, int32, float, or 4-byte user</comment>
                        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ATYPE</name></cpp:macro> <cpp:value>uint32_t</cpp:value></cpp:define>
                        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_convert_sparse_to_bitmap_template.c"</cpp:file></cpp:include>
                        <break>break ;</break>

                    <case>case <expr><name>GB_8BYTE</name></expr> :</case> <comment type="line">// uint64, int64, double, float complex,</comment>
                             <comment type="line">// or 8-byte user defined</comment>
                        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ATYPE</name></cpp:macro> <cpp:value>uint64_t</cpp:value></cpp:define>
                        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_convert_sparse_to_bitmap_template.c"</cpp:file></cpp:include>
                        <break>break ;</break>

                    <case>case <expr><name>GB_16BYTE</name></expr> :</case> <comment type="line">// double complex or 16-byte user-defined</comment>
                        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ATYPE</name></cpp:macro> <cpp:value>GB_blob16</cpp:value></cpp:define>
                        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_convert_sparse_to_bitmap_template.c"</cpp:file></cpp:include>
                        <break>break ;</break>

                    <default>default:</default><empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
            </block_content>}</block>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// with user-defined types of other sizes</comment>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ATYPE</name></cpp:macro> <cpp:value>GB_void</cpp:value></cpp:define>
                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_COPY</name></cpp:undef>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COPY</name><parameter_list>(<parameter><type><name>Axnew</name></type></parameter>,<parameter><type><name>pnew</name></type></parameter>,<parameter><type><name>Axold</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>                         \
                    <cpp:value>memcpy (Axnew +(pnew)*asize, Axold +(p)*asize, asize)</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_convert_sparse_to_bitmap_template.c"</cpp:file></cpp:include>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free prior content of A and transplant the new content</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>in_place</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// if in-place, remove A-&gt;x from A so it is not freed</comment>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>x_shallow</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>GB_phybix_free</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name> <operator>=</operator> <name>A_iso</name></expr> ;</expr_stmt>        <comment type="line">// OK: convert_sparse_to_bitmap, keep iso</comment>

    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <name>Ab</name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>b_size</name></name> <operator>=</operator> <name>Ab_size</name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>b_shallow</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>Ab</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>Ax</name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>x_size</name></name> <operator>=</operator> <name>Ax_size</name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>x_shallow</name></name> <operator>=</operator> <name>Ax_shallow</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <name>anz</name> <operator>-</operator> <name>nzombies</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>nzombies</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>plen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name> <operator>=</operator> <name>avdim</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>avlen</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>avdim</name></expr></else></ternary></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free workspace and return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_FREE_WORKSPACE</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A converted from sparse to bitmap"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
