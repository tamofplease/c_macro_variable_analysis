<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_enumify_ewise.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_enumify_ewise: enumerate a GrB_eWise* problem</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2021, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Enumify an ewise operation: eWiseAdd, eWiseMult, and eWiseUnion.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_stringify.h"</cpp:file></cpp:include>

<comment type="line">// accum is not present.  Kernels that use it would require accum to be</comment>
<comment type="line">// the same as the monoid binary operator.</comment>

<function><type><name>void</name></type> <name>GB_enumify_ewise</name>         <comment type="line">// enumerate a GrB_eWise problem</comment>
<parameter_list>(
    <comment type="line">// output:</comment>
    <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>scode</name></decl></parameter>,        <comment type="line">// unique encoding of the entire operation</comment>
    <comment type="line">// input:</comment>
    <comment type="line">// C matrix:</comment>
    <parameter><decl><type><name>bool</name></type> <name>C_iso</name></decl></parameter>,             <comment type="line">// if true, C is iso and the operator is ignored</comment>
    <parameter><decl><type><name>int</name></type> <name>C_sparsity</name></decl></parameter>,         <comment type="line">// sparse, hyper, bitmap, or full</comment>
    <parameter><decl><type><name>GrB_Type</name></type> <name>ctype</name></decl></parameter>,         <comment type="line">// C=((ctype) T) is the final typecast</comment>
    <comment type="line">// M matrix:</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,           <comment type="line">// may be NULL</comment>
    <parameter><decl><type><name>bool</name></type> <name>Mask_struct</name></decl></parameter>,       <comment type="line">// mask is structural</comment>
    <parameter><decl><type><name>bool</name></type> <name>Mask_comp</name></decl></parameter>,         <comment type="line">// mask is complemented</comment>
    <comment type="line">// operator:</comment>
    <parameter><decl><type><name>GrB_BinaryOp</name></type> <name>binaryop</name></decl></parameter>,  <comment type="line">// the binary operator to enumify (can be NULL)</comment>
    <parameter><decl><type><name>bool</name></type> <name>flipxy</name></decl></parameter>,            <comment type="line">// multiplier is: op(a,b) or op(b,a)</comment>
    <comment type="line">// A and B:</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>B</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the types of A, B, and M</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>atype</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>btype</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>mtype</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>M</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>M</name><operator>-&gt;</operator><name>type</name></name></expr></else></ternary></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the types of X, Y, and Z, and handle the C_iso case, and GB_wait</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GB_Opcode</name></type> <name>binaryop_opcode</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>xtype</name></decl>, <decl><type ref="prev"/><name>ytype</name></decl>, <decl><type ref="prev"/><name>ztype</name></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>C_iso</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// values of C are not computed by the kernel</comment>
        <expr_stmt><expr><name>binaryop_opcode</name> <operator>=</operator> <name>GB_PAIR_binop_code</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>xtype</name> <operator>=</operator> <name>GrB_BOOL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>ytype</name> <operator>=</operator> <name>GrB_BOOL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>ztype</name> <operator>=</operator> <name>GrB_BOOL</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>binaryop</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// GB_wait: A and B are disjoint and the operator is not applied</comment>
        <expr_stmt><expr><name>binaryop_opcode</name> <operator>=</operator> <name>GB_NOP_code</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>atype</name> <operator>==</operator> <name>btype</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>ctype</name> <operator>==</operator> <name>btype</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>xtype</name> <operator>=</operator> <name>atype</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>ytype</name> <operator>=</operator> <name>atype</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>ztype</name> <operator>=</operator> <name>atype</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="line">// normal case</comment>
        <expr_stmt><expr><name>binaryop_opcode</name> <operator>=</operator> <name><name>binaryop</name><operator>-&gt;</operator><name>opcode</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>xtype</name> <operator>=</operator> <name><name>binaryop</name><operator>-&gt;</operator><name>xtype</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>ytype</name> <operator>=</operator> <name><name>binaryop</name><operator>-&gt;</operator><name>ytype</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>ztype</name> <operator>=</operator> <name><name>binaryop</name><operator>-&gt;</operator><name>ztype</name></name></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>xcode</name> <init>= <expr><name><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>ycode</name> <init>= <expr><name><name>ytype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>zcode</name> <init>= <expr><name><name>ztype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// rename redundant boolean operators</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// consider z = op(x,y) where both x and y are boolean:</comment>
    <comment type="line">// DIV becomes FIRST</comment>
    <comment type="line">// RDIV becomes SECOND</comment>
    <comment type="line">// MIN and TIMES become LAND</comment>
    <comment type="line">// MAX and PLUS become LOR</comment>
    <comment type="line">// NE, ISNE, RMINUS, and MINUS become LXOR</comment>
    <comment type="line">// ISEQ becomes EQ</comment>
    <comment type="line">// ISGT becomes GT</comment>
    <comment type="line">// ISLT becomes LT</comment>
    <comment type="line">// ISGE becomes GE</comment>
    <comment type="line">// ISLE becomes LE</comment>

    <if_stmt><if>if <condition>(<expr><name>xcode</name> <operator>==</operator> <name>GB_BOOL_code</name></expr>)</condition>  <comment type="line">// &amp;&amp; (ycode == GB_BOOL_code)</comment>
    <block>{<block_content>
        <comment type="line">// rename the operator</comment>
        <expr_stmt><expr><name>binaryop_opcode</name> <operator>=</operator> <call><name>GB_boolean_rename</name> <argument_list>(<argument><expr><name>binaryop_opcode</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine if A and/or B are value-agnostic</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// These 1st, 2nd, and pair operators are all handled by the flip, so if</comment>
    <comment type="line">// flipxy is still true, all of these booleans will be false.</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>op_is_first</name>  <init>= <expr><operator>(</operator><name>binaryop_opcode</name> <operator>==</operator> <name>GB_FIRST_binop_code</name> <operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>op_is_second</name> <init>= <expr><operator>(</operator><name>binaryop_opcode</name> <operator>==</operator> <name>GB_SECOND_binop_code</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>op_is_pair</name>   <init>= <expr><operator>(</operator><name>binaryop_opcode</name> <operator>==</operator> <name>GB_PAIR_binop_code</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>A_is_pattern</name> <init>= <expr><name>op_is_second</name> <operator>||</operator> <name>op_is_pair</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>B_is_pattern</name> <init>= <expr><name>op_is_first</name>  <operator>||</operator> <name>op_is_pair</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// enumify the binary operator</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>binop_ecode</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_enumify_binop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>binop_ecode</name></expr></argument>, <argument><expr><name>binaryop_opcode</name></expr></argument>, <argument><expr><name>xcode</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// enumify the types</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>acode</name> <init>= <expr><ternary><condition><expr><name>A_is_pattern</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>atype</name><operator>-&gt;</operator><name>code</name></name></expr></else></ternary></expr></init></decl> ;</decl_stmt>   <comment type="line">// 0 to 14</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>bcode</name> <init>= <expr><ternary><condition><expr><name>B_is_pattern</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>btype</name><operator>-&gt;</operator><name>code</name></name></expr></else></ternary></expr></init></decl> ;</decl_stmt>   <comment type="line">// 0 to 14</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>ccode</name> <init>= <expr><ternary><condition><expr><name>C_iso</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>ctype</name><operator>-&gt;</operator><name>code</name></name></expr></else></ternary></expr></init></decl> ;</decl_stmt>          <comment type="line">// 0 to 14</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>A_iso_code</name> <init>= <expr><ternary><condition><expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>B_iso_code</name> <init>= <expr><ternary><condition><expr><name><name>B</name><operator>-&gt;</operator><name>iso</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// enumify the mask</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>mtype_code</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>mtype</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>mtype</name><operator>-&gt;</operator><name>code</name></name></expr></else></ternary></expr></init></decl> ;</decl_stmt> <comment type="line">// 0 to 14</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>mask_ecode</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_enumify_mask</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>mask_ecode</name></expr></argument>, <argument><expr><name>mtype_code</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// enumify the sparsity structures of C, M, A, and B</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>M_sparsity</name> <init>= <expr><call><name>GB_sparsity</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>A_sparsity</name> <init>= <expr><call><name>GB_sparsity</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>B_sparsity</name> <init>= <expr><call><name>GB_sparsity</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>csparsity</name></decl>, <decl><type ref="prev"/><name>msparsity</name></decl>, <decl><type ref="prev"/><name>asparsity</name></decl>, <decl><type ref="prev"/><name>bsparsity</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_enumify_sparsity</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>csparsity</name></expr></argument>, <argument><expr><name>C_sparsity</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_enumify_sparsity</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>msparsity</name></expr></argument>, <argument><expr><name>M_sparsity</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_enumify_sparsity</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>asparsity</name></expr></argument>, <argument><expr><name>A_sparsity</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_enumify_sparsity</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>bsparsity</name></expr></argument>, <argument><expr><name>B_sparsity</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct the ewise scode</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// total scode bits: 47 (17 unused bits)</comment>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>scode</name><operator>)</operator> <operator>=</operator>
                                               <comment type="line">// range        bits</comment>
                <comment type="line">// unused (4 hex digits)</comment>
<comment type="line">//              GB_LSHIFT (0,         , 48) |  // unused       16</comment>

                <comment type="line">// A and B iso properites, flipxy (1 hex digit)</comment>
<comment type="line">//              GB_LSHIFT (0          , 47) |  // unused       1</comment>
                <call><name>GB_LSHIFT</name> <argument_list>(<argument><expr><name>A_iso_code</name></expr></argument> , <argument><expr><literal type="number">46</literal></expr></argument>)</argument_list></call> <operator>|</operator>  <comment type="line">// 0 or 1       1</comment>
                <call><name>GB_LSHIFT</name> <argument_list>(<argument><expr><name>B_iso_code</name></expr></argument> , <argument><expr><literal type="number">45</literal></expr></argument>)</argument_list></call> <operator>|</operator>  <comment type="line">// 0 or 1       1</comment>
                <call><name>GB_LSHIFT</name> <argument_list>(<argument><expr><name>flipxy</name></expr></argument>     , <argument><expr><literal type="number">44</literal></expr></argument>)</argument_list></call> <operator>|</operator>  <comment type="line">// 0 or 1       1</comment>

                <comment type="line">// binaryop, z = f(x,y) (5 hex digits)</comment>
                <call><name>GB_LSHIFT</name> <argument_list>(<argument><expr><name>binop_ecode</name></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call> <operator>|</operator>  <comment type="line">// 0 to 140     8</comment>
                <call><name>GB_LSHIFT</name> <argument_list>(<argument><expr><name>zcode</name></expr></argument>      , <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call> <operator>|</operator>  <comment type="line">// 0 to 14      4</comment>
                <call><name>GB_LSHIFT</name> <argument_list>(<argument><expr><name>xcode</name></expr></argument>      , <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call> <operator>|</operator>  <comment type="line">// 0 to 14      4</comment>
                <call><name>GB_LSHIFT</name> <argument_list>(<argument><expr><name>ycode</name></expr></argument>      , <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call> <operator>|</operator>  <comment type="line">// 0 to 14      4</comment>

                <comment type="line">// mask (one hex digit)</comment>
                <call><name>GB_LSHIFT</name> <argument_list>(<argument><expr><name>mask_ecode</name></expr></argument> , <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call> <operator>|</operator>  <comment type="line">// 0 to 13      4</comment>

                <comment type="line">// types of C, A, and B (3 hex digits)</comment>
                <call><name>GB_LSHIFT</name> <argument_list>(<argument><expr><name>ccode</name></expr></argument>      , <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>|</operator>  <comment type="line">// 0 to 14      4</comment>
                <call><name>GB_LSHIFT</name> <argument_list>(<argument><expr><name>acode</name></expr></argument>      , <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>|</operator>  <comment type="line">// 0 to 14      4</comment>
                <call><name>GB_LSHIFT</name> <argument_list>(<argument><expr><name>bcode</name></expr></argument>      ,  <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>|</operator>  <comment type="line">// 0 to 14      4</comment>

                <comment type="line">// sparsity structures of C, M, A, and B (2 hex digits)</comment>
                <call><name>GB_LSHIFT</name> <argument_list>(<argument><expr><name>csparsity</name></expr></argument>  ,  <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>|</operator>  <comment type="line">// 0 to 3       2</comment>
                <call><name>GB_LSHIFT</name> <argument_list>(<argument><expr><name>msparsity</name></expr></argument>  ,  <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>|</operator>  <comment type="line">// 0 to 3       2</comment>
                <call><name>GB_LSHIFT</name> <argument_list>(<argument><expr><name>asparsity</name></expr></argument>  ,  <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>|</operator>  <comment type="line">// 0 to 3       2</comment>
                <call><name>GB_LSHIFT</name> <argument_list>(<argument><expr><name>bsparsity</name></expr></argument>  ,  <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <comment type="line">// 0 to 3       2</comment>
</block_content>}</block></function>

</unit>
