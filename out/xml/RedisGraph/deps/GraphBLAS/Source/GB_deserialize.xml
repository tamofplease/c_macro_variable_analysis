<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_deserialize.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_deserialize: decompress and deserialize a blob into a GrB_Matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// A parallel decompression of a serialized blob into a GrB_Matrix.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_serialize.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>                         \
<cpp:value>{                                           \
    GB_Matrix_free (&amp;T) ;                   \
    GB_Matrix_free (&amp;C) ;                   \
}</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GB_deserialize</name>             <comment type="line">// deserialize a matrix from a blob</comment>
<parameter_list>(
    <comment type="line">// output:</comment>
    <parameter><decl><type><name>GrB_Matrix</name> <modifier>*</modifier></type><name>Chandle</name></decl></parameter>,            <comment type="line">// output matrix created from the blob</comment>
    <comment type="line">// input:</comment>
    <parameter><decl><type><name>GrB_Type</name></type> <name>type_expected</name></decl></parameter>,         <comment type="line">// type expected (NULL for any built-in)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GB_void</name> <modifier>*</modifier></type><name>blob</name></decl></parameter>,            <comment type="line">// serialized matrix </comment>
    <parameter><decl><type><name>size_t</name></type> <name>blob_size</name></decl></parameter>,               <comment type="line">// size of the blob</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>blob</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>Chandle</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Chandle</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>C</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>T</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// read the content of the header (160 bytes)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>size_t</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>blob_size</name> <operator>&lt;</operator> <name>GB_BLOB_HEADER_SIZE</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// blob is invalid</comment>
        <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr>  ;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>GB_BLOB_READ</name> <argument_list>(<argument><expr><name>blob_size2</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BLOB_READ</name> <argument_list>(<argument><expr><name>typecode</name></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>blob_size</name> <operator>!=</operator> <name>blob_size2</name>
        <operator>||</operator> <name><name>typecode</name> <argument_list type="generic">&lt; <argument><expr><name>GB_BOOL_code</name> <operator>||</operator> <name>typecode</name></expr></argument> &gt;</argument_list></name> <name>GB_UDT_code</name>
        <operator>||</operator> <operator>(</operator><name>typecode</name> <operator>==</operator> <name>GB_UDT_code</name> <operator>&amp;&amp;</operator>
            <name>blob_size</name> <operator>&lt;</operator> <name>GB_BLOB_HEADER_SIZE</name> <operator>+</operator> <name>GxB_MAX_NAME_LEN</name><operator>)</operator></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// blob is invalid</comment>
        <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr>  ;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>GB_BLOB_READ</name> <argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BLOB_READ</name> <argument_list>(<argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BLOB_READ</name> <argument_list>(<argument><expr><name>vdim</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BLOB_READ</name> <argument_list>(<argument><expr><name>nvec</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BLOB_READ</name> <argument_list>(<argument><expr><name>nvec_nonempty</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>     <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>nvec_nonempty</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BLOB_READ</name> <argument_list>(<argument><expr><name>nvals</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BLOB_READ</name> <argument_list>(<argument><expr><name>typesize</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BLOB_READ</name> <argument_list>(<argument><expr><name>Cp_len</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BLOB_READ</name> <argument_list>(<argument><expr><name>Ch_len</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BLOB_READ</name> <argument_list>(<argument><expr><name>Cb_len</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BLOB_READ</name> <argument_list>(<argument><expr><name>Ci_len</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BLOB_READ</name> <argument_list>(<argument><expr><name>Cx_len</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BLOB_READ</name> <argument_list>(<argument><expr><name>hyper_switch</name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BLOB_READ</name> <argument_list>(<argument><expr><name>bitmap_switch</name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BLOB_READ</name> <argument_list>(<argument><expr><name>sparsity_control</name></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BLOB_READ</name> <argument_list>(<argument><expr><name>sparsity_iso_csc</name></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BLOB_READ</name> <argument_list>(<argument><expr><name>Cp_nblocks</name></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>GB_BLOB_READ</name> <argument_list>(<argument><expr><name>Cp_method</name></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BLOB_READ</name> <argument_list>(<argument><expr><name>Ch_nblocks</name></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>GB_BLOB_READ</name> <argument_list>(<argument><expr><name>Ch_method</name></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BLOB_READ</name> <argument_list>(<argument><expr><name>Cb_nblocks</name></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>GB_BLOB_READ</name> <argument_list>(<argument><expr><name>Cb_method</name></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BLOB_READ</name> <argument_list>(<argument><expr><name>Ci_nblocks</name></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>GB_BLOB_READ</name> <argument_list>(<argument><expr><name>Ci_method</name></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BLOB_READ</name> <argument_list>(<argument><expr><name>Cx_nblocks</name></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>GB_BLOB_READ</name> <argument_list>(<argument><expr><name>Cx_method</name></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>sparsity</name> <init>= <expr><name>sparsity_iso_csc</name> <operator>/</operator> <literal type="number">4</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>iso</name> <init>= <expr><operator>(</operator><operator>(</operator><name>sparsity_iso_csc</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>is_csc</name> <init>= <expr><operator>(</operator><operator>(</operator><name>sparsity_iso_csc</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine the matrix type</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>ccode</name> <init>= <expr><operator>(</operator><name>GB_Type_code</name><operator>)</operator> <name>typecode</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>ctype</name> <init>= <expr><call><name>GB_code_type</name> <argument_list>(<argument><expr><name>ccode</name></expr></argument>, <argument><expr><name>type_expected</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">// ensure the type has the right size</comment>
    <if_stmt><if>if <condition>(<expr><name>ctype</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ctype</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <name>typesize</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// blob is invalid; type is missing or the wrong size</comment>
        <return>return <expr><operator>(</operator><name>GrB_DOMAIN_MISMATCH</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>ccode</name> <operator>==</operator> <name>GB_UDT_code</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// user-defined name is 128 bytes, if present</comment>
        <comment type="line">// ensure the user-defined type has the right name</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>ctype</name> <operator>==</operator> <name>type_expected</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>strncmp</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>blob</name> <operator>+</operator> <name>s</name><operator>)</operator></expr></argument>, <argument><expr><name><name>ctype</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
            <argument><expr><name>GxB_MAX_NAME_LEN</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// blob is invalid</comment>
            <return>return <expr><operator>(</operator><name>GrB_DOMAIN_MISMATCH</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>s</name> <operator>+=</operator> <name>GxB_MAX_NAME_LEN</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>type_expected</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>ctype</name> <operator>!=</operator> <name>type_expected</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// built-in type must match type_expected</comment>
        <comment type="line">// blob is invalid</comment>
        <return>return <expr><operator>(</operator><name>GrB_DOMAIN_MISMATCH</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the compressed block sizes from the blob for each array</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_BLOB_READS</name> <argument_list>(<argument><expr><name>Cp_Sblocks</name></expr></argument>, <argument><expr><name>Cp_nblocks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BLOB_READS</name> <argument_list>(<argument><expr><name>Ch_Sblocks</name></expr></argument>, <argument><expr><name>Ch_nblocks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BLOB_READS</name> <argument_list>(<argument><expr><name>Cb_Sblocks</name></expr></argument>, <argument><expr><name>Cb_nblocks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BLOB_READS</name> <argument_list>(<argument><expr><name>Ci_Sblocks</name></expr></argument>, <argument><expr><name>Ci_nblocks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BLOB_READS</name> <argument_list>(<argument><expr><name>Cx_Sblocks</name></expr></argument>, <argument><expr><name>Cx_nblocks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate the output matrix C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// allocate the matrix with info from the header</comment>
    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>,  <comment type="line">// new header (C is NULL on input)</comment>
        <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>vdim</name></expr></argument>, <argument><expr><name>GB_Ap_null</name></expr></argument>, <argument><expr><name>is_csc</name></expr></argument>,
        <argument><expr><name>sparsity</name></expr></argument>, <argument><expr><name>hyper_switch</name></expr></argument>, <argument><expr><name>nvec</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvec</name></name> <operator>=</operator> <name>nvec</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>=</operator> <name>nvec_nonempty</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <name>nvals</name></expr> ;</expr_stmt>      <comment type="line">// revised below</comment>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>bitmap_switch</name></name> <operator>=</operator> <name>bitmap_switch</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>sparsity_control</name></name> <operator>=</operator> <name>sparsity_control</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>iso</name></name> <operator>=</operator> <name>iso</name></expr> ;</expr_stmt>

    <comment type="line">// the matrix has no pending work</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>Pending</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>nzombies</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><name><name>C</name><operator>-&gt;</operator><name>jumbled</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// decompress each array (Cp, Ch, Cb, Ci, and Cx)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <switch>switch <condition>(<expr><name>sparsity</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>GxB_HYPERSPARSE</name></expr> :</case> 
            <comment type="line">// decompress Cp, Ch, and Ci</comment>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_deserialize_from_blob</name> <argument_list>(<argument><expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>p</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>p_size</name></name><operator>)</operator></expr></argument>,
                <argument><expr><name>Cp_len</name></expr></argument>, <argument><expr><name>blob</name></expr></argument>, <argument><expr><name>blob_size</name></expr></argument>, <argument><expr><name>Cp_Sblocks</name></expr></argument>, <argument><expr><name>Cp_nblocks</name></expr></argument>, <argument><expr><name>Cp_method</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_deserialize_from_blob</name> <argument_list>(<argument><expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>h</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>h_size</name></name><operator>)</operator></expr></argument>,
                <argument><expr><name>Ch_len</name></expr></argument>, <argument><expr><name>blob</name></expr></argument>, <argument><expr><name>blob_size</name></expr></argument>, <argument><expr><name>Ch_Sblocks</name></expr></argument>, <argument><expr><name>Ch_nblocks</name></expr></argument>, <argument><expr><name>Ch_method</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_deserialize_from_blob</name> <argument_list>(<argument><expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>i</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>i_size</name></name><operator>)</operator></expr></argument>,
                <argument><expr><name>Ci_len</name></expr></argument>, <argument><expr><name>blob</name></expr></argument>, <argument><expr><name>blob_size</name></expr></argument>, <argument><expr><name>Ci_Sblocks</name></expr></argument>, <argument><expr><name>Ci_nblocks</name></expr></argument>, <argument><expr><name>Ci_method</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><name>GxB_SPARSE</name></expr> :</case> 

            <comment type="line">// decompress Cp and Ci</comment>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_deserialize_from_blob</name> <argument_list>(<argument><expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>p</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>p_size</name></name><operator>)</operator></expr></argument>,
                <argument><expr><name>Cp_len</name></expr></argument>, <argument><expr><name>blob</name></expr></argument>, <argument><expr><name>blob_size</name></expr></argument>, <argument><expr><name>Cp_Sblocks</name></expr></argument>, <argument><expr><name>Cp_nblocks</name></expr></argument>, <argument><expr><name>Cp_method</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_deserialize_from_blob</name> <argument_list>(<argument><expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>i</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>i_size</name></name><operator>)</operator></expr></argument>,
                <argument><expr><name>Ci_len</name></expr></argument>, <argument><expr><name>blob</name></expr></argument>, <argument><expr><name>blob_size</name></expr></argument>, <argument><expr><name>Ci_Sblocks</name></expr></argument>, <argument><expr><name>Ci_nblocks</name></expr></argument>, <argument><expr><name>Ci_method</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><name>GxB_BITMAP</name></expr> :</case> 

            <comment type="line">// decompress Cb</comment>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_deserialize_from_blob</name> <argument_list>(<argument><expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>b</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>b_size</name></name><operator>)</operator></expr></argument>,
                <argument><expr><name>Cb_len</name></expr></argument>, <argument><expr><name>blob</name></expr></argument>, <argument><expr><name>blob_size</name></expr></argument>, <argument><expr><name>Cb_Sblocks</name></expr></argument>, <argument><expr><name>Cb_nblocks</name></expr></argument>, <argument><expr><name>Cb_method</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><name>GxB_FULL</name></expr> :</case> 
            <break>break ;</break>
        <default>default:</default> <empty_stmt>;</empty_stmt>
    </block_content>}</block></switch>

    <comment type="line">// decompress Cx</comment>
    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_deserialize_from_blob</name> <argument_list>(<argument><expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>x</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>x_size</name></name><operator>)</operator></expr></argument>, <argument><expr><name>Cx_len</name></expr></argument>,
        <argument><expr><name>blob</name></expr></argument>, <argument><expr><name>blob_size</name></expr></argument>, <argument><expr><name>Cx_Sblocks</name></expr></argument>, <argument><expr><name>Cx_nblocks</name></expr></argument>, <argument><expr><name>Cx_method</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>C</name><operator>-&gt;</operator><name>p</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// C is sparse or hypersparse.  v7.2.1 and later have the new C-&gt;nvals</comment>
        <comment type="line">// value inside the blob already.  The blob prior to v7.2.1 had nvals</comment>
        <comment type="line">// of zero for sparse and hypersparse matrices.  Set it here to the</comment>
        <comment type="line">// correct value, so that blobs written by v7.2.0 and earlier can be</comment>
        <comment type="line">// read by v7.2.1 and later.  For both variants, ignore nvals in the</comment>
        <comment type="line">// blob and use Cp [nvec] when C is sparse or hypersparse.</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><name>version</name> <operator>&gt;</operator> <call><name>GxB_VERSION</name> <argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name><name>C</name><operator>-&gt;</operator><name>nvals</name></name> <operator>==</operator> <name><name>C</name><operator>-&gt;</operator><name>p</name> <index>[<expr><name><name>C</name><operator>-&gt;</operator><name>nvec</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <name><name>C</name><operator>-&gt;</operator><name>p</name> <index>[<expr><name><name>C</name><operator>-&gt;</operator><name>nvec</name></name></expr>]</index></name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Chandle</name><operator>)</operator> <operator>=</operator> <name>C</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><operator>*</operator><name>Chandle</name></expr></argument>, <argument><expr><literal type="string">"Final result from deserialize"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
