<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_masker_sparsity.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_masker_sparsity: determine the sparsity structure for C&lt;M or !M&gt;=Z</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Determines the sparsity structure for R for computing R = masker (C,M,Z).</comment>
<comment type="line">// If R should be hypersparse or sparse, on output, this function simply</comment>
<comment type="line">// returns GxB_SPARSE.  The final determination is made by GB_add_phase0,</comment>
<comment type="line">// as called by GB_masker.</comment>

<comment type="line">// C is sparse or hypersparse on input.  It is never bitmap or full; that</comment>
<comment type="line">// case is handled by GB_subassign instead.  R can be constructed as sparse,</comment>
<comment type="line">// hypersparse, or bitmap (not full).  M and Z can have any sparsity pattern.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mask.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>GB_masker_sparsity</name>      <comment type="line">// return the sparsity structure for R</comment>
<parameter_list>(
    <comment type="line">// input:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,     <comment type="line">// input C matrix</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,     <comment type="line">// mask for C, always present</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_comp</name></decl></parameter>,   <comment type="line">// if true, use !M</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>Z</name></decl></parameter>      <comment type="line">// input Z matrix</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine the sparsity of R</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// In the tables below "sparse" means either sparse or hypersparse.</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>M_is_sparse</name> <init>= <expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>Z_is_sparse</name> <init>= <expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>R_sparsity</name></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>Mask_comp</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      C       &lt;!M&gt; =       Z              R</comment>
        <comment type="line">//      ------------------------------------------</comment>

        <comment type="line">//      sparse  sparse      sparse          sparse</comment>
        <comment type="line">//      sparse  sparse      bitmap          bitmap</comment>
        <comment type="line">//      sparse  sparse      full            bitmap</comment>

        <comment type="line">//      sparse  bitmap      sparse          sparse</comment>
        <comment type="line">//      sparse  bitmap      bitmap          bitmap</comment>
        <comment type="line">//      sparse  bitmap      full            bitmap</comment>

        <comment type="line">//      sparse  full        sparse          sparse</comment>
        <comment type="line">//      sparse  full        bitmap          bitmap</comment>
        <comment type="line">//      sparse  full        full            bitmap</comment>

        <if_stmt><if>if <condition>(<expr><name>Z_is_sparse</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name>R_sparsity</name> <operator>=</operator> <name>GxB_SPARSE</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <expr_stmt><expr><name>R_sparsity</name> <operator>=</operator> <name>GxB_BITMAP</name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      C       &lt;M&gt; =        Z              R</comment>
        <comment type="line">//      ------------------------------------------</comment>

        <comment type="line">//      sparse  sparse      sparse          sparse</comment>
        <comment type="line">//      sparse  sparse      bitmap          sparse</comment>
        <comment type="line">//      sparse  sparse      full            sparse</comment>

        <comment type="line">//      sparse  bitmap      sparse          sparse</comment>
        <comment type="line">//      sparse  bitmap      bitmap          bitmap</comment>
        <comment type="line">//      sparse  bitmap      full            bitmap</comment>

        <comment type="line">//      sparse  full        sparse          sparse</comment>
        <comment type="line">//      sparse  full        bitmap          bitmap</comment>
        <comment type="line">//      sparse  full        full            bitmap</comment>

        <if_stmt><if>if <condition>(<expr><name>M_is_sparse</name> <operator>||</operator> <name>Z_is_sparse</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name>R_sparsity</name> <operator>=</operator> <name>GxB_SPARSE</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <expr_stmt><expr><name>R_sparsity</name> <operator>=</operator> <name>GxB_BITMAP</name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><operator>(</operator><name>R_sparsity</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
