<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GrB_Vector_removeElement.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Vector_removeElement: remove a single entry from a vector</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Removes a single entry, V (i), from the vector V.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_removeElement: remove V(i) if it exists</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>GB_removeElement</name>     <comment type="line">// returns true if found</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Vector</name></type> <name>V</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Index</name></type> <name>i</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// remove V(i)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// V is bitmap</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Vb</name> <init>= <expr><name><name>V</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int8_t</name></type> <name>vb</name> <init>= <expr><name><name>Vb</name> <index>[<expr><name>i</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>vb</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// V(i) is present; remove it</comment>
            <expr_stmt><expr><name><name>Vb</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>V</name><operator>-&gt;</operator><name>nvals</name></name><operator>--</operator></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// V(i) is always found, whether present or not</comment>
        <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// V is sparse</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Vp</name> <init>= <expr><name><name>V</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Vi</name> <init>= <expr><name><name>V</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl> ;</decl_stmt>

        <comment type="line">// look in V(:)</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>pleft</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>pright</name> <init>= <expr><name><name>Vp</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>vnz</name> <init>= <expr><name>pright</name></expr></init></decl> ;</decl_stmt>

        <decl_stmt><decl><type><name>bool</name></type> <name>is_zombie</name></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>vnz</name> <operator>==</operator> <name><name>V</name><operator>-&gt;</operator><name>vlen</name></name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// V(:) is as-if-full so no binary search is needed to find V(i)</comment>
            <expr_stmt><expr><name>pleft</name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_UNFLIP</name> <argument_list>(<argument><expr><name><name>Vi</name> <index>[<expr><name>pleft</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>is_zombie</name> <operator>=</operator> <call><name>GB_IS_ZOMBIE</name> <argument_list>(<argument><expr><name><name>Vi</name> <index>[<expr><name>pleft</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// binary search for V(i): time is O(log(vnz))</comment>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>nzombies</name> <init>= <expr><name><name>V</name><operator>-&gt;</operator><name>nzombies</name></name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><name>pright</name><operator>--</operator></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_BINARY_SEARCH_ZOMBIE</name> <argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>Vi</name></expr></argument>, <argument><expr><name>pleft</name></expr></argument>, <argument><expr><name>pright</name></expr></argument>, <argument><expr><name>found</name></expr></argument>,
                <argument><expr><name>nzombies</name></expr></argument>, <argument><expr><name>is_zombie</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// remove the entry</comment>
        <if_stmt><if>if <condition>(<expr><name>found</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_zombie</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// V(i) becomes a zombie</comment>
            <expr_stmt><expr><name><name>V</name><operator>-&gt;</operator><name>i</name> <index>[<expr><name>pleft</name></expr>]</index></name> <operator>=</operator> <call><name>GB_FLIP</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>V</name><operator>-&gt;</operator><name>nzombies</name></name><operator>++</operator></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>(</operator><name>found</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_Vector_removeElement: remove a single entry from a vector</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>GB_Vector_removeElement</name>
<parameter_list>(
    <parameter><decl><type><name>GrB_Vector</name></type> <name>V</name></decl></parameter>,               <comment type="line">// vector to remove entry from</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>i</name></decl></parameter>,                <comment type="line">// index</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// if V is jumbled, wait on the vector first.  If full, convert to nonfull</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name><name>V</name><operator>-&gt;</operator><name>jumbled</name></name> <operator>||</operator> <call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// convert V from full to sparse</comment>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_convert_to_nonfull</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>V</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// V is sparse and jumbled</comment>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_wait</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>V</name></expr></argument>, <argument><expr><literal type="string">"v (removeElement:jumbled"</literal></expr></argument>,
                <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <comment type="line">// remove the entry</comment>
        <return>return <expr><operator>(</operator><call><name>GB_Vector_removeElement</name> <argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// V is not jumbled and not full; it may have zombies and pending tuples</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_ZOMBIES_OK</name> <argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_PENDING_OK</name> <argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// check index</comment>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>V</name><operator>-&gt;</operator><name>vlen</name></name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_INVALID_INDEX</name></expr></argument>, <argument><expr><literal type="string">"Row index "</literal>
            <name>GBu</name> <literal type="string">" out of range; must be &lt; "</literal> <name>GBd</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>V</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// if V is sparse, it may have pending tuples</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>V_is_pending</name> <init>= <expr><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt> 
    <if_stmt><if>if <condition>(<expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>V</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>V_is_pending</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// quick return</comment>
        <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// remove the entry</comment>
    <if_stmt><if>if <condition>(<expr><call><name>GB_removeElement</name> <argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// found it; no need to assemble pending tuples</comment>
        <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// assemble any pending tuples; zombies are OK</comment>
    <if_stmt><if>if <condition>(<expr><name>V_is_pending</name></expr>)</condition>
    <block>{<block_content> 
        <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_wait</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>V</name></expr></argument>, <argument><expr><literal type="string">"v (removeElement:pending tuples)"</literal></expr></argument>,
            <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <comment type="line">// look again; remove the entry if it was a pending tuple</comment>
        <expr_stmt><expr><call><name>GB_removeElement</name> <argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Vector_removeElement: remove a single entry from a vector</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>GrB_Vector_removeElement</name>
<parameter_list>(
    <parameter><decl><type><name>GrB_Vector</name></type> <name>V</name></decl></parameter>,               <comment type="line">// vector to remove entry from</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>i</name></decl></parameter>                 <comment type="line">// index</comment>
)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>GB_WHERE</name> <argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><literal type="string">"GrB_Vector_removeElement (v, i)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><call><name>GB_Vector_removeElement</name> <argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
