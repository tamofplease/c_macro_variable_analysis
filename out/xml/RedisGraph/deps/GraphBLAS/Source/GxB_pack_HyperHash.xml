<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GxB_pack_HyperHash.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GxB_pack_HyperHash: set the A-&gt;Y hyper_hash of a matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// GxB_pack_HyperHash assigns the input Y matrix as the A-&gt;Y hyper_hash of the</comment>
<comment type="line">// hypersparse matrix A.  Normally, this method is called immediately after</comment>
<comment type="line">// calling one of the four methods GxB_Matrix_(import/pack)_Hyper(CSR/CSC).</comment>
<comment type="line">// For example, to unpack then pack a hypersparse CSC matrix:</comment>

<comment type="line">//      GrB_Matrix Y = NULL ;</comment>
<comment type="line">//</comment>
<comment type="line">//      // to unpack all of A:</comment>
<comment type="line">//      GxB_unpack_HyperHash (A, &amp;Y, desc) ;    // first unpack A-&gt;Y into Y</comment>
<comment type="line">//      GxB_Matrix_unpack_HyperCSC (A,          // then unpack the rest of A</comment>
<comment type="line">//          &amp;Ap, &amp;Ah, &amp;Ai, &amp;Ax, &amp;Ap_size, &amp;Ah_size, &amp;Ai_size, &amp;Ax_size,</comment>
<comment type="line">//          &amp;iso, &amp;nvec, &amp;jumbled, descriptor) ;</comment>
<comment type="line">//</comment>
<comment type="line">//      // use the unpacked contents of A here, but do not change Ah or nvec.</comment>
<comment type="line">//      ...</comment>
<comment type="line">//      </comment>
<comment type="line">//      // to pack the data back into A:</comment>
<comment type="line">//      GxB_Matrix_pack_HyperCSC (A, ...) ;     // pack most of A, except A-&gt;Y </comment>
<comment type="line">//      GxB_pack_HyperHash (A, &amp;Y, desc) ;      // then pack A-&gt;Y</comment>

<comment type="line">// The same process is used with GxB_Matrix_unpack_HyperCSR,</comment>
<comment type="line">// and the GxB_Matrix_export_Hyper* and GxB_Matrix_import_Hyper* methods.</comment>

<comment type="line">// If A is not hypersparse on input to GxB_pack_HyperHash, or if A already has</comment>
<comment type="line">// a hyper_hash matrix, or if Y is NULL on input, then nothing happens and Y is</comment>
<comment type="line">// unchanged.  This is not an error condition and this method returns</comment>
<comment type="line">// GrB_SUCCESS.  In this case, if Y is non-NULL after calling this method, it</comment>
<comment type="line">// owned by the user application and freeing it is the responsibility of the</comment>
<comment type="line">// user application.</comment>

<comment type="line">// Basic checks are perfomed on Y: Y must have the right dimensions:  if A is</comment>
<comment type="line">// HyperCSR and m-by-n with nvec vectors present in Ah, then Y must be n-by-v</comment>
<comment type="line">// where v is a power of 2; if A is HyperCSR and m-by-n, then Y must be m-by-v.</comment>
<comment type="line">// nvals(Y) must equal nvec.  Y must be sparse, held by column, and have type</comment>
<comment type="line">// int64.  It cannot have any pending work.  It cannot have a hyper_hash</comment>
<comment type="line">// of its own.  If any of these conditions hold, GrB_INVALID is returned and</comment>
<comment type="line">// A and Y are unchanged.</comment>

<comment type="line">// If Y is moved into A as its hyper_hash, then the caller's Y is set to NULL</comment>
<comment type="line">// to indicate that it has been moved into A.  It is no longer owned by the</comment>
<comment type="line">// caller, but is instead an opaque component of the A matrix.  It will be</comment>
<comment type="line">// freed by SuiteSparse:GraphBLAS if A is modified or freed.</comment>

<comment type="line">// Results are undefined if the input Y was not created by GxB_unpack_HyperHash</comment>
<comment type="line">// (see the example above) or if the Ah contents or nvec of the matrix A are</comment>
<comment type="line">// modified after they were exported/unpacked by</comment>
<comment type="line">// GxB_Matrix_(export/unpack)_Hyper(CSR/CSC).</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_export.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GxB_pack_HyperHash</name>         <comment type="line">// move Y into A-&gt;Y</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,                   <comment type="line">// matrix to modify</comment>
    <parameter><decl><type><name>GrB_Matrix</name> <modifier>*</modifier></type><name>Y</name></decl></parameter>,                  <comment type="line">// hyper_hash matrix to pack into A</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Descriptor</name></type> <name>desc</name></decl></parameter>       <comment type="line">// unused</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs and get the descriptor</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_WHERE1</name> <argument_list>(<argument><expr><literal type="string">"GxB_pack_HyperHash (A, &amp;Y, desc)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BURBLE_START</name> <argument_list>(<argument><expr><literal type="string">"GxB_pack_HyperHash"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_FAULTY</name> <argument_list>(<argument><expr><operator>*</operator><name>Y</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check for quick return</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>Y</name><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>A</name><operator>-&gt;</operator><name>Y</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// nothing to do.  A and Y are unchanged</comment>
        <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// basic error checks</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>Y</name><operator>)</operator><operator>-&gt;</operator><name>vlen</name></name> <operator>!=</operator> <name><name>A</name><operator>-&gt;</operator><name>vdim</name></name> <operator>||</operator> <operator>!</operator><call><name>GB_IS_POWER_OF_TWO</name> <argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>Y</name><operator>)</operator><operator>-&gt;</operator><name>vdim</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
        <name><operator>(</operator><operator>*</operator><name>Y</name><operator>)</operator><operator>-&gt;</operator><name>nvals</name></name> <operator>!=</operator> <name><name>A</name><operator>-&gt;</operator><name>nvec</name></name> <operator>||</operator> <operator>!</operator><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><operator>*</operator><name>Y</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><operator>(</operator><operator>*</operator><name>Y</name><operator>)</operator><operator>-&gt;</operator><name>Y</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator>
        <name><operator>(</operator><operator>*</operator><name>Y</name><operator>)</operator><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>GrB_UINT64</name> <operator>||</operator> <operator>!</operator><name><operator>(</operator><operator>*</operator><name>Y</name><operator>)</operator><operator>-&gt;</operator><name>is_csc</name></name> <operator>||</operator> <call><name>GB_ANY_PENDING_WORK</name> <argument_list>(<argument><expr><operator>*</operator><name>Y</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// Y is invalid</comment>
        <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// pack the hyper_hash matrix Y into A</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>Y</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>Y</name><operator>)</operator></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Y</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>Y_shallow</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>GB_BURBLE_END</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
