<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_transpose_method.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_transpose_method: select method for GB_transpose</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_transpose.h"</cpp:file></cpp:include>

<comment type="line">// GB_transpose can use choose between a merge-sort-based method that takes</comment>
<comment type="line">// O(anz*log(anz)) time, or a bucket-sort method that takes O(anz+m+n) time.</comment>
<comment type="line">// The bucket sort has 3 methods: sequential, atomic, and non-atomic.</comment>

<function><type><name>bool</name></type> <name>GB_transpose_method</name>        <comment type="line">// if true: use GB_builder, false: use bucket</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,         <comment type="line">// matrix to transpose</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nworkspaces_bucket</name></decl></parameter>,    <comment type="line">// # of slices of A for the bucket method</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nthreads_bucket</name></decl></parameter>,       <comment type="line">// # of threads to use for the bucket method</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// if available, A-&gt;nvec_nonempty is used to select the method</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>anvec</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr> </then><else>: <expr><name><name>A</name><operator>-&gt;</operator><name>nvec_nonempty</name></name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>anz</name> <init>= <expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>avlen</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
<comment type="line">//  int64_t avdim = A-&gt;vdim ;</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>anzlog</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>anz</name>   <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>GB_CEIL_LOG2</name> <argument_list>(<argument><expr><name>anz</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>mlog</name>   <init>= <expr><ternary><condition><expr><operator>(</operator><name>avlen</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>GB_CEIL_LOG2</name> <argument_list>(<argument><expr><name>avlen</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>bucket_factor</name></decl> ;</decl_stmt>

    <comment type="line">// determine # of threads for bucket method</comment>
    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>anz</name> <operator>+</operator> <name>avlen</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// select between the atomic and non-atomic bucket method</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>atomics</name></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>nthreads</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// sequential bucket method: no atomics needed</comment>
        <comment type="line">// 2 threads: always use non-atomic method</comment>
        <expr_stmt><expr><name>atomics</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><name>double</name><operator>)</operator> <name>nthreads</name> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>avlen</name> <operator>&gt;</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>anz</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// non-atomic workspace is too high; use atomic method</comment>
        <expr_stmt><expr><name>atomics</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="line">// select between atomic and non-atomic methods.  This rule is based on</comment>
        <comment type="line">// performance on a 4-core system with 4 threads with gcc 7.5.  The icc</comment>
        <comment type="line">// compiler has much slower atomics than gcc and so atol should likely</comment>
        <comment type="line">// be smaller when using icc.</comment>

        <decl_stmt><decl><type><name>int</name></type> <name>atol</name></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>anzlog</name> <operator>&lt;</operator> <literal type="number">14</literal></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name>atol</name> <operator>=</operator> <operator>-</operator><literal type="number">4</literal></expr> ;</expr_stmt>     <comment type="line">// fewer than 16K entries in A</comment>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <switch>switch <condition>(<expr><name>anzlog</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><literal type="number">14</literal></expr>:</case> <expr_stmt><expr><name>atol</name> <operator>=</operator> <operator>-</operator><literal type="number">4</literal></expr> ;</expr_stmt> <break>break ;</break>        <comment type="line">// 16K entries in A</comment>
                <case>case <expr><literal type="number">15</literal></expr>:</case> <expr_stmt><expr><name>atol</name> <operator>=</operator> <operator>-</operator><literal type="number">3</literal></expr> ;</expr_stmt> <break>break ;</break>        <comment type="line">// 32K</comment>
                <case>case <expr><literal type="number">16</literal></expr>:</case> <expr_stmt><expr><name>atol</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr> ;</expr_stmt> <break>break ;</break>        <comment type="line">// 64K</comment>
                <case>case <expr><literal type="number">17</literal></expr>:</case> <expr_stmt><expr><name>atol</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt> <break>break ;</break>        <comment type="line">// 128K</comment>
                <case>case <expr><literal type="number">18</literal></expr>:</case> <expr_stmt><expr><name>atol</name> <operator>=</operator>  <literal type="number">0</literal></expr> ;</expr_stmt> <break>break ;</break>        <comment type="line">// 256K</comment>
                <case>case <expr><literal type="number">19</literal></expr>:</case> <expr_stmt><expr><name>atol</name> <operator>=</operator>  <literal type="number">1</literal></expr> ;</expr_stmt> <break>break ;</break>        <comment type="line">// 512K</comment>
                <case>case <expr><literal type="number">20</literal></expr>:</case> <expr_stmt><expr><name>atol</name> <operator>=</operator>  <literal type="number">2</literal></expr> ;</expr_stmt> <break>break ;</break>        <comment type="line">// 1M</comment>
                <case>case <expr><literal type="number">21</literal></expr>:</case> <expr_stmt><expr><name>atol</name> <operator>=</operator>  <literal type="number">3</literal></expr> ;</expr_stmt> <break>break ;</break>        <comment type="line">// 2M</comment>
                <case>case <expr><literal type="number">22</literal></expr>:</case> <expr_stmt><expr><name>atol</name> <operator>=</operator>  <literal type="number">4</literal></expr> ;</expr_stmt> <break>break ;</break>        <comment type="line">// 4M</comment>
                <case>case <expr><literal type="number">23</literal></expr>:</case> <expr_stmt><expr><name>atol</name> <operator>=</operator>  <literal type="number">5</literal></expr> ;</expr_stmt> <break>break ;</break>        <comment type="line">// 8M</comment>
                <case>case <expr><literal type="number">24</literal></expr>:</case> <expr_stmt><expr><name>atol</name> <operator>=</operator>  <literal type="number">6</literal></expr> ;</expr_stmt> <break>break ;</break>        <comment type="line">// 16M</comment>
                <case>case <expr><literal type="number">25</literal></expr>:</case> <expr_stmt><expr><name>atol</name> <operator>=</operator>  <literal type="number">8</literal></expr> ;</expr_stmt> <break>break ;</break>        <comment type="line">// 32M</comment>
                <case>case <expr><literal type="number">26</literal></expr>:</case> <expr_stmt><expr><name>atol</name> <operator>=</operator>  <literal type="number">9</literal></expr> ;</expr_stmt> <break>break ;</break>        <comment type="line">// 64M</comment>
                <case>case <expr><literal type="number">27</literal></expr>:</case> <expr_stmt><expr><name>atol</name> <operator>=</operator>  <literal type="number">9</literal></expr> ;</expr_stmt> <break>break ;</break>        <comment type="line">// 128M</comment>
                <case>case <expr><literal type="number">28</literal></expr>:</case> <expr_stmt><expr><name>atol</name> <operator>=</operator> <literal type="number">10</literal></expr> ;</expr_stmt> <break>break ;</break>        <comment type="line">// 256M</comment>
                <default>default:</default> <expr_stmt><expr><name>atol</name> <operator>=</operator> <literal type="number">10</literal></expr> ;</expr_stmt> <break>break ;</break>        <comment type="line">// &gt; 256M</comment>
            </block_content>}</block></switch>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>anzlog</name> <operator>-</operator> <name>mlog</name> <operator>&lt;=</operator> <name>atol</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// use atomic method</comment>
            <comment type="line">// anzlog - mlog is the log2 of the average row degree, rounded.</comment>
            <comment type="line">// If the average row degree is &lt;= 2^atol, use the atomic method.</comment>
            <comment type="line">// That is, the atomic method works better for sparser matrices,</comment>
            <comment type="line">// and the non-atomic works better or denser matrices.  However,</comment>
            <comment type="line">// the threshold changes as the problem gets larger, in terms of #</comment>
            <comment type="line">// of entries in A, when the atomic method becomes more attractive</comment>
            <comment type="line">// relative to the non-atomic method.  The atomic has the</comment>
            <comment type="line">// advantange of needing much less workspace, which becomes more</comment>
            <comment type="line">// important for larger problems.</comment>
            <expr_stmt><expr><name>atomics</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// use non-atomic method</comment>
            <expr_stmt><expr><name>atomics</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>nworkspaces_bucket</name><operator>)</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>atomics</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>nthreads</name></expr></else></ternary></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>nthreads_bucket</name><operator>)</operator> <operator>=</operator> <name>nthreads</name></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// select between GB_builder method and bucket method</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// As the problem gets larger, the GB_builder method gets faster relative</comment>
    <comment type="line">// to the bucket method, in terms of the "constants" in the O(a log a) work</comment>
    <comment type="line">// for GB_builder, or O (a+m+n) for the bucket method.  Clearly, O (a log</comment>
    <comment type="line">// a) and O (a+m+n) do not fully model the performance of these two</comment>
    <comment type="line">// methods.  Perhaps this is because of cache effects.  The bucket method</comment>
    <comment type="line">// has more irregular memory accesses.  The GB_builder method uses</comment>
    <comment type="line">// mergesort, which has good memory locality.</comment>

    <if_stmt><if>if <condition>(<expr><name>anzlog</name> <operator>&lt;</operator> <literal type="number">14</literal></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name>bucket_factor</name> <operator>=</operator> <literal type="number">0.5</literal></expr> ;</expr_stmt>       <comment type="line">// fewer than 2^14 = 16K entries</comment>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <switch>switch <condition>(<expr><name>anzlog</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><literal type="number">14</literal></expr>:</case> <expr_stmt><expr><name>bucket_factor</name> <operator>=</operator> <literal type="number">0.6</literal></expr> ;</expr_stmt> <break>break ;</break>      <comment type="line">// 16K entries in A</comment>
            <case>case <expr><literal type="number">15</literal></expr>:</case> <expr_stmt><expr><name>bucket_factor</name> <operator>=</operator> <literal type="number">0.7</literal></expr> ;</expr_stmt> <break>break ;</break>      <comment type="line">// 32K</comment>
            <case>case <expr><literal type="number">16</literal></expr>:</case> <expr_stmt><expr><name>bucket_factor</name> <operator>=</operator> <literal type="number">1.0</literal></expr> ;</expr_stmt> <break>break ;</break>      <comment type="line">// 64K</comment>
            <case>case <expr><literal type="number">17</literal></expr>:</case> <expr_stmt><expr><name>bucket_factor</name> <operator>=</operator> <literal type="number">1.7</literal></expr> ;</expr_stmt> <break>break ;</break>      <comment type="line">// 128K</comment>
            <case>case <expr><literal type="number">18</literal></expr>:</case> <expr_stmt><expr><name>bucket_factor</name> <operator>=</operator> <literal type="number">3.0</literal></expr> ;</expr_stmt> <break>break ;</break>      <comment type="line">// 256K</comment>
            <case>case <expr><literal type="number">19</literal></expr>:</case> <expr_stmt><expr><name>bucket_factor</name> <operator>=</operator> <literal type="number">4.0</literal></expr> ;</expr_stmt> <break>break ;</break>      <comment type="line">// 512K</comment>
            <case>case <expr><literal type="number">20</literal></expr>:</case> <expr_stmt><expr><name>bucket_factor</name> <operator>=</operator> <literal type="number">6.0</literal></expr> ;</expr_stmt> <break>break ;</break>      <comment type="line">// 1M</comment>
            <case>case <expr><literal type="number">21</literal></expr>:</case> <expr_stmt><expr><name>bucket_factor</name> <operator>=</operator> <literal type="number">7.0</literal></expr> ;</expr_stmt> <break>break ;</break>      <comment type="line">// 2M</comment>
            <case>case <expr><literal type="number">22</literal></expr>:</case> <expr_stmt><expr><name>bucket_factor</name> <operator>=</operator> <literal type="number">8.0</literal></expr> ;</expr_stmt> <break>break ;</break>      <comment type="line">// 4M</comment>
            <case>case <expr><literal type="number">23</literal></expr>:</case> <expr_stmt><expr><name>bucket_factor</name> <operator>=</operator> <literal type="number">5.0</literal></expr> ;</expr_stmt> <break>break ;</break>      <comment type="line">// 8M</comment>
            <case>case <expr><literal type="number">24</literal></expr>:</case> <expr_stmt><expr><name>bucket_factor</name> <operator>=</operator> <literal type="number">5.0</literal></expr> ;</expr_stmt> <break>break ;</break>      <comment type="line">// 16M</comment>
            <case>case <expr><literal type="number">25</literal></expr>:</case> <expr_stmt><expr><name>bucket_factor</name> <operator>=</operator> <literal type="number">5.0</literal></expr> ;</expr_stmt> <break>break ;</break>      <comment type="line">// 32M</comment>
            <case>case <expr><literal type="number">26</literal></expr>:</case> <expr_stmt><expr><name>bucket_factor</name> <operator>=</operator> <literal type="number">5.0</literal></expr> ;</expr_stmt> <break>break ;</break>      <comment type="line">// 64M</comment>
            <case>case <expr><literal type="number">27</literal></expr>:</case> <expr_stmt><expr><name>bucket_factor</name> <operator>=</operator> <literal type="number">5.0</literal></expr> ;</expr_stmt> <break>break ;</break>      <comment type="line">// 128M</comment>
            <case>case <expr><literal type="number">28</literal></expr>:</case> <expr_stmt><expr><name>bucket_factor</name> <operator>=</operator> <literal type="number">5.0</literal></expr> ;</expr_stmt> <break>break ;</break>      <comment type="line">// 256M</comment>
            <default>default:</default> <expr_stmt><expr><name>bucket_factor</name> <operator>=</operator> <literal type="number">5.0</literal></expr> ;</expr_stmt> <break>break ;</break>      <comment type="line">// &gt; 256M</comment>
        </block_content>}</block></switch>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name>bucket_work</name>  <init>= <expr><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><name>anz</name> <operator>+</operator> <name>avlen</name> <operator>+</operator> <name>anvec</name><operator>)</operator> <operator>*</operator> <name>bucket_factor</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>builder_work</name> <init>= <expr><operator>(</operator><call><name>log2</name> <argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>anz</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><name>anz</name><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// select the method with the least amount of work</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>use_builder</name> <init>= <expr><operator>(</operator><name>builder_work</name> <operator>&lt;</operator> <name>bucket_work</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <return>return <expr><operator>(</operator><name>use_builder</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
