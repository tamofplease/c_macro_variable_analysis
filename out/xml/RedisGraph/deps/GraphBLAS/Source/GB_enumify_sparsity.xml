<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_enumify_sparsity.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_enumify_sparsity: enumerate the sparsity structure of a matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2021, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_stringify.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_enumify_sparsity</name>    <comment type="line">// enumerate the sparsity structure of a matrix</comment>
<parameter_list>(
    <comment type="line">// output:</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ecode</name></decl></parameter>,             <comment type="line">// enumerated sparsity structure:</comment>
                            <comment type="line">// 0:hyper, 1:sparse, 2:bitmap, 3:full</comment>
    <comment type="line">// input:</comment>
    <parameter><decl><type><name>int</name></type> <name>A_sparsity</name></decl></parameter>          <comment type="line">// 0:no matrix, 1:GxB_HYPERSPARSE, 2:GxB_SPARSE,</comment>
                            <comment type="line">// 4:GxB_BITMAP, 8:GxB_FULL</comment>
)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>A_sparsity</name> <operator>==</operator> <name>GxB_HYPERSPARSE</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>A_sparsity</name> <operator>==</operator> <name>GxB_BITMAP</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">2</literal></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>A_sparsity</name> <operator>==</operator> <name>GxB_FULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">3</literal></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// A is sparse, or there is no A (so pretend it is sparse)</comment>
        <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ecode</name><operator>)</operator> <operator>=</operator> <name>e</name></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
