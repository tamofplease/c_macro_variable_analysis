<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_memoryUsage.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_memoryUsage: # of bytes used for a matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_memoryUsage</name>         <comment type="line">// count # allocated blocks and their sizes</comment>
<parameter_list>(
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>nallocs</name></decl></parameter>,       <comment type="line">// # of allocated memory blocks</comment>
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>mem_deep</name></decl></parameter>,       <comment type="line">// # of bytes in blocks owned by this matrix</comment>
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>mem_shallow</name></decl></parameter>,    <comment type="line">// # of bytes in blocks owned by another matrix</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>      <comment type="line">// matrix to query</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>nallocs</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>mem_deep</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>mem_shallow</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// count the allocated blocks and their sizes</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// a matrix contains 0 to 10 dynamically malloc'd blocks, not including</comment>
    <comment type="line">// A-&gt;Y</comment>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>nallocs</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>mem_deep</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>mem_shallow</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>A</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>flush</omp:name></omp:directive></cpp:pragma>
        <return>return ;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>GB_Pending</name></type> <name>Pending</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>Pending</name></name></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>A</name><operator>-&gt;</operator><name>static_header</name></name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>nallocs</name><operator>)</operator><operator>++</operator></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>mem_deep</name><operator>)</operator> <operator>+=</operator> <name><name>A</name><operator>-&gt;</operator><name>header_size</name></name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>p_shallow</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>mem_shallow</name><operator>)</operator> <operator>+=</operator> <name><name>A</name><operator>-&gt;</operator><name>p_size</name></name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>nallocs</name><operator>)</operator><operator>++</operator></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>mem_deep</name><operator>)</operator> <operator>+=</operator> <name><name>A</name><operator>-&gt;</operator><name>p_size</name></name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>h_shallow</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>mem_shallow</name><operator>)</operator> <operator>+=</operator> <name><name>A</name><operator>-&gt;</operator><name>h_size</name></name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>nallocs</name><operator>)</operator><operator>++</operator></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>mem_deep</name><operator>)</operator> <operator>+=</operator> <name><name>A</name><operator>-&gt;</operator><name>h_size</name></name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>b</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>b_shallow</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>mem_shallow</name><operator>)</operator> <operator>+=</operator> <name><name>A</name><operator>-&gt;</operator><name>b_size</name></name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>nallocs</name><operator>)</operator><operator>++</operator></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>mem_deep</name><operator>)</operator> <operator>+=</operator> <name><name>A</name><operator>-&gt;</operator><name>b_size</name></name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>i_shallow</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>mem_shallow</name><operator>)</operator> <operator>+=</operator> <name><name>A</name><operator>-&gt;</operator><name>i_size</name></name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>nallocs</name><operator>)</operator><operator>++</operator></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>mem_deep</name><operator>)</operator> <operator>+=</operator> <name><name>A</name><operator>-&gt;</operator><name>i_size</name></name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>x_shallow</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>mem_shallow</name><operator>)</operator> <operator>+=</operator> <name><name>A</name><operator>-&gt;</operator><name>x_size</name></name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>nallocs</name><operator>)</operator><operator>++</operator></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>mem_deep</name><operator>)</operator> <operator>+=</operator> <name><name>A</name><operator>-&gt;</operator><name>x_size</name></name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>Pending</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>nallocs</name><operator>)</operator><operator>++</operator></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>mem_deep</name><operator>)</operator> <operator>+=</operator> <name><name>Pending</name><operator>-&gt;</operator><name>header_size</name></name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>Pending</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>Pending</name><operator>-&gt;</operator><name>i</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>nallocs</name><operator>)</operator><operator>++</operator></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>mem_deep</name><operator>)</operator> <operator>+=</operator> <name><name>Pending</name><operator>-&gt;</operator><name>i_size</name></name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>Pending</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>Pending</name><operator>-&gt;</operator><name>j</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>nallocs</name><operator>)</operator><operator>++</operator></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>mem_deep</name><operator>)</operator> <operator>+=</operator> <name><name>Pending</name><operator>-&gt;</operator><name>j_size</name></name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>Pending</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>Pending</name><operator>-&gt;</operator><name>x</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>nallocs</name><operator>)</operator><operator>++</operator></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>mem_deep</name><operator>)</operator> <operator>+=</operator> <name><name>Pending</name><operator>-&gt;</operator><name>x_size</name></name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>Y</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>Y_nallocs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>Y_mem_deep</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>Y_mem_shallow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GB_memoryUsage</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Y_nallocs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Y_mem_deep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Y_mem_shallow</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>Y</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>Y_shallow</name></name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// all of A-&gt;Y is shallow</comment>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>mem_shallow</name><operator>)</operator> <operator>+=</operator> <name>Y_mem_shallow</name> <operator>+</operator> <name>Y_mem_deep</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// A-&gt;Y itself is not shallow, but may contain shallow content</comment>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>nallocs</name><operator>)</operator> <operator>+=</operator> <name>Y_nallocs</name></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>mem_deep</name><operator>)</operator> <operator>+=</operator> <name>Y_mem_deep</name></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>mem_shallow</name><operator>)</operator> <operator>+=</operator> <name>Y_mem_shallow</name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>flush</omp:name></omp:directive></cpp:pragma>
    <return>return ;</return>
</block_content>}</block></function>

</unit>
