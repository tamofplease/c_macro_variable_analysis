<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_conform.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_conform: conform any matrix to its desired sparsity structure</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// On input, the matrix has any one of four sparsity structures: hypersparse,</comment>
<comment type="line">// sparse, bitmap, or full.  A bitmap or full matrix never has pending work.  A</comment>
<comment type="line">// sparse or hypersparse matrix may have pending work (zombies, jumbled, and/or</comment>
<comment type="line">// pending tuples).  The pending work is not finished unless the matrix is</comment>
<comment type="line">// converted to bitmap or full.  If this method fails, the matrix is cleared</comment>
<comment type="line">// of all entries.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_conform_hyper_or_bitmap: ensure a matrix is either hypersparse or bitmap</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>GrB_Info</name></type> <name>GB_conform_hyper_or_bitmap</name>
<parameter_list>(
    <parameter><decl><type><name>bool</name></type> <name>is_hyper</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_sparse</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_bitmap</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_full</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>is_full</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name>is_hyper</name> <operator>||</operator> <name>is_sparse</name><operator>)</operator> <operator>&amp;&amp;</operator>
        <call><name>GB_convert_sparse_to_bitmap_test</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>bitmap_switch</name></name></expr></argument>,
            <argument><expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// if full or sparse/hypersparse with many entries: to bitmap</comment>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_convert_any_to_bitmap</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>is_sparse</name> <operator>||</operator> <operator>(</operator><name>is_bitmap</name> <operator>&amp;&amp;</operator>
        <call><name>GB_convert_bitmap_to_sparse_test</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>bitmap_switch</name></name></expr></argument>,
            <argument><expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// if sparse or bitmap with few entries: to hypersparse</comment>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_convert_any_to_hyper</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_conform_sparse_or_bitmap: ensure a matrix is either sparse or bitmap</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>GrB_Info</name></type> <name>GB_conform_sparse_or_bitmap</name>
<parameter_list>(
    <parameter><decl><type><name>bool</name></type> <name>is_hyper</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_sparse</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_bitmap</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_full</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>is_full</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name>is_hyper</name> <operator>||</operator> <name>is_sparse</name><operator>)</operator> <operator>&amp;&amp;</operator>
        <call><name>GB_convert_sparse_to_bitmap_test</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>bitmap_switch</name></name></expr></argument>,
            <argument><expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// if full or sparse/hypersparse with many entries: to bitmap</comment>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_convert_any_to_bitmap</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>is_hyper</name> <operator>||</operator> <operator>(</operator><name>is_bitmap</name> <operator>&amp;&amp;</operator>
        <call><name>GB_convert_bitmap_to_sparse_test</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>bitmap_switch</name></name></expr></argument>,
            <argument><expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// if hypersparse or bitmap with few entries: to sparse</comment>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_convert_any_to_sparse</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_conform_hyper_sparse_or_bitmap: ensure matrix is hyper, sparse, or bitmap</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>GrB_Info</name></type> <name>GB_conform_hyper_sparse_or_bitmap</name>
<parameter_list>(
    <parameter><decl><type><name>bool</name></type> <name>is_hyper</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_sparse</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_bitmap</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_full</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>is_full</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name>is_hyper</name> <operator>||</operator> <name>is_sparse</name><operator>)</operator> <operator>&amp;&amp;</operator>
        <call><name>GB_convert_sparse_to_bitmap_test</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>bitmap_switch</name></name></expr></argument>,
            <argument><expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// if full or sparse/hypersparse with many entries: to bitmap</comment>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_convert_any_to_bitmap</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>is_bitmap</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>GB_convert_bitmap_to_sparse_test</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>bitmap_switch</name></name></expr></argument>,
            <argument><expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// if bitmap with few entries: to sparse</comment>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_convert_bitmap_to_sparse</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// conform between sparse and hypersparse</comment>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_conform_hyper</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else <comment type="line">// is_hyper || is_sparse</comment>
    <block>{<block_content> 
        <comment type="line">// conform between sparse and hypersparse</comment>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_conform_hyper</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_conform</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>GB_conform</name>     <comment type="line">// conform a matrix to its desired sparsity structure</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,       <comment type="line">// matrix to conform</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A to conform"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_ZOMBIES_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_PENDING_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>is_hyper</name> <init>= <expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>is_sparse</name> <init>= <expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>is_full</name> <init>= <expr><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>is_bitmap</name> <init>= <expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>as_if_full</name> <init>= <expr><call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>=</operator> <call><name>GB_nvec_nonempty</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// select the sparsity structure</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <switch>switch <condition>(<expr><call><name>GB_sparsity_control</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>sparsity_control</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// (1) always hypersparse</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><name>GxB_HYPERSPARSE</name></expr> :</case> 

            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_convert_any_to_hyper</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// (2) always sparse</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><name>GxB_SPARSE</name></expr> :</case> 

            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_convert_any_to_sparse</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// (3) sparse or hypersparse</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><name>GxB_HYPERSPARSE</name> <operator>+</operator> <name>GxB_SPARSE</name></expr> :</case> 

            <if_stmt><if>if <condition>(<expr><name>is_full</name> <operator>||</operator> <name>is_bitmap</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// if full or bitmap: to sparse</comment>
                <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_convert_any_to_sparse</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <comment type="line">// conform between sparse and hypersparse</comment>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_conform_hyper</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// (4) always bitmap</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><name>GxB_BITMAP</name></expr> :</case> 

            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_convert_any_to_bitmap</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// (5) hypersparse or bitmap</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><name>GxB_HYPERSPARSE</name> <operator>+</operator> <name>GxB_BITMAP</name></expr> :</case> 

            <comment type="line">// ensure the matrix is hypersparse or bitmap</comment>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_conform_hyper_or_bitmap</name> <argument_list>(<argument><expr><name>is_hyper</name></expr></argument>, <argument><expr><name>is_sparse</name></expr></argument>, <argument><expr><name>is_bitmap</name></expr></argument>,
                <argument><expr><name>is_full</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// (6) sparse or bitmap</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><name>GxB_SPARSE</name> <operator>+</operator> <name>GxB_BITMAP</name></expr> :</case> 

            <comment type="line">// ensure the matrix is sparse or bitmap</comment>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_conform_sparse_or_bitmap</name> <argument_list>(<argument><expr><name>is_hyper</name></expr></argument>, <argument><expr><name>is_sparse</name></expr></argument>, <argument><expr><name>is_bitmap</name></expr></argument>,
                <argument><expr><name>is_full</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// (7) hypersparse, sparse, or bitmap</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><name>GxB_HYPERSPARSE</name> <operator>+</operator> <name>GxB_SPARSE</name> <operator>+</operator> <name>GxB_BITMAP</name></expr> :</case> 

            <comment type="line">// ensure the matrix is hypersparse, sparse, or bitmap</comment>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_conform_hyper_sparse_or_bitmap</name> <argument_list>(<argument><expr><name>is_hyper</name></expr></argument>, <argument><expr><name>is_sparse</name></expr></argument>,
                <argument><expr><name>is_bitmap</name></expr></argument>, <argument><expr><name>is_full</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// (8): full</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><name>GxB_FULL</name></expr> :</case> 

            <if_stmt><if>if <condition>(<expr><name>as_if_full</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// if full or all entries present: to full</comment>
                <expr_stmt><expr><call><name>GB_convert_any_to_full</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// otherwise: to bitmap</comment>
                <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_convert_any_to_bitmap</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// (9) hypersparse or full</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><name>GxB_HYPERSPARSE</name> <operator>+</operator> <name>GxB_FULL</name></expr> :</case> 

            <if_stmt><if>if <condition>(<expr><name>as_if_full</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// if all entries present: to full</comment>
                <expr_stmt><expr><call><name>GB_convert_any_to_full</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// otherwise: to hypersparse</comment>
                <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_convert_any_to_hyper</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// (10) sparse or full</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><name>GxB_SPARSE</name> <operator>+</operator> <name>GxB_FULL</name></expr> :</case>  

            <if_stmt><if>if <condition>(<expr><name>as_if_full</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// if full or all entries present: to full</comment>
                <expr_stmt><expr><call><name>GB_convert_any_to_full</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// otherwise: to sparse</comment>
                <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_convert_any_to_sparse</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// (11) hypersparse, sparse, or full</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><name>GxB_HYPERSPARSE</name> <operator>+</operator> <name>GxB_SPARSE</name> <operator>+</operator> <name>GxB_FULL</name></expr> :</case> 

            <if_stmt><if>if <condition>(<expr><name>as_if_full</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// if full or all entries present: to full</comment>
                <expr_stmt><expr><call><name>GB_convert_any_to_full</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>is_bitmap</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// if bitmap: to sparse</comment>
                <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_convert_bitmap_to_sparse</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <comment type="line">// conform between sparse and hypersparse</comment>
                <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_conform_hyper</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// conform between sparse and hypersparse</comment>
                <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_conform_hyper</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// (12): bitmap or full</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><name>GxB_BITMAP</name> <operator>+</operator> <name>GxB_FULL</name></expr> :</case> 

            <if_stmt><if>if <condition>(<expr><name>as_if_full</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// if full or all entries present: to full</comment>
                <expr_stmt><expr><call><name>GB_convert_any_to_full</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// otherwise: to bitmap</comment>
                <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_convert_any_to_bitmap</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// (13) hypersparse, bitmap, or full</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><name>GxB_HYPERSPARSE</name> <operator>+</operator> <name>GxB_BITMAP</name> <operator>+</operator> <name>GxB_FULL</name></expr> :</case> 

            <if_stmt><if>if <condition>(<expr><name>as_if_full</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// if full or all entries present: to full</comment>
                <expr_stmt><expr><call><name>GB_convert_any_to_full</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// ensure the matrix is hypersparse or bitmap</comment>
                <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_conform_hyper_or_bitmap</name> <argument_list>(<argument><expr><name>is_hyper</name></expr></argument>, <argument><expr><name>is_sparse</name></expr></argument>,
                    <argument><expr><name>is_bitmap</name></expr></argument>, <argument><expr><name>is_full</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// (14) sparse, bitmap, or full</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><name>GxB_SPARSE</name> <operator>+</operator> <name>GxB_BITMAP</name> <operator>+</operator> <name>GxB_FULL</name></expr> :</case> 

            <if_stmt><if>if <condition>(<expr><name>as_if_full</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// if full or all entries present: to full</comment>
                <expr_stmt><expr><call><name>GB_convert_any_to_full</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// ensure the matrix is sparse or bitmap</comment>
                <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_conform_sparse_or_bitmap</name> <argument_list>(<argument><expr><name>is_hyper</name></expr></argument>, <argument><expr><name>is_sparse</name></expr></argument>,
                    <argument><expr><name>is_bitmap</name></expr></argument>, <argument><expr><name>is_full</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// (15) hypersparse, sparse, bitmap, or full</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <default>default:</default>
        <case>case <expr><name>GxB_HYPERSPARSE</name> <operator>+</operator> <name>GxB_SPARSE</name> <operator>+</operator> <name>GxB_BITMAP</name> <operator>+</operator> <name>GxB_FULL</name></expr> :</case> 

            <if_stmt><if>if <condition>(<expr><name>as_if_full</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// if full or all entries present: to full</comment>
                <expr_stmt><expr><call><name>GB_convert_any_to_full</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// ensure the matrix is hypersparse, sparse, or bitmap</comment>
                <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_conform_hyper_sparse_or_bitmap</name> <argument_list>(<argument><expr><name>is_hyper</name></expr></argument>, <argument><expr><name>is_sparse</name></expr></argument>,
                    <argument><expr><name>is_bitmap</name></expr></argument>, <argument><expr><name>is_full</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break ;</break>
    </block_content>}</block></switch>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A conformed"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
