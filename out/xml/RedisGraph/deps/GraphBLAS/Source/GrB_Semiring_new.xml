<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GrB_Semiring_new.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Semiring_new: create a new semiring</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// A GraphBLAS Semiring consists of two components: "add" and "multiply".</comment>
<comment type="line">// These components imply three domains: ztype, xtype, and ytype.</comment>

<comment type="line">// The "add" is an associative and commutative monoid, which is a binary</comment>
<comment type="line">// operator that works on a single type, ztype = add(ztype,ztype).  The add</comment>
<comment type="line">// monoid also includes an identity value, called "zero", so that</comment>
<comment type="line">// add(x,zero)=add(zero,x)=x.  For most algebras, this "zero" is a plain zero</comment>
<comment type="line">// in the usual sense, but this is not the case for all algebras.  For example,</comment>
<comment type="line">// for the max-plus algebra, the "add" operator is the function max(a,b), and</comment>
<comment type="line">// the "zero" for this operator is -infinity since max(a,-inf)=max(-inf,a)=a.</comment>

<comment type="line">// The "multiply" is a binary operator z = multiply(x,y).  It has no</comment>
<comment type="line">// restrictions, except that the type of z must exactly match the ztype</comment>
<comment type="line">// of the add monoid.  That is, the types for the multiply operator are</comment>
<comment type="line">// ztype = multiply (xtype, ytype).  When the semiring is applied to two</comment>
<comment type="line">// matrices A and B, where (A,B) appear in that order in the method, the</comment>
<comment type="line">// multiply operator is always applied as z = multiply (A(i,j),B(i,j)).  The</comment>
<comment type="line">// two input operands always appear in that order.  That is, the multiply</comment>
<comment type="line">// operator is not assumed to be commutative.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_Semiring_new.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>                     \
<cpp:value>{                                       \
    GB_FREE (semiring, header_size) ;   \
}</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GrB_Semiring_new</name>           <comment type="line">// create a semiring</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Semiring</name> <modifier>*</modifier></type><name>semiring</name></decl></parameter>,         <comment type="line">// handle of semiring to create</comment>
    <parameter><decl><type><name>GrB_Monoid</name></type> <name>add</name></decl></parameter>,                 <comment type="line">// additive monoid of the semiring</comment>
    <parameter><decl><type><name>GrB_BinaryOp</name></type> <name>multiply</name></decl></parameter>           <comment type="line">// multiply operator of the semiring</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>GB_WHERE1</name> <argument_list>(<argument><expr><literal type="string">"GrB_Semiring_new (&amp;semiring, add, multiply)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>semiring</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>semiring</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>add</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>multiply</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MONOID_OK</name> <argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><literal type="string">"semiring-&gt;add"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_BINARYOP_OK</name> <argument_list>(<argument><expr><name>multiply</name></expr></argument>, <argument><expr><literal type="string">"semiring-&gt;multiply"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate the semiring</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>size_t</name></type> <name>header_size</name></decl> ;</decl_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>semiring</name><operator>)</operator> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr>struct <name>GB_Semiring_opaque</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>semiring</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// out of memory</comment>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>semiring</name><operator>)</operator><operator>-&gt;</operator><name>header_size</name></name> <operator>=</operator> <name>header_size</name></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// create the semiring</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_Semiring_new</name> <argument_list>(<argument><expr><operator>*</operator><name>semiring</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><name>multiply</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
