<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_export.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_export: export a matrix or vector</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// No conversion is done, except to convert to non-iso if requested.  The</comment>
<comment type="line">// matrix is exported in its current sparsity structure and by-row/by-col</comment>
<comment type="line">// format.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_export.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>                     \
<cpp:value>{                                       \
    GB_FREE (&amp;Ap_new, Ap_new_size) ;    \
    GB_FREE (&amp;Ah_new, Ah_new_size) ;    \
}</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GB_export</name>      <comment type="line">// export/unpack a matrix in any format</comment>
<parameter_list>(
    <parameter><decl><type><name>bool</name></type> <name>unpacking</name></decl></parameter>,     <comment type="line">// unpack if true, export and free if false</comment>

    <parameter><decl><type><name>GrB_Matrix</name> <modifier>*</modifier></type><name>A</name></decl></parameter>,      <comment type="line">// handle of matrix to export and free, or unpack</comment>
    <parameter><decl><type><name>GrB_Type</name> <modifier>*</modifier></type><name>type</name></decl></parameter>,     <comment type="line">// type of matrix to export</comment>
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>vlen</name></decl></parameter>,    <comment type="line">// vector length</comment>
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>vdim</name></decl></parameter>,    <comment type="line">// vector dimension</comment>
    <parameter><decl><type><name>bool</name></type> <name>is_sparse_vector</name></decl></parameter>,      <comment type="line">// true if A is a sparse GrB_Vector</comment>

    <comment type="line">// the 5 arrays:</comment>
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier><modifier>*</modifier></type><name>Ap</name></decl></parameter>,     <comment type="line">// pointers</comment>
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>Ap_size</name></decl></parameter>, <comment type="line">// size of Ap in bytes</comment>

    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier><modifier>*</modifier></type><name>Ah</name></decl></parameter>,     <comment type="line">// vector indices</comment>
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>Ah_size</name></decl></parameter>, <comment type="line">// size of Ah in bytes</comment>

    <parameter><decl><type><name>int8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>Ab</name></decl></parameter>,        <comment type="line">// bitmap</comment>
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>Ab_size</name></decl></parameter>, <comment type="line">// size of Ab in bytes</comment>

    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier><modifier>*</modifier></type><name>Ai</name></decl></parameter>,     <comment type="line">// indices</comment>
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>Ai_size</name></decl></parameter>, <comment type="line">// size of Ai in bytes</comment>

    <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>Ax</name></decl></parameter>,          <comment type="line">// values</comment>
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>Ax_size</name></decl></parameter>, <comment type="line">// size of Ax in bytes</comment>

    <comment type="line">// additional information for specific formats:</comment>
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>nvals</name></decl></parameter>,   <comment type="line">// # of entries for bitmap format.</comment>
    <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>jumbled</name></decl></parameter>,      <comment type="line">// if true, sparse/hypersparse may be jumbled.</comment>
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>nvec</name></decl></parameter>,    <comment type="line">// size of Ah for hypersparse format.</comment>

    <comment type="line">// information for all formats:</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sparsity</name></decl></parameter>,      <comment type="line">// hypersparse, sparse, bitmap, or full</comment>
    <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>is_csc</name></decl></parameter>,       <comment type="line">// if true then matrix is by-column, else by-row</comment>
    <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>iso</name></decl></parameter>,          <comment type="line">// if true then A is iso and only one entry is returned</comment>
                        <comment type="line">// in Ax, regardless of nvals(A).</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>Ap_new</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Ap_new_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>Ah_new</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Ah_new_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>A</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><operator>*</operator><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><operator>*</operator><name>A</name></expr></argument>, <argument><expr><literal type="string">"A to export"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><operator>*</operator><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><operator>*</operator><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><operator>*</operator><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>vdim</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>Ax</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>Ax_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><call><name>GB_sparsity</name> <argument_list>(<argument><expr><operator>*</operator><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <switch>switch <condition>(<expr><name>s</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>GxB_HYPERSPARSE</name></expr> :</case> 
            <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>nvec</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>Ah</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>Ah_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// fall through to the sparse case</comment>

        <case>case <expr><name>GxB_SPARSE</name></expr> :</case> 
            <if_stmt><if>if <condition>(<expr><name>is_sparse_vector</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>nvals</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>Ap_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>Ai</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>Ai_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><name>GxB_BITMAP</name></expr> :</case> 
            <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>nvals</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>Ab</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>Ab_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// fall through to the full case</comment>

        <case>case <expr><name>GxB_FULL</name></expr> :</case> 
            <break>break ;</break>

        <default>default:</default> <empty_stmt>;</empty_stmt>
    </block_content>}</block></switch>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate new space for Ap and Ah if unpacking</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>avdim</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>vdim</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>plen_new</name></decl>, <decl><type ref="prev"/><name>nvec_new</name></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>unpacking</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>plen_new</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>avdim</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr> ;</expr_stmt>
        <expr_stmt><expr><name>nvec_new</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>avdim</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Ap_new</name> <operator>=</operator> <call><name>GB_CALLOC</name> <argument_list>(<argument><expr><name>plen_new</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name>Ap_new_size</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>avdim</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// A is sparse if avdim &lt;= 1, hypersparse if avdim &gt; 1</comment>
            <expr_stmt><expr><name>Ah_new</name> <operator>=</operator> <call><name>GB_CALLOC</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name>Ah_new_size</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>Ap_new</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>avdim</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>Ah_new</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// out of memory</comment>
            <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// ensure A is non-iso if requested, or export A as-is</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>iso</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// ensure A is non-iso</comment>
        <comment type="line">// set A-&gt;iso = false   OK</comment>
        <if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>iso</name></name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(iso to non-iso export) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_convert_any_to_non_iso</name> <argument_list>(<argument><expr><operator>*</operator><name>A</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>iso</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="line">// do not convert the matrix; export A as-is, either iso or non-iso</comment>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>iso</name><operator>)</operator> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>iso</name></name></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>iso</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(iso export) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// export the matrix</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>type</name><operator>)</operator> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>type</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>vlen</name><operator>)</operator> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>vlen</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>vdim</name><operator>)</operator> <operator>=</operator> <name>avdim</name></expr> ;</expr_stmt>

    <comment type="line">// export A-&gt;x</comment>
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_MEMDUMP</name></cpp:ifdef>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"export A-&gt;x from memtable: %p\n"</literal></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>GB_Global_memtable_remove</name> <argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ax</name><operator>)</operator> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>x</name></name></expr> ;</expr_stmt> <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ax_size</name><operator>)</operator> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>x_size</name></name></expr> ;</expr_stmt>

    <switch>switch <condition>(<expr><name>s</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>GxB_HYPERSPARSE</name></expr> :</case> 
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>nvec</name><operator>)</operator> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>nvec</name></name></expr> ;</expr_stmt>

            <comment type="line">// export A-&gt;h</comment>
            <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_MEMDUMP</name></cpp:ifdef>
            <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"export A-&gt;h from memtable: %p\n"</literal></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name>GB_Global_memtable_remove</name> <argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ah</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GrB_Index</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>h</name></name><operator>)</operator></expr> ;</expr_stmt> <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ah_size</name><operator>)</operator> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>h_size</name></name></expr> ;</expr_stmt>
            <comment type="line">// fall through to the sparse case</comment>

        <case>case <expr><name>GxB_SPARSE</name></expr> :</case> 
            <if_stmt><if>if <condition>(<expr><name>jumbled</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>jumbled</name><operator>)</operator> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>jumbled</name></name></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// export A-&gt;p, unless A is a sparse vector in CSC format</comment>
            <if_stmt><if>if <condition>(<expr><name>is_sparse_vector</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>nvals</name><operator>)</operator> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>p</name></name> <index>[<expr><literal type="number">1</literal></expr>]</index></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_MEMDUMP</name></cpp:ifdef>
                <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"export A-&gt;p from memtable: %p\n"</literal></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <expr_stmt><expr><call><name>GB_Global_memtable_remove</name> <argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ap</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GrB_Index</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>p</name></name><operator>)</operator></expr> ;</expr_stmt> <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ap_size</name><operator>)</operator> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>p_size</name></name></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <comment type="line">// export A-&gt;i</comment>
            <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_MEMDUMP</name></cpp:ifdef>
            <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"export A-&gt;i from memtable: %p\n"</literal></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>i</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name>GB_Global_memtable_remove</name> <argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>i</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ai</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GrB_Index</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>i</name></name><operator>)</operator></expr> ;</expr_stmt> <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ai_size</name><operator>)</operator> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>i_size</name></name></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><name>GxB_BITMAP</name></expr> :</case> 
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>nvals</name><operator>)</operator> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>nvals</name></name></expr> ;</expr_stmt>

            <comment type="line">// export A-&gt;b</comment>
            <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_MEMDUMP</name></cpp:ifdef>
            <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"export A-&gt;b from memtable: %p\n"</literal></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name>GB_Global_memtable_remove</name> <argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ab</name><operator>)</operator> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>b</name></name></expr> ;</expr_stmt> <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ab_size</name><operator>)</operator> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>b_size</name></name></expr> ;</expr_stmt>

        <case>case <expr><name>GxB_FULL</name></expr> :</case> 

        <default>default:</default> <empty_stmt>;</empty_stmt>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><name>sparsity</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>sparsity</name><operator>)</operator> <operator>=</operator> <name>s</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>is_csc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>is_csc</name><operator>)</operator> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>is_csc</name></name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free or clear the GrB_Matrix</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// both export and unpack free the hyper_hash, A-&gt;Y</comment>

    <if_stmt><if>if <condition>(<expr><name>unpacking</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// unpack: clear the matrix, leaving it hypersparse (or sparse if</comment>
        <comment type="line">// it is a vector (vdim of 1) or has vdim of zero)</comment>
        <expr_stmt><expr><call><name>GB_phybix_free</name> <argument_list>(<argument><expr><operator>*</operator><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>plen</name></name> <operator>=</operator> <name>plen_new</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>nvec</name></name> <operator>=</operator> <name>nvec_new</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>Ap_new</name></expr> ;</expr_stmt> <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>p_size</name></name> <operator>=</operator> <name>Ap_new_size</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>Ah_new</name></expr> ;</expr_stmt> <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>h_size</name></name> <operator>=</operator> <name>Ah_new_size</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><operator>*</operator><name>A</name></expr></argument>, <argument><expr><literal type="string">"A unpacked"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// export: free the header of A, and A-&gt;p if A is a sparse GrB_Vector</comment>
        <expr_stmt><expr><call><name>GB_Matrix_free</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>flush</omp:name></omp:directive></cpp:pragma>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
