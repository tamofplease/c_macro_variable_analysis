<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_add.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_add: C = A+B, C&lt;M&gt;=A+B, and C&lt;!M&gt;=A+B</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// GB_add computes C=A+B, C&lt;M&gt;=A+B, or C&lt;!M&gt;=A+B using the given operator</comment>
<comment type="line">// element-wise on the matrices A and B.  The result is typecasted as needed.</comment>
<comment type="line">// The pattern of C is the union of the pattern of A and B, intersection with</comment>
<comment type="line">// the mask M, if present.  On input, the contents of C are undefined; it is</comment>
<comment type="line">// an output-only matrix in a static header.</comment>

<comment type="line">// Let the op be z=f(x,y) where x, y, and z have type xtype, ytype, and ztype.</comment>
<comment type="line">// If both A(i,j) and B(i,j) are present, then:</comment>

<comment type="line">//      C(i,j) = (ctype) op ((xtype) A(i,j), (ytype) B(i,j))</comment>

<comment type="line">// If just A(i,j) is present but not B(i,j), then:</comment>

<comment type="line">//      C(i,j) = (ctype) A (i,j)</comment>

<comment type="line">// If just B(i,j) is present but not A(i,j), then:</comment>

<comment type="line">//      C(i,j) = (ctype) B (i,j)</comment>

<comment type="line">// ctype is the type of matrix C.  The pattern of C is the union of A and B.</comment>

<comment type="line">// op may be NULL.  In this case, the intersection of A and B must be empty.</comment>
<comment type="line">// This is used by GB_wait only, for merging the pending tuple matrix T into A.</comment>
<comment type="line">// In this case, the result C is always sparse or hypersparse, not bitmap or</comment>
<comment type="line">// full.  Any duplicate pending tuples have already been summed in T, so the</comment>
<comment type="line">// intersection of T and A is always empty.</comment>

<comment type="line">// Some methods should not exploit the mask, but leave it for later.</comment>
<comment type="line">// See GB_ewise and GB_accum_mask: the only places where this function is</comment>
<comment type="line">// called with a non-null mask M.  Both of those callers can handle the</comment>
<comment type="line">// mask being applied later.  GB_add_sparsity determines whether or not the</comment>
<comment type="line">// mask should be applied now, or later.</comment>

<comment type="line">// If A and B are iso, the op is not positional, and op(A,B) == A == B, then C</comment>
<comment type="line">// is iso.  If A and B are known to be disjoint, then op(A,B) is ignored when</comment>
<comment type="line">// determining if C is iso.</comment>

<comment type="line">// C on input is empty, see GB_add_phase2.c.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_add.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GB_add</name>             <comment type="line">// C=A+B, C&lt;M&gt;=A+B, or C&lt;!M&gt;=A+B</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,           <comment type="line">// output matrix, static header</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>ctype</name></decl></parameter>,   <comment type="line">// type of output matrix C</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>C_is_csc</name></decl></parameter>,    <comment type="line">// format of output matrix C</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,     <comment type="line">// optional mask for C, unused if NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_struct</name></decl></parameter>, <comment type="line">// if true, use the only structure of M</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_comp</name></decl></parameter>,   <comment type="line">// if true, use !M</comment>
    <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>mask_applied</name></decl></parameter>,     <comment type="line">// if true, the mask was applied</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,     <comment type="line">// input A matrix</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>B</name></decl></parameter>,     <comment type="line">// input B matrix</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>is_eWiseUnion</name></decl></parameter>,   <comment type="line">// if true, eWiseUnion, else eWiseAdd</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Scalar</name></type> <name>alpha</name></decl></parameter>, <comment type="line">// alpha and beta ignored for eWiseAdd,</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Scalar</name></type> <name>beta</name></decl></parameter>,  <comment type="line">// nonempty scalars for GxB_eWiseUnion</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>op</name></decl></parameter>,  <comment type="line">// op to perform C = op (A,B)</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>C</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>static_header</name></name> <operator>||</operator> <name>GBNSTATIC</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>mask_applied</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>mask_applied</name><operator>)</operator> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A for add"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="string">"B for add"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_BINARYOP_OK_OR_NULL</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"op for add"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK_OR_NULL</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><literal type="string">"M for add"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name> <operator>==</operator> <name><name>B</name><operator>-&gt;</operator><name>vdim</name></name> <operator>&amp;&amp;</operator> <name><name>A</name><operator>-&gt;</operator><name>vlen</name></name> <operator>==</operator> <name><name>B</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><name>M</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name> <operator>==</operator> <name><name>M</name><operator>-&gt;</operator><name>vdim</name></name> <operator>&amp;&amp;</operator> <name><name>A</name><operator>-&gt;</operator><name>vlen</name></name> <operator>==</operator> <name><name>M</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// delete any lingering zombies and assemble any pending tuples</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// TODO: some cases can allow M, A, and/or B to be jumbled</comment>
    <expr_stmt><expr><call><name>GB_MATRIX_WAIT</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>        <comment type="line">// cannot be jumbled</comment>
    <expr_stmt><expr><call><name>GB_MATRIX_WAIT</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>        <comment type="line">// cannot be jumbled</comment>
    <expr_stmt><expr><call><name>GB_MATRIX_WAIT</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>        <comment type="line">// cannot be jumbled</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine the sparsity of C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>apply_mask</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>C_sparsity</name> <init>= <expr><call><name>GB_add_sparsity</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>apply_mask</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// initializations</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>Cnvec</name></decl>, <decl><type ref="prev"/><name>Cnvec_nonempty</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>Cp</name>     <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Cp_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>Ch</name>     <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Ch_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt> 
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>C_to_M</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>C_to_M_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>C_to_A</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>C_to_A_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>C_to_B</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>C_to_B_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>Ch_is_Mh</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>C_ntasks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>C_nthreads</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_task_struct</name> <modifier>*</modifier></type><name>TaskList</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>TaskList_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// phase0: finalize the sparsity C and find the vectors in C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_add_phase0</name> <argument_list>(
        <comment type="line">// computed by by phase0:</comment>
        <argument><expr><operator>&amp;</operator><name>Cnvec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ch_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>C_to_M</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>C_to_M_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>C_to_A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>C_to_A_size</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>C_to_B</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>C_to_B_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ch_is_Mh</name></expr></argument>,
        <comment type="line">// input/output to phase0:</comment>
        <argument><expr><operator>&amp;</operator><name>C_sparsity</name></expr></argument>,
        <comment type="line">// original input:</comment>
        <argument><expr><ternary><condition><expr><operator>(</operator><name>apply_mask</name><operator>)</operator></expr> ?</condition><then> <expr><name>M</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"add:(%s&lt;%s&gt;=%s+%s) "</literal></expr></argument>,
        <argument><expr><call><name>GB_sparsity_char</name> <argument_list>(<argument><expr><name>C_sparsity</name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name>GB_sparsity_char_matrix</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name>GB_sparsity_char_matrix</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name>GB_sparsity_char_matrix</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// phase1: split C into tasks, and count entries in each vector of C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>C_sparsity</name> <operator>==</operator> <name>GxB_SPARSE</name> <operator>||</operator> <name>C_sparsity</name> <operator>==</operator> <name>GxB_HYPERSPARSE</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C is sparse or hypersparse: slice and analyze the C matrix</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// phase1a: split C into tasks</comment>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_ewise_slice</name> <argument_list>(
            <comment type="line">// computed by phase1a</comment>
            <argument><expr><operator>&amp;</operator><name>TaskList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>TaskList_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>C_ntasks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>C_nthreads</name></expr></argument>,
            <comment type="line">// computed by phase0:</comment>
            <argument><expr><name>Cnvec</name></expr></argument>, <argument><expr><name>Ch</name></expr></argument>, <argument><expr><name>C_to_M</name></expr></argument>, <argument><expr><name>C_to_A</name></expr></argument>, <argument><expr><name>C_to_B</name></expr></argument>, <argument><expr><name>Ch_is_Mh</name></expr></argument>,
            <comment type="line">// original input:</comment>
            <argument><expr><ternary><condition><expr><operator>(</operator><name>apply_mask</name><operator>)</operator></expr> ?</condition><then> <expr><name>M</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// out of memory; free everything allocated by GB_add_phase0</comment>
            <expr_stmt><expr><call><name>GB_FREE</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Ch</name></expr></argument>, <argument><expr><name>Ch_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_FREE_WORK</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C_to_M</name></expr></argument>, <argument><expr><name>C_to_M_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_FREE_WORK</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C_to_A</name></expr></argument>, <argument><expr><name>C_to_A_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_FREE_WORK</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C_to_B</name></expr></argument>, <argument><expr><name>C_to_B_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// count the number of entries in each vector of C</comment>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_add_phase1</name> <argument_list>(
            <comment type="line">// computed or used by phase1:</comment>
            <argument><expr><operator>&amp;</operator><name>Cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cp_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cnvec_nonempty</name></expr></argument>, <argument><expr><name>op</name> <operator>==</operator> <name>NULL</name></expr></argument>,
            <comment type="line">// from phase1a:</comment>
            <argument><expr><name>TaskList</name></expr></argument>, <argument><expr><name>C_ntasks</name></expr></argument>, <argument><expr><name>C_nthreads</name></expr></argument>,
            <comment type="line">// from phase0:</comment>
            <argument><expr><name>Cnvec</name></expr></argument>, <argument><expr><name>Ch</name></expr></argument>, <argument><expr><name>C_to_M</name></expr></argument>, <argument><expr><name>C_to_A</name></expr></argument>, <argument><expr><name>C_to_B</name></expr></argument>, <argument><expr><name>Ch_is_Mh</name></expr></argument>,
            <comment type="line">// original input:</comment>
            <argument><expr><ternary><condition><expr><operator>(</operator><name>apply_mask</name><operator>)</operator></expr> ?</condition><then> <expr><name>M</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// out of memory; free everything allocated by GB_add_phase0</comment>
            <expr_stmt><expr><call><name>GB_FREE_WORK</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>TaskList</name></expr></argument>, <argument><expr><name>TaskList_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_FREE</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Ch</name></expr></argument>, <argument><expr><name>Ch_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_FREE_WORK</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C_to_M</name></expr></argument>, <argument><expr><name>C_to_M_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_FREE_WORK</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C_to_A</name></expr></argument>, <argument><expr><name>C_to_A_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_FREE_WORK</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C_to_B</name></expr></argument>, <argument><expr><name>C_to_B_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C is bitmap or full: only determine how many threads to use</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>C_nthreads</name> <operator>=</operator> <call><name>GB_nthreads</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name> <operator>*</operator> <name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// phase2: compute the entries (indices and values) in each vector of C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// Cp and Ch are either freed by phase2, or transplanted into C.</comment>
    <comment type="line">// Either way, they are not freed here.</comment>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_add_phase2</name> <argument_list>(
        <comment type="line">// computed or used by phase2:</comment>
        <argument><expr><name>C</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>C_is_csc</name></expr></argument>, <argument><expr><name>op</name></expr></argument>,
        <comment type="line">// from phase1</comment>
        <argument><expr><operator>&amp;</operator><name>Cp</name></expr></argument>, <argument><expr><name>Cp_size</name></expr></argument>, <argument><expr><name>Cnvec_nonempty</name></expr></argument>,
        <comment type="line">// from phase1a:</comment>
        <argument><expr><name>TaskList</name></expr></argument>, <argument><expr><name>C_ntasks</name></expr></argument>, <argument><expr><name>C_nthreads</name></expr></argument>,
        <comment type="line">// from phase0:</comment>
        <argument><expr><name>Cnvec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ch</name></expr></argument>, <argument><expr><name>Ch_size</name></expr></argument>, <argument><expr><name>C_to_M</name></expr></argument>, <argument><expr><name>C_to_A</name></expr></argument>, <argument><expr><name>C_to_B</name></expr></argument>, <argument><expr><name>Ch_is_Mh</name></expr></argument>, <argument><expr><name>C_sparsity</name></expr></argument>,
        <comment type="line">// original input:</comment>
        <argument><expr><ternary><condition><expr><operator>(</operator><name>apply_mask</name><operator>)</operator></expr> ?</condition><then> <expr><name>M</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>,
        <argument><expr><name>is_eWiseUnion</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// Ch and Cp must not be freed; they are now C-&gt;h and C-&gt;p.</comment>
    <comment type="line">// If the method failed, Cp and Ch have already been freed.</comment>

    <comment type="line">// free workspace</comment>
    <expr_stmt><expr><call><name>GB_FREE_WORK</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>TaskList</name></expr></argument>, <argument><expr><name>TaskList_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_FREE_WORK</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C_to_M</name></expr></argument>, <argument><expr><name>C_to_M_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_FREE_WORK</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C_to_A</name></expr></argument>, <argument><expr><name>C_to_A_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_FREE_WORK</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C_to_B</name></expr></argument>, <argument><expr><name>C_to_B_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C output for add"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>mask_applied</name><operator>)</operator> <operator>=</operator> <name>apply_mask</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
