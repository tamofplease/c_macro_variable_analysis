<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GrB_Vector_apply.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Vector_apply: apply a unary or binary operator to a vector</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_apply.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_scalar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_get_mask.h"</cpp:file></cpp:include>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Vector_apply: apply a unary operator to a vector</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>GrB_Vector_apply</name>           <comment type="line">// w&lt;M&gt; = accum (w, op(u))</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Vector</name></type> <name>w</name></decl></parameter>,                   <comment type="line">// input/output vector for results</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Vector</name></type> <name>M_in</name></decl></parameter>,          <comment type="line">// optional mask for w, unused if NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,       <comment type="line">// optional accum for z=accum(w,t)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_UnaryOp</name></type> <name>op</name></decl></parameter>,           <comment type="line">// operator to apply to the entries</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Vector</name></type> <name>u</name></decl></parameter>,             <comment type="line">// first input:  vector u</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Descriptor</name></type> <name>desc</name></decl></parameter>       <comment type="line">// descriptor for w and M</comment>
)</parameter_list>
<block>{<block_content> 

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_WHERE</name> <argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="string">"GrB_Vector_apply (w, M, accum, op, u, desc)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BURBLE_START</name> <argument_list>(<argument><expr><literal type="string">"GrB_apply"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_FAULTY</name> <argument_list>(<argument><expr><name>M_in</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>M_in</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>M_in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// get the descriptor</comment>
    <expr_stmt><expr><call><name>GB_GET_DESCRIPTOR</name> <argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>C_replace</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>,
        <argument><expr><name>xx1</name></expr></argument>, <argument><expr><name>xx2</name></expr></argument>, <argument><expr><name>xx3</name></expr></argument>, <argument><expr><name>xx7</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// get the mask</comment>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>M</name> <init>= <expr><call><name>GB_get_mask</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>M_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Mask_comp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Mask_struct</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// apply the operator; do not transpose</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_apply</name> <argument_list>(
        <argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>w</name></expr></argument>, <argument><expr><name>C_replace</name></expr></argument>,  <comment type="line">// w and its descriptor</comment>
        <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>,  <comment type="line">// mask and its descriptor</comment>
        <argument><expr><name>accum</name></expr></argument>,                      <comment type="line">// optional accum for Z=accum(w,T)</comment>
        <argument><expr><operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>op</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <comment type="line">// operator op(.) to apply to the entries</comment>
        <argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>u</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,      <comment type="line">// u, not transposed</comment>
        <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>GB_BURBLE_END</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_1st: apply a binary operator: op(x,u)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>GrB_Info</name></type> <name>GB_1st</name>       <comment type="line">// w&lt;mask&gt; = accum (w, op(x,u))</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Vector</name></type> <name>w</name></decl></parameter>,                   <comment type="line">// input/output vector for results</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Vector</name></type> <name>M_in</name></decl></parameter>,          <comment type="line">// optional mask for w, unused if NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,       <comment type="line">// optional accum for z=accum(w,t)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>op</name></decl></parameter>,          <comment type="line">// operator to apply to the entries</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Scalar</name></type> <name>x</name></decl></parameter>,             <comment type="line">// first input:  scalar x</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Vector</name></type> <name>u</name></decl></parameter>,             <comment type="line">// second input: vector u</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Descriptor</name></type> <name>desc</name></decl></parameter>,      <comment type="line">// descriptor for w and M</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_BURBLE_START</name> <argument_list>(<argument><expr><literal type="string">"GrB_apply"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_FAULTY</name> <argument_list>(<argument><expr><name>M_in</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>M_in</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>M_in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// get the descriptor</comment>
    <expr_stmt><expr><call><name>GB_GET_DESCRIPTOR</name> <argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>C_replace</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>,
        <argument><expr><name>xx1</name></expr></argument>, <argument><expr><name>xx2</name></expr></argument>, <argument><expr><name>xx3</name></expr></argument>, <argument><expr><name>xx7</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// get the mask</comment>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>M</name> <init>= <expr><call><name>GB_get_mask</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>M_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Mask_comp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Mask_struct</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// apply the operator; do not transpose</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_apply</name> <argument_list>(
        <argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>w</name></expr></argument>, <argument><expr><name>C_replace</name></expr></argument>,  <comment type="line">// w and its descriptor</comment>
        <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>,  <comment type="line">// mask and its descriptor</comment>
        <argument><expr><name>accum</name></expr></argument>,                      <comment type="line">// optional accum for Z=accum(w,T)</comment>
        <argument><expr><operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>op</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,  <comment type="line">// operator op(x,.) to apply to the entries</comment>
        <argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>u</name></expr></argument>,  <argument><expr><name>false</name></expr></argument>,     <comment type="line">// u, not transposed</comment>
        <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>GB_BURBLE_END</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_2nd: apply a binary operator: op(u,y) or index_unop</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>GrB_Info</name></type> <name>GB_2nd</name>       <comment type="line">// w&lt;mask&gt; = accum (w, op(u,y))</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Vector</name></type> <name>w</name></decl></parameter>,                   <comment type="line">// input/output vector for results</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Vector</name></type> <name>M_in</name></decl></parameter>,          <comment type="line">// optional mask for w, unused if NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,       <comment type="line">// optional accum for z=accum(w,t)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GB_Operator</name></type> <name>op</name></decl></parameter>,           <comment type="line">// operator to apply to the entries</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Vector</name></type> <name>u</name></decl></parameter>,             <comment type="line">// first input:  vector u</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Scalar</name></type> <name>y</name></decl></parameter>,             <comment type="line">// second input: scalar y</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Descriptor</name></type> <name>desc</name></decl></parameter>,      <comment type="line">// descriptor for w and M</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_BURBLE_START</name> <argument_list>(<argument><expr><literal type="string">"GrB_apply"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_FAULTY</name> <argument_list>(<argument><expr><name>M_in</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>M_in</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>M_in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// get the descriptor</comment>
    <expr_stmt><expr><call><name>GB_GET_DESCRIPTOR</name> <argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>C_replace</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>,
        <argument><expr><name>xx1</name></expr></argument>, <argument><expr><name>xx2</name></expr></argument>, <argument><expr><name>xx3</name></expr></argument>, <argument><expr><name>xx7</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// get the mask</comment>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>M</name> <init>= <expr><call><name>GB_get_mask</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>M_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Mask_comp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Mask_struct</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// apply the operator; do not transpose</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_apply</name> <argument_list>(
        <argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>w</name></expr></argument>, <argument><expr><name>C_replace</name></expr></argument>,  <comment type="line">// w and its descriptor</comment>
        <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>,  <comment type="line">// mask and its descriptor</comment>
        <argument><expr><name>accum</name></expr></argument>,                      <comment type="line">// optional accum for Z=accum(w,T)</comment>
        <argument><expr><name>op</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,               <comment type="line">// operator op(.,y) to apply to the entries</comment>
        <argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>u</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,      <comment type="line">// u, not transposed</comment>
        <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>GB_BURBLE_END</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Vector_apply_BinaryOp1st_Scalar: apply a binary operator: op(x,u)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>GrB_Vector_apply_BinaryOp1st_Scalar</name>    <comment type="line">// w&lt;mask&gt; = accum (w, op(x,u))</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Vector</name></type> <name>w</name></decl></parameter>,                   <comment type="line">// input/output vector for results</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Vector</name></type> <name>M</name></decl></parameter>,             <comment type="line">// optional mask for w, unused if NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,       <comment type="line">// optional accum for z=accum(w,t)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>op</name></decl></parameter>,          <comment type="line">// operator to apply to the entries</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Scalar</name></type> <name>x</name></decl></parameter>,             <comment type="line">// first input:  scalar x</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Vector</name></type> <name>u</name></decl></parameter>,             <comment type="line">// second input: vector u</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Descriptor</name></type> <name>desc</name></decl></parameter>       <comment type="line">// descriptor for w and M</comment>
)</parameter_list>
<block>{<block_content> 
    <expr_stmt><expr><call><name>GB_WHERE</name> <argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="string">"GrB_Vector_apply_BinaryOp1st_Scalar"</literal>
        <literal type="string">" (w, M, accum, op, x, u, desc)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><call><name>GB_1st</name> <argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GxB_Vector_apply_BinaryOp1st: historical</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// identical to GrB_Vector_apply_BinaryOp1st_Scalar</comment>
<function><type><name>GrB_Info</name></type> <name>GxB_Vector_apply_BinaryOp1st</name>
<parameter_list>(
    <parameter><decl><type><name>GrB_Vector</name></type> <name>w</name></decl></parameter>,                   <comment type="line">// input/output vector for results</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Vector</name></type> <name>M</name></decl></parameter>,             <comment type="line">// optional mask for w, unused if NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,       <comment type="line">// optional accum for z=accum(w,t)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>op</name></decl></parameter>,          <comment type="line">// operator to apply to the entries</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Scalar</name></type> <name>x</name></decl></parameter>,             <comment type="line">// first input:  scalar x</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Vector</name></type> <name>u</name></decl></parameter>,             <comment type="line">// second input: vector u</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Descriptor</name></type> <name>desc</name></decl></parameter>       <comment type="line">// descriptor for w and M</comment>
)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><call><name>GrB_Vector_apply_BinaryOp1st_Scalar</name> <argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Vector_apply_BinaryOp2nd_Scalar: apply a binary operator: op(u,y)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>GrB_Vector_apply_BinaryOp2nd_Scalar</name>    <comment type="line">// w&lt;mask&gt; = accum (w, op(u,y))</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Vector</name></type> <name>w</name></decl></parameter>,                   <comment type="line">// input/output vector for results</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Vector</name></type> <name>M</name></decl></parameter>,             <comment type="line">// optional mask for w, unused if NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,       <comment type="line">// optional accum for z=accum(w,t)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>op</name></decl></parameter>,          <comment type="line">// operator to apply to the entries</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Vector</name></type> <name>u</name></decl></parameter>,             <comment type="line">// first input:  vector u</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Scalar</name></type> <name>y</name></decl></parameter>,             <comment type="line">// second input: scalar y</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Descriptor</name></type> <name>desc</name></decl></parameter>       <comment type="line">// descriptor for w and M</comment>
)</parameter_list>
<block>{<block_content> 
    <expr_stmt><expr><call><name>GB_WHERE</name> <argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="string">"GrB_Vector_apply_BinaryOp2nd_Scalar"</literal>
        <literal type="string">" (w, M, accum, op, u, y, desc)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><call><name>GB_2nd</name> <argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>op</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GxB_Vector_apply_BinaryOp2nd: historical</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// identical to GrB_Vector_apply_BinaryOp2nd_Scalar</comment>
<function><type><name>GrB_Info</name></type> <name>GxB_Vector_apply_BinaryOp2nd</name>
<parameter_list>(
    <parameter><decl><type><name>GrB_Vector</name></type> <name>w</name></decl></parameter>,                   <comment type="line">// input/output vector for results</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Vector</name></type> <name>M</name></decl></parameter>,             <comment type="line">// optional mask for w, unused if NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,       <comment type="line">// optional accum for z=accum(w,t)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>op</name></decl></parameter>,          <comment type="line">// operator to apply to the entries</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Vector</name></type> <name>u</name></decl></parameter>,             <comment type="line">// first input:  vector u</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Scalar</name></type> <name>y</name></decl></parameter>,             <comment type="line">// second input: scalar y</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Descriptor</name></type> <name>desc</name></decl></parameter>       <comment type="line">// descriptor for w and M</comment>
)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><call><name>GrB_Vector_apply_BinaryOp2nd_Scalar</name> <argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Vector_apply_BinaryOp1st_TYPE: apply a binary operator: op(x,u)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_BIND1ST</name><parameter_list>(<parameter><type><name>prefix</name></type></parameter>,<parameter><type><name>type</name></type></parameter>,<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro>                                           \
<cpp:value>GrB_Info GB_EVAL3 (prefix, _Vector_apply_BinaryOp1st_, T)                   \
(                                                                           \
    GrB_Vector w,                   <comment type="block">/* input/output vector for results */</comment>   \
    const GrB_Vector M,             <comment type="block">/* optional mask for w */</comment>               \
    const GrB_BinaryOp accum,       <comment type="block">/* optional accum for Z=accum(w,T) */</comment>   \
    const GrB_BinaryOp op,          <comment type="block">/* operator to apply to the entries */</comment>  \
    const type x,                   <comment type="block">/* first input:  scalar x */</comment>            \
    const GrB_Vector u,             <comment type="block">/* second input: vector u */</comment>            \
    const GrB_Descriptor desc       <comment type="block">/* descriptor for w and M */</comment>            \
)                                                                           \
{                                                                           \
    GB_WHERE (w, GB_STR(prefix) "_Vector_apply_BinaryOp1st_" GB_STR(T)      \
        " (w, M, accum, op, x, u, desc)") ;                                 \
    GB_SCALAR_WRAP (scalar, x, GB_EVAL3 (prefix, _, T)) ;                   \
    return (GB_1st (w, M, accum, op, scalar, u, desc, Context)) ;           \
}</cpp:value></cpp:define>

<macro><name>GB_BIND1ST</name> <argument_list>(<argument>GrB</argument>, <argument>bool</argument>      , <argument>BOOL</argument>  )</argument_list></macro>
<macro><name>GB_BIND1ST</name> <argument_list>(<argument>GrB</argument>, <argument>int8_t</argument>    , <argument>INT8</argument>  )</argument_list></macro>
<macro><name>GB_BIND1ST</name> <argument_list>(<argument>GrB</argument>, <argument>int16_t</argument>   , <argument>INT16</argument> )</argument_list></macro>
<macro><name>GB_BIND1ST</name> <argument_list>(<argument>GrB</argument>, <argument>int32_t</argument>   , <argument>INT32</argument> )</argument_list></macro>
<macro><name>GB_BIND1ST</name> <argument_list>(<argument>GrB</argument>, <argument>int64_t</argument>   , <argument>INT64</argument> )</argument_list></macro>
<macro><name>GB_BIND1ST</name> <argument_list>(<argument>GrB</argument>, <argument>uint8_t</argument>   , <argument>UINT8</argument> )</argument_list></macro>
<macro><name>GB_BIND1ST</name> <argument_list>(<argument>GrB</argument>, <argument>uint16_t</argument>  , <argument>UINT16</argument>)</argument_list></macro>
<macro><name>GB_BIND1ST</name> <argument_list>(<argument>GrB</argument>, <argument>uint32_t</argument>  , <argument>UINT32</argument>)</argument_list></macro>
<macro><name>GB_BIND1ST</name> <argument_list>(<argument>GrB</argument>, <argument>uint64_t</argument>  , <argument>UINT64</argument>)</argument_list></macro>
<macro><name>GB_BIND1ST</name> <argument_list>(<argument>GrB</argument>, <argument>float</argument>     , <argument>FP32</argument>  )</argument_list></macro>
<macro><name>GB_BIND1ST</name> <argument_list>(<argument>GrB</argument>, <argument>double</argument>    , <argument>FP64</argument>  )</argument_list></macro>
<macro><name>GB_BIND1ST</name> <argument_list>(<argument>GxB</argument>, <argument>GxB_FC32_t</argument>, <argument>FC32</argument>  )</argument_list></macro>
<macro><name>GB_BIND1ST</name> <argument_list>(<argument>GxB</argument>, <argument>GxB_FC64_t</argument>, <argument>FC64</argument>  )</argument_list></macro>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Vector_apply_BinaryOp1st_UDT: apply a binary operator: op(x,u)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>GrB_Vector_apply_BinaryOp1st_UDT</name>
<parameter_list>(
    <parameter><decl><type><name>GrB_Vector</name></type> <name>w</name></decl></parameter>,                   <comment type="line">// input/output vector for results</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Vector</name></type> <name>M</name></decl></parameter>,             <comment type="line">// optional mask for w</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,       <comment type="line">// optional accum for Z=accum(w,T)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>op</name></decl></parameter>,          <comment type="line">// operator to apply to the entries</comment>
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>,                  <comment type="line">// first input:  scalar x</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Vector</name></type> <name>u</name></decl></parameter>,             <comment type="line">// second input: vector u</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Descriptor</name></type> <name>desc</name></decl></parameter>       <comment type="line">// descriptor for w and M</comment>
)</parameter_list>
<block>{<block_content> 
    <expr_stmt><expr><call><name>GB_WHERE</name> <argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="string">"GrB_Vector_apply_BinaryOp1st_UDT"</literal>
        <literal type="string">" (w, M, accum, op, x, u, desc)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_SCALAR_WRAP_UDT</name> <argument_list>(<argument><expr><name>scalar</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>op</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>op</name><operator>-&gt;</operator><name>xtype</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><call><name>GB_1st</name> <argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Vector_apply_BinaryOp2nd_TYPE: apply a binary operator: op(u,y)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_BIND2ND</name><parameter_list>(<parameter><type><name>prefix</name></type></parameter>,<parameter><type><name>type</name></type></parameter>,<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro>                                           \
<cpp:value>GrB_Info GB_EVAL3 (prefix, _Vector_apply_BinaryOp2nd_, T)                   \
(                                                                           \
    GrB_Vector w,                   <comment type="block">/* input/output vector for results */</comment>   \
    const GrB_Vector M,             <comment type="block">/* optional mask for w*/</comment>                \
    const GrB_BinaryOp accum,       <comment type="block">/* optional accum for Z=accum(w,T) */</comment>   \
    const GrB_BinaryOp op,          <comment type="block">/* operator to apply to the entries */</comment>  \
    const GrB_Vector u,             <comment type="block">/* first input:  vector u */</comment>            \
    const type y,                   <comment type="block">/* second input: scalar y */</comment>            \
    const GrB_Descriptor desc       <comment type="block">/* descriptor for w and M */</comment>            \
)                                                                           \
{                                                                           \
    GB_WHERE (w, GB_STR(prefix) "_Vector_apply_BinaryOp2nd_" GB_STR(T)      \
        " (w, M, accum, op, u, y, desc)") ;                                 \
    GB_SCALAR_WRAP (scalar, y, GB_EVAL3 (prefix, _, T)) ;                   \
    return (GB_2nd (w, M, accum, (GB_Operator) op, u, scalar, desc, Context)) ;\
}</cpp:value></cpp:define>

<macro><name>GB_BIND2ND</name> <argument_list>(<argument>GrB</argument>, <argument>bool</argument>      , <argument>BOOL</argument>  )</argument_list></macro>
<macro><name>GB_BIND2ND</name> <argument_list>(<argument>GrB</argument>, <argument>int8_t</argument>    , <argument>INT8</argument>  )</argument_list></macro>
<macro><name>GB_BIND2ND</name> <argument_list>(<argument>GrB</argument>, <argument>int16_t</argument>   , <argument>INT16</argument> )</argument_list></macro>
<macro><name>GB_BIND2ND</name> <argument_list>(<argument>GrB</argument>, <argument>int32_t</argument>   , <argument>INT32</argument> )</argument_list></macro>
<macro><name>GB_BIND2ND</name> <argument_list>(<argument>GrB</argument>, <argument>int64_t</argument>   , <argument>INT64</argument> )</argument_list></macro>
<macro><name>GB_BIND2ND</name> <argument_list>(<argument>GrB</argument>, <argument>uint8_t</argument>   , <argument>UINT8</argument> )</argument_list></macro>
<macro><name>GB_BIND2ND</name> <argument_list>(<argument>GrB</argument>, <argument>uint16_t</argument>  , <argument>UINT16</argument>)</argument_list></macro>
<macro><name>GB_BIND2ND</name> <argument_list>(<argument>GrB</argument>, <argument>uint32_t</argument>  , <argument>UINT32</argument>)</argument_list></macro>
<macro><name>GB_BIND2ND</name> <argument_list>(<argument>GrB</argument>, <argument>uint64_t</argument>  , <argument>UINT64</argument>)</argument_list></macro>
<macro><name>GB_BIND2ND</name> <argument_list>(<argument>GrB</argument>, <argument>float</argument>     , <argument>FP32</argument>  )</argument_list></macro>
<macro><name>GB_BIND2ND</name> <argument_list>(<argument>GrB</argument>, <argument>double</argument>    , <argument>FP64</argument>  )</argument_list></macro>
<macro><name>GB_BIND2ND</name> <argument_list>(<argument>GxB</argument>, <argument>GxB_FC32_t</argument>, <argument>FC32</argument>  )</argument_list></macro>
<macro><name>GB_BIND2ND</name> <argument_list>(<argument>GxB</argument>, <argument>GxB_FC64_t</argument>, <argument>FC64</argument>  )</argument_list></macro>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Vector_apply_BinaryOp2nd_UDT: apply a binary operator: op(u,y)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>GrB_Vector_apply_BinaryOp2nd_UDT</name>
<parameter_list>(
    <parameter><decl><type><name>GrB_Vector</name></type> <name>w</name></decl></parameter>,                   <comment type="line">// input/output vector for results</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Vector</name></type> <name>M</name></decl></parameter>,             <comment type="line">// optional mask for w</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,       <comment type="line">// optional accum for Z=accum(w,T)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>op</name></decl></parameter>,          <comment type="line">// operator to apply to the entries</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Vector</name></type> <name>u</name></decl></parameter>,             <comment type="line">// first input:  vector u</comment>
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>y</name></decl></parameter>,                  <comment type="line">// second input: scalar y</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Descriptor</name></type> <name>desc</name></decl></parameter>       <comment type="line">// descriptor for w and M</comment>
)</parameter_list>
<block>{<block_content> 
    <expr_stmt><expr><call><name>GB_WHERE</name> <argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="string">"GrB_Vector_apply_BinaryOp2nd_UDT"</literal>
        <literal type="string">" (w, M, accum, op, u, y, desc)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_SCALAR_WRAP_UDT</name> <argument_list>(<argument><expr><name>scalar</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>op</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>op</name><operator>-&gt;</operator><name>ytype</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><call><name>GB_2nd</name> <argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>op</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Vector_apply_IndexOp_TYPE: apply an idxunop operator: op(u,i,j,thunk)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_IDXUNOP</name><parameter_list>(<parameter><type><name>prefix</name></type></parameter>,<parameter><type><name>type</name></type></parameter>,<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro>                                           \
<cpp:value>GrB_Info GB_EVAL3 (prefix, _Vector_apply_IndexOp_, T)                       \
(                                                                           \
    GrB_Vector w,                   <comment type="block">/* input/output vector for results */</comment>   \
    const GrB_Vector M,             <comment type="block">/* optional mask for w*/</comment>                \
    const GrB_BinaryOp accum,       <comment type="block">/* optional accum for Z=accum(w,T) */</comment>   \
    const GrB_IndexUnaryOp op,      <comment type="block">/* operator to apply to the entries */</comment>  \
    const GrB_Vector u,             <comment type="block">/* first input:  vector u */</comment>            \
    const type thunk,               <comment type="block">/* second input: scalar thunk */</comment>        \
    const GrB_Descriptor desc       <comment type="block">/* descriptor for w and M */</comment>            \
)                                                                           \
{                                                                           \
    GB_WHERE (w, GB_STR(prefix) "_Vector_apply_IndexOp_" GB_STR(T)          \
        " (w, M, accum, op, u, thunk, desc)") ;                             \
    GB_SCALAR_WRAP (scalar, thunk, GB_EVAL3 (prefix, _, T)) ;               \
    return (GB_2nd (w, M, accum, (GB_Operator) op, u, scalar, desc, Context)) ;\
}</cpp:value></cpp:define>

<macro><name>GB_IDXUNOP</name> <argument_list>(<argument>GrB</argument>, <argument>bool</argument>      , <argument>BOOL</argument>  )</argument_list></macro>
<macro><name>GB_IDXUNOP</name> <argument_list>(<argument>GrB</argument>, <argument>int8_t</argument>    , <argument>INT8</argument>  )</argument_list></macro>
<macro><name>GB_IDXUNOP</name> <argument_list>(<argument>GrB</argument>, <argument>int16_t</argument>   , <argument>INT16</argument> )</argument_list></macro>
<macro><name>GB_IDXUNOP</name> <argument_list>(<argument>GrB</argument>, <argument>int32_t</argument>   , <argument>INT32</argument> )</argument_list></macro>
<macro><name>GB_IDXUNOP</name> <argument_list>(<argument>GrB</argument>, <argument>int64_t</argument>   , <argument>INT64</argument> )</argument_list></macro>
<macro><name>GB_IDXUNOP</name> <argument_list>(<argument>GrB</argument>, <argument>uint8_t</argument>   , <argument>UINT8</argument> )</argument_list></macro>
<macro><name>GB_IDXUNOP</name> <argument_list>(<argument>GrB</argument>, <argument>uint16_t</argument>  , <argument>UINT16</argument>)</argument_list></macro>
<macro><name>GB_IDXUNOP</name> <argument_list>(<argument>GrB</argument>, <argument>uint32_t</argument>  , <argument>UINT32</argument>)</argument_list></macro>
<macro><name>GB_IDXUNOP</name> <argument_list>(<argument>GrB</argument>, <argument>uint64_t</argument>  , <argument>UINT64</argument>)</argument_list></macro>
<macro><name>GB_IDXUNOP</name> <argument_list>(<argument>GrB</argument>, <argument>float</argument>     , <argument>FP32</argument>  )</argument_list></macro>
<macro><name>GB_IDXUNOP</name> <argument_list>(<argument>GrB</argument>, <argument>double</argument>    , <argument>FP64</argument>  )</argument_list></macro>
<macro><name>GB_IDXUNOP</name> <argument_list>(<argument>GxB</argument>, <argument>GxB_FC32_t</argument>, <argument>FC32</argument>  )</argument_list></macro>
<macro><name>GB_IDXUNOP</name> <argument_list>(<argument>GxB</argument>, <argument>GxB_FC64_t</argument>, <argument>FC64</argument>  )</argument_list></macro>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Vector_apply_IndexOp_UDT: apply an idxunop operator: op(u,i,j,thunk)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>GrB_Vector_apply_IndexOp_UDT</name>
<parameter_list>(
    <parameter><decl><type><name>GrB_Vector</name></type> <name>w</name></decl></parameter>,                   <comment type="line">// input/output vector for results</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Vector</name></type> <name>M</name></decl></parameter>,             <comment type="line">// optional mask for w</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,       <comment type="line">// optional accum for Z=accum(w,T)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_IndexUnaryOp</name></type> <name>op</name></decl></parameter>,      <comment type="line">// operator to apply to the entries</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Vector</name></type> <name>u</name></decl></parameter>,             <comment type="line">// first input:  vector u</comment>
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>thunk</name></decl></parameter>,              <comment type="line">// second input: scalar thunk</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Descriptor</name></type> <name>desc</name></decl></parameter>       <comment type="line">// descriptor for w and M</comment>
)</parameter_list>
<block>{<block_content> 
    <expr_stmt><expr><call><name>GB_WHERE</name> <argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="string">"GrB_Vector_apply_IndexOp_UDT"</literal>
        <literal type="string">" (w, M, accum, op, u, thunk, desc)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_SCALAR_WRAP_UDT</name> <argument_list>(<argument><expr><name>scalar</name></expr></argument>, <argument><expr><name>thunk</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>op</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>op</name><operator>-&gt;</operator><name>ytype</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><call><name>GB_2nd</name> <argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>op</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Vector_apply_IndexOp_Scalar: apply an idxunop operator: op(u,i,j,thunk)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>GrB_Vector_apply_IndexOp_Scalar</name>
<parameter_list>(
    <parameter><decl><type><name>GrB_Vector</name></type> <name>w</name></decl></parameter>,                   <comment type="line">// input/output vector for results</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Vector</name></type> <name>M</name></decl></parameter>,             <comment type="line">// optional mask for w, unused if NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,       <comment type="line">// optional accum for z=accum(w,t)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_IndexUnaryOp</name></type> <name>op</name></decl></parameter>,      <comment type="line">// operator to apply to the entries</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Vector</name></type> <name>u</name></decl></parameter>,             <comment type="line">// first input:  vector u</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Scalar</name></type> <name>thunk</name></decl></parameter>,         <comment type="line">// second input: scalar thunk</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Descriptor</name></type> <name>desc</name></decl></parameter>       <comment type="line">// descriptor for w and M</comment>
)</parameter_list>
<block>{<block_content> 
    <expr_stmt><expr><call><name>GB_WHERE</name> <argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="string">"GrB_Vector_apply_IndexOp_Scalar"</literal>
        <literal type="string">" (w, M, accum, op, u, thunk, desc)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><call><name>GB_2nd</name> <argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>op</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>thunk</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
