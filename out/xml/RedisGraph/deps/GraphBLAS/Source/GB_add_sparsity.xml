<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_add_sparsity.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_add_sparsity: determine the sparsity structure for C&lt;M or !M&gt;=A+B</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Determines the sparsity structure for C, for computing C=A+B, C&lt;M&gt;=A+B,</comment>
<comment type="line">// or C&lt;!M&gt;=A+B, based on the sparsity structures of M, A, and B, and whether</comment>
<comment type="line">// or not M is complemented.  It also decides if the mask M should be applied</comment>
<comment type="line">// by GB_add, or if C=A+B should be computed without the mask, and the mask</comment>
<comment type="line">// applied later.</comment>

<comment type="line">// If C should be hypersparse or sparse, on output, this function simply</comment>
<comment type="line">// returns GxB_SPARSE.  The final determination is made by GB_add_phase0.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_add.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>GB_add_sparsity</name>         <comment type="line">// return the sparsity structure for C</comment>
<parameter_list>(
    <comment type="line">// output:</comment>
    <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>apply_mask</name></decl></parameter>,       <comment type="line">// if true then mask will be applied by GB_add</comment>
    <comment type="line">// input:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,     <comment type="line">// optional mask for C, unused if NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_comp</name></decl></parameter>,   <comment type="line">// if true, use !M</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,     <comment type="line">// input A matrix</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>B</name></decl></parameter>      <comment type="line">// input B matrix</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine the sparsity of C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// Unless deciding otherwise, use the mask if it appears</comment>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>apply_mask</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>M</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>C_sparsity</name></decl> ;</decl_stmt>

    <comment type="line">// In the table below, sparse/hypersparse are listed as "sparse".  If C is</comment>
    <comment type="line">// listed as sparse: it is hypersparse if M is hypersparse (and not</comment>
    <comment type="line">// complemented), or if both A and B are hypersparse, and sparse otherwise.</comment>
    <comment type="line">// This is determined by GB_add_phase0.  If M is complemented and all 4</comment>
    <comment type="line">// matrices are sparse, then C=A+B is always computed.  So C is hypersparse</comment>
    <comment type="line">// if both A and B are hypersparse, in this case.</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>M_is_sparse_or_hyper</name> <init>= <expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>A_is_sparse_or_hyper</name> <init>= <expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>B_is_sparse_or_hyper</name> <init>= <expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>A_is_full</name> <init>= <expr><call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>B_is_full</name> <init>= <expr><call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>M</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      C       =           A       +       B</comment>
        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      sparse  .           sparse          sparse</comment>
        <comment type="line">//      bitmap  .           sparse          bitmap</comment>
        <comment type="line">//      full    .           sparse          full  </comment>
        <comment type="line">//      bitmap  .           bitmap          sparse</comment>
        <comment type="line">//      bitmap  .           bitmap          bitmap</comment>
        <comment type="line">//      full    .           bitmap          full  </comment>
        <comment type="line">//      full    .           full            sparse</comment>
        <comment type="line">//      full    .           full            bitmap</comment>
        <comment type="line">//      full    .           full            full  </comment>

        <if_stmt><if>if <condition>(<expr><name>A_is_sparse_or_hyper</name> <operator>&amp;&amp;</operator> <name>B_is_sparse_or_hyper</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name>C_sparsity</name> <operator>=</operator> <name>GxB_SPARSE</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>A_is_full</name> <operator>||</operator> <name>B_is_full</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name>C_sparsity</name> <operator>=</operator> <name>GxB_FULL</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <expr_stmt><expr><name>C_sparsity</name> <operator>=</operator> <name>GxB_BITMAP</name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>!</operator><name>Mask_comp</name></expr>)</condition>
    <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><name>M_is_sparse_or_hyper</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//      ------------------------------------------</comment>
            <comment type="line">//      C      &lt;M&gt; =        A       +       B</comment>
            <comment type="line">//      ------------------------------------------</comment>
            <comment type="line">//      sparse  sparse      sparse          sparse</comment>
            <comment type="line">//      sparse  sparse      sparse          bitmap</comment>
            <comment type="line">//      sparse  sparse      sparse          full  </comment>
            <comment type="line">//      sparse  sparse      bitmap          sparse</comment>
            <comment type="line">//      sparse  sparse      bitmap          bitmap</comment>
            <comment type="line">//      sparse  sparse      bitmap          full  </comment>
            <comment type="line">//      sparse  sparse      full            sparse</comment>
            <comment type="line">//      sparse  sparse      full            bitmap</comment>
            <comment type="line">//      sparse  sparse      full            full  </comment>

            <comment type="line">// TODO: if M and A and/or B are all sparse, use the mask only if:</comment>
            <comment type="line">// 8*nnz(M) &lt;= ( (A sparse or hyper) ? nnz(A) : 0 ) +</comment>
            <comment type="line">//             ( (B sparse or hyper) ? nnz(B) : 0 )</comment>
            <comment type="line">// if A and B are both bitmap or full, then always use the mask.</comment>
            <comment type="line">// GB_sparse_add_template handles this case, but exploiting the</comment>
            <comment type="line">// mask can be asympotically slow, when C and M are sparse, and A</comment>
            <comment type="line">// and/or B are sparse.</comment>

            <comment type="line">// TODO: check the sparse_mask_is_easy condition:  use M</comment>
            <comment type="line">// if Mask_struct is true, A is not bitmap, B is not bitmap,</comment>
            <comment type="line">// and one of the 3 conditions holds.  In this case, ignore the</comment>
            <comment type="line">// 8*nnz(M) &lt;= (...) test, and always use the mask.</comment>

            <comment type="line">// TODO: See the GB_MASK_VERY_SPARSE (M, A, B) macro for this test.</comment>

            <expr_stmt><expr><name>C_sparsity</name> <operator>=</operator> <name>GxB_SPARSE</name></expr> ;</expr_stmt>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">//      ------------------------------------------</comment>
            <comment type="line">//      C      &lt;M&gt; =        A       +       B</comment>
            <comment type="line">//      ------------------------------------------</comment>
            <comment type="line">//      sparse  bitmap      sparse          sparse</comment>
            <comment type="line">//      bitmap  bitmap      sparse          bitmap</comment>
            <comment type="line">//      bitmap  bitmap      sparse          full  </comment>
            <comment type="line">//      bitmap  bitmap      bitmap          sparse</comment>
            <comment type="line">//      bitmap  bitmap      bitmap          bitmap</comment>
            <comment type="line">//      bitmap  bitmap      bitmap          full  </comment>
            <comment type="line">//      bitmap  bitmap      full            sparse</comment>
            <comment type="line">//      bitmap  bitmap      full            bitmap</comment>
            <comment type="line">//      bitmap  bitmap      full            full  </comment>

            <comment type="line">//      ------------------------------------------</comment>
            <comment type="line">//      C      &lt;M&gt; =        A       +       B</comment>
            <comment type="line">//      ------------------------------------------</comment>
            <comment type="line">//      sparse  full        sparse          sparse</comment>
            <comment type="line">//      bitmap  full        sparse          bitmap</comment>
            <comment type="line">//      bitmap  full        sparse          full  </comment>
            <comment type="line">//      bitmap  full        bitmap          sparse</comment>
            <comment type="line">//      bitmap  full        bitmap          bitmap</comment>
            <comment type="line">//      bitmap  full        bitmap          full  </comment>
            <comment type="line">//      bitmap  full        full            sparse</comment>
            <comment type="line">//      bitmap  full        full            bitmap</comment>
            <comment type="line">//      bitmap  full        full            full  </comment>

            <comment type="line">// The mask is very efficient to use in the case, when C is sparse.</comment>

            <if_stmt><if>if <condition>(<expr><name>A_is_sparse_or_hyper</name> <operator>&amp;&amp;</operator> <name>B_is_sparse_or_hyper</name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><name>C_sparsity</name> <operator>=</operator> <name>GxB_SPARSE</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <expr_stmt><expr><name>C_sparsity</name> <operator>=</operator> <name>GxB_BITMAP</name></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>
    <else>else <comment type="line">// Mask_comp</comment>
    <block>{<block_content>

        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      C     &lt;!M&gt; =        A       +       B</comment>
        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      sparse  sparse      sparse          sparse      (mask later)</comment>
        <comment type="line">//      bitmap  sparse      sparse          bitmap</comment>
        <comment type="line">//      bitmap  sparse      sparse          full  </comment>
        <comment type="line">//      bitmap  sparse      bitmap          sparse</comment>
        <comment type="line">//      bitmap  sparse      bitmap          bitmap</comment>
        <comment type="line">//      bitmap  sparse      bitmap          full  </comment>
        <comment type="line">//      bitmap  sparse      full            sparse</comment>
        <comment type="line">//      bitmap  sparse      full            bitmap</comment>
        <comment type="line">//      bitmap  sparse      full            full  </comment>

        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      C     &lt;!M&gt; =        A       +       B</comment>
        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      sparse  bitmap      sparse          sparse</comment>
        <comment type="line">//      bitmap  bitmap      sparse          bitmap</comment>
        <comment type="line">//      bitmap  bitmap      sparse          full  </comment>
        <comment type="line">//      bitmap  bitmap      bitmap          sparse</comment>
        <comment type="line">//      bitmap  bitmap      bitmap          bitmap</comment>
        <comment type="line">//      bitmap  bitmap      bitmap          full  </comment>
        <comment type="line">//      bitmap  bitmap      full            sparse</comment>
        <comment type="line">//      bitmap  bitmap      full            bitmap</comment>
        <comment type="line">//      bitmap  bitmap      full            full  </comment>

        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      C     &lt;!M&gt; =        A       +       B</comment>
        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      sparse  full        sparse          sparse</comment>
        <comment type="line">//      bitmap  full        sparse          bitmap</comment>
        <comment type="line">//      bitmap  full        sparse          full  </comment>
        <comment type="line">//      bitmap  full        bitmap          sparse</comment>
        <comment type="line">//      bitmap  full        bitmap          bitmap</comment>
        <comment type="line">//      bitmap  full        bitmap          full  </comment>
        <comment type="line">//      bitmap  full        full            sparse</comment>
        <comment type="line">//      bitmap  full        full            bitmap</comment>
        <comment type="line">//      bitmap  full        full            full  </comment>

        <if_stmt><if>if <condition>(<expr><name>A_is_sparse_or_hyper</name> <operator>&amp;&amp;</operator> <name>B_is_sparse_or_hyper</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// !M must be applied later if all 4 matrices are sparse or</comment>
            <comment type="line">// hypersparse, since the GB_sparse_add_template method does not</comment>
            <comment type="line">// handle this case.  See the "(mask later)" above.  The method can</comment>
            <comment type="line">// construct a sparse/hyper C with !M as bitmap or full. </comment>
            <expr_stmt><expr><name>C_sparsity</name> <operator>=</operator> <name>GxB_SPARSE</name></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>apply_mask</name><operator>)</operator> <operator>=</operator> <operator>!</operator><name>M_is_sparse_or_hyper</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// !M can be applied now, or later.  TODO: If M is sparse and</comment>
            <comment type="line">// either A or B are sparse/hyper, then there might be cases where</comment>
            <comment type="line">// !M should be applied later, for better performance.</comment>
            <expr_stmt><expr><name>C_sparsity</name> <operator>=</operator> <name>GxB_BITMAP</name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><operator>(</operator><name>C_sparsity</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
