<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_AxB_dot4.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_AxB_dot4: compute C+=A'*B in-place</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// GB_AxB_dot4 does its computation in a single phase, computing its result in</comment>
<comment type="line">// the input matrix C, which is already as-if-full (in any format).  The mask M</comment>
<comment type="line">// is not handled by this function.  C is not iso on output, but might be iso</comment>
<comment type="line">// on input (if so, C is converted from iso on input to non-iso on output).</comment>

<comment type="line">// The accum operator is the same as monoid operator semiring-&gt;add-&gt;op, and the</comment>
<comment type="line">// type of C (C-&gt;type) matches the accum-&gt;ztype so no typecasting is needed.</comment>

<comment type="line">// The ANY monoid is not supported, since its use as accum would be unusual.</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mxm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_binop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unused.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA_DEV</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB__include2.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_WORKSPACE</name></cpp:macro>               \
<cpp:value>{                                       \
    GB_WERK_POP (B_slice, int64_t) ;    \
    GB_WERK_POP (A_slice, int64_t) ;    \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>                     \
<cpp:value>{                                       \
    GB_FREE_WORKSPACE ;                 \
    GB_phybix_free (C) ;                \
}</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_AxB_dot4: compute C+=A'*B in-place</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>GB_AxB_dot4</name>                <comment type="line">// C+=A'*B, dot product method</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,                   <comment type="line">// input/output matrix, must be as-if-full</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,             <comment type="line">// input matrix</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>B</name></decl></parameter>,             <comment type="line">// input matrix</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Semiring</name></type> <name>semiring</name></decl></parameter>,    <comment type="line">// semiring that defines C+=A*B and accum</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>flipxy</name></decl></parameter>,              <comment type="line">// if true, do z=fmult(b,a) vs fmult(a,b)</comment>
    <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done_in_place</name></decl></parameter>,            <comment type="line">// if true, dot4 has computed the result</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// dot4 is disabled if GraphBLAS is compiled as compact</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GBCUDA_DEV</name></cpp:ifdef>
    <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(always punt) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_NO_VALUE</name><operator>)</operator></expr> ;</return>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C for dot in-place += A'*B"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A for dot in-place += A'*B"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="string">"B for dot in-place += A'*B"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_SEMIRING_OK</name> <argument_list>(<argument><expr><name>semiring</name></expr></argument>, <argument><expr><literal type="string">"semiring for in-place += A'*B"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name> <operator>==</operator> <name><name>B</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>A_slice</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>B_slice</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the semiring operators</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>mult</name> <init>= <expr><name><name>semiring</name><operator>-&gt;</operator><name>multiply</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Monoid</name></type> <name>add</name> <init>= <expr><name><name>semiring</name><operator>-&gt;</operator><name>add</name></name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>mult</name><operator>-&gt;</operator><name>ztype</name></name> <operator>==</operator> <name><name>add</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>ztype</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name>     <operator>==</operator> <name><name>add</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>ztype</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>op_is_first</name>  <init>= <expr><name><name>mult</name><operator>-&gt;</operator><name>opcode</name></name> <operator>==</operator> <name>GB_FIRST_binop_code</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>op_is_second</name> <init>= <expr><name><name>mult</name><operator>-&gt;</operator><name>opcode</name></name> <operator>==</operator> <name>GB_SECOND_binop_code</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>op_is_pair</name>   <init>= <expr><name><name>mult</name><operator>-&gt;</operator><name>opcode</name></name> <operator>==</operator> <name>GB_PAIR_binop_code</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>A_is_pattern</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>B_is_pattern</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>flipxy</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// z = fmult (b,a) will be computed</comment>
        <expr_stmt><expr><name>A_is_pattern</name> <operator>=</operator> <name>op_is_first</name>  <operator>||</operator> <name>op_is_pair</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>B_is_pattern</name> <operator>=</operator> <name>op_is_second</name> <operator>||</operator> <name>op_is_pair</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><operator>!</operator><name>A_is_pattern</name></expr></argument>,
            <argument><expr><call><name>GB_Type_compatible</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>mult</name><operator>-&gt;</operator><name>ytype</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><operator>!</operator><name>B_is_pattern</name></expr></argument>,
            <argument><expr><call><name>GB_Type_compatible</name> <argument_list>(<argument><expr><name><name>B</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>mult</name><operator>-&gt;</operator><name>xtype</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// z = fmult (a,b) will be computed</comment>
        <expr_stmt><expr><name>A_is_pattern</name> <operator>=</operator> <name>op_is_second</name> <operator>||</operator> <name>op_is_pair</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>B_is_pattern</name> <operator>=</operator> <name>op_is_first</name>  <operator>||</operator> <name>op_is_pair</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><operator>!</operator><name>A_is_pattern</name></expr></argument>,
            <argument><expr><call><name>GB_Type_compatible</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>mult</name><operator>-&gt;</operator><name>xtype</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><operator>!</operator><name>B_is_pattern</name></expr></argument>,
            <argument><expr><call><name>GB_Type_compatible</name> <argument_list>(<argument><expr><name><name>B</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>mult</name><operator>-&gt;</operator><name>ytype</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>GB_Opcode</name></type> <name>mult_binop_code</name></decl>, <decl><type ref="prev"/><name>add_binop_code</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>xcode</name></decl>, <decl><type ref="prev"/><name>ycode</name></decl>, <decl><type ref="prev"/><name>zcode</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>builtin_semiring</name> <init>= <expr><call><name>GB_AxB_semiring_builtin</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>A_is_pattern</name></expr></argument>, <argument><expr><name>B</name></expr></argument>,
        <argument><expr><name>B_is_pattern</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>, <argument><expr><name>flipxy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mult_binop_code</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>add_binop_code</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>xcode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ycode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zcode</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>builtin_semiring</name> <operator>||</operator> <operator>(</operator><name>add_binop_code</name> <operator>==</operator> <name>GB_ANY_binop_code</name><operator>)</operator></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// The semiring must be built-in, and cannot use the ANY monoid.</comment>
        <return>return <expr><operator>(</operator><name>GrB_NO_VALUE</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(dot4: %s += %s'*%s) "</literal></expr></argument>,
        <argument><expr><call><name>GB_sparsity_char_matrix</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name>GB_sparsity_char_matrix</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name>GB_sparsity_char_matrix</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine the number of threads to use</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>anz</name> <init>= <expr><call><name>GB_nnz_held</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>bnz</name> <init>= <expr><call><name>GB_nnz_held</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>anz</name> <operator>+</operator> <name>bnz</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// slice A and B</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// A and B can have any sparsity: sparse/hyper/bitmap/full.</comment>
    <comment type="line">// C is always as-if-full.</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>anvec</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>vlen</name>  <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>bnvec</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>nvec</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>naslice</name></decl>, <decl><type ref="prev"/><name>nbslice</name></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>nthreads</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>naslice</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name>nbslice</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <decl_stmt><decl><type><name>bool</name></type> <name>A_is_sparse_or_hyper</name> <init>= <expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>B_is_sparse_or_hyper</name> <init>= <expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>A_is_sparse_or_hyper</name> <operator>&amp;&amp;</operator> <name>B_is_sparse_or_hyper</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// both A and B are sparse/hyper; split them finely</comment>
            <expr_stmt><expr><name>naslice</name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <name>nthreads</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>nbslice</name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <name>nthreads</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><operator>!</operator><name>A_is_sparse_or_hyper</name> <operator>&amp;&amp;</operator> <name>B_is_sparse_or_hyper</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// A is bitmap/full and B is sparse/hyper; only split B</comment>
            <expr_stmt><expr><name>naslice</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
            <expr_stmt><expr><name>nbslice</name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <name>nthreads</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>A_is_sparse_or_hyper</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>B_is_sparse_or_hyper</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// A is sparse/hyper and B is bitmap/full; is only split A</comment>
            <expr_stmt><expr><name>naslice</name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <name>nthreads</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>nbslice</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// A and B are bitmap/full; split them coarsely</comment>
            <expr_stmt><expr><name>naslice</name> <operator>=</operator> <name>nthreads</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>nbslice</name> <operator>=</operator> <name>nthreads</name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// ensure each slice has at least one vector</comment>
    <expr_stmt><expr><name>naslice</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>naslice</name></expr></argument>, <argument><expr><name>anvec</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>nbslice</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>nbslice</name></expr></argument>, <argument><expr><name>bnvec</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GB_WERK_PUSH</name> <argument_list>(<argument><expr><name>A_slice</name></expr></argument>, <argument><expr><name>naslice</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_WERK_PUSH</name> <argument_list>(<argument><expr><name>B_slice</name></expr></argument>, <argument><expr><name>nbslice</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>A_slice</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>B_slice</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <expr_stmt><expr><name>GB_FREE_WORKSPACE</name></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>GB_pslice</name> <argument_list>(<argument><expr><name>A_slice</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>anvec</name></expr></argument>, <argument><expr><name>naslice</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_pslice</name> <argument_list>(<argument><expr><name>B_slice</name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>bnvec</name></expr></argument>, <argument><expr><name>nbslice</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// define the worker for the switch factory</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <name>GrB_NO_VALUE</name></expr> ;</expr_stmt>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_Adot4B</name><parameter_list>(<parameter><type><name>add</name></type></parameter>,<parameter><type><name>mult</name></type></parameter>,<parameter><type><name>xname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GB (_Adot4B_ ## add ## mult ## xname)</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_AxB_WORKER</name><parameter_list>(<parameter><type><name>add</name></type></parameter>,<parameter><type><name>mult</name></type></parameter>,<parameter><type><name>xname</name></type></parameter>)</parameter_list></cpp:macro>                           \
    <cpp:value>{                                                               \
        info = GB_Adot4B (add,mult,xname) (C, A, A_slice, naslice,  \
            B, B_slice, nbslice, nthreads, Context) ;               \
    }                                                               \
    break ;</cpp:value></cpp:define>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// launch the switch factory</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// disabled the ANY monoid</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_NO_ANY_MONOID</name></cpp:macro></cpp:define>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_factory.c"</cpp:file></cpp:include>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free workspace and return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_FREE_WORKSPACE</name></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <name>GrB_NO_VALUE</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// dot4 doesn't handle this case; punt to dot2 or dot3</comment>
        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(punt) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"dot4: output"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>done_in_place</name><operator>)</operator> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

</unit>
