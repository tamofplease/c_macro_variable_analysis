<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_binop_pattern.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_binop_pattern: determine if values of A and B will be used by C=op(A,B)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Given the opcode of a operator z = op (x,y), and a flipxy flag, determine if</comment>
<comment type="line">// C=op(A,B) will use just the pattern of A and/or B.  op(A,B) is the multiply</comment>
<comment type="line">// operator for C=A*B, or the ewise operator for eWiseMult.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_binop.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_binop_pattern</name>
<parameter_list>(
    <comment type="line">// outputs:</comment>
    <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>A_is_pattern</name></decl></parameter>,     <comment type="line">// true if A is pattern-only, because of the op</comment>
    <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>B_is_pattern</name></decl></parameter>,     <comment type="line">// true if B is pattern-only, because of the op</comment>
    <comment type="line">// inputs:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>flipxy</name></decl></parameter>,      <comment type="line">// if true,  z = op (b,a) will be computed</comment>
                            <comment type="line">// if false, z = op (a,b) will be computed</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GB_Opcode</name></type> <name>opcode</name></decl></parameter>  <comment type="line">// opcode of binary op</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine A_is_pattern and B_is_pattern</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>op_is_positional</name> <init>= <expr><call><name>GB_OPCODE_IS_POSITIONAL</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>op_is_first</name>  <init>= <expr><operator>(</operator><name>opcode</name> <operator>==</operator> <name>GB_FIRST_binop_code</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>op_is_second</name> <init>= <expr><operator>(</operator><name>opcode</name> <operator>==</operator> <name>GB_SECOND_binop_code</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>op_is_pair</name>   <init>= <expr><operator>(</operator><name>opcode</name> <operator>==</operator> <name>GB_PAIR_binop_code</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>op_is_positional</name> <operator>||</operator> <name>op_is_pair</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// mult (x,y) does not depend on the values of x or y</comment>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>A_is_pattern</name><operator>)</operator> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>B_is_pattern</name><operator>)</operator> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>flipxy</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// z = mult (b,a) will be computed</comment>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>A_is_pattern</name><operator>)</operator> <operator>=</operator> <name>op_is_first</name></expr>  ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>B_is_pattern</name><operator>)</operator> <operator>=</operator> <name>op_is_second</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// z = mult (a,b) will be computed</comment>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>A_is_pattern</name><operator>)</operator> <operator>=</operator> <name>op_is_second</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>B_is_pattern</name><operator>)</operator> <operator>=</operator> <name>op_is_first</name></expr>  ;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

</unit>
