<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_cumsum.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_cumsum: cumlative sum of an array</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Compute the cumulative sum of an array count[0:n], of size n+1:</comment>

<comment type="line">//      k = sum (count [0:n-1] != 0) ;</comment>
<comment type="line">//      count = cumsum ([0 count[0:n-1]]) ;</comment>

<comment type="line">// That is, count [j] on input is overwritten with sum (count [0..j-1]).</comment>
<comment type="line">// On input, count [n] is not accessed and is implicitly zero on input.</comment>
<comment type="line">// On output, count [n] is the total sum.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GB_PUBLIC</name>
<name>void</name></type> <name>GB_cumsum</name>                      <comment type="line">// cumulative sum of an array</comment>
<parameter_list>(
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>count</name></decl></parameter>,     <comment type="line">// size n+1, input/output</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>n</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>kresult</name></decl></parameter>,   <comment type="line">// return k, if needed by the caller</comment>
    <parameter><decl><type><name>int</name></type> <name>nthreads</name></decl></parameter>,
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>count</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine # of threads to use</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>( <argument><expr><name>_OPENMP</name></expr></argument> )</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name>nthreads</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><name>nthreads</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name>nthreads</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>nthreads</name></expr></argument>, <argument><expr><name>n</name> <operator>/</operator> <operator>(</operator><literal type="number">64</literal> <operator>*</operator> <literal type="number">1024</literal><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>nthreads</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>nthreads</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// count = cumsum ([0 count[0:n-1]]) ;</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>kresult</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><name>nthreads</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// cumsum with one thread</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content> 
                <decl_stmt><decl><type><name>int64_t</name></type> <name>c</name> <init>= <expr><name><name>count</name> <index>[<expr><name>i</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><name><name>count</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>s</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>s</name> <operator>+=</operator> <name>c</name></expr> ;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name><name>count</name> <index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>s</name></expr> ;</expr_stmt>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// cumsum with multiple threads</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// allocate workspace</comment>
            <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_WERK_PUSH</name> <argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>ws</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// out of memory; use a single thread instead</comment>
                <expr_stmt><expr><call><name>GB_cumsum</name> <argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <return>return ;</return>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <comment type="line">// each task sums up its own part</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>istart</name></decl>, <decl><type ref="prev"/><name>iend</name></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>istart</name></expr></argument>, <argument><expr><name>iend</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name>istart</name></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>iend</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content> 
                    <expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>count</name> <index>[<expr><name>i</name></expr>]</index></name></expr> ;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><name><name>ws</name> <index>[<expr><name>tid</name></expr>]</index></name> <operator>=</operator> <name>s</name></expr> ;</expr_stmt>
            </block_content>}</block></for>

            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <comment type="line">// each tasks computes the cumsum of its own part</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>istart</name></decl>, <decl><type ref="prev"/><name>iend</name></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>istart</name></expr></argument>, <argument><expr><name>iend</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tid</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content> 
                    <expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>ws</name> <index>[<expr><name>i</name></expr>]</index></name></expr> ;</expr_stmt>
                </block_content>}</block></for>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name>istart</name></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>iend</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content> 
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>c</name> <init>= <expr><name><name>count</name> <index>[<expr><name>i</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><name><name>count</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>s</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><name>s</name> <operator>+=</operator> <name>c</name></expr> ;</expr_stmt>
                </block_content>}</block></for>
                <if_stmt><if>if <condition>(<expr><name>iend</name> <operator>==</operator> <name>n</name></expr>)</condition>
                <block>{<block_content> 
                    <expr_stmt><expr><name><name>count</name> <index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>s</name></expr> ;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>

            <comment type="line">// free workspace</comment>
            <expr_stmt><expr><call><name>GB_WERK_POP</name> <argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><name>nthreads</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// cumsum with one thread, also compute k</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content> 
                <decl_stmt><decl><type><name>int64_t</name></type> <name>c</name> <init>= <expr><name><name>count</name> <index>[<expr><name>i</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>k</name><operator>++</operator></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>count</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>s</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>s</name> <operator>+=</operator> <name>c</name></expr> ;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name><name>count</name> <index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>s</name></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>kresult</name><operator>)</operator> <operator>=</operator> <name>k</name></expr> ;</expr_stmt>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// cumsum with multiple threads, also compute k</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// allocate workspace</comment>
            <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>wk</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_WERK_PUSH</name> <argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_WERK_PUSH</name> <argument_list>(<argument><expr><name>wk</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>ws</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>wk</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// out of memory; use a single thread instead</comment>
                <expr_stmt><expr><call><name>GB_WERK_POP</name> <argument_list>(<argument><expr><name>wk</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GB_WERK_POP</name> <argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GB_cumsum</name> <argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>kresult</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <return>return ;</return>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <comment type="line">// each task sums up its own part</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>istart</name></decl>, <decl><type ref="prev"/><name>iend</name></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>istart</name></expr></argument>, <argument><expr><name>iend</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name>istart</name></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>iend</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content> 
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>c</name> <init>= <expr><name><name>count</name> <index>[<expr><name>i</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>k</name><operator>++</operator></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt><expr><name>s</name> <operator>+=</operator> <name>c</name></expr> ;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><name><name>ws</name> <index>[<expr><name>tid</name></expr>]</index></name> <operator>=</operator> <name>s</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>wk</name> <index>[<expr><name>tid</name></expr>]</index></name> <operator>=</operator> <name>k</name></expr> ;</expr_stmt>
            </block_content>}</block></for>

            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <comment type="line">// each task computes the cumsum of its own part</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>istart</name></decl>, <decl><type ref="prev"/><name>iend</name></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>istart</name></expr></argument>, <argument><expr><name>iend</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tid</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content> 
                    <expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>ws</name> <index>[<expr><name>i</name></expr>]</index></name></expr> ;</expr_stmt>
                </block_content>}</block></for>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name>istart</name></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>iend</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content> 
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>c</name> <init>= <expr><name><name>count</name> <index>[<expr><name>i</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><name><name>count</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>s</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><name>s</name> <operator>+=</operator> <name>c</name></expr> ;</expr_stmt>
                </block_content>}</block></for>
                <if_stmt><if>if <condition>(<expr><name>iend</name> <operator>==</operator> <name>n</name></expr>)</condition>
                <block>{<block_content> 
                    <expr_stmt><expr><name><name>count</name> <index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>s</name></expr> ;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>tid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content> 
                <expr_stmt><expr><name>k</name> <operator>+=</operator> <name><name>wk</name> <index>[<expr><name>tid</name></expr>]</index></name></expr> ;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>kresult</name><operator>)</operator> <operator>=</operator> <name>k</name></expr> ;</expr_stmt>

            <comment type="line">// free workspace</comment>
            <expr_stmt><expr><call><name>GB_WERK_POP</name> <argument_list>(<argument><expr><name>wk</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_WERK_POP</name> <argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

</unit>
