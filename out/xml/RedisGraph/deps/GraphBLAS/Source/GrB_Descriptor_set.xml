<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GrB_Descriptor_set.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Descriptor_set: set a field in a descriptor</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GrB_Descriptor_set</name>     <comment type="line">// set a parameter in a descriptor</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Descriptor</name></type> <name>desc</name></decl></parameter>,        <comment type="line">// descriptor to modify</comment>
    <parameter><decl><type><name>GrB_Desc_Field</name></type> <name>field</name></decl></parameter>,       <comment type="line">// parameter to change</comment>
    <parameter><decl><type><name>GrB_Desc_Value</name></type> <name>value</name></decl></parameter>        <comment type="line">// value to change it to</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>desc</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>desc</name><operator>-&gt;</operator><name>header_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// built-in descriptors may not be modified</comment>
        <return>return <expr><operator>(</operator><name>GrB_INVALID_VALUE</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>GB_WHERE</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><literal type="string">"GrB_Descriptor_set (desc, field, value)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_DESCRIPTOR_OK</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><literal type="string">"desc to set"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// set the parameter</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <switch>switch <condition>(<expr><name>field</name></expr>)</condition>
    <block>{<block_content>

        <case>case <expr><name>GrB_OUTP</name></expr> :</case> 

            <if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name>value</name> <operator>==</operator> <name>GxB_DEFAULT</name> <operator>||</operator> <name>value</name> <operator>==</operator> <name>GrB_REPLACE</name><operator>)</operator></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_INVALID_VALUE</name></expr></argument>,
                    <argument><expr><literal type="string">"invalid descriptor value [%d] for GrB_OUTP field;\n"</literal>
                    <literal type="string">"must be GxB_DEFAULT [%d] or GrB_REPLACE [%d]"</literal></expr></argument>,
                    <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>value</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>GxB_DEFAULT</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>GrB_REPLACE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <name>value</name></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><name>GrB_MASK</name></expr> :</case> 
        <block>{<block_content>

            <if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name>value</name> <operator>==</operator> <name>GxB_DEFAULT</name> <operator>||</operator>
                   <name>value</name> <operator>==</operator> <name>GrB_COMP</name> <operator>||</operator>
                   <name>value</name> <operator>==</operator> <name>GrB_STRUCTURE</name> <operator>||</operator>
                   <name>value</name> <operator>==</operator> <operator>(</operator><name>GrB_COMP</name> <operator>+</operator> <name>GrB_STRUCTURE</name><operator>)</operator><operator>)</operator></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_INVALID_VALUE</name></expr></argument>,
                    <argument><expr><literal type="string">"invalid descriptor value [%d] for GrB_MASK field;\n"</literal>
                    <literal type="string">"must be GxB_DEFAULT [%d], GrB_COMP [%d],\n"</literal>
                    <literal type="string">"GrB_STRUCTURE [%d], or GrB_COMP+GrB_STRUCTURE [%d]"</literal></expr></argument>,
                    <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>value</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>GxB_DEFAULT</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>GrB_COMP</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>GrB_STRUCTURE</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>GrB_COMP</name> <operator>+</operator> <name>GrB_STRUCTURE</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>desc</name><operator>-&gt;</operator><name>mask</name></name></expr></init></decl> ;</decl_stmt>
            <switch>switch <condition>(<expr><name>value</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GrB_COMP</name></expr>      :</case> <expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>GrB_COMP</name></expr> ;</expr_stmt>      <break>break ;</break>
                <case>case <expr><name>GrB_STRUCTURE</name></expr> :</case> <expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>GrB_STRUCTURE</name></expr> ;</expr_stmt> <break>break ;</break>
                <default>default            :</default> <expr_stmt><expr><name>mask</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>value</name></expr> ;</expr_stmt>    <break>break ;</break>
            </block_content>}</block></switch>
            <expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>mask</name></name> <operator>=</operator> <operator>(</operator><name>GrB_Desc_Value</name><operator>)</operator> <name>mask</name></expr> ;</expr_stmt>
        </block_content>}</block>
        <break>break ;</break>

        <case>case <expr><name>GrB_INP0</name></expr> :</case> 

            <if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name>value</name> <operator>==</operator> <name>GxB_DEFAULT</name> <operator>||</operator> <name>value</name> <operator>==</operator> <name>GrB_TRAN</name><operator>)</operator></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_INVALID_VALUE</name></expr></argument>,
                    <argument><expr><literal type="string">"invalid descriptor value [%d] for GrB_INP0 field;\n"</literal>
                    <literal type="string">"must be GxB_DEFAULT [%d] or GrB_TRAN [%d]"</literal></expr></argument>,
                    <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>value</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>GxB_DEFAULT</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>GrB_TRAN</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>in0</name></name> <operator>=</operator> <name>value</name></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><name>GrB_INP1</name></expr> :</case> 

            <if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name>value</name> <operator>==</operator> <name>GxB_DEFAULT</name> <operator>||</operator> <name>value</name> <operator>==</operator> <name>GrB_TRAN</name><operator>)</operator></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_INVALID_VALUE</name></expr></argument>,
                    <argument><expr><literal type="string">"invalid descriptor value [%d] for GrB_INP1 field;\n"</literal>
                    <literal type="string">"must be GxB_DEFAULT [%d] or GrB_TRAN [%d]"</literal></expr></argument>,
                    <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>value</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>GxB_DEFAULT</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>GrB_TRAN</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>in1</name></name> <operator>=</operator> <name>value</name></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><name>GxB_AxB_METHOD</name></expr> :</case> 

            <if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name>value</name> <operator>==</operator> <name>GxB_DEFAULT</name>  <operator>||</operator> <name>value</name> <operator>==</operator> <name>GxB_AxB_GUSTAVSON</name>
                <operator>||</operator> <name>value</name> <operator>==</operator> <name>GxB_AxB_DOT</name>
                <operator>||</operator> <name>value</name> <operator>==</operator> <name>GxB_AxB_HASH</name> <operator>||</operator> <name>value</name> <operator>==</operator> <name>GxB_AxB_SAXPY</name><operator>)</operator></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_INVALID_VALUE</name></expr></argument>,
                    <argument><expr><literal type="string">"invalid descriptor value [%d] for GrB_AxB_METHOD field;\n"</literal>
                    <literal type="string">"must be GxB_DEFAULT [%d], GxB_AxB_GUSTAVSON [%d]\n"</literal>
                    <literal type="string">"GxB_AxB_DOT [%d], GxB_AxB_HASH [%d] or GxB_AxB_SAXPY [%d]"</literal></expr></argument>,
                    <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>value</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>GxB_DEFAULT</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>GxB_AxB_GUSTAVSON</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>GxB_AxB_DOT</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>GxB_AxB_HASH</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>GxB_AxB_SAXPY</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>axb</name></name> <operator>=</operator> <name>value</name></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><name>GxB_IMPORT</name></expr> :</case> 

            <comment type="line">// The user application might not check the error return value of</comment>
            <comment type="line">// this method, so do not return an error if the value is something</comment>
            <comment type="line">// other that GxB_FAST_IMPORT (equal to GxB_DEFAULT) or</comment>
            <comment type="line">// GxB_SERCURE_IMPORT.  Instead, default to slower but secure</comment>
            <comment type="line">// import/deserialization, if the GxB_IMPORT setting is made.</comment>
            <comment type="line">// Only use the fast import/deserialize if the value is GxB_DEFAULT</comment>
            <comment type="line">// or GxB_FAST_IMPORT; otherwise use the slower secure method.</comment>
            <expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>import</name></name> <operator>=</operator>
                <ternary><condition><expr><operator>(</operator><name>value</name> <operator>==</operator> <name>GxB_DEFAULT</name><operator>)</operator></expr> ?</condition><then> <expr><name>GxB_FAST_IMPORT</name></expr> </then><else>: <expr><name>GxB_SECURE_IMPORT</name></expr></else></ternary></expr> ;</expr_stmt>
            <break>break ;</break>

        <default>default :</default> 

            <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_INVALID_VALUE</name></expr></argument>,
                <argument><expr><literal type="string">"invalid descriptor field [%d], must be one of:\n"</literal>
                <literal type="string">"GrB_OUTP [%d], GrB_MASK [%d], GrB_INP0 [%d], GrB_INP1 [%d], "</literal>
                <literal type="string">"GxB_AxB_METHOD [%d] or GxB_IMPORT [%d] (use GxB_Desc_set "</literal>
                <literal type="string">"for other descriptor settings)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>field</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>GrB_OUTP</name></expr></argument>,
                <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>GrB_MASK</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>GrB_INP0</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>GrB_INP1</name></expr></argument>,
                <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>GxB_AxB_METHOD</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>GxB_IMPORT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></switch>

    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
