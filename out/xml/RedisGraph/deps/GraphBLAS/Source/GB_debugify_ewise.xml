<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_debugify_ewise.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_debugify_ewise: dump the definitions for ewise to /tmp/GB_ewise_*.h file</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2021, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_stringify.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_debugify_ewise</name>
<parameter_list>(
    <comment type="line">// C matrix:</comment>
    <parameter><decl><type><name>bool</name></type> <name>C_iso</name></decl></parameter>,             <comment type="line">// if true, operator is ignored</comment>
    <parameter><decl><type><name>int</name></type> <name>C_sparsity</name></decl></parameter>,         <comment type="line">// sparse, hyper, bitmap, or full</comment>
    <parameter><decl><type><name>GrB_Type</name></type> <name>ctype</name></decl></parameter>,         <comment type="line">// C=((ctype) T) is the final typecast</comment>
    <comment type="line">// M matrix:</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,
    <parameter><decl><type><name>bool</name></type> <name>Mask_struct</name></decl></parameter>,
    <parameter><decl><type><name>bool</name></type> <name>Mask_comp</name></decl></parameter>,
    <comment type="line">// operator:</comment>
    <parameter><decl><type><name>GrB_BinaryOp</name></type> <name>binaryop</name></decl></parameter>,  <comment type="line">// may be NULL (used by GB_wait)</comment>
    <parameter><decl><type><name>bool</name></type> <name>flipxy</name></decl></parameter>,
    <comment type="line">// A and B matrices:</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>B</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>uint64_t</name></type> <name>scode</name></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>atype</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>btype</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">// enumify the ewise problem</comment>
    <expr_stmt><expr><call><name>GB_enumify_ewise</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>scode</name></expr></argument>, <argument><expr><name>C_iso</name></expr></argument>, <argument><expr><name>C_sparsity</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>,
        <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>binaryop</name></expr></argument>, <argument><expr><name>flipxy</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// namify the ewise problem</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>ewise_name</name> <index>[<expr><literal type="number">256</literal> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>GxB_MAX_NAME_LEN</name></expr>]</index></name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_namify_problem</name> <argument_list>(<argument><expr><name>ewise_name</name></expr></argument>, <argument><expr><name>scode</name></expr></argument>,
        <argument><expr><ternary><condition><expr><operator>(</operator><name>binaryop</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"nop"</literal></expr> </then><else>: <expr><name><name>binaryop</name><operator>-&gt;</operator><name>name</name></name></expr></else></ternary></expr></argument>,
        <argument><expr><name>NULL</name></expr></argument>,
        <argument><expr><ternary><condition><expr><operator>(</operator><name>binaryop</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>binaryop</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>name</name></name></expr></else></ternary></expr></argument>,
        <argument><expr><ternary><condition><expr><operator>(</operator><name>binaryop</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>binaryop</name><operator>-&gt;</operator><name>ytype</name><operator>-&gt;</operator><name>name</name></name></expr></else></ternary></expr></argument>,
        <argument><expr><ternary><condition><expr><operator>(</operator><name>binaryop</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>binaryop</name><operator>-&gt;</operator><name>ztype</name><operator>-&gt;</operator><name>name</name></name></expr></else></ternary></expr></argument>,
        <argument><expr><name><name>atype</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
        <argument><expr><name><name>btype</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
        <argument><expr><name><name>ctype</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// construct the filename and create the file</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>filename</name> <index>[<expr><literal type="number">512</literal> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>GxB_MAX_NAME_LEN</name></expr>]</index></name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"/tmp/GB_ewise_%s.h"</literal></expr></argument>, <argument><expr><name>ewise_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>fopen</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">// macrofy the ewise problem</comment>
    <expr_stmt><expr><call><name>GB_macrofy_ewise</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>scode</name></expr></argument>, <argument><expr><name>binaryop</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>btype</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
