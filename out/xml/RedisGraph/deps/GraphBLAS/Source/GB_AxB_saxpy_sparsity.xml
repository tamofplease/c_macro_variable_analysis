<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_AxB_saxpy_sparsity.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_AxB_saxpy_sparsity: determine the sparsity structure for C&lt;M or !M&gt;=A*B</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Determines the sparsity structure for C, for computing C=A*B, C&lt;M&gt;=A*B, or</comment>
<comment type="line">// C&lt;!M&gt;=A*B, based on the sparsity structures of C (on input), M, A, and B,</comment>
<comment type="line">// and whether or not M is complemented.</comment>

<comment type="line">// TODO: When A or B are bitmapped or full, they can be transposed in-place.</comment>
<comment type="line">// TODO: give the user control over this decision</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_AxB_saxpy_sparsity</name>          <comment type="line">// determine C_sparsity and method to use</comment>
<parameter_list>(
    <comment type="line">// output:</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>C_sparsity</name></decl></parameter>,                <comment type="line">// sparsity structure of C</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>saxpy_method</name></decl></parameter>,              <comment type="line">// saxpy method to use</comment>
    <comment type="line">// input:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,             <comment type="line">// optional mask for C, unused if NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_comp</name></decl></parameter>,           <comment type="line">// if true, use !M</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,             <comment type="line">// input A matrix</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>B</name></decl></parameter>,             <comment type="line">// input B matrix</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine the sparsity of C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name><name>B</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// B-&gt;nvec_nonempty is used to select the method</comment>
        <expr_stmt><expr><name><name>B</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>=</operator> <call><name>GB_nvec_nonempty</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>bnvec</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>nvec_nonempty</name></name></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>B</name><operator>-&gt;</operator><name>vdim</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>anz</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator> <call><name>GB_nnz_held</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
<comment type="line">//  double bnz = (double) GB_nnz_held (B) ;</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>M_sparsity</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>M</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>GB_sparsity</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>B_sparsity</name> <init>= <expr><call><name>GB_sparsity</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>A_sparsity</name> <init>= <expr><call><name>GB_sparsity</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>M_is_hyper</name>  <init>= <expr><operator>(</operator><name>M_sparsity</name> <operator>==</operator> <name>GxB_HYPERSPARSE</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>M_is_sparse</name> <init>= <expr><operator>(</operator><name>M_sparsity</name> <operator>==</operator> <name>GxB_SPARSE</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>M</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>Mask_comp</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>M_is_hyper</name> <operator>||</operator> <name>M_is_sparse</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//-----------------------------------------------------</comment>
        <comment type="line">// C               &lt;M&gt;=             A     *     B</comment>
        <comment type="line">//-----------------------------------------------------</comment>

        <comment type="line">// hyper            sparse          any         hyper</comment>
        <comment type="line">// hyper            hyper           any         hyper</comment>
        <comment type="line">// sparse           hyper           any         sparse/bitmap/full</comment>
        <comment type="line">// sparse           sparse          any         sparse/bitmap/full</comment>

        <comment type="line">// The non-empty columns of C are a subset of the non-empty columns of</comment>
        <comment type="line">// B, so in general, if B is hypersparse, so is C.  If B is sparse,</comment>
        <comment type="line">// bitmap, or full, then C must be sparse, regardless of the sparsity</comment>
        <comment type="line">// of A and B.  This is a restriction of GB_AxB_saxpy3.c.</comment>

        <if_stmt><if>if <condition>(<expr><name>B_sparsity</name> <operator>==</operator> <name>GxB_HYPERSPARSE</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>C_sparsity</name><operator>)</operator> <operator>=</operator> <name>GxB_HYPERSPARSE</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>C_sparsity</name><operator>)</operator> <operator>=</operator> <name>GxB_SPARSE</name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>saxpy_method</name><operator>)</operator> <operator>=</operator> <name>GB_SAXPY_METHOD_3</name></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//-----------------------------------------------------</comment>
        <comment type="line">// C                =               A     *     B</comment>
        <comment type="line">//-----------------------------------------------------</comment>

        <comment type="line">// hyper            .               hyper       hyper</comment>
        <comment type="line">// hyper            .               sparse      hyper</comment>
        <comment type="line">// hyper            .               bitmap      hyper</comment>
        <comment type="line">// hyper            .               full        hyper</comment>

        <comment type="line">// sparse           .               hyper       sparse</comment>
        <comment type="line">// sparse           .               sparse      sparse</comment>
        <comment type="line">// sparse/bitmap    .               bitmap      sparse</comment>
        <comment type="line">// sparse/bitmap    .               full        sparse</comment>

        <comment type="line">// sparse/bitmap    .               hyper       bitmap</comment>
        <comment type="line">// sparse/bitmap    .               sparse      bitmap</comment>
        <comment type="line">// bitmap           .               bitmap      bitmap</comment>
        <comment type="line">// bitmap           .               full        bitmap</comment>

        <comment type="line">// sparse/bitmap    .               hyper       full </comment>
        <comment type="line">// sparse/bitmap    .               sparse      full</comment>
        <comment type="line">// bitmap           .               bitmap      full</comment>
        <comment type="line">// bitmap (***)     .               full        full</comment>

        <comment type="line">//    (***): future, compute C as full</comment>

        <comment type="line">//-----------------------------------------------------</comment>
        <comment type="line">// C               &lt;M&gt;=             A     *     B</comment>
        <comment type="line">//-----------------------------------------------------</comment>

        <comment type="line">// hyper            any             hyper       hyper</comment>
        <comment type="line">// hyper            any             sparse      hyper</comment>
        <comment type="line">// hyper            any             bitmap      hyper</comment>
        <comment type="line">// hyper            any             full        hyper</comment>

        <comment type="line">// sparse           any             hyper       sparse</comment>
        <comment type="line">// sparse           any             sparse      sparse</comment>
        <comment type="line">// sparse/bitmap    any             bitmap      sparse</comment>
        <comment type="line">// sparse/bitmap    any             full        sparse</comment>

        <comment type="line">// sparse/bitmap    any             hyper       bitmap</comment>
        <comment type="line">// sparse/bitmap    any             sparse      bitmap</comment>
        <comment type="line">// bitmap           any             bitmap      bitmap</comment>
        <comment type="line">// bitmap           any             full        bitmap</comment>

        <comment type="line">// sparse/bitmap    bitmap/full     hyper       full    (*)</comment>
        <comment type="line">// sparse/bitmap    bitmap/full     sparse      full    (*)</comment>
        <comment type="line">// bitmap           bitmap/full     bitmap      full    (*)</comment>
        <comment type="line">// bitmap           bitmap/full     full        full    (*)</comment>

        <comment type="line">// (*): if M hyper/sparse, then C is hyper/sparse; see above</comment>

        <comment type="line">//-----------------------------------------------------</comment>
        <comment type="line">// C               &lt;!M&gt;=            A     *     B</comment>
        <comment type="line">//-----------------------------------------------------</comment>

        <comment type="line">// hyper            any             hyper       hyper</comment>
        <comment type="line">// hyper            any             sparse      hyper</comment>
        <comment type="line">// hyper            any             bitmap      hyper</comment>
        <comment type="line">// hyper            any             full        hyper</comment>

        <comment type="line">// sparse           any             hyper       sparse</comment>
        <comment type="line">// sparse           any             sparse      sparse</comment>
        <comment type="line">// sparse/bitmap    any             bitmap      sparse</comment>
        <comment type="line">// sparse/bitmap    any             full        sparse</comment>

        <comment type="line">// sparse/bitmap    any             hyper       bitmap</comment>
        <comment type="line">// sparse/bitmap    any             sparse      bitmap</comment>
        <comment type="line">// bitmap           any             bitmap      bitmap</comment>
        <comment type="line">// bitmap           any             full        bitmap</comment>

        <comment type="line">// sparse/bitmap    any             hyper       full </comment>
        <comment type="line">// sparse/bitmap    any             sparse      full</comment>
        <comment type="line">// bitmap           any             bitmap      full</comment>
        <comment type="line">// bitmap           any             full        full</comment>

        <comment type="line">// If M is complemented, or not complemented and bitmap/full, then C</comment>
        <comment type="line">// has the same sparsity as listed above, except when A and B are both</comment>
        <comment type="line">// full.</comment>

        <comment type="line">// For the cases where C is labelled as hyper/bitmap or sparse/bitmap:</comment>
        <comment type="line">// If m*n is much larger than nnz(A)+nnz(B), then always construct C as</comment>
        <comment type="line">// sparse/hyper, not bitmap.   TODO: give the user control over this</comment>
        <comment type="line">// decision.</comment>

        <comment type="line">// TODO:  for bitmap*hyper and hyper*bitmap, create a hyper_shallow</comment>
        <comment type="line">// version of the hyper matrix (like dot does), and construct C as</comment>
        <comment type="line">// bitmap.  Then expand into C into hyper.</comment>

        <switch>switch <condition>(<expr><name>B_sparsity</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>GxB_HYPERSPARSE</name></expr> :</case> 

                <comment type="line">// H = any * H</comment>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>C_sparsity</name><operator>)</operator> <operator>=</operator> <name>GxB_HYPERSPARSE</name></expr> ;</expr_stmt>
                <break>break ;</break>

            <case>case <expr><name>GxB_SPARSE</name></expr> :</case> 

                <switch>switch <condition>(<expr><name>A_sparsity</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GxB_HYPERSPARSE</name></expr> :</case> 
                    <case>case <expr><name>GxB_SPARSE</name></expr> :</case> 
                        <comment type="line">// S = {S,H} * S : C has the same sparsity as B</comment>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>C_sparsity</name><operator>)</operator> <operator>=</operator> <name>GxB_SPARSE</name></expr> ;</expr_stmt>
                        <break>break ;</break>
                    <case>case <expr><name>GxB_BITMAP</name></expr> :</case> 
                    <case>case <expr><name>GxB_FULL</name></expr> :</case> 
                        <comment type="line">// S = {B,F} * S : if B has many empty columns</comment>
                        <comment type="line">// B = {B,F} * S : otherwise C is bitmap</comment>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>C_sparsity</name><operator>)</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>bnvec</name> <operator>&lt;</operator> <name>n</name><operator>/</operator><literal type="number">4</literal><operator>)</operator></expr> ?</condition><then> <expr><name>GxB_SPARSE</name></expr> </then><else>: <expr><name>GxB_BITMAP</name></expr></else></ternary></expr>;</expr_stmt>
                        <break>break ;</break>
                    <default>default:</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GxB_BITMAP</name></expr> :</case> 
            <case>case <expr><name>GxB_FULL</name></expr> :</case> 

                <switch>switch <condition>(<expr><name>A_sparsity</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GxB_HYPERSPARSE</name></expr> :</case> 
                    <case>case <expr><name>GxB_SPARSE</name></expr> :</case> 
                        <comment type="line">// S = {S,H} * {B,F} : if A is very sparse</comment>
                        <comment type="line">// B = {S,H} * {B,F} : otherwise C is bitmap</comment>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>C_sparsity</name><operator>)</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>anz</name> <operator>&lt;</operator> <name>m</name><operator>/</operator><literal type="number">20</literal><operator>)</operator></expr> ?</condition><then> <expr><name>GxB_SPARSE</name></expr> </then><else>: <expr><name>GxB_BITMAP</name></expr></else></ternary></expr> ;</expr_stmt>
                        <break>break ;</break>
                    <case>case <expr><name>GxB_BITMAP</name></expr> :</case> 
                    <case>case <expr><name>GxB_FULL</name></expr> :</case> 
                        <comment type="line">// B = {B,F} * {B,F} : C is bitmap</comment>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>C_sparsity</name><operator>)</operator> <operator>=</operator> <name>GxB_BITMAP</name></expr> ;</expr_stmt>
                        <break>break ;</break>
                    <default>default:</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <default>default:</default> <empty_stmt>;</empty_stmt>
        </block_content>}</block></switch>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>C_sparsity</name><operator>)</operator> <operator>==</operator> <name>GxB_HYPERSPARSE</name> <operator>||</operator> <operator>(</operator><operator>*</operator><name>C_sparsity</name><operator>)</operator> <operator>==</operator> <name>GxB_SPARSE</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>saxpy_method</name><operator>)</operator> <operator>=</operator> <name>GB_SAXPY_METHOD_3</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>saxpy_method</name><operator>)</operator> <operator>=</operator> <name>GB_SAXPY_METHOD_BITMAP</name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>C_sparsity</name><operator>)</operator> <operator>==</operator> <name>GxB_HYPERSPARSE</name> <operator>||</operator> <operator>(</operator><operator>*</operator><name>C_sparsity</name><operator>)</operator> <operator>==</operator> <name>GxB_SPARSE</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// If C is sparse or hypersparse, then it will be computed by</comment>
        <comment type="line">// GB_AxB_saxpy3.  For this method, if B is hypersparse, C must also be</comment>
        <comment type="line">// hypersparse.  Otherwise C must be sparse.  This is a requirement of</comment>
        <comment type="line">// GB_AxB_saxpy3, and is also asserted there.</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>C_sparsity</name><operator>)</operator> <operator>==</operator>
            <operator>(</operator><ternary><condition><expr><operator>(</operator><name>B_sparsity</name> <operator>==</operator> <name>GxB_HYPERSPARSE</name><operator>)</operator></expr> ?</condition><then> <expr><name>GxB_HYPERSPARSE</name></expr> </then><else>: <expr><name>GxB_SPARSE</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

</unit>
