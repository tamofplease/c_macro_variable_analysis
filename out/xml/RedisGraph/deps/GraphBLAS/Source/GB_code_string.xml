<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_code_string.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_code_string: convert a type code into a string</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Given GB_Type_code, return a string with the name of the type</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GB_PUBLIC</name>
<name>char</name> <modifier>*</modifier></type><name>GB_code_string</name>            <comment type="line">// return a static string for a type name</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>code</name></decl></parameter>     <comment type="line">// code to convert to string</comment>
)</parameter_list>
<block>{<block_content>

    <switch>switch <condition>(<expr><name>code</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <return>return <expr><operator>(</operator><literal type="string">"bool"</literal>          <operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><literal type="string">"int8_t"</literal>        <operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><literal type="string">"int16_t"</literal>       <operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><literal type="string">"int32_t"</literal>       <operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><literal type="string">"int64_t"</literal>       <operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><literal type="string">"uint8_t"</literal>       <operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><literal type="string">"uint16_t"</literal>      <operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><literal type="string">"uint32_t"</literal>      <operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><literal type="string">"uint64_t"</literal>      <operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><literal type="string">"float"</literal>         <operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><literal type="string">"double"</literal>        <operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><literal type="string">"float complex"</literal> <operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><literal type="string">"double complex"</literal><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_UDT_code</name></expr>    :</case> <return>return <expr><operator>(</operator><literal type="string">"user-defined"</literal>  <operator>)</operator></expr> ;</return>
        <default>default             :</default> <return>return <expr><operator>(</operator><literal type="string">"unknown type!"</literal> <operator>)</operator></expr> ;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

</unit>
