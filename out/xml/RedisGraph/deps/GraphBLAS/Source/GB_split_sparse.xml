<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_split_sparse.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_split_sparse: split a sparse/hypersparse matrix into tiles </comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_WORKSPACE</name></cpp:macro>                   \
    <cpp:value>GB_WERK_POP (C_ek_slicing, int64_t) ;   \
    GB_FREE_WORK (&amp;Wp, Wp_size) ;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>                         \
    <cpp:value>GB_FREE_WORKSPACE ;                     \
    GB_Matrix_free (&amp;C) ;</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_split.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_split_sparse</name>            <comment type="line">// split a sparse matrix</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name> <modifier>*</modifier></type><name>Tiles</name></decl></parameter>,              <comment type="line">// 2D row-major array of size m-by-n</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name></type> <name>m</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name></type> <name>n</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Tile_rows</name></decl></parameter>,  <comment type="line">// size m+1</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Tile_cols</name></decl></parameter>,  <comment type="line">// size n+1</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,             <comment type="line">// input matrix</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>A_sparsity</name> <init>= <expr><call><name>GB_sparsity</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>A_is_hyper</name> <init>= <expr><operator>(</operator><name>A_sparsity</name> <operator>==</operator> <name>GxB_HYPERSPARSE</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>A_is_hyper</name> <operator>||</operator> <name>A_sparsity</name> <operator>==</operator> <name>GxB_SPARSE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>C</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>C_ek_slicing</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A sparse for split"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>sparsity_control</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>sparsity_control</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>hyper_switch</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>hyper_switch</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>csc</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>is_csc</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>atype</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl> ;</decl_stmt>
<comment type="line">//  int64_t avlen = A-&gt;vlen ;</comment>
<comment type="line">//  int64_t avdim = A-&gt;vdim ;</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>asize</name> <init>= <expr><name><name>atype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>nouter</name> <init>= <expr><ternary><condition><expr><name>csc</name></expr> ?</condition><then> <expr><name>n</name></expr> </then><else>: <expr><name>m</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>ninner</name> <init>= <expr><ternary><condition><expr><name>csc</name></expr> ?</condition><then> <expr><name>m</name></expr> </then><else>: <expr><name>n</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier></type><name>Tile_vdim</name> <init>= <expr><ternary><condition><expr><name>csc</name></expr> ?</condition><then> <expr><name>Tile_cols</name></expr> </then><else>: <expr><name>Tile_rows</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier></type><name>Tile_vlen</name> <init>= <expr><ternary><condition><expr><name>csc</name></expr> ?</condition><then> <expr><name>Tile_rows</name></expr> </then><else>: <expr><name>Tile_cols</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>anvec</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ah</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ai</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_iso</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate workspace</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>size_t</name></type> <name>Wp_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Wp</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>Wp</name> <operator>=</operator> <call><name>GB_MALLOC_WORK</name> <argument_list>(<argument><expr><name>anvec</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Wp_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>Wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>GB_memcpy</name> <argument_list>(<argument><expr><name>Wp</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>anvec</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// split A into tiles</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>akend</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>outer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>outer</name> <operator>&lt;</operator> <name>nouter</name></expr> ;</condition> <incr><expr><name>outer</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// find the starting and ending vector of these tiles</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// The tile appears in vectors avstart:avend-1 of A, and indices</comment>
        <comment type="line">// aistart:aiend-1.</comment>

        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>avstart</name> <init>= <expr><name><name>Tile_vdim</name> <index>[<expr><name>outer</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>avend</name>   <init>= <expr><name><name>Tile_vdim</name> <index>[<expr><name>outer</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>akstart</name> <init>= <expr><name>akend</name></expr></init></decl> ;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>A_is_hyper</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// A is hypersparse: look for vector avend in the A-&gt;h hyper list.</comment>
            <comment type="line">// The vectors to handle for this outer loop are in</comment>
            <comment type="line">// Ah [akstart:akend-1].</comment>
            <expr_stmt><expr><name>akend</name> <operator>=</operator> <name>akstart</name></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pright</name> <init>= <expr><name>anvec</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_SPLIT_BINARY_SEARCH</name> <argument_list>(<argument><expr><name>avend</name></expr></argument>, <argument><expr><name>Ah</name></expr></argument>, <argument><expr><name>akend</name></expr></argument>, <argument><expr><name>pright</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><name>akstart</name> <operator>&lt;=</operator> <name>akend</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>Ah</name> <index>[<expr><name>akend</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name>avend</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// A is sparse; the vectors to handle are akstart:akend-1</comment>
            <expr_stmt><expr><name>akend</name> <operator>=</operator> <name>avend</name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// # of vectors in all tiles in this outer loop</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>cnvec</name> <init>= <expr><name>akend</name> <operator>-</operator> <name>akstart</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nth</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>cnvec</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// create all tiles for vectors akstart:akend-1 in A</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>inner</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>inner</name> <operator>&lt;</operator> <name>ninner</name></expr> ;</condition> <incr><expr><name>inner</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// allocate C, C-&gt;p, and C-&gt;h for this tile</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>aistart</name> <init>= <expr><name><name>Tile_vlen</name> <index>[<expr><name>inner</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>aiend</name>   <init>= <expr><name><name>Tile_vlen</name> <index>[<expr><name>inner</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>cvdim</name> <init>= <expr><name>avend</name> <operator>-</operator> <name>avstart</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>cvlen</name> <init>= <expr><name>aiend</name> <operator>-</operator> <name>aistart</name></expr></init></decl> ;</decl_stmt>

            <expr_stmt><expr><name>C</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <comment type="line">// new header</comment>
                <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>cvlen</name></expr></argument>, <argument><expr><name>cvdim</name></expr></argument>, <argument><expr><name>GB_Ap_malloc</name></expr></argument>, <argument><expr><name>csc</name></expr></argument>, <argument><expr><name>A_sparsity</name></expr></argument>,
                <argument><expr><name>hyper_switch</name></expr></argument>, <argument><expr><name>cnvec</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>sparsity_control</name></name> <operator>=</operator> <name>sparsity_control</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>hyper_switch</name></name> <operator>=</operator> <name>hyper_switch</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvec</name></name> <operator>=</operator> <name>cnvec</name></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cp</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ch</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// determine the boundaries of this tile</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name></decl> ;</decl_stmt>
            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nth</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>akstart</name></expr> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>akend</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pA</name> <init>= <expr><name><name>Wp</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pA_end</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>aknz</name> <init>= <expr><name>pA_end</name> <operator>-</operator> <name>pA</name></expr></init></decl> ;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>aknz</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>Ai</name> <index>[<expr><name>pA</name></expr>]</index></name> <operator>&gt;=</operator> <name>aiend</name></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// this vector of C is empty</comment>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name>aknz</name> <operator>&gt;</operator> <literal type="number">256</literal></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// use binary search to find aiend</comment>
                    <decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pright</name> <init>= <expr><name>pA_end</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>GB_SPLIT_BINARY_SEARCH</name> <argument_list>(<argument><expr><name>aiend</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>pright</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_DEBUG</name></cpp:ifdef>
                    <comment type="line">// check the results with a linear search</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>p2</name> <init>= <expr><name><name>Wp</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <for>for <control>( <init>;</init> <condition><expr><name>p2</name> <operator>&lt;</operator> <name><name>Ap</name> <index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> ;</condition> <incr><expr><name>p2</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name><name>Ai</name> <index>[<expr><name>p2</name></expr>]</index></name> <operator>&gt;=</operator> <name>aiend</name></expr>)</condition><block type="pseudo"><block_content> <break>break ;</break></block_content></block></if></if_stmt>
                    </block_content>}</block></for>
                    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>pA</name> <operator>==</operator> <name>p2</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content> 
                    <comment type="line">// use a linear-time search to find aiend</comment>
                    <for>for <control>( <init>;</init> <condition><expr><name>pA</name> <operator>&lt;</operator> <name>pA_end</name></expr> ;</condition> <incr><expr><name>pA</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name><name>Ai</name> <index>[<expr><name>pA</name></expr>]</index></name> <operator>&gt;=</operator> <name>aiend</name></expr>)</condition><block type="pseudo"><block_content> <break>break ;</break></block_content></block></if></if_stmt>
                    </block_content>}</block></for>
                    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_DEBUG</name></cpp:ifdef>
                    <comment type="line">// check the results with a binary search</comment>
                    <decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>p2</name> <init>= <expr><name><name>Wp</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>p2_end</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>GB_SPLIT_BINARY_SEARCH</name> <argument_list>(<argument><expr><name>aiend</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p2_end</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>pA</name> <operator>==</operator> <name>p2</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><name><name>Cp</name> <index>[<expr><name>k</name><operator>-</operator><name>akstart</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>pA</name> <operator>-</operator> <name><name>Wp</name> <index>[<expr><name>k</name></expr>]</index></name><operator>)</operator></expr> ;</expr_stmt> <comment type="line">// # of entries in this vector</comment>
                <if_stmt><if>if <condition>(<expr><name>A_is_hyper</name></expr>)</condition>
                <block>{<block_content> 
                    <expr_stmt><expr><name><name>Ch</name> <index>[<expr><name>k</name><operator>-</operator><name>akstart</name></expr>]</index></name> <operator>=</operator> <name><name>Ah</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <name>avstart</name></expr> ;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>

            <expr_stmt><expr><call><name>GB_cumsum</name> <argument_list>(<argument><expr><name>Cp</name></expr></argument>, <argument><expr><name>cnvec</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>nvec_nonempty</name></name><operator>)</operator></expr></argument>, <argument><expr><name>nth</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>cnz</name> <init>= <expr><name><name>Cp</name> <index>[<expr><name>cnvec</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// allocate C-&gt;i and C-&gt;x for this tile</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// set C-&gt;iso = A_iso       OK</comment>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_bix_alloc</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>cnz</name></expr></argument>, <argument><expr><name>GxB_SPARSE</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>,
                <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ci</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <name>cnz</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>       <comment type="line">// for GB_nnz_held(C), to slice C</comment>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// copy the tile from A into C</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int</name></type> <name>C_ntasks</name></decl>, <decl><type ref="prev"/><name>C_nthreads</name></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_SLICE_MATRIX</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>A_iso</name></expr>)</condition>
            <block>{<block_content> 

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// split an iso matrix A into an iso tile C</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <comment type="line">// A is iso and so is C; copy the iso entry</comment>
                <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(iso sparse split) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ISO_SPLIT</name></cpp:macro></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COPY</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>;</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_split_sparse_template.c"</cpp:file></cpp:include>

            </block_content>}</block></if>
            <else>else
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// split a non-iso matrix A into an non-iso tile C</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA_DEV</name></cpp:ifndef>
                <comment type="line">// no typecasting needed</comment>
                <switch>switch <condition>(<expr><name>asize</name></expr>)</condition>
                <block>{<block_content>
                    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_COPY</name></cpp:undef>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COPY</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Cx [pC] = Ax [pA] ;</cpp:value></cpp:define>

                    <case>case <expr><name>GB_1BYTE</name></expr> :</case> <comment type="line">// uint8, int8, bool, or 1-byte user-defined</comment>
                        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CTYPE</name></cpp:macro> <cpp:value>uint8_t</cpp:value></cpp:define>
                        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_split_sparse_template.c"</cpp:file></cpp:include>
                        <break>break ;</break>

                    <case>case <expr><name>GB_2BYTE</name></expr> :</case> <comment type="line">// uint16, int16, or 2-byte user-defined</comment>
                        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CTYPE</name></cpp:macro> <cpp:value>uint16_t</cpp:value></cpp:define>
                        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_split_sparse_template.c"</cpp:file></cpp:include>
                        <break>break ;</break>

                    <case>case <expr><name>GB_4BYTE</name></expr> :</case> <comment type="line">// uint32, int32, float, or 4-byte user</comment>
                        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CTYPE</name></cpp:macro> <cpp:value>uint32_t</cpp:value></cpp:define>
                        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_split_sparse_template.c"</cpp:file></cpp:include>
                        <break>break ;</break>

                    <case>case <expr><name>GB_8BYTE</name></expr> :</case> <comment type="line">// uint64, int64, double, float complex,</comment>
                                    <comment type="line">// or 8-byte user defined</comment>
                        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CTYPE</name></cpp:macro> <cpp:value>uint64_t</cpp:value></cpp:define>
                        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_split_sparse_template.c"</cpp:file></cpp:include>
                        <break>break ;</break>

                    <case>case <expr><name>GB_16BYTE</name></expr> :</case> <comment type="line">// double complex or 16-byte user-defined</comment>
                        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CTYPE</name></cpp:macro> <cpp:value>GB_blob16</cpp:value></cpp:define>
                        <comment type="block">/*
                        #define GB_CTYPE uint64_t
                        #undef  GB_COPY
                        #define GB_COPY(pC,pA)                  \
                            Cx [2*pC  ] = Ax [2*pA  ] ;         \
                            Cx [2*pC+1] = Ax [2*pA+1] ;
                        */</comment>
                        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_split_sparse_template.c"</cpp:file></cpp:include>
                        <break>break ;</break>

                    <default>default:</default><empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            </block_content>}</block></else></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// user-defined types</comment>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CTYPE</name></cpp:macro> <cpp:value>GB_void</cpp:value></cpp:define>
                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_COPY</name></cpp:undef>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COPY</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>)</parameter_list></cpp:macro>                          \
                    <cpp:value>memcpy (Cx + (pC)*asize, Ax +(pA)*asize, asize) ;</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_split_sparse_template.c"</cpp:file></cpp:include>
            </block_content>}</block></if></if_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// free workspace</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>GB_WERK_POP</name> <argument_list>(<argument><expr><name>C_ek_slicing</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// advance to the next tile</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <if_stmt><if>if <condition>(<expr><name>inner</name> <operator>&lt;</operator> <name>ninner</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name></decl> ;</decl_stmt>
                <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nth</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
                <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>akstart</name></expr> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>akend</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content> 
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>ck</name> <init>= <expr><name>k</name> <operator>-</operator> <name>akstart</name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>cknz</name> <init>= <expr><name><name>Cp</name> <index>[<expr><name>ck</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>Cp</name> <index>[<expr><name>ck</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><name><name>Wp</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>+=</operator> <name>cknz</name></expr> ;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// conform the tile and save it in the Tiles array</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C for GB_split"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_hypermatrix_prune</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_conform</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>csc</name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>GB_TILE</name> <argument_list>(<argument><expr><name>Tiles</name></expr></argument>, <argument><expr><name>inner</name></expr></argument>, <argument><expr><name>outer</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>C</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <expr_stmt><expr><call><name>GB_TILE</name> <argument_list>(<argument><expr><name>Tiles</name></expr></argument>, <argument><expr><name>outer</name></expr></argument>, <argument><expr><name>inner</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>C</name></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"final tile C for GB_split"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>C</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <expr_stmt><expr><name>GB_FREE_WORKSPACE</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
