<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_Iterator_attach.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_Iterator_attach: attach an iterator to matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GB_Iterator_attach</name>
<parameter_list>(
    <comment type="line">// input/output:</comment>
    <parameter><decl><type><name>GxB_Iterator</name></type> <name>iterator</name></decl></parameter>,      <comment type="line">// iterator to attach to the matrix A</comment>
    <comment type="line">// input</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,               <comment type="line">// matrix to attach</comment>
    <parameter><decl><type><name>GxB_Format_Value</name></type> <name>format</name></decl></parameter>,    <comment type="line">// by row, by col, or by entry (GxB_NO_FORMAT)</comment>
    <parameter><decl><type><name>GrB_Descriptor</name></type> <name>desc</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>format</name> <operator>==</operator> <name>GxB_BY_ROW</name> <operator>&amp;&amp;</operator>  <name><name>A</name><operator>-&gt;</operator><name>is_csc</name></name><operator>)</operator> <operator>||</operator>
        <operator>(</operator><name>format</name> <operator>==</operator> <name>GxB_BY_COL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>A</name><operator>-&gt;</operator><name>is_csc</name></name><operator>)</operator></expr>)</condition>
    <block>{<block_content> 
        <return>return <expr><operator>(</operator><name>GrB_NOT_IMPLEMENTED</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// finish any pending work on the matrix</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><call><name>GB_ANY_PENDING_WORK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GB_CONTEXT</name> <argument_list>(<argument><expr><literal type="string">"GxB_Iterator_attach"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>desc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// get the # of threads to use</comment>
            <expr_stmt><expr><name><name>Context</name><operator>-&gt;</operator><name>nthreads_max</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>nthreads_max</name></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>Context</name><operator>-&gt;</operator><name>chunk</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>chunk</name></name></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_wait</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A"</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// clear the current position</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>pstart</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>pend</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the matrix and save its contents in the iterator</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>pmax</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>GB_nnz_held</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></else></ternary></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>avlen</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>avdim</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>anvec</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>Ap</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>Ah</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>Ab</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>b</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>Ai</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>Ax</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>type_size</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>A_sparsity</name></name> <operator>=</operator> <call><name>GB_sparsity</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>iso</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>by_col</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>is_csc</name></name></expr> ;</expr_stmt>

    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
